// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BYDLD.proto

#include "BYDLD.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AwardDetail_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AwardPoolData_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AwardPoolRecord_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AwardProp_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AztecClearReward_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AztecDataInfo_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AztecGemConfig_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AztecGemConfigItem_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AztecStep_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AztecTable_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BigSmallRecord_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Capturefish_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChestBrief_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CritWheel_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Decimal_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DevouredFish_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DragonBallConfig_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DragonBallInfo_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DragonBallWheelInfo_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EffectFish_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EffectInfo_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FishTrace_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FishTraces_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GemConfig_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GiftBag_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GoldenJadeInfo_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GoodsInfo_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GunDetail_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GunSpecEffect_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HBonusPool_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HistoryRank_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HitFish_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IngotInfo_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ItemEnableInfo_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ItemWheel_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JadeAwardInfo_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JumpHighArena_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LuckyInfo_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LuckyRecord_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LuckyTaskInfo_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MagicCardInfo_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MagicInfo_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MatchInfoTip_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchPackAddition_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewYearCardActivityInfo_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NewYearCardAward_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewYearCardAwardRecord_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewYearCardMultiple_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Object2_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Object3_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Object4_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectData_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OctopusKingInfo_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OctopusKingItem_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpenChestReward_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OwnRecord_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Prop_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RealRank_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResultRank_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RewardConf_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RewardTask_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCRewardTaskFinish_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SkillTime_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpecEffect_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StationBase_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TridentRankList_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserAwardItem_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserPoolActivityInfo_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserProp_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserShoot_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserShootRsp_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WingsInfo_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WingsSpecEffect_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Zeus_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_roulette_result_BYDLD_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_zeus_result_BYDLD_2eproto;
namespace BYDLD {
class SC_SceneInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_SceneInfo> _instance;
} _SC_SceneInfo_default_instance_;
class GunSpecEffectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GunSpecEffect> _instance;
} _GunSpecEffect_default_instance_;
class WingsSpecEffectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WingsSpecEffect> _instance;
} _WingsSpecEffect_default_instance_;
class WingsInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WingsInfo> _instance;
} _WingsInfo_default_instance_;
class PurchaseGunDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PurchaseGun> _instance;
} _PurchaseGun_default_instance_;
class SCVipInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCVipInfo> _instance;
} _SCVipInfo_default_instance_;
class GunDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GunDetail> _instance;
} _GunDetail_default_instance_;
class SCWingsInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCWingsInfo> _instance;
} _SCWingsInfo_default_instance_;
class SCGunInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGunInfo> _instance;
} _SCGunInfo_default_instance_;
class SCPurchaseCheckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPurchaseCheck> _instance;
} _SCPurchaseCheck_default_instance_;
class ObjectDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectData> _instance;
} _ObjectData_default_instance_;
class Object2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Object2> _instance;
} _Object2_default_instance_;
class Object3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Object3> _instance;
} _Object3_default_instance_;
class Object4DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Object4> _instance;
} _Object4_default_instance_;
class DecimalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Decimal> _instance;
} _Decimal_default_instance_;
class CSTridentInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSTridentInfo> _instance;
} _CSTridentInfo_default_instance_;
class SCTridentInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCTridentInfo> _instance;
} _SCTridentInfo_default_instance_;
class CSTridentBetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSTridentBet> _instance;
} _CSTridentBet_default_instance_;
class SCTridentBetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCTridentBet> _instance;
} _SCTridentBet_default_instance_;
class SCPropsTridentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPropsTrident> _instance;
} _SCPropsTrident_default_instance_;
class CSBigSmallChooseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSBigSmallChoose> _instance;
} _CSBigSmallChoose_default_instance_;
class SCBigSmallChooseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCBigSmallChoose> _instance;
} _SCBigSmallChoose_default_instance_;
class CSBigSmallBetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSBigSmallBet> _instance;
} _CSBigSmallBet_default_instance_;
class SCBigSmallBetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCBigSmallBet> _instance;
} _SCBigSmallBet_default_instance_;
class CSShootTorpedoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSShootTorpedo> _instance;
} _CSShootTorpedo_default_instance_;
class SCShootTorpedoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCShootTorpedo> _instance;
} _SCShootTorpedo_default_instance_;
class SCPropsTorpedoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPropsTorpedo> _instance;
} _SCPropsTorpedo_default_instance_;
class AwardPoolDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AwardPoolData> _instance;
} _AwardPoolData_default_instance_;
class SCPropsAwardPoolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPropsAwardPool> _instance;
} _SCPropsAwardPool_default_instance_;
class CSLoginGameWithTokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSLoginGameWithToken> _instance;
} _CSLoginGameWithToken_default_instance_;
class SCLoginGameWithTokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCLoginGameWithToken> _instance;
} _SCLoginGameWithToken_default_instance_;
class CSUserReadyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSUserReady> _instance;
} _CSUserReady_default_instance_;
class EffectInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EffectInfo> _instance;
} _EffectInfo_default_instance_;
class SpecEffectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpecEffect> _instance;
} _SpecEffect_default_instance_;
class StationBaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StationBase> _instance;
} _StationBase_default_instance_;
class SCUserReadyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUserReady> _instance;
} _SCUserReady_default_instance_;
class JadeAwardInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JadeAwardInfo> _instance;
} _JadeAwardInfo_default_instance_;
class CSJadeAwardInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSJadeAwardInfo> _instance;
} _CSJadeAwardInfo_default_instance_;
class SCJadeAwardInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCJadeAwardInfo> _instance;
} _SCJadeAwardInfo_default_instance_;
class CSNotifyLogoutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSNotifyLogout> _instance;
} _CSNotifyLogout_default_instance_;
class SCNotifyLogoutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCNotifyLogout> _instance;
} _SCNotifyLogout_default_instance_;
class CSSetProbabilityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSetProbability> _instance;
} _CSSetProbability_default_instance_;
class SCSetProbabilityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSetProbability> _instance;
} _SCSetProbability_default_instance_;
class UserShootDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserShoot> _instance;
} _UserShoot_default_instance_;
class CSUserShootMultiDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSUserShootMulti> _instance;
} _CSUserShootMulti_default_instance_;
class UserShootRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserShootRsp> _instance;
} _UserShootRsp_default_instance_;
class SCUserShootMultiDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUserShootMulti> _instance;
} _SCUserShootMulti_default_instance_;
class HitFishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HitFish> _instance;
} _HitFish_default_instance_;
class CSHitMultiFishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSHitMultiFish> _instance;
} _CSHitMultiFish_default_instance_;
class EffectFishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EffectFish> _instance;
} _EffectFish_default_instance_;
class DragonBallWheelInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DragonBallWheelInfo> _instance;
} _DragonBallWheelInfo_default_instance_;
class DragonBallInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DragonBallInfo> _instance;
} _DragonBallInfo_default_instance_;
class OctopusKingItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OctopusKingItem> _instance;
} _OctopusKingItem_default_instance_;
class OctopusKingInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OctopusKingInfo> _instance;
} _OctopusKingInfo_default_instance_;
class MagicCardInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MagicCardInfo> _instance;
} _MagicCardInfo_default_instance_;
class MagicInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MagicInfo> _instance;
} _MagicInfo_default_instance_;
class roulette_resultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<roulette_result> _instance;
} _roulette_result_default_instance_;
class zeus_resultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<zeus_result> _instance;
} _zeus_result_default_instance_;
class ZeusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Zeus> _instance;
} _Zeus_default_instance_;
class GemConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GemConfig> _instance;
} _GemConfig_default_instance_;
class SCGemConfigListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGemConfigList> _instance;
} _SCGemConfigList_default_instance_;
class ItemWheelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ItemWheel> _instance;
} _ItemWheel_default_instance_;
class CritWheelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CritWheel> _instance;
} _CritWheel_default_instance_;
class GoldenJadeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GoldenJadeInfo> _instance;
} _GoldenJadeInfo_default_instance_;
class AztecGemConfigItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AztecGemConfigItem> _instance;
} _AztecGemConfigItem_default_instance_;
class AztecGemConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AztecGemConfig> _instance;
} _AztecGemConfig_default_instance_;
class CSAztecGemConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSAztecGemConfig> _instance;
} _CSAztecGemConfig_default_instance_;
class SCAztecGemConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCAztecGemConfig> _instance;
} _SCAztecGemConfig_default_instance_;
class AztecClearRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AztecClearReward> _instance;
} _AztecClearReward_default_instance_;
class AztecTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AztecTable> _instance;
} _AztecTable_default_instance_;
class AztecStepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AztecStep> _instance;
} _AztecStep_default_instance_;
class AztecDataInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AztecDataInfo> _instance;
} _AztecDataInfo_default_instance_;
class CapturefishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Capturefish> _instance;
} _Capturefish_default_instance_;
class SCHitMultiFishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCHitMultiFish> _instance;
} _SCHitMultiFish_default_instance_;
class CSSyncMoneyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSyncMoney> _instance;
} _CSSyncMoney_default_instance_;
class SCSyncMoneyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSyncMoney> _instance;
} _SCSyncMoney_default_instance_;
class FishTraceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FishTrace> _instance;
} _FishTrace_default_instance_;
class SCFishTracesListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCFishTracesList> _instance;
} _SCFishTracesList_default_instance_;
class FishTracesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FishTraces> _instance;
} _FishTraces_default_instance_;
class CSSyncFishReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSyncFishReq> _instance;
} _CSSyncFishReq_default_instance_;
class SCSyncFishReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSyncFishReq> _instance;
} _SCSyncFishReq_default_instance_;
class CSSyncFishRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSyncFishRsp> _instance;
} _CSSyncFishRsp_default_instance_;
class SCSyncFishRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSyncFishRsp> _instance;
} _SCSyncFishRsp_default_instance_;
class SCChangeSceneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCChangeScene> _instance;
} _SCChangeScene_default_instance_;
class CSFishOutsideScreenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSFishOutsideScreen> _instance;
} _CSFishOutsideScreen_default_instance_;
class CSLockFishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSLockFish> _instance;
} _CSLockFish_default_instance_;
class SCLockFishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCLockFish> _instance;
} _SCLockFish_default_instance_;
class CSSetSkillDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSetSkill> _instance;
} _CSSetSkill_default_instance_;
class SCSetSkillDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSetSkill> _instance;
} _SCSetSkill_default_instance_;
class SCUserTimeoutKickDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUserTimeoutKick> _instance;
} _SCUserTimeoutKick_default_instance_;
class CSUserRunBackgroundDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSUserRunBackground> _instance;
} _CSUserRunBackground_default_instance_;
class SCUserRunBackgroundDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUserRunBackground> _instance;
} _SCUserRunBackground_default_instance_;
class CSUpdateHallPropDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSUpdateHallProp> _instance;
} _CSUpdateHallProp_default_instance_;
class CSHeartBeatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSHeartBeat> _instance;
} _CSHeartBeat_default_instance_;
class SCHeartBeatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCHeartBeat> _instance;
} _SCHeartBeat_default_instance_;
class SCComTaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCComTask> _instance;
} _SCComTask_default_instance_;
class CSTaskInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSTaskInfo> _instance;
} _CSTaskInfo_default_instance_;
class SCTaskInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCTaskInfo> _instance;
} _SCTaskInfo_default_instance_;
class UserScoreRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserScoreRecord> _instance;
} _UserScoreRecord_default_instance_;
class CSFreeTimeEndDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSFreeTimeEnd> _instance;
} _CSFreeTimeEnd_default_instance_;
class SCSyncFreeTimesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSyncFreeTimes> _instance;
} _SCSyncFreeTimes_default_instance_;
class CSClickStatisticDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSClickStatistic> _instance;
} _CSClickStatistic_default_instance_;
class JumpHighArenaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JumpHighArena> _instance;
} _JumpHighArena_default_instance_;
class GiftBagDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GiftBag> _instance;
} _GiftBag_default_instance_;
class NewYearCardActivityInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewYearCardActivityInfo> _instance;
} _NewYearCardActivityInfo_default_instance_;
class UserPoolActivityInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserPoolActivityInfo> _instance;
} _UserPoolActivityInfo_default_instance_;
class DragonBallConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DragonBallConfig> _instance;
} _DragonBallConfig_default_instance_;
class SCActivityInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCActivityInfo> _instance;
} _SCActivityInfo_default_instance_;
class SCPropEndNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPropEndNotify> _instance;
} _SCPropEndNotify_default_instance_;
class SCPropDropNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPropDropNotify> _instance;
} _SCPropDropNotify_default_instance_;
class PropDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Prop> _instance;
} _Prop_default_instance_;
class UserPropDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserProp> _instance;
} _UserProp_default_instance_;
class UsersPropDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsersProp> _instance;
} _UsersProp_default_instance_;
class SSAwardPoolMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSAwardPoolMsg> _instance;
} _SSAwardPoolMsg_default_instance_;
class CSScratchNewYearCardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSScratchNewYearCard> _instance;
} _CSScratchNewYearCard_default_instance_;
class CSBuyNewYearCardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSBuyNewYearCard> _instance;
} _CSBuyNewYearCard_default_instance_;
class NewYearCardMultipleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewYearCardMultiple> _instance;
} _NewYearCardMultiple_default_instance_;
class SCScratchNewYearCardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCScratchNewYearCard> _instance;
} _SCScratchNewYearCard_default_instance_;
class CSNewYearCardExchangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSNewYearCardExchange> _instance;
} _CSNewYearCardExchange_default_instance_;
class NewYearCardAwardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewYearCardAward> _instance;
} _NewYearCardAward_default_instance_;
class SCNewYearCardExchangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCNewYearCardExchange> _instance;
} _SCNewYearCardExchange_default_instance_;
class CSNewYearCardAwardRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSNewYearCardAwardRecord> _instance;
} _CSNewYearCardAwardRecord_default_instance_;
class NewYearCardAwardRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewYearCardAwardRecord> _instance;
} _NewYearCardAwardRecord_default_instance_;
class SCNewYearCardAwardRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCNewYearCardAwardRecord> _instance;
} _SCNewYearCardAwardRecord_default_instance_;
class SkillTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SkillTime> _instance;
} _SkillTime_default_instance_;
class CSSaveSkillTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSaveSkillTime> _instance;
} _CSSaveSkillTime_default_instance_;
class CSSuperTridentShootDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSuperTridentShoot> _instance;
} _CSSuperTridentShoot_default_instance_;
class SCSuperTridentShootDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSuperTridentShoot> _instance;
} _SCSuperTridentShoot_default_instance_;
class CSSuperTridentAttackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSuperTridentAttack> _instance;
} _CSSuperTridentAttack_default_instance_;
class CommonRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommonResp> _instance;
} _CommonResp_default_instance_;
class CSAwardPoolRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSAwardPoolRecord> _instance;
} _CSAwardPoolRecord_default_instance_;
class AwardPoolRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AwardPoolRecord> _instance;
} _AwardPoolRecord_default_instance_;
class SCAwardPoolRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCAwardPoolRecord> _instance;
} _SCAwardPoolRecord_default_instance_;
class CSFortuneShootDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSFortuneShoot> _instance;
} _CSFortuneShoot_default_instance_;
class SCFortuneShootDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCFortuneShoot> _instance;
} _SCFortuneShoot_default_instance_;
class IngotInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IngotInfo> _instance;
} _IngotInfo_default_instance_;
class SCSyncFortuneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSyncFortune> _instance;
} _SCSyncFortune_default_instance_;
class CSUserPoolInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSUserPoolInfo> _instance;
} _CSUserPoolInfo_default_instance_;
class GoodsInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GoodsInfo> _instance;
} _GoodsInfo_default_instance_;
class UserAwardItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserAwardItem> _instance;
} _UserAwardItem_default_instance_;
class SCUserPoolInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUserPoolInfo> _instance;
} _SCUserPoolInfo_default_instance_;
class CSUserPoolStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSUserPoolStatus> _instance;
} _CSUserPoolStatus_default_instance_;
class SCUserPoolStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUserPoolStatus> _instance;
} _SCUserPoolStatus_default_instance_;
class CSUserPoolPreDrawDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSUserPoolPreDraw> _instance;
} _CSUserPoolPreDraw_default_instance_;
class SCUserPoolPreDrawDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUserPoolPreDraw> _instance;
} _SCUserPoolPreDraw_default_instance_;
class CSUserPoolDrawDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSUserPoolDraw> _instance;
} _CSUserPoolDraw_default_instance_;
class SCUserPoolDrawDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUserPoolDraw> _instance;
} _SCUserPoolDraw_default_instance_;
class SCUserPoolAddDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUserPoolAdd> _instance;
} _SCUserPoolAdd_default_instance_;
class ResultRankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResultRank> _instance;
} _ResultRank_default_instance_;
class SCMatchResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCMatchResult> _instance;
} _SCMatchResult_default_instance_;
class MatchPackAdditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchPackAddition> _instance;
} _MatchPackAddition_default_instance_;
class CSMatchPackAdditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSMatchPackAddition> _instance;
} _CSMatchPackAddition_default_instance_;
class SCMatchPackAdditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCMatchPackAddition> _instance;
} _SCMatchPackAddition_default_instance_;
class SCMatchPackInvailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCMatchPackInvail> _instance;
} _SCMatchPackInvail_default_instance_;
class HttpResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HttpResult> _instance;
} _HttpResult_default_instance_;
class CSHBonusPoolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSHBonusPool> _instance;
} _CSHBonusPool_default_instance_;
class HBonusPoolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HBonusPool> _instance;
} _HBonusPool_default_instance_;
class SCHBonusPoolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCHBonusPool> _instance;
} _SCHBonusPool_default_instance_;
class CSHRankBarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSHRankBar> _instance;
} _CSHRankBar_default_instance_;
class SCHRankBarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCHRankBar> _instance;
} _SCHRankBar_default_instance_;
class RealRankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RealRank> _instance;
} _RealRank_default_instance_;
class CSHRealRankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSHRealRank> _instance;
} _CSHRealRank_default_instance_;
class SCHRealRankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCHRealRank> _instance;
} _SCHRealRank_default_instance_;
class RewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Reward> _instance;
} _Reward_default_instance_;
class CSHRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSHReward> _instance;
} _CSHReward_default_instance_;
class SCHRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCHReward> _instance;
} _SCHReward_default_instance_;
class CSHMatchInfoTipDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSHMatchInfoTip> _instance;
} _CSHMatchInfoTip_default_instance_;
class MatchInfoTipDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchInfoTip> _instance;
} _MatchInfoTip_default_instance_;
class SCHMatchInfoTipDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCHMatchInfoTip> _instance;
} _SCHMatchInfoTip_default_instance_;
class CSHMatchInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSHMatchInfo> _instance;
} _CSHMatchInfo_default_instance_;
class SCHMatchInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCHMatchInfo> _instance;
} _SCHMatchInfo_default_instance_;
class HistoryRankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HistoryRank> _instance;
} _HistoryRank_default_instance_;
class CSHHistoryRankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSHHistoryRank> _instance;
} _CSHHistoryRank_default_instance_;
class SCHHistoryRankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCHHistoryRank> _instance;
} _SCHHistoryRank_default_instance_;
class CSHLuckyInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSHLuckyInfo> _instance;
} _CSHLuckyInfo_default_instance_;
class LuckyInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LuckyInfo> _instance;
} _LuckyInfo_default_instance_;
class SCHLuckyInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCHLuckyInfo> _instance;
} _SCHLuckyInfo_default_instance_;
class AwardDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AwardDetail> _instance;
} _AwardDetail_default_instance_;
class SCLuckyAwardNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCLuckyAwardNotify> _instance;
} _SCLuckyAwardNotify_default_instance_;
class AwardPropDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AwardProp> _instance;
} _AwardProp_default_instance_;
class LuckyTaskInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LuckyTaskInfo> _instance;
} _LuckyTaskInfo_default_instance_;
class CSLuckyDrawInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSLuckyDrawInfo> _instance;
} _CSLuckyDrawInfo_default_instance_;
class SCLuckyDrawInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCLuckyDrawInfo> _instance;
} _SCLuckyDrawInfo_default_instance_;
class CSGetLuckyTaskAwardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSGetLuckyTaskAward> _instance;
} _CSGetLuckyTaskAward_default_instance_;
class SCLuckyTaskInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCLuckyTaskInfo> _instance;
} _SCLuckyTaskInfo_default_instance_;
class CSGetLuckyNumDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSGetLuckyNum> _instance;
} _CSGetLuckyNum_default_instance_;
class SCGetLuckyNumDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGetLuckyNum> _instance;
} _SCGetLuckyNum_default_instance_;
class CSLuckyRedDotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSLuckyRedDot> _instance;
} _CSLuckyRedDot_default_instance_;
class SCLuckyRedDotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCLuckyRedDot> _instance;
} _SCLuckyRedDot_default_instance_;
class LuckyRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LuckyRecord> _instance;
} _LuckyRecord_default_instance_;
class OwnRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OwnRecord> _instance;
} _OwnRecord_default_instance_;
class CSLuckyRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSLuckyRecord> _instance;
} _CSLuckyRecord_default_instance_;
class SCLuckyRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCLuckyRecord> _instance;
} _SCLuckyRecord_default_instance_;
class SCOwnRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCOwnRecord> _instance;
} _SCOwnRecord_default_instance_;
class CSDragonWheelStartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSDragonWheelStart> _instance;
} _CSDragonWheelStart_default_instance_;
class SCDragonWheelStopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCDragonWheelStop> _instance;
} _SCDragonWheelStop_default_instance_;
class SCSyncHallPropDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSyncHallProp> _instance;
} _SCSyncHallProp_default_instance_;
class CSCheckDragonWheelPropDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSCheckDragonWheelProp> _instance;
} _CSCheckDragonWheelProp_default_instance_;
class SCCheckDragonWheelPropDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCCheckDragonWheelProp> _instance;
} _SCCheckDragonWheelProp_default_instance_;
class CSUserPoolDoubleInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSUserPoolDoubleInfo> _instance;
} _CSUserPoolDoubleInfo_default_instance_;
class SCUserPoolDoubleInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUserPoolDoubleInfo> _instance;
} _SCUserPoolDoubleInfo_default_instance_;
class CSUserPoolDoubleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSUserPoolDouble> _instance;
} _CSUserPoolDouble_default_instance_;
class SCUserPoolDoubleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUserPoolDouble> _instance;
} _SCUserPoolDouble_default_instance_;
class CSLuckyPoolInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSLuckyPoolInfo> _instance;
} _CSLuckyPoolInfo_default_instance_;
class SCLuckyPoolInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCLuckyPoolInfo> _instance;
} _SCLuckyPoolInfo_default_instance_;
class CSLuckyPoolDrawDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSLuckyPoolDraw> _instance;
} _CSLuckyPoolDraw_default_instance_;
class SCLuckyPoolDrawDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCLuckyPoolDraw> _instance;
} _SCLuckyPoolDraw_default_instance_;
class TridentRankListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TridentRankList> _instance;
} _TridentRankList_default_instance_;
class SCTridentRankResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCTridentRankResult> _instance;
} _SCTridentRankResult_default_instance_;
class CSBigSmallWinInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSBigSmallWinInfo> _instance;
} _CSBigSmallWinInfo_default_instance_;
class SCBigSmallWinInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCBigSmallWinInfo> _instance;
} _SCBigSmallWinInfo_default_instance_;
class CSBigSmallRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSBigSmallRecord> _instance;
} _CSBigSmallRecord_default_instance_;
class BigSmallRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BigSmallRecord> _instance;
} _BigSmallRecord_default_instance_;
class SCBigSmallRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCBigSmallRecord> _instance;
} _SCBigSmallRecord_default_instance_;
class ItemEnableInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ItemEnableInfo> _instance;
} _ItemEnableInfo_default_instance_;
class ItemEnableNoticeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ItemEnableNotice> _instance;
} _ItemEnableNotice_default_instance_;
class RewardTaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RewardTask> _instance;
} _RewardTask_default_instance_;
class RewardConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RewardConf> _instance;
} _RewardConf_default_instance_;
class CSReqRewardAddTaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSReqRewardAddTask> _instance;
} _CSReqRewardAddTask_default_instance_;
class SCRepRewardTaskListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCRepRewardTaskList> _instance;
} _SCRepRewardTaskList_default_instance_;
class SCRewardTaskFinishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCRewardTaskFinish> _instance;
} _SCRewardTaskFinish_default_instance_;
class SCSyncRewardTaskResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSyncRewardTaskResult> _instance;
} _SCSyncRewardTaskResult_default_instance_;
class CSReqRewardRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSReqRewardRecord> _instance;
} _CSReqRewardRecord_default_instance_;
class SCRepRewardTaskRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCRepRewardTaskRecord> _instance;
} _SCRepRewardTaskRecord_default_instance_;
class CSRewardChangeAutoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSRewardChangeAuto> _instance;
} _CSRewardChangeAuto_default_instance_;
class SCRewardAutoRepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCRewardAutoRep> _instance;
} _SCRewardAutoRep_default_instance_;
class SCSeaCrabCreateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSeaCrabCreate> _instance;
} _SCSeaCrabCreate_default_instance_;
class CSSyncCrabStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSyncCrabStatus> _instance;
} _CSSyncCrabStatus_default_instance_;
class SCSyncCrabStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSyncCrabStatus> _instance;
} _SCSyncCrabStatus_default_instance_;
class CSDragonBallEndDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSDragonBallEnd> _instance;
} _CSDragonBallEnd_default_instance_;
class SCDragonBallResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCDragonBallRes> _instance;
} _SCDragonBallRes_default_instance_;
class DevouredFishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DevouredFish> _instance;
} _DevouredFish_default_instance_;
class CSDevourHitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSDevourHit> _instance;
} _CSDevourHit_default_instance_;
class SCDevourHitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCDevourHit> _instance;
} _SCDevourHit_default_instance_;
class OpenChestRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpenChestReward> _instance;
} _OpenChestReward_default_instance_;
class SCUpdateChestStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUpdateChestStatus> _instance;
} _SCUpdateChestStatus_default_instance_;
class CSChestConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSChestConfig> _instance;
} _CSChestConfig_default_instance_;
class ChestBriefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChestBrief> _instance;
} _ChestBrief_default_instance_;
class SCChestConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCChestConfig> _instance;
} _SCChestConfig_default_instance_;
class CSOpenChestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSOpenChest> _instance;
} _CSOpenChest_default_instance_;
class SCOpenChestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCOpenChest> _instance;
} _SCOpenChest_default_instance_;
class CSSelectChestRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSelectChestReward> _instance;
} _CSSelectChestReward_default_instance_;
class SCSelectChestRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSelectChestReward> _instance;
} _SCSelectChestReward_default_instance_;
class CSChestSetAutoSelectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSChestSetAutoSelect> _instance;
} _CSChestSetAutoSelect_default_instance_;
class SCChestSetAutoSelectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCChestSetAutoSelect> _instance;
} _SCChestSetAutoSelect_default_instance_;
class CSChestSetEnableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSChestSetEnable> _instance;
} _CSChestSetEnable_default_instance_;
class SCChestSetEnableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCChestSetEnable> _instance;
} _SCChestSetEnable_default_instance_;
class CSSyncAnimationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSyncAnimation> _instance;
} _CSSyncAnimation_default_instance_;
class SCSyncAnimationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSyncAnimation> _instance;
} _SCSyncAnimation_default_instance_;
class CSMagicCardListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSMagicCardList> _instance;
} _CSMagicCardList_default_instance_;
class SCMagicCardListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCMagicCardList> _instance;
} _SCMagicCardList_default_instance_;
class SCTortoiseExplodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCTortoiseExplode> _instance;
} _SCTortoiseExplode_default_instance_;
class CSBuyGunDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSBuyGun> _instance;
} _CSBuyGun_default_instance_;
class SCBuyGunDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCBuyGun> _instance;
} _SCBuyGun_default_instance_;
class SCWaterDropInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCWaterDropInfo> _instance;
} _SCWaterDropInfo_default_instance_;
class CSBuyWingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSBuyWings> _instance;
} _CSBuyWings_default_instance_;
class SCBuyWingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCBuyWings> _instance;
} _SCBuyWings_default_instance_;
class CSSetWingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSetWings> _instance;
} _CSSetWings_default_instance_;
class SCSetWingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSetWings> _instance;
} _SCSetWings_default_instance_;
class SCBeKickedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCBeKicked> _instance;
} _SCBeKicked_default_instance_;
class CSClientTimeValidateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSClientTimeValidate> _instance;
} _CSClientTimeValidate_default_instance_;
class SCClientTimeValidateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCClientTimeValidate> _instance;
} _SCClientTimeValidate_default_instance_;
class CSChangeTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSChangeTable> _instance;
} _CSChangeTable_default_instance_;
class SCChangeTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCChangeTable> _instance;
} _SCChangeTable_default_instance_;
}  // namespace BYDLD
static void InitDefaultsscc_info_AwardDetail_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_AwardDetail_default_instance_;
    new (ptr) ::BYDLD::AwardDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AwardDetail_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AwardDetail_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_AwardPoolData_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_AwardPoolData_default_instance_;
    new (ptr) ::BYDLD::AwardPoolData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AwardPoolData_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AwardPoolData_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_AwardPoolRecord_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_AwardPoolRecord_default_instance_;
    new (ptr) ::BYDLD::AwardPoolRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AwardPoolRecord_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AwardPoolRecord_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_AwardProp_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_AwardProp_default_instance_;
    new (ptr) ::BYDLD::AwardProp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AwardProp_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AwardProp_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_AztecClearReward_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_AztecClearReward_default_instance_;
    new (ptr) ::BYDLD::AztecClearReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AztecClearReward_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AztecClearReward_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_AztecDataInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_AztecDataInfo_default_instance_;
    new (ptr) ::BYDLD::AztecDataInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AztecDataInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AztecDataInfo_BYDLD_2eproto}, {
      &scc_info_AztecStep_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_AztecGemConfig_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_AztecGemConfig_default_instance_;
    new (ptr) ::BYDLD::AztecGemConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AztecGemConfig_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AztecGemConfig_BYDLD_2eproto}, {
      &scc_info_AztecGemConfigItem_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_AztecGemConfigItem_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_AztecGemConfigItem_default_instance_;
    new (ptr) ::BYDLD::AztecGemConfigItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AztecGemConfigItem_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AztecGemConfigItem_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_AztecStep_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_AztecStep_default_instance_;
    new (ptr) ::BYDLD::AztecStep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AztecStep_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AztecStep_BYDLD_2eproto}, {
      &scc_info_AztecTable_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_AztecTable_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_AztecTable_default_instance_;
    new (ptr) ::BYDLD::AztecTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AztecTable_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AztecTable_BYDLD_2eproto}, {
      &scc_info_AztecClearReward_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_BigSmallRecord_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_BigSmallRecord_default_instance_;
    new (ptr) ::BYDLD::BigSmallRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BigSmallRecord_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BigSmallRecord_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSAwardPoolRecord_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSAwardPoolRecord_default_instance_;
    new (ptr) ::BYDLD::CSAwardPoolRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSAwardPoolRecord_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSAwardPoolRecord_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSAztecGemConfig_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSAztecGemConfig_default_instance_;
    new (ptr) ::BYDLD::CSAztecGemConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSAztecGemConfig_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSAztecGemConfig_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSBigSmallBet_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSBigSmallBet_default_instance_;
    new (ptr) ::BYDLD::CSBigSmallBet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSBigSmallBet_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSBigSmallBet_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSBigSmallChoose_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSBigSmallChoose_default_instance_;
    new (ptr) ::BYDLD::CSBigSmallChoose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSBigSmallChoose_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSBigSmallChoose_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSBigSmallRecord_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSBigSmallRecord_default_instance_;
    new (ptr) ::BYDLD::CSBigSmallRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSBigSmallRecord_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSBigSmallRecord_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSBigSmallWinInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSBigSmallWinInfo_default_instance_;
    new (ptr) ::BYDLD::CSBigSmallWinInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSBigSmallWinInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSBigSmallWinInfo_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSBuyGun_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSBuyGun_default_instance_;
    new (ptr) ::BYDLD::CSBuyGun();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSBuyGun_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSBuyGun_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSBuyNewYearCard_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSBuyNewYearCard_default_instance_;
    new (ptr) ::BYDLD::CSBuyNewYearCard();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSBuyNewYearCard_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSBuyNewYearCard_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSBuyWings_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSBuyWings_default_instance_;
    new (ptr) ::BYDLD::CSBuyWings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSBuyWings_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSBuyWings_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSChangeTable_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSChangeTable_default_instance_;
    new (ptr) ::BYDLD::CSChangeTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSChangeTable_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSChangeTable_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSCheckDragonWheelProp_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSCheckDragonWheelProp_default_instance_;
    new (ptr) ::BYDLD::CSCheckDragonWheelProp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSCheckDragonWheelProp_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSCheckDragonWheelProp_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSChestConfig_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSChestConfig_default_instance_;
    new (ptr) ::BYDLD::CSChestConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSChestConfig_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSChestConfig_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSChestSetAutoSelect_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSChestSetAutoSelect_default_instance_;
    new (ptr) ::BYDLD::CSChestSetAutoSelect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSChestSetAutoSelect_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSChestSetAutoSelect_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSChestSetEnable_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSChestSetEnable_default_instance_;
    new (ptr) ::BYDLD::CSChestSetEnable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSChestSetEnable_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSChestSetEnable_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSClickStatistic_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSClickStatistic_default_instance_;
    new (ptr) ::BYDLD::CSClickStatistic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSClickStatistic_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSClickStatistic_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSClientTimeValidate_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSClientTimeValidate_default_instance_;
    new (ptr) ::BYDLD::CSClientTimeValidate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSClientTimeValidate_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSClientTimeValidate_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSDevourHit_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSDevourHit_default_instance_;
    new (ptr) ::BYDLD::CSDevourHit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSDevourHit_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSDevourHit_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSDragonBallEnd_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSDragonBallEnd_default_instance_;
    new (ptr) ::BYDLD::CSDragonBallEnd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSDragonBallEnd_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSDragonBallEnd_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSDragonWheelStart_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSDragonWheelStart_default_instance_;
    new (ptr) ::BYDLD::CSDragonWheelStart();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSDragonWheelStart_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSDragonWheelStart_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSFishOutsideScreen_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSFishOutsideScreen_default_instance_;
    new (ptr) ::BYDLD::CSFishOutsideScreen();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSFishOutsideScreen_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSFishOutsideScreen_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSFortuneShoot_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSFortuneShoot_default_instance_;
    new (ptr) ::BYDLD::CSFortuneShoot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSFortuneShoot_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSFortuneShoot_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSFreeTimeEnd_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSFreeTimeEnd_default_instance_;
    new (ptr) ::BYDLD::CSFreeTimeEnd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSFreeTimeEnd_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSFreeTimeEnd_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSGetLuckyNum_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSGetLuckyNum_default_instance_;
    new (ptr) ::BYDLD::CSGetLuckyNum();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSGetLuckyNum_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSGetLuckyNum_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSGetLuckyTaskAward_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSGetLuckyTaskAward_default_instance_;
    new (ptr) ::BYDLD::CSGetLuckyTaskAward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSGetLuckyTaskAward_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSGetLuckyTaskAward_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSHBonusPool_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSHBonusPool_default_instance_;
    new (ptr) ::BYDLD::CSHBonusPool();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSHBonusPool_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSHBonusPool_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSHHistoryRank_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSHHistoryRank_default_instance_;
    new (ptr) ::BYDLD::CSHHistoryRank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSHHistoryRank_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSHHistoryRank_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSHLuckyInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSHLuckyInfo_default_instance_;
    new (ptr) ::BYDLD::CSHLuckyInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSHLuckyInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSHLuckyInfo_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSHMatchInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSHMatchInfo_default_instance_;
    new (ptr) ::BYDLD::CSHMatchInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSHMatchInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSHMatchInfo_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSHMatchInfoTip_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSHMatchInfoTip_default_instance_;
    new (ptr) ::BYDLD::CSHMatchInfoTip();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSHMatchInfoTip_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSHMatchInfoTip_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSHRankBar_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSHRankBar_default_instance_;
    new (ptr) ::BYDLD::CSHRankBar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSHRankBar_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSHRankBar_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSHRealRank_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSHRealRank_default_instance_;
    new (ptr) ::BYDLD::CSHRealRank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSHRealRank_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSHRealRank_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSHReward_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSHReward_default_instance_;
    new (ptr) ::BYDLD::CSHReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSHReward_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSHReward_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSHeartBeat_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSHeartBeat_default_instance_;
    new (ptr) ::BYDLD::CSHeartBeat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSHeartBeat_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSHeartBeat_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSHitMultiFish_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSHitMultiFish_default_instance_;
    new (ptr) ::BYDLD::CSHitMultiFish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CSHitMultiFish_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CSHitMultiFish_BYDLD_2eproto}, {
      &scc_info_HitFish_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_CSJadeAwardInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSJadeAwardInfo_default_instance_;
    new (ptr) ::BYDLD::CSJadeAwardInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSJadeAwardInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSJadeAwardInfo_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSLockFish_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSLockFish_default_instance_;
    new (ptr) ::BYDLD::CSLockFish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSLockFish_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSLockFish_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSLoginGameWithToken_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSLoginGameWithToken_default_instance_;
    new (ptr) ::BYDLD::CSLoginGameWithToken();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSLoginGameWithToken_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSLoginGameWithToken_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSLuckyDrawInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSLuckyDrawInfo_default_instance_;
    new (ptr) ::BYDLD::CSLuckyDrawInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSLuckyDrawInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSLuckyDrawInfo_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSLuckyPoolDraw_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSLuckyPoolDraw_default_instance_;
    new (ptr) ::BYDLD::CSLuckyPoolDraw();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSLuckyPoolDraw_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSLuckyPoolDraw_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSLuckyPoolInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSLuckyPoolInfo_default_instance_;
    new (ptr) ::BYDLD::CSLuckyPoolInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSLuckyPoolInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSLuckyPoolInfo_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSLuckyRecord_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSLuckyRecord_default_instance_;
    new (ptr) ::BYDLD::CSLuckyRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSLuckyRecord_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSLuckyRecord_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSLuckyRedDot_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSLuckyRedDot_default_instance_;
    new (ptr) ::BYDLD::CSLuckyRedDot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSLuckyRedDot_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSLuckyRedDot_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSMagicCardList_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSMagicCardList_default_instance_;
    new (ptr) ::BYDLD::CSMagicCardList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSMagicCardList_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSMagicCardList_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSMatchPackAddition_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSMatchPackAddition_default_instance_;
    new (ptr) ::BYDLD::CSMatchPackAddition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSMatchPackAddition_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSMatchPackAddition_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSNewYearCardAwardRecord_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSNewYearCardAwardRecord_default_instance_;
    new (ptr) ::BYDLD::CSNewYearCardAwardRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSNewYearCardAwardRecord_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSNewYearCardAwardRecord_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSNewYearCardExchange_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSNewYearCardExchange_default_instance_;
    new (ptr) ::BYDLD::CSNewYearCardExchange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSNewYearCardExchange_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSNewYearCardExchange_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSNotifyLogout_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSNotifyLogout_default_instance_;
    new (ptr) ::BYDLD::CSNotifyLogout();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSNotifyLogout_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSNotifyLogout_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSOpenChest_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSOpenChest_default_instance_;
    new (ptr) ::BYDLD::CSOpenChest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSOpenChest_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSOpenChest_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSReqRewardAddTask_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSReqRewardAddTask_default_instance_;
    new (ptr) ::BYDLD::CSReqRewardAddTask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSReqRewardAddTask_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSReqRewardAddTask_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSReqRewardRecord_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSReqRewardRecord_default_instance_;
    new (ptr) ::BYDLD::CSReqRewardRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSReqRewardRecord_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSReqRewardRecord_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSRewardChangeAuto_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSRewardChangeAuto_default_instance_;
    new (ptr) ::BYDLD::CSRewardChangeAuto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSRewardChangeAuto_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSRewardChangeAuto_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSSaveSkillTime_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSSaveSkillTime_default_instance_;
    new (ptr) ::BYDLD::CSSaveSkillTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CSSaveSkillTime_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CSSaveSkillTime_BYDLD_2eproto}, {
      &scc_info_SkillTime_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_CSScratchNewYearCard_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSScratchNewYearCard_default_instance_;
    new (ptr) ::BYDLD::CSScratchNewYearCard();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSScratchNewYearCard_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSScratchNewYearCard_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSSelectChestReward_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSSelectChestReward_default_instance_;
    new (ptr) ::BYDLD::CSSelectChestReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSSelectChestReward_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSSelectChestReward_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSSetProbability_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSSetProbability_default_instance_;
    new (ptr) ::BYDLD::CSSetProbability();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSSetProbability_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSSetProbability_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSSetSkill_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSSetSkill_default_instance_;
    new (ptr) ::BYDLD::CSSetSkill();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSSetSkill_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSSetSkill_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSSetWings_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSSetWings_default_instance_;
    new (ptr) ::BYDLD::CSSetWings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSSetWings_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSSetWings_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSShootTorpedo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSShootTorpedo_default_instance_;
    new (ptr) ::BYDLD::CSShootTorpedo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSShootTorpedo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSShootTorpedo_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSSuperTridentAttack_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSSuperTridentAttack_default_instance_;
    new (ptr) ::BYDLD::CSSuperTridentAttack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSSuperTridentAttack_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSSuperTridentAttack_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSSuperTridentShoot_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSSuperTridentShoot_default_instance_;
    new (ptr) ::BYDLD::CSSuperTridentShoot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSSuperTridentShoot_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSSuperTridentShoot_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSSyncAnimation_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSSyncAnimation_default_instance_;
    new (ptr) ::BYDLD::CSSyncAnimation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSSyncAnimation_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSSyncAnimation_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSSyncCrabStatus_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSSyncCrabStatus_default_instance_;
    new (ptr) ::BYDLD::CSSyncCrabStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSSyncCrabStatus_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSSyncCrabStatus_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSSyncFishReq_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSSyncFishReq_default_instance_;
    new (ptr) ::BYDLD::CSSyncFishReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSSyncFishReq_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSSyncFishReq_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSSyncFishRsp_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSSyncFishRsp_default_instance_;
    new (ptr) ::BYDLD::CSSyncFishRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CSSyncFishRsp_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CSSyncFishRsp_BYDLD_2eproto}, {
      &scc_info_FishTraces_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_CSSyncMoney_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSSyncMoney_default_instance_;
    new (ptr) ::BYDLD::CSSyncMoney();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSSyncMoney_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSSyncMoney_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSTaskInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSTaskInfo_default_instance_;
    new (ptr) ::BYDLD::CSTaskInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSTaskInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSTaskInfo_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSTridentBet_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSTridentBet_default_instance_;
    new (ptr) ::BYDLD::CSTridentBet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSTridentBet_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSTridentBet_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSTridentInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSTridentInfo_default_instance_;
    new (ptr) ::BYDLD::CSTridentInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSTridentInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSTridentInfo_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSUpdateHallProp_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSUpdateHallProp_default_instance_;
    new (ptr) ::BYDLD::CSUpdateHallProp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSUpdateHallProp_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSUpdateHallProp_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSUserPoolDouble_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSUserPoolDouble_default_instance_;
    new (ptr) ::BYDLD::CSUserPoolDouble();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSUserPoolDouble_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSUserPoolDouble_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSUserPoolDoubleInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSUserPoolDoubleInfo_default_instance_;
    new (ptr) ::BYDLD::CSUserPoolDoubleInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSUserPoolDoubleInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSUserPoolDoubleInfo_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSUserPoolDraw_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSUserPoolDraw_default_instance_;
    new (ptr) ::BYDLD::CSUserPoolDraw();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSUserPoolDraw_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSUserPoolDraw_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSUserPoolInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSUserPoolInfo_default_instance_;
    new (ptr) ::BYDLD::CSUserPoolInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSUserPoolInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSUserPoolInfo_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSUserPoolPreDraw_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSUserPoolPreDraw_default_instance_;
    new (ptr) ::BYDLD::CSUserPoolPreDraw();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSUserPoolPreDraw_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSUserPoolPreDraw_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSUserPoolStatus_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSUserPoolStatus_default_instance_;
    new (ptr) ::BYDLD::CSUserPoolStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSUserPoolStatus_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSUserPoolStatus_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSUserReady_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSUserReady_default_instance_;
    new (ptr) ::BYDLD::CSUserReady();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSUserReady_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSUserReady_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSUserRunBackground_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSUserRunBackground_default_instance_;
    new (ptr) ::BYDLD::CSUserRunBackground();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSUserRunBackground_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSUserRunBackground_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CSUserShootMulti_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CSUserShootMulti_default_instance_;
    new (ptr) ::BYDLD::CSUserShootMulti();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CSUserShootMulti_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CSUserShootMulti_BYDLD_2eproto}, {
      &scc_info_UserShoot_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_Capturefish_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_Capturefish_default_instance_;
    new (ptr) ::BYDLD::Capturefish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Capturefish_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_Capturefish_BYDLD_2eproto}, {
      &scc_info_ObjectData_BYDLD_2eproto.base,
      &scc_info_EffectFish_BYDLD_2eproto.base,
      &scc_info_DragonBallInfo_BYDLD_2eproto.base,
      &scc_info_OctopusKingInfo_BYDLD_2eproto.base,
      &scc_info_MagicInfo_BYDLD_2eproto.base,
      &scc_info_Zeus_BYDLD_2eproto.base,
      &scc_info_GoldenJadeInfo_BYDLD_2eproto.base,
      &scc_info_AztecDataInfo_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_ChestBrief_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_ChestBrief_default_instance_;
    new (ptr) ::BYDLD::ChestBrief();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChestBrief_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChestBrief_BYDLD_2eproto}, {
      &scc_info_OpenChestReward_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_CommonResp_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CommonResp_default_instance_;
    new (ptr) ::BYDLD::CommonResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommonResp_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommonResp_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_CritWheel_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_CritWheel_default_instance_;
    new (ptr) ::BYDLD::CritWheel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CritWheel_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CritWheel_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_Decimal_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_Decimal_default_instance_;
    new (ptr) ::BYDLD::Decimal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Decimal_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Decimal_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_DevouredFish_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_DevouredFish_default_instance_;
    new (ptr) ::BYDLD::DevouredFish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DevouredFish_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DevouredFish_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_DragonBallConfig_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_DragonBallConfig_default_instance_;
    new (ptr) ::BYDLD::DragonBallConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DragonBallConfig_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DragonBallConfig_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_DragonBallInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_DragonBallInfo_default_instance_;
    new (ptr) ::BYDLD::DragonBallInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DragonBallInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DragonBallInfo_BYDLD_2eproto}, {
      &scc_info_DragonBallWheelInfo_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_DragonBallWheelInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_DragonBallWheelInfo_default_instance_;
    new (ptr) ::BYDLD::DragonBallWheelInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DragonBallWheelInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DragonBallWheelInfo_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_EffectFish_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_EffectFish_default_instance_;
    new (ptr) ::BYDLD::EffectFish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EffectFish_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EffectFish_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_EffectInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_EffectInfo_default_instance_;
    new (ptr) ::BYDLD::EffectInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EffectInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EffectInfo_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_FishTrace_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_FishTrace_default_instance_;
    new (ptr) ::BYDLD::FishTrace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FishTrace_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FishTrace_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_FishTraces_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_FishTraces_default_instance_;
    new (ptr) ::BYDLD::FishTraces();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FishTraces_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FishTraces_BYDLD_2eproto}, {
      &scc_info_FishTrace_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_GemConfig_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_GemConfig_default_instance_;
    new (ptr) ::BYDLD::GemConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GemConfig_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GemConfig_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_GiftBag_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_GiftBag_default_instance_;
    new (ptr) ::BYDLD::GiftBag();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GiftBag_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GiftBag_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_GoldenJadeInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_GoldenJadeInfo_default_instance_;
    new (ptr) ::BYDLD::GoldenJadeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GoldenJadeInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GoldenJadeInfo_BYDLD_2eproto}, {
      &scc_info_ItemWheel_BYDLD_2eproto.base,
      &scc_info_CritWheel_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_GoodsInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_GoodsInfo_default_instance_;
    new (ptr) ::BYDLD::GoodsInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GoodsInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GoodsInfo_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_GunDetail_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_GunDetail_default_instance_;
    new (ptr) ::BYDLD::GunDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GunDetail_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GunDetail_BYDLD_2eproto}, {
      &scc_info_GunSpecEffect_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_GunSpecEffect_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_GunSpecEffect_default_instance_;
    new (ptr) ::BYDLD::GunSpecEffect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GunSpecEffect_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GunSpecEffect_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_HBonusPool_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_HBonusPool_default_instance_;
    new (ptr) ::BYDLD::HBonusPool();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HBonusPool_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HBonusPool_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_HistoryRank_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_HistoryRank_default_instance_;
    new (ptr) ::BYDLD::HistoryRank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HistoryRank_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HistoryRank_BYDLD_2eproto}, {
      &scc_info_Object3_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_HitFish_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_HitFish_default_instance_;
    new (ptr) ::BYDLD::HitFish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HitFish_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HitFish_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_HttpResult_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_HttpResult_default_instance_;
    new (ptr) ::BYDLD::HttpResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HttpResult_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HttpResult_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_IngotInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_IngotInfo_default_instance_;
    new (ptr) ::BYDLD::IngotInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IngotInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IngotInfo_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_ItemEnableInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_ItemEnableInfo_default_instance_;
    new (ptr) ::BYDLD::ItemEnableInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ItemEnableInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ItemEnableInfo_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_ItemEnableNotice_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_ItemEnableNotice_default_instance_;
    new (ptr) ::BYDLD::ItemEnableNotice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ItemEnableNotice_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ItemEnableNotice_BYDLD_2eproto}, {
      &scc_info_ItemEnableInfo_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_ItemWheel_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_ItemWheel_default_instance_;
    new (ptr) ::BYDLD::ItemWheel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ItemWheel_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ItemWheel_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_JadeAwardInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_JadeAwardInfo_default_instance_;
    new (ptr) ::BYDLD::JadeAwardInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JadeAwardInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JadeAwardInfo_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_JumpHighArena_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_JumpHighArena_default_instance_;
    new (ptr) ::BYDLD::JumpHighArena();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JumpHighArena_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JumpHighArena_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_LuckyInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_LuckyInfo_default_instance_;
    new (ptr) ::BYDLD::LuckyInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LuckyInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LuckyInfo_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_LuckyRecord_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_LuckyRecord_default_instance_;
    new (ptr) ::BYDLD::LuckyRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LuckyRecord_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LuckyRecord_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_LuckyTaskInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_LuckyTaskInfo_default_instance_;
    new (ptr) ::BYDLD::LuckyTaskInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LuckyTaskInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LuckyTaskInfo_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_MagicCardInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_MagicCardInfo_default_instance_;
    new (ptr) ::BYDLD::MagicCardInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MagicCardInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MagicCardInfo_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_MagicInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_MagicInfo_default_instance_;
    new (ptr) ::BYDLD::MagicInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MagicInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MagicInfo_BYDLD_2eproto}, {
      &scc_info_MagicCardInfo_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_MatchInfoTip_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_MatchInfoTip_default_instance_;
    new (ptr) ::BYDLD::MatchInfoTip();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MatchInfoTip_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MatchInfoTip_BYDLD_2eproto}, {
      &scc_info_Object3_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_MatchPackAddition_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_MatchPackAddition_default_instance_;
    new (ptr) ::BYDLD::MatchPackAddition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchPackAddition_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MatchPackAddition_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_NewYearCardActivityInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_NewYearCardActivityInfo_default_instance_;
    new (ptr) ::BYDLD::NewYearCardActivityInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewYearCardActivityInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NewYearCardActivityInfo_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_NewYearCardAward_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_NewYearCardAward_default_instance_;
    new (ptr) ::BYDLD::NewYearCardAward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NewYearCardAward_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NewYearCardAward_BYDLD_2eproto}, {
      &scc_info_NewYearCardMultiple_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_NewYearCardAwardRecord_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_NewYearCardAwardRecord_default_instance_;
    new (ptr) ::BYDLD::NewYearCardAwardRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewYearCardAwardRecord_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NewYearCardAwardRecord_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_NewYearCardMultiple_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_NewYearCardMultiple_default_instance_;
    new (ptr) ::BYDLD::NewYearCardMultiple();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewYearCardMultiple_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NewYearCardMultiple_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_Object2_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_Object2_default_instance_;
    new (ptr) ::BYDLD::Object2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Object2_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Object2_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_Object3_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_Object3_default_instance_;
    new (ptr) ::BYDLD::Object3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Object3_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Object3_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_Object4_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_Object4_default_instance_;
    new (ptr) ::BYDLD::Object4();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Object4_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Object4_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_ObjectData_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_ObjectData_default_instance_;
    new (ptr) ::BYDLD::ObjectData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectData_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ObjectData_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_OctopusKingInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_OctopusKingInfo_default_instance_;
    new (ptr) ::BYDLD::OctopusKingInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OctopusKingInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OctopusKingInfo_BYDLD_2eproto}, {
      &scc_info_OctopusKingItem_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_OctopusKingItem_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_OctopusKingItem_default_instance_;
    new (ptr) ::BYDLD::OctopusKingItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OctopusKingItem_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OctopusKingItem_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_OpenChestReward_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_OpenChestReward_default_instance_;
    new (ptr) ::BYDLD::OpenChestReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpenChestReward_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OpenChestReward_BYDLD_2eproto}, {
      &scc_info_Decimal_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_OwnRecord_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_OwnRecord_default_instance_;
    new (ptr) ::BYDLD::OwnRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OwnRecord_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OwnRecord_BYDLD_2eproto}, {
      &scc_info_AwardProp_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_Prop_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_Prop_default_instance_;
    new (ptr) ::BYDLD::Prop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Prop_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Prop_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_PurchaseGun_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_PurchaseGun_default_instance_;
    new (ptr) ::BYDLD::PurchaseGun();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PurchaseGun_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PurchaseGun_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_RealRank_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_RealRank_default_instance_;
    new (ptr) ::BYDLD::RealRank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RealRank_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RealRank_BYDLD_2eproto}, {
      &scc_info_Object3_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_ResultRank_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_ResultRank_default_instance_;
    new (ptr) ::BYDLD::ResultRank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResultRank_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResultRank_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_Reward_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_Reward_default_instance_;
    new (ptr) ::BYDLD::Reward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Reward_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Reward_BYDLD_2eproto}, {
      &scc_info_Object3_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_RewardConf_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_RewardConf_default_instance_;
    new (ptr) ::BYDLD::RewardConf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RewardConf_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RewardConf_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_RewardTask_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_RewardTask_default_instance_;
    new (ptr) ::BYDLD::RewardTask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RewardTask_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RewardTask_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCActivityInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCActivityInfo_default_instance_;
    new (ptr) ::BYDLD::SCActivityInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_SCActivityInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_SCActivityInfo_BYDLD_2eproto}, {
      &scc_info_JumpHighArena_BYDLD_2eproto.base,
      &scc_info_GiftBag_BYDLD_2eproto.base,
      &scc_info_NewYearCardActivityInfo_BYDLD_2eproto.base,
      &scc_info_UserPoolActivityInfo_BYDLD_2eproto.base,
      &scc_info_Object4_BYDLD_2eproto.base,
      &scc_info_Object3_BYDLD_2eproto.base,
      &scc_info_DragonBallConfig_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCAwardPoolRecord_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCAwardPoolRecord_default_instance_;
    new (ptr) ::BYDLD::SCAwardPoolRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCAwardPoolRecord_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCAwardPoolRecord_BYDLD_2eproto}, {
      &scc_info_AwardPoolRecord_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCAztecGemConfig_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCAztecGemConfig_default_instance_;
    new (ptr) ::BYDLD::SCAztecGemConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCAztecGemConfig_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCAztecGemConfig_BYDLD_2eproto}, {
      &scc_info_AztecGemConfig_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCBeKicked_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCBeKicked_default_instance_;
    new (ptr) ::BYDLD::SCBeKicked();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCBeKicked_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCBeKicked_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCBigSmallBet_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCBigSmallBet_default_instance_;
    new (ptr) ::BYDLD::SCBigSmallBet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCBigSmallBet_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCBigSmallBet_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCBigSmallChoose_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCBigSmallChoose_default_instance_;
    new (ptr) ::BYDLD::SCBigSmallChoose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCBigSmallChoose_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCBigSmallChoose_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCBigSmallRecord_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCBigSmallRecord_default_instance_;
    new (ptr) ::BYDLD::SCBigSmallRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCBigSmallRecord_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCBigSmallRecord_BYDLD_2eproto}, {
      &scc_info_BigSmallRecord_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCBigSmallWinInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCBigSmallWinInfo_default_instance_;
    new (ptr) ::BYDLD::SCBigSmallWinInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCBigSmallWinInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCBigSmallWinInfo_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCBuyGun_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCBuyGun_default_instance_;
    new (ptr) ::BYDLD::SCBuyGun();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCBuyGun_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCBuyGun_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCBuyWings_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCBuyWings_default_instance_;
    new (ptr) ::BYDLD::SCBuyWings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCBuyWings_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCBuyWings_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCChangeScene_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCChangeScene_default_instance_;
    new (ptr) ::BYDLD::SCChangeScene();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCChangeScene_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCChangeScene_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCChangeTable_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCChangeTable_default_instance_;
    new (ptr) ::BYDLD::SCChangeTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCChangeTable_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCChangeTable_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCCheckDragonWheelProp_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCCheckDragonWheelProp_default_instance_;
    new (ptr) ::BYDLD::SCCheckDragonWheelProp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCCheckDragonWheelProp_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCCheckDragonWheelProp_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCChestConfig_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCChestConfig_default_instance_;
    new (ptr) ::BYDLD::SCChestConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCChestConfig_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCChestConfig_BYDLD_2eproto}, {
      &scc_info_ChestBrief_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCChestSetAutoSelect_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCChestSetAutoSelect_default_instance_;
    new (ptr) ::BYDLD::SCChestSetAutoSelect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCChestSetAutoSelect_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCChestSetAutoSelect_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCChestSetEnable_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCChestSetEnable_default_instance_;
    new (ptr) ::BYDLD::SCChestSetEnable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCChestSetEnable_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCChestSetEnable_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCClientTimeValidate_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCClientTimeValidate_default_instance_;
    new (ptr) ::BYDLD::SCClientTimeValidate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCClientTimeValidate_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCClientTimeValidate_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCComTask_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCComTask_default_instance_;
    new (ptr) ::BYDLD::SCComTask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCComTask_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCComTask_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCDevourHit_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCDevourHit_default_instance_;
    new (ptr) ::BYDLD::SCDevourHit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCDevourHit_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCDevourHit_BYDLD_2eproto}, {
      &scc_info_DevouredFish_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCDragonBallRes_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCDragonBallRes_default_instance_;
    new (ptr) ::BYDLD::SCDragonBallRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCDragonBallRes_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCDragonBallRes_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCDragonWheelStop_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCDragonWheelStop_default_instance_;
    new (ptr) ::BYDLD::SCDragonWheelStop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCDragonWheelStop_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCDragonWheelStop_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCFishTracesList_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCFishTracesList_default_instance_;
    new (ptr) ::BYDLD::SCFishTracesList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCFishTracesList_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCFishTracesList_BYDLD_2eproto}, {
      &scc_info_FishTraces_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCFortuneShoot_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCFortuneShoot_default_instance_;
    new (ptr) ::BYDLD::SCFortuneShoot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCFortuneShoot_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCFortuneShoot_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCGemConfigList_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCGemConfigList_default_instance_;
    new (ptr) ::BYDLD::SCGemConfigList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCGemConfigList_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCGemConfigList_BYDLD_2eproto}, {
      &scc_info_GemConfig_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCGetLuckyNum_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCGetLuckyNum_default_instance_;
    new (ptr) ::BYDLD::SCGetLuckyNum();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCGetLuckyNum_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCGetLuckyNum_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCGunInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCGunInfo_default_instance_;
    new (ptr) ::BYDLD::SCGunInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCGunInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCGunInfo_BYDLD_2eproto}, {
      &scc_info_GunDetail_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCHBonusPool_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCHBonusPool_default_instance_;
    new (ptr) ::BYDLD::SCHBonusPool();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCHBonusPool_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCHBonusPool_BYDLD_2eproto}, {
      &scc_info_HBonusPool_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCHHistoryRank_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCHHistoryRank_default_instance_;
    new (ptr) ::BYDLD::SCHHistoryRank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCHHistoryRank_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCHHistoryRank_BYDLD_2eproto}, {
      &scc_info_HistoryRank_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCHLuckyInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCHLuckyInfo_default_instance_;
    new (ptr) ::BYDLD::SCHLuckyInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCHLuckyInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCHLuckyInfo_BYDLD_2eproto}, {
      &scc_info_LuckyInfo_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCHMatchInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCHMatchInfo_default_instance_;
    new (ptr) ::BYDLD::SCHMatchInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCHMatchInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCHMatchInfo_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCHMatchInfoTip_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCHMatchInfoTip_default_instance_;
    new (ptr) ::BYDLD::SCHMatchInfoTip();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCHMatchInfoTip_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCHMatchInfoTip_BYDLD_2eproto}, {
      &scc_info_MatchInfoTip_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCHRankBar_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCHRankBar_default_instance_;
    new (ptr) ::BYDLD::SCHRankBar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCHRankBar_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCHRankBar_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCHRealRank_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCHRealRank_default_instance_;
    new (ptr) ::BYDLD::SCHRealRank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCHRealRank_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCHRealRank_BYDLD_2eproto}, {
      &scc_info_RealRank_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCHReward_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCHReward_default_instance_;
    new (ptr) ::BYDLD::SCHReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCHReward_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCHReward_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCHeartBeat_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCHeartBeat_default_instance_;
    new (ptr) ::BYDLD::SCHeartBeat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCHeartBeat_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCHeartBeat_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCHitMultiFish_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCHitMultiFish_default_instance_;
    new (ptr) ::BYDLD::SCHitMultiFish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SCHitMultiFish_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SCHitMultiFish_BYDLD_2eproto}, {
      &scc_info_Capturefish_BYDLD_2eproto.base,
      &scc_info_SpecEffect_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCJadeAwardInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCJadeAwardInfo_default_instance_;
    new (ptr) ::BYDLD::SCJadeAwardInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCJadeAwardInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCJadeAwardInfo_BYDLD_2eproto}, {
      &scc_info_JadeAwardInfo_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCLockFish_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCLockFish_default_instance_;
    new (ptr) ::BYDLD::SCLockFish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCLockFish_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCLockFish_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCLoginGameWithToken_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCLoginGameWithToken_default_instance_;
    new (ptr) ::BYDLD::SCLoginGameWithToken();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCLoginGameWithToken_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCLoginGameWithToken_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCLuckyAwardNotify_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCLuckyAwardNotify_default_instance_;
    new (ptr) ::BYDLD::SCLuckyAwardNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCLuckyAwardNotify_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCLuckyAwardNotify_BYDLD_2eproto}, {
      &scc_info_AwardDetail_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCLuckyDrawInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCLuckyDrawInfo_default_instance_;
    new (ptr) ::BYDLD::SCLuckyDrawInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SCLuckyDrawInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SCLuckyDrawInfo_BYDLD_2eproto}, {
      &scc_info_AwardProp_BYDLD_2eproto.base,
      &scc_info_LuckyTaskInfo_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCLuckyPoolDraw_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCLuckyPoolDraw_default_instance_;
    new (ptr) ::BYDLD::SCLuckyPoolDraw();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCLuckyPoolDraw_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCLuckyPoolDraw_BYDLD_2eproto}, {
      &scc_info_Object3_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCLuckyPoolInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCLuckyPoolInfo_default_instance_;
    new (ptr) ::BYDLD::SCLuckyPoolInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCLuckyPoolInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCLuckyPoolInfo_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCLuckyRecord_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCLuckyRecord_default_instance_;
    new (ptr) ::BYDLD::SCLuckyRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCLuckyRecord_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCLuckyRecord_BYDLD_2eproto}, {
      &scc_info_LuckyRecord_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCLuckyRedDot_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCLuckyRedDot_default_instance_;
    new (ptr) ::BYDLD::SCLuckyRedDot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCLuckyRedDot_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCLuckyRedDot_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCLuckyTaskInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCLuckyTaskInfo_default_instance_;
    new (ptr) ::BYDLD::SCLuckyTaskInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCLuckyTaskInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCLuckyTaskInfo_BYDLD_2eproto}, {
      &scc_info_LuckyTaskInfo_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCMagicCardList_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCMagicCardList_default_instance_;
    new (ptr) ::BYDLD::SCMagicCardList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCMagicCardList_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCMagicCardList_BYDLD_2eproto}, {
      &scc_info_MagicCardInfo_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCMatchPackAddition_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCMatchPackAddition_default_instance_;
    new (ptr) ::BYDLD::SCMatchPackAddition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCMatchPackAddition_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCMatchPackAddition_BYDLD_2eproto}, {
      &scc_info_MatchPackAddition_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCMatchPackInvail_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCMatchPackInvail_default_instance_;
    new (ptr) ::BYDLD::SCMatchPackInvail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCMatchPackInvail_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCMatchPackInvail_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCMatchResult_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCMatchResult_default_instance_;
    new (ptr) ::BYDLD::SCMatchResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SCMatchResult_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SCMatchResult_BYDLD_2eproto}, {
      &scc_info_ResultRank_BYDLD_2eproto.base,
      &scc_info_Object3_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCNewYearCardAwardRecord_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCNewYearCardAwardRecord_default_instance_;
    new (ptr) ::BYDLD::SCNewYearCardAwardRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCNewYearCardAwardRecord_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCNewYearCardAwardRecord_BYDLD_2eproto}, {
      &scc_info_NewYearCardAwardRecord_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCNewYearCardExchange_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCNewYearCardExchange_default_instance_;
    new (ptr) ::BYDLD::SCNewYearCardExchange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCNewYearCardExchange_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCNewYearCardExchange_BYDLD_2eproto}, {
      &scc_info_NewYearCardAward_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCNotifyLogout_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCNotifyLogout_default_instance_;
    new (ptr) ::BYDLD::SCNotifyLogout();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCNotifyLogout_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCNotifyLogout_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCOpenChest_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCOpenChest_default_instance_;
    new (ptr) ::BYDLD::SCOpenChest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCOpenChest_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCOpenChest_BYDLD_2eproto}, {
      &scc_info_OpenChestReward_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCOwnRecord_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCOwnRecord_default_instance_;
    new (ptr) ::BYDLD::SCOwnRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCOwnRecord_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCOwnRecord_BYDLD_2eproto}, {
      &scc_info_OwnRecord_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCPropDropNotify_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCPropDropNotify_default_instance_;
    new (ptr) ::BYDLD::SCPropDropNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCPropDropNotify_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCPropDropNotify_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCPropEndNotify_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCPropEndNotify_default_instance_;
    new (ptr) ::BYDLD::SCPropEndNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCPropEndNotify_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCPropEndNotify_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCPropsAwardPool_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCPropsAwardPool_default_instance_;
    new (ptr) ::BYDLD::SCPropsAwardPool();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCPropsAwardPool_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCPropsAwardPool_BYDLD_2eproto}, {
      &scc_info_AwardPoolData_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCPropsTorpedo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCPropsTorpedo_default_instance_;
    new (ptr) ::BYDLD::SCPropsTorpedo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCPropsTorpedo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCPropsTorpedo_BYDLD_2eproto}, {
      &scc_info_ObjectData_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCPropsTrident_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCPropsTrident_default_instance_;
    new (ptr) ::BYDLD::SCPropsTrident();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCPropsTrident_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCPropsTrident_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCPurchaseCheck_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCPurchaseCheck_default_instance_;
    new (ptr) ::BYDLD::SCPurchaseCheck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCPurchaseCheck_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCPurchaseCheck_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCRepRewardTaskList_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCRepRewardTaskList_default_instance_;
    new (ptr) ::BYDLD::SCRepRewardTaskList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCRepRewardTaskList_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCRepRewardTaskList_BYDLD_2eproto}, {
      &scc_info_RewardTask_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCRepRewardTaskRecord_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCRepRewardTaskRecord_default_instance_;
    new (ptr) ::BYDLD::SCRepRewardTaskRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SCRepRewardTaskRecord_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SCRepRewardTaskRecord_BYDLD_2eproto}, {
      &scc_info_SCRewardTaskFinish_BYDLD_2eproto.base,
      &scc_info_RewardConf_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCRewardAutoRep_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCRewardAutoRep_default_instance_;
    new (ptr) ::BYDLD::SCRewardAutoRep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCRewardAutoRep_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCRewardAutoRep_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCRewardTaskFinish_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCRewardTaskFinish_default_instance_;
    new (ptr) ::BYDLD::SCRewardTaskFinish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCRewardTaskFinish_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCRewardTaskFinish_BYDLD_2eproto}, {
      &scc_info_RewardTask_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCScratchNewYearCard_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCScratchNewYearCard_default_instance_;
    new (ptr) ::BYDLD::SCScratchNewYearCard();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCScratchNewYearCard_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCScratchNewYearCard_BYDLD_2eproto}, {
      &scc_info_NewYearCardMultiple_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCSeaCrabCreate_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCSeaCrabCreate_default_instance_;
    new (ptr) ::BYDLD::SCSeaCrabCreate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCSeaCrabCreate_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCSeaCrabCreate_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCSelectChestReward_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCSelectChestReward_default_instance_;
    new (ptr) ::BYDLD::SCSelectChestReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCSelectChestReward_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCSelectChestReward_BYDLD_2eproto}, {
      &scc_info_OpenChestReward_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCSetProbability_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCSetProbability_default_instance_;
    new (ptr) ::BYDLD::SCSetProbability();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCSetProbability_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCSetProbability_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCSetSkill_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCSetSkill_default_instance_;
    new (ptr) ::BYDLD::SCSetSkill();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCSetSkill_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCSetSkill_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCSetWings_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCSetWings_default_instance_;
    new (ptr) ::BYDLD::SCSetWings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCSetWings_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCSetWings_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCShootTorpedo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCShootTorpedo_default_instance_;
    new (ptr) ::BYDLD::SCShootTorpedo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCShootTorpedo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCShootTorpedo_BYDLD_2eproto}, {
      &scc_info_ObjectData_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCSuperTridentShoot_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCSuperTridentShoot_default_instance_;
    new (ptr) ::BYDLD::SCSuperTridentShoot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCSuperTridentShoot_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCSuperTridentShoot_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCSyncAnimation_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCSyncAnimation_default_instance_;
    new (ptr) ::BYDLD::SCSyncAnimation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCSyncAnimation_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCSyncAnimation_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCSyncCrabStatus_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCSyncCrabStatus_default_instance_;
    new (ptr) ::BYDLD::SCSyncCrabStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCSyncCrabStatus_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCSyncCrabStatus_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCSyncFishReq_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCSyncFishReq_default_instance_;
    new (ptr) ::BYDLD::SCSyncFishReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCSyncFishReq_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCSyncFishReq_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCSyncFishRsp_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCSyncFishRsp_default_instance_;
    new (ptr) ::BYDLD::SCSyncFishRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCSyncFishRsp_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCSyncFishRsp_BYDLD_2eproto}, {
      &scc_info_FishTraces_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCSyncFortune_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCSyncFortune_default_instance_;
    new (ptr) ::BYDLD::SCSyncFortune();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCSyncFortune_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCSyncFortune_BYDLD_2eproto}, {
      &scc_info_IngotInfo_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCSyncFreeTimes_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCSyncFreeTimes_default_instance_;
    new (ptr) ::BYDLD::SCSyncFreeTimes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCSyncFreeTimes_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCSyncFreeTimes_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCSyncHallProp_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCSyncHallProp_default_instance_;
    new (ptr) ::BYDLD::SCSyncHallProp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCSyncHallProp_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCSyncHallProp_BYDLD_2eproto}, {
      &scc_info_Object3_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCSyncMoney_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCSyncMoney_default_instance_;
    new (ptr) ::BYDLD::SCSyncMoney();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCSyncMoney_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCSyncMoney_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCSyncRewardTaskResult_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCSyncRewardTaskResult_default_instance_;
    new (ptr) ::BYDLD::SCSyncRewardTaskResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCSyncRewardTaskResult_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCSyncRewardTaskResult_BYDLD_2eproto}, {
      &scc_info_SCRewardTaskFinish_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCTaskInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCTaskInfo_default_instance_;
    new (ptr) ::BYDLD::SCTaskInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCTaskInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCTaskInfo_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCTortoiseExplode_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCTortoiseExplode_default_instance_;
    new (ptr) ::BYDLD::SCTortoiseExplode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCTortoiseExplode_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCTortoiseExplode_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCTridentBet_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCTridentBet_default_instance_;
    new (ptr) ::BYDLD::SCTridentBet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCTridentBet_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCTridentBet_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCTridentInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCTridentInfo_default_instance_;
    new (ptr) ::BYDLD::SCTridentInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCTridentInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCTridentInfo_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCTridentRankResult_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCTridentRankResult_default_instance_;
    new (ptr) ::BYDLD::SCTridentRankResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCTridentRankResult_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCTridentRankResult_BYDLD_2eproto}, {
      &scc_info_TridentRankList_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCUpdateChestStatus_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCUpdateChestStatus_default_instance_;
    new (ptr) ::BYDLD::SCUpdateChestStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCUpdateChestStatus_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCUpdateChestStatus_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCUserPoolAdd_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCUserPoolAdd_default_instance_;
    new (ptr) ::BYDLD::SCUserPoolAdd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCUserPoolAdd_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCUserPoolAdd_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCUserPoolDouble_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCUserPoolDouble_default_instance_;
    new (ptr) ::BYDLD::SCUserPoolDouble();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCUserPoolDouble_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCUserPoolDouble_BYDLD_2eproto}, {
      &scc_info_Object3_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCUserPoolDoubleInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCUserPoolDoubleInfo_default_instance_;
    new (ptr) ::BYDLD::SCUserPoolDoubleInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCUserPoolDoubleInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCUserPoolDoubleInfo_BYDLD_2eproto}, {
      &scc_info_Object2_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCUserPoolDraw_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCUserPoolDraw_default_instance_;
    new (ptr) ::BYDLD::SCUserPoolDraw();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SCUserPoolDraw_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SCUserPoolDraw_BYDLD_2eproto}, {
      &scc_info_GoodsInfo_BYDLD_2eproto.base,
      &scc_info_Object3_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCUserPoolInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCUserPoolInfo_default_instance_;
    new (ptr) ::BYDLD::SCUserPoolInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCUserPoolInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCUserPoolInfo_BYDLD_2eproto}, {
      &scc_info_UserAwardItem_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCUserPoolPreDraw_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCUserPoolPreDraw_default_instance_;
    new (ptr) ::BYDLD::SCUserPoolPreDraw();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCUserPoolPreDraw_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCUserPoolPreDraw_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCUserPoolStatus_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCUserPoolStatus_default_instance_;
    new (ptr) ::BYDLD::SCUserPoolStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCUserPoolStatus_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCUserPoolStatus_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCUserReady_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCUserReady_default_instance_;
    new (ptr) ::BYDLD::SCUserReady();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCUserReady_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCUserReady_BYDLD_2eproto}, {
      &scc_info_StationBase_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCUserRunBackground_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCUserRunBackground_default_instance_;
    new (ptr) ::BYDLD::SCUserRunBackground();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCUserRunBackground_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCUserRunBackground_BYDLD_2eproto}, {
      &scc_info_StationBase_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCUserShootMulti_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCUserShootMulti_default_instance_;
    new (ptr) ::BYDLD::SCUserShootMulti();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCUserShootMulti_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCUserShootMulti_BYDLD_2eproto}, {
      &scc_info_UserShootRsp_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SCUserTimeoutKick_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCUserTimeoutKick_default_instance_;
    new (ptr) ::BYDLD::SCUserTimeoutKick();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCUserTimeoutKick_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCUserTimeoutKick_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCVipInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCVipInfo_default_instance_;
    new (ptr) ::BYDLD::SCVipInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCVipInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCVipInfo_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCWaterDropInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCWaterDropInfo_default_instance_;
    new (ptr) ::BYDLD::SCWaterDropInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCWaterDropInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCWaterDropInfo_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SCWingsInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SCWingsInfo_default_instance_;
    new (ptr) ::BYDLD::SCWingsInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCWingsInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCWingsInfo_BYDLD_2eproto}, {
      &scc_info_WingsInfo_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SC_SceneInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SC_SceneInfo_default_instance_;
    new (ptr) ::BYDLD::SC_SceneInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SC_SceneInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SC_SceneInfo_BYDLD_2eproto}, {
      &scc_info_StationBase_BYDLD_2eproto.base,
      &scc_info_GunDetail_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_SSAwardPoolMsg_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SSAwardPoolMsg_default_instance_;
    new (ptr) ::BYDLD::SSAwardPoolMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSAwardPoolMsg_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SSAwardPoolMsg_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SkillTime_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SkillTime_default_instance_;
    new (ptr) ::BYDLD::SkillTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SkillTime_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SkillTime_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_SpecEffect_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_SpecEffect_default_instance_;
    new (ptr) ::BYDLD::SpecEffect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpecEffect_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpecEffect_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_StationBase_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_StationBase_default_instance_;
    new (ptr) ::BYDLD::StationBase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StationBase_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StationBase_BYDLD_2eproto}, {
      &scc_info_Decimal_BYDLD_2eproto.base,
      &scc_info_EffectInfo_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_TridentRankList_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_TridentRankList_default_instance_;
    new (ptr) ::BYDLD::TridentRankList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TridentRankList_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TridentRankList_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_UserAwardItem_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_UserAwardItem_default_instance_;
    new (ptr) ::BYDLD::UserAwardItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserAwardItem_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserAwardItem_BYDLD_2eproto}, {
      &scc_info_GoodsInfo_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_UserPoolActivityInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_UserPoolActivityInfo_default_instance_;
    new (ptr) ::BYDLD::UserPoolActivityInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserPoolActivityInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserPoolActivityInfo_BYDLD_2eproto}, {
      &scc_info_Object3_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_UserProp_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_UserProp_default_instance_;
    new (ptr) ::BYDLD::UserProp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserProp_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserProp_BYDLD_2eproto}, {
      &scc_info_Prop_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_UserScoreRecord_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_UserScoreRecord_default_instance_;
    new (ptr) ::BYDLD::UserScoreRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserScoreRecord_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserScoreRecord_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_UserShoot_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_UserShoot_default_instance_;
    new (ptr) ::BYDLD::UserShoot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserShoot_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserShoot_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_UserShootRsp_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_UserShootRsp_default_instance_;
    new (ptr) ::BYDLD::UserShootRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserShootRsp_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserShootRsp_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_UsersProp_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_UsersProp_default_instance_;
    new (ptr) ::BYDLD::UsersProp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UsersProp_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UsersProp_BYDLD_2eproto}, {
      &scc_info_UserProp_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_WingsInfo_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_WingsInfo_default_instance_;
    new (ptr) ::BYDLD::WingsInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WingsInfo_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WingsInfo_BYDLD_2eproto}, {
      &scc_info_WingsSpecEffect_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_WingsSpecEffect_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_WingsSpecEffect_default_instance_;
    new (ptr) ::BYDLD::WingsSpecEffect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WingsSpecEffect_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WingsSpecEffect_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_Zeus_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_Zeus_default_instance_;
    new (ptr) ::BYDLD::Zeus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Zeus_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Zeus_BYDLD_2eproto}, {
      &scc_info_zeus_result_BYDLD_2eproto.base,}};

static void InitDefaultsscc_info_roulette_result_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_roulette_result_default_instance_;
    new (ptr) ::BYDLD::roulette_result();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_roulette_result_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_roulette_result_BYDLD_2eproto}, {}};

static void InitDefaultsscc_info_zeus_result_BYDLD_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BYDLD::_zeus_result_default_instance_;
    new (ptr) ::BYDLD::zeus_result();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_zeus_result_BYDLD_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_zeus_result_BYDLD_2eproto}, {
      &scc_info_roulette_result_BYDLD_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_BYDLD_2eproto[264];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_BYDLD_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_BYDLD_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_BYDLD_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SC_SceneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SC_SceneInfo, station_base_list_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SC_SceneInfo, timestamp_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SC_SceneInfo, gun_ratio_num_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SC_SceneInfo, gun_level_num_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SC_SceneInfo, ratio_list_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SC_SceneInfo, gun_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::GunSpecEffect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::GunSpecEffect, ratiolimit_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::GunSpecEffect, hitchangerate_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::GunSpecEffect, moneychangerate_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::GunSpecEffect, speedrate_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::GunSpecEffect, is_senior_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::GunSpecEffect, double_tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::WingsSpecEffect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::WingsSpecEffect, ratiolimit_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::WingsSpecEffect, hitchangerate_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::WingsSpecEffect, moneychangerate_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::WingsSpecEffect, speedrate_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::WingsSpecEffect, is_senior_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::WingsSpecEffect, double_tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::WingsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::WingsInfo, wings_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::WingsInfo, enable_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::WingsInfo, wings_spec_effect_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::WingsInfo, receive_type_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::WingsInfo, activity_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::WingsInfo, price_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::WingsInfo, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::WingsInfo, discount_price_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::WingsInfo, start_time_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::WingsInfo, end_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::PurchaseGun, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::PurchaseGun, money_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::PurchaseGun, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCVipInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCVipInfo, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCVipInfo, cur_vip_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCVipInfo, trident1_vip_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCVipInfo, trident2_vip_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCVipInfo, trident3_vip_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCVipInfo, trident4_vip_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCVipInfo, trident5_vip_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCVipInfo, double_shoot_vip_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCVipInfo, lock_shoot_vip_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCVipInfo, golden_gun_vip_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCVipInfo, paladin_gun_vip_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCVipInfo, panda_gun_vip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::GunDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::GunDetail, gun_level_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::GunDetail, enable_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::GunDetail, ratio_min_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::GunDetail, ratio_max_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::GunDetail, vip_limit_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::GunDetail, price_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::GunDetail, attack_speed_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::GunDetail, prop_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::GunDetail, gunspeceffect_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::GunDetail, discount_price_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::GunDetail, start_time_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::GunDetail, end_time_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::GunDetail, ratio_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCWingsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCWingsInfo, wings_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCGunInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCGunInfo, gun_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCPurchaseCheck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCPurchaseCheck, is_purchase_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::ObjectData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::ObjectData, key_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::ObjectData, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::Object2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::Object2, key_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Object2, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::Object3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::Object3, key_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Object3, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::Object4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::Object4, key_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Object4, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::Decimal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::Decimal, num_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Decimal, denom_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSTridentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSTridentInfo, chair_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCTridentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCTridentInfo, bets_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCTridentInfo, is_full_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCTridentInfo, cur_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSTridentBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSTridentBet, bet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCTridentBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCTridentBet, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCTridentBet, award_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCTridentBet, score_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCTridentBet, bet_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCTridentBet, is_big_small_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCPropsTrident, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCPropsTrident, enable_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCPropsTrident, single_score_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCPropsTrident, cur_score_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCPropsTrident, rank_enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSBigSmallChoose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSBigSmallChoose, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSBigSmallChoose, enter_or_exit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCBigSmallChoose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCBigSmallChoose, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCBigSmallChoose, enter_exit_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCBigSmallChoose, award_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCBigSmallChoose, score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSBigSmallBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSBigSmallBet, is_bet_big_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSBigSmallBet, times_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCBigSmallBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCBigSmallBet, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCBigSmallBet, dices_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCBigSmallBet, is_bet_big_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCBigSmallBet, award_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCBigSmallBet, score_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCBigSmallBet, is_end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSShootTorpedo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSShootTorpedo, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSShootTorpedo, torpedo_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSShootTorpedo, shoot_all_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCShootTorpedo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCShootTorpedo, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCShootTorpedo, torpedo_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCShootTorpedo, award_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCShootTorpedo, score_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCShootTorpedo, objects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCPropsTorpedo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCPropsTorpedo, enable_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCPropsTorpedo, objects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::AwardPoolData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::AwardPoolData, key_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::AwardPoolData, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCPropsAwardPool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCPropsAwardPool, enable_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCPropsAwardPool, objects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSLoginGameWithToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSLoginGameWithToken, playerid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSLoginGameWithToken, token_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSLoginGameWithToken, ostype_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSLoginGameWithToken, table_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSLoginGameWithToken, last_table_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLoginGameWithToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLoginGameWithToken, scene_index_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLoginGameWithToken, table_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSUserReady, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSUserReady, playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::EffectInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::EffectInfo, effect_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::EffectInfo, is_global_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SpecEffect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SpecEffect, costmoney_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SpecEffect, earnmoney_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::StationBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::StationBase, gun_ratio_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::StationBase, gun_level_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::StationBase, is_online_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::StationBase, user_score_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::StationBase, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::StationBase, player_name_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::StationBase, through_flag_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::StationBase, double_flag_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::StationBase, player_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::StationBase, vip_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::StationBase, ticket_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::StationBase, effect_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::StationBase, title_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::StationBase, red_packet_ticket_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::StationBase, effect_info_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::StationBase, wings_props_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserReady, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserReady, station_base_list_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserReady, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::JadeAwardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::JadeAwardInfo, award_num_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::JadeAwardInfo, award_ratio_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::JadeAwardInfo, award_level_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::JadeAwardInfo, award_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSJadeAwardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCJadeAwardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCJadeAwardInfo, jade_award_info_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCJadeAwardInfo, crit_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSNotifyLogout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSNotifyLogout, chair_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCNotifyLogout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCNotifyLogout, chair_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSSetProbability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSSetProbability, gun_ratio_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSSetProbability, gun_level_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSSetProbability, is_use_auto_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSetProbability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSetProbability, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSetProbability, gun_ratio_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSetProbability, gun_level_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSetProbability, is_unlock_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::UserShoot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::UserShoot, angle_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::UserShoot, bullet_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::UserShoot, ratio_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::UserShoot, is_double_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::UserShoot, is_through_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::UserShoot, is_free_time_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::UserShoot, bullet_type_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::UserShoot, x_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::UserShoot, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSUserShootMulti, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSUserShootMulti, shoot_bullet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::UserShootRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::UserShootRsp, angle_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::UserShootRsp, bullet_type_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::UserShootRsp, x_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::UserShootRsp, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserShootMulti, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserShootMulti, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserShootMulti, bullet_info_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserShootMulti, score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::HitFish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::HitFish, fish_uid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::HitFish, bullet_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::HitFish, through_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::HitFish, fish_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::HitFish, effect_fish_uid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::HitFish, round_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::HitFish, ratio_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::HitFish, bullet_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSHitMultiFish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSHitMultiFish, hit_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::EffectFish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::EffectFish, fish_uid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::EffectFish, score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::DragonBallWheelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::DragonBallWheelInfo, ratio_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::DragonBallWheelInfo, next_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::DragonBallInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::DragonBallInfo, base_ratio_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::DragonBallInfo, wheel_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::DragonBallInfo, awardratio_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::DragonBallInfo, wheelinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::OctopusKingItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::OctopusKingItem, selectedmultiple_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::OctopusKingItem, selectlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::OctopusKingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::OctopusKingInfo, multiples_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::MagicCardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::MagicCardInfo, cardid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::MagicCardInfo, value_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::MagicCardInfo, label_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::MagicInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::MagicInfo, ratiocard_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::MagicInfo, magiccardlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::roulette_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::roulette_result, type_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::roulette_result, location_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::roulette_result, multiple_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::roulette_result, crit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::zeus_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::zeus_result, type_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::zeus_result, layout_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::zeus_result, result_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::zeus_result, pool_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::Zeus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::Zeus, result_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Zeus, total_multiple_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::GemConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::GemConfig, id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::GemConfig, multiple_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCGemConfigList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCGemConfigList, gem_config_list_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCGemConfigList, critical_config_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::ItemWheel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::ItemWheel, wheel_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::ItemWheel, wheel_level_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::ItemWheel, item_list_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::ItemWheel, result_list_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::ItemWheel, wheel_multi_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::ItemWheel, award_num_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::ItemWheel, award_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CritWheel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CritWheel, crit_list_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CritWheel, crit_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::GoldenJadeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::GoldenJadeInfo, item_wheels_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::GoldenJadeInfo, crit_wheel_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::GoldenJadeInfo, total_multi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::AztecGemConfigItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::AztecGemConfigItem, num_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::AztecGemConfigItem, ratio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::AztecGemConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::AztecGemConfig, items_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::AztecGemConfig, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSAztecGemConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCAztecGemConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCAztecGemConfig, configs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::AztecClearReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::AztecClearReward, type_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::AztecClearReward, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::AztecTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::AztecTable, gems_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::AztecTable, rewards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::AztecStep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::AztecStep, tables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::AztecDataInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::AztecDataInfo, steps_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::AztecDataInfo, total_win_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::Capturefish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::Capturefish, fish_uid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Capturefish, get_score_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Capturefish, fish_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Capturefish, torpedoes_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Capturefish, lucky_ratio_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Capturefish, trident_score_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Capturefish, effect_fish_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Capturefish, award_time_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Capturefish, bullettype_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Capturefish, multiple_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Capturefish, get_peilv_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Capturefish, death_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Capturefish, stage_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Capturefish, sub_stage_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Capturefish, award_index_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Capturefish, crit_multiple_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Capturefish, ingot_multi_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Capturefish, ratio_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Capturefish, frozen_time_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Capturefish, trident_multi_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Capturefish, scratch_card_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Capturefish, ball_info_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Capturefish, octopus_king_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Capturefish, is_reward_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Capturefish, magic_info_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Capturefish, zeus_info_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Capturefish, golden_jade_info_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Capturefish, aztec_data_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHitMultiFish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHitMultiFish, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHitMultiFish, invalid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHitMultiFish, capture_info_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHitMultiFish, score_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHitMultiFish, earn_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHitMultiFish, speceffect_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSSyncMoney, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSSyncMoney, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSSyncMoney, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncMoney, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncMoney, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncMoney, score_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncMoney, type_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncMoney, delta_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncMoney, invalid_score_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncMoney, freetime_score_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncMoney, ticket_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncMoney, ingot_score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::FishTrace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::FishTrace, x_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::FishTrace, y_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::FishTrace, z_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::FishTrace, wait_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCFishTracesList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCFishTracesList, fish_traces_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCFishTracesList, accelerate_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::FishTraces, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::FishTraces, fish_uid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::FishTraces, fish_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::FishTraces, live_time_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::FishTraces, speed_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::FishTraces, route_type_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::FishTraces, fish_trace_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::FishTraces, fish_cur_point_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::FishTraces, already_move_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::FishTraces, x_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::FishTraces, y_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::FishTraces, time_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::FishTraces, stage_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::FishTraces, sub_stage_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::FishTraces, lifespan_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::FishTraces, frozen_time_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::FishTraces, fish_gender_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::FishTraces, small_fish_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSSyncFishReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSSyncFishReq, chair_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncFishReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncFishReq, chair_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSSyncFishRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSSyncFishRsp, fish_traces_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSSyncFishRsp, accelerate_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncFishRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncFishRsp, fish_traces_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncFishRsp, accelerate_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCChangeScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCChangeScene, scene_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSFishOutsideScreen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSFishOutsideScreen, fish_uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSLockFish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSLockFish, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSLockFish, fish_uid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSLockFish, is_open_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLockFish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLockFish, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLockFish, fish_uid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLockFish, is_open_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSSetSkill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSSetSkill, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSSetSkill, double_flag_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSSetSkill, through_flag_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSSetSkill, auto_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSetSkill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSetSkill, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSetSkill, double_flag_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSetSkill, through_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserTimeoutKick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserTimeoutKick, count_sec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSUserRunBackground, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSUserRunBackground, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSUserRunBackground, background_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserRunBackground, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserRunBackground, station_base_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSUpdateHallProp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSUpdateHallProp, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSUpdateHallProp, configid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSHeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSHeartBeat, chair_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHeartBeat, chair_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCComTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCComTask, gun_ratio_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCComTask, gun_level_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCComTask, award_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCComTask, ticket_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSTaskInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCTaskInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCTaskInfo, gun_ratio_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCTaskInfo, gun_level_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCTaskInfo, cur_num_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCTaskInfo, total_num_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCTaskInfo, vip_level_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCTaskInfo, is_unlock_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCTaskInfo, award_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCTaskInfo, is_vip_unlock_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCTaskInfo, ticket_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::UserScoreRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::UserScoreRecord, type_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::UserScoreRecord, content_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::UserScoreRecord, score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSFreeTimeEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncFreeTimes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncFreeTimes, times_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncFreeTimes, level_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncFreeTimes, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncFreeTimes, type_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncFreeTimes, exchange_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSClickStatistic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSClickStatistic, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::JumpHighArena, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::JumpHighArena, is_open_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::JumpHighArena, vip_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::JumpHighArena, coin_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::JumpHighArena, game_time_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::JumpHighArena, fish_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::GiftBag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::GiftBag, is_open_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::GiftBag, fish_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::NewYearCardActivityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::NewYearCardActivityInfo, card_enable_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::NewYearCardActivityInfo, card_count_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::NewYearCardActivityInfo, card_vip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::UserPoolActivityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::UserPoolActivityInfo, user_pool_show_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::UserPoolActivityInfo, award_fish_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::UserPoolActivityInfo, user_pool_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::DragonBallConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::DragonBallConfig, ratio_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::DragonBallConfig, next_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCActivityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCActivityInfo, jump_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCActivityInfo, config_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCActivityInfo, card_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCActivityInfo, award_pool_rank_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCActivityInfo, user_pool_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCActivityInfo, lucky_draw_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCActivityInfo, dragon_wheel_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCActivityInfo, trident_wheel_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCActivityInfo, dragon_ball_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCActivityInfo, toad_multi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCPropEndNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCPropEndNotify, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCPropEndNotify, prop_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCPropEndNotify, status_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCPropEndNotify, free_level_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCPropEndNotify, free_times_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCPropDropNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCPropDropNotify, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCPropDropNotify, fish_uid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCPropDropNotify, prop_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCPropDropNotify, count_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCPropDropNotify, lock_ratio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::Prop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::Prop, id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Prop, count_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Prop, ratio_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Prop, x_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Prop, y_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Prop, angle_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Prop, status_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Prop, multiple_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Prop, crit_multi_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Prop, ingot_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Prop, remain_times_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Prop, total_times_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Prop, bullet_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Prop, ingot_multi_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Prop, trident_multi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::UserProp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::UserProp, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::UserProp, props_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::UsersProp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::UsersProp, user_prop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SSAwardPoolMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SSAwardPoolMsg, uniqueid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SSAwardPoolMsg, arenaid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SSAwardPoolMsg, poolid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SSAwardPoolMsg, delta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSScratchNewYearCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSScratchNewYearCard, chair_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSBuyNewYearCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSBuyNewYearCard, buy_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::NewYearCardMultiple, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::NewYearCardMultiple, award_no_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::NewYearCardMultiple, multiple_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCScratchNewYearCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCScratchNewYearCard, result_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCScratchNewYearCard, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCScratchNewYearCard, cur_score_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCScratchNewYearCard, base_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCScratchNewYearCard, count_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCScratchNewYearCard, multiples_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSNewYearCardExchange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSNewYearCardExchange, times_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSNewYearCardExchange, exchange_all_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::NewYearCardAward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::NewYearCardAward, card_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::NewYearCardAward, award_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::NewYearCardAward, bless_award_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::NewYearCardAward, base_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::NewYearCardAward, multiples_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCNewYearCardExchange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCNewYearCardExchange, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCNewYearCardExchange, result_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCNewYearCardExchange, awards_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCNewYearCardExchange, score_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCNewYearCardExchange, count_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCNewYearCardExchange, exchange_all_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCNewYearCardExchange, req_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSNewYearCardAwardRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::NewYearCardAwardRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::NewYearCardAwardRecord, time_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::NewYearCardAwardRecord, normal_award_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::NewYearCardAwardRecord, bless_award_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCNewYearCardAwardRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCNewYearCardAwardRecord, result_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCNewYearCardAwardRecord, records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SkillTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SkillTime, type_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SkillTime, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSSaveSkillTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSSaveSkillTime, skil_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSSuperTridentShoot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSuperTridentShoot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSuperTridentShoot, chair_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSSuperTridentAttack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSSuperTridentAttack, screen_fishes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CommonResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CommonResp, code_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CommonResp, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSAwardPoolRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::AwardPoolRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::AwardPoolRecord, time_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::AwardPoolRecord, name_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::AwardPoolRecord, poolid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::AwardPoolRecord, award_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::AwardPoolRecord, playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCAwardPoolRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCAwardPoolRecord, records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSFortuneShoot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCFortuneShoot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCFortuneShoot, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCFortuneShoot, can_shoot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::IngotInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::IngotInfo, ingot_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::IngotInfo, remain_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::IngotInfo, total_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncFortune, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncFortune, ingot_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSUserPoolInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSUserPoolInfo, open_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::GoodsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::GoodsInfo, prop_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::GoodsInfo, prop_num_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::GoodsInfo, client_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::UserAwardItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::UserAwardItem, index_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::UserAwardItem, item_max_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::UserAwardItem, name_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::UserAwardItem, goods_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolInfo, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolInfo, open_page_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolInfo, status_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolInfo, count_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolInfo, pool_max_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolInfo, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSUserPoolStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSUserPoolStatus, open_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolStatus, open_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSUserPoolPreDraw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSUserPoolPreDraw, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolPreDraw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolPreDraw, code_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolPreDraw, level_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolPreDraw, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSUserPoolDraw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolDraw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolDraw, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolDraw, goods_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolDraw, award_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolDraw, award_cnt_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolDraw, upgradecost_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolDraw, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolAdd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolAdd, add_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolAdd, count_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolAdd, first_max_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolAdd, pool_max_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolAdd, status_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolAdd, level_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::ResultRank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::ResultRank, idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::ResultRank, icon_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::ResultRank, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCMatchResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCMatchResult, matchid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCMatchResult, rank_list_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCMatchResult, ispack_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCMatchResult, oneself_rank_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCMatchResult, addition_source_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCMatchResult, reaward_addition_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCMatchResult, match_goods_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCMatchResult, pack_goods_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCMatchResult, lucky_goods_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::MatchPackAddition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::MatchPackAddition, id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::MatchPackAddition, is_buy_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::MatchPackAddition, score_addition_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::MatchPackAddition, reaward_addition_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::MatchPackAddition, card_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::MatchPackAddition, sec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSMatchPackAddition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCMatchPackAddition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCMatchPackAddition, addition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCMatchPackInvail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCMatchPackInvail, packid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::HttpResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::HttpResult, en_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::HttpResult, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSHBonusPool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSHBonusPool, mathcid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSHBonusPool, timeid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSHBonusPool, playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::HBonusPool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::HBonusPool, name_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::HBonusPool, value_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::HBonusPool, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHBonusPool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHBonusPool, pool_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSHRankBar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSHRankBar, mathcid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSHRankBar, timeid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSHRankBar, playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHRankBar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHRankBar, idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHRankBar, total_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHRankBar, reaward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::RealRank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::RealRank, idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::RealRank, icon_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::RealRank, name_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::RealRank, score_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::RealRank, goods_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSHRealRank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSHRealRank, playerid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSHRealRank, mathcid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSHRealRank, timeid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHRealRank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHRealRank, real_rank_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHRealRank, onself_rank_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHRealRank, total_num_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHRealRank, score_addition_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHRealRank, reward_addition_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHRealRank, card_addition_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHRealRank, vip_addition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::Reward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::Reward, idxl_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Reward, idxr_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Reward, goods_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::Reward, lucky_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSHReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSHReward, mathcid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSHReward, timeid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHReward, rewards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSHMatchInfoTip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::MatchInfoTip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::MatchInfoTip, name_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::MatchInfoTip, mathcid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::MatchInfoTip, time_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::MatchInfoTip, goods_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHMatchInfoTip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHMatchInfoTip, matchtips_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSHMatchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSHMatchInfo, playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHMatchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHMatchInfo, name_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHMatchInfo, mathcid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHMatchInfo, timeid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHMatchInfo, status_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHMatchInfo, down_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHMatchInfo, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::HistoryRank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::HistoryRank, idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::HistoryRank, icon_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::HistoryRank, name_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::HistoryRank, addition_source_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::HistoryRank, addition_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::HistoryRank, match_goods_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::HistoryRank, pack_goods_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::HistoryRank, lucky_goods_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSHHistoryRank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSHHistoryRank, playerid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSHHistoryRank, matchid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHHistoryRank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHHistoryRank, matchid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHHistoryRank, rank_list_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHHistoryRank, oneself_rank_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSHLuckyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSHLuckyInfo, matchid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::LuckyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::LuckyInfo, lrange_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::LuckyInfo, rrange_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHLuckyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHLuckyInfo, matchid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCHLuckyInfo, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::AwardDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::AwardDetail, player_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::AwardDetail, nums_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::AwardDetail, period_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::AwardDetail, vip_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::AwardDetail, nick_name_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::AwardDetail, photo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyAwardNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyAwardNotify, award_type_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyAwardNotify, detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::AwardProp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::AwardProp, prop_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::AwardProp, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::LuckyTaskInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::LuckyTaskInfo, id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::LuckyTaskInfo, status_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::LuckyTaskInfo, score_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::LuckyTaskInfo, text_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::LuckyTaskInfo, cur_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::LuckyTaskInfo, total_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::LuckyTaskInfo, show_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSLuckyDrawInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyDrawInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyDrawInfo, hour_remain_sec_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyDrawInfo, day_remain_sec_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyDrawInfo, hour_reward_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyDrawInfo, day_reward_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyDrawInfo, day_lucky_nums_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyDrawInfo, score_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyDrawInfo, hour_total_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyDrawInfo, day_total_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyDrawInfo, hour_award_num_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyDrawInfo, day_award_num_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyDrawInfo, next_start_tick_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyDrawInfo, task_info_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyDrawInfo, exchange_score_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyDrawInfo, next_remain_sec_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyDrawInfo, hour_lucky_nums_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSGetLuckyTaskAward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSGetLuckyTaskAward, task_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyTaskInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyTaskInfo, task_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyTaskInfo, score_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyTaskInfo, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSGetLuckyNum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSGetLuckyNum, times_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCGetLuckyNum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCGetLuckyNum, score_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCGetLuckyNum, error_code_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCGetLuckyNum, lucky_nums_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSLuckyRedDot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyRedDot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyRedDot, show_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::LuckyRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::LuckyRecord, vip_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::LuckyRecord, times_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::LuckyRecord, lucky_num_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::LuckyRecord, tick_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::LuckyRecord, nick_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::OwnRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::OwnRecord, reward_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::OwnRecord, status_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::OwnRecord, tick_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::OwnRecord, lucky_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSLuckyRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSLuckyRecord, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyRecord, type_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyRecord, record_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCOwnRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCOwnRecord, record_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSDragonWheelStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSDragonWheelStart, stage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCDragonWheelStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCDragonWheelStop, stage_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCDragonWheelStop, ratio_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCDragonWheelStop, score_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCDragonWheelStop, atomic_ratio_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCDragonWheelStop, fortune_ratio_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCDragonWheelStop, poseidon_ratio_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCDragonWheelStop, error_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCDragonWheelStop, chair_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCDragonWheelStop, fish_value_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCDragonWheelStop, is_prop_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCDragonWheelStop, bullet_ratio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncHallProp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncHallProp, hall_prop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSCheckDragonWheelProp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSCheckDragonWheelProp, prop_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCCheckDragonWheelProp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCCheckDragonWheelProp, can_use_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCCheckDragonWheelProp, prop_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCCheckDragonWheelProp, chair_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCCheckDragonWheelProp, ratio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSUserPoolDoubleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolDoubleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolDoubleInfo, cost_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolDoubleInfo, item_before_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolDoubleInfo, item_double_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSUserPoolDouble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSUserPoolDouble, is_double_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolDouble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolDouble, code_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolDouble, result_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolDouble, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolDouble, item_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUserPoolDouble, extra_item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSLuckyPoolInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyPoolInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyPoolInfo, count_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyPoolInfo, max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSLuckyPoolDraw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyPoolDraw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCLuckyPoolDraw, item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::TridentRankList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::TridentRankList, user_dbid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::TridentRankList, nick_name_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::TridentRankList, continue_times_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::TridentRankList, date_time_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::TridentRankList, rank_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCTridentRankResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCTridentRankResult, cur_ranks_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCTridentRankResult, his_ranks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSBigSmallWinInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSBigSmallWinInfo, chair_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCBigSmallWinInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCBigSmallWinInfo, cur_win_times_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCBigSmallWinInfo, today_win_times_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCBigSmallWinInfo, date_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSBigSmallRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSBigSmallRecord, max_get_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::BigSmallRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::BigSmallRecord, dices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCBigSmallRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCBigSmallRecord, records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::ItemEnableInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::ItemEnableInfo, name_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::ItemEnableInfo, enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::ItemEnableNotice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::ItemEnableNotice, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::RewardTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::RewardTask, taskid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::RewardTask, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::RewardConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::RewardConf, taskid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::RewardConf, naward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSReqRewardAddTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSReqRewardAddTask, id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSReqRewardAddTask, taskid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCRepRewardTaskList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCRepRewardTaskList, id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCRepRewardTaskList, tlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCRewardTaskFinish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCRewardTaskFinish, result_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCRewardTaskFinish, money_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCRewardTaskFinish, tlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncRewardTaskResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncRewardTaskResult, chair_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncRewardTaskResult, result_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncRewardTaskResult, earn_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncRewardTaskResult, fish_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncRewardTaskResult, get_peilv_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncRewardTaskResult, multiple_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncRewardTaskResult, crit_multiple_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncRewardTaskResult, ingot_multi_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncRewardTaskResult, trident_multi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSReqRewardRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSReqRewardRecord, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCRepRewardTaskRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCRepRewardTaskRecord, id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCRepRewardTaskRecord, nrecord_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCRepRewardTaskRecord, cost_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCRepRewardTaskRecord, record_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCRepRewardTaskRecord, conflist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSRewardChangeAuto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSRewardChangeAuto, autotimes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCRewardAutoRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCRewardAutoRep, status_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCRewardAutoRep, accept_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSeaCrabCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSeaCrabCreate, chair_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSeaCrabCreate, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSSyncCrabStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncCrabStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncCrabStatus, status_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncCrabStatus, chair_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncCrabStatus, multiple_1_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncCrabStatus, multiple_2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSDragonBallEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCDragonBallRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCDragonBallRes, chair_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCDragonBallRes, lock_ratio_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCDragonBallRes, base_ratio_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCDragonBallRes, total_award_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::DevouredFish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::DevouredFish, fish_uid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::DevouredFish, earn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSDevourHit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSDevourHit, screen_fishes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCDevourHit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCDevourHit, devour_fishes_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCDevourHit, crit_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCDevourHit, multiple_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCDevourHit, ingot_multi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::OpenChestReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::OpenChestReward, id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::OpenChestReward, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUpdateChestStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUpdateChestStatus, is_active_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUpdateChestStatus, chest_type_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUpdateChestStatus, total_progress_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUpdateChestStatus, remain_progress_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUpdateChestStatus, guide_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCUpdateChestStatus, available_reward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSChestConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::ChestBrief, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::ChestBrief, chest_type_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::ChestBrief, reward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCChestConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCChestConfig, end_time_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCChestConfig, chest_brief_list_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCChestConfig, min_ratio_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCChestConfig, auto_open_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCChestConfig, auto_option_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCChestConfig, is_enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSOpenChest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCOpenChest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCOpenChest, reward_list_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCOpenChest, auto_option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSSelectChestReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSSelectChestReward, select_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSelectChestReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSelectChestReward, reward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSChestSetAutoSelect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSChestSetAutoSelect, auto_option_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSChestSetAutoSelect, auto_open_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCChestSetAutoSelect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCChestSetAutoSelect, auto_option_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCChestSetAutoSelect, auto_open_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSChestSetEnable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSChestSetEnable, is_enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCChestSetEnable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCChestSetEnable, is_enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSSyncAnimation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSSyncAnimation, animationid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSSyncAnimation, step_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSSyncAnimation, complete_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSSyncAnimation, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncAnimation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncAnimation, animationid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncAnimation, step_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncAnimation, complete_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSyncAnimation, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSMagicCardList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCMagicCardList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCMagicCardList, magiccardlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCTortoiseExplode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCTortoiseExplode, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCTortoiseExplode, fish_uid_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCTortoiseExplode, bullet_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCTortoiseExplode, ratio_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCTortoiseExplode, max_effect_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCTortoiseExplode, is_double_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSBuyGun, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSBuyGun, gun_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCBuyGun, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCBuyGun, is_buy_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCBuyGun, gun_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCWaterDropInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCWaterDropInfo, enable_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCWaterDropInfo, drop_count_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCWaterDropInfo, fragment_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSBuyWings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSBuyWings, wings_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCBuyWings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCBuyWings, wings_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCBuyWings, is_buy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSSetWings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSSetWings, wings_prop_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSetWings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSetWings, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSetWings, wings_prop_id_),
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCSetWings, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCBeKicked, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCBeKicked, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSClientTimeValidate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSClientTimeValidate, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCClientTimeValidate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::CSChangeTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BYDLD::SCChangeTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::BYDLD::SC_SceneInfo)},
  { 11, -1, sizeof(::BYDLD::GunSpecEffect)},
  { 22, -1, sizeof(::BYDLD::WingsSpecEffect)},
  { 33, -1, sizeof(::BYDLD::WingsInfo)},
  { 48, -1, sizeof(::BYDLD::PurchaseGun)},
  { 55, -1, sizeof(::BYDLD::SCVipInfo)},
  { 72, -1, sizeof(::BYDLD::GunDetail)},
  { 90, -1, sizeof(::BYDLD::SCWingsInfo)},
  { 96, -1, sizeof(::BYDLD::SCGunInfo)},
  { 102, -1, sizeof(::BYDLD::SCPurchaseCheck)},
  { 108, -1, sizeof(::BYDLD::ObjectData)},
  { 115, -1, sizeof(::BYDLD::Object2)},
  { 122, -1, sizeof(::BYDLD::Object3)},
  { 129, -1, sizeof(::BYDLD::Object4)},
  { 136, -1, sizeof(::BYDLD::Decimal)},
  { 143, -1, sizeof(::BYDLD::CSTridentInfo)},
  { 149, -1, sizeof(::BYDLD::SCTridentInfo)},
  { 157, -1, sizeof(::BYDLD::CSTridentBet)},
  { 163, -1, sizeof(::BYDLD::SCTridentBet)},
  { 173, -1, sizeof(::BYDLD::SCPropsTrident)},
  { 182, -1, sizeof(::BYDLD::CSBigSmallChoose)},
  { 189, -1, sizeof(::BYDLD::SCBigSmallChoose)},
  { 198, -1, sizeof(::BYDLD::CSBigSmallBet)},
  { 205, -1, sizeof(::BYDLD::SCBigSmallBet)},
  { 216, -1, sizeof(::BYDLD::CSShootTorpedo)},
  { 224, -1, sizeof(::BYDLD::SCShootTorpedo)},
  { 234, -1, sizeof(::BYDLD::SCPropsTorpedo)},
  { 241, -1, sizeof(::BYDLD::AwardPoolData)},
  { 248, -1, sizeof(::BYDLD::SCPropsAwardPool)},
  { 255, -1, sizeof(::BYDLD::CSLoginGameWithToken)},
  { 265, -1, sizeof(::BYDLD::SCLoginGameWithToken)},
  { 272, -1, sizeof(::BYDLD::CSUserReady)},
  { 278, -1, sizeof(::BYDLD::EffectInfo)},
  { 285, -1, sizeof(::BYDLD::SpecEffect)},
  { 292, -1, sizeof(::BYDLD::StationBase)},
  { 313, -1, sizeof(::BYDLD::SCUserReady)},
  { 320, -1, sizeof(::BYDLD::JadeAwardInfo)},
  { 329, -1, sizeof(::BYDLD::CSJadeAwardInfo)},
  { 334, -1, sizeof(::BYDLD::SCJadeAwardInfo)},
  { 341, -1, sizeof(::BYDLD::CSNotifyLogout)},
  { 347, -1, sizeof(::BYDLD::SCNotifyLogout)},
  { 353, -1, sizeof(::BYDLD::CSSetProbability)},
  { 361, -1, sizeof(::BYDLD::SCSetProbability)},
  { 370, -1, sizeof(::BYDLD::UserShoot)},
  { 384, -1, sizeof(::BYDLD::CSUserShootMulti)},
  { 390, -1, sizeof(::BYDLD::UserShootRsp)},
  { 399, -1, sizeof(::BYDLD::SCUserShootMulti)},
  { 407, -1, sizeof(::BYDLD::HitFish)},
  { 420, -1, sizeof(::BYDLD::CSHitMultiFish)},
  { 426, -1, sizeof(::BYDLD::EffectFish)},
  { 433, -1, sizeof(::BYDLD::DragonBallWheelInfo)},
  { 440, -1, sizeof(::BYDLD::DragonBallInfo)},
  { 449, -1, sizeof(::BYDLD::OctopusKingItem)},
  { 456, -1, sizeof(::BYDLD::OctopusKingInfo)},
  { 462, -1, sizeof(::BYDLD::MagicCardInfo)},
  { 470, -1, sizeof(::BYDLD::MagicInfo)},
  { 477, -1, sizeof(::BYDLD::roulette_result)},
  { 486, -1, sizeof(::BYDLD::zeus_result)},
  { 495, -1, sizeof(::BYDLD::Zeus)},
  { 502, -1, sizeof(::BYDLD::GemConfig)},
  { 509, -1, sizeof(::BYDLD::SCGemConfigList)},
  { 516, -1, sizeof(::BYDLD::ItemWheel)},
  { 528, -1, sizeof(::BYDLD::CritWheel)},
  { 535, -1, sizeof(::BYDLD::GoldenJadeInfo)},
  { 543, -1, sizeof(::BYDLD::AztecGemConfigItem)},
  { 550, -1, sizeof(::BYDLD::AztecGemConfig)},
  { 557, -1, sizeof(::BYDLD::CSAztecGemConfig)},
  { 562, -1, sizeof(::BYDLD::SCAztecGemConfig)},
  { 568, -1, sizeof(::BYDLD::AztecClearReward)},
  { 575, -1, sizeof(::BYDLD::AztecTable)},
  { 582, -1, sizeof(::BYDLD::AztecStep)},
  { 588, -1, sizeof(::BYDLD::AztecDataInfo)},
  { 595, -1, sizeof(::BYDLD::Capturefish)},
  { 628, -1, sizeof(::BYDLD::SCHitMultiFish)},
  { 639, -1, sizeof(::BYDLD::CSSyncMoney)},
  { 646, -1, sizeof(::BYDLD::SCSyncMoney)},
  { 659, -1, sizeof(::BYDLD::FishTrace)},
  { 668, -1, sizeof(::BYDLD::SCFishTracesList)},
  { 675, -1, sizeof(::BYDLD::FishTraces)},
  { 697, -1, sizeof(::BYDLD::CSSyncFishReq)},
  { 703, -1, sizeof(::BYDLD::SCSyncFishReq)},
  { 709, -1, sizeof(::BYDLD::CSSyncFishRsp)},
  { 716, -1, sizeof(::BYDLD::SCSyncFishRsp)},
  { 723, -1, sizeof(::BYDLD::SCChangeScene)},
  { 729, -1, sizeof(::BYDLD::CSFishOutsideScreen)},
  { 735, -1, sizeof(::BYDLD::CSLockFish)},
  { 743, -1, sizeof(::BYDLD::SCLockFish)},
  { 751, -1, sizeof(::BYDLD::CSSetSkill)},
  { 760, -1, sizeof(::BYDLD::SCSetSkill)},
  { 768, -1, sizeof(::BYDLD::SCUserTimeoutKick)},
  { 774, -1, sizeof(::BYDLD::CSUserRunBackground)},
  { 781, -1, sizeof(::BYDLD::SCUserRunBackground)},
  { 787, -1, sizeof(::BYDLD::CSUpdateHallProp)},
  { 794, -1, sizeof(::BYDLD::CSHeartBeat)},
  { 800, -1, sizeof(::BYDLD::SCHeartBeat)},
  { 806, -1, sizeof(::BYDLD::SCComTask)},
  { 815, -1, sizeof(::BYDLD::CSTaskInfo)},
  { 820, -1, sizeof(::BYDLD::SCTaskInfo)},
  { 834, -1, sizeof(::BYDLD::UserScoreRecord)},
  { 842, -1, sizeof(::BYDLD::CSFreeTimeEnd)},
  { 847, -1, sizeof(::BYDLD::SCSyncFreeTimes)},
  { 857, -1, sizeof(::BYDLD::CSClickStatistic)},
  { 863, -1, sizeof(::BYDLD::JumpHighArena)},
  { 873, -1, sizeof(::BYDLD::GiftBag)},
  { 880, -1, sizeof(::BYDLD::NewYearCardActivityInfo)},
  { 888, -1, sizeof(::BYDLD::UserPoolActivityInfo)},
  { 896, -1, sizeof(::BYDLD::DragonBallConfig)},
  { 903, -1, sizeof(::BYDLD::SCActivityInfo)},
  { 918, -1, sizeof(::BYDLD::SCPropEndNotify)},
  { 928, -1, sizeof(::BYDLD::SCPropDropNotify)},
  { 938, -1, sizeof(::BYDLD::Prop)},
  { 958, -1, sizeof(::BYDLD::UserProp)},
  { 965, -1, sizeof(::BYDLD::UsersProp)},
  { 971, -1, sizeof(::BYDLD::SSAwardPoolMsg)},
  { 980, -1, sizeof(::BYDLD::CSScratchNewYearCard)},
  { 986, -1, sizeof(::BYDLD::CSBuyNewYearCard)},
  { 992, -1, sizeof(::BYDLD::NewYearCardMultiple)},
  { 999, -1, sizeof(::BYDLD::SCScratchNewYearCard)},
  { 1010, -1, sizeof(::BYDLD::CSNewYearCardExchange)},
  { 1017, -1, sizeof(::BYDLD::NewYearCardAward)},
  { 1027, -1, sizeof(::BYDLD::SCNewYearCardExchange)},
  { 1039, -1, sizeof(::BYDLD::CSNewYearCardAwardRecord)},
  { 1044, -1, sizeof(::BYDLD::NewYearCardAwardRecord)},
  { 1052, -1, sizeof(::BYDLD::SCNewYearCardAwardRecord)},
  { 1059, -1, sizeof(::BYDLD::SkillTime)},
  { 1066, -1, sizeof(::BYDLD::CSSaveSkillTime)},
  { 1072, -1, sizeof(::BYDLD::CSSuperTridentShoot)},
  { 1077, -1, sizeof(::BYDLD::SCSuperTridentShoot)},
  { 1083, -1, sizeof(::BYDLD::CSSuperTridentAttack)},
  { 1089, -1, sizeof(::BYDLD::CommonResp)},
  { 1096, -1, sizeof(::BYDLD::CSAwardPoolRecord)},
  { 1101, -1, sizeof(::BYDLD::AwardPoolRecord)},
  { 1111, -1, sizeof(::BYDLD::SCAwardPoolRecord)},
  { 1117, -1, sizeof(::BYDLD::CSFortuneShoot)},
  { 1122, -1, sizeof(::BYDLD::SCFortuneShoot)},
  { 1129, -1, sizeof(::BYDLD::IngotInfo)},
  { 1137, -1, sizeof(::BYDLD::SCSyncFortune)},
  { 1143, -1, sizeof(::BYDLD::CSUserPoolInfo)},
  { 1149, -1, sizeof(::BYDLD::GoodsInfo)},
  { 1157, -1, sizeof(::BYDLD::UserAwardItem)},
  { 1166, -1, sizeof(::BYDLD::SCUserPoolInfo)},
  { 1177, -1, sizeof(::BYDLD::CSUserPoolStatus)},
  { 1183, -1, sizeof(::BYDLD::SCUserPoolStatus)},
  { 1189, -1, sizeof(::BYDLD::CSUserPoolPreDraw)},
  { 1195, -1, sizeof(::BYDLD::SCUserPoolPreDraw)},
  { 1203, -1, sizeof(::BYDLD::CSUserPoolDraw)},
  { 1208, -1, sizeof(::BYDLD::SCUserPoolDraw)},
  { 1219, -1, sizeof(::BYDLD::SCUserPoolAdd)},
  { 1230, -1, sizeof(::BYDLD::ResultRank)},
  { 1238, -1, sizeof(::BYDLD::SCMatchResult)},
  { 1252, -1, sizeof(::BYDLD::MatchPackAddition)},
  { 1263, -1, sizeof(::BYDLD::CSMatchPackAddition)},
  { 1268, -1, sizeof(::BYDLD::SCMatchPackAddition)},
  { 1274, -1, sizeof(::BYDLD::SCMatchPackInvail)},
  { 1280, -1, sizeof(::BYDLD::HttpResult)},
  { 1287, -1, sizeof(::BYDLD::CSHBonusPool)},
  { 1295, -1, sizeof(::BYDLD::HBonusPool)},
  { 1303, -1, sizeof(::BYDLD::SCHBonusPool)},
  { 1309, -1, sizeof(::BYDLD::CSHRankBar)},
  { 1317, -1, sizeof(::BYDLD::SCHRankBar)},
  { 1325, -1, sizeof(::BYDLD::RealRank)},
  { 1335, -1, sizeof(::BYDLD::CSHRealRank)},
  { 1343, -1, sizeof(::BYDLD::SCHRealRank)},
  { 1355, -1, sizeof(::BYDLD::Reward)},
  { 1364, -1, sizeof(::BYDLD::CSHReward)},
  { 1371, -1, sizeof(::BYDLD::SCHReward)},
  { 1377, -1, sizeof(::BYDLD::CSHMatchInfoTip)},
  { 1382, -1, sizeof(::BYDLD::MatchInfoTip)},
  { 1391, -1, sizeof(::BYDLD::SCHMatchInfoTip)},
  { 1397, -1, sizeof(::BYDLD::CSHMatchInfo)},
  { 1403, -1, sizeof(::BYDLD::SCHMatchInfo)},
  { 1414, -1, sizeof(::BYDLD::HistoryRank)},
  { 1427, -1, sizeof(::BYDLD::CSHHistoryRank)},
  { 1434, -1, sizeof(::BYDLD::SCHHistoryRank)},
  { 1442, -1, sizeof(::BYDLD::CSHLuckyInfo)},
  { 1448, -1, sizeof(::BYDLD::LuckyInfo)},
  { 1455, -1, sizeof(::BYDLD::SCHLuckyInfo)},
  { 1462, -1, sizeof(::BYDLD::AwardDetail)},
  { 1473, -1, sizeof(::BYDLD::SCLuckyAwardNotify)},
  { 1480, -1, sizeof(::BYDLD::AwardProp)},
  { 1487, -1, sizeof(::BYDLD::LuckyTaskInfo)},
  { 1499, -1, sizeof(::BYDLD::CSLuckyDrawInfo)},
  { 1504, -1, sizeof(::BYDLD::SCLuckyDrawInfo)},
  { 1524, -1, sizeof(::BYDLD::CSGetLuckyTaskAward)},
  { 1530, -1, sizeof(::BYDLD::SCLuckyTaskInfo)},
  { 1538, -1, sizeof(::BYDLD::CSGetLuckyNum)},
  { 1544, -1, sizeof(::BYDLD::SCGetLuckyNum)},
  { 1552, -1, sizeof(::BYDLD::CSLuckyRedDot)},
  { 1557, -1, sizeof(::BYDLD::SCLuckyRedDot)},
  { 1563, -1, sizeof(::BYDLD::LuckyRecord)},
  { 1573, -1, sizeof(::BYDLD::OwnRecord)},
  { 1582, -1, sizeof(::BYDLD::CSLuckyRecord)},
  { 1588, -1, sizeof(::BYDLD::SCLuckyRecord)},
  { 1595, -1, sizeof(::BYDLD::SCOwnRecord)},
  { 1601, -1, sizeof(::BYDLD::CSDragonWheelStart)},
  { 1607, -1, sizeof(::BYDLD::SCDragonWheelStop)},
  { 1623, -1, sizeof(::BYDLD::SCSyncHallProp)},
  { 1629, -1, sizeof(::BYDLD::CSCheckDragonWheelProp)},
  { 1635, -1, sizeof(::BYDLD::SCCheckDragonWheelProp)},
  { 1644, -1, sizeof(::BYDLD::CSUserPoolDoubleInfo)},
  { 1649, -1, sizeof(::BYDLD::SCUserPoolDoubleInfo)},
  { 1657, -1, sizeof(::BYDLD::CSUserPoolDouble)},
  { 1663, -1, sizeof(::BYDLD::SCUserPoolDouble)},
  { 1673, -1, sizeof(::BYDLD::CSLuckyPoolInfo)},
  { 1678, -1, sizeof(::BYDLD::SCLuckyPoolInfo)},
  { 1685, -1, sizeof(::BYDLD::CSLuckyPoolDraw)},
  { 1690, -1, sizeof(::BYDLD::SCLuckyPoolDraw)},
  { 1696, -1, sizeof(::BYDLD::TridentRankList)},
  { 1706, -1, sizeof(::BYDLD::SCTridentRankResult)},
  { 1713, -1, sizeof(::BYDLD::CSBigSmallWinInfo)},
  { 1719, -1, sizeof(::BYDLD::SCBigSmallWinInfo)},
  { 1727, -1, sizeof(::BYDLD::CSBigSmallRecord)},
  { 1733, -1, sizeof(::BYDLD::BigSmallRecord)},
  { 1739, -1, sizeof(::BYDLD::SCBigSmallRecord)},
  { 1745, -1, sizeof(::BYDLD::ItemEnableInfo)},
  { 1752, -1, sizeof(::BYDLD::ItemEnableNotice)},
  { 1758, -1, sizeof(::BYDLD::RewardTask)},
  { 1765, -1, sizeof(::BYDLD::RewardConf)},
  { 1772, -1, sizeof(::BYDLD::CSReqRewardAddTask)},
  { 1779, -1, sizeof(::BYDLD::SCRepRewardTaskList)},
  { 1786, -1, sizeof(::BYDLD::SCRewardTaskFinish)},
  { 1794, -1, sizeof(::BYDLD::SCSyncRewardTaskResult)},
  { 1808, -1, sizeof(::BYDLD::CSReqRewardRecord)},
  { 1814, -1, sizeof(::BYDLD::SCRepRewardTaskRecord)},
  { 1824, -1, sizeof(::BYDLD::CSRewardChangeAuto)},
  { 1830, -1, sizeof(::BYDLD::SCRewardAutoRep)},
  { 1837, -1, sizeof(::BYDLD::SCSeaCrabCreate)},
  { 1844, -1, sizeof(::BYDLD::CSSyncCrabStatus)},
  { 1849, -1, sizeof(::BYDLD::SCSyncCrabStatus)},
  { 1858, -1, sizeof(::BYDLD::CSDragonBallEnd)},
  { 1863, -1, sizeof(::BYDLD::SCDragonBallRes)},
  { 1872, -1, sizeof(::BYDLD::DevouredFish)},
  { 1879, -1, sizeof(::BYDLD::CSDevourHit)},
  { 1885, -1, sizeof(::BYDLD::SCDevourHit)},
  { 1894, -1, sizeof(::BYDLD::OpenChestReward)},
  { 1901, -1, sizeof(::BYDLD::SCUpdateChestStatus)},
  { 1912, -1, sizeof(::BYDLD::CSChestConfig)},
  { 1917, -1, sizeof(::BYDLD::ChestBrief)},
  { 1924, -1, sizeof(::BYDLD::SCChestConfig)},
  { 1935, -1, sizeof(::BYDLD::CSOpenChest)},
  { 1940, -1, sizeof(::BYDLD::SCOpenChest)},
  { 1947, -1, sizeof(::BYDLD::CSSelectChestReward)},
  { 1953, -1, sizeof(::BYDLD::SCSelectChestReward)},
  { 1959, -1, sizeof(::BYDLD::CSChestSetAutoSelect)},
  { 1966, -1, sizeof(::BYDLD::SCChestSetAutoSelect)},
  { 1973, -1, sizeof(::BYDLD::CSChestSetEnable)},
  { 1979, -1, sizeof(::BYDLD::SCChestSetEnable)},
  { 1985, -1, sizeof(::BYDLD::CSSyncAnimation)},
  { 1994, -1, sizeof(::BYDLD::SCSyncAnimation)},
  { 2003, -1, sizeof(::BYDLD::CSMagicCardList)},
  { 2008, -1, sizeof(::BYDLD::SCMagicCardList)},
  { 2014, -1, sizeof(::BYDLD::SCTortoiseExplode)},
  { 2025, -1, sizeof(::BYDLD::CSBuyGun)},
  { 2031, -1, sizeof(::BYDLD::SCBuyGun)},
  { 2038, -1, sizeof(::BYDLD::SCWaterDropInfo)},
  { 2046, -1, sizeof(::BYDLD::CSBuyWings)},
  { 2052, -1, sizeof(::BYDLD::SCBuyWings)},
  { 2059, -1, sizeof(::BYDLD::CSSetWings)},
  { 2065, -1, sizeof(::BYDLD::SCSetWings)},
  { 2073, -1, sizeof(::BYDLD::SCBeKicked)},
  { 2079, -1, sizeof(::BYDLD::CSClientTimeValidate)},
  { 2085, -1, sizeof(::BYDLD::SCClientTimeValidate)},
  { 2090, -1, sizeof(::BYDLD::CSChangeTable)},
  { 2095, -1, sizeof(::BYDLD::SCChangeTable)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SC_SceneInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_GunSpecEffect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_WingsSpecEffect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_WingsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_PurchaseGun_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCVipInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_GunDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCWingsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCGunInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCPurchaseCheck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_ObjectData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_Object2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_Object3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_Object4_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_Decimal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSTridentInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCTridentInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSTridentBet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCTridentBet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCPropsTrident_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSBigSmallChoose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCBigSmallChoose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSBigSmallBet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCBigSmallBet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSShootTorpedo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCShootTorpedo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCPropsTorpedo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_AwardPoolData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCPropsAwardPool_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSLoginGameWithToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCLoginGameWithToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSUserReady_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_EffectInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SpecEffect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_StationBase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCUserReady_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_JadeAwardInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSJadeAwardInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCJadeAwardInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSNotifyLogout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCNotifyLogout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSSetProbability_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCSetProbability_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_UserShoot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSUserShootMulti_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_UserShootRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCUserShootMulti_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_HitFish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSHitMultiFish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_EffectFish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_DragonBallWheelInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_DragonBallInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_OctopusKingItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_OctopusKingInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_MagicCardInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_MagicInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_roulette_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_zeus_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_Zeus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_GemConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCGemConfigList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_ItemWheel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CritWheel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_GoldenJadeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_AztecGemConfigItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_AztecGemConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSAztecGemConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCAztecGemConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_AztecClearReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_AztecTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_AztecStep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_AztecDataInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_Capturefish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCHitMultiFish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSSyncMoney_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCSyncMoney_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_FishTrace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCFishTracesList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_FishTraces_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSSyncFishReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCSyncFishReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSSyncFishRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCSyncFishRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCChangeScene_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSFishOutsideScreen_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSLockFish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCLockFish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSSetSkill_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCSetSkill_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCUserTimeoutKick_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSUserRunBackground_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCUserRunBackground_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSUpdateHallProp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSHeartBeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCHeartBeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCComTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSTaskInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCTaskInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_UserScoreRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSFreeTimeEnd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCSyncFreeTimes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSClickStatistic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_JumpHighArena_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_GiftBag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_NewYearCardActivityInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_UserPoolActivityInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_DragonBallConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCActivityInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCPropEndNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCPropDropNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_Prop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_UserProp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_UsersProp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SSAwardPoolMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSScratchNewYearCard_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSBuyNewYearCard_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_NewYearCardMultiple_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCScratchNewYearCard_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSNewYearCardExchange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_NewYearCardAward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCNewYearCardExchange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSNewYearCardAwardRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_NewYearCardAwardRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCNewYearCardAwardRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SkillTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSSaveSkillTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSSuperTridentShoot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCSuperTridentShoot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSSuperTridentAttack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CommonResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSAwardPoolRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_AwardPoolRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCAwardPoolRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSFortuneShoot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCFortuneShoot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_IngotInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCSyncFortune_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSUserPoolInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_GoodsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_UserAwardItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCUserPoolInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSUserPoolStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCUserPoolStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSUserPoolPreDraw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCUserPoolPreDraw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSUserPoolDraw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCUserPoolDraw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCUserPoolAdd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_ResultRank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCMatchResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_MatchPackAddition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSMatchPackAddition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCMatchPackAddition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCMatchPackInvail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_HttpResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSHBonusPool_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_HBonusPool_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCHBonusPool_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSHRankBar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCHRankBar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_RealRank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSHRealRank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCHRealRank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_Reward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSHReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCHReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSHMatchInfoTip_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_MatchInfoTip_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCHMatchInfoTip_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSHMatchInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCHMatchInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_HistoryRank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSHHistoryRank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCHHistoryRank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSHLuckyInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_LuckyInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCHLuckyInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_AwardDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCLuckyAwardNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_AwardProp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_LuckyTaskInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSLuckyDrawInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCLuckyDrawInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSGetLuckyTaskAward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCLuckyTaskInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSGetLuckyNum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCGetLuckyNum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSLuckyRedDot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCLuckyRedDot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_LuckyRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_OwnRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSLuckyRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCLuckyRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCOwnRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSDragonWheelStart_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCDragonWheelStop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCSyncHallProp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSCheckDragonWheelProp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCCheckDragonWheelProp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSUserPoolDoubleInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCUserPoolDoubleInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSUserPoolDouble_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCUserPoolDouble_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSLuckyPoolInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCLuckyPoolInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSLuckyPoolDraw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCLuckyPoolDraw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_TridentRankList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCTridentRankResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSBigSmallWinInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCBigSmallWinInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSBigSmallRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_BigSmallRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCBigSmallRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_ItemEnableInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_ItemEnableNotice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_RewardTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_RewardConf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSReqRewardAddTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCRepRewardTaskList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCRewardTaskFinish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCSyncRewardTaskResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSReqRewardRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCRepRewardTaskRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSRewardChangeAuto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCRewardAutoRep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCSeaCrabCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSSyncCrabStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCSyncCrabStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSDragonBallEnd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCDragonBallRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_DevouredFish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSDevourHit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCDevourHit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_OpenChestReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCUpdateChestStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSChestConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_ChestBrief_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCChestConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSOpenChest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCOpenChest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSSelectChestReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCSelectChestReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSChestSetAutoSelect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCChestSetAutoSelect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSChestSetEnable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCChestSetEnable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSSyncAnimation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCSyncAnimation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSMagicCardList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCMagicCardList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCTortoiseExplode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSBuyGun_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCBuyGun_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCWaterDropInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSBuyWings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCBuyWings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSSetWings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCSetWings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCBeKicked_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSClientTimeValidate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCClientTimeValidate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_CSChangeTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BYDLD::_SCChangeTable_default_instance_),
};

const char descriptor_table_protodef_BYDLD_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013BYDLD.proto\022\005BYDLD\"\266\001\n\014SC_SceneInfo\022-\n"
  "\021station_base_list\030\001 \003(\0132\022.BYDLD.Station"
  "Base\022\021\n\ttimestamp\030\002 \001(\005\022\025\n\rgun_ratio_num"
  "\030\003 \001(\005\022\025\n\rgun_level_num\030\004 \001(\005\022\022\n\nratio_l"
  "ist\030\005 \003(\005\022\"\n\010gun_list\030\006 \003(\0132\020.BYDLD.GunD"
  "etail\"\215\001\n\rGunSpecEffect\022\022\n\nratioLimit\030\001 "
  "\001(\005\022\025\n\rhitChangeRate\030\002 \001(\002\022\027\n\017moneyChang"
  "eRate\030\003 \001(\002\022\021\n\tspeedRate\030\004 \001(\002\022\021\n\tis_sen"
  "ior\030\005 \001(\010\022\022\n\ndouble_tag\030\006 \001(\010\"\217\001\n\017WingsS"
  "pecEffect\022\022\n\nratioLimit\030\001 \001(\005\022\025\n\rhitChan"
  "geRate\030\002 \001(\002\022\027\n\017moneyChangeRate\030\003 \001(\002\022\021\n"
  "\tspeedRate\030\004 \001(\002\022\021\n\tis_senior\030\005 \001(\010\022\022\n\nd"
  "ouble_tag\030\006 \001(\010\"\354\001\n\tWingsInfo\022\020\n\010wings_i"
  "d\030\001 \001(\005\022\016\n\006enable\030\002 \001(\010\0221\n\021wings_spec_ef"
  "fect\030\003 \001(\0132\026.BYDLD.WingsSpecEffect\022\024\n\014re"
  "ceive_type\030\004 \001(\005\022\023\n\013activity_id\030\005 \001(\005\022\r\n"
  "\005price\030\006 \001(\005\022\022\n\ntime_stamp\030\007 \001(\005\022\026\n\016disc"
  "ount_price\030\010 \001(\005\022\022\n\nstart_time\030\t \001(\005\022\020\n\010"
  "end_time\030\n \001(\005\"+\n\013PurchaseGun\022\r\n\005money\030\001"
  " \001(\005\022\r\n\005level\030\002 \001(\005\"\227\002\n\tSCVipInfo\022\021\n\tcha"
  "ir_idx\030\001 \001(\005\022\017\n\007cur_vip\030\002 \001(\005\022\024\n\014trident"
  "1_vip\030\003 \001(\005\022\024\n\014trident2_vip\030\004 \001(\005\022\024\n\014tri"
  "dent3_vip\030\005 \001(\005\022\024\n\014trident4_vip\030\006 \001(\005\022\024\n"
  "\014trident5_vip\030\007 \001(\005\022\030\n\020double_shoot_vip\030"
  "\010 \001(\005\022\026\n\016lock_shoot_vip\030\t \001(\005\022\026\n\016golden_"
  "gun_vip\030\n \001(\005\022\027\n\017paladin_gun_vip\030\013 \001(\005\022\025"
  "\n\rpanda_gun_vip\030\014 \001(\005\"\234\002\n\tGunDetail\022\021\n\tg"
  "un_level\030\001 \001(\005\022\016\n\006enable\030\002 \001(\010\022\021\n\tratio_"
  "min\030\003 \001(\005\022\021\n\tratio_max\030\004 \001(\005\022\021\n\tvip_limi"
  "t\030\005 \001(\005\022\r\n\005price\030\006 \001(\005\022\024\n\014attack_speed\030\007"
  " \001(\002\022\017\n\007prop_id\030\010 \001(\005\022+\n\rgunSpecEffect\030\t"
  " \001(\0132\024.BYDLD.GunSpecEffect\022\026\n\016discount_p"
  "rice\030\n \001(\005\022\022\n\nstart_time\030\013 \001(\005\022\020\n\010end_ti"
  "me\030\014 \001(\005\022\022\n\nratio_list\030\r \003(\005\"3\n\013SCWingsI"
  "nfo\022$\n\nwings_list\030\001 \003(\0132\020.BYDLD.WingsInf"
  "o\"/\n\tSCGunInfo\022\"\n\010gun_list\030\001 \003(\0132\020.BYDLD"
  ".GunDetail\"&\n\017SCPurchaseCheck\022\023\n\013is_purc"
  "hase\030\001 \001(\005\"(\n\nObjectData\022\013\n\003key\030\001 \001(\t\022\r\n"
  "\005value\030\002 \001(\005\"%\n\007Object2\022\013\n\003key\030\001 \001(\t\022\r\n\005"
  "value\030\002 \001(\t\"%\n\007Object3\022\013\n\003key\030\001 \001(\005\022\r\n\005v"
  "alue\030\002 \001(\005\"%\n\007Object4\022\013\n\003key\030\001 \001(\005\022\r\n\005va"
  "lue\030\002 \003(\005\"%\n\007Decimal\022\013\n\003num\030\001 \001(\005\022\r\n\005den"
  "om\030\002 \001(\005\"\"\n\rCSTridentInfo\022\021\n\tchair_idx\030\001"
  " \001(\005\"A\n\rSCTridentInfo\022\014\n\004bets\030\001 \003(\005\022\017\n\007i"
  "s_full\030\002 \001(\010\022\021\n\tcur_point\030\003 \001(\005\"\033\n\014CSTri"
  "dentBet\022\013\n\003bet\030\001 \001(\005\"b\n\014SCTridentBet\022\021\n\t"
  "chair_idx\030\001 \001(\005\022\r\n\005award\030\002 \001(\005\022\r\n\005score\030"
  "\003 \001(\005\022\013\n\003bet\030\004 \001(\005\022\024\n\014is_big_small\030\005 \001(\010"
  "\"^\n\016SCPropsTrident\022\016\n\006enable\030\001 \001(\010\022\024\n\014si"
  "ngle_score\030\002 \001(\005\022\021\n\tcur_score\030\003 \001(\005\022\023\n\013r"
  "ank_enable\030\004 \001(\010\"<\n\020CSBigSmallChoose\022\021\n\t"
  "chair_idx\030\001 \001(\005\022\025\n\renter_or_exit\030\002 \001(\005\"W"
  "\n\020SCBigSmallChoose\022\021\n\tchair_idx\030\001 \001(\005\022\022\n"
  "\nenter_exit\030\002 \001(\005\022\r\n\005award\030\003 \001(\005\022\r\n\005scor"
  "e\030\004 \001(\005\"2\n\rCSBigSmallBet\022\022\n\nis_bet_big\030\001"
  " \001(\010\022\r\n\005times\030\002 \001(\005\"s\n\rSCBigSmallBet\022\021\n\t"
  "chair_idx\030\001 \001(\005\022\r\n\005dices\030\002 \003(\005\022\022\n\nis_bet"
  "_big\030\003 \001(\010\022\r\n\005award\030\004 \001(\005\022\r\n\005score\030\005 \001(\005"
  "\022\016\n\006is_end\030\006 \001(\010\"J\n\016CSShootTorpedo\022\021\n\tch"
  "air_idx\030\001 \001(\005\022\022\n\ntorpedo_id\030\002 \001(\t\022\021\n\tsho"
  "ot_all\030\003 \001(\010\"y\n\016SCShootTorpedo\022\021\n\tchair_"
  "idx\030\001 \001(\005\022\022\n\ntorpedo_id\030\002 \001(\t\022\r\n\005award\030\003"
  " \001(\005\022\r\n\005score\030\004 \001(\003\022\"\n\007objects\030\005 \003(\0132\021.B"
  "YDLD.ObjectData\"D\n\016SCPropsTorpedo\022\016\n\006ena"
  "ble\030\001 \001(\010\022\"\n\007objects\030\002 \003(\0132\021.BYDLD.Objec"
  "tData\"+\n\rAwardPoolData\022\013\n\003key\030\001 \001(\t\022\r\n\005v"
  "alue\030\002 \001(\005\"I\n\020SCPropsAwardPool\022\016\n\006enable"
  "\030\001 \001(\010\022%\n\007objects\030\002 \003(\0132\024.BYDLD.AwardPoo"
  "lData\"p\n\024CSLoginGameWithToken\022\020\n\010playerI"
  "d\030\001 \001(\005\022\r\n\005Token\030\002 \001(\t\022\016\n\006OSType\030\003 \001(\005\022\020"
  "\n\010table_id\030\004 \001(\005\022\025\n\rlast_table_id\030\005 \001(\005\""
  "=\n\024SCLoginGameWithToken\022\023\n\013scene_index\030\001"
  " \001(\005\022\020\n\010table_id\030\002 \001(\005\"\037\n\013CSUserReady\022\020\n"
  "\010playerId\030\001 \001(\005\"2\n\nEffectInfo\022\021\n\teffect_"
  "id\030\001 \001(\005\022\021\n\tis_global\030\002 \001(\010\"2\n\nSpecEffec"
  "t\022\021\n\tcostMoney\030\001 \001(\005\022\021\n\tearnMoney\030\002 \001(\005\""
  "\355\002\n\013StationBase\022\021\n\tgun_ratio\030\001 \001(\005\022\021\n\tgu"
  "n_level\030\002 \001(\005\022\021\n\tis_online\030\003 \001(\010\022\022\n\nuser"
  "_score\030\004 \001(\003\022\021\n\tchair_idx\030\005 \001(\005\022\023\n\013playe"
  "r_name\030\006 \001(\t\022\024\n\014through_flag\030\007 \001(\010\022\023\n\013do"
  "uble_flag\030\010 \001(\010\022\021\n\tplayer_id\030\t \001(\005\022\013\n\003vi"
  "p\030\n \001(\005\022\016\n\006ticket\030\013 \001(\005\022\021\n\teffect_id\030\014 \001"
  "(\005\022\020\n\010title_id\030\r \001(\005\022)\n\021red_packet_ticke"
  "t\030\016 \001(\0132\016.BYDLD.Decimal\022&\n\013effect_info\030\017"
  " \001(\0132\021.BYDLD.EffectInfo\022\026\n\016wings_props_i"
  "d\030\020 \001(\005\"O\n\013SCUserReady\022-\n\021station_base_l"
  "ist\030\001 \003(\0132\022.BYDLD.StationBase\022\021\n\ttimesta"
  "mp\030\002 \001(\005\"`\n\rJadeAwardInfo\022\021\n\taward_num\030\001"
  " \001(\005\022\023\n\013award_ratio\030\002 \001(\005\022\023\n\013award_level"
  "\030\003 \001(\005\022\022\n\naward_type\030\004 \001(\005\"\021\n\017CSJadeAwar"
  "dInfo\"S\n\017SCJadeAwardInfo\022-\n\017jade_award_i"
  "nfo\030\001 \003(\0132\024.BYDLD.JadeAwardInfo\022\021\n\tcrit_"
  "list\030\002 \003(\005\"#\n\016CSNotifyLogout\022\021\n\tchair_id"
  "x\030\001 \001(\005\"#\n\016SCNotifyLogout\022\021\n\tchair_idx\030\001"
  " \001(\005\"M\n\020CSSetProbability\022\021\n\tgun_ratio\030\001 "
  "\001(\005\022\021\n\tgun_level\030\002 \001(\005\022\023\n\013is_use_auto\030\003 "
  "\001(\010\"^\n\020SCSetProbability\022\021\n\tchair_idx\030\001 \001"
  "(\005\022\021\n\tgun_ratio\030\002 \001(\005\022\021\n\tgun_level\030\003 \001(\005"
  "\022\021\n\tis_unlock\030\004 \001(\010\"\244\001\n\tUserShoot\022\r\n\005ang"
  "le\030\001 \001(\005\022\021\n\tbullet_id\030\002 \001(\005\022\r\n\005ratio\030\003 \001"
  "(\005\022\021\n\tis_double\030\004 \001(\010\022\022\n\nis_through\030\005 \001("
  "\010\022\024\n\014is_free_time\030\006 \001(\010\022\023\n\013bullet_type\030\007"
  " \001(\005\022\t\n\001x\030\010 \001(\002\022\t\n\001y\030\t \001(\002\":\n\020CSUserShoo"
  "tMulti\022&\n\014shoot_bullet\030\001 \003(\0132\020.BYDLD.Use"
  "rShoot\"H\n\014UserShootRsp\022\r\n\005angle\030\001 \001(\005\022\023\n"
  "\013bullet_type\030\002 \001(\005\022\t\n\001x\030\003 \001(\002\022\t\n\001y\030\004 \001(\002"
  "\"^\n\020SCUserShootMulti\022\021\n\tchair_idx\030\001 \001(\005\022"
  "(\n\013bullet_info\030\002 \003(\0132\023.BYDLD.UserShootRs"
  "p\022\r\n\005score\030\003 \001(\003\"\240\001\n\007HitFish\022\020\n\010fish_uid"
  "\030\001 \001(\005\022\021\n\tbullet_id\030\002 \001(\005\022\023\n\013through_idx"
  "\030\003 \001(\005\022\017\n\007fish_id\030\004 \001(\005\022\027\n\017effect_fish_u"
  "id\030\005 \003(\005\022\r\n\005round\030\006 \001(\005\022\r\n\005ratio\030\007 \001(\005\022\023"
  "\n\013bullet_type\030\010 \001(\005\"2\n\016CSHitMultiFish\022 \n"
  "\010hit_info\030\001 \003(\0132\016.BYDLD.HitFish\"-\n\nEffec"
  "tFish\022\020\n\010fish_uid\030\001 \001(\005\022\r\n\005score\030\002 \001(\005\"2"
  "\n\023DragonBallWheelInfo\022\r\n\005ratio\030\001 \003(\005\022\014\n\004"
  "next\030\002 \003(\005\"v\n\016DragonBallInfo\022\022\n\nbase_rat"
  "io\030\001 \001(\005\022\r\n\005wheel\030\002 \001(\005\022\022\n\nawardRatio\030\003 "
  "\003(\005\022-\n\twheelInfo\030\004 \003(\0132\032.BYDLD.DragonBal"
  "lWheelInfo\"\?\n\017OctopusKingItem\022\030\n\020selecte"
  "dMultiple\030\001 \001(\005\022\022\n\nselectList\030\002 \003(\005\"<\n\017O"
  "ctopusKingInfo\022)\n\tmultiples\030\001 \003(\0132\026.BYDL"
  "D.OctopusKingItem\"=\n\rMagicCardInfo\022\016\n\006ca"
  "rdId\030\001 \001(\005\022\r\n\005value\030\002 \001(\005\022\r\n\005label\030\003 \001(\005"
  "\"K\n\tMagicInfo\022\021\n\tratioCard\030\001 \001(\005\022+\n\rmagi"
  "cCardList\030\002 \003(\0132\024.BYDLD.MagicCardInfo\"Q\n"
  "\017roulette_result\022\014\n\004type\030\001 \001(\005\022\020\n\010locati"
  "on\030\002 \001(\005\022\020\n\010multiple\030\003 \001(\005\022\014\n\004crit\030\004 \001(\005"
  "\"d\n\013zeus_result\022\014\n\004type\030\001 \001(\005\022\016\n\006layout\030"
  "\002 \003(\005\022&\n\006result\030\003 \003(\0132\026.BYDLD.roulette_r"
  "esult\022\017\n\007pool_id\030\004 \001(\005\"B\n\004Zeus\022\"\n\006result"
  "\030\001 \003(\0132\022.BYDLD.zeus_result\022\026\n\016total_mult"
  "iple\030\002 \001(\005\")\n\tGemConfig\022\n\n\002id\030\001 \001(\005\022\020\n\010m"
  "ultiple\030\002 \001(\005\"Z\n\017SCGemConfigList\022)\n\017gem_"
  "config_list\030\001 \003(\0132\020.BYDLD.GemConfig\022\034\n\024c"
  "ritical_config_list\030\002 \003(\005\"\226\001\n\tItemWheel\022"
  "\020\n\010wheel_id\030\001 \001(\005\022\023\n\013wheel_level\030\002 \001(\005\022\021"
  "\n\titem_list\030\003 \003(\005\022\023\n\013result_list\030\004 \003(\005\022\023"
  "\n\013wheel_multi\030\005 \001(\005\022\021\n\taward_num\030\006 \001(\005\022\022"
  "\n\naward_type\030\007 \001(\005\"3\n\tCritWheel\022\021\n\tcrit_"
  "list\030\001 \003(\005\022\023\n\013crit_result\030\002 \001(\005\"r\n\016Golde"
  "nJadeInfo\022%\n\013item_wheels\030\001 \003(\0132\020.BYDLD.I"
  "temWheel\022$\n\ncrit_wheel\030\002 \001(\0132\020.BYDLD.Cri"
  "tWheel\022\023\n\013total_multi\030\003 \001(\005\"0\n\022AztecGemC"
  "onfigItem\022\013\n\003num\030\001 \001(\005\022\r\n\005ratio\030\002 \001(\005\"]\n"
  "\016AztecGemConfig\022(\n\005items\030\001 \003(\0132\031.BYDLD.A"
  "ztecGemConfigItem\022!\n\004type\030\002 \001(\0162\023.BYDLD."
  "AztecGemType\"\022\n\020CSAztecGemConfig\":\n\020SCAz"
  "tecGemConfig\022&\n\007configs\030\001 \003(\0132\025.BYDLD.Az"
  "tecGemConfig\"D\n\020AztecClearReward\022!\n\004type"
  "\030\001 \001(\0162\023.BYDLD.AztecGemType\022\r\n\005value\030\002 \001"
  "(\005\"Y\n\nAztecTable\022!\n\004gems\030\001 \003(\0162\023.BYDLD.A"
  "ztecGemType\022(\n\007rewards\030\002 \003(\0132\027.BYDLD.Azt"
  "ecClearReward\".\n\tAztecStep\022!\n\006tables\030\001 \003"
  "(\0132\021.BYDLD.AztecTable\"C\n\rAztecDataInfo\022\037"
  "\n\005steps\030\001 \003(\0132\020.BYDLD.AztecStep\022\021\n\ttotal"
  "_win\030\002 \001(\005\"\336\005\n\013Capturefish\022\020\n\010fish_uid\030\001"
  " \001(\005\022\021\n\tget_score\030\002 \001(\005\022\017\n\007fish_id\030\003 \001(\005"
  "\022$\n\ttorpedoes\030\004 \003(\0132\021.BYDLD.ObjectData\022\023"
  "\n\013lucky_ratio\030\005 \001(\005\022\025\n\rtrident_score\030\006 \001"
  "(\005\022&\n\013effect_fish\030\007 \003(\0132\021.BYDLD.EffectFi"
  "sh\022\022\n\naward_time\030\010 \001(\005\022\022\n\nbulletType\030\t \001"
  "(\005\022\020\n\010multiple\030\n \001(\005\022\021\n\tget_peilv\030\013 \001(\005\022"
  "\r\n\005death\030\014 \001(\005\022\r\n\005stage\030\r \001(\005\022\021\n\tsub_sta"
  "ge\030\016 \001(\005\022\023\n\013award_index\030\017 \001(\005\022\025\n\rcrit_mu"
  "ltiple\030\020 \001(\005\022\023\n\013ingot_multi\030\021 \001(\005\022\r\n\005rat"
  "io\030\022 \001(\005\022\023\n\013frozen_time\030\023 \001(\005\022\025\n\rtrident"
  "_multi\030\024 \001(\005\022\024\n\014scratch_card\030\025 \001(\005\022(\n\tba"
  "ll_info\030\026 \001(\0132\025.BYDLD.DragonBallInfo\022,\n\014"
  "octopus_king\030\027 \001(\0132\026.BYDLD.OctopusKingIn"
  "fo\022\021\n\tis_reward\030\030 \001(\010\022$\n\nmagic_info\030\031 \001("
  "\0132\020.BYDLD.MagicInfo\022\036\n\tzeus_info\030\032 \001(\0132\013"
  ".BYDLD.Zeus\022/\n\020golden_jade_info\030\033 \001(\0132\025."
  "BYDLD.GoldenJadeInfo\022-\n\017aztec_data_info\030"
  "\034 \001(\0132\024.BYDLD.AztecDataInfo\"\242\001\n\016SCHitMul"
  "tiFish\022\021\n\tchair_idx\030\001 \001(\005\022\017\n\007invalid\030\002 \001"
  "(\005\022(\n\014capture_info\030\003 \003(\0132\022.BYDLD.Capture"
  "fish\022\r\n\005score\030\004 \001(\003\022\014\n\004earn\030\005 \001(\005\022%\n\nspe"
  "cEffect\030\006 \001(\0132\021.BYDLD.SpecEffect\".\n\013CSSy"
  "ncMoney\022\021\n\tchair_idx\030\001 \001(\005\022\014\n\004type\030\002 \001(\005"
  "\"\240\001\n\013SCSyncMoney\022\021\n\tchair_idx\030\001 \001(\005\022\r\n\005s"
  "core\030\002 \001(\003\022\014\n\004type\030\003 \001(\005\022\r\n\005delta\030\004 \001(\005\022"
  "\025\n\rinvalid_score\030\005 \001(\005\022\026\n\016freetime_score"
  "\030\006 \001(\005\022\016\n\006ticket\030\007 \001(\005\022\023\n\013ingot_score\030\010 "
  "\001(\005\"\?\n\tFishTrace\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t"
  "\n\001z\030\003 \001(\002\022\021\n\twait_time\030\004 \001(\002\"S\n\020SCFishTr"
  "acesList\022&\n\013fish_traces\030\001 \003(\0132\021.BYDLD.Fi"
  "shTraces\022\027\n\017accelerate_flag\030\002 \001(\010\"\347\002\n\nFi"
  "shTraces\022\020\n\010fish_uid\030\001 \001(\005\022\017\n\007fish_id\030\002 "
  "\001(\005\022\021\n\tlive_time\030\003 \001(\005\022\r\n\005speed\030\004 \001(\002\022\022\n"
  "\nroute_type\030\005 \001(\005\022$\n\nfish_trace\030\006 \003(\0132\020."
  "BYDLD.FishTrace\022\026\n\016fish_cur_point\030\007 \001(\005\022"
  "\024\n\014already_move\030\010 \001(\010\022\t\n\001x\030\t \001(\002\022\t\n\001y\030\n "
  "\001(\002\022\014\n\004time\030\013 \001(\002\022\r\n\005stage\030\014 \001(\005\022\021\n\tsub_"
  "stage\030\r \001(\005\022\020\n\010lifespan\030\016 \001(\005\022\023\n\013frozen_"
  "time\030\017 \001(\005\022\023\n\013fish_gender\030\020 \001(\005\022*\n\017small"
  "_fish_list\030\021 \003(\0132\021.BYDLD.FishTraces\"\"\n\rC"
  "SSyncFishReq\022\021\n\tchair_idx\030\001 \001(\005\"\"\n\rSCSyn"
  "cFishReq\022\021\n\tchair_idx\030\001 \001(\005\"P\n\rCSSyncFis"
  "hRsp\022&\n\013fish_traces\030\001 \003(\0132\021.BYDLD.FishTr"
  "aces\022\027\n\017accelerate_flag\030\002 \001(\010\"P\n\rSCSyncF"
  "ishRsp\022&\n\013fish_traces\030\001 \003(\0132\021.BYDLD.Fish"
  "Traces\022\027\n\017accelerate_flag\030\002 \001(\010\"$\n\rSCCha"
  "ngeScene\022\023\n\013scene_index\030\001 \001(\005\"\'\n\023CSFishO"
  "utsideScreen\022\020\n\010fish_uid\030\001 \001(\005\"B\n\nCSLock"
  "Fish\022\021\n\tchair_idx\030\001 \001(\005\022\020\n\010fish_uid\030\002 \001("
  "\005\022\017\n\007is_open\030\003 \001(\010\"B\n\nSCLockFish\022\021\n\tchai"
  "r_idx\030\001 \001(\005\022\020\n\010fish_uid\030\002 \001(\005\022\017\n\007is_open"
  "\030\003 \001(\010\"]\n\nCSSetSkill\022\021\n\tchair_idx\030\001 \001(\005\022"
  "\023\n\013double_flag\030\002 \001(\005\022\024\n\014through_flag\030\003 \001"
  "(\005\022\021\n\tauto_flag\030\004 \001(\010\"J\n\nSCSetSkill\022\021\n\tc"
  "hair_idx\030\001 \001(\005\022\023\n\013double_flag\030\002 \001(\005\022\024\n\014t"
  "hrough_flag\030\003 \001(\005\"&\n\021SCUserTimeoutKick\022\021"
  "\n\tcount_sec\030\001 \001(\005\"<\n\023CSUserRunBackground"
  "\022\021\n\tchair_idx\030\001 \001(\005\022\022\n\nbackground\030\002 \001(\010\""
  "D\n\023SCUserRunBackground\022-\n\021station_base_l"
  "ist\030\001 \003(\0132\022.BYDLD.StationBase\"7\n\020CSUpdat"
  "eHallProp\022\021\n\tchair_idx\030\001 \001(\005\022\020\n\010configId"
  "\030\002 \001(\005\" \n\013CSHeartBeat\022\021\n\tchair_idx\030\001 \001(\005"
  "\" \n\013SCHeartBeat\022\021\n\tchair_idx\030\001 \001(\005\"P\n\tSC"
  "ComTask\022\021\n\tgun_ratio\030\001 \001(\005\022\021\n\tgun_level\030"
  "\002 \001(\005\022\r\n\005award\030\003 \001(\005\022\016\n\006ticket\030\004 \001(\005\"\014\n\n"
  "CSTaskInfo\"\262\001\n\nSCTaskInfo\022\021\n\tgun_ratio\030\001"
  " \001(\005\022\021\n\tgun_level\030\002 \001(\005\022\017\n\007cur_num\030\003 \001(\005"
  "\022\021\n\ttotal_num\030\004 \001(\005\022\021\n\tvip_level\030\005 \001(\005\022\021"
  "\n\tis_unlock\030\006 \001(\005\022\r\n\005award\030\007 \001(\005\022\025\n\ris_v"
  "ip_unlock\030\010 \001(\010\022\016\n\006ticket\030\t \001(\005\"\?\n\017UserS"
  "coreRecord\022\014\n\004type\030\001 \001(\005\022\017\n\007content\030\002 \001("
  "\t\022\r\n\005score\030\003 \001(\t\"\017\n\rCSFreeTimeEnd\"b\n\017SCS"
  "yncFreeTimes\022\r\n\005times\030\001 \001(\005\022\r\n\005level\030\002 \001"
  "(\005\022\021\n\tchair_idx\030\003 \001(\005\022\014\n\004type\030\004 \001(\005\022\020\n\010e"
  "xchange\030\005 \001(\005\"\037\n\020CSClickStatistic\022\013\n\003num"
  "\030\001 \001(\t\"_\n\rJumpHighArena\022\017\n\007is_open\030\001 \001(\010"
  "\022\013\n\003vip\030\002 \001(\005\022\014\n\004coin\030\003 \001(\005\022\021\n\tgame_time"
  "\030\004 \001(\005\022\017\n\007fish_id\030\005 \003(\005\"+\n\007GiftBag\022\017\n\007is"
  "_open\030\001 \001(\010\022\017\n\007fish_id\030\002 \003(\005\"T\n\027NewYearC"
  "ardActivityInfo\022\023\n\013card_enable\030\001 \001(\010\022\022\n\n"
  "card_count\030\002 \001(\005\022\020\n\010card_vip\030\003 \001(\005\"k\n\024Us"
  "erPoolActivityInfo\022\026\n\016user_pool_show\030\001 \001"
  "(\010\022\022\n\naward_fish\030\002 \003(\005\022\'\n\017user_pool_limi"
  "t\030\003 \003(\0132\016.BYDLD.Object3\"/\n\020DragonBallCon"
  "fig\022\r\n\005ratio\030\001 \001(\005\022\014\n\004next\030\002 \001(\010\"\356\002\n\016SCA"
  "ctivityInfo\022\"\n\004jump\030\001 \001(\0132\024.BYDLD.JumpHi"
  "ghArena\022\036\n\006config\030\002 \001(\0132\016.BYDLD.GiftBag\022"
  ",\n\004card\030\003 \001(\0132\036.BYDLD.NewYearCardActivit"
  "yInfo\022\027\n\017award_pool_rank\030\004 \001(\010\022.\n\tuser_p"
  "ool\030\005 \001(\0132\033.BYDLD.UserPoolActivityInfo\022\022"
  "\n\nlucky_draw\030\006 \001(\010\022$\n\014dragon_wheel\030\007 \003(\013"
  "2\016.BYDLD.Object4\022%\n\rtrident_wheel\030\010 \003(\0132"
  "\016.BYDLD.Object3\022,\n\013dragon_ball\030\t \003(\0132\027.B"
  "YDLD.DragonBallConfig\022\022\n\ntoad_multi\030\n \003("
  "\005\"m\n\017SCPropEndNotify\022\021\n\tchair_idx\030\001 \001(\005\022"
  "\017\n\007prop_id\030\002 \001(\005\022\016\n\006status\030\003 \001(\005\022\022\n\nfree"
  "_level\030\004 \001(\005\022\022\n\nfree_times\030\005 \001(\005\"k\n\020SCPr"
  "opDropNotify\022\021\n\tchair_idx\030\001 \001(\005\022\020\n\010fish_"
  "uid\030\002 \001(\005\022\017\n\007prop_id\030\003 \001(\005\022\r\n\005count\030\004 \001("
  "\005\022\022\n\nlock_ratio\030\005 \001(\005\"\207\002\n\004Prop\022\n\n\002id\030\001 \001"
  "(\005\022\r\n\005count\030\002 \001(\005\022\r\n\005ratio\030\003 \001(\005\022\t\n\001x\030\004 "
  "\001(\002\022\t\n\001y\030\005 \001(\002\022\r\n\005angle\030\006 \001(\002\022\016\n\006status\030"
  "\007 \001(\005\022\020\n\010multiple\030\010 \001(\005\022\022\n\ncrit_multi\030\t "
  "\001(\005\022\020\n\010ingot_id\030\n \001(\005\022\024\n\014remain_times\030\013 "
  "\001(\005\022\023\n\013total_times\030\014 \001(\005\022\021\n\tbullet_id\030\r "
  "\001(\005\022\023\n\013ingot_multi\030\016 \001(\005\022\025\n\rtrident_mult"
  "i\030\017 \001(\005\"9\n\010UserProp\022\021\n\tchair_idx\030\001 \001(\005\022\032"
  "\n\005props\030\002 \003(\0132\013.BYDLD.Prop\"/\n\tUsersProp\022"
  "\"\n\tuser_prop\030\001 \003(\0132\017.BYDLD.UserProp\"R\n\016S"
  "SAwardPoolMsg\022\020\n\010uniqueID\030\001 \001(\005\022\017\n\007arena"
  "ID\030\002 \001(\005\022\016\n\006poolID\030\003 \001(\005\022\r\n\005delta\030\004 \001(\005\""
  ")\n\024CSScratchNewYearCard\022\021\n\tchair_idx\030\001 \001"
  "(\005\"%\n\020CSBuyNewYearCard\022\021\n\tbuy_count\030\001 \001("
  "\005\"9\n\023NewYearCardMultiple\022\020\n\010award_no\030\001 \001"
  "(\t\022\020\n\010multiple\030\002 \001(\005\"\230\001\n\024SCScratchNewYea"
  "rCard\022\016\n\006result\030\001 \001(\005\022\021\n\tchair_idx\030\002 \001(\005"
  "\022\021\n\tcur_score\030\003 \001(\003\022\014\n\004base\030\004 \001(\005\022\r\n\005cou"
  "nt\030\005 \001(\005\022-\n\tmultiples\030\006 \003(\0132\032.BYDLD.NewY"
  "earCardMultiple\"<\n\025CSNewYearCardExchange"
  "\022\r\n\005times\030\001 \001(\005\022\024\n\014exchange_all\030\002 \001(\010\"\205\001"
  "\n\020NewYearCardAward\022\020\n\010card_idx\030\001 \001(\005\022\r\n\005"
  "award\030\002 \001(\005\022\023\n\013bless_award\030\003 \001(\005\022\014\n\004base"
  "\030\004 \001(\005\022-\n\tmultiples\030\005 \003(\0132\032.BYDLD.NewYea"
  "rCardMultiple\"\247\001\n\025SCNewYearCardExchange\022"
  "\021\n\tchair_idx\030\001 \001(\005\022\016\n\006result\030\002 \001(\005\022\'\n\006aw"
  "ards\030\003 \003(\0132\027.BYDLD.NewYearCardAward\022\r\n\005s"
  "core\030\004 \001(\003\022\r\n\005count\030\005 \001(\005\022\024\n\014exchange_al"
  "l\030\006 \001(\010\022\016\n\006req_id\030\007 \001(\005\"\032\n\030CSNewYearCard"
  "AwardRecord\"Q\n\026NewYearCardAwardRecord\022\014\n"
  "\004time\030\001 \001(\005\022\024\n\014normal_award\030\002 \001(\005\022\023\n\013ble"
  "ss_award\030\003 \001(\005\"Z\n\030SCNewYearCardAwardReco"
  "rd\022\016\n\006result\030\001 \001(\005\022.\n\007records\030\002 \003(\0132\035.BY"
  "DLD.NewYearCardAwardRecord\"\'\n\tSkillTime\022"
  "\014\n\004type\030\001 \001(\005\022\014\n\004time\030\002 \001(\005\"6\n\017CSSaveSki"
  "llTime\022#\n\tskil_time\030\001 \003(\0132\020.BYDLD.SkillT"
  "ime\"\025\n\023CSSuperTridentShoot\"(\n\023SCSuperTri"
  "dentShoot\022\021\n\tchair_idx\030\001 \001(\005\"-\n\024CSSuperT"
  "ridentAttack\022\025\n\rscreen_fishes\030\001 \003(\005\"+\n\nC"
  "ommonResp\022\014\n\004code\030\001 \001(\005\022\017\n\007message\030\002 \001(\t"
  "\"\023\n\021CSAwardPoolRecord\"^\n\017AwardPoolRecord"
  "\022\014\n\004time\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\016\n\006poolId\030\003"
  " \001(\005\022\r\n\005award\030\004 \001(\005\022\020\n\010playerId\030\005 \001(\005\"<\n"
  "\021SCAwardPoolRecord\022\'\n\007records\030\001 \003(\0132\026.BY"
  "DLD.AwardPoolRecord\"\020\n\016CSFortuneShoot\"6\n"
  "\016SCFortuneShoot\022\021\n\tchair_idx\030\001 \001(\005\022\021\n\tca"
  "n_shoot\030\002 \001(\010\"<\n\tIngotInfo\022\020\n\010ingot_id\030\001"
  " \001(\005\022\016\n\006remain\030\002 \001(\005\022\r\n\005total\030\003 \001(\005\"5\n\rS"
  "CSyncFortune\022$\n\ningot_info\030\001 \001(\0132\020.BYDLD"
  ".IngotInfo\"#\n\016CSUserPoolInfo\022\021\n\topen_pag"
  "e\030\001 \001(\010\"A\n\tGoodsInfo\022\017\n\007prop_id\030\001 \001(\005\022\020\n"
  "\010prop_num\030\002 \001(\005\022\021\n\tclient_id\030\003 \001(\005\"_\n\rUs"
  "erAwardItem\022\r\n\005index\030\001 \001(\005\022\020\n\010item_max\030\002"
  " \001(\005\022\014\n\004name\030\003 \001(\t\022\037\n\005goods\030\004 \003(\0132\020.BYDL"
  "D.GoodsInfo\"\214\001\n\016SCUserPoolInfo\022\021\n\tchair_"
  "idx\030\001 \001(\005\022\021\n\topen_page\030\002 \001(\010\022\016\n\006status\030\003"
  " \001(\010\022\r\n\005count\030\004 \001(\005\022\020\n\010pool_max\030\005 \001(\005\022#\n"
  "\005items\030\006 \003(\0132\024.BYDLD.UserAwardItem\" \n\020CS"
  "UserPoolStatus\022\014\n\004open\030\001 \001(\010\" \n\020SCUserPo"
  "olStatus\022\014\n\004open\030\001 \001(\010\"\"\n\021CSUserPoolPreD"
  "raw\022\r\n\005level\030\001 \001(\005\"=\n\021SCUserPoolPreDraw\022"
  "\014\n\004code\030\001 \001(\005\022\r\n\005level\030\002 \001(\005\022\013\n\003msg\030\003 \001("
  "\t\"\020\n\016CSUserPoolDraw\"\254\001\n\016SCUserPoolDraw\022\021"
  "\n\tchair_idx\030\001 \001(\005\022\037\n\005goods\030\002 \003(\0132\020.BYDLD"
  ".GoodsInfo\022\037\n\005award\030\003 \001(\0132\020.BYDLD.GoodsI"
  "nfo\022!\n\taward_cnt\030\004 \001(\0132\016.BYDLD.Object3\022\023"
  "\n\013upgradecost\030\005 \001(\005\022\r\n\005index\030\006 \001(\005\"t\n\rSC"
  "UserPoolAdd\022\013\n\003add\030\001 \001(\005\022\r\n\005count\030\002 \001(\005\022"
  "\021\n\tfirst_max\030\003 \001(\005\022\020\n\010pool_max\030\004 \001(\005\022\016\n\006"
  "status\030\005 \001(\010\022\022\n\nlevel_name\030\006 \001(\t\"5\n\nResu"
  "ltRank\022\013\n\003idx\030\001 \001(\005\022\014\n\004icon\030\002 \001(\t\022\014\n\004nam"
  "e\030\003 \001(\t\"\215\002\n\rSCMatchResult\022\017\n\007matchId\030\001 \001"
  "(\005\022$\n\trank_list\030\002 \003(\0132\021.BYDLD.ResultRank"
  "\022\016\n\006isPack\030\003 \001(\010\022\024\n\014oneself_rank\030\004 \001(\005\022\027"
  "\n\017addition_source\030\005 \001(\005\022\030\n\020reaward_addit"
  "ion\030\006 \001(\005\022#\n\013match_goods\030\007 \003(\0132\016.BYDLD.O"
  "bject3\022\"\n\npack_goods\030\010 \003(\0132\016.BYDLD.Objec"
  "t3\022#\n\013lucky_goods\030\t \003(\0132\016.BYDLD.Object3\""
  "|\n\021MatchPackAddition\022\n\n\002id\030\001 \001(\t\022\016\n\006is_b"
  "uy\030\002 \001(\010\022\026\n\016score_addition\030\003 \001(\002\022\030\n\020reaw"
  "ard_addition\030\004 \001(\002\022\014\n\004card\030\005 \001(\005\022\013\n\003sec\030"
  "\006 \001(\005\"\025\n\023CSMatchPackAddition\"A\n\023SCMatchP"
  "ackAddition\022*\n\010addition\030\001 \003(\0132\030.BYDLD.Ma"
  "tchPackAddition\"#\n\021SCMatchPackInvail\022\016\n\006"
  "packId\030\001 \001(\t\"&\n\nHttpResult\022\n\n\002En\030\001 \001(\005\022\014"
  "\n\004Data\030\002 \001(\t\"A\n\014CSHBonusPool\022\017\n\007mathcId\030"
  "\001 \001(\005\022\016\n\006timeId\030\002 \001(\005\022\020\n\010playerId\030\003 \001(\005\""
  "8\n\nHBonusPool\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001"
  "(\005\022\r\n\005count\030\003 \001(\005\"/\n\014SCHBonusPool\022\037\n\004poo"
  "l\030\001 \003(\0132\021.BYDLD.HBonusPool\"\?\n\nCSHRankBar"
  "\022\017\n\007mathcId\030\001 \001(\005\022\016\n\006timeId\030\002 \001(\005\022\020\n\010pla"
  "yerId\030\003 \001(\005\"9\n\nSCHRankBar\022\013\n\003idx\030\001 \001(\005\022\r"
  "\n\005total\030\002 \001(\005\022\017\n\007reaward\030\003 \001(\005\"a\n\010RealRa"
  "nk\022\013\n\003idx\030\001 \001(\005\022\014\n\004icon\030\002 \001(\t\022\014\n\004name\030\003 "
  "\001(\t\022\r\n\005score\030\004 \001(\005\022\035\n\005goods\030\005 \003(\0132\016.BYDL"
  "D.Object3\"@\n\013CSHRealRank\022\020\n\010playerId\030\001 \001"
  "(\005\022\017\n\007mathcId\030\002 \001(\005\022\016\n\006timeId\030\003 \001(\005\"\310\001\n\013"
  "SCHRealRank\022\"\n\treal_rank\030\001 \003(\0132\017.BYDLD.R"
  "ealRank\022$\n\013onself_rank\030\002 \001(\0132\017.BYDLD.Rea"
  "lRank\022\021\n\ttotal_num\030\003 \001(\005\022\026\n\016score_additi"
  "on\030\004 \001(\005\022\027\n\017reward_addition\030\005 \001(\005\022\025\n\rcar"
  "d_addition\030\006 \001(\005\022\024\n\014vip_addition\030\007 \001(\005\"R"
  "\n\006Reward\022\014\n\004idxl\030\001 \001(\005\022\014\n\004idxr\030\002 \001(\005\022\035\n\005"
  "goods\030\003 \003(\0132\016.BYDLD.Object3\022\r\n\005lucky\030\004 \001"
  "(\t\",\n\tCSHReward\022\017\n\007mathcId\030\001 \001(\005\022\016\n\006time"
  "Id\030\002 \001(\005\"\034\n\tSCHReward\022\017\n\007rewards\030\001 \001(\005\"\021"
  "\n\017CSHMatchInfoTip\"Z\n\014MatchInfoTip\022\014\n\004nam"
  "e\030\001 \001(\t\022\017\n\007mathcId\030\002 \001(\005\022\014\n\004time\030\003 \001(\t\022\035"
  "\n\005goods\030\004 \003(\0132\016.BYDLD.Object3\"9\n\017SCHMatc"
  "hInfoTip\022&\n\tmatchTips\030\001 \003(\0132\023.BYDLD.Matc"
  "hInfoTip\" \n\014CSHMatchInfo\022\020\n\010playerId\030\001 \001"
  "(\005\"i\n\014SCHMatchInfo\022\014\n\004name\030\001 \001(\t\022\017\n\007math"
  "cId\030\002 \001(\005\022\016\n\006timeId\030\003 \001(\005\022\016\n\006status\030\004 \001("
  "\005\022\014\n\004down\030\005 \001(\005\022\014\n\004time\030\006 \001(\t\"\317\001\n\013Histor"
  "yRank\022\013\n\003idx\030\001 \001(\005\022\014\n\004icon\030\002 \001(\t\022\014\n\004name"
  "\030\003 \001(\t\022\027\n\017addition_source\030\004 \001(\005\022\020\n\010addit"
  "ion\030\005 \001(\005\022#\n\013match_goods\030\006 \003(\0132\016.BYDLD.O"
  "bject3\022\"\n\npack_goods\030\007 \003(\0132\016.BYDLD.Objec"
  "t3\022#\n\013lucky_goods\030\010 \003(\0132\016.BYDLD.Object3\""
  "3\n\016CSHHistoryRank\022\020\n\010playerId\030\001 \001(\005\022\017\n\007m"
  "atchId\030\002 \001(\005\"r\n\016SCHHistoryRank\022\017\n\007matchI"
  "d\030\001 \001(\005\022%\n\trank_list\030\002 \003(\0132\022.BYDLD.Histo"
  "ryRank\022(\n\014oneself_rank\030\003 \001(\0132\022.BYDLD.His"
  "toryRank\"\037\n\014CSHLuckyInfo\022\017\n\007matchId\030\001 \001("
  "\005\"+\n\tLuckyInfo\022\016\n\006lRange\030\001 \001(\005\022\016\n\006rRange"
  "\030\002 \001(\005\"\?\n\014SCHLuckyInfo\022\017\n\007matchId\030\001 \001(\005\022"
  "\036\n\004data\030\002 \003(\0132\020.BYDLD.LuckyInfo\"m\n\013Award"
  "Detail\022\021\n\tplayer_id\030\001 \001(\005\022\014\n\004nums\030\002 \001(\005\022"
  "\016\n\006period\030\003 \001(\005\022\013\n\003vip\030\004 \001(\005\022\021\n\tnick_nam"
  "e\030\005 \001(\t\022\r\n\005photo\030\006 \001(\t\"L\n\022SCLuckyAwardNo"
  "tify\022\022\n\naward_type\030\001 \001(\005\022\"\n\006detail\030\002 \003(\013"
  "2\022.BYDLD.AwardDetail\")\n\tAwardProp\022\017\n\007pro"
  "p_id\030\001 \001(\005\022\013\n\003num\030\002 \001(\005\"r\n\rLuckyTaskInfo"
  "\022\n\n\002id\030\001 \001(\005\022\016\n\006status\030\002 \001(\005\022\r\n\005score\030\003 "
  "\001(\005\022\014\n\004text\030\004 \001(\t\022\013\n\003cur\030\005 \001(\005\022\r\n\005total\030"
  "\006 \001(\005\022\014\n\004show\030\007 \001(\010\"\021\n\017CSLuckyDrawInfo\"\230"
  "\003\n\017SCLuckyDrawInfo\022\027\n\017hour_remain_sec\030\001 "
  "\001(\005\022\026\n\016day_remain_sec\030\002 \001(\005\022%\n\013hour_rewa"
  "rd\030\003 \003(\0132\020.BYDLD.AwardProp\022$\n\nday_reward"
  "\030\004 \003(\0132\020.BYDLD.AwardProp\022\026\n\016day_lucky_nu"
  "ms\030\005 \003(\005\022\r\n\005score\030\006 \001(\005\022\022\n\nhour_total\030\007 "
  "\001(\005\022\021\n\tday_total\030\010 \001(\005\022\026\n\016hour_award_num"
  "\030\t \001(\005\022\025\n\rday_award_num\030\n \001(\005\022\027\n\017next_st"
  "art_tick\030\013 \001(\005\022\'\n\ttask_info\030\014 \003(\0132\024.BYDL"
  "D.LuckyTaskInfo\022\026\n\016exchange_score\030\r \001(\005\022"
  "\027\n\017next_remain_sec\030\016 \001(\005\022\027\n\017hour_lucky_n"
  "ums\030\017 \003(\005\"&\n\023CSGetLuckyTaskAward\022\017\n\007task"
  "_id\030\001 \001(\005\"R\n\017SCLuckyTaskInfo\022\"\n\004task\030\001 \001"
  "(\0132\024.BYDLD.LuckyTaskInfo\022\r\n\005score\030\002 \001(\005\022"
  "\014\n\004code\030\003 \001(\005\"\036\n\rCSGetLuckyNum\022\r\n\005times\030"
  "\001 \001(\005\"F\n\rSCGetLuckyNum\022\r\n\005score\030\001 \001(\005\022\022\n"
  "\nerror_code\030\002 \001(\005\022\022\n\nlucky_nums\030\003 \003(\005\"\017\n"
  "\rCSLuckyRedDot\"\035\n\rSCLuckyRedDot\022\014\n\004show\030"
  "\001 \001(\010\"]\n\013LuckyRecord\022\013\n\003vip\030\001 \001(\005\022\r\n\005tim"
  "es\030\002 \001(\005\022\021\n\tlucky_num\030\003 \001(\005\022\014\n\004tick\030\004 \001("
  "\005\022\021\n\tnick_name\030\005 \001(\t\"^\n\tOwnRecord\022 \n\006rew"
  "ard\030\001 \003(\0132\020.BYDLD.AwardProp\022\016\n\006status\030\002 "
  "\001(\005\022\014\n\004tick\030\003 \001(\005\022\021\n\tlucky_num\030\004 \001(\005\"\035\n\r"
  "CSLuckyRecord\022\014\n\004type\030\001 \001(\005\"A\n\rSCLuckyRe"
  "cord\022\014\n\004type\030\001 \001(\005\022\"\n\006record\030\002 \003(\0132\022.BYD"
  "LD.LuckyRecord\"/\n\013SCOwnRecord\022 \n\006record\030"
  "\001 \003(\0132\020.BYDLD.OwnRecord\"#\n\022CSDragonWheel"
  "Start\022\r\n\005stage\030\001 \001(\005\"\341\001\n\021SCDragonWheelSt"
  "op\022\r\n\005stage\030\001 \001(\005\022\r\n\005ratio\030\002 \001(\005\022\r\n\005scor"
  "e\030\003 \001(\005\022\024\n\014atomic_ratio\030\004 \001(\005\022\025\n\rfortune"
  "_ratio\030\005 \001(\005\022\026\n\016poseidon_ratio\030\006 \001(\005\022\r\n\005"
  "error\030\007 \001(\005\022\020\n\010chair_id\030\010 \001(\005\022\022\n\nfish_va"
  "lue\030\t \001(\005\022\017\n\007is_prop\030\n \001(\010\022\024\n\014bullet_rat"
  "io\030\013 \001(\005\"3\n\016SCSyncHallProp\022!\n\thall_prop\030"
  "\001 \003(\0132\016.BYDLD.Object3\")\n\026CSCheckDragonWh"
  "eelProp\022\017\n\007prop_id\030\001 \001(\005\"[\n\026SCCheckDrago"
  "nWheelProp\022\017\n\007can_use\030\001 \001(\010\022\017\n\007prop_id\030\002"
  " \001(\005\022\020\n\010chair_id\030\003 \001(\005\022\r\n\005ratio\030\004 \001(\005\"\026\n"
  "\024CSUserPoolDoubleInfo\"n\n\024SCUserPoolDoubl"
  "eInfo\022\014\n\004cost\030\001 \001(\005\022#\n\013item_before\030\002 \001(\013"
  "2\016.BYDLD.Object2\022#\n\013item_double\030\003 \001(\0132\016."
  "BYDLD.Object2\"%\n\020CSUserPoolDouble\022\021\n\tis_"
  "double\030\001 \001(\010\"\205\001\n\020SCUserPoolDouble\022\014\n\004cod"
  "e\030\001 \001(\005\022\016\n\006result\030\002 \001(\005\022\021\n\tchair_idx\030\003 \001"
  "(\005\022\034\n\004item\030\004 \001(\0132\016.BYDLD.Object3\022\"\n\nextr"
  "a_item\030\005 \001(\0132\016.BYDLD.Object3\"\021\n\017CSLuckyP"
  "oolInfo\"-\n\017SCLuckyPoolInfo\022\r\n\005count\030\001 \001("
  "\005\022\013\n\003max\030\002 \001(\005\"\021\n\017CSLuckyPoolDraw\"/\n\017SCL"
  "uckyPoolDraw\022\034\n\004item\030\001 \001(\0132\016.BYDLD.Objec"
  "t3\"p\n\017TridentRankList\022\021\n\tuser_dbid\030\001 \001(\005"
  "\022\021\n\tnick_name\030\002 \001(\t\022\026\n\016continue_times\030\003 "
  "\001(\005\022\021\n\tdate_time\030\004 \001(\t\022\014\n\004rank\030\005 \001(\005\"k\n\023"
  "SCTridentRankResult\022)\n\tcur_ranks\030\001 \003(\0132\026"
  ".BYDLD.TridentRankList\022)\n\this_ranks\030\002 \003("
  "\0132\026.BYDLD.TridentRankList\"&\n\021CSBigSmallW"
  "inInfo\022\021\n\tchair_idx\030\001 \001(\005\"V\n\021SCBigSmallW"
  "inInfo\022\025\n\rcur_win_times\030\001 \001(\005\022\027\n\017today_w"
  "in_times\030\002 \001(\005\022\021\n\tdate_time\030\003 \001(\t\"#\n\020CSB"
  "igSmallRecord\022\017\n\007max_get\030\001 \001(\005\"\037\n\016BigSma"
  "llRecord\022\r\n\005dices\030\001 \003(\005\":\n\020SCBigSmallRec"
  "ord\022&\n\007records\030\001 \003(\0132\025.BYDLD.BigSmallRec"
  "ord\".\n\016ItemEnableInfo\022\014\n\004name\030\001 \001(\005\022\016\n\006e"
  "nable\030\002 \001(\010\"8\n\020ItemEnableNotice\022$\n\005items"
  "\030\001 \003(\0132\025.BYDLD.ItemEnableInfo\",\n\nRewardT"
  "ask\022\016\n\006taskId\030\001 \001(\005\022\016\n\006status\030\002 \001(\005\",\n\nR"
  "ewardConf\022\016\n\006taskID\030\001 \001(\005\022\016\n\006nAward\030\002 \001("
  "\005\"0\n\022CSReqRewardAddTask\022\n\n\002ID\030\001 \001(\005\022\016\n\006t"
  "askID\030\002 \001(\005\"C\n\023SCRepRewardTaskList\022\n\n\002ID"
  "\030\001 \001(\005\022 \n\005tList\030\002 \003(\0132\021.BYDLD.RewardTask"
  "\"U\n\022SCRewardTaskFinish\022\016\n\006result\030\001 \001(\005\022\r"
  "\n\005money\030\002 \001(\005\022 \n\005tList\030\003 \003(\0132\021.BYDLD.Rew"
  "ardTask\"\334\001\n\026SCSyncRewardTaskResult\022\020\n\010ch"
  "air_id\030\001 \001(\005\022)\n\006result\030\002 \001(\0132\031.BYDLD.SCR"
  "ewardTaskFinish\022\014\n\004earn\030\003 \001(\005\022\017\n\007fish_id"
  "\030\004 \001(\005\022\021\n\tget_peilv\030\005 \001(\005\022\020\n\010multiple\030\006 "
  "\001(\005\022\025\n\rcrit_multiple\030\007 \001(\005\022\023\n\013ingot_mult"
  "i\030\010 \001(\005\022\025\n\rtrident_multi\030\t \001(\005\"\037\n\021CSReqR"
  "ewardRecord\022\n\n\002ID\030\001 \001(\005\"\222\001\n\025SCRepRewardT"
  "askRecord\022\n\n\002ID\030\001 \001(\005\022\017\n\007nRecord\030\002 \001(\005\022\014"
  "\n\004cost\030\003 \001(\005\022)\n\006record\030\004 \003(\0132\031.BYDLD.SCR"
  "ewardTaskFinish\022#\n\010confList\030\005 \003(\0132\021.BYDL"
  "D.RewardConf\"\'\n\022CSRewardChangeAuto\022\021\n\tau"
  "toTimes\030\001 \001(\005\"1\n\017SCRewardAutoRep\022\016\n\006stat"
  "us\030\001 \001(\005\022\016\n\006accept\030\002 \001(\010\"3\n\017SCSeaCrabCre"
  "ate\022\020\n\010chair_id\030\001 \001(\005\022\016\n\006status\030\002 \001(\005\"\022\n"
  "\020CSSyncCrabStatus\"\\\n\020SCSyncCrabStatus\022\016\n"
  "\006status\030\001 \001(\005\022\020\n\010chair_id\030\002 \001(\005\022\022\n\nmulti"
  "ple_1\030\003 \001(\005\022\022\n\nmultiple_2\030\004 \001(\005\"\021\n\017CSDra"
  "gonBallEnd\"`\n\017SCDragonBallRes\022\020\n\010chair_i"
  "d\030\001 \001(\005\022\022\n\nlock_ratio\030\002 \001(\005\022\022\n\nbase_rati"
  "o\030\003 \001(\005\022\023\n\013total_award\030\004 \001(\005\".\n\014Devoured"
  "Fish\022\020\n\010fish_uid\030\001 \001(\005\022\014\n\004earn\030\002 \001(\005\"$\n\013"
  "CSDevourHit\022\025\n\rscreen_fishes\030\001 \003(\005\"n\n\013SC"
  "DevourHit\022*\n\rdevour_fishes\030\001 \003(\0132\023.BYDLD"
  ".DevouredFish\022\014\n\004crit\030\002 \001(\005\022\020\n\010multiple\030"
  "\003 \001(\005\022\023\n\013ingot_multi\030\004 \001(\005\":\n\017OpenChestR"
  "eward\022\n\n\002id\030\001 \001(\005\022\033\n\003num\030\002 \001(\0132\016.BYDLD.D"
  "ecimal\"\250\001\n\023SCUpdateChestStatus\022\021\n\tis_act"
  "ive\030\001 \001(\010\022$\n\nchest_type\030\002 \001(\0162\020.BYDLD.Ch"
  "estType\022\026\n\016total_progress\030\003 \001(\005\022\027\n\017remai"
  "n_progress\030\004 \001(\005\022\r\n\005guide\030\005 \001(\010\022\030\n\020avail"
  "able_reward\030\006 \001(\005\"\017\n\rCSChestConfig\"Z\n\nCh"
  "estBrief\022$\n\nchest_type\030\001 \001(\0162\020.BYDLD.Che"
  "stType\022&\n\006reward\030\002 \003(\0132\026.BYDLD.OpenChest"
  "Reward\"\272\001\n\rSCChestConfig\022\020\n\010end_time\030\001 \001"
  "(\005\022+\n\020chest_brief_list\030\002 \003(\0132\021.BYDLD.Che"
  "stBrief\022\021\n\tmin_ratio\030\003 \001(\005\022\021\n\tauto_open\030"
  "\004 \001(\010\0221\n\013auto_option\030\005 \001(\0162\034.BYDLD.Chest"
  "AutoSelectOption\022\021\n\tis_enable\030\006 \001(\010\"\r\n\013C"
  "SOpenChest\"m\n\013SCOpenChest\022+\n\013reward_list"
  "\030\001 \003(\0132\026.BYDLD.OpenChestReward\0221\n\013auto_o"
  "ption\030\002 \001(\0162\034.BYDLD.ChestAutoSelectOptio"
  "n\"+\n\023CSSelectChestReward\022\024\n\014select_index"
  "\030\001 \001(\005\"=\n\023SCSelectChestReward\022&\n\006reward\030"
  "\001 \001(\0132\026.BYDLD.OpenChestReward\"\\\n\024CSChest"
  "SetAutoSelect\0221\n\013auto_option\030\001 \001(\0162\034.BYD"
  "LD.ChestAutoSelectOption\022\021\n\tauto_open\030\002 "
  "\001(\010\"\\\n\024SCChestSetAutoSelect\0221\n\013auto_opti"
  "on\030\001 \001(\0162\034.BYDLD.ChestAutoSelectOption\022\021"
  "\n\tauto_open\030\002 \001(\010\"%\n\020CSChestSetEnable\022\021\n"
  "\tis_enable\030\001 \001(\010\"%\n\020SCChestSetEnable\022\021\n\t"
  "is_enable\030\001 \001(\010\"W\n\017CSSyncAnimation\022\023\n\013an"
  "imationId\030\001 \001(\005\022\014\n\004step\030\002 \001(\005\022\020\n\010complet"
  "e\030\003 \001(\010\022\017\n\007content\030\004 \001(\t\"W\n\017SCSyncAnimat"
  "ion\022\023\n\013animationId\030\001 \001(\005\022\014\n\004step\030\002 \001(\005\022\020"
  "\n\010complete\030\003 \001(\010\022\017\n\007content\030\004 \001(\t\"\021\n\017CSM"
  "agicCardList\">\n\017SCMagicCardList\022+\n\rmagic"
  "CardList\030\001 \003(\0132\024.BYDLD.MagicCardInfo\"\201\001\n"
  "\021SCTortoiseExplode\022\021\n\tchair_idx\030\001 \001(\005\022\020\n"
  "\010fish_uid\030\002 \001(\005\022\021\n\tbullet_id\030\003 \001(\005\022\r\n\005ra"
  "tio\030\004 \001(\005\022\022\n\nmax_effect\030\005 \001(\005\022\021\n\tis_doub"
  "le\030\006 \001(\010\"\035\n\010CSBuyGun\022\021\n\tgun_level\030\001 \001(\005\""
  "-\n\010SCBuyGun\022\016\n\006is_buy\030\001 \001(\010\022\021\n\tgun_level"
  "\030\002 \001(\005\"M\n\017SCWaterDropInfo\022\016\n\006enable\030\001 \001("
  "\010\022\022\n\ndrop_count\030\002 \001(\005\022\026\n\016fragment_count\030"
  "\003 \001(\005\"\036\n\nCSBuyWings\022\020\n\010wings_id\030\001 \001(\005\".\n"
  "\nSCBuyWings\022\020\n\010wings_id\030\001 \001(\005\022\016\n\006is_buy\030"
  "\002 \001(\010\"#\n\nCSSetWings\022\025\n\rwings_prop_id\030\001 \001"
  "(\005\"D\n\nSCSetWings\022\021\n\tchair_idx\030\001 \001(\005\022\025\n\rw"
  "ings_prop_id\030\002 \001(\005\022\014\n\004code\030\003 \001(\005\"3\n\nSCBe"
  "Kicked\022%\n\006reason\030\001 \001(\0162\025.BYDLD.BeKickedR"
  "eason\")\n\024CSClientTimeValidate\022\021\n\ttimesta"
  "mp\030\001 \001(\005\"\026\n\024SCClientTimeValidate\"\017\n\rCSCh"
  "angeTable\"\017\n\rSCChangeTable*\230\024\n\013GameComma"
  "nd\022\017\n\013Req_Invalid\020\000\022\022\n\rReq_HeartBeat\020\350\007\022"
  "\033\n\026Req_LoginGameWithToken\020\351\007\022\022\n\rReq_User"
  "Ready\020\352\007\022\027\n\022Req_SetProbability\020\353\007\022\027\n\022Req"
  "_FishTracesList\020\354\007\022\023\n\016Req_ChangeScen\020\355\007\022"
  "\032\n\025Req_FishOutsideScreen\020\356\007\022\021\n\014Req_LockF"
  "ish\020\357\007\022\027\n\022Req_UserShootMulti\020\360\007\022\025\n\020Req_H"
  "itMultiFish\020\361\007\022\021\n\014Req_SetSkill\020\362\007\022\022\n\rReq"
  "_SyncMoney\020\363\007\022\025\n\020Req_NotifyLogout\020\364\007\022\024\n\017"
  "Req_SyncFishReq\020\365\007\022\024\n\017Req_SyncFishRsp\020\366\007"
  "\022\030\n\023Req_UserTimeoutKick\020\367\007\022\032\n\025Req_UserRu"
  "nBackground\020\370\007\022\027\n\022Req_UpdateHallProp\020\371\007\022"
  "\025\n\020Req_PropsTrident\020\372\007\022\025\n\020Req_PropsTorpe"
  "do\020\373\007\022\027\n\022Req_PropsAwardPool\020\374\007\022\024\n\017Req_Tr"
  "identInfo\020\375\007\022\023\n\016Req_TridentBet\020\376\007\022\027\n\022Req"
  "_BigSmallChoose\020\377\007\022\024\n\017Req_BigSmallBet\020\200\010"
  "\022\025\n\020Req_ShootTorpedo\020\201\010\022\020\n\013Req_VipInfo\020\202"
  "\010\022\026\n\021Req_PurchaseCheck\020\203\010\022\020\n\013Req_ComTask"
  "\020\204\010\022\021\n\014Req_TaskInfo\020\205\010\022\030\n\023Req_UserScoreR"
  "ecord\020\206\010\022\024\n\017Req_FreeTimeEnd\020\207\010\022\026\n\021Req_Sy"
  "ncFreeTimes\020\210\010\022\027\n\022Req_ClickStatistic\020\211\010\022"
  "\025\n\020Req_ActivityInfo\020\212\010\022\027\n\022Req_PropDropNo"
  "tify\020\213\010\022\026\n\021Req_PropEndNotify\020\214\010\022\022\n\rReq_U"
  "sersProp\020\215\010\022\033\n\026Req_ScratchNewYearCard\020\216\010"
  "\022\027\n\022Req_BuyNewYearCard\020\217\010\022\034\n\027Req_NewYear"
  "CardExchange\020\220\010\022\037\n\032Req_NewYearCardAwardR"
  "ecord\020\221\010\022\026\n\021Req_SaveSkillTime\020\222\010\022\032\n\025Req_"
  "SuperTridentShoot\020\223\010\022\033\n\026Req_SuperTrident"
  "Attack\020\224\010\022\024\n\017Req_MatchResult\020\225\010\022\032\n\025Req_M"
  "atchPackAddition\020\226\010\022\031\n\024Req_MatchPackInva"
  "lid\020\227\010\022\030\n\023Req_AwardPoolRecord\020\230\010\022\025\n\020Req_"
  "FortuneShoot\020\231\010\022\024\n\017Req_SyncFortune\020\232\010\022\025\n"
  "\020Req_UserPoolInfo\020\233\010\022\027\n\022Req_UserPoolStat"
  "us\020\234\010\022\030\n\023Req_UserPoolPreDraw\020\235\010\022\025\n\020Req_U"
  "serPoolDraw\020\236\010\022\024\n\017Req_UserPoolAdd\020\237\010\022\026\n\021"
  "Req_LuckyDrawInfo\020\240\010\022\032\n\025Req_GetLuckyTask"
  "Award\020\241\010\022\024\n\017Req_LuckyRedDot\020\242\010\022\024\n\017Req_Ge"
  "tLuckyNum\020\243\010\022\024\n\017Req_LuckyRecord\020\244\010\022\022\n\rRe"
  "q_OwnRecord\020\245\010\022\024\n\017Req_DragonWheel\020\246\010\022\025\n\020"
  "Req_SyncHallProp\020\247\010\022\035\n\030Req_CheckDragonWh"
  "eelProp\020\250\010\022\033\n\026Req_UserPoolDoubleInfo\020\314\010\022"
  "\027\n\022Req_UserPoolDouble\020\315\010\022\026\n\021Req_LuckyPoo"
  "lInfo\020\316\010\022\026\n\021Req_LuckyPoolDraw\020\317\010\022\030\n\023Req_"
  "BigSmallWinInfo\020\340\010\022\032\n\025Req_TridentRankRes"
  "ult\020\341\010\022\027\n\022Req_BigSmallRecord\020\342\010\022\031\n\024Req_R"
  "ewardTaskRecord\020\352\010\022\026\n\021Req_RewardAddTask\020"
  "\353\010\022\031\n\024Req_RewardChangeAuto\020\354\010\022\031\n\024Req_Rew"
  "ardAddTaskRep\020\355\010\022\030\n\023Req_RewardRecordRep\020"
  "\356\010\022\026\n\021Req_RewardAutoRep\020\357\010\022\026\n\021Req_Reward"
  "FishGet\020\360\010\022\030\n\023Req_SendItemsSwitch\020\361\010\022\036\n\031"
  "Req_DealSyncSeaCrabCreate\020\362\010\022\036\n\031Req_Deal"
  "SyncCrabHitStatus\020\363\010\022\026\n\021DealDragonBallEn"
  "d\020\364\010\022\022\n\rReq_DevourHit\020\365\010\022\032\n\025Req_UpdateCh"
  "estStatus\020\371\010\022\024\n\017Req_ChestConfig\020\372\010\022\022\n\rRe"
  "q_OpenChest\020\373\010\022\032\n\025Req_SelectChestReward\020"
  "\374\010\022\033\n\026Req_ChestSetAutoSelect\020\375\010\022\027\n\022Req_C"
  "hestSetEnable\020\376\010\022\026\n\021Req_SyncAnimation\020\377\010"
  "\022\026\n\021Req_MagicCardList\020\200\t\022\017\n\nReq_BuyGun\020\201"
  "\t\022\020\n\013Req_GunInfo\020\202\t\022\021\n\014Req_BuyWings\020\203\t\022\022"
  "\n\rReq_WingsInfo\020\204\t\022\026\n\021Req_GemConfigList\020"
  "\205\t\022\026\n\021Req_JadeAwardInfo\020\206\t\022\027\n\022Req_AztecG"
  "emConfig\020\207\t\022\021\n\014Req_SetWings\020\273\t\022\030\n\023Req_To"
  "rtoiseExplode\020\260\t\022\026\n\021Req_WaterDropInfo\020\272\t"
  "\022\021\n\014Req_BeKicked\020\304\t\022\033\n\026Req_ClientTimeVal"
  "idate\020\305\t\022\024\n\017Req_ChangeTable\020\306\t\022\025\n\017Req_Aw"
  "ardNotify\020\241\234\001*\240\006\n\007ErrCode\022\013\n\007Success\020\000\022\030"
  "\n\023LoadPropsDataFailed\020\221N\022\032\n\025CanNotFindPl"
  "ayerPoint\020\222N\022\025\n\020ParameterIsWrong\020\223N\022\020\n\013L"
  "ackOfMoney\020\224N\022\031\n\024FreeTimesChangeRatio\020\225N"
  "\022\r\n\010IsNotSup\020\226N\022\026\n\021DeserializeFailed\020\227N\022"
  "\023\n\016PlayerNotExist\020\230N\022\027\n\022PlayerAlreadyLog"
  "in\020\231N\022\031\n\024LoadPlayerDataFailed\020\232N\022\025\n\020Allo"
  "cTableFailed\020\233N\022\021\n\014DefendPlugIn\020\234N\022\026\n\021QP"
  "EnterRoomFailed\020\235N\022\034\n\027QPBaseUserInfoGetF"
  "ailed\020\236N\022\025\n\020QPReadGoldFailed\020\237N\022\026\n\021LackM"
  "oneyInServer\020\240N\022\027\n\022AlreadyInOtherGame\020\241N"
  "\022\023\n\016ThisRoomIsFull\020\242N\022\023\n\016UserPoolNoMeet\020"
  "\243N\022\025\n\020UserPoolToHigher\020\244N\022\024\n\017ThisTableIs"
  "Full\020\245N\022\021\n\014ServerClosed\020\246N\022\025\n\020PlayerNotI"
  "nTable\020\247N\022\021\n\014PropNoEnough\020\256N\022\022\n\rPropRoom"
  "Limit\020\257N\022\016\n\tPropUsing\020\260N\022\021\n\014PropNotExist"
  "\020\261N\022\024\n\017PropUsingSetGun\020\262N\022\031\n\024ReqAddTaskS"
  "ettlement\020\270N\022\030\n\023ReqAddTaskMoneyLess\020\271N\022\026"
  "\n\021ReqAddTaskAlready\020\272N\022\030\n\023ReqAddTaskIDIn"
  "valid\020\273N\022\022\n\rOpenChestFail\020\302N\022\032\n\025SelectCh"
  "estRewardFail\020\303N* \n\010ItemName\022\024\n\020RewardTa"
  "skEnable\020\000*\263\002\n\014AztecGemType\022\025\n\021AztecGemT"
  "ype_Null\020\000\022\027\n\023AztecGemType_Orange\020\001\022\024\n\020A"
  "ztecGemType_Red\020\002\022\025\n\021AztecGemType_Pink\020\003"
  "\022\027\n\023AztecGemType_Purple\020\004\022\025\n\021AztecGemTyp"
  "e_Blue\020\005\022\026\n\022AztecGemType_Green\020\006\022\022\n\016Azte"
  "cGemType_A\020\007\022\022\n\016AztecGemType_K\020\010\022\022\n\016Azte"
  "cGemType_Q\020\t\022\022\n\016AztecGemType_J\020\n\022\023\n\017Azte"
  "cGemType_10\020\013\022\031\n\025AztecGemType_Critical\020\014"
  "*`\n\tChestType\022\026\n\022ChestTypePorcelain\020\000\022\023\n"
  "\017ChestTypeBronze\020\001\022\023\n\017ChestTypeSilver\020\002\022"
  "\021\n\rChestTypeGold\020\003*A\n\025ChestAutoSelectOpt"
  "ion\022\010\n\004None\020\000\022\023\n\017RedPacketTicket\020\001\022\t\n\005Mo"
  "ney\020\002*f\n\016BeKickedReason\022\014\n\010NoReason\020\000\022\022\n"
  "\016ServerIsClosed\020\001\022\017\n\013HallCommand\020\002\022\026\n\022No"
  "OperationTimeout\020\003\022\t\n\005Cheat\020\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_BYDLD_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_BYDLD_2eproto_sccs[264] = {
  &scc_info_AwardDetail_BYDLD_2eproto.base,
  &scc_info_AwardPoolData_BYDLD_2eproto.base,
  &scc_info_AwardPoolRecord_BYDLD_2eproto.base,
  &scc_info_AwardProp_BYDLD_2eproto.base,
  &scc_info_AztecClearReward_BYDLD_2eproto.base,
  &scc_info_AztecDataInfo_BYDLD_2eproto.base,
  &scc_info_AztecGemConfig_BYDLD_2eproto.base,
  &scc_info_AztecGemConfigItem_BYDLD_2eproto.base,
  &scc_info_AztecStep_BYDLD_2eproto.base,
  &scc_info_AztecTable_BYDLD_2eproto.base,
  &scc_info_BigSmallRecord_BYDLD_2eproto.base,
  &scc_info_CSAwardPoolRecord_BYDLD_2eproto.base,
  &scc_info_CSAztecGemConfig_BYDLD_2eproto.base,
  &scc_info_CSBigSmallBet_BYDLD_2eproto.base,
  &scc_info_CSBigSmallChoose_BYDLD_2eproto.base,
  &scc_info_CSBigSmallRecord_BYDLD_2eproto.base,
  &scc_info_CSBigSmallWinInfo_BYDLD_2eproto.base,
  &scc_info_CSBuyGun_BYDLD_2eproto.base,
  &scc_info_CSBuyNewYearCard_BYDLD_2eproto.base,
  &scc_info_CSBuyWings_BYDLD_2eproto.base,
  &scc_info_CSChangeTable_BYDLD_2eproto.base,
  &scc_info_CSCheckDragonWheelProp_BYDLD_2eproto.base,
  &scc_info_CSChestConfig_BYDLD_2eproto.base,
  &scc_info_CSChestSetAutoSelect_BYDLD_2eproto.base,
  &scc_info_CSChestSetEnable_BYDLD_2eproto.base,
  &scc_info_CSClickStatistic_BYDLD_2eproto.base,
  &scc_info_CSClientTimeValidate_BYDLD_2eproto.base,
  &scc_info_CSDevourHit_BYDLD_2eproto.base,
  &scc_info_CSDragonBallEnd_BYDLD_2eproto.base,
  &scc_info_CSDragonWheelStart_BYDLD_2eproto.base,
  &scc_info_CSFishOutsideScreen_BYDLD_2eproto.base,
  &scc_info_CSFortuneShoot_BYDLD_2eproto.base,
  &scc_info_CSFreeTimeEnd_BYDLD_2eproto.base,
  &scc_info_CSGetLuckyNum_BYDLD_2eproto.base,
  &scc_info_CSGetLuckyTaskAward_BYDLD_2eproto.base,
  &scc_info_CSHBonusPool_BYDLD_2eproto.base,
  &scc_info_CSHHistoryRank_BYDLD_2eproto.base,
  &scc_info_CSHLuckyInfo_BYDLD_2eproto.base,
  &scc_info_CSHMatchInfo_BYDLD_2eproto.base,
  &scc_info_CSHMatchInfoTip_BYDLD_2eproto.base,
  &scc_info_CSHRankBar_BYDLD_2eproto.base,
  &scc_info_CSHRealRank_BYDLD_2eproto.base,
  &scc_info_CSHReward_BYDLD_2eproto.base,
  &scc_info_CSHeartBeat_BYDLD_2eproto.base,
  &scc_info_CSHitMultiFish_BYDLD_2eproto.base,
  &scc_info_CSJadeAwardInfo_BYDLD_2eproto.base,
  &scc_info_CSLockFish_BYDLD_2eproto.base,
  &scc_info_CSLoginGameWithToken_BYDLD_2eproto.base,
  &scc_info_CSLuckyDrawInfo_BYDLD_2eproto.base,
  &scc_info_CSLuckyPoolDraw_BYDLD_2eproto.base,
  &scc_info_CSLuckyPoolInfo_BYDLD_2eproto.base,
  &scc_info_CSLuckyRecord_BYDLD_2eproto.base,
  &scc_info_CSLuckyRedDot_BYDLD_2eproto.base,
  &scc_info_CSMagicCardList_BYDLD_2eproto.base,
  &scc_info_CSMatchPackAddition_BYDLD_2eproto.base,
  &scc_info_CSNewYearCardAwardRecord_BYDLD_2eproto.base,
  &scc_info_CSNewYearCardExchange_BYDLD_2eproto.base,
  &scc_info_CSNotifyLogout_BYDLD_2eproto.base,
  &scc_info_CSOpenChest_BYDLD_2eproto.base,
  &scc_info_CSReqRewardAddTask_BYDLD_2eproto.base,
  &scc_info_CSReqRewardRecord_BYDLD_2eproto.base,
  &scc_info_CSRewardChangeAuto_BYDLD_2eproto.base,
  &scc_info_CSSaveSkillTime_BYDLD_2eproto.base,
  &scc_info_CSScratchNewYearCard_BYDLD_2eproto.base,
  &scc_info_CSSelectChestReward_BYDLD_2eproto.base,
  &scc_info_CSSetProbability_BYDLD_2eproto.base,
  &scc_info_CSSetSkill_BYDLD_2eproto.base,
  &scc_info_CSSetWings_BYDLD_2eproto.base,
  &scc_info_CSShootTorpedo_BYDLD_2eproto.base,
  &scc_info_CSSuperTridentAttack_BYDLD_2eproto.base,
  &scc_info_CSSuperTridentShoot_BYDLD_2eproto.base,
  &scc_info_CSSyncAnimation_BYDLD_2eproto.base,
  &scc_info_CSSyncCrabStatus_BYDLD_2eproto.base,
  &scc_info_CSSyncFishReq_BYDLD_2eproto.base,
  &scc_info_CSSyncFishRsp_BYDLD_2eproto.base,
  &scc_info_CSSyncMoney_BYDLD_2eproto.base,
  &scc_info_CSTaskInfo_BYDLD_2eproto.base,
  &scc_info_CSTridentBet_BYDLD_2eproto.base,
  &scc_info_CSTridentInfo_BYDLD_2eproto.base,
  &scc_info_CSUpdateHallProp_BYDLD_2eproto.base,
  &scc_info_CSUserPoolDouble_BYDLD_2eproto.base,
  &scc_info_CSUserPoolDoubleInfo_BYDLD_2eproto.base,
  &scc_info_CSUserPoolDraw_BYDLD_2eproto.base,
  &scc_info_CSUserPoolInfo_BYDLD_2eproto.base,
  &scc_info_CSUserPoolPreDraw_BYDLD_2eproto.base,
  &scc_info_CSUserPoolStatus_BYDLD_2eproto.base,
  &scc_info_CSUserReady_BYDLD_2eproto.base,
  &scc_info_CSUserRunBackground_BYDLD_2eproto.base,
  &scc_info_CSUserShootMulti_BYDLD_2eproto.base,
  &scc_info_Capturefish_BYDLD_2eproto.base,
  &scc_info_ChestBrief_BYDLD_2eproto.base,
  &scc_info_CommonResp_BYDLD_2eproto.base,
  &scc_info_CritWheel_BYDLD_2eproto.base,
  &scc_info_Decimal_BYDLD_2eproto.base,
  &scc_info_DevouredFish_BYDLD_2eproto.base,
  &scc_info_DragonBallConfig_BYDLD_2eproto.base,
  &scc_info_DragonBallInfo_BYDLD_2eproto.base,
  &scc_info_DragonBallWheelInfo_BYDLD_2eproto.base,
  &scc_info_EffectFish_BYDLD_2eproto.base,
  &scc_info_EffectInfo_BYDLD_2eproto.base,
  &scc_info_FishTrace_BYDLD_2eproto.base,
  &scc_info_FishTraces_BYDLD_2eproto.base,
  &scc_info_GemConfig_BYDLD_2eproto.base,
  &scc_info_GiftBag_BYDLD_2eproto.base,
  &scc_info_GoldenJadeInfo_BYDLD_2eproto.base,
  &scc_info_GoodsInfo_BYDLD_2eproto.base,
  &scc_info_GunDetail_BYDLD_2eproto.base,
  &scc_info_GunSpecEffect_BYDLD_2eproto.base,
  &scc_info_HBonusPool_BYDLD_2eproto.base,
  &scc_info_HistoryRank_BYDLD_2eproto.base,
  &scc_info_HitFish_BYDLD_2eproto.base,
  &scc_info_HttpResult_BYDLD_2eproto.base,
  &scc_info_IngotInfo_BYDLD_2eproto.base,
  &scc_info_ItemEnableInfo_BYDLD_2eproto.base,
  &scc_info_ItemEnableNotice_BYDLD_2eproto.base,
  &scc_info_ItemWheel_BYDLD_2eproto.base,
  &scc_info_JadeAwardInfo_BYDLD_2eproto.base,
  &scc_info_JumpHighArena_BYDLD_2eproto.base,
  &scc_info_LuckyInfo_BYDLD_2eproto.base,
  &scc_info_LuckyRecord_BYDLD_2eproto.base,
  &scc_info_LuckyTaskInfo_BYDLD_2eproto.base,
  &scc_info_MagicCardInfo_BYDLD_2eproto.base,
  &scc_info_MagicInfo_BYDLD_2eproto.base,
  &scc_info_MatchInfoTip_BYDLD_2eproto.base,
  &scc_info_MatchPackAddition_BYDLD_2eproto.base,
  &scc_info_NewYearCardActivityInfo_BYDLD_2eproto.base,
  &scc_info_NewYearCardAward_BYDLD_2eproto.base,
  &scc_info_NewYearCardAwardRecord_BYDLD_2eproto.base,
  &scc_info_NewYearCardMultiple_BYDLD_2eproto.base,
  &scc_info_Object2_BYDLD_2eproto.base,
  &scc_info_Object3_BYDLD_2eproto.base,
  &scc_info_Object4_BYDLD_2eproto.base,
  &scc_info_ObjectData_BYDLD_2eproto.base,
  &scc_info_OctopusKingInfo_BYDLD_2eproto.base,
  &scc_info_OctopusKingItem_BYDLD_2eproto.base,
  &scc_info_OpenChestReward_BYDLD_2eproto.base,
  &scc_info_OwnRecord_BYDLD_2eproto.base,
  &scc_info_Prop_BYDLD_2eproto.base,
  &scc_info_PurchaseGun_BYDLD_2eproto.base,
  &scc_info_RealRank_BYDLD_2eproto.base,
  &scc_info_ResultRank_BYDLD_2eproto.base,
  &scc_info_Reward_BYDLD_2eproto.base,
  &scc_info_RewardConf_BYDLD_2eproto.base,
  &scc_info_RewardTask_BYDLD_2eproto.base,
  &scc_info_SCActivityInfo_BYDLD_2eproto.base,
  &scc_info_SCAwardPoolRecord_BYDLD_2eproto.base,
  &scc_info_SCAztecGemConfig_BYDLD_2eproto.base,
  &scc_info_SCBeKicked_BYDLD_2eproto.base,
  &scc_info_SCBigSmallBet_BYDLD_2eproto.base,
  &scc_info_SCBigSmallChoose_BYDLD_2eproto.base,
  &scc_info_SCBigSmallRecord_BYDLD_2eproto.base,
  &scc_info_SCBigSmallWinInfo_BYDLD_2eproto.base,
  &scc_info_SCBuyGun_BYDLD_2eproto.base,
  &scc_info_SCBuyWings_BYDLD_2eproto.base,
  &scc_info_SCChangeScene_BYDLD_2eproto.base,
  &scc_info_SCChangeTable_BYDLD_2eproto.base,
  &scc_info_SCCheckDragonWheelProp_BYDLD_2eproto.base,
  &scc_info_SCChestConfig_BYDLD_2eproto.base,
  &scc_info_SCChestSetAutoSelect_BYDLD_2eproto.base,
  &scc_info_SCChestSetEnable_BYDLD_2eproto.base,
  &scc_info_SCClientTimeValidate_BYDLD_2eproto.base,
  &scc_info_SCComTask_BYDLD_2eproto.base,
  &scc_info_SCDevourHit_BYDLD_2eproto.base,
  &scc_info_SCDragonBallRes_BYDLD_2eproto.base,
  &scc_info_SCDragonWheelStop_BYDLD_2eproto.base,
  &scc_info_SCFishTracesList_BYDLD_2eproto.base,
  &scc_info_SCFortuneShoot_BYDLD_2eproto.base,
  &scc_info_SCGemConfigList_BYDLD_2eproto.base,
  &scc_info_SCGetLuckyNum_BYDLD_2eproto.base,
  &scc_info_SCGunInfo_BYDLD_2eproto.base,
  &scc_info_SCHBonusPool_BYDLD_2eproto.base,
  &scc_info_SCHHistoryRank_BYDLD_2eproto.base,
  &scc_info_SCHLuckyInfo_BYDLD_2eproto.base,
  &scc_info_SCHMatchInfo_BYDLD_2eproto.base,
  &scc_info_SCHMatchInfoTip_BYDLD_2eproto.base,
  &scc_info_SCHRankBar_BYDLD_2eproto.base,
  &scc_info_SCHRealRank_BYDLD_2eproto.base,
  &scc_info_SCHReward_BYDLD_2eproto.base,
  &scc_info_SCHeartBeat_BYDLD_2eproto.base,
  &scc_info_SCHitMultiFish_BYDLD_2eproto.base,
  &scc_info_SCJadeAwardInfo_BYDLD_2eproto.base,
  &scc_info_SCLockFish_BYDLD_2eproto.base,
  &scc_info_SCLoginGameWithToken_BYDLD_2eproto.base,
  &scc_info_SCLuckyAwardNotify_BYDLD_2eproto.base,
  &scc_info_SCLuckyDrawInfo_BYDLD_2eproto.base,
  &scc_info_SCLuckyPoolDraw_BYDLD_2eproto.base,
  &scc_info_SCLuckyPoolInfo_BYDLD_2eproto.base,
  &scc_info_SCLuckyRecord_BYDLD_2eproto.base,
  &scc_info_SCLuckyRedDot_BYDLD_2eproto.base,
  &scc_info_SCLuckyTaskInfo_BYDLD_2eproto.base,
  &scc_info_SCMagicCardList_BYDLD_2eproto.base,
  &scc_info_SCMatchPackAddition_BYDLD_2eproto.base,
  &scc_info_SCMatchPackInvail_BYDLD_2eproto.base,
  &scc_info_SCMatchResult_BYDLD_2eproto.base,
  &scc_info_SCNewYearCardAwardRecord_BYDLD_2eproto.base,
  &scc_info_SCNewYearCardExchange_BYDLD_2eproto.base,
  &scc_info_SCNotifyLogout_BYDLD_2eproto.base,
  &scc_info_SCOpenChest_BYDLD_2eproto.base,
  &scc_info_SCOwnRecord_BYDLD_2eproto.base,
  &scc_info_SCPropDropNotify_BYDLD_2eproto.base,
  &scc_info_SCPropEndNotify_BYDLD_2eproto.base,
  &scc_info_SCPropsAwardPool_BYDLD_2eproto.base,
  &scc_info_SCPropsTorpedo_BYDLD_2eproto.base,
  &scc_info_SCPropsTrident_BYDLD_2eproto.base,
  &scc_info_SCPurchaseCheck_BYDLD_2eproto.base,
  &scc_info_SCRepRewardTaskList_BYDLD_2eproto.base,
  &scc_info_SCRepRewardTaskRecord_BYDLD_2eproto.base,
  &scc_info_SCRewardAutoRep_BYDLD_2eproto.base,
  &scc_info_SCRewardTaskFinish_BYDLD_2eproto.base,
  &scc_info_SCScratchNewYearCard_BYDLD_2eproto.base,
  &scc_info_SCSeaCrabCreate_BYDLD_2eproto.base,
  &scc_info_SCSelectChestReward_BYDLD_2eproto.base,
  &scc_info_SCSetProbability_BYDLD_2eproto.base,
  &scc_info_SCSetSkill_BYDLD_2eproto.base,
  &scc_info_SCSetWings_BYDLD_2eproto.base,
  &scc_info_SCShootTorpedo_BYDLD_2eproto.base,
  &scc_info_SCSuperTridentShoot_BYDLD_2eproto.base,
  &scc_info_SCSyncAnimation_BYDLD_2eproto.base,
  &scc_info_SCSyncCrabStatus_BYDLD_2eproto.base,
  &scc_info_SCSyncFishReq_BYDLD_2eproto.base,
  &scc_info_SCSyncFishRsp_BYDLD_2eproto.base,
  &scc_info_SCSyncFortune_BYDLD_2eproto.base,
  &scc_info_SCSyncFreeTimes_BYDLD_2eproto.base,
  &scc_info_SCSyncHallProp_BYDLD_2eproto.base,
  &scc_info_SCSyncMoney_BYDLD_2eproto.base,
  &scc_info_SCSyncRewardTaskResult_BYDLD_2eproto.base,
  &scc_info_SCTaskInfo_BYDLD_2eproto.base,
  &scc_info_SCTortoiseExplode_BYDLD_2eproto.base,
  &scc_info_SCTridentBet_BYDLD_2eproto.base,
  &scc_info_SCTridentInfo_BYDLD_2eproto.base,
  &scc_info_SCTridentRankResult_BYDLD_2eproto.base,
  &scc_info_SCUpdateChestStatus_BYDLD_2eproto.base,
  &scc_info_SCUserPoolAdd_BYDLD_2eproto.base,
  &scc_info_SCUserPoolDouble_BYDLD_2eproto.base,
  &scc_info_SCUserPoolDoubleInfo_BYDLD_2eproto.base,
  &scc_info_SCUserPoolDraw_BYDLD_2eproto.base,
  &scc_info_SCUserPoolInfo_BYDLD_2eproto.base,
  &scc_info_SCUserPoolPreDraw_BYDLD_2eproto.base,
  &scc_info_SCUserPoolStatus_BYDLD_2eproto.base,
  &scc_info_SCUserReady_BYDLD_2eproto.base,
  &scc_info_SCUserRunBackground_BYDLD_2eproto.base,
  &scc_info_SCUserShootMulti_BYDLD_2eproto.base,
  &scc_info_SCUserTimeoutKick_BYDLD_2eproto.base,
  &scc_info_SCVipInfo_BYDLD_2eproto.base,
  &scc_info_SCWaterDropInfo_BYDLD_2eproto.base,
  &scc_info_SCWingsInfo_BYDLD_2eproto.base,
  &scc_info_SC_SceneInfo_BYDLD_2eproto.base,
  &scc_info_SSAwardPoolMsg_BYDLD_2eproto.base,
  &scc_info_SkillTime_BYDLD_2eproto.base,
  &scc_info_SpecEffect_BYDLD_2eproto.base,
  &scc_info_StationBase_BYDLD_2eproto.base,
  &scc_info_TridentRankList_BYDLD_2eproto.base,
  &scc_info_UserAwardItem_BYDLD_2eproto.base,
  &scc_info_UserPoolActivityInfo_BYDLD_2eproto.base,
  &scc_info_UserProp_BYDLD_2eproto.base,
  &scc_info_UserScoreRecord_BYDLD_2eproto.base,
  &scc_info_UserShoot_BYDLD_2eproto.base,
  &scc_info_UserShootRsp_BYDLD_2eproto.base,
  &scc_info_UsersProp_BYDLD_2eproto.base,
  &scc_info_WingsInfo_BYDLD_2eproto.base,
  &scc_info_WingsSpecEffect_BYDLD_2eproto.base,
  &scc_info_Zeus_BYDLD_2eproto.base,
  &scc_info_roulette_result_BYDLD_2eproto.base,
  &scc_info_zeus_result_BYDLD_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_BYDLD_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_BYDLD_2eproto = {
  false, false, descriptor_table_protodef_BYDLD_2eproto, "BYDLD.proto", 25397,
  &descriptor_table_BYDLD_2eproto_once, descriptor_table_BYDLD_2eproto_sccs, descriptor_table_BYDLD_2eproto_deps, 264, 0,
  schemas, file_default_instances, TableStruct_BYDLD_2eproto::offsets,
  file_level_metadata_BYDLD_2eproto, 264, file_level_enum_descriptors_BYDLD_2eproto, file_level_service_descriptors_BYDLD_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_BYDLD_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_BYDLD_2eproto)), true);
namespace BYDLD {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameCommand_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_BYDLD_2eproto);
  return file_level_enum_descriptors_BYDLD_2eproto[0];
}
bool GameCommand_IsValid(int value) {
  switch (value) {
    case 0:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
    case 1019:
    case 1020:
    case 1021:
    case 1022:
    case 1023:
    case 1024:
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1029:
    case 1030:
    case 1031:
    case 1032:
    case 1033:
    case 1034:
    case 1035:
    case 1036:
    case 1037:
    case 1038:
    case 1039:
    case 1040:
    case 1041:
    case 1042:
    case 1043:
    case 1044:
    case 1045:
    case 1046:
    case 1047:
    case 1048:
    case 1049:
    case 1050:
    case 1051:
    case 1052:
    case 1053:
    case 1054:
    case 1055:
    case 1056:
    case 1057:
    case 1058:
    case 1059:
    case 1060:
    case 1061:
    case 1062:
    case 1063:
    case 1064:
    case 1100:
    case 1101:
    case 1102:
    case 1103:
    case 1120:
    case 1121:
    case 1122:
    case 1130:
    case 1131:
    case 1132:
    case 1133:
    case 1134:
    case 1135:
    case 1136:
    case 1137:
    case 1138:
    case 1139:
    case 1140:
    case 1141:
    case 1145:
    case 1146:
    case 1147:
    case 1148:
    case 1149:
    case 1150:
    case 1151:
    case 1152:
    case 1153:
    case 1154:
    case 1155:
    case 1156:
    case 1157:
    case 1158:
    case 1159:
    case 1200:
    case 1210:
    case 1211:
    case 1220:
    case 1221:
    case 1222:
    case 20001:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_BYDLD_2eproto);
  return file_level_enum_descriptors_BYDLD_2eproto[1];
}
bool ErrCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 10001:
    case 10002:
    case 10003:
    case 10004:
    case 10005:
    case 10006:
    case 10007:
    case 10008:
    case 10009:
    case 10010:
    case 10011:
    case 10012:
    case 10013:
    case 10014:
    case 10015:
    case 10016:
    case 10017:
    case 10018:
    case 10019:
    case 10020:
    case 10021:
    case 10022:
    case 10023:
    case 10030:
    case 10031:
    case 10032:
    case 10033:
    case 10034:
    case 10040:
    case 10041:
    case 10042:
    case 10043:
    case 10050:
    case 10051:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemName_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_BYDLD_2eproto);
  return file_level_enum_descriptors_BYDLD_2eproto[2];
}
bool ItemName_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AztecGemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_BYDLD_2eproto);
  return file_level_enum_descriptors_BYDLD_2eproto[3];
}
bool AztecGemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChestType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_BYDLD_2eproto);
  return file_level_enum_descriptors_BYDLD_2eproto[4];
}
bool ChestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChestAutoSelectOption_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_BYDLD_2eproto);
  return file_level_enum_descriptors_BYDLD_2eproto[5];
}
bool ChestAutoSelectOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BeKickedReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_BYDLD_2eproto);
  return file_level_enum_descriptors_BYDLD_2eproto[6];
}
bool BeKickedReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SC_SceneInfo::_Internal {
 public:
};

SC_SceneInfo::SC_SceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  station_base_list_(arena),
  ratio_list_(arena),
  gun_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SC_SceneInfo)
}
SC_SceneInfo::SC_SceneInfo(const SC_SceneInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      station_base_list_(from.station_base_list_),
      ratio_list_(from.ratio_list_),
      gun_list_(from.gun_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&gun_level_num_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(gun_level_num_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SC_SceneInfo)
}

void SC_SceneInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_SceneInfo_BYDLD_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&gun_level_num_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(gun_level_num_));
}

SC_SceneInfo::~SC_SceneInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.SC_SceneInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SC_SceneInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SC_SceneInfo::ArenaDtor(void* object) {
  SC_SceneInfo* _this = reinterpret_cast< SC_SceneInfo* >(object);
  (void)_this;
}
void SC_SceneInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SC_SceneInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_SceneInfo& SC_SceneInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_SceneInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SC_SceneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SC_SceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  station_base_list_.Clear();
  ratio_list_.Clear();
  gun_list_.Clear();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gun_level_num_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(gun_level_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_SceneInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.StationBase station_base_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_station_base_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gun_ratio_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gun_ratio_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gun_level_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          gun_level_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 ratio_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_ratio_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_ratio_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.GunDetail gun_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gun_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_SceneInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SC_SceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.StationBase station_base_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_station_base_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_station_base_list(i), target, stream);
  }

  // int32 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_timestamp(), target);
  }

  // int32 gun_ratio_num = 3;
  if (this->gun_ratio_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_gun_ratio_num(), target);
  }

  // int32 gun_level_num = 4;
  if (this->gun_level_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_gun_level_num(), target);
  }

  // repeated int32 ratio_list = 5;
  {
    int byte_size = _ratio_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_ratio_list(), byte_size, target);
    }
  }

  // repeated .BYDLD.GunDetail gun_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gun_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_gun_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SC_SceneInfo)
  return target;
}

size_t SC_SceneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SC_SceneInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.StationBase station_base_list = 1;
  total_size += 1UL * this->_internal_station_base_list_size();
  for (const auto& msg : this->station_base_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 ratio_list = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->ratio_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ratio_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .BYDLD.GunDetail gun_list = 6;
  total_size += 1UL * this->_internal_gun_list_size();
  for (const auto& msg : this->gun_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timestamp());
  }

  // int32 gun_ratio_num = 3;
  if (this->gun_ratio_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gun_ratio_num());
  }

  // int32 gun_level_num = 4;
  if (this->gun_level_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gun_level_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_SceneInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SC_SceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SceneInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_SceneInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SC_SceneInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SC_SceneInfo)
    MergeFrom(*source);
  }
}

void SC_SceneInfo::MergeFrom(const SC_SceneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SC_SceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  station_base_list_.MergeFrom(from.station_base_list_);
  ratio_list_.MergeFrom(from.ratio_list_);
  gun_list_.MergeFrom(from.gun_list_);
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.gun_ratio_num() != 0) {
    _internal_set_gun_ratio_num(from._internal_gun_ratio_num());
  }
  if (from.gun_level_num() != 0) {
    _internal_set_gun_level_num(from._internal_gun_level_num());
  }
}

void SC_SceneInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SC_SceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SceneInfo::CopyFrom(const SC_SceneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SC_SceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SceneInfo::IsInitialized() const {
  return true;
}

void SC_SceneInfo::InternalSwap(SC_SceneInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  station_base_list_.InternalSwap(&other->station_base_list_);
  ratio_list_.InternalSwap(&other->ratio_list_);
  gun_list_.InternalSwap(&other->gun_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_SceneInfo, gun_level_num_)
      + sizeof(SC_SceneInfo::gun_level_num_)
      - PROTOBUF_FIELD_OFFSET(SC_SceneInfo, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_SceneInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GunSpecEffect::_Internal {
 public:
};

GunSpecEffect::GunSpecEffect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.GunSpecEffect)
}
GunSpecEffect::GunSpecEffect(const GunSpecEffect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ratiolimit_, &from.ratiolimit_,
    static_cast<size_t>(reinterpret_cast<char*>(&double_tag_) -
    reinterpret_cast<char*>(&ratiolimit_)) + sizeof(double_tag_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.GunSpecEffect)
}

void GunSpecEffect::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ratiolimit_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&double_tag_) -
      reinterpret_cast<char*>(&ratiolimit_)) + sizeof(double_tag_));
}

GunSpecEffect::~GunSpecEffect() {
  // @@protoc_insertion_point(destructor:BYDLD.GunSpecEffect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GunSpecEffect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GunSpecEffect::ArenaDtor(void* object) {
  GunSpecEffect* _this = reinterpret_cast< GunSpecEffect* >(object);
  (void)_this;
}
void GunSpecEffect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GunSpecEffect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GunSpecEffect& GunSpecEffect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GunSpecEffect_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void GunSpecEffect::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.GunSpecEffect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ratiolimit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&double_tag_) -
      reinterpret_cast<char*>(&ratiolimit_)) + sizeof(double_tag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GunSpecEffect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ratioLimit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ratiolimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float hitChangeRate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          hitchangerate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float moneyChangeRate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          moneychangerate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float speedRate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          speedrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool is_senior = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_senior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool double_tag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          double_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GunSpecEffect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.GunSpecEffect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ratioLimit = 1;
  if (this->ratiolimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ratiolimit(), target);
  }

  // float hitChangeRate = 2;
  if (!(this->hitchangerate() <= 0 && this->hitchangerate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_hitchangerate(), target);
  }

  // float moneyChangeRate = 3;
  if (!(this->moneychangerate() <= 0 && this->moneychangerate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_moneychangerate(), target);
  }

  // float speedRate = 4;
  if (!(this->speedrate() <= 0 && this->speedrate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_speedrate(), target);
  }

  // bool is_senior = 5;
  if (this->is_senior() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_senior(), target);
  }

  // bool double_tag = 6;
  if (this->double_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_double_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.GunSpecEffect)
  return target;
}

size_t GunSpecEffect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.GunSpecEffect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ratioLimit = 1;
  if (this->ratiolimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratiolimit());
  }

  // float hitChangeRate = 2;
  if (!(this->hitchangerate() <= 0 && this->hitchangerate() >= 0)) {
    total_size += 1 + 4;
  }

  // float moneyChangeRate = 3;
  if (!(this->moneychangerate() <= 0 && this->moneychangerate() >= 0)) {
    total_size += 1 + 4;
  }

  // float speedRate = 4;
  if (!(this->speedrate() <= 0 && this->speedrate() >= 0)) {
    total_size += 1 + 4;
  }

  // bool is_senior = 5;
  if (this->is_senior() != 0) {
    total_size += 1 + 1;
  }

  // bool double_tag = 6;
  if (this->double_tag() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GunSpecEffect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.GunSpecEffect)
  GOOGLE_DCHECK_NE(&from, this);
  const GunSpecEffect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GunSpecEffect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.GunSpecEffect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.GunSpecEffect)
    MergeFrom(*source);
  }
}

void GunSpecEffect::MergeFrom(const GunSpecEffect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.GunSpecEffect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ratiolimit() != 0) {
    _internal_set_ratiolimit(from._internal_ratiolimit());
  }
  if (!(from.hitchangerate() <= 0 && from.hitchangerate() >= 0)) {
    _internal_set_hitchangerate(from._internal_hitchangerate());
  }
  if (!(from.moneychangerate() <= 0 && from.moneychangerate() >= 0)) {
    _internal_set_moneychangerate(from._internal_moneychangerate());
  }
  if (!(from.speedrate() <= 0 && from.speedrate() >= 0)) {
    _internal_set_speedrate(from._internal_speedrate());
  }
  if (from.is_senior() != 0) {
    _internal_set_is_senior(from._internal_is_senior());
  }
  if (from.double_tag() != 0) {
    _internal_set_double_tag(from._internal_double_tag());
  }
}

void GunSpecEffect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.GunSpecEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GunSpecEffect::CopyFrom(const GunSpecEffect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.GunSpecEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GunSpecEffect::IsInitialized() const {
  return true;
}

void GunSpecEffect::InternalSwap(GunSpecEffect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GunSpecEffect, double_tag_)
      + sizeof(GunSpecEffect::double_tag_)
      - PROTOBUF_FIELD_OFFSET(GunSpecEffect, ratiolimit_)>(
          reinterpret_cast<char*>(&ratiolimit_),
          reinterpret_cast<char*>(&other->ratiolimit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GunSpecEffect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WingsSpecEffect::_Internal {
 public:
};

WingsSpecEffect::WingsSpecEffect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.WingsSpecEffect)
}
WingsSpecEffect::WingsSpecEffect(const WingsSpecEffect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ratiolimit_, &from.ratiolimit_,
    static_cast<size_t>(reinterpret_cast<char*>(&double_tag_) -
    reinterpret_cast<char*>(&ratiolimit_)) + sizeof(double_tag_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.WingsSpecEffect)
}

void WingsSpecEffect::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ratiolimit_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&double_tag_) -
      reinterpret_cast<char*>(&ratiolimit_)) + sizeof(double_tag_));
}

WingsSpecEffect::~WingsSpecEffect() {
  // @@protoc_insertion_point(destructor:BYDLD.WingsSpecEffect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WingsSpecEffect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WingsSpecEffect::ArenaDtor(void* object) {
  WingsSpecEffect* _this = reinterpret_cast< WingsSpecEffect* >(object);
  (void)_this;
}
void WingsSpecEffect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WingsSpecEffect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WingsSpecEffect& WingsSpecEffect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WingsSpecEffect_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void WingsSpecEffect::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.WingsSpecEffect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ratiolimit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&double_tag_) -
      reinterpret_cast<char*>(&ratiolimit_)) + sizeof(double_tag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WingsSpecEffect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ratioLimit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ratiolimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float hitChangeRate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          hitchangerate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float moneyChangeRate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          moneychangerate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float speedRate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          speedrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool is_senior = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_senior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool double_tag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          double_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WingsSpecEffect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.WingsSpecEffect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ratioLimit = 1;
  if (this->ratiolimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ratiolimit(), target);
  }

  // float hitChangeRate = 2;
  if (!(this->hitchangerate() <= 0 && this->hitchangerate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_hitchangerate(), target);
  }

  // float moneyChangeRate = 3;
  if (!(this->moneychangerate() <= 0 && this->moneychangerate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_moneychangerate(), target);
  }

  // float speedRate = 4;
  if (!(this->speedrate() <= 0 && this->speedrate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_speedrate(), target);
  }

  // bool is_senior = 5;
  if (this->is_senior() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_senior(), target);
  }

  // bool double_tag = 6;
  if (this->double_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_double_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.WingsSpecEffect)
  return target;
}

size_t WingsSpecEffect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.WingsSpecEffect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ratioLimit = 1;
  if (this->ratiolimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratiolimit());
  }

  // float hitChangeRate = 2;
  if (!(this->hitchangerate() <= 0 && this->hitchangerate() >= 0)) {
    total_size += 1 + 4;
  }

  // float moneyChangeRate = 3;
  if (!(this->moneychangerate() <= 0 && this->moneychangerate() >= 0)) {
    total_size += 1 + 4;
  }

  // float speedRate = 4;
  if (!(this->speedrate() <= 0 && this->speedrate() >= 0)) {
    total_size += 1 + 4;
  }

  // bool is_senior = 5;
  if (this->is_senior() != 0) {
    total_size += 1 + 1;
  }

  // bool double_tag = 6;
  if (this->double_tag() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WingsSpecEffect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.WingsSpecEffect)
  GOOGLE_DCHECK_NE(&from, this);
  const WingsSpecEffect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WingsSpecEffect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.WingsSpecEffect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.WingsSpecEffect)
    MergeFrom(*source);
  }
}

void WingsSpecEffect::MergeFrom(const WingsSpecEffect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.WingsSpecEffect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ratiolimit() != 0) {
    _internal_set_ratiolimit(from._internal_ratiolimit());
  }
  if (!(from.hitchangerate() <= 0 && from.hitchangerate() >= 0)) {
    _internal_set_hitchangerate(from._internal_hitchangerate());
  }
  if (!(from.moneychangerate() <= 0 && from.moneychangerate() >= 0)) {
    _internal_set_moneychangerate(from._internal_moneychangerate());
  }
  if (!(from.speedrate() <= 0 && from.speedrate() >= 0)) {
    _internal_set_speedrate(from._internal_speedrate());
  }
  if (from.is_senior() != 0) {
    _internal_set_is_senior(from._internal_is_senior());
  }
  if (from.double_tag() != 0) {
    _internal_set_double_tag(from._internal_double_tag());
  }
}

void WingsSpecEffect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.WingsSpecEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WingsSpecEffect::CopyFrom(const WingsSpecEffect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.WingsSpecEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WingsSpecEffect::IsInitialized() const {
  return true;
}

void WingsSpecEffect::InternalSwap(WingsSpecEffect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WingsSpecEffect, double_tag_)
      + sizeof(WingsSpecEffect::double_tag_)
      - PROTOBUF_FIELD_OFFSET(WingsSpecEffect, ratiolimit_)>(
          reinterpret_cast<char*>(&ratiolimit_),
          reinterpret_cast<char*>(&other->ratiolimit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WingsSpecEffect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WingsInfo::_Internal {
 public:
  static const ::BYDLD::WingsSpecEffect& wings_spec_effect(const WingsInfo* msg);
};

const ::BYDLD::WingsSpecEffect&
WingsInfo::_Internal::wings_spec_effect(const WingsInfo* msg) {
  return *msg->wings_spec_effect_;
}
WingsInfo::WingsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.WingsInfo)
}
WingsInfo::WingsInfo(const WingsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_wings_spec_effect()) {
    wings_spec_effect_ = new ::BYDLD::WingsSpecEffect(*from.wings_spec_effect_);
  } else {
    wings_spec_effect_ = nullptr;
  }
  ::memcpy(&wings_id_, &from.wings_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&wings_id_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.WingsInfo)
}

void WingsInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WingsInfo_BYDLD_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&wings_spec_effect_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&wings_spec_effect_)) + sizeof(end_time_));
}

WingsInfo::~WingsInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.WingsInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WingsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete wings_spec_effect_;
}

void WingsInfo::ArenaDtor(void* object) {
  WingsInfo* _this = reinterpret_cast< WingsInfo* >(object);
  (void)_this;
}
void WingsInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WingsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WingsInfo& WingsInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WingsInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void WingsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.WingsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && wings_spec_effect_ != nullptr) {
    delete wings_spec_effect_;
  }
  wings_spec_effect_ = nullptr;
  ::memset(&wings_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&wings_id_)) + sizeof(end_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WingsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 wings_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          wings_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BYDLD.WingsSpecEffect wings_spec_effect = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_wings_spec_effect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 receive_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          receive_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 activity_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          activity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time_stamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 discount_price = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          discount_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 start_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 end_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WingsInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.WingsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 wings_id = 1;
  if (this->wings_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_wings_id(), target);
  }

  // bool enable = 2;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // .BYDLD.WingsSpecEffect wings_spec_effect = 3;
  if (this->has_wings_spec_effect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::wings_spec_effect(this), target, stream);
  }

  // int32 receive_type = 4;
  if (this->receive_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_receive_type(), target);
  }

  // int32 activity_id = 5;
  if (this->activity_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_activity_id(), target);
  }

  // int32 price = 6;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_price(), target);
  }

  // int32 time_stamp = 7;
  if (this->time_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_time_stamp(), target);
  }

  // int32 discount_price = 8;
  if (this->discount_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_discount_price(), target);
  }

  // int32 start_time = 9;
  if (this->start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_start_time(), target);
  }

  // int32 end_time = 10;
  if (this->end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_end_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.WingsInfo)
  return target;
}

size_t WingsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.WingsInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BYDLD.WingsSpecEffect wings_spec_effect = 3;
  if (this->has_wings_spec_effect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wings_spec_effect_);
  }

  // int32 wings_id = 1;
  if (this->wings_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wings_id());
  }

  // bool enable = 2;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // int32 receive_type = 4;
  if (this->receive_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_receive_type());
  }

  // int32 activity_id = 5;
  if (this->activity_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_activity_id());
  }

  // int32 price = 6;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_price());
  }

  // int32 time_stamp = 7;
  if (this->time_stamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time_stamp());
  }

  // int32 discount_price = 8;
  if (this->discount_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_discount_price());
  }

  // int32 start_time = 9;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start_time());
  }

  // int32 end_time = 10;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_end_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WingsInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.WingsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WingsInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WingsInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.WingsInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.WingsInfo)
    MergeFrom(*source);
  }
}

void WingsInfo::MergeFrom(const WingsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.WingsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_wings_spec_effect()) {
    _internal_mutable_wings_spec_effect()->::BYDLD::WingsSpecEffect::MergeFrom(from._internal_wings_spec_effect());
  }
  if (from.wings_id() != 0) {
    _internal_set_wings_id(from._internal_wings_id());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  if (from.receive_type() != 0) {
    _internal_set_receive_type(from._internal_receive_type());
  }
  if (from.activity_id() != 0) {
    _internal_set_activity_id(from._internal_activity_id());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from.time_stamp() != 0) {
    _internal_set_time_stamp(from._internal_time_stamp());
  }
  if (from.discount_price() != 0) {
    _internal_set_discount_price(from._internal_discount_price());
  }
  if (from.start_time() != 0) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (from.end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
}

void WingsInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.WingsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WingsInfo::CopyFrom(const WingsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.WingsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WingsInfo::IsInitialized() const {
  return true;
}

void WingsInfo::InternalSwap(WingsInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WingsInfo, end_time_)
      + sizeof(WingsInfo::end_time_)
      - PROTOBUF_FIELD_OFFSET(WingsInfo, wings_spec_effect_)>(
          reinterpret_cast<char*>(&wings_spec_effect_),
          reinterpret_cast<char*>(&other->wings_spec_effect_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WingsInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PurchaseGun::_Internal {
 public:
};

PurchaseGun::PurchaseGun(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.PurchaseGun)
}
PurchaseGun::PurchaseGun(const PurchaseGun& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&money_, &from.money_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&money_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.PurchaseGun)
}

void PurchaseGun::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&money_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&money_)) + sizeof(level_));
}

PurchaseGun::~PurchaseGun() {
  // @@protoc_insertion_point(destructor:BYDLD.PurchaseGun)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PurchaseGun::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PurchaseGun::ArenaDtor(void* object) {
  PurchaseGun* _this = reinterpret_cast< PurchaseGun* >(object);
  (void)_this;
}
void PurchaseGun::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PurchaseGun::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PurchaseGun& PurchaseGun::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PurchaseGun_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void PurchaseGun::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.PurchaseGun)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&money_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&money_)) + sizeof(level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PurchaseGun::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 money = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PurchaseGun::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.PurchaseGun)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 money = 1;
  if (this->money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_money(), target);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.PurchaseGun)
  return target;
}

size_t PurchaseGun::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.PurchaseGun)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 money = 1;
  if (this->money() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_money());
  }

  // int32 level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PurchaseGun::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.PurchaseGun)
  GOOGLE_DCHECK_NE(&from, this);
  const PurchaseGun* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PurchaseGun>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.PurchaseGun)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.PurchaseGun)
    MergeFrom(*source);
  }
}

void PurchaseGun::MergeFrom(const PurchaseGun& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.PurchaseGun)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.money() != 0) {
    _internal_set_money(from._internal_money());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void PurchaseGun::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.PurchaseGun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PurchaseGun::CopyFrom(const PurchaseGun& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.PurchaseGun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PurchaseGun::IsInitialized() const {
  return true;
}

void PurchaseGun::InternalSwap(PurchaseGun* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PurchaseGun, level_)
      + sizeof(PurchaseGun::level_)
      - PROTOBUF_FIELD_OFFSET(PurchaseGun, money_)>(
          reinterpret_cast<char*>(&money_),
          reinterpret_cast<char*>(&other->money_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PurchaseGun::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCVipInfo::_Internal {
 public:
};

SCVipInfo::SCVipInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCVipInfo)
}
SCVipInfo::SCVipInfo(const SCVipInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&panda_gun_vip_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(panda_gun_vip_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCVipInfo)
}

void SCVipInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&panda_gun_vip_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(panda_gun_vip_));
}

SCVipInfo::~SCVipInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.SCVipInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCVipInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCVipInfo::ArenaDtor(void* object) {
  SCVipInfo* _this = reinterpret_cast< SCVipInfo* >(object);
  (void)_this;
}
void SCVipInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCVipInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCVipInfo& SCVipInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCVipInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCVipInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCVipInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&panda_gun_vip_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(panda_gun_vip_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCVipInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cur_vip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cur_vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trident1_vip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          trident1_vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trident2_vip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          trident2_vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trident3_vip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          trident3_vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trident4_vip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          trident4_vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trident5_vip = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          trident5_vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 double_shoot_vip = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          double_shoot_vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lock_shoot_vip = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          lock_shoot_vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 golden_gun_vip = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          golden_gun_vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 paladin_gun_vip = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          paladin_gun_vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 panda_gun_vip = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          panda_gun_vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCVipInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCVipInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 cur_vip = 2;
  if (this->cur_vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cur_vip(), target);
  }

  // int32 trident1_vip = 3;
  if (this->trident1_vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_trident1_vip(), target);
  }

  // int32 trident2_vip = 4;
  if (this->trident2_vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_trident2_vip(), target);
  }

  // int32 trident3_vip = 5;
  if (this->trident3_vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_trident3_vip(), target);
  }

  // int32 trident4_vip = 6;
  if (this->trident4_vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_trident4_vip(), target);
  }

  // int32 trident5_vip = 7;
  if (this->trident5_vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_trident5_vip(), target);
  }

  // int32 double_shoot_vip = 8;
  if (this->double_shoot_vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_double_shoot_vip(), target);
  }

  // int32 lock_shoot_vip = 9;
  if (this->lock_shoot_vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_lock_shoot_vip(), target);
  }

  // int32 golden_gun_vip = 10;
  if (this->golden_gun_vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_golden_gun_vip(), target);
  }

  // int32 paladin_gun_vip = 11;
  if (this->paladin_gun_vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_paladin_gun_vip(), target);
  }

  // int32 panda_gun_vip = 12;
  if (this->panda_gun_vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_panda_gun_vip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCVipInfo)
  return target;
}

size_t SCVipInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCVipInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 cur_vip = 2;
  if (this->cur_vip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_vip());
  }

  // int32 trident1_vip = 3;
  if (this->trident1_vip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trident1_vip());
  }

  // int32 trident2_vip = 4;
  if (this->trident2_vip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trident2_vip());
  }

  // int32 trident3_vip = 5;
  if (this->trident3_vip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trident3_vip());
  }

  // int32 trident4_vip = 6;
  if (this->trident4_vip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trident4_vip());
  }

  // int32 trident5_vip = 7;
  if (this->trident5_vip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trident5_vip());
  }

  // int32 double_shoot_vip = 8;
  if (this->double_shoot_vip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_double_shoot_vip());
  }

  // int32 lock_shoot_vip = 9;
  if (this->lock_shoot_vip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lock_shoot_vip());
  }

  // int32 golden_gun_vip = 10;
  if (this->golden_gun_vip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_golden_gun_vip());
  }

  // int32 paladin_gun_vip = 11;
  if (this->paladin_gun_vip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_paladin_gun_vip());
  }

  // int32 panda_gun_vip = 12;
  if (this->panda_gun_vip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_panda_gun_vip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCVipInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCVipInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCVipInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCVipInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCVipInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCVipInfo)
    MergeFrom(*source);
  }
}

void SCVipInfo::MergeFrom(const SCVipInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCVipInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.cur_vip() != 0) {
    _internal_set_cur_vip(from._internal_cur_vip());
  }
  if (from.trident1_vip() != 0) {
    _internal_set_trident1_vip(from._internal_trident1_vip());
  }
  if (from.trident2_vip() != 0) {
    _internal_set_trident2_vip(from._internal_trident2_vip());
  }
  if (from.trident3_vip() != 0) {
    _internal_set_trident3_vip(from._internal_trident3_vip());
  }
  if (from.trident4_vip() != 0) {
    _internal_set_trident4_vip(from._internal_trident4_vip());
  }
  if (from.trident5_vip() != 0) {
    _internal_set_trident5_vip(from._internal_trident5_vip());
  }
  if (from.double_shoot_vip() != 0) {
    _internal_set_double_shoot_vip(from._internal_double_shoot_vip());
  }
  if (from.lock_shoot_vip() != 0) {
    _internal_set_lock_shoot_vip(from._internal_lock_shoot_vip());
  }
  if (from.golden_gun_vip() != 0) {
    _internal_set_golden_gun_vip(from._internal_golden_gun_vip());
  }
  if (from.paladin_gun_vip() != 0) {
    _internal_set_paladin_gun_vip(from._internal_paladin_gun_vip());
  }
  if (from.panda_gun_vip() != 0) {
    _internal_set_panda_gun_vip(from._internal_panda_gun_vip());
  }
}

void SCVipInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCVipInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCVipInfo::CopyFrom(const SCVipInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCVipInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCVipInfo::IsInitialized() const {
  return true;
}

void SCVipInfo::InternalSwap(SCVipInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCVipInfo, panda_gun_vip_)
      + sizeof(SCVipInfo::panda_gun_vip_)
      - PROTOBUF_FIELD_OFFSET(SCVipInfo, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCVipInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GunDetail::_Internal {
 public:
  static const ::BYDLD::GunSpecEffect& gunspeceffect(const GunDetail* msg);
};

const ::BYDLD::GunSpecEffect&
GunDetail::_Internal::gunspeceffect(const GunDetail* msg) {
  return *msg->gunspeceffect_;
}
GunDetail::GunDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ratio_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.GunDetail)
}
GunDetail::GunDetail(const GunDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ratio_list_(from.ratio_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gunspeceffect()) {
    gunspeceffect_ = new ::BYDLD::GunSpecEffect(*from.gunspeceffect_);
  } else {
    gunspeceffect_ = nullptr;
  }
  ::memcpy(&gun_level_, &from.gun_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&gun_level_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.GunDetail)
}

void GunDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GunDetail_BYDLD_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gunspeceffect_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&gunspeceffect_)) + sizeof(end_time_));
}

GunDetail::~GunDetail() {
  // @@protoc_insertion_point(destructor:BYDLD.GunDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GunDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gunspeceffect_;
}

void GunDetail::ArenaDtor(void* object) {
  GunDetail* _this = reinterpret_cast< GunDetail* >(object);
  (void)_this;
}
void GunDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GunDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GunDetail& GunDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GunDetail_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void GunDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.GunDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ratio_list_.Clear();
  if (GetArena() == nullptr && gunspeceffect_ != nullptr) {
    delete gunspeceffect_;
  }
  gunspeceffect_ = nullptr;
  ::memset(&gun_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&gun_level_)) + sizeof(end_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GunDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gun_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gun_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio_min = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ratio_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio_max = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ratio_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vip_limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          vip_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float attack_speed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          attack_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 prop_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          prop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BYDLD.GunSpecEffect gunSpecEffect = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_gunspeceffect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 discount_price = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          discount_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 start_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 end_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 ratio_list = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_ratio_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104) {
          _internal_add_ratio_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GunDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.GunDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gun_level = 1;
  if (this->gun_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gun_level(), target);
  }

  // bool enable = 2;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // int32 ratio_min = 3;
  if (this->ratio_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ratio_min(), target);
  }

  // int32 ratio_max = 4;
  if (this->ratio_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ratio_max(), target);
  }

  // int32 vip_limit = 5;
  if (this->vip_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_vip_limit(), target);
  }

  // int32 price = 6;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_price(), target);
  }

  // float attack_speed = 7;
  if (!(this->attack_speed() <= 0 && this->attack_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_attack_speed(), target);
  }

  // int32 prop_id = 8;
  if (this->prop_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_prop_id(), target);
  }

  // .BYDLD.GunSpecEffect gunSpecEffect = 9;
  if (this->has_gunspeceffect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::gunspeceffect(this), target, stream);
  }

  // int32 discount_price = 10;
  if (this->discount_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_discount_price(), target);
  }

  // int32 start_time = 11;
  if (this->start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_start_time(), target);
  }

  // int32 end_time = 12;
  if (this->end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_end_time(), target);
  }

  // repeated int32 ratio_list = 13;
  {
    int byte_size = _ratio_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          13, _internal_ratio_list(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.GunDetail)
  return target;
}

size_t GunDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.GunDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 ratio_list = 13;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->ratio_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ratio_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .BYDLD.GunSpecEffect gunSpecEffect = 9;
  if (this->has_gunspeceffect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gunspeceffect_);
  }

  // int32 gun_level = 1;
  if (this->gun_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gun_level());
  }

  // bool enable = 2;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // int32 ratio_min = 3;
  if (this->ratio_min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio_min());
  }

  // int32 ratio_max = 4;
  if (this->ratio_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio_max());
  }

  // int32 vip_limit = 5;
  if (this->vip_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vip_limit());
  }

  // int32 price = 6;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_price());
  }

  // float attack_speed = 7;
  if (!(this->attack_speed() <= 0 && this->attack_speed() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 prop_id = 8;
  if (this->prop_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prop_id());
  }

  // int32 discount_price = 10;
  if (this->discount_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_discount_price());
  }

  // int32 start_time = 11;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start_time());
  }

  // int32 end_time = 12;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_end_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GunDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.GunDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const GunDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GunDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.GunDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.GunDetail)
    MergeFrom(*source);
  }
}

void GunDetail::MergeFrom(const GunDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.GunDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ratio_list_.MergeFrom(from.ratio_list_);
  if (from.has_gunspeceffect()) {
    _internal_mutable_gunspeceffect()->::BYDLD::GunSpecEffect::MergeFrom(from._internal_gunspeceffect());
  }
  if (from.gun_level() != 0) {
    _internal_set_gun_level(from._internal_gun_level());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  if (from.ratio_min() != 0) {
    _internal_set_ratio_min(from._internal_ratio_min());
  }
  if (from.ratio_max() != 0) {
    _internal_set_ratio_max(from._internal_ratio_max());
  }
  if (from.vip_limit() != 0) {
    _internal_set_vip_limit(from._internal_vip_limit());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (!(from.attack_speed() <= 0 && from.attack_speed() >= 0)) {
    _internal_set_attack_speed(from._internal_attack_speed());
  }
  if (from.prop_id() != 0) {
    _internal_set_prop_id(from._internal_prop_id());
  }
  if (from.discount_price() != 0) {
    _internal_set_discount_price(from._internal_discount_price());
  }
  if (from.start_time() != 0) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (from.end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
}

void GunDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.GunDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GunDetail::CopyFrom(const GunDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.GunDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GunDetail::IsInitialized() const {
  return true;
}

void GunDetail::InternalSwap(GunDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ratio_list_.InternalSwap(&other->ratio_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GunDetail, end_time_)
      + sizeof(GunDetail::end_time_)
      - PROTOBUF_FIELD_OFFSET(GunDetail, gunspeceffect_)>(
          reinterpret_cast<char*>(&gunspeceffect_),
          reinterpret_cast<char*>(&other->gunspeceffect_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GunDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCWingsInfo::_Internal {
 public:
};

SCWingsInfo::SCWingsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  wings_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCWingsInfo)
}
SCWingsInfo::SCWingsInfo(const SCWingsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      wings_list_(from.wings_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCWingsInfo)
}

void SCWingsInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCWingsInfo_BYDLD_2eproto.base);
}

SCWingsInfo::~SCWingsInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.SCWingsInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCWingsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCWingsInfo::ArenaDtor(void* object) {
  SCWingsInfo* _this = reinterpret_cast< SCWingsInfo* >(object);
  (void)_this;
}
void SCWingsInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCWingsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCWingsInfo& SCWingsInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCWingsInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCWingsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCWingsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wings_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCWingsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.WingsInfo wings_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_wings_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCWingsInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCWingsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.WingsInfo wings_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_wings_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_wings_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCWingsInfo)
  return target;
}

size_t SCWingsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCWingsInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.WingsInfo wings_list = 1;
  total_size += 1UL * this->_internal_wings_list_size();
  for (const auto& msg : this->wings_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCWingsInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCWingsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCWingsInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCWingsInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCWingsInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCWingsInfo)
    MergeFrom(*source);
  }
}

void SCWingsInfo::MergeFrom(const SCWingsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCWingsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wings_list_.MergeFrom(from.wings_list_);
}

void SCWingsInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCWingsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCWingsInfo::CopyFrom(const SCWingsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCWingsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCWingsInfo::IsInitialized() const {
  return true;
}

void SCWingsInfo::InternalSwap(SCWingsInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  wings_list_.InternalSwap(&other->wings_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCWingsInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGunInfo::_Internal {
 public:
};

SCGunInfo::SCGunInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  gun_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCGunInfo)
}
SCGunInfo::SCGunInfo(const SCGunInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      gun_list_(from.gun_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCGunInfo)
}

void SCGunInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCGunInfo_BYDLD_2eproto.base);
}

SCGunInfo::~SCGunInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.SCGunInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGunInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCGunInfo::ArenaDtor(void* object) {
  SCGunInfo* _this = reinterpret_cast< SCGunInfo* >(object);
  (void)_this;
}
void SCGunInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGunInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGunInfo& SCGunInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGunInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCGunInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCGunInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gun_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGunInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.GunDetail gun_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gun_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGunInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCGunInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.GunDetail gun_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gun_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_gun_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCGunInfo)
  return target;
}

size_t SCGunInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCGunInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.GunDetail gun_list = 1;
  total_size += 1UL * this->_internal_gun_list_size();
  for (const auto& msg : this->gun_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGunInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCGunInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGunInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGunInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCGunInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCGunInfo)
    MergeFrom(*source);
  }
}

void SCGunInfo::MergeFrom(const SCGunInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCGunInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gun_list_.MergeFrom(from.gun_list_);
}

void SCGunInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCGunInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGunInfo::CopyFrom(const SCGunInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCGunInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGunInfo::IsInitialized() const {
  return true;
}

void SCGunInfo::InternalSwap(SCGunInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gun_list_.InternalSwap(&other->gun_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGunInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPurchaseCheck::_Internal {
 public:
};

SCPurchaseCheck::SCPurchaseCheck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCPurchaseCheck)
}
SCPurchaseCheck::SCPurchaseCheck(const SCPurchaseCheck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_purchase_ = from.is_purchase_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCPurchaseCheck)
}

void SCPurchaseCheck::SharedCtor() {
  is_purchase_ = 0;
}

SCPurchaseCheck::~SCPurchaseCheck() {
  // @@protoc_insertion_point(destructor:BYDLD.SCPurchaseCheck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPurchaseCheck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCPurchaseCheck::ArenaDtor(void* object) {
  SCPurchaseCheck* _this = reinterpret_cast< SCPurchaseCheck* >(object);
  (void)_this;
}
void SCPurchaseCheck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPurchaseCheck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPurchaseCheck& SCPurchaseCheck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPurchaseCheck_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCPurchaseCheck::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCPurchaseCheck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_purchase_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPurchaseCheck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 is_purchase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_purchase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPurchaseCheck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCPurchaseCheck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 is_purchase = 1;
  if (this->is_purchase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_is_purchase(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCPurchaseCheck)
  return target;
}

size_t SCPurchaseCheck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCPurchaseCheck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 is_purchase = 1;
  if (this->is_purchase() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_purchase());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPurchaseCheck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCPurchaseCheck)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPurchaseCheck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPurchaseCheck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCPurchaseCheck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCPurchaseCheck)
    MergeFrom(*source);
  }
}

void SCPurchaseCheck::MergeFrom(const SCPurchaseCheck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCPurchaseCheck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_purchase() != 0) {
    _internal_set_is_purchase(from._internal_is_purchase());
  }
}

void SCPurchaseCheck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCPurchaseCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPurchaseCheck::CopyFrom(const SCPurchaseCheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCPurchaseCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPurchaseCheck::IsInitialized() const {
  return true;
}

void SCPurchaseCheck::InternalSwap(SCPurchaseCheck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(is_purchase_, other->is_purchase_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPurchaseCheck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ObjectData::_Internal {
 public:
};

ObjectData::ObjectData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.ObjectData)
}
ObjectData::ObjectData(const ObjectData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.ObjectData)
}

void ObjectData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectData_BYDLD_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
}

ObjectData::~ObjectData() {
  // @@protoc_insertion_point(destructor:BYDLD.ObjectData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ObjectData::ArenaDtor(void* object) {
  ObjectData* _this = reinterpret_cast< ObjectData* >(object);
  (void)_this;
}
void ObjectData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectData& ObjectData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectData_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void ObjectData::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.ObjectData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.ObjectData.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.ObjectData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.ObjectData.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // int32 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.ObjectData)
  return target;
}

size_t ObjectData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.ObjectData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // int32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.ObjectData)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.ObjectData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.ObjectData)
    MergeFrom(*source);
  }
}

void ObjectData::MergeFrom(const ObjectData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.ObjectData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void ObjectData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.ObjectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectData::CopyFrom(const ObjectData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.ObjectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectData::IsInitialized() const {
  return true;
}

void ObjectData::InternalSwap(ObjectData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Object2::_Internal {
 public:
};

Object2::Object2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.Object2)
}
Object2::Object2(const Object2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:BYDLD.Object2)
}

void Object2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Object2_BYDLD_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Object2::~Object2() {
  // @@protoc_insertion_point(destructor:BYDLD.Object2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Object2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Object2::ArenaDtor(void* object) {
  Object2* _this = reinterpret_cast< Object2* >(object);
  (void)_this;
}
void Object2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Object2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Object2& Object2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Object2_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void Object2::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.Object2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Object2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.Object2.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.Object2.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Object2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.Object2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.Object2.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.Object2.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.Object2)
  return target;
}

size_t Object2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.Object2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.Object2)
  GOOGLE_DCHECK_NE(&from, this);
  const Object2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Object2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.Object2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.Object2)
    MergeFrom(*source);
  }
}

void Object2::MergeFrom(const Object2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.Object2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void Object2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.Object2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object2::CopyFrom(const Object2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.Object2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object2::IsInitialized() const {
  return true;
}

void Object2::InternalSwap(Object2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Object2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Object3::_Internal {
 public:
};

Object3::Object3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.Object3)
}
Object3::Object3(const Object3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&key_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.Object3)
}

void Object3::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&key_)) + sizeof(value_));
}

Object3::~Object3() {
  // @@protoc_insertion_point(destructor:BYDLD.Object3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Object3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Object3::ArenaDtor(void* object) {
  Object3* _this = reinterpret_cast< Object3* >(object);
  (void)_this;
}
void Object3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Object3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Object3& Object3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Object3_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void Object3::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.Object3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&key_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Object3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Object3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.Object3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_key(), target);
  }

  // int32 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.Object3)
  return target;
}

size_t Object3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.Object3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_key());
  }

  // int32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.Object3)
  GOOGLE_DCHECK_NE(&from, this);
  const Object3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Object3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.Object3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.Object3)
    MergeFrom(*source);
  }
}

void Object3::MergeFrom(const Object3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.Object3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key() != 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Object3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.Object3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object3::CopyFrom(const Object3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.Object3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object3::IsInitialized() const {
  return true;
}

void Object3::InternalSwap(Object3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Object3, value_)
      + sizeof(Object3::value_)
      - PROTOBUF_FIELD_OFFSET(Object3, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Object3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Object4::_Internal {
 public:
};

Object4::Object4(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.Object4)
}
Object4::Object4(const Object4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_ = from.key_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.Object4)
}

void Object4::SharedCtor() {
  key_ = 0;
}

Object4::~Object4() {
  // @@protoc_insertion_point(destructor:BYDLD.Object4)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Object4::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Object4::ArenaDtor(void* object) {
  Object4* _this = reinterpret_cast< Object4* >(object);
  (void)_this;
}
void Object4::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Object4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Object4& Object4::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Object4_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void Object4::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.Object4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  key_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Object4::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Object4::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.Object4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_key(), target);
  }

  // repeated int32 value = 2;
  {
    int byte_size = _value_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_value(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.Object4)
  return target;
}

size_t Object4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.Object4)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 value = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->value_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object4::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.Object4)
  GOOGLE_DCHECK_NE(&from, this);
  const Object4* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Object4>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.Object4)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.Object4)
    MergeFrom(*source);
  }
}

void Object4::MergeFrom(const Object4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.Object4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  if (from.key() != 0) {
    _internal_set_key(from._internal_key());
  }
}

void Object4::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.Object4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object4::CopyFrom(const Object4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.Object4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object4::IsInitialized() const {
  return true;
}

void Object4::InternalSwap(Object4* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
  swap(key_, other->key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Object4::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Decimal::_Internal {
 public:
};

Decimal::Decimal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.Decimal)
}
Decimal::Decimal(const Decimal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num_, &from.num_,
    static_cast<size_t>(reinterpret_cast<char*>(&denom_) -
    reinterpret_cast<char*>(&num_)) + sizeof(denom_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.Decimal)
}

void Decimal::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&num_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&denom_) -
      reinterpret_cast<char*>(&num_)) + sizeof(denom_));
}

Decimal::~Decimal() {
  // @@protoc_insertion_point(destructor:BYDLD.Decimal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Decimal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Decimal::ArenaDtor(void* object) {
  Decimal* _this = reinterpret_cast< Decimal* >(object);
  (void)_this;
}
void Decimal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Decimal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Decimal& Decimal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Decimal_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void Decimal::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.Decimal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&denom_) -
      reinterpret_cast<char*>(&num_)) + sizeof(denom_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Decimal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 denom = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          denom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Decimal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.Decimal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num = 1;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num(), target);
  }

  // int32 denom = 2;
  if (this->denom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_denom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.Decimal)
  return target;
}

size_t Decimal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.Decimal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 num = 1;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  // int32 denom = 2;
  if (this->denom() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_denom());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Decimal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.Decimal)
  GOOGLE_DCHECK_NE(&from, this);
  const Decimal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Decimal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.Decimal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.Decimal)
    MergeFrom(*source);
  }
}

void Decimal::MergeFrom(const Decimal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.Decimal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (from.denom() != 0) {
    _internal_set_denom(from._internal_denom());
  }
}

void Decimal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.Decimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Decimal::CopyFrom(const Decimal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.Decimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decimal::IsInitialized() const {
  return true;
}

void Decimal::InternalSwap(Decimal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Decimal, denom_)
      + sizeof(Decimal::denom_)
      - PROTOBUF_FIELD_OFFSET(Decimal, num_)>(
          reinterpret_cast<char*>(&num_),
          reinterpret_cast<char*>(&other->num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Decimal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSTridentInfo::_Internal {
 public:
};

CSTridentInfo::CSTridentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSTridentInfo)
}
CSTridentInfo::CSTridentInfo(const CSTridentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chair_idx_ = from.chair_idx_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSTridentInfo)
}

void CSTridentInfo::SharedCtor() {
  chair_idx_ = 0;
}

CSTridentInfo::~CSTridentInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.CSTridentInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSTridentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSTridentInfo::ArenaDtor(void* object) {
  CSTridentInfo* _this = reinterpret_cast< CSTridentInfo* >(object);
  (void)_this;
}
void CSTridentInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSTridentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSTridentInfo& CSTridentInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSTridentInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSTridentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSTridentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chair_idx_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSTridentInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSTridentInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSTridentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSTridentInfo)
  return target;
}

size_t CSTridentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSTridentInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSTridentInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSTridentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSTridentInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSTridentInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSTridentInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSTridentInfo)
    MergeFrom(*source);
  }
}

void CSTridentInfo::MergeFrom(const CSTridentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSTridentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
}

void CSTridentInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSTridentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTridentInfo::CopyFrom(const CSTridentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSTridentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTridentInfo::IsInitialized() const {
  return true;
}

void CSTridentInfo::InternalSwap(CSTridentInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(chair_idx_, other->chair_idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSTridentInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCTridentInfo::_Internal {
 public:
};

SCTridentInfo::SCTridentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCTridentInfo)
}
SCTridentInfo::SCTridentInfo(const SCTridentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bets_(from.bets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_full_, &from.is_full_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_point_) -
    reinterpret_cast<char*>(&is_full_)) + sizeof(cur_point_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCTridentInfo)
}

void SCTridentInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&is_full_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cur_point_) -
      reinterpret_cast<char*>(&is_full_)) + sizeof(cur_point_));
}

SCTridentInfo::~SCTridentInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.SCTridentInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCTridentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCTridentInfo::ArenaDtor(void* object) {
  SCTridentInfo* _this = reinterpret_cast< SCTridentInfo* >(object);
  (void)_this;
}
void SCTridentInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCTridentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCTridentInfo& SCTridentInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCTridentInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCTridentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCTridentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bets_.Clear();
  ::memset(&is_full_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_point_) -
      reinterpret_cast<char*>(&is_full_)) + sizeof(cur_point_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCTridentInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 bets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bets(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_bets(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_full = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_full_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cur_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cur_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCTridentInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCTridentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 bets = 1;
  {
    int byte_size = _bets_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_bets(), byte_size, target);
    }
  }

  // bool is_full = 2;
  if (this->is_full() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_full(), target);
  }

  // int32 cur_point = 3;
  if (this->cur_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cur_point(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCTridentInfo)
  return target;
}

size_t SCTridentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCTridentInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 bets = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bets_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bets_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool is_full = 2;
  if (this->is_full() != 0) {
    total_size += 1 + 1;
  }

  // int32 cur_point = 3;
  if (this->cur_point() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_point());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCTridentInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCTridentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCTridentInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCTridentInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCTridentInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCTridentInfo)
    MergeFrom(*source);
  }
}

void SCTridentInfo::MergeFrom(const SCTridentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCTridentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bets_.MergeFrom(from.bets_);
  if (from.is_full() != 0) {
    _internal_set_is_full(from._internal_is_full());
  }
  if (from.cur_point() != 0) {
    _internal_set_cur_point(from._internal_cur_point());
  }
}

void SCTridentInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCTridentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCTridentInfo::CopyFrom(const SCTridentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCTridentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCTridentInfo::IsInitialized() const {
  return true;
}

void SCTridentInfo::InternalSwap(SCTridentInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bets_.InternalSwap(&other->bets_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCTridentInfo, cur_point_)
      + sizeof(SCTridentInfo::cur_point_)
      - PROTOBUF_FIELD_OFFSET(SCTridentInfo, is_full_)>(
          reinterpret_cast<char*>(&is_full_),
          reinterpret_cast<char*>(&other->is_full_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCTridentInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSTridentBet::_Internal {
 public:
};

CSTridentBet::CSTridentBet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSTridentBet)
}
CSTridentBet::CSTridentBet(const CSTridentBet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bet_ = from.bet_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSTridentBet)
}

void CSTridentBet::SharedCtor() {
  bet_ = 0;
}

CSTridentBet::~CSTridentBet() {
  // @@protoc_insertion_point(destructor:BYDLD.CSTridentBet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSTridentBet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSTridentBet::ArenaDtor(void* object) {
  CSTridentBet* _this = reinterpret_cast< CSTridentBet* >(object);
  (void)_this;
}
void CSTridentBet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSTridentBet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSTridentBet& CSTridentBet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSTridentBet_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSTridentBet::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSTridentBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bet_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSTridentBet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 bet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSTridentBet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSTridentBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bet = 1;
  if (this->bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bet(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSTridentBet)
  return target;
}

size_t CSTridentBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSTridentBet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 bet = 1;
  if (this->bet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSTridentBet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSTridentBet)
  GOOGLE_DCHECK_NE(&from, this);
  const CSTridentBet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSTridentBet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSTridentBet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSTridentBet)
    MergeFrom(*source);
  }
}

void CSTridentBet::MergeFrom(const CSTridentBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSTridentBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bet() != 0) {
    _internal_set_bet(from._internal_bet());
  }
}

void CSTridentBet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSTridentBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTridentBet::CopyFrom(const CSTridentBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSTridentBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTridentBet::IsInitialized() const {
  return true;
}

void CSTridentBet::InternalSwap(CSTridentBet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(bet_, other->bet_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSTridentBet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCTridentBet::_Internal {
 public:
};

SCTridentBet::SCTridentBet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCTridentBet)
}
SCTridentBet::SCTridentBet(const SCTridentBet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_big_small_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(is_big_small_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCTridentBet)
}

void SCTridentBet::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_big_small_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(is_big_small_));
}

SCTridentBet::~SCTridentBet() {
  // @@protoc_insertion_point(destructor:BYDLD.SCTridentBet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCTridentBet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCTridentBet::ArenaDtor(void* object) {
  SCTridentBet* _this = reinterpret_cast< SCTridentBet* >(object);
  (void)_this;
}
void SCTridentBet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCTridentBet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCTridentBet& SCTridentBet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCTridentBet_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCTridentBet::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCTridentBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_big_small_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(is_big_small_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCTridentBet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 award = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          award_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bet = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_big_small = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_big_small_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCTridentBet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCTridentBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 award = 2;
  if (this->award() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_award(), target);
  }

  // int32 score = 3;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_score(), target);
  }

  // int32 bet = 4;
  if (this->bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_bet(), target);
  }

  // bool is_big_small = 5;
  if (this->is_big_small() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_big_small(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCTridentBet)
  return target;
}

size_t SCTridentBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCTridentBet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 award = 2;
  if (this->award() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_award());
  }

  // int32 score = 3;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int32 bet = 4;
  if (this->bet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet());
  }

  // bool is_big_small = 5;
  if (this->is_big_small() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCTridentBet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCTridentBet)
  GOOGLE_DCHECK_NE(&from, this);
  const SCTridentBet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCTridentBet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCTridentBet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCTridentBet)
    MergeFrom(*source);
  }
}

void SCTridentBet::MergeFrom(const SCTridentBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCTridentBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.award() != 0) {
    _internal_set_award(from._internal_award());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.bet() != 0) {
    _internal_set_bet(from._internal_bet());
  }
  if (from.is_big_small() != 0) {
    _internal_set_is_big_small(from._internal_is_big_small());
  }
}

void SCTridentBet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCTridentBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCTridentBet::CopyFrom(const SCTridentBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCTridentBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCTridentBet::IsInitialized() const {
  return true;
}

void SCTridentBet::InternalSwap(SCTridentBet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCTridentBet, is_big_small_)
      + sizeof(SCTridentBet::is_big_small_)
      - PROTOBUF_FIELD_OFFSET(SCTridentBet, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCTridentBet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPropsTrident::_Internal {
 public:
};

SCPropsTrident::SCPropsTrident(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCPropsTrident)
}
SCPropsTrident::SCPropsTrident(const SCPropsTrident& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&single_score_, &from.single_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_score_) -
    reinterpret_cast<char*>(&single_score_)) + sizeof(cur_score_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCPropsTrident)
}

void SCPropsTrident::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&single_score_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cur_score_) -
      reinterpret_cast<char*>(&single_score_)) + sizeof(cur_score_));
}

SCPropsTrident::~SCPropsTrident() {
  // @@protoc_insertion_point(destructor:BYDLD.SCPropsTrident)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPropsTrident::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCPropsTrident::ArenaDtor(void* object) {
  SCPropsTrident* _this = reinterpret_cast< SCPropsTrident* >(object);
  (void)_this;
}
void SCPropsTrident::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPropsTrident::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPropsTrident& SCPropsTrident::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPropsTrident_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCPropsTrident::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCPropsTrident)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&single_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_score_) -
      reinterpret_cast<char*>(&single_score_)) + sizeof(cur_score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPropsTrident::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 single_score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          single_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cur_score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cur_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool rank_enable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          rank_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPropsTrident::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCPropsTrident)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  // int32 single_score = 2;
  if (this->single_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_single_score(), target);
  }

  // int32 cur_score = 3;
  if (this->cur_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cur_score(), target);
  }

  // bool rank_enable = 4;
  if (this->rank_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_rank_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCPropsTrident)
  return target;
}

size_t SCPropsTrident::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCPropsTrident)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 single_score = 2;
  if (this->single_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_single_score());
  }

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // bool rank_enable = 4;
  if (this->rank_enable() != 0) {
    total_size += 1 + 1;
  }

  // int32 cur_score = 3;
  if (this->cur_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPropsTrident::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCPropsTrident)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPropsTrident* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPropsTrident>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCPropsTrident)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCPropsTrident)
    MergeFrom(*source);
  }
}

void SCPropsTrident::MergeFrom(const SCPropsTrident& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCPropsTrident)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.single_score() != 0) {
    _internal_set_single_score(from._internal_single_score());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  if (from.rank_enable() != 0) {
    _internal_set_rank_enable(from._internal_rank_enable());
  }
  if (from.cur_score() != 0) {
    _internal_set_cur_score(from._internal_cur_score());
  }
}

void SCPropsTrident::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCPropsTrident)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPropsTrident::CopyFrom(const SCPropsTrident& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCPropsTrident)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPropsTrident::IsInitialized() const {
  return true;
}

void SCPropsTrident::InternalSwap(SCPropsTrident* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCPropsTrident, cur_score_)
      + sizeof(SCPropsTrident::cur_score_)
      - PROTOBUF_FIELD_OFFSET(SCPropsTrident, single_score_)>(
          reinterpret_cast<char*>(&single_score_),
          reinterpret_cast<char*>(&other->single_score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPropsTrident::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSBigSmallChoose::_Internal {
 public:
};

CSBigSmallChoose::CSBigSmallChoose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSBigSmallChoose)
}
CSBigSmallChoose::CSBigSmallChoose(const CSBigSmallChoose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&enter_or_exit_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(enter_or_exit_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSBigSmallChoose)
}

void CSBigSmallChoose::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&enter_or_exit_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(enter_or_exit_));
}

CSBigSmallChoose::~CSBigSmallChoose() {
  // @@protoc_insertion_point(destructor:BYDLD.CSBigSmallChoose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSBigSmallChoose::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSBigSmallChoose::ArenaDtor(void* object) {
  CSBigSmallChoose* _this = reinterpret_cast< CSBigSmallChoose* >(object);
  (void)_this;
}
void CSBigSmallChoose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSBigSmallChoose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSBigSmallChoose& CSBigSmallChoose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSBigSmallChoose_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSBigSmallChoose::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSBigSmallChoose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enter_or_exit_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(enter_or_exit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSBigSmallChoose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 enter_or_exit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enter_or_exit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSBigSmallChoose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSBigSmallChoose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 enter_or_exit = 2;
  if (this->enter_or_exit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_enter_or_exit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSBigSmallChoose)
  return target;
}

size_t CSBigSmallChoose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSBigSmallChoose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 enter_or_exit = 2;
  if (this->enter_or_exit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_enter_or_exit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSBigSmallChoose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSBigSmallChoose)
  GOOGLE_DCHECK_NE(&from, this);
  const CSBigSmallChoose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSBigSmallChoose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSBigSmallChoose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSBigSmallChoose)
    MergeFrom(*source);
  }
}

void CSBigSmallChoose::MergeFrom(const CSBigSmallChoose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSBigSmallChoose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.enter_or_exit() != 0) {
    _internal_set_enter_or_exit(from._internal_enter_or_exit());
  }
}

void CSBigSmallChoose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSBigSmallChoose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBigSmallChoose::CopyFrom(const CSBigSmallChoose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSBigSmallChoose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBigSmallChoose::IsInitialized() const {
  return true;
}

void CSBigSmallChoose::InternalSwap(CSBigSmallChoose* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSBigSmallChoose, enter_or_exit_)
      + sizeof(CSBigSmallChoose::enter_or_exit_)
      - PROTOBUF_FIELD_OFFSET(CSBigSmallChoose, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSBigSmallChoose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCBigSmallChoose::_Internal {
 public:
};

SCBigSmallChoose::SCBigSmallChoose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCBigSmallChoose)
}
SCBigSmallChoose::SCBigSmallChoose(const SCBigSmallChoose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCBigSmallChoose)
}

void SCBigSmallChoose::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(score_));
}

SCBigSmallChoose::~SCBigSmallChoose() {
  // @@protoc_insertion_point(destructor:BYDLD.SCBigSmallChoose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCBigSmallChoose::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCBigSmallChoose::ArenaDtor(void* object) {
  SCBigSmallChoose* _this = reinterpret_cast< SCBigSmallChoose* >(object);
  (void)_this;
}
void SCBigSmallChoose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCBigSmallChoose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCBigSmallChoose& SCBigSmallChoose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCBigSmallChoose_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCBigSmallChoose::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCBigSmallChoose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCBigSmallChoose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 enter_exit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enter_exit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 award = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          award_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCBigSmallChoose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCBigSmallChoose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 enter_exit = 2;
  if (this->enter_exit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_enter_exit(), target);
  }

  // int32 award = 3;
  if (this->award() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_award(), target);
  }

  // int32 score = 4;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCBigSmallChoose)
  return target;
}

size_t SCBigSmallChoose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCBigSmallChoose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 enter_exit = 2;
  if (this->enter_exit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_enter_exit());
  }

  // int32 award = 3;
  if (this->award() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_award());
  }

  // int32 score = 4;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCBigSmallChoose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCBigSmallChoose)
  GOOGLE_DCHECK_NE(&from, this);
  const SCBigSmallChoose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCBigSmallChoose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCBigSmallChoose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCBigSmallChoose)
    MergeFrom(*source);
  }
}

void SCBigSmallChoose::MergeFrom(const SCBigSmallChoose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCBigSmallChoose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.enter_exit() != 0) {
    _internal_set_enter_exit(from._internal_enter_exit());
  }
  if (from.award() != 0) {
    _internal_set_award(from._internal_award());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
}

void SCBigSmallChoose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCBigSmallChoose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCBigSmallChoose::CopyFrom(const SCBigSmallChoose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCBigSmallChoose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCBigSmallChoose::IsInitialized() const {
  return true;
}

void SCBigSmallChoose::InternalSwap(SCBigSmallChoose* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCBigSmallChoose, score_)
      + sizeof(SCBigSmallChoose::score_)
      - PROTOBUF_FIELD_OFFSET(SCBigSmallChoose, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCBigSmallChoose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSBigSmallBet::_Internal {
 public:
};

CSBigSmallBet::CSBigSmallBet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSBigSmallBet)
}
CSBigSmallBet::CSBigSmallBet(const CSBigSmallBet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_bet_big_, &from.is_bet_big_,
    static_cast<size_t>(reinterpret_cast<char*>(&times_) -
    reinterpret_cast<char*>(&is_bet_big_)) + sizeof(times_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSBigSmallBet)
}

void CSBigSmallBet::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&is_bet_big_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&times_) -
      reinterpret_cast<char*>(&is_bet_big_)) + sizeof(times_));
}

CSBigSmallBet::~CSBigSmallBet() {
  // @@protoc_insertion_point(destructor:BYDLD.CSBigSmallBet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSBigSmallBet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSBigSmallBet::ArenaDtor(void* object) {
  CSBigSmallBet* _this = reinterpret_cast< CSBigSmallBet* >(object);
  (void)_this;
}
void CSBigSmallBet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSBigSmallBet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSBigSmallBet& CSBigSmallBet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSBigSmallBet_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSBigSmallBet::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSBigSmallBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_bet_big_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&times_) -
      reinterpret_cast<char*>(&is_bet_big_)) + sizeof(times_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSBigSmallBet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_bet_big = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_bet_big_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSBigSmallBet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSBigSmallBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_bet_big = 1;
  if (this->is_bet_big() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_bet_big(), target);
  }

  // int32 times = 2;
  if (this->times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_times(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSBigSmallBet)
  return target;
}

size_t CSBigSmallBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSBigSmallBet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_bet_big = 1;
  if (this->is_bet_big() != 0) {
    total_size += 1 + 1;
  }

  // int32 times = 2;
  if (this->times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_times());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSBigSmallBet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSBigSmallBet)
  GOOGLE_DCHECK_NE(&from, this);
  const CSBigSmallBet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSBigSmallBet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSBigSmallBet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSBigSmallBet)
    MergeFrom(*source);
  }
}

void CSBigSmallBet::MergeFrom(const CSBigSmallBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSBigSmallBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_bet_big() != 0) {
    _internal_set_is_bet_big(from._internal_is_bet_big());
  }
  if (from.times() != 0) {
    _internal_set_times(from._internal_times());
  }
}

void CSBigSmallBet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSBigSmallBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBigSmallBet::CopyFrom(const CSBigSmallBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSBigSmallBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBigSmallBet::IsInitialized() const {
  return true;
}

void CSBigSmallBet::InternalSwap(CSBigSmallBet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSBigSmallBet, times_)
      + sizeof(CSBigSmallBet::times_)
      - PROTOBUF_FIELD_OFFSET(CSBigSmallBet, is_bet_big_)>(
          reinterpret_cast<char*>(&is_bet_big_),
          reinterpret_cast<char*>(&other->is_bet_big_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSBigSmallBet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCBigSmallBet::_Internal {
 public:
};

SCBigSmallBet::SCBigSmallBet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCBigSmallBet)
}
SCBigSmallBet::SCBigSmallBet(const SCBigSmallBet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dices_(from.dices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCBigSmallBet)
}

void SCBigSmallBet::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(score_));
}

SCBigSmallBet::~SCBigSmallBet() {
  // @@protoc_insertion_point(destructor:BYDLD.SCBigSmallBet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCBigSmallBet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCBigSmallBet::ArenaDtor(void* object) {
  SCBigSmallBet* _this = reinterpret_cast< SCBigSmallBet* >(object);
  (void)_this;
}
void SCBigSmallBet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCBigSmallBet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCBigSmallBet& SCBigSmallBet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCBigSmallBet_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCBigSmallBet::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCBigSmallBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dices_.Clear();
  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCBigSmallBet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 dices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_dices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_dices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_bet_big = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_bet_big_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 award = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          award_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_end = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCBigSmallBet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCBigSmallBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // repeated int32 dices = 2;
  {
    int byte_size = _dices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_dices(), byte_size, target);
    }
  }

  // bool is_bet_big = 3;
  if (this->is_bet_big() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_bet_big(), target);
  }

  // int32 award = 4;
  if (this->award() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_award(), target);
  }

  // int32 score = 5;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_score(), target);
  }

  // bool is_end = 6;
  if (this->is_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCBigSmallBet)
  return target;
}

size_t SCBigSmallBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCBigSmallBet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 dices = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->dices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 award = 4;
  if (this->award() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_award());
  }

  // bool is_bet_big = 3;
  if (this->is_bet_big() != 0) {
    total_size += 1 + 1;
  }

  // bool is_end = 6;
  if (this->is_end() != 0) {
    total_size += 1 + 1;
  }

  // int32 score = 5;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCBigSmallBet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCBigSmallBet)
  GOOGLE_DCHECK_NE(&from, this);
  const SCBigSmallBet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCBigSmallBet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCBigSmallBet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCBigSmallBet)
    MergeFrom(*source);
  }
}

void SCBigSmallBet::MergeFrom(const SCBigSmallBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCBigSmallBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dices_.MergeFrom(from.dices_);
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.award() != 0) {
    _internal_set_award(from._internal_award());
  }
  if (from.is_bet_big() != 0) {
    _internal_set_is_bet_big(from._internal_is_bet_big());
  }
  if (from.is_end() != 0) {
    _internal_set_is_end(from._internal_is_end());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
}

void SCBigSmallBet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCBigSmallBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCBigSmallBet::CopyFrom(const SCBigSmallBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCBigSmallBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCBigSmallBet::IsInitialized() const {
  return true;
}

void SCBigSmallBet::InternalSwap(SCBigSmallBet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dices_.InternalSwap(&other->dices_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCBigSmallBet, score_)
      + sizeof(SCBigSmallBet::score_)
      - PROTOBUF_FIELD_OFFSET(SCBigSmallBet, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCBigSmallBet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSShootTorpedo::_Internal {
 public:
};

CSShootTorpedo::CSShootTorpedo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSShootTorpedo)
}
CSShootTorpedo::CSShootTorpedo(const CSShootTorpedo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  torpedo_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_torpedo_id().empty()) {
    torpedo_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_torpedo_id(), 
      GetArena());
  }
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&shoot_all_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(shoot_all_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSShootTorpedo)
}

void CSShootTorpedo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSShootTorpedo_BYDLD_2eproto.base);
  torpedo_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&shoot_all_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(shoot_all_));
}

CSShootTorpedo::~CSShootTorpedo() {
  // @@protoc_insertion_point(destructor:BYDLD.CSShootTorpedo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSShootTorpedo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  torpedo_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSShootTorpedo::ArenaDtor(void* object) {
  CSShootTorpedo* _this = reinterpret_cast< CSShootTorpedo* >(object);
  (void)_this;
}
void CSShootTorpedo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSShootTorpedo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSShootTorpedo& CSShootTorpedo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSShootTorpedo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSShootTorpedo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSShootTorpedo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  torpedo_id_.ClearToEmpty();
  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shoot_all_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(shoot_all_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSShootTorpedo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string torpedo_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_torpedo_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.CSShootTorpedo.torpedo_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shoot_all = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          shoot_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSShootTorpedo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSShootTorpedo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // string torpedo_id = 2;
  if (this->torpedo_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_torpedo_id().data(), static_cast<int>(this->_internal_torpedo_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.CSShootTorpedo.torpedo_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_torpedo_id(), target);
  }

  // bool shoot_all = 3;
  if (this->shoot_all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_shoot_all(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSShootTorpedo)
  return target;
}

size_t CSShootTorpedo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSShootTorpedo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string torpedo_id = 2;
  if (this->torpedo_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_torpedo_id());
  }

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // bool shoot_all = 3;
  if (this->shoot_all() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSShootTorpedo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSShootTorpedo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSShootTorpedo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSShootTorpedo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSShootTorpedo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSShootTorpedo)
    MergeFrom(*source);
  }
}

void CSShootTorpedo::MergeFrom(const CSShootTorpedo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSShootTorpedo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.torpedo_id().size() > 0) {
    _internal_set_torpedo_id(from._internal_torpedo_id());
  }
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.shoot_all() != 0) {
    _internal_set_shoot_all(from._internal_shoot_all());
  }
}

void CSShootTorpedo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSShootTorpedo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSShootTorpedo::CopyFrom(const CSShootTorpedo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSShootTorpedo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSShootTorpedo::IsInitialized() const {
  return true;
}

void CSShootTorpedo::InternalSwap(CSShootTorpedo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  torpedo_id_.Swap(&other->torpedo_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSShootTorpedo, shoot_all_)
      + sizeof(CSShootTorpedo::shoot_all_)
      - PROTOBUF_FIELD_OFFSET(CSShootTorpedo, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSShootTorpedo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCShootTorpedo::_Internal {
 public:
};

SCShootTorpedo::SCShootTorpedo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  objects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCShootTorpedo)
}
SCShootTorpedo::SCShootTorpedo(const SCShootTorpedo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      objects_(from.objects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  torpedo_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_torpedo_id().empty()) {
    torpedo_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_torpedo_id(), 
      GetArena());
  }
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCShootTorpedo)
}

void SCShootTorpedo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCShootTorpedo_BYDLD_2eproto.base);
  torpedo_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(score_));
}

SCShootTorpedo::~SCShootTorpedo() {
  // @@protoc_insertion_point(destructor:BYDLD.SCShootTorpedo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCShootTorpedo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  torpedo_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SCShootTorpedo::ArenaDtor(void* object) {
  SCShootTorpedo* _this = reinterpret_cast< SCShootTorpedo* >(object);
  (void)_this;
}
void SCShootTorpedo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCShootTorpedo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCShootTorpedo& SCShootTorpedo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCShootTorpedo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCShootTorpedo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCShootTorpedo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  torpedo_id_.ClearToEmpty();
  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCShootTorpedo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string torpedo_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_torpedo_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.SCShootTorpedo.torpedo_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 award = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          award_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.ObjectData objects = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCShootTorpedo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCShootTorpedo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // string torpedo_id = 2;
  if (this->torpedo_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_torpedo_id().data(), static_cast<int>(this->_internal_torpedo_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.SCShootTorpedo.torpedo_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_torpedo_id(), target);
  }

  // int32 award = 3;
  if (this->award() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_award(), target);
  }

  // int64 score = 4;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_score(), target);
  }

  // repeated .BYDLD.ObjectData objects = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_objects(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCShootTorpedo)
  return target;
}

size_t SCShootTorpedo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCShootTorpedo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.ObjectData objects = 5;
  total_size += 1UL * this->_internal_objects_size();
  for (const auto& msg : this->objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string torpedo_id = 2;
  if (this->torpedo_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_torpedo_id());
  }

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 award = 3;
  if (this->award() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_award());
  }

  // int64 score = 4;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCShootTorpedo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCShootTorpedo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCShootTorpedo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCShootTorpedo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCShootTorpedo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCShootTorpedo)
    MergeFrom(*source);
  }
}

void SCShootTorpedo::MergeFrom(const SCShootTorpedo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCShootTorpedo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
  if (from.torpedo_id().size() > 0) {
    _internal_set_torpedo_id(from._internal_torpedo_id());
  }
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.award() != 0) {
    _internal_set_award(from._internal_award());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
}

void SCShootTorpedo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCShootTorpedo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCShootTorpedo::CopyFrom(const SCShootTorpedo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCShootTorpedo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCShootTorpedo::IsInitialized() const {
  return true;
}

void SCShootTorpedo::InternalSwap(SCShootTorpedo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  objects_.InternalSwap(&other->objects_);
  torpedo_id_.Swap(&other->torpedo_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCShootTorpedo, score_)
      + sizeof(SCShootTorpedo::score_)
      - PROTOBUF_FIELD_OFFSET(SCShootTorpedo, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCShootTorpedo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPropsTorpedo::_Internal {
 public:
};

SCPropsTorpedo::SCPropsTorpedo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  objects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCPropsTorpedo)
}
SCPropsTorpedo::SCPropsTorpedo(const SCPropsTorpedo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      objects_(from.objects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enable_ = from.enable_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCPropsTorpedo)
}

void SCPropsTorpedo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCPropsTorpedo_BYDLD_2eproto.base);
  enable_ = false;
}

SCPropsTorpedo::~SCPropsTorpedo() {
  // @@protoc_insertion_point(destructor:BYDLD.SCPropsTorpedo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPropsTorpedo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCPropsTorpedo::ArenaDtor(void* object) {
  SCPropsTorpedo* _this = reinterpret_cast< SCPropsTorpedo* >(object);
  (void)_this;
}
void SCPropsTorpedo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPropsTorpedo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPropsTorpedo& SCPropsTorpedo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPropsTorpedo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCPropsTorpedo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCPropsTorpedo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  enable_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPropsTorpedo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.ObjectData objects = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPropsTorpedo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCPropsTorpedo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  // repeated .BYDLD.ObjectData objects = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_objects(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCPropsTorpedo)
  return target;
}

size_t SCPropsTorpedo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCPropsTorpedo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.ObjectData objects = 2;
  total_size += 1UL * this->_internal_objects_size();
  for (const auto& msg : this->objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPropsTorpedo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCPropsTorpedo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPropsTorpedo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPropsTorpedo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCPropsTorpedo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCPropsTorpedo)
    MergeFrom(*source);
  }
}

void SCPropsTorpedo::MergeFrom(const SCPropsTorpedo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCPropsTorpedo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
}

void SCPropsTorpedo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCPropsTorpedo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPropsTorpedo::CopyFrom(const SCPropsTorpedo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCPropsTorpedo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPropsTorpedo::IsInitialized() const {
  return true;
}

void SCPropsTorpedo::InternalSwap(SCPropsTorpedo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  objects_.InternalSwap(&other->objects_);
  swap(enable_, other->enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPropsTorpedo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AwardPoolData::_Internal {
 public:
};

AwardPoolData::AwardPoolData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.AwardPoolData)
}
AwardPoolData::AwardPoolData(const AwardPoolData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.AwardPoolData)
}

void AwardPoolData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AwardPoolData_BYDLD_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
}

AwardPoolData::~AwardPoolData() {
  // @@protoc_insertion_point(destructor:BYDLD.AwardPoolData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AwardPoolData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AwardPoolData::ArenaDtor(void* object) {
  AwardPoolData* _this = reinterpret_cast< AwardPoolData* >(object);
  (void)_this;
}
void AwardPoolData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AwardPoolData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AwardPoolData& AwardPoolData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AwardPoolData_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void AwardPoolData::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.AwardPoolData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AwardPoolData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.AwardPoolData.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AwardPoolData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.AwardPoolData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.AwardPoolData.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // int32 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.AwardPoolData)
  return target;
}

size_t AwardPoolData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.AwardPoolData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // int32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AwardPoolData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.AwardPoolData)
  GOOGLE_DCHECK_NE(&from, this);
  const AwardPoolData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AwardPoolData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.AwardPoolData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.AwardPoolData)
    MergeFrom(*source);
  }
}

void AwardPoolData::MergeFrom(const AwardPoolData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.AwardPoolData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void AwardPoolData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.AwardPoolData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AwardPoolData::CopyFrom(const AwardPoolData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.AwardPoolData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AwardPoolData::IsInitialized() const {
  return true;
}

void AwardPoolData::InternalSwap(AwardPoolData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AwardPoolData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPropsAwardPool::_Internal {
 public:
};

SCPropsAwardPool::SCPropsAwardPool(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  objects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCPropsAwardPool)
}
SCPropsAwardPool::SCPropsAwardPool(const SCPropsAwardPool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      objects_(from.objects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enable_ = from.enable_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCPropsAwardPool)
}

void SCPropsAwardPool::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCPropsAwardPool_BYDLD_2eproto.base);
  enable_ = false;
}

SCPropsAwardPool::~SCPropsAwardPool() {
  // @@protoc_insertion_point(destructor:BYDLD.SCPropsAwardPool)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPropsAwardPool::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCPropsAwardPool::ArenaDtor(void* object) {
  SCPropsAwardPool* _this = reinterpret_cast< SCPropsAwardPool* >(object);
  (void)_this;
}
void SCPropsAwardPool::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPropsAwardPool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPropsAwardPool& SCPropsAwardPool::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPropsAwardPool_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCPropsAwardPool::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCPropsAwardPool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  enable_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPropsAwardPool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.AwardPoolData objects = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPropsAwardPool::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCPropsAwardPool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  // repeated .BYDLD.AwardPoolData objects = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_objects(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCPropsAwardPool)
  return target;
}

size_t SCPropsAwardPool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCPropsAwardPool)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.AwardPoolData objects = 2;
  total_size += 1UL * this->_internal_objects_size();
  for (const auto& msg : this->objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPropsAwardPool::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCPropsAwardPool)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPropsAwardPool* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPropsAwardPool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCPropsAwardPool)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCPropsAwardPool)
    MergeFrom(*source);
  }
}

void SCPropsAwardPool::MergeFrom(const SCPropsAwardPool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCPropsAwardPool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
}

void SCPropsAwardPool::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCPropsAwardPool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPropsAwardPool::CopyFrom(const SCPropsAwardPool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCPropsAwardPool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPropsAwardPool::IsInitialized() const {
  return true;
}

void SCPropsAwardPool::InternalSwap(SCPropsAwardPool* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  objects_.InternalSwap(&other->objects_);
  swap(enable_, other->enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPropsAwardPool::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSLoginGameWithToken::_Internal {
 public:
};

CSLoginGameWithToken::CSLoginGameWithToken(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSLoginGameWithToken)
}
CSLoginGameWithToken::CSLoginGameWithToken(const CSLoginGameWithToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_table_id_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(last_table_id_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSLoginGameWithToken)
}

void CSLoginGameWithToken::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSLoginGameWithToken_BYDLD_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&last_table_id_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(last_table_id_));
}

CSLoginGameWithToken::~CSLoginGameWithToken() {
  // @@protoc_insertion_point(destructor:BYDLD.CSLoginGameWithToken)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSLoginGameWithToken::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSLoginGameWithToken::ArenaDtor(void* object) {
  CSLoginGameWithToken* _this = reinterpret_cast< CSLoginGameWithToken* >(object);
  (void)_this;
}
void CSLoginGameWithToken::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSLoginGameWithToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSLoginGameWithToken& CSLoginGameWithToken::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSLoginGameWithToken_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSLoginGameWithToken::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSLoginGameWithToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty();
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_table_id_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(last_table_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSLoginGameWithToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.CSLoginGameWithToken.Token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 OSType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ostype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 table_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          table_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 last_table_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          last_table_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSLoginGameWithToken::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSLoginGameWithToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // string Token = 2;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.CSLoginGameWithToken.Token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  // int32 OSType = 3;
  if (this->ostype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ostype(), target);
  }

  // int32 table_id = 4;
  if (this->table_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_table_id(), target);
  }

  // int32 last_table_id = 5;
  if (this->last_table_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_last_table_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSLoginGameWithToken)
  return target;
}

size_t CSLoginGameWithToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSLoginGameWithToken)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  // int32 OSType = 3;
  if (this->ostype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ostype());
  }

  // int32 table_id = 4;
  if (this->table_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_table_id());
  }

  // int32 last_table_id = 5;
  if (this->last_table_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_last_table_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSLoginGameWithToken::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSLoginGameWithToken)
  GOOGLE_DCHECK_NE(&from, this);
  const CSLoginGameWithToken* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSLoginGameWithToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSLoginGameWithToken)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSLoginGameWithToken)
    MergeFrom(*source);
  }
}

void CSLoginGameWithToken::MergeFrom(const CSLoginGameWithToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSLoginGameWithToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.ostype() != 0) {
    _internal_set_ostype(from._internal_ostype());
  }
  if (from.table_id() != 0) {
    _internal_set_table_id(from._internal_table_id());
  }
  if (from.last_table_id() != 0) {
    _internal_set_last_table_id(from._internal_last_table_id());
  }
}

void CSLoginGameWithToken::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSLoginGameWithToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLoginGameWithToken::CopyFrom(const CSLoginGameWithToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSLoginGameWithToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLoginGameWithToken::IsInitialized() const {
  return true;
}

void CSLoginGameWithToken::InternalSwap(CSLoginGameWithToken* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSLoginGameWithToken, last_table_id_)
      + sizeof(CSLoginGameWithToken::last_table_id_)
      - PROTOBUF_FIELD_OFFSET(CSLoginGameWithToken, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSLoginGameWithToken::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCLoginGameWithToken::_Internal {
 public:
};

SCLoginGameWithToken::SCLoginGameWithToken(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCLoginGameWithToken)
}
SCLoginGameWithToken::SCLoginGameWithToken(const SCLoginGameWithToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&scene_index_, &from.scene_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&table_id_) -
    reinterpret_cast<char*>(&scene_index_)) + sizeof(table_id_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCLoginGameWithToken)
}

void SCLoginGameWithToken::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&scene_index_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&table_id_) -
      reinterpret_cast<char*>(&scene_index_)) + sizeof(table_id_));
}

SCLoginGameWithToken::~SCLoginGameWithToken() {
  // @@protoc_insertion_point(destructor:BYDLD.SCLoginGameWithToken)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCLoginGameWithToken::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCLoginGameWithToken::ArenaDtor(void* object) {
  SCLoginGameWithToken* _this = reinterpret_cast< SCLoginGameWithToken* >(object);
  (void)_this;
}
void SCLoginGameWithToken::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCLoginGameWithToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCLoginGameWithToken& SCLoginGameWithToken::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCLoginGameWithToken_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCLoginGameWithToken::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCLoginGameWithToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&scene_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_id_) -
      reinterpret_cast<char*>(&scene_index_)) + sizeof(table_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCLoginGameWithToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 scene_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          scene_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 table_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          table_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCLoginGameWithToken::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCLoginGameWithToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 scene_index = 1;
  if (this->scene_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_scene_index(), target);
  }

  // int32 table_id = 2;
  if (this->table_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_table_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCLoginGameWithToken)
  return target;
}

size_t SCLoginGameWithToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCLoginGameWithToken)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 scene_index = 1;
  if (this->scene_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scene_index());
  }

  // int32 table_id = 2;
  if (this->table_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_table_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCLoginGameWithToken::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCLoginGameWithToken)
  GOOGLE_DCHECK_NE(&from, this);
  const SCLoginGameWithToken* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCLoginGameWithToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCLoginGameWithToken)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCLoginGameWithToken)
    MergeFrom(*source);
  }
}

void SCLoginGameWithToken::MergeFrom(const SCLoginGameWithToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCLoginGameWithToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scene_index() != 0) {
    _internal_set_scene_index(from._internal_scene_index());
  }
  if (from.table_id() != 0) {
    _internal_set_table_id(from._internal_table_id());
  }
}

void SCLoginGameWithToken::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCLoginGameWithToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCLoginGameWithToken::CopyFrom(const SCLoginGameWithToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCLoginGameWithToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCLoginGameWithToken::IsInitialized() const {
  return true;
}

void SCLoginGameWithToken::InternalSwap(SCLoginGameWithToken* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCLoginGameWithToken, table_id_)
      + sizeof(SCLoginGameWithToken::table_id_)
      - PROTOBUF_FIELD_OFFSET(SCLoginGameWithToken, scene_index_)>(
          reinterpret_cast<char*>(&scene_index_),
          reinterpret_cast<char*>(&other->scene_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCLoginGameWithToken::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSUserReady::_Internal {
 public:
};

CSUserReady::CSUserReady(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSUserReady)
}
CSUserReady::CSUserReady(const CSUserReady& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSUserReady)
}

void CSUserReady::SharedCtor() {
  playerid_ = 0;
}

CSUserReady::~CSUserReady() {
  // @@protoc_insertion_point(destructor:BYDLD.CSUserReady)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSUserReady::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSUserReady::ArenaDtor(void* object) {
  CSUserReady* _this = reinterpret_cast< CSUserReady* >(object);
  (void)_this;
}
void CSUserReady::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSUserReady::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSUserReady& CSUserReady::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSUserReady_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSUserReady::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSUserReady)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSUserReady::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSUserReady::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSUserReady)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSUserReady)
  return target;
}

size_t CSUserReady::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSUserReady)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSUserReady::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSUserReady)
  GOOGLE_DCHECK_NE(&from, this);
  const CSUserReady* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSUserReady>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSUserReady)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSUserReady)
    MergeFrom(*source);
  }
}

void CSUserReady::MergeFrom(const CSUserReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSUserReady)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
}

void CSUserReady::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSUserReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUserReady::CopyFrom(const CSUserReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSUserReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUserReady::IsInitialized() const {
  return true;
}

void CSUserReady::InternalSwap(CSUserReady* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(playerid_, other->playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSUserReady::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EffectInfo::_Internal {
 public:
};

EffectInfo::EffectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.EffectInfo)
}
EffectInfo::EffectInfo(const EffectInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&effect_id_, &from.effect_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_global_) -
    reinterpret_cast<char*>(&effect_id_)) + sizeof(is_global_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.EffectInfo)
}

void EffectInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&effect_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_global_) -
      reinterpret_cast<char*>(&effect_id_)) + sizeof(is_global_));
}

EffectInfo::~EffectInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.EffectInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EffectInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EffectInfo::ArenaDtor(void* object) {
  EffectInfo* _this = reinterpret_cast< EffectInfo* >(object);
  (void)_this;
}
void EffectInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EffectInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EffectInfo& EffectInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EffectInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void EffectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.EffectInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&effect_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_global_) -
      reinterpret_cast<char*>(&effect_id_)) + sizeof(is_global_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EffectInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 effect_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          effect_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_global = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_global_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EffectInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.EffectInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 effect_id = 1;
  if (this->effect_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_effect_id(), target);
  }

  // bool is_global = 2;
  if (this->is_global() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_global(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.EffectInfo)
  return target;
}

size_t EffectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.EffectInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 effect_id = 1;
  if (this->effect_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_effect_id());
  }

  // bool is_global = 2;
  if (this->is_global() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EffectInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.EffectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EffectInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EffectInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.EffectInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.EffectInfo)
    MergeFrom(*source);
  }
}

void EffectInfo::MergeFrom(const EffectInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.EffectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.effect_id() != 0) {
    _internal_set_effect_id(from._internal_effect_id());
  }
  if (from.is_global() != 0) {
    _internal_set_is_global(from._internal_is_global());
  }
}

void EffectInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.EffectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EffectInfo::CopyFrom(const EffectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.EffectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectInfo::IsInitialized() const {
  return true;
}

void EffectInfo::InternalSwap(EffectInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EffectInfo, is_global_)
      + sizeof(EffectInfo::is_global_)
      - PROTOBUF_FIELD_OFFSET(EffectInfo, effect_id_)>(
          reinterpret_cast<char*>(&effect_id_),
          reinterpret_cast<char*>(&other->effect_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EffectInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SpecEffect::_Internal {
 public:
};

SpecEffect::SpecEffect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SpecEffect)
}
SpecEffect::SpecEffect(const SpecEffect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&costmoney_, &from.costmoney_,
    static_cast<size_t>(reinterpret_cast<char*>(&earnmoney_) -
    reinterpret_cast<char*>(&costmoney_)) + sizeof(earnmoney_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SpecEffect)
}

void SpecEffect::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&costmoney_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&earnmoney_) -
      reinterpret_cast<char*>(&costmoney_)) + sizeof(earnmoney_));
}

SpecEffect::~SpecEffect() {
  // @@protoc_insertion_point(destructor:BYDLD.SpecEffect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpecEffect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpecEffect::ArenaDtor(void* object) {
  SpecEffect* _this = reinterpret_cast< SpecEffect* >(object);
  (void)_this;
}
void SpecEffect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecEffect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpecEffect& SpecEffect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpecEffect_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SpecEffect::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SpecEffect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&costmoney_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&earnmoney_) -
      reinterpret_cast<char*>(&costmoney_)) + sizeof(earnmoney_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecEffect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 costMoney = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          costmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 earnMoney = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          earnmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecEffect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SpecEffect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 costMoney = 1;
  if (this->costmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_costmoney(), target);
  }

  // int32 earnMoney = 2;
  if (this->earnmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_earnmoney(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SpecEffect)
  return target;
}

size_t SpecEffect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SpecEffect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 costMoney = 1;
  if (this->costmoney() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_costmoney());
  }

  // int32 earnMoney = 2;
  if (this->earnmoney() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_earnmoney());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecEffect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SpecEffect)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecEffect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecEffect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SpecEffect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SpecEffect)
    MergeFrom(*source);
  }
}

void SpecEffect::MergeFrom(const SpecEffect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SpecEffect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.costmoney() != 0) {
    _internal_set_costmoney(from._internal_costmoney());
  }
  if (from.earnmoney() != 0) {
    _internal_set_earnmoney(from._internal_earnmoney());
  }
}

void SpecEffect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SpecEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecEffect::CopyFrom(const SpecEffect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SpecEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecEffect::IsInitialized() const {
  return true;
}

void SpecEffect::InternalSwap(SpecEffect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpecEffect, earnmoney_)
      + sizeof(SpecEffect::earnmoney_)
      - PROTOBUF_FIELD_OFFSET(SpecEffect, costmoney_)>(
          reinterpret_cast<char*>(&costmoney_),
          reinterpret_cast<char*>(&other->costmoney_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecEffect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StationBase::_Internal {
 public:
  static const ::BYDLD::Decimal& red_packet_ticket(const StationBase* msg);
  static const ::BYDLD::EffectInfo& effect_info(const StationBase* msg);
};

const ::BYDLD::Decimal&
StationBase::_Internal::red_packet_ticket(const StationBase* msg) {
  return *msg->red_packet_ticket_;
}
const ::BYDLD::EffectInfo&
StationBase::_Internal::effect_info(const StationBase* msg) {
  return *msg->effect_info_;
}
StationBase::StationBase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.StationBase)
}
StationBase::StationBase(const StationBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_player_name().empty()) {
    player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_player_name(), 
      GetArena());
  }
  if (from._internal_has_red_packet_ticket()) {
    red_packet_ticket_ = new ::BYDLD::Decimal(*from.red_packet_ticket_);
  } else {
    red_packet_ticket_ = nullptr;
  }
  if (from._internal_has_effect_info()) {
    effect_info_ = new ::BYDLD::EffectInfo(*from.effect_info_);
  } else {
    effect_info_ = nullptr;
  }
  ::memcpy(&gun_ratio_, &from.gun_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&wings_props_id_) -
    reinterpret_cast<char*>(&gun_ratio_)) + sizeof(wings_props_id_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.StationBase)
}

void StationBase::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StationBase_BYDLD_2eproto.base);
  player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&red_packet_ticket_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&wings_props_id_) -
      reinterpret_cast<char*>(&red_packet_ticket_)) + sizeof(wings_props_id_));
}

StationBase::~StationBase() {
  // @@protoc_insertion_point(destructor:BYDLD.StationBase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StationBase::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  player_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete red_packet_ticket_;
  if (this != internal_default_instance()) delete effect_info_;
}

void StationBase::ArenaDtor(void* object) {
  StationBase* _this = reinterpret_cast< StationBase* >(object);
  (void)_this;
}
void StationBase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StationBase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StationBase& StationBase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StationBase_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void StationBase::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.StationBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_name_.ClearToEmpty();
  if (GetArena() == nullptr && red_packet_ticket_ != nullptr) {
    delete red_packet_ticket_;
  }
  red_packet_ticket_ = nullptr;
  if (GetArena() == nullptr && effect_info_ != nullptr) {
    delete effect_info_;
  }
  effect_info_ = nullptr;
  ::memset(&gun_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wings_props_id_) -
      reinterpret_cast<char*>(&gun_ratio_)) + sizeof(wings_props_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StationBase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gun_ratio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gun_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gun_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gun_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_online = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 user_score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          user_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair_idx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string player_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_player_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.StationBase.player_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool through_flag = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          through_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool double_flag = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          double_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 player_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vip = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ticket = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 effect_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          effect_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 title_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          title_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BYDLD.Decimal red_packet_ticket = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_red_packet_ticket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BYDLD.EffectInfo effect_info = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_effect_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 wings_props_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          wings_props_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StationBase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.StationBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gun_ratio = 1;
  if (this->gun_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gun_ratio(), target);
  }

  // int32 gun_level = 2;
  if (this->gun_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gun_level(), target);
  }

  // bool is_online = 3;
  if (this->is_online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_online(), target);
  }

  // int64 user_score = 4;
  if (this->user_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_user_score(), target);
  }

  // int32 chair_idx = 5;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_chair_idx(), target);
  }

  // string player_name = 6;
  if (this->player_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.StationBase.player_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_player_name(), target);
  }

  // bool through_flag = 7;
  if (this->through_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_through_flag(), target);
  }

  // bool double_flag = 8;
  if (this->double_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_double_flag(), target);
  }

  // int32 player_id = 9;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_player_id(), target);
  }

  // int32 vip = 10;
  if (this->vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_vip(), target);
  }

  // int32 ticket = 11;
  if (this->ticket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_ticket(), target);
  }

  // int32 effect_id = 12;
  if (this->effect_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_effect_id(), target);
  }

  // int32 title_id = 13;
  if (this->title_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_title_id(), target);
  }

  // .BYDLD.Decimal red_packet_ticket = 14;
  if (this->has_red_packet_ticket()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::red_packet_ticket(this), target, stream);
  }

  // .BYDLD.EffectInfo effect_info = 15;
  if (this->has_effect_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::effect_info(this), target, stream);
  }

  // int32 wings_props_id = 16;
  if (this->wings_props_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_wings_props_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.StationBase)
  return target;
}

size_t StationBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.StationBase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player_name = 6;
  if (this->player_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player_name());
  }

  // .BYDLD.Decimal red_packet_ticket = 14;
  if (this->has_red_packet_ticket()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *red_packet_ticket_);
  }

  // .BYDLD.EffectInfo effect_info = 15;
  if (this->has_effect_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *effect_info_);
  }

  // int32 gun_ratio = 1;
  if (this->gun_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gun_ratio());
  }

  // int32 gun_level = 2;
  if (this->gun_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gun_level());
  }

  // int64 user_score = 4;
  if (this->user_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_score());
  }

  // int32 chair_idx = 5;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // bool is_online = 3;
  if (this->is_online() != 0) {
    total_size += 1 + 1;
  }

  // bool through_flag = 7;
  if (this->through_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool double_flag = 8;
  if (this->double_flag() != 0) {
    total_size += 1 + 1;
  }

  // int32 player_id = 9;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_id());
  }

  // int32 vip = 10;
  if (this->vip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vip());
  }

  // int32 ticket = 11;
  if (this->ticket() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ticket());
  }

  // int32 effect_id = 12;
  if (this->effect_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_effect_id());
  }

  // int32 title_id = 13;
  if (this->title_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_title_id());
  }

  // int32 wings_props_id = 16;
  if (this->wings_props_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wings_props_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StationBase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.StationBase)
  GOOGLE_DCHECK_NE(&from, this);
  const StationBase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StationBase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.StationBase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.StationBase)
    MergeFrom(*source);
  }
}

void StationBase::MergeFrom(const StationBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.StationBase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_name().size() > 0) {
    _internal_set_player_name(from._internal_player_name());
  }
  if (from.has_red_packet_ticket()) {
    _internal_mutable_red_packet_ticket()->::BYDLD::Decimal::MergeFrom(from._internal_red_packet_ticket());
  }
  if (from.has_effect_info()) {
    _internal_mutable_effect_info()->::BYDLD::EffectInfo::MergeFrom(from._internal_effect_info());
  }
  if (from.gun_ratio() != 0) {
    _internal_set_gun_ratio(from._internal_gun_ratio());
  }
  if (from.gun_level() != 0) {
    _internal_set_gun_level(from._internal_gun_level());
  }
  if (from.user_score() != 0) {
    _internal_set_user_score(from._internal_user_score());
  }
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.is_online() != 0) {
    _internal_set_is_online(from._internal_is_online());
  }
  if (from.through_flag() != 0) {
    _internal_set_through_flag(from._internal_through_flag());
  }
  if (from.double_flag() != 0) {
    _internal_set_double_flag(from._internal_double_flag());
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.vip() != 0) {
    _internal_set_vip(from._internal_vip());
  }
  if (from.ticket() != 0) {
    _internal_set_ticket(from._internal_ticket());
  }
  if (from.effect_id() != 0) {
    _internal_set_effect_id(from._internal_effect_id());
  }
  if (from.title_id() != 0) {
    _internal_set_title_id(from._internal_title_id());
  }
  if (from.wings_props_id() != 0) {
    _internal_set_wings_props_id(from._internal_wings_props_id());
  }
}

void StationBase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.StationBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationBase::CopyFrom(const StationBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.StationBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationBase::IsInitialized() const {
  return true;
}

void StationBase::InternalSwap(StationBase* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  player_name_.Swap(&other->player_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StationBase, wings_props_id_)
      + sizeof(StationBase::wings_props_id_)
      - PROTOBUF_FIELD_OFFSET(StationBase, red_packet_ticket_)>(
          reinterpret_cast<char*>(&red_packet_ticket_),
          reinterpret_cast<char*>(&other->red_packet_ticket_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StationBase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUserReady::_Internal {
 public:
};

SCUserReady::SCUserReady(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  station_base_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCUserReady)
}
SCUserReady::SCUserReady(const SCUserReady& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      station_base_list_(from.station_base_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCUserReady)
}

void SCUserReady::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCUserReady_BYDLD_2eproto.base);
  timestamp_ = 0;
}

SCUserReady::~SCUserReady() {
  // @@protoc_insertion_point(destructor:BYDLD.SCUserReady)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUserReady::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCUserReady::ArenaDtor(void* object) {
  SCUserReady* _this = reinterpret_cast< SCUserReady* >(object);
  (void)_this;
}
void SCUserReady::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUserReady::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUserReady& SCUserReady::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUserReady_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCUserReady::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCUserReady)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  station_base_list_.Clear();
  timestamp_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUserReady::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.StationBase station_base_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_station_base_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUserReady::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCUserReady)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.StationBase station_base_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_station_base_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_station_base_list(i), target, stream);
  }

  // int32 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCUserReady)
  return target;
}

size_t SCUserReady::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCUserReady)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.StationBase station_base_list = 1;
  total_size += 1UL * this->_internal_station_base_list_size();
  for (const auto& msg : this->station_base_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUserReady::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCUserReady)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUserReady* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUserReady>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCUserReady)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCUserReady)
    MergeFrom(*source);
  }
}

void SCUserReady::MergeFrom(const SCUserReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCUserReady)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  station_base_list_.MergeFrom(from.station_base_list_);
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void SCUserReady::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCUserReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUserReady::CopyFrom(const SCUserReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCUserReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUserReady::IsInitialized() const {
  return true;
}

void SCUserReady::InternalSwap(SCUserReady* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  station_base_list_.InternalSwap(&other->station_base_list_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUserReady::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class JadeAwardInfo::_Internal {
 public:
};

JadeAwardInfo::JadeAwardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.JadeAwardInfo)
}
JadeAwardInfo::JadeAwardInfo(const JadeAwardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&award_num_, &from.award_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&award_type_) -
    reinterpret_cast<char*>(&award_num_)) + sizeof(award_type_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.JadeAwardInfo)
}

void JadeAwardInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&award_num_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&award_type_) -
      reinterpret_cast<char*>(&award_num_)) + sizeof(award_type_));
}

JadeAwardInfo::~JadeAwardInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.JadeAwardInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JadeAwardInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void JadeAwardInfo::ArenaDtor(void* object) {
  JadeAwardInfo* _this = reinterpret_cast< JadeAwardInfo* >(object);
  (void)_this;
}
void JadeAwardInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JadeAwardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JadeAwardInfo& JadeAwardInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JadeAwardInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void JadeAwardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.JadeAwardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&award_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&award_type_) -
      reinterpret_cast<char*>(&award_num_)) + sizeof(award_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JadeAwardInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 award_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          award_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 award_ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          award_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 award_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          award_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 award_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          award_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JadeAwardInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.JadeAwardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 award_num = 1;
  if (this->award_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_award_num(), target);
  }

  // int32 award_ratio = 2;
  if (this->award_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_award_ratio(), target);
  }

  // int32 award_level = 3;
  if (this->award_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_award_level(), target);
  }

  // int32 award_type = 4;
  if (this->award_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_award_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.JadeAwardInfo)
  return target;
}

size_t JadeAwardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.JadeAwardInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 award_num = 1;
  if (this->award_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_award_num());
  }

  // int32 award_ratio = 2;
  if (this->award_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_award_ratio());
  }

  // int32 award_level = 3;
  if (this->award_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_award_level());
  }

  // int32 award_type = 4;
  if (this->award_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_award_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JadeAwardInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.JadeAwardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const JadeAwardInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JadeAwardInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.JadeAwardInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.JadeAwardInfo)
    MergeFrom(*source);
  }
}

void JadeAwardInfo::MergeFrom(const JadeAwardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.JadeAwardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.award_num() != 0) {
    _internal_set_award_num(from._internal_award_num());
  }
  if (from.award_ratio() != 0) {
    _internal_set_award_ratio(from._internal_award_ratio());
  }
  if (from.award_level() != 0) {
    _internal_set_award_level(from._internal_award_level());
  }
  if (from.award_type() != 0) {
    _internal_set_award_type(from._internal_award_type());
  }
}

void JadeAwardInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.JadeAwardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JadeAwardInfo::CopyFrom(const JadeAwardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.JadeAwardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JadeAwardInfo::IsInitialized() const {
  return true;
}

void JadeAwardInfo::InternalSwap(JadeAwardInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JadeAwardInfo, award_type_)
      + sizeof(JadeAwardInfo::award_type_)
      - PROTOBUF_FIELD_OFFSET(JadeAwardInfo, award_num_)>(
          reinterpret_cast<char*>(&award_num_),
          reinterpret_cast<char*>(&other->award_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JadeAwardInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSJadeAwardInfo::_Internal {
 public:
};

CSJadeAwardInfo::CSJadeAwardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSJadeAwardInfo)
}
CSJadeAwardInfo::CSJadeAwardInfo(const CSJadeAwardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSJadeAwardInfo)
}

void CSJadeAwardInfo::SharedCtor() {
}

CSJadeAwardInfo::~CSJadeAwardInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.CSJadeAwardInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSJadeAwardInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSJadeAwardInfo::ArenaDtor(void* object) {
  CSJadeAwardInfo* _this = reinterpret_cast< CSJadeAwardInfo* >(object);
  (void)_this;
}
void CSJadeAwardInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSJadeAwardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSJadeAwardInfo& CSJadeAwardInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSJadeAwardInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSJadeAwardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSJadeAwardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSJadeAwardInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSJadeAwardInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSJadeAwardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSJadeAwardInfo)
  return target;
}

size_t CSJadeAwardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSJadeAwardInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSJadeAwardInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSJadeAwardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSJadeAwardInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSJadeAwardInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSJadeAwardInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSJadeAwardInfo)
    MergeFrom(*source);
  }
}

void CSJadeAwardInfo::MergeFrom(const CSJadeAwardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSJadeAwardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSJadeAwardInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSJadeAwardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSJadeAwardInfo::CopyFrom(const CSJadeAwardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSJadeAwardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSJadeAwardInfo::IsInitialized() const {
  return true;
}

void CSJadeAwardInfo::InternalSwap(CSJadeAwardInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSJadeAwardInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCJadeAwardInfo::_Internal {
 public:
};

SCJadeAwardInfo::SCJadeAwardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  jade_award_info_(arena),
  crit_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCJadeAwardInfo)
}
SCJadeAwardInfo::SCJadeAwardInfo(const SCJadeAwardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      jade_award_info_(from.jade_award_info_),
      crit_list_(from.crit_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCJadeAwardInfo)
}

void SCJadeAwardInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCJadeAwardInfo_BYDLD_2eproto.base);
}

SCJadeAwardInfo::~SCJadeAwardInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.SCJadeAwardInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCJadeAwardInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCJadeAwardInfo::ArenaDtor(void* object) {
  SCJadeAwardInfo* _this = reinterpret_cast< SCJadeAwardInfo* >(object);
  (void)_this;
}
void SCJadeAwardInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCJadeAwardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCJadeAwardInfo& SCJadeAwardInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCJadeAwardInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCJadeAwardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCJadeAwardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jade_award_info_.Clear();
  crit_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCJadeAwardInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.JadeAwardInfo jade_award_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_jade_award_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 crit_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_crit_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_crit_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCJadeAwardInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCJadeAwardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.JadeAwardInfo jade_award_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_jade_award_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_jade_award_info(i), target, stream);
  }

  // repeated int32 crit_list = 2;
  {
    int byte_size = _crit_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_crit_list(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCJadeAwardInfo)
  return target;
}

size_t SCJadeAwardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCJadeAwardInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.JadeAwardInfo jade_award_info = 1;
  total_size += 1UL * this->_internal_jade_award_info_size();
  for (const auto& msg : this->jade_award_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 crit_list = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->crit_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _crit_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCJadeAwardInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCJadeAwardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCJadeAwardInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCJadeAwardInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCJadeAwardInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCJadeAwardInfo)
    MergeFrom(*source);
  }
}

void SCJadeAwardInfo::MergeFrom(const SCJadeAwardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCJadeAwardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  jade_award_info_.MergeFrom(from.jade_award_info_);
  crit_list_.MergeFrom(from.crit_list_);
}

void SCJadeAwardInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCJadeAwardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCJadeAwardInfo::CopyFrom(const SCJadeAwardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCJadeAwardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCJadeAwardInfo::IsInitialized() const {
  return true;
}

void SCJadeAwardInfo::InternalSwap(SCJadeAwardInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  jade_award_info_.InternalSwap(&other->jade_award_info_);
  crit_list_.InternalSwap(&other->crit_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCJadeAwardInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSNotifyLogout::_Internal {
 public:
};

CSNotifyLogout::CSNotifyLogout(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSNotifyLogout)
}
CSNotifyLogout::CSNotifyLogout(const CSNotifyLogout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chair_idx_ = from.chair_idx_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSNotifyLogout)
}

void CSNotifyLogout::SharedCtor() {
  chair_idx_ = 0;
}

CSNotifyLogout::~CSNotifyLogout() {
  // @@protoc_insertion_point(destructor:BYDLD.CSNotifyLogout)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSNotifyLogout::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSNotifyLogout::ArenaDtor(void* object) {
  CSNotifyLogout* _this = reinterpret_cast< CSNotifyLogout* >(object);
  (void)_this;
}
void CSNotifyLogout::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSNotifyLogout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSNotifyLogout& CSNotifyLogout::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSNotifyLogout_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSNotifyLogout::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSNotifyLogout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chair_idx_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNotifyLogout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSNotifyLogout::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSNotifyLogout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSNotifyLogout)
  return target;
}

size_t CSNotifyLogout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSNotifyLogout)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSNotifyLogout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSNotifyLogout)
  GOOGLE_DCHECK_NE(&from, this);
  const CSNotifyLogout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSNotifyLogout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSNotifyLogout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSNotifyLogout)
    MergeFrom(*source);
  }
}

void CSNotifyLogout::MergeFrom(const CSNotifyLogout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSNotifyLogout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
}

void CSNotifyLogout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSNotifyLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSNotifyLogout::CopyFrom(const CSNotifyLogout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSNotifyLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNotifyLogout::IsInitialized() const {
  return true;
}

void CSNotifyLogout::InternalSwap(CSNotifyLogout* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(chair_idx_, other->chair_idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNotifyLogout::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCNotifyLogout::_Internal {
 public:
};

SCNotifyLogout::SCNotifyLogout(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCNotifyLogout)
}
SCNotifyLogout::SCNotifyLogout(const SCNotifyLogout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chair_idx_ = from.chair_idx_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCNotifyLogout)
}

void SCNotifyLogout::SharedCtor() {
  chair_idx_ = 0;
}

SCNotifyLogout::~SCNotifyLogout() {
  // @@protoc_insertion_point(destructor:BYDLD.SCNotifyLogout)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCNotifyLogout::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCNotifyLogout::ArenaDtor(void* object) {
  SCNotifyLogout* _this = reinterpret_cast< SCNotifyLogout* >(object);
  (void)_this;
}
void SCNotifyLogout::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCNotifyLogout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCNotifyLogout& SCNotifyLogout::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCNotifyLogout_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCNotifyLogout::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCNotifyLogout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chair_idx_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCNotifyLogout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCNotifyLogout::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCNotifyLogout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCNotifyLogout)
  return target;
}

size_t SCNotifyLogout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCNotifyLogout)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCNotifyLogout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCNotifyLogout)
  GOOGLE_DCHECK_NE(&from, this);
  const SCNotifyLogout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCNotifyLogout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCNotifyLogout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCNotifyLogout)
    MergeFrom(*source);
  }
}

void SCNotifyLogout::MergeFrom(const SCNotifyLogout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCNotifyLogout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
}

void SCNotifyLogout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCNotifyLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCNotifyLogout::CopyFrom(const SCNotifyLogout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCNotifyLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCNotifyLogout::IsInitialized() const {
  return true;
}

void SCNotifyLogout::InternalSwap(SCNotifyLogout* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(chair_idx_, other->chair_idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCNotifyLogout::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSetProbability::_Internal {
 public:
};

CSSetProbability::CSSetProbability(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSSetProbability)
}
CSSetProbability::CSSetProbability(const CSSetProbability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gun_ratio_, &from.gun_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_use_auto_) -
    reinterpret_cast<char*>(&gun_ratio_)) + sizeof(is_use_auto_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSSetProbability)
}

void CSSetProbability::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gun_ratio_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_use_auto_) -
      reinterpret_cast<char*>(&gun_ratio_)) + sizeof(is_use_auto_));
}

CSSetProbability::~CSSetProbability() {
  // @@protoc_insertion_point(destructor:BYDLD.CSSetProbability)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSetProbability::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSSetProbability::ArenaDtor(void* object) {
  CSSetProbability* _this = reinterpret_cast< CSSetProbability* >(object);
  (void)_this;
}
void CSSetProbability::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSetProbability::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSetProbability& CSSetProbability::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSetProbability_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSSetProbability::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSSetProbability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gun_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_use_auto_) -
      reinterpret_cast<char*>(&gun_ratio_)) + sizeof(is_use_auto_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSetProbability::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gun_ratio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gun_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gun_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gun_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_use_auto = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_use_auto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSetProbability::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSSetProbability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gun_ratio = 1;
  if (this->gun_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gun_ratio(), target);
  }

  // int32 gun_level = 2;
  if (this->gun_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gun_level(), target);
  }

  // bool is_use_auto = 3;
  if (this->is_use_auto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_use_auto(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSSetProbability)
  return target;
}

size_t CSSetProbability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSSetProbability)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gun_ratio = 1;
  if (this->gun_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gun_ratio());
  }

  // int32 gun_level = 2;
  if (this->gun_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gun_level());
  }

  // bool is_use_auto = 3;
  if (this->is_use_auto() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSetProbability::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSSetProbability)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSetProbability* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSetProbability>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSSetProbability)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSSetProbability)
    MergeFrom(*source);
  }
}

void CSSetProbability::MergeFrom(const CSSetProbability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSSetProbability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gun_ratio() != 0) {
    _internal_set_gun_ratio(from._internal_gun_ratio());
  }
  if (from.gun_level() != 0) {
    _internal_set_gun_level(from._internal_gun_level());
  }
  if (from.is_use_auto() != 0) {
    _internal_set_is_use_auto(from._internal_is_use_auto());
  }
}

void CSSetProbability::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSSetProbability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSetProbability::CopyFrom(const CSSetProbability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSSetProbability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSetProbability::IsInitialized() const {
  return true;
}

void CSSetProbability::InternalSwap(CSSetProbability* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSSetProbability, is_use_auto_)
      + sizeof(CSSetProbability::is_use_auto_)
      - PROTOBUF_FIELD_OFFSET(CSSetProbability, gun_ratio_)>(
          reinterpret_cast<char*>(&gun_ratio_),
          reinterpret_cast<char*>(&other->gun_ratio_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSetProbability::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSetProbability::_Internal {
 public:
};

SCSetProbability::SCSetProbability(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCSetProbability)
}
SCSetProbability::SCSetProbability(const SCSetProbability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_unlock_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(is_unlock_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCSetProbability)
}

void SCSetProbability::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_unlock_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(is_unlock_));
}

SCSetProbability::~SCSetProbability() {
  // @@protoc_insertion_point(destructor:BYDLD.SCSetProbability)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSetProbability::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSetProbability::ArenaDtor(void* object) {
  SCSetProbability* _this = reinterpret_cast< SCSetProbability* >(object);
  (void)_this;
}
void SCSetProbability::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSetProbability::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSetProbability& SCSetProbability::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSetProbability_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCSetProbability::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCSetProbability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_unlock_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(is_unlock_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSetProbability::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gun_ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gun_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gun_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gun_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_unlock = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_unlock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSetProbability::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCSetProbability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 gun_ratio = 2;
  if (this->gun_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gun_ratio(), target);
  }

  // int32 gun_level = 3;
  if (this->gun_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_gun_level(), target);
  }

  // bool is_unlock = 4;
  if (this->is_unlock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_unlock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCSetProbability)
  return target;
}

size_t SCSetProbability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCSetProbability)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 gun_ratio = 2;
  if (this->gun_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gun_ratio());
  }

  // int32 gun_level = 3;
  if (this->gun_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gun_level());
  }

  // bool is_unlock = 4;
  if (this->is_unlock() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSetProbability::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCSetProbability)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSetProbability* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSetProbability>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCSetProbability)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCSetProbability)
    MergeFrom(*source);
  }
}

void SCSetProbability::MergeFrom(const SCSetProbability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCSetProbability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.gun_ratio() != 0) {
    _internal_set_gun_ratio(from._internal_gun_ratio());
  }
  if (from.gun_level() != 0) {
    _internal_set_gun_level(from._internal_gun_level());
  }
  if (from.is_unlock() != 0) {
    _internal_set_is_unlock(from._internal_is_unlock());
  }
}

void SCSetProbability::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCSetProbability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSetProbability::CopyFrom(const SCSetProbability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCSetProbability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSetProbability::IsInitialized() const {
  return true;
}

void SCSetProbability::InternalSwap(SCSetProbability* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCSetProbability, is_unlock_)
      + sizeof(SCSetProbability::is_unlock_)
      - PROTOBUF_FIELD_OFFSET(SCSetProbability, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSetProbability::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserShoot::_Internal {
 public:
};

UserShoot::UserShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.UserShoot)
}
UserShoot::UserShoot(const UserShoot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&angle_, &from.angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&angle_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.UserShoot)
}

void UserShoot::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&angle_)) + sizeof(y_));
}

UserShoot::~UserShoot() {
  // @@protoc_insertion_point(destructor:BYDLD.UserShoot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserShoot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserShoot::ArenaDtor(void* object) {
  UserShoot* _this = reinterpret_cast< UserShoot* >(object);
  (void)_this;
}
void UserShoot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserShoot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserShoot& UserShoot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserShoot_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void UserShoot::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.UserShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&angle_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserShoot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bullet_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bullet_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_double = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_double_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_through = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_through_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_free_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_free_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bullet_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          bullet_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserShoot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.UserShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 angle = 1;
  if (this->angle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_angle(), target);
  }

  // int32 bullet_id = 2;
  if (this->bullet_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bullet_id(), target);
  }

  // int32 ratio = 3;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ratio(), target);
  }

  // bool is_double = 4;
  if (this->is_double() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_double(), target);
  }

  // bool is_through = 5;
  if (this->is_through() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_through(), target);
  }

  // bool is_free_time = 6;
  if (this->is_free_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_free_time(), target);
  }

  // int32 bullet_type = 7;
  if (this->bullet_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_bullet_type(), target);
  }

  // float x = 8;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_x(), target);
  }

  // float y = 9;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.UserShoot)
  return target;
}

size_t UserShoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.UserShoot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 angle = 1;
  if (this->angle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_angle());
  }

  // int32 bullet_id = 2;
  if (this->bullet_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bullet_id());
  }

  // int32 ratio = 3;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // bool is_double = 4;
  if (this->is_double() != 0) {
    total_size += 1 + 1;
  }

  // bool is_through = 5;
  if (this->is_through() != 0) {
    total_size += 1 + 1;
  }

  // bool is_free_time = 6;
  if (this->is_free_time() != 0) {
    total_size += 1 + 1;
  }

  // int32 bullet_type = 7;
  if (this->bullet_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bullet_type());
  }

  // float x = 8;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 9;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserShoot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.UserShoot)
  GOOGLE_DCHECK_NE(&from, this);
  const UserShoot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserShoot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.UserShoot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.UserShoot)
    MergeFrom(*source);
  }
}

void UserShoot::MergeFrom(const UserShoot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.UserShoot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.angle() != 0) {
    _internal_set_angle(from._internal_angle());
  }
  if (from.bullet_id() != 0) {
    _internal_set_bullet_id(from._internal_bullet_id());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.is_double() != 0) {
    _internal_set_is_double(from._internal_is_double());
  }
  if (from.is_through() != 0) {
    _internal_set_is_through(from._internal_is_through());
  }
  if (from.is_free_time() != 0) {
    _internal_set_is_free_time(from._internal_is_free_time());
  }
  if (from.bullet_type() != 0) {
    _internal_set_bullet_type(from._internal_bullet_type());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void UserShoot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.UserShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserShoot::CopyFrom(const UserShoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.UserShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserShoot::IsInitialized() const {
  return true;
}

void UserShoot::InternalSwap(UserShoot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserShoot, y_)
      + sizeof(UserShoot::y_)
      - PROTOBUF_FIELD_OFFSET(UserShoot, angle_)>(
          reinterpret_cast<char*>(&angle_),
          reinterpret_cast<char*>(&other->angle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserShoot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSUserShootMulti::_Internal {
 public:
};

CSUserShootMulti::CSUserShootMulti(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  shoot_bullet_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSUserShootMulti)
}
CSUserShootMulti::CSUserShootMulti(const CSUserShootMulti& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shoot_bullet_(from.shoot_bullet_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSUserShootMulti)
}

void CSUserShootMulti::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSUserShootMulti_BYDLD_2eproto.base);
}

CSUserShootMulti::~CSUserShootMulti() {
  // @@protoc_insertion_point(destructor:BYDLD.CSUserShootMulti)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSUserShootMulti::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSUserShootMulti::ArenaDtor(void* object) {
  CSUserShootMulti* _this = reinterpret_cast< CSUserShootMulti* >(object);
  (void)_this;
}
void CSUserShootMulti::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSUserShootMulti::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSUserShootMulti& CSUserShootMulti::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSUserShootMulti_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSUserShootMulti::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSUserShootMulti)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shoot_bullet_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSUserShootMulti::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.UserShoot shoot_bullet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shoot_bullet(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSUserShootMulti::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSUserShootMulti)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.UserShoot shoot_bullet = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shoot_bullet_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_shoot_bullet(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSUserShootMulti)
  return target;
}

size_t CSUserShootMulti::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSUserShootMulti)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.UserShoot shoot_bullet = 1;
  total_size += 1UL * this->_internal_shoot_bullet_size();
  for (const auto& msg : this->shoot_bullet_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSUserShootMulti::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSUserShootMulti)
  GOOGLE_DCHECK_NE(&from, this);
  const CSUserShootMulti* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSUserShootMulti>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSUserShootMulti)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSUserShootMulti)
    MergeFrom(*source);
  }
}

void CSUserShootMulti::MergeFrom(const CSUserShootMulti& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSUserShootMulti)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shoot_bullet_.MergeFrom(from.shoot_bullet_);
}

void CSUserShootMulti::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSUserShootMulti)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUserShootMulti::CopyFrom(const CSUserShootMulti& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSUserShootMulti)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUserShootMulti::IsInitialized() const {
  return true;
}

void CSUserShootMulti::InternalSwap(CSUserShootMulti* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  shoot_bullet_.InternalSwap(&other->shoot_bullet_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSUserShootMulti::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserShootRsp::_Internal {
 public:
};

UserShootRsp::UserShootRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.UserShootRsp)
}
UserShootRsp::UserShootRsp(const UserShootRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&angle_, &from.angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&angle_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.UserShootRsp)
}

void UserShootRsp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&angle_)) + sizeof(y_));
}

UserShootRsp::~UserShootRsp() {
  // @@protoc_insertion_point(destructor:BYDLD.UserShootRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserShootRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserShootRsp::ArenaDtor(void* object) {
  UserShootRsp* _this = reinterpret_cast< UserShootRsp* >(object);
  (void)_this;
}
void UserShootRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserShootRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserShootRsp& UserShootRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserShootRsp_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void UserShootRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.UserShootRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&angle_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserShootRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bullet_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bullet_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserShootRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.UserShootRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 angle = 1;
  if (this->angle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_angle(), target);
  }

  // int32 bullet_type = 2;
  if (this->bullet_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bullet_type(), target);
  }

  // float x = 3;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // float y = 4;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.UserShootRsp)
  return target;
}

size_t UserShootRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.UserShootRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 angle = 1;
  if (this->angle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_angle());
  }

  // int32 bullet_type = 2;
  if (this->bullet_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bullet_type());
  }

  // float x = 3;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 4;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserShootRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.UserShootRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const UserShootRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserShootRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.UserShootRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.UserShootRsp)
    MergeFrom(*source);
  }
}

void UserShootRsp::MergeFrom(const UserShootRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.UserShootRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.angle() != 0) {
    _internal_set_angle(from._internal_angle());
  }
  if (from.bullet_type() != 0) {
    _internal_set_bullet_type(from._internal_bullet_type());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void UserShootRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.UserShootRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserShootRsp::CopyFrom(const UserShootRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.UserShootRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserShootRsp::IsInitialized() const {
  return true;
}

void UserShootRsp::InternalSwap(UserShootRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserShootRsp, y_)
      + sizeof(UserShootRsp::y_)
      - PROTOBUF_FIELD_OFFSET(UserShootRsp, angle_)>(
          reinterpret_cast<char*>(&angle_),
          reinterpret_cast<char*>(&other->angle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserShootRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUserShootMulti::_Internal {
 public:
};

SCUserShootMulti::SCUserShootMulti(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bullet_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCUserShootMulti)
}
SCUserShootMulti::SCUserShootMulti(const SCUserShootMulti& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bullet_info_(from.bullet_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&chair_idx_) -
    reinterpret_cast<char*>(&score_)) + sizeof(chair_idx_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCUserShootMulti)
}

void SCUserShootMulti::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCUserShootMulti_BYDLD_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&score_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_idx_) -
      reinterpret_cast<char*>(&score_)) + sizeof(chair_idx_));
}

SCUserShootMulti::~SCUserShootMulti() {
  // @@protoc_insertion_point(destructor:BYDLD.SCUserShootMulti)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUserShootMulti::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCUserShootMulti::ArenaDtor(void* object) {
  SCUserShootMulti* _this = reinterpret_cast< SCUserShootMulti* >(object);
  (void)_this;
}
void SCUserShootMulti::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUserShootMulti::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUserShootMulti& SCUserShootMulti::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUserShootMulti_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCUserShootMulti::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCUserShootMulti)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bullet_info_.Clear();
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) -
      reinterpret_cast<char*>(&score_)) + sizeof(chair_idx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUserShootMulti::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.UserShootRsp bullet_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bullet_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUserShootMulti::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCUserShootMulti)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // repeated .BYDLD.UserShootRsp bullet_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bullet_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_bullet_info(i), target, stream);
  }

  // int64 score = 3;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCUserShootMulti)
  return target;
}

size_t SCUserShootMulti::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCUserShootMulti)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.UserShootRsp bullet_info = 2;
  total_size += 1UL * this->_internal_bullet_info_size();
  for (const auto& msg : this->bullet_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 score = 3;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_score());
  }

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUserShootMulti::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCUserShootMulti)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUserShootMulti* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUserShootMulti>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCUserShootMulti)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCUserShootMulti)
    MergeFrom(*source);
  }
}

void SCUserShootMulti::MergeFrom(const SCUserShootMulti& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCUserShootMulti)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bullet_info_.MergeFrom(from.bullet_info_);
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
}

void SCUserShootMulti::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCUserShootMulti)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUserShootMulti::CopyFrom(const SCUserShootMulti& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCUserShootMulti)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUserShootMulti::IsInitialized() const {
  return true;
}

void SCUserShootMulti::InternalSwap(SCUserShootMulti* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bullet_info_.InternalSwap(&other->bullet_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCUserShootMulti, chair_idx_)
      + sizeof(SCUserShootMulti::chair_idx_)
      - PROTOBUF_FIELD_OFFSET(SCUserShootMulti, score_)>(
          reinterpret_cast<char*>(&score_),
          reinterpret_cast<char*>(&other->score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUserShootMulti::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HitFish::_Internal {
 public:
};

HitFish::HitFish(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  effect_fish_uid_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.HitFish)
}
HitFish::HitFish(const HitFish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      effect_fish_uid_(from.effect_fish_uid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fish_uid_, &from.fish_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&bullet_type_) -
    reinterpret_cast<char*>(&fish_uid_)) + sizeof(bullet_type_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.HitFish)
}

void HitFish::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fish_uid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bullet_type_) -
      reinterpret_cast<char*>(&fish_uid_)) + sizeof(bullet_type_));
}

HitFish::~HitFish() {
  // @@protoc_insertion_point(destructor:BYDLD.HitFish)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HitFish::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HitFish::ArenaDtor(void* object) {
  HitFish* _this = reinterpret_cast< HitFish* >(object);
  (void)_this;
}
void HitFish::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HitFish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HitFish& HitFish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HitFish_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void HitFish::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.HitFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  effect_fish_uid_.Clear();
  ::memset(&fish_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bullet_type_) -
      reinterpret_cast<char*>(&fish_uid_)) + sizeof(bullet_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HitFish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 fish_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fish_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bullet_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bullet_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 through_idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          through_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fish_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 effect_fish_uid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_effect_fish_uid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_effect_fish_uid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 round = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bullet_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          bullet_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HitFish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.HitFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fish_uid = 1;
  if (this->fish_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fish_uid(), target);
  }

  // int32 bullet_id = 2;
  if (this->bullet_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bullet_id(), target);
  }

  // int32 through_idx = 3;
  if (this->through_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_through_idx(), target);
  }

  // int32 fish_id = 4;
  if (this->fish_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_fish_id(), target);
  }

  // repeated int32 effect_fish_uid = 5;
  {
    int byte_size = _effect_fish_uid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_effect_fish_uid(), byte_size, target);
    }
  }

  // int32 round = 6;
  if (this->round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_round(), target);
  }

  // int32 ratio = 7;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_ratio(), target);
  }

  // int32 bullet_type = 8;
  if (this->bullet_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_bullet_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.HitFish)
  return target;
}

size_t HitFish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.HitFish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 effect_fish_uid = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->effect_fish_uid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _effect_fish_uid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 fish_uid = 1;
  if (this->fish_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_uid());
  }

  // int32 bullet_id = 2;
  if (this->bullet_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bullet_id());
  }

  // int32 through_idx = 3;
  if (this->through_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_through_idx());
  }

  // int32 fish_id = 4;
  if (this->fish_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_id());
  }

  // int32 round = 6;
  if (this->round() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_round());
  }

  // int32 ratio = 7;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // int32 bullet_type = 8;
  if (this->bullet_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bullet_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HitFish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.HitFish)
  GOOGLE_DCHECK_NE(&from, this);
  const HitFish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HitFish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.HitFish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.HitFish)
    MergeFrom(*source);
  }
}

void HitFish::MergeFrom(const HitFish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.HitFish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  effect_fish_uid_.MergeFrom(from.effect_fish_uid_);
  if (from.fish_uid() != 0) {
    _internal_set_fish_uid(from._internal_fish_uid());
  }
  if (from.bullet_id() != 0) {
    _internal_set_bullet_id(from._internal_bullet_id());
  }
  if (from.through_idx() != 0) {
    _internal_set_through_idx(from._internal_through_idx());
  }
  if (from.fish_id() != 0) {
    _internal_set_fish_id(from._internal_fish_id());
  }
  if (from.round() != 0) {
    _internal_set_round(from._internal_round());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.bullet_type() != 0) {
    _internal_set_bullet_type(from._internal_bullet_type());
  }
}

void HitFish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.HitFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HitFish::CopyFrom(const HitFish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.HitFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HitFish::IsInitialized() const {
  return true;
}

void HitFish::InternalSwap(HitFish* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  effect_fish_uid_.InternalSwap(&other->effect_fish_uid_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HitFish, bullet_type_)
      + sizeof(HitFish::bullet_type_)
      - PROTOBUF_FIELD_OFFSET(HitFish, fish_uid_)>(
          reinterpret_cast<char*>(&fish_uid_),
          reinterpret_cast<char*>(&other->fish_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HitFish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSHitMultiFish::_Internal {
 public:
};

CSHitMultiFish::CSHitMultiFish(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hit_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSHitMultiFish)
}
CSHitMultiFish::CSHitMultiFish(const CSHitMultiFish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hit_info_(from.hit_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSHitMultiFish)
}

void CSHitMultiFish::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSHitMultiFish_BYDLD_2eproto.base);
}

CSHitMultiFish::~CSHitMultiFish() {
  // @@protoc_insertion_point(destructor:BYDLD.CSHitMultiFish)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSHitMultiFish::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSHitMultiFish::ArenaDtor(void* object) {
  CSHitMultiFish* _this = reinterpret_cast< CSHitMultiFish* >(object);
  (void)_this;
}
void CSHitMultiFish::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSHitMultiFish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSHitMultiFish& CSHitMultiFish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSHitMultiFish_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSHitMultiFish::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSHitMultiFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hit_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSHitMultiFish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.HitFish hit_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hit_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSHitMultiFish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSHitMultiFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.HitFish hit_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hit_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_hit_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSHitMultiFish)
  return target;
}

size_t CSHitMultiFish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSHitMultiFish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.HitFish hit_info = 1;
  total_size += 1UL * this->_internal_hit_info_size();
  for (const auto& msg : this->hit_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSHitMultiFish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSHitMultiFish)
  GOOGLE_DCHECK_NE(&from, this);
  const CSHitMultiFish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSHitMultiFish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSHitMultiFish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSHitMultiFish)
    MergeFrom(*source);
  }
}

void CSHitMultiFish::MergeFrom(const CSHitMultiFish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSHitMultiFish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hit_info_.MergeFrom(from.hit_info_);
}

void CSHitMultiFish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSHitMultiFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSHitMultiFish::CopyFrom(const CSHitMultiFish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSHitMultiFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSHitMultiFish::IsInitialized() const {
  return true;
}

void CSHitMultiFish::InternalSwap(CSHitMultiFish* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hit_info_.InternalSwap(&other->hit_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSHitMultiFish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EffectFish::_Internal {
 public:
};

EffectFish::EffectFish(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.EffectFish)
}
EffectFish::EffectFish(const EffectFish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fish_uid_, &from.fish_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&fish_uid_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.EffectFish)
}

void EffectFish::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fish_uid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&fish_uid_)) + sizeof(score_));
}

EffectFish::~EffectFish() {
  // @@protoc_insertion_point(destructor:BYDLD.EffectFish)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EffectFish::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EffectFish::ArenaDtor(void* object) {
  EffectFish* _this = reinterpret_cast< EffectFish* >(object);
  (void)_this;
}
void EffectFish::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EffectFish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EffectFish& EffectFish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EffectFish_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void EffectFish::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.EffectFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fish_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&fish_uid_)) + sizeof(score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EffectFish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 fish_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fish_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EffectFish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.EffectFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fish_uid = 1;
  if (this->fish_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fish_uid(), target);
  }

  // int32 score = 2;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.EffectFish)
  return target;
}

size_t EffectFish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.EffectFish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 fish_uid = 1;
  if (this->fish_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_uid());
  }

  // int32 score = 2;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EffectFish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.EffectFish)
  GOOGLE_DCHECK_NE(&from, this);
  const EffectFish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EffectFish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.EffectFish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.EffectFish)
    MergeFrom(*source);
  }
}

void EffectFish::MergeFrom(const EffectFish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.EffectFish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fish_uid() != 0) {
    _internal_set_fish_uid(from._internal_fish_uid());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
}

void EffectFish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.EffectFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EffectFish::CopyFrom(const EffectFish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.EffectFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectFish::IsInitialized() const {
  return true;
}

void EffectFish::InternalSwap(EffectFish* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EffectFish, score_)
      + sizeof(EffectFish::score_)
      - PROTOBUF_FIELD_OFFSET(EffectFish, fish_uid_)>(
          reinterpret_cast<char*>(&fish_uid_),
          reinterpret_cast<char*>(&other->fish_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EffectFish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DragonBallWheelInfo::_Internal {
 public:
};

DragonBallWheelInfo::DragonBallWheelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ratio_(arena),
  next_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.DragonBallWheelInfo)
}
DragonBallWheelInfo::DragonBallWheelInfo(const DragonBallWheelInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ratio_(from.ratio_),
      next_(from.next_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.DragonBallWheelInfo)
}

void DragonBallWheelInfo::SharedCtor() {
}

DragonBallWheelInfo::~DragonBallWheelInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.DragonBallWheelInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DragonBallWheelInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DragonBallWheelInfo::ArenaDtor(void* object) {
  DragonBallWheelInfo* _this = reinterpret_cast< DragonBallWheelInfo* >(object);
  (void)_this;
}
void DragonBallWheelInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DragonBallWheelInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DragonBallWheelInfo& DragonBallWheelInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DragonBallWheelInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void DragonBallWheelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.DragonBallWheelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ratio_.Clear();
  next_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DragonBallWheelInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 ratio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_ratio(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_ratio(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 next = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_next(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_next(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DragonBallWheelInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.DragonBallWheelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 ratio = 1;
  {
    int byte_size = _ratio_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_ratio(), byte_size, target);
    }
  }

  // repeated int32 next = 2;
  {
    int byte_size = _next_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_next(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.DragonBallWheelInfo)
  return target;
}

size_t DragonBallWheelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.DragonBallWheelInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 ratio = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->ratio_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ratio_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 next = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->next_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _next_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DragonBallWheelInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.DragonBallWheelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DragonBallWheelInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DragonBallWheelInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.DragonBallWheelInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.DragonBallWheelInfo)
    MergeFrom(*source);
  }
}

void DragonBallWheelInfo::MergeFrom(const DragonBallWheelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.DragonBallWheelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ratio_.MergeFrom(from.ratio_);
  next_.MergeFrom(from.next_);
}

void DragonBallWheelInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.DragonBallWheelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DragonBallWheelInfo::CopyFrom(const DragonBallWheelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.DragonBallWheelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DragonBallWheelInfo::IsInitialized() const {
  return true;
}

void DragonBallWheelInfo::InternalSwap(DragonBallWheelInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ratio_.InternalSwap(&other->ratio_);
  next_.InternalSwap(&other->next_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DragonBallWheelInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DragonBallInfo::_Internal {
 public:
};

DragonBallInfo::DragonBallInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  awardratio_(arena),
  wheelinfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.DragonBallInfo)
}
DragonBallInfo::DragonBallInfo(const DragonBallInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      awardratio_(from.awardratio_),
      wheelinfo_(from.wheelinfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&base_ratio_, &from.base_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&wheel_) -
    reinterpret_cast<char*>(&base_ratio_)) + sizeof(wheel_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.DragonBallInfo)
}

void DragonBallInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DragonBallInfo_BYDLD_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&base_ratio_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&wheel_) -
      reinterpret_cast<char*>(&base_ratio_)) + sizeof(wheel_));
}

DragonBallInfo::~DragonBallInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.DragonBallInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DragonBallInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DragonBallInfo::ArenaDtor(void* object) {
  DragonBallInfo* _this = reinterpret_cast< DragonBallInfo* >(object);
  (void)_this;
}
void DragonBallInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DragonBallInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DragonBallInfo& DragonBallInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DragonBallInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void DragonBallInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.DragonBallInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  awardratio_.Clear();
  wheelinfo_.Clear();
  ::memset(&base_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wheel_) -
      reinterpret_cast<char*>(&base_ratio_)) + sizeof(wheel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DragonBallInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 base_ratio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          base_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 wheel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          wheel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 awardRatio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_awardratio(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_awardratio(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.DragonBallWheelInfo wheelInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_wheelinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DragonBallInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.DragonBallInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 base_ratio = 1;
  if (this->base_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_base_ratio(), target);
  }

  // int32 wheel = 2;
  if (this->wheel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_wheel(), target);
  }

  // repeated int32 awardRatio = 3;
  {
    int byte_size = _awardratio_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_awardratio(), byte_size, target);
    }
  }

  // repeated .BYDLD.DragonBallWheelInfo wheelInfo = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_wheelinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_wheelinfo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.DragonBallInfo)
  return target;
}

size_t DragonBallInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.DragonBallInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 awardRatio = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->awardratio_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _awardratio_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .BYDLD.DragonBallWheelInfo wheelInfo = 4;
  total_size += 1UL * this->_internal_wheelinfo_size();
  for (const auto& msg : this->wheelinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 base_ratio = 1;
  if (this->base_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_base_ratio());
  }

  // int32 wheel = 2;
  if (this->wheel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wheel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DragonBallInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.DragonBallInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DragonBallInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DragonBallInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.DragonBallInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.DragonBallInfo)
    MergeFrom(*source);
  }
}

void DragonBallInfo::MergeFrom(const DragonBallInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.DragonBallInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  awardratio_.MergeFrom(from.awardratio_);
  wheelinfo_.MergeFrom(from.wheelinfo_);
  if (from.base_ratio() != 0) {
    _internal_set_base_ratio(from._internal_base_ratio());
  }
  if (from.wheel() != 0) {
    _internal_set_wheel(from._internal_wheel());
  }
}

void DragonBallInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.DragonBallInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DragonBallInfo::CopyFrom(const DragonBallInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.DragonBallInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DragonBallInfo::IsInitialized() const {
  return true;
}

void DragonBallInfo::InternalSwap(DragonBallInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  awardratio_.InternalSwap(&other->awardratio_);
  wheelinfo_.InternalSwap(&other->wheelinfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DragonBallInfo, wheel_)
      + sizeof(DragonBallInfo::wheel_)
      - PROTOBUF_FIELD_OFFSET(DragonBallInfo, base_ratio_)>(
          reinterpret_cast<char*>(&base_ratio_),
          reinterpret_cast<char*>(&other->base_ratio_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DragonBallInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OctopusKingItem::_Internal {
 public:
};

OctopusKingItem::OctopusKingItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  selectlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.OctopusKingItem)
}
OctopusKingItem::OctopusKingItem(const OctopusKingItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      selectlist_(from.selectlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  selectedmultiple_ = from.selectedmultiple_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.OctopusKingItem)
}

void OctopusKingItem::SharedCtor() {
  selectedmultiple_ = 0;
}

OctopusKingItem::~OctopusKingItem() {
  // @@protoc_insertion_point(destructor:BYDLD.OctopusKingItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OctopusKingItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OctopusKingItem::ArenaDtor(void* object) {
  OctopusKingItem* _this = reinterpret_cast< OctopusKingItem* >(object);
  (void)_this;
}
void OctopusKingItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OctopusKingItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OctopusKingItem& OctopusKingItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OctopusKingItem_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void OctopusKingItem::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.OctopusKingItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  selectlist_.Clear();
  selectedmultiple_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OctopusKingItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 selectedMultiple = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          selectedmultiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 selectList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_selectlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_selectlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OctopusKingItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.OctopusKingItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 selectedMultiple = 1;
  if (this->selectedmultiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_selectedmultiple(), target);
  }

  // repeated int32 selectList = 2;
  {
    int byte_size = _selectlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_selectlist(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.OctopusKingItem)
  return target;
}

size_t OctopusKingItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.OctopusKingItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 selectList = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->selectlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _selectlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 selectedMultiple = 1;
  if (this->selectedmultiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_selectedmultiple());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OctopusKingItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.OctopusKingItem)
  GOOGLE_DCHECK_NE(&from, this);
  const OctopusKingItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OctopusKingItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.OctopusKingItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.OctopusKingItem)
    MergeFrom(*source);
  }
}

void OctopusKingItem::MergeFrom(const OctopusKingItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.OctopusKingItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  selectlist_.MergeFrom(from.selectlist_);
  if (from.selectedmultiple() != 0) {
    _internal_set_selectedmultiple(from._internal_selectedmultiple());
  }
}

void OctopusKingItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.OctopusKingItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OctopusKingItem::CopyFrom(const OctopusKingItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.OctopusKingItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OctopusKingItem::IsInitialized() const {
  return true;
}

void OctopusKingItem::InternalSwap(OctopusKingItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  selectlist_.InternalSwap(&other->selectlist_);
  swap(selectedmultiple_, other->selectedmultiple_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OctopusKingItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OctopusKingInfo::_Internal {
 public:
};

OctopusKingInfo::OctopusKingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  multiples_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.OctopusKingInfo)
}
OctopusKingInfo::OctopusKingInfo(const OctopusKingInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      multiples_(from.multiples_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.OctopusKingInfo)
}

void OctopusKingInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OctopusKingInfo_BYDLD_2eproto.base);
}

OctopusKingInfo::~OctopusKingInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.OctopusKingInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OctopusKingInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OctopusKingInfo::ArenaDtor(void* object) {
  OctopusKingInfo* _this = reinterpret_cast< OctopusKingInfo* >(object);
  (void)_this;
}
void OctopusKingInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OctopusKingInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OctopusKingInfo& OctopusKingInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OctopusKingInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void OctopusKingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.OctopusKingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  multiples_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OctopusKingInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.OctopusKingItem multiples = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_multiples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OctopusKingInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.OctopusKingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.OctopusKingItem multiples = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_multiples_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_multiples(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.OctopusKingInfo)
  return target;
}

size_t OctopusKingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.OctopusKingInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.OctopusKingItem multiples = 1;
  total_size += 1UL * this->_internal_multiples_size();
  for (const auto& msg : this->multiples_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OctopusKingInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.OctopusKingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const OctopusKingInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OctopusKingInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.OctopusKingInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.OctopusKingInfo)
    MergeFrom(*source);
  }
}

void OctopusKingInfo::MergeFrom(const OctopusKingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.OctopusKingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  multiples_.MergeFrom(from.multiples_);
}

void OctopusKingInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.OctopusKingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OctopusKingInfo::CopyFrom(const OctopusKingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.OctopusKingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OctopusKingInfo::IsInitialized() const {
  return true;
}

void OctopusKingInfo::InternalSwap(OctopusKingInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  multiples_.InternalSwap(&other->multiples_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OctopusKingInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MagicCardInfo::_Internal {
 public:
};

MagicCardInfo::MagicCardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.MagicCardInfo)
}
MagicCardInfo::MagicCardInfo(const MagicCardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cardid_, &from.cardid_,
    static_cast<size_t>(reinterpret_cast<char*>(&label_) -
    reinterpret_cast<char*>(&cardid_)) + sizeof(label_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.MagicCardInfo)
}

void MagicCardInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cardid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&label_) -
      reinterpret_cast<char*>(&cardid_)) + sizeof(label_));
}

MagicCardInfo::~MagicCardInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.MagicCardInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MagicCardInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MagicCardInfo::ArenaDtor(void* object) {
  MagicCardInfo* _this = reinterpret_cast< MagicCardInfo* >(object);
  (void)_this;
}
void MagicCardInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MagicCardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MagicCardInfo& MagicCardInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MagicCardInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void MagicCardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.MagicCardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cardid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&label_) -
      reinterpret_cast<char*>(&cardid_)) + sizeof(label_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MagicCardInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cardId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cardid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 label = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MagicCardInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.MagicCardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cardId = 1;
  if (this->cardid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cardid(), target);
  }

  // int32 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  // int32 label = 3;
  if (this->label() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.MagicCardInfo)
  return target;
}

size_t MagicCardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.MagicCardInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cardId = 1;
  if (this->cardid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cardid());
  }

  // int32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }

  // int32 label = 3;
  if (this->label() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_label());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MagicCardInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.MagicCardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MagicCardInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MagicCardInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.MagicCardInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.MagicCardInfo)
    MergeFrom(*source);
  }
}

void MagicCardInfo::MergeFrom(const MagicCardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.MagicCardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cardid() != 0) {
    _internal_set_cardid(from._internal_cardid());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.label() != 0) {
    _internal_set_label(from._internal_label());
  }
}

void MagicCardInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.MagicCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MagicCardInfo::CopyFrom(const MagicCardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.MagicCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MagicCardInfo::IsInitialized() const {
  return true;
}

void MagicCardInfo::InternalSwap(MagicCardInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MagicCardInfo, label_)
      + sizeof(MagicCardInfo::label_)
      - PROTOBUF_FIELD_OFFSET(MagicCardInfo, cardid_)>(
          reinterpret_cast<char*>(&cardid_),
          reinterpret_cast<char*>(&other->cardid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MagicCardInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MagicInfo::_Internal {
 public:
};

MagicInfo::MagicInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  magiccardlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.MagicInfo)
}
MagicInfo::MagicInfo(const MagicInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      magiccardlist_(from.magiccardlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ratiocard_ = from.ratiocard_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.MagicInfo)
}

void MagicInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MagicInfo_BYDLD_2eproto.base);
  ratiocard_ = 0;
}

MagicInfo::~MagicInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.MagicInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MagicInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MagicInfo::ArenaDtor(void* object) {
  MagicInfo* _this = reinterpret_cast< MagicInfo* >(object);
  (void)_this;
}
void MagicInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MagicInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MagicInfo& MagicInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MagicInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void MagicInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.MagicInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  magiccardlist_.Clear();
  ratiocard_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MagicInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ratioCard = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ratiocard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.MagicCardInfo magicCardList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_magiccardlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MagicInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.MagicInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ratioCard = 1;
  if (this->ratiocard() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ratiocard(), target);
  }

  // repeated .BYDLD.MagicCardInfo magicCardList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_magiccardlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_magiccardlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.MagicInfo)
  return target;
}

size_t MagicInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.MagicInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.MagicCardInfo magicCardList = 2;
  total_size += 1UL * this->_internal_magiccardlist_size();
  for (const auto& msg : this->magiccardlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 ratioCard = 1;
  if (this->ratiocard() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratiocard());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MagicInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.MagicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MagicInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MagicInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.MagicInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.MagicInfo)
    MergeFrom(*source);
  }
}

void MagicInfo::MergeFrom(const MagicInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.MagicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  magiccardlist_.MergeFrom(from.magiccardlist_);
  if (from.ratiocard() != 0) {
    _internal_set_ratiocard(from._internal_ratiocard());
  }
}

void MagicInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.MagicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MagicInfo::CopyFrom(const MagicInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.MagicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MagicInfo::IsInitialized() const {
  return true;
}

void MagicInfo::InternalSwap(MagicInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  magiccardlist_.InternalSwap(&other->magiccardlist_);
  swap(ratiocard_, other->ratiocard_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MagicInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class roulette_result::_Internal {
 public:
};

roulette_result::roulette_result(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.roulette_result)
}
roulette_result::roulette_result(const roulette_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&crit_) -
    reinterpret_cast<char*>(&type_)) + sizeof(crit_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.roulette_result)
}

void roulette_result::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&crit_) -
      reinterpret_cast<char*>(&type_)) + sizeof(crit_));
}

roulette_result::~roulette_result() {
  // @@protoc_insertion_point(destructor:BYDLD.roulette_result)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void roulette_result::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void roulette_result::ArenaDtor(void* object) {
  roulette_result* _this = reinterpret_cast< roulette_result* >(object);
  (void)_this;
}
void roulette_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void roulette_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const roulette_result& roulette_result::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_roulette_result_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void roulette_result::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.roulette_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crit_) -
      reinterpret_cast<char*>(&type_)) + sizeof(crit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* roulette_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 multiple = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 crit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          crit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* roulette_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.roulette_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 location = 2;
  if (this->location() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_location(), target);
  }

  // int32 multiple = 3;
  if (this->multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_multiple(), target);
  }

  // int32 crit = 4;
  if (this->crit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_crit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.roulette_result)
  return target;
}

size_t roulette_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.roulette_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 location = 2;
  if (this->location() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_location());
  }

  // int32 multiple = 3;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_multiple());
  }

  // int32 crit = 4;
  if (this->crit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_crit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void roulette_result::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.roulette_result)
  GOOGLE_DCHECK_NE(&from, this);
  const roulette_result* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<roulette_result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.roulette_result)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.roulette_result)
    MergeFrom(*source);
  }
}

void roulette_result::MergeFrom(const roulette_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.roulette_result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.location() != 0) {
    _internal_set_location(from._internal_location());
  }
  if (from.multiple() != 0) {
    _internal_set_multiple(from._internal_multiple());
  }
  if (from.crit() != 0) {
    _internal_set_crit(from._internal_crit());
  }
}

void roulette_result::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.roulette_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void roulette_result::CopyFrom(const roulette_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.roulette_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool roulette_result::IsInitialized() const {
  return true;
}

void roulette_result::InternalSwap(roulette_result* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(roulette_result, crit_)
      + sizeof(roulette_result::crit_)
      - PROTOBUF_FIELD_OFFSET(roulette_result, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata roulette_result::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class zeus_result::_Internal {
 public:
};

zeus_result::zeus_result(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  layout_(arena),
  result_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.zeus_result)
}
zeus_result::zeus_result(const zeus_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      layout_(from.layout_),
      result_(from.result_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&pool_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(pool_id_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.zeus_result)
}

void zeus_result::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_zeus_result_BYDLD_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&pool_id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(pool_id_));
}

zeus_result::~zeus_result() {
  // @@protoc_insertion_point(destructor:BYDLD.zeus_result)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void zeus_result::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void zeus_result::ArenaDtor(void* object) {
  zeus_result* _this = reinterpret_cast< zeus_result* >(object);
  (void)_this;
}
void zeus_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void zeus_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const zeus_result& zeus_result::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_zeus_result_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void zeus_result::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.zeus_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layout_.Clear();
  result_.Clear();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pool_id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(pool_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* zeus_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 layout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_layout(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_layout(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.roulette_result result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 pool_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pool_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* zeus_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.zeus_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // repeated int32 layout = 2;
  {
    int byte_size = _layout_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_layout(), byte_size, target);
    }
  }

  // repeated .BYDLD.roulette_result result = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_result_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_result(i), target, stream);
  }

  // int32 pool_id = 4;
  if (this->pool_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_pool_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.zeus_result)
  return target;
}

size_t zeus_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.zeus_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 layout = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->layout_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _layout_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .BYDLD.roulette_result result = 3;
  total_size += 1UL * this->_internal_result_size();
  for (const auto& msg : this->result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 pool_id = 4;
  if (this->pool_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pool_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void zeus_result::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.zeus_result)
  GOOGLE_DCHECK_NE(&from, this);
  const zeus_result* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<zeus_result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.zeus_result)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.zeus_result)
    MergeFrom(*source);
  }
}

void zeus_result::MergeFrom(const zeus_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.zeus_result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  layout_.MergeFrom(from.layout_);
  result_.MergeFrom(from.result_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.pool_id() != 0) {
    _internal_set_pool_id(from._internal_pool_id());
  }
}

void zeus_result::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.zeus_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void zeus_result::CopyFrom(const zeus_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.zeus_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool zeus_result::IsInitialized() const {
  return true;
}

void zeus_result::InternalSwap(zeus_result* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  layout_.InternalSwap(&other->layout_);
  result_.InternalSwap(&other->result_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(zeus_result, pool_id_)
      + sizeof(zeus_result::pool_id_)
      - PROTOBUF_FIELD_OFFSET(zeus_result, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata zeus_result::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Zeus::_Internal {
 public:
};

Zeus::Zeus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  result_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.Zeus)
}
Zeus::Zeus(const Zeus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      result_(from.result_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  total_multiple_ = from.total_multiple_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.Zeus)
}

void Zeus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Zeus_BYDLD_2eproto.base);
  total_multiple_ = 0;
}

Zeus::~Zeus() {
  // @@protoc_insertion_point(destructor:BYDLD.Zeus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Zeus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Zeus::ArenaDtor(void* object) {
  Zeus* _this = reinterpret_cast< Zeus* >(object);
  (void)_this;
}
void Zeus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Zeus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Zeus& Zeus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Zeus_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void Zeus::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.Zeus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.Clear();
  total_multiple_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Zeus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.zeus_result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 total_multiple = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Zeus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.Zeus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.zeus_result result = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_result_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_result(i), target, stream);
  }

  // int32 total_multiple = 2;
  if (this->total_multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_multiple(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.Zeus)
  return target;
}

size_t Zeus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.Zeus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.zeus_result result = 1;
  total_size += 1UL * this->_internal_result_size();
  for (const auto& msg : this->result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 total_multiple = 2;
  if (this->total_multiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_multiple());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Zeus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.Zeus)
  GOOGLE_DCHECK_NE(&from, this);
  const Zeus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Zeus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.Zeus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.Zeus)
    MergeFrom(*source);
  }
}

void Zeus::MergeFrom(const Zeus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.Zeus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  result_.MergeFrom(from.result_);
  if (from.total_multiple() != 0) {
    _internal_set_total_multiple(from._internal_total_multiple());
  }
}

void Zeus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.Zeus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zeus::CopyFrom(const Zeus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.Zeus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zeus::IsInitialized() const {
  return true;
}

void Zeus::InternalSwap(Zeus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  result_.InternalSwap(&other->result_);
  swap(total_multiple_, other->total_multiple_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Zeus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GemConfig::_Internal {
 public:
};

GemConfig::GemConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.GemConfig)
}
GemConfig::GemConfig(const GemConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&multiple_) -
    reinterpret_cast<char*>(&id_)) + sizeof(multiple_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.GemConfig)
}

void GemConfig::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&multiple_) -
      reinterpret_cast<char*>(&id_)) + sizeof(multiple_));
}

GemConfig::~GemConfig() {
  // @@protoc_insertion_point(destructor:BYDLD.GemConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GemConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GemConfig::ArenaDtor(void* object) {
  GemConfig* _this = reinterpret_cast< GemConfig* >(object);
  (void)_this;
}
void GemConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GemConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GemConfig& GemConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GemConfig_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void GemConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.GemConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multiple_) -
      reinterpret_cast<char*>(&id_)) + sizeof(multiple_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GemConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 multiple = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GemConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.GemConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 multiple = 2;
  if (this->multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_multiple(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.GemConfig)
  return target;
}

size_t GemConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.GemConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 multiple = 2;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_multiple());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GemConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.GemConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const GemConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GemConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.GemConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.GemConfig)
    MergeFrom(*source);
  }
}

void GemConfig::MergeFrom(const GemConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.GemConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.multiple() != 0) {
    _internal_set_multiple(from._internal_multiple());
  }
}

void GemConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.GemConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GemConfig::CopyFrom(const GemConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.GemConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GemConfig::IsInitialized() const {
  return true;
}

void GemConfig::InternalSwap(GemConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GemConfig, multiple_)
      + sizeof(GemConfig::multiple_)
      - PROTOBUF_FIELD_OFFSET(GemConfig, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GemConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGemConfigList::_Internal {
 public:
};

SCGemConfigList::SCGemConfigList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  gem_config_list_(arena),
  critical_config_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCGemConfigList)
}
SCGemConfigList::SCGemConfigList(const SCGemConfigList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      gem_config_list_(from.gem_config_list_),
      critical_config_list_(from.critical_config_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCGemConfigList)
}

void SCGemConfigList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCGemConfigList_BYDLD_2eproto.base);
}

SCGemConfigList::~SCGemConfigList() {
  // @@protoc_insertion_point(destructor:BYDLD.SCGemConfigList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGemConfigList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCGemConfigList::ArenaDtor(void* object) {
  SCGemConfigList* _this = reinterpret_cast< SCGemConfigList* >(object);
  (void)_this;
}
void SCGemConfigList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGemConfigList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGemConfigList& SCGemConfigList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGemConfigList_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCGemConfigList::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCGemConfigList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gem_config_list_.Clear();
  critical_config_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGemConfigList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.GemConfig gem_config_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gem_config_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 critical_config_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_critical_config_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_critical_config_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGemConfigList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCGemConfigList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.GemConfig gem_config_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gem_config_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_gem_config_list(i), target, stream);
  }

  // repeated int32 critical_config_list = 2;
  {
    int byte_size = _critical_config_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_critical_config_list(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCGemConfigList)
  return target;
}

size_t SCGemConfigList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCGemConfigList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.GemConfig gem_config_list = 1;
  total_size += 1UL * this->_internal_gem_config_list_size();
  for (const auto& msg : this->gem_config_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 critical_config_list = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->critical_config_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _critical_config_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGemConfigList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCGemConfigList)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGemConfigList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGemConfigList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCGemConfigList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCGemConfigList)
    MergeFrom(*source);
  }
}

void SCGemConfigList::MergeFrom(const SCGemConfigList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCGemConfigList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gem_config_list_.MergeFrom(from.gem_config_list_);
  critical_config_list_.MergeFrom(from.critical_config_list_);
}

void SCGemConfigList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCGemConfigList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGemConfigList::CopyFrom(const SCGemConfigList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCGemConfigList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGemConfigList::IsInitialized() const {
  return true;
}

void SCGemConfigList::InternalSwap(SCGemConfigList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gem_config_list_.InternalSwap(&other->gem_config_list_);
  critical_config_list_.InternalSwap(&other->critical_config_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGemConfigList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ItemWheel::_Internal {
 public:
};

ItemWheel::ItemWheel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  item_list_(arena),
  result_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.ItemWheel)
}
ItemWheel::ItemWheel(const ItemWheel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      item_list_(from.item_list_),
      result_list_(from.result_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&wheel_id_, &from.wheel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&award_type_) -
    reinterpret_cast<char*>(&wheel_id_)) + sizeof(award_type_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.ItemWheel)
}

void ItemWheel::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&wheel_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&award_type_) -
      reinterpret_cast<char*>(&wheel_id_)) + sizeof(award_type_));
}

ItemWheel::~ItemWheel() {
  // @@protoc_insertion_point(destructor:BYDLD.ItemWheel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ItemWheel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ItemWheel::ArenaDtor(void* object) {
  ItemWheel* _this = reinterpret_cast< ItemWheel* >(object);
  (void)_this;
}
void ItemWheel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ItemWheel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ItemWheel& ItemWheel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ItemWheel_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void ItemWheel::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.ItemWheel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_list_.Clear();
  result_list_.Clear();
  ::memset(&wheel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&award_type_) -
      reinterpret_cast<char*>(&wheel_id_)) + sizeof(award_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemWheel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 wheel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          wheel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 wheel_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          wheel_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 item_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_item_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_item_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 result_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_result_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_result_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 wheel_multi = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          wheel_multi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 award_num = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          award_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 award_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          award_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ItemWheel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.ItemWheel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 wheel_id = 1;
  if (this->wheel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_wheel_id(), target);
  }

  // int32 wheel_level = 2;
  if (this->wheel_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_wheel_level(), target);
  }

  // repeated int32 item_list = 3;
  {
    int byte_size = _item_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_item_list(), byte_size, target);
    }
  }

  // repeated int32 result_list = 4;
  {
    int byte_size = _result_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_result_list(), byte_size, target);
    }
  }

  // int32 wheel_multi = 5;
  if (this->wheel_multi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_wheel_multi(), target);
  }

  // int32 award_num = 6;
  if (this->award_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_award_num(), target);
  }

  // int32 award_type = 7;
  if (this->award_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_award_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.ItemWheel)
  return target;
}

size_t ItemWheel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.ItemWheel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 item_list = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->item_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _item_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 result_list = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->result_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _result_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 wheel_id = 1;
  if (this->wheel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wheel_id());
  }

  // int32 wheel_level = 2;
  if (this->wheel_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wheel_level());
  }

  // int32 wheel_multi = 5;
  if (this->wheel_multi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wheel_multi());
  }

  // int32 award_num = 6;
  if (this->award_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_award_num());
  }

  // int32 award_type = 7;
  if (this->award_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_award_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ItemWheel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.ItemWheel)
  GOOGLE_DCHECK_NE(&from, this);
  const ItemWheel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ItemWheel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.ItemWheel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.ItemWheel)
    MergeFrom(*source);
  }
}

void ItemWheel::MergeFrom(const ItemWheel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.ItemWheel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_list_.MergeFrom(from.item_list_);
  result_list_.MergeFrom(from.result_list_);
  if (from.wheel_id() != 0) {
    _internal_set_wheel_id(from._internal_wheel_id());
  }
  if (from.wheel_level() != 0) {
    _internal_set_wheel_level(from._internal_wheel_level());
  }
  if (from.wheel_multi() != 0) {
    _internal_set_wheel_multi(from._internal_wheel_multi());
  }
  if (from.award_num() != 0) {
    _internal_set_award_num(from._internal_award_num());
  }
  if (from.award_type() != 0) {
    _internal_set_award_type(from._internal_award_type());
  }
}

void ItemWheel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.ItemWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemWheel::CopyFrom(const ItemWheel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.ItemWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemWheel::IsInitialized() const {
  return true;
}

void ItemWheel::InternalSwap(ItemWheel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  item_list_.InternalSwap(&other->item_list_);
  result_list_.InternalSwap(&other->result_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemWheel, award_type_)
      + sizeof(ItemWheel::award_type_)
      - PROTOBUF_FIELD_OFFSET(ItemWheel, wheel_id_)>(
          reinterpret_cast<char*>(&wheel_id_),
          reinterpret_cast<char*>(&other->wheel_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemWheel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CritWheel::_Internal {
 public:
};

CritWheel::CritWheel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  crit_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CritWheel)
}
CritWheel::CritWheel(const CritWheel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      crit_list_(from.crit_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  crit_result_ = from.crit_result_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CritWheel)
}

void CritWheel::SharedCtor() {
  crit_result_ = 0;
}

CritWheel::~CritWheel() {
  // @@protoc_insertion_point(destructor:BYDLD.CritWheel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CritWheel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CritWheel::ArenaDtor(void* object) {
  CritWheel* _this = reinterpret_cast< CritWheel* >(object);
  (void)_this;
}
void CritWheel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CritWheel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CritWheel& CritWheel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CritWheel_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CritWheel::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CritWheel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  crit_list_.Clear();
  crit_result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CritWheel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 crit_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_crit_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_crit_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 crit_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          crit_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CritWheel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CritWheel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 crit_list = 1;
  {
    int byte_size = _crit_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_crit_list(), byte_size, target);
    }
  }

  // int32 crit_result = 2;
  if (this->crit_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_crit_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CritWheel)
  return target;
}

size_t CritWheel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CritWheel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 crit_list = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->crit_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _crit_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 crit_result = 2;
  if (this->crit_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_crit_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CritWheel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CritWheel)
  GOOGLE_DCHECK_NE(&from, this);
  const CritWheel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CritWheel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CritWheel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CritWheel)
    MergeFrom(*source);
  }
}

void CritWheel::MergeFrom(const CritWheel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CritWheel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  crit_list_.MergeFrom(from.crit_list_);
  if (from.crit_result() != 0) {
    _internal_set_crit_result(from._internal_crit_result());
  }
}

void CritWheel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CritWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CritWheel::CopyFrom(const CritWheel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CritWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CritWheel::IsInitialized() const {
  return true;
}

void CritWheel::InternalSwap(CritWheel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  crit_list_.InternalSwap(&other->crit_list_);
  swap(crit_result_, other->crit_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CritWheel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GoldenJadeInfo::_Internal {
 public:
  static const ::BYDLD::CritWheel& crit_wheel(const GoldenJadeInfo* msg);
};

const ::BYDLD::CritWheel&
GoldenJadeInfo::_Internal::crit_wheel(const GoldenJadeInfo* msg) {
  return *msg->crit_wheel_;
}
GoldenJadeInfo::GoldenJadeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  item_wheels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.GoldenJadeInfo)
}
GoldenJadeInfo::GoldenJadeInfo(const GoldenJadeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      item_wheels_(from.item_wheels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_crit_wheel()) {
    crit_wheel_ = new ::BYDLD::CritWheel(*from.crit_wheel_);
  } else {
    crit_wheel_ = nullptr;
  }
  total_multi_ = from.total_multi_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.GoldenJadeInfo)
}

void GoldenJadeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GoldenJadeInfo_BYDLD_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&crit_wheel_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&total_multi_) -
      reinterpret_cast<char*>(&crit_wheel_)) + sizeof(total_multi_));
}

GoldenJadeInfo::~GoldenJadeInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.GoldenJadeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GoldenJadeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete crit_wheel_;
}

void GoldenJadeInfo::ArenaDtor(void* object) {
  GoldenJadeInfo* _this = reinterpret_cast< GoldenJadeInfo* >(object);
  (void)_this;
}
void GoldenJadeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GoldenJadeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GoldenJadeInfo& GoldenJadeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GoldenJadeInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void GoldenJadeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.GoldenJadeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_wheels_.Clear();
  if (GetArena() == nullptr && crit_wheel_ != nullptr) {
    delete crit_wheel_;
  }
  crit_wheel_ = nullptr;
  total_multi_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GoldenJadeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.ItemWheel item_wheels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item_wheels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .BYDLD.CritWheel crit_wheel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_crit_wheel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_multi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_multi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GoldenJadeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.GoldenJadeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.ItemWheel item_wheels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_wheels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_item_wheels(i), target, stream);
  }

  // .BYDLD.CritWheel crit_wheel = 2;
  if (this->has_crit_wheel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::crit_wheel(this), target, stream);
  }

  // int32 total_multi = 3;
  if (this->total_multi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_multi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.GoldenJadeInfo)
  return target;
}

size_t GoldenJadeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.GoldenJadeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.ItemWheel item_wheels = 1;
  total_size += 1UL * this->_internal_item_wheels_size();
  for (const auto& msg : this->item_wheels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .BYDLD.CritWheel crit_wheel = 2;
  if (this->has_crit_wheel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *crit_wheel_);
  }

  // int32 total_multi = 3;
  if (this->total_multi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_multi());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GoldenJadeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.GoldenJadeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GoldenJadeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GoldenJadeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.GoldenJadeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.GoldenJadeInfo)
    MergeFrom(*source);
  }
}

void GoldenJadeInfo::MergeFrom(const GoldenJadeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.GoldenJadeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_wheels_.MergeFrom(from.item_wheels_);
  if (from.has_crit_wheel()) {
    _internal_mutable_crit_wheel()->::BYDLD::CritWheel::MergeFrom(from._internal_crit_wheel());
  }
  if (from.total_multi() != 0) {
    _internal_set_total_multi(from._internal_total_multi());
  }
}

void GoldenJadeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.GoldenJadeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoldenJadeInfo::CopyFrom(const GoldenJadeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.GoldenJadeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoldenJadeInfo::IsInitialized() const {
  return true;
}

void GoldenJadeInfo::InternalSwap(GoldenJadeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  item_wheels_.InternalSwap(&other->item_wheels_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GoldenJadeInfo, total_multi_)
      + sizeof(GoldenJadeInfo::total_multi_)
      - PROTOBUF_FIELD_OFFSET(GoldenJadeInfo, crit_wheel_)>(
          reinterpret_cast<char*>(&crit_wheel_),
          reinterpret_cast<char*>(&other->crit_wheel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GoldenJadeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AztecGemConfigItem::_Internal {
 public:
};

AztecGemConfigItem::AztecGemConfigItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.AztecGemConfigItem)
}
AztecGemConfigItem::AztecGemConfigItem(const AztecGemConfigItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num_, &from.num_,
    static_cast<size_t>(reinterpret_cast<char*>(&ratio_) -
    reinterpret_cast<char*>(&num_)) + sizeof(ratio_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.AztecGemConfigItem)
}

void AztecGemConfigItem::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&num_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ratio_) -
      reinterpret_cast<char*>(&num_)) + sizeof(ratio_));
}

AztecGemConfigItem::~AztecGemConfigItem() {
  // @@protoc_insertion_point(destructor:BYDLD.AztecGemConfigItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AztecGemConfigItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AztecGemConfigItem::ArenaDtor(void* object) {
  AztecGemConfigItem* _this = reinterpret_cast< AztecGemConfigItem* >(object);
  (void)_this;
}
void AztecGemConfigItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AztecGemConfigItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AztecGemConfigItem& AztecGemConfigItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AztecGemConfigItem_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void AztecGemConfigItem::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.AztecGemConfigItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ratio_) -
      reinterpret_cast<char*>(&num_)) + sizeof(ratio_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AztecGemConfigItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AztecGemConfigItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.AztecGemConfigItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num = 1;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num(), target);
  }

  // int32 ratio = 2;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.AztecGemConfigItem)
  return target;
}

size_t AztecGemConfigItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.AztecGemConfigItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 num = 1;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  // int32 ratio = 2;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AztecGemConfigItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.AztecGemConfigItem)
  GOOGLE_DCHECK_NE(&from, this);
  const AztecGemConfigItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AztecGemConfigItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.AztecGemConfigItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.AztecGemConfigItem)
    MergeFrom(*source);
  }
}

void AztecGemConfigItem::MergeFrom(const AztecGemConfigItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.AztecGemConfigItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
}

void AztecGemConfigItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.AztecGemConfigItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AztecGemConfigItem::CopyFrom(const AztecGemConfigItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.AztecGemConfigItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AztecGemConfigItem::IsInitialized() const {
  return true;
}

void AztecGemConfigItem::InternalSwap(AztecGemConfigItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AztecGemConfigItem, ratio_)
      + sizeof(AztecGemConfigItem::ratio_)
      - PROTOBUF_FIELD_OFFSET(AztecGemConfigItem, num_)>(
          reinterpret_cast<char*>(&num_),
          reinterpret_cast<char*>(&other->num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AztecGemConfigItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AztecGemConfig::_Internal {
 public:
};

AztecGemConfig::AztecGemConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.AztecGemConfig)
}
AztecGemConfig::AztecGemConfig(const AztecGemConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.AztecGemConfig)
}

void AztecGemConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AztecGemConfig_BYDLD_2eproto.base);
  type_ = 0;
}

AztecGemConfig::~AztecGemConfig() {
  // @@protoc_insertion_point(destructor:BYDLD.AztecGemConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AztecGemConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AztecGemConfig::ArenaDtor(void* object) {
  AztecGemConfig* _this = reinterpret_cast< AztecGemConfig* >(object);
  (void)_this;
}
void AztecGemConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AztecGemConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AztecGemConfig& AztecGemConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AztecGemConfig_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void AztecGemConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.AztecGemConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AztecGemConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.AztecGemConfigItem items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .BYDLD.AztecGemType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::BYDLD::AztecGemType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AztecGemConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.AztecGemConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.AztecGemConfigItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  // .BYDLD.AztecGemType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.AztecGemConfig)
  return target;
}

size_t AztecGemConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.AztecGemConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.AztecGemConfigItem items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .BYDLD.AztecGemType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AztecGemConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.AztecGemConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const AztecGemConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AztecGemConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.AztecGemConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.AztecGemConfig)
    MergeFrom(*source);
  }
}

void AztecGemConfig::MergeFrom(const AztecGemConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.AztecGemConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void AztecGemConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.AztecGemConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AztecGemConfig::CopyFrom(const AztecGemConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.AztecGemConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AztecGemConfig::IsInitialized() const {
  return true;
}

void AztecGemConfig::InternalSwap(AztecGemConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AztecGemConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSAztecGemConfig::_Internal {
 public:
};

CSAztecGemConfig::CSAztecGemConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSAztecGemConfig)
}
CSAztecGemConfig::CSAztecGemConfig(const CSAztecGemConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSAztecGemConfig)
}

void CSAztecGemConfig::SharedCtor() {
}

CSAztecGemConfig::~CSAztecGemConfig() {
  // @@protoc_insertion_point(destructor:BYDLD.CSAztecGemConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSAztecGemConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSAztecGemConfig::ArenaDtor(void* object) {
  CSAztecGemConfig* _this = reinterpret_cast< CSAztecGemConfig* >(object);
  (void)_this;
}
void CSAztecGemConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSAztecGemConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSAztecGemConfig& CSAztecGemConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSAztecGemConfig_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSAztecGemConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSAztecGemConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSAztecGemConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSAztecGemConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSAztecGemConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSAztecGemConfig)
  return target;
}

size_t CSAztecGemConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSAztecGemConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSAztecGemConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSAztecGemConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CSAztecGemConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSAztecGemConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSAztecGemConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSAztecGemConfig)
    MergeFrom(*source);
  }
}

void CSAztecGemConfig::MergeFrom(const CSAztecGemConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSAztecGemConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSAztecGemConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSAztecGemConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSAztecGemConfig::CopyFrom(const CSAztecGemConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSAztecGemConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAztecGemConfig::IsInitialized() const {
  return true;
}

void CSAztecGemConfig::InternalSwap(CSAztecGemConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSAztecGemConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCAztecGemConfig::_Internal {
 public:
};

SCAztecGemConfig::SCAztecGemConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  configs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCAztecGemConfig)
}
SCAztecGemConfig::SCAztecGemConfig(const SCAztecGemConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      configs_(from.configs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCAztecGemConfig)
}

void SCAztecGemConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCAztecGemConfig_BYDLD_2eproto.base);
}

SCAztecGemConfig::~SCAztecGemConfig() {
  // @@protoc_insertion_point(destructor:BYDLD.SCAztecGemConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCAztecGemConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCAztecGemConfig::ArenaDtor(void* object) {
  SCAztecGemConfig* _this = reinterpret_cast< SCAztecGemConfig* >(object);
  (void)_this;
}
void SCAztecGemConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCAztecGemConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCAztecGemConfig& SCAztecGemConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCAztecGemConfig_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCAztecGemConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCAztecGemConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  configs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCAztecGemConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.AztecGemConfig configs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCAztecGemConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCAztecGemConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.AztecGemConfig configs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_configs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_configs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCAztecGemConfig)
  return target;
}

size_t SCAztecGemConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCAztecGemConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.AztecGemConfig configs = 1;
  total_size += 1UL * this->_internal_configs_size();
  for (const auto& msg : this->configs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCAztecGemConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCAztecGemConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SCAztecGemConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCAztecGemConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCAztecGemConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCAztecGemConfig)
    MergeFrom(*source);
  }
}

void SCAztecGemConfig::MergeFrom(const SCAztecGemConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCAztecGemConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  configs_.MergeFrom(from.configs_);
}

void SCAztecGemConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCAztecGemConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCAztecGemConfig::CopyFrom(const SCAztecGemConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCAztecGemConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCAztecGemConfig::IsInitialized() const {
  return true;
}

void SCAztecGemConfig::InternalSwap(SCAztecGemConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  configs_.InternalSwap(&other->configs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCAztecGemConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AztecClearReward::_Internal {
 public:
};

AztecClearReward::AztecClearReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.AztecClearReward)
}
AztecClearReward::AztecClearReward(const AztecClearReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&type_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.AztecClearReward)
}

void AztecClearReward::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&type_)) + sizeof(value_));
}

AztecClearReward::~AztecClearReward() {
  // @@protoc_insertion_point(destructor:BYDLD.AztecClearReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AztecClearReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AztecClearReward::ArenaDtor(void* object) {
  AztecClearReward* _this = reinterpret_cast< AztecClearReward* >(object);
  (void)_this;
}
void AztecClearReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AztecClearReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AztecClearReward& AztecClearReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AztecClearReward_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void AztecClearReward::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.AztecClearReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&type_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AztecClearReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BYDLD.AztecGemType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::BYDLD::AztecGemType>(val));
        } else goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AztecClearReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.AztecClearReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BYDLD.AztecGemType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.AztecClearReward)
  return target;
}

size_t AztecClearReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.AztecClearReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BYDLD.AztecGemType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AztecClearReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.AztecClearReward)
  GOOGLE_DCHECK_NE(&from, this);
  const AztecClearReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AztecClearReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.AztecClearReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.AztecClearReward)
    MergeFrom(*source);
  }
}

void AztecClearReward::MergeFrom(const AztecClearReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.AztecClearReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void AztecClearReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.AztecClearReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AztecClearReward::CopyFrom(const AztecClearReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.AztecClearReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AztecClearReward::IsInitialized() const {
  return true;
}

void AztecClearReward::InternalSwap(AztecClearReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AztecClearReward, value_)
      + sizeof(AztecClearReward::value_)
      - PROTOBUF_FIELD_OFFSET(AztecClearReward, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AztecClearReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AztecTable::_Internal {
 public:
};

AztecTable::AztecTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  gems_(arena),
  rewards_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.AztecTable)
}
AztecTable::AztecTable(const AztecTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      gems_(from.gems_),
      rewards_(from.rewards_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.AztecTable)
}

void AztecTable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AztecTable_BYDLD_2eproto.base);
}

AztecTable::~AztecTable() {
  // @@protoc_insertion_point(destructor:BYDLD.AztecTable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AztecTable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AztecTable::ArenaDtor(void* object) {
  AztecTable* _this = reinterpret_cast< AztecTable* >(object);
  (void)_this;
}
void AztecTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AztecTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AztecTable& AztecTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AztecTable_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void AztecTable::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.AztecTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gems_.Clear();
  rewards_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AztecTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.AztecGemType gems = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_gems(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_gems(static_cast<::BYDLD::AztecGemType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.AztecClearReward rewards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AztecTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.AztecTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.AztecGemType gems = 1;
  {
    int byte_size = _gems_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, gems_, byte_size, target);
    }
  }

  // repeated .BYDLD.AztecClearReward rewards = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rewards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_rewards(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.AztecTable)
  return target;
}

size_t AztecTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.AztecTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.AztecGemType gems = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_gems_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_gems(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _gems_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .BYDLD.AztecClearReward rewards = 2;
  total_size += 1UL * this->_internal_rewards_size();
  for (const auto& msg : this->rewards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AztecTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.AztecTable)
  GOOGLE_DCHECK_NE(&from, this);
  const AztecTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AztecTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.AztecTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.AztecTable)
    MergeFrom(*source);
  }
}

void AztecTable::MergeFrom(const AztecTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.AztecTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gems_.MergeFrom(from.gems_);
  rewards_.MergeFrom(from.rewards_);
}

void AztecTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.AztecTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AztecTable::CopyFrom(const AztecTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.AztecTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AztecTable::IsInitialized() const {
  return true;
}

void AztecTable::InternalSwap(AztecTable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gems_.InternalSwap(&other->gems_);
  rewards_.InternalSwap(&other->rewards_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AztecTable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AztecStep::_Internal {
 public:
};

AztecStep::AztecStep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tables_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.AztecStep)
}
AztecStep::AztecStep(const AztecStep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tables_(from.tables_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.AztecStep)
}

void AztecStep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AztecStep_BYDLD_2eproto.base);
}

AztecStep::~AztecStep() {
  // @@protoc_insertion_point(destructor:BYDLD.AztecStep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AztecStep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AztecStep::ArenaDtor(void* object) {
  AztecStep* _this = reinterpret_cast< AztecStep* >(object);
  (void)_this;
}
void AztecStep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AztecStep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AztecStep& AztecStep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AztecStep_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void AztecStep::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.AztecStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tables_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AztecStep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.AztecTable tables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AztecStep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.AztecStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.AztecTable tables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tables(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.AztecStep)
  return target;
}

size_t AztecStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.AztecStep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.AztecTable tables = 1;
  total_size += 1UL * this->_internal_tables_size();
  for (const auto& msg : this->tables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AztecStep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.AztecStep)
  GOOGLE_DCHECK_NE(&from, this);
  const AztecStep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AztecStep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.AztecStep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.AztecStep)
    MergeFrom(*source);
  }
}

void AztecStep::MergeFrom(const AztecStep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.AztecStep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tables_.MergeFrom(from.tables_);
}

void AztecStep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.AztecStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AztecStep::CopyFrom(const AztecStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.AztecStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AztecStep::IsInitialized() const {
  return true;
}

void AztecStep::InternalSwap(AztecStep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tables_.InternalSwap(&other->tables_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AztecStep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AztecDataInfo::_Internal {
 public:
};

AztecDataInfo::AztecDataInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  steps_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.AztecDataInfo)
}
AztecDataInfo::AztecDataInfo(const AztecDataInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      steps_(from.steps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  total_win_ = from.total_win_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.AztecDataInfo)
}

void AztecDataInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AztecDataInfo_BYDLD_2eproto.base);
  total_win_ = 0;
}

AztecDataInfo::~AztecDataInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.AztecDataInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AztecDataInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AztecDataInfo::ArenaDtor(void* object) {
  AztecDataInfo* _this = reinterpret_cast< AztecDataInfo* >(object);
  (void)_this;
}
void AztecDataInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AztecDataInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AztecDataInfo& AztecDataInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AztecDataInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void AztecDataInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.AztecDataInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steps_.Clear();
  total_win_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AztecDataInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.AztecStep steps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_steps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 total_win = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_win_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AztecDataInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.AztecDataInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.AztecStep steps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_steps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_steps(i), target, stream);
  }

  // int32 total_win = 2;
  if (this->total_win() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_win(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.AztecDataInfo)
  return target;
}

size_t AztecDataInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.AztecDataInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.AztecStep steps = 1;
  total_size += 1UL * this->_internal_steps_size();
  for (const auto& msg : this->steps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 total_win = 2;
  if (this->total_win() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_win());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AztecDataInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.AztecDataInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AztecDataInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AztecDataInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.AztecDataInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.AztecDataInfo)
    MergeFrom(*source);
  }
}

void AztecDataInfo::MergeFrom(const AztecDataInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.AztecDataInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steps_.MergeFrom(from.steps_);
  if (from.total_win() != 0) {
    _internal_set_total_win(from._internal_total_win());
  }
}

void AztecDataInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.AztecDataInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AztecDataInfo::CopyFrom(const AztecDataInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.AztecDataInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AztecDataInfo::IsInitialized() const {
  return true;
}

void AztecDataInfo::InternalSwap(AztecDataInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  steps_.InternalSwap(&other->steps_);
  swap(total_win_, other->total_win_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AztecDataInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Capturefish::_Internal {
 public:
  static const ::BYDLD::DragonBallInfo& ball_info(const Capturefish* msg);
  static const ::BYDLD::OctopusKingInfo& octopus_king(const Capturefish* msg);
  static const ::BYDLD::MagicInfo& magic_info(const Capturefish* msg);
  static const ::BYDLD::Zeus& zeus_info(const Capturefish* msg);
  static const ::BYDLD::GoldenJadeInfo& golden_jade_info(const Capturefish* msg);
  static const ::BYDLD::AztecDataInfo& aztec_data_info(const Capturefish* msg);
};

const ::BYDLD::DragonBallInfo&
Capturefish::_Internal::ball_info(const Capturefish* msg) {
  return *msg->ball_info_;
}
const ::BYDLD::OctopusKingInfo&
Capturefish::_Internal::octopus_king(const Capturefish* msg) {
  return *msg->octopus_king_;
}
const ::BYDLD::MagicInfo&
Capturefish::_Internal::magic_info(const Capturefish* msg) {
  return *msg->magic_info_;
}
const ::BYDLD::Zeus&
Capturefish::_Internal::zeus_info(const Capturefish* msg) {
  return *msg->zeus_info_;
}
const ::BYDLD::GoldenJadeInfo&
Capturefish::_Internal::golden_jade_info(const Capturefish* msg) {
  return *msg->golden_jade_info_;
}
const ::BYDLD::AztecDataInfo&
Capturefish::_Internal::aztec_data_info(const Capturefish* msg) {
  return *msg->aztec_data_info_;
}
Capturefish::Capturefish(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  torpedoes_(arena),
  effect_fish_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.Capturefish)
}
Capturefish::Capturefish(const Capturefish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      torpedoes_(from.torpedoes_),
      effect_fish_(from.effect_fish_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ball_info()) {
    ball_info_ = new ::BYDLD::DragonBallInfo(*from.ball_info_);
  } else {
    ball_info_ = nullptr;
  }
  if (from._internal_has_octopus_king()) {
    octopus_king_ = new ::BYDLD::OctopusKingInfo(*from.octopus_king_);
  } else {
    octopus_king_ = nullptr;
  }
  if (from._internal_has_magic_info()) {
    magic_info_ = new ::BYDLD::MagicInfo(*from.magic_info_);
  } else {
    magic_info_ = nullptr;
  }
  if (from._internal_has_zeus_info()) {
    zeus_info_ = new ::BYDLD::Zeus(*from.zeus_info_);
  } else {
    zeus_info_ = nullptr;
  }
  if (from._internal_has_golden_jade_info()) {
    golden_jade_info_ = new ::BYDLD::GoldenJadeInfo(*from.golden_jade_info_);
  } else {
    golden_jade_info_ = nullptr;
  }
  if (from._internal_has_aztec_data_info()) {
    aztec_data_info_ = new ::BYDLD::AztecDataInfo(*from.aztec_data_info_);
  } else {
    aztec_data_info_ = nullptr;
  }
  ::memcpy(&fish_uid_, &from.fish_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_reward_) -
    reinterpret_cast<char*>(&fish_uid_)) + sizeof(is_reward_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.Capturefish)
}

void Capturefish::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Capturefish_BYDLD_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ball_info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_reward_) -
      reinterpret_cast<char*>(&ball_info_)) + sizeof(is_reward_));
}

Capturefish::~Capturefish() {
  // @@protoc_insertion_point(destructor:BYDLD.Capturefish)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Capturefish::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ball_info_;
  if (this != internal_default_instance()) delete octopus_king_;
  if (this != internal_default_instance()) delete magic_info_;
  if (this != internal_default_instance()) delete zeus_info_;
  if (this != internal_default_instance()) delete golden_jade_info_;
  if (this != internal_default_instance()) delete aztec_data_info_;
}

void Capturefish::ArenaDtor(void* object) {
  Capturefish* _this = reinterpret_cast< Capturefish* >(object);
  (void)_this;
}
void Capturefish::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Capturefish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Capturefish& Capturefish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Capturefish_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void Capturefish::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.Capturefish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  torpedoes_.Clear();
  effect_fish_.Clear();
  if (GetArena() == nullptr && ball_info_ != nullptr) {
    delete ball_info_;
  }
  ball_info_ = nullptr;
  if (GetArena() == nullptr && octopus_king_ != nullptr) {
    delete octopus_king_;
  }
  octopus_king_ = nullptr;
  if (GetArena() == nullptr && magic_info_ != nullptr) {
    delete magic_info_;
  }
  magic_info_ = nullptr;
  if (GetArena() == nullptr && zeus_info_ != nullptr) {
    delete zeus_info_;
  }
  zeus_info_ = nullptr;
  if (GetArena() == nullptr && golden_jade_info_ != nullptr) {
    delete golden_jade_info_;
  }
  golden_jade_info_ = nullptr;
  if (GetArena() == nullptr && aztec_data_info_ != nullptr) {
    delete aztec_data_info_;
  }
  aztec_data_info_ = nullptr;
  ::memset(&fish_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_reward_) -
      reinterpret_cast<char*>(&fish_uid_)) + sizeof(is_reward_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Capturefish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 fish_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fish_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 get_score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          get_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fish_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.ObjectData torpedoes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_torpedoes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 lucky_ratio = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          lucky_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trident_score = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          trident_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.EffectFish effect_fish = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_effect_fish(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 award_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          award_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bulletType = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          bullettype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 multiple = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 get_peilv = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          get_peilv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 death = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          death_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stage = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sub_stage = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          sub_stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 award_index = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          award_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 crit_multiple = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          crit_multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ingot_multi = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ingot_multi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 frozen_time = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          frozen_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trident_multi = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          trident_multi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 scratch_card = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          scratch_card_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BYDLD.DragonBallInfo ball_info = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_ball_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BYDLD.OctopusKingInfo octopus_king = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_octopus_king(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_reward = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          is_reward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BYDLD.MagicInfo magic_info = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_magic_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BYDLD.Zeus zeus_info = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_zeus_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BYDLD.GoldenJadeInfo golden_jade_info = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_golden_jade_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BYDLD.AztecDataInfo aztec_data_info = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_aztec_data_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Capturefish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.Capturefish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fish_uid = 1;
  if (this->fish_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fish_uid(), target);
  }

  // int32 get_score = 2;
  if (this->get_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_get_score(), target);
  }

  // int32 fish_id = 3;
  if (this->fish_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_fish_id(), target);
  }

  // repeated .BYDLD.ObjectData torpedoes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_torpedoes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_torpedoes(i), target, stream);
  }

  // int32 lucky_ratio = 5;
  if (this->lucky_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_lucky_ratio(), target);
  }

  // int32 trident_score = 6;
  if (this->trident_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_trident_score(), target);
  }

  // repeated .BYDLD.EffectFish effect_fish = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_effect_fish_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_effect_fish(i), target, stream);
  }

  // int32 award_time = 8;
  if (this->award_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_award_time(), target);
  }

  // int32 bulletType = 9;
  if (this->bullettype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_bullettype(), target);
  }

  // int32 multiple = 10;
  if (this->multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_multiple(), target);
  }

  // int32 get_peilv = 11;
  if (this->get_peilv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_get_peilv(), target);
  }

  // int32 death = 12;
  if (this->death() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_death(), target);
  }

  // int32 stage = 13;
  if (this->stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_stage(), target);
  }

  // int32 sub_stage = 14;
  if (this->sub_stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_sub_stage(), target);
  }

  // int32 award_index = 15;
  if (this->award_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_award_index(), target);
  }

  // int32 crit_multiple = 16;
  if (this->crit_multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_crit_multiple(), target);
  }

  // int32 ingot_multi = 17;
  if (this->ingot_multi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_ingot_multi(), target);
  }

  // int32 ratio = 18;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_ratio(), target);
  }

  // int32 frozen_time = 19;
  if (this->frozen_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_frozen_time(), target);
  }

  // int32 trident_multi = 20;
  if (this->trident_multi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_trident_multi(), target);
  }

  // int32 scratch_card = 21;
  if (this->scratch_card() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_scratch_card(), target);
  }

  // .BYDLD.DragonBallInfo ball_info = 22;
  if (this->has_ball_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::ball_info(this), target, stream);
  }

  // .BYDLD.OctopusKingInfo octopus_king = 23;
  if (this->has_octopus_king()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::octopus_king(this), target, stream);
  }

  // bool is_reward = 24;
  if (this->is_reward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_is_reward(), target);
  }

  // .BYDLD.MagicInfo magic_info = 25;
  if (this->has_magic_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::magic_info(this), target, stream);
  }

  // .BYDLD.Zeus zeus_info = 26;
  if (this->has_zeus_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::zeus_info(this), target, stream);
  }

  // .BYDLD.GoldenJadeInfo golden_jade_info = 27;
  if (this->has_golden_jade_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::golden_jade_info(this), target, stream);
  }

  // .BYDLD.AztecDataInfo aztec_data_info = 28;
  if (this->has_aztec_data_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::aztec_data_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.Capturefish)
  return target;
}

size_t Capturefish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.Capturefish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.ObjectData torpedoes = 4;
  total_size += 1UL * this->_internal_torpedoes_size();
  for (const auto& msg : this->torpedoes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .BYDLD.EffectFish effect_fish = 7;
  total_size += 1UL * this->_internal_effect_fish_size();
  for (const auto& msg : this->effect_fish_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .BYDLD.DragonBallInfo ball_info = 22;
  if (this->has_ball_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ball_info_);
  }

  // .BYDLD.OctopusKingInfo octopus_king = 23;
  if (this->has_octopus_king()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *octopus_king_);
  }

  // .BYDLD.MagicInfo magic_info = 25;
  if (this->has_magic_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *magic_info_);
  }

  // .BYDLD.Zeus zeus_info = 26;
  if (this->has_zeus_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *zeus_info_);
  }

  // .BYDLD.GoldenJadeInfo golden_jade_info = 27;
  if (this->has_golden_jade_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *golden_jade_info_);
  }

  // .BYDLD.AztecDataInfo aztec_data_info = 28;
  if (this->has_aztec_data_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *aztec_data_info_);
  }

  // int32 fish_uid = 1;
  if (this->fish_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_uid());
  }

  // int32 get_score = 2;
  if (this->get_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_get_score());
  }

  // int32 fish_id = 3;
  if (this->fish_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_id());
  }

  // int32 lucky_ratio = 5;
  if (this->lucky_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lucky_ratio());
  }

  // int32 trident_score = 6;
  if (this->trident_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trident_score());
  }

  // int32 award_time = 8;
  if (this->award_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_award_time());
  }

  // int32 bulletType = 9;
  if (this->bullettype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bullettype());
  }

  // int32 multiple = 10;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_multiple());
  }

  // int32 get_peilv = 11;
  if (this->get_peilv() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_get_peilv());
  }

  // int32 death = 12;
  if (this->death() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_death());
  }

  // int32 stage = 13;
  if (this->stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stage());
  }

  // int32 sub_stage = 14;
  if (this->sub_stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sub_stage());
  }

  // int32 award_index = 15;
  if (this->award_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_award_index());
  }

  // int32 crit_multiple = 16;
  if (this->crit_multiple() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_crit_multiple());
  }

  // int32 ingot_multi = 17;
  if (this->ingot_multi() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ingot_multi());
  }

  // int32 ratio = 18;
  if (this->ratio() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // int32 frozen_time = 19;
  if (this->frozen_time() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frozen_time());
  }

  // int32 trident_multi = 20;
  if (this->trident_multi() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trident_multi());
  }

  // int32 scratch_card = 21;
  if (this->scratch_card() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scratch_card());
  }

  // bool is_reward = 24;
  if (this->is_reward() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Capturefish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.Capturefish)
  GOOGLE_DCHECK_NE(&from, this);
  const Capturefish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Capturefish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.Capturefish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.Capturefish)
    MergeFrom(*source);
  }
}

void Capturefish::MergeFrom(const Capturefish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.Capturefish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  torpedoes_.MergeFrom(from.torpedoes_);
  effect_fish_.MergeFrom(from.effect_fish_);
  if (from.has_ball_info()) {
    _internal_mutable_ball_info()->::BYDLD::DragonBallInfo::MergeFrom(from._internal_ball_info());
  }
  if (from.has_octopus_king()) {
    _internal_mutable_octopus_king()->::BYDLD::OctopusKingInfo::MergeFrom(from._internal_octopus_king());
  }
  if (from.has_magic_info()) {
    _internal_mutable_magic_info()->::BYDLD::MagicInfo::MergeFrom(from._internal_magic_info());
  }
  if (from.has_zeus_info()) {
    _internal_mutable_zeus_info()->::BYDLD::Zeus::MergeFrom(from._internal_zeus_info());
  }
  if (from.has_golden_jade_info()) {
    _internal_mutable_golden_jade_info()->::BYDLD::GoldenJadeInfo::MergeFrom(from._internal_golden_jade_info());
  }
  if (from.has_aztec_data_info()) {
    _internal_mutable_aztec_data_info()->::BYDLD::AztecDataInfo::MergeFrom(from._internal_aztec_data_info());
  }
  if (from.fish_uid() != 0) {
    _internal_set_fish_uid(from._internal_fish_uid());
  }
  if (from.get_score() != 0) {
    _internal_set_get_score(from._internal_get_score());
  }
  if (from.fish_id() != 0) {
    _internal_set_fish_id(from._internal_fish_id());
  }
  if (from.lucky_ratio() != 0) {
    _internal_set_lucky_ratio(from._internal_lucky_ratio());
  }
  if (from.trident_score() != 0) {
    _internal_set_trident_score(from._internal_trident_score());
  }
  if (from.award_time() != 0) {
    _internal_set_award_time(from._internal_award_time());
  }
  if (from.bullettype() != 0) {
    _internal_set_bullettype(from._internal_bullettype());
  }
  if (from.multiple() != 0) {
    _internal_set_multiple(from._internal_multiple());
  }
  if (from.get_peilv() != 0) {
    _internal_set_get_peilv(from._internal_get_peilv());
  }
  if (from.death() != 0) {
    _internal_set_death(from._internal_death());
  }
  if (from.stage() != 0) {
    _internal_set_stage(from._internal_stage());
  }
  if (from.sub_stage() != 0) {
    _internal_set_sub_stage(from._internal_sub_stage());
  }
  if (from.award_index() != 0) {
    _internal_set_award_index(from._internal_award_index());
  }
  if (from.crit_multiple() != 0) {
    _internal_set_crit_multiple(from._internal_crit_multiple());
  }
  if (from.ingot_multi() != 0) {
    _internal_set_ingot_multi(from._internal_ingot_multi());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.frozen_time() != 0) {
    _internal_set_frozen_time(from._internal_frozen_time());
  }
  if (from.trident_multi() != 0) {
    _internal_set_trident_multi(from._internal_trident_multi());
  }
  if (from.scratch_card() != 0) {
    _internal_set_scratch_card(from._internal_scratch_card());
  }
  if (from.is_reward() != 0) {
    _internal_set_is_reward(from._internal_is_reward());
  }
}

void Capturefish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.Capturefish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Capturefish::CopyFrom(const Capturefish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.Capturefish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Capturefish::IsInitialized() const {
  return true;
}

void Capturefish::InternalSwap(Capturefish* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  torpedoes_.InternalSwap(&other->torpedoes_);
  effect_fish_.InternalSwap(&other->effect_fish_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Capturefish, is_reward_)
      + sizeof(Capturefish::is_reward_)
      - PROTOBUF_FIELD_OFFSET(Capturefish, ball_info_)>(
          reinterpret_cast<char*>(&ball_info_),
          reinterpret_cast<char*>(&other->ball_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Capturefish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCHitMultiFish::_Internal {
 public:
  static const ::BYDLD::SpecEffect& speceffect(const SCHitMultiFish* msg);
};

const ::BYDLD::SpecEffect&
SCHitMultiFish::_Internal::speceffect(const SCHitMultiFish* msg) {
  return *msg->speceffect_;
}
SCHitMultiFish::SCHitMultiFish(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  capture_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCHitMultiFish)
}
SCHitMultiFish::SCHitMultiFish(const SCHitMultiFish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      capture_info_(from.capture_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_speceffect()) {
    speceffect_ = new ::BYDLD::SpecEffect(*from.speceffect_);
  } else {
    speceffect_ = nullptr;
  }
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&earn_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(earn_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCHitMultiFish)
}

void SCHitMultiFish::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCHitMultiFish_BYDLD_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&speceffect_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&earn_) -
      reinterpret_cast<char*>(&speceffect_)) + sizeof(earn_));
}

SCHitMultiFish::~SCHitMultiFish() {
  // @@protoc_insertion_point(destructor:BYDLD.SCHitMultiFish)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCHitMultiFish::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete speceffect_;
}

void SCHitMultiFish::ArenaDtor(void* object) {
  SCHitMultiFish* _this = reinterpret_cast< SCHitMultiFish* >(object);
  (void)_this;
}
void SCHitMultiFish::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCHitMultiFish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCHitMultiFish& SCHitMultiFish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCHitMultiFish_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCHitMultiFish::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCHitMultiFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  capture_info_.Clear();
  if (GetArena() == nullptr && speceffect_ != nullptr) {
    delete speceffect_;
  }
  speceffect_ = nullptr;
  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&earn_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(earn_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCHitMultiFish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 invalid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          invalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.Capturefish capture_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_capture_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 earn = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          earn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BYDLD.SpecEffect specEffect = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_speceffect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCHitMultiFish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCHitMultiFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 invalid = 2;
  if (this->invalid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_invalid(), target);
  }

  // repeated .BYDLD.Capturefish capture_info = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_capture_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_capture_info(i), target, stream);
  }

  // int64 score = 4;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_score(), target);
  }

  // int32 earn = 5;
  if (this->earn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_earn(), target);
  }

  // .BYDLD.SpecEffect specEffect = 6;
  if (this->has_speceffect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::speceffect(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCHitMultiFish)
  return target;
}

size_t SCHitMultiFish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCHitMultiFish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.Capturefish capture_info = 3;
  total_size += 1UL * this->_internal_capture_info_size();
  for (const auto& msg : this->capture_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .BYDLD.SpecEffect specEffect = 6;
  if (this->has_speceffect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *speceffect_);
  }

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 invalid = 2;
  if (this->invalid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_invalid());
  }

  // int64 score = 4;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_score());
  }

  // int32 earn = 5;
  if (this->earn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_earn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCHitMultiFish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCHitMultiFish)
  GOOGLE_DCHECK_NE(&from, this);
  const SCHitMultiFish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCHitMultiFish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCHitMultiFish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCHitMultiFish)
    MergeFrom(*source);
  }
}

void SCHitMultiFish::MergeFrom(const SCHitMultiFish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCHitMultiFish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  capture_info_.MergeFrom(from.capture_info_);
  if (from.has_speceffect()) {
    _internal_mutable_speceffect()->::BYDLD::SpecEffect::MergeFrom(from._internal_speceffect());
  }
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.invalid() != 0) {
    _internal_set_invalid(from._internal_invalid());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.earn() != 0) {
    _internal_set_earn(from._internal_earn());
  }
}

void SCHitMultiFish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCHitMultiFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCHitMultiFish::CopyFrom(const SCHitMultiFish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCHitMultiFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCHitMultiFish::IsInitialized() const {
  return true;
}

void SCHitMultiFish::InternalSwap(SCHitMultiFish* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  capture_info_.InternalSwap(&other->capture_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCHitMultiFish, earn_)
      + sizeof(SCHitMultiFish::earn_)
      - PROTOBUF_FIELD_OFFSET(SCHitMultiFish, speceffect_)>(
          reinterpret_cast<char*>(&speceffect_),
          reinterpret_cast<char*>(&other->speceffect_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCHitMultiFish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSyncMoney::_Internal {
 public:
};

CSSyncMoney::CSSyncMoney(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSSyncMoney)
}
CSSyncMoney::CSSyncMoney(const CSSyncMoney& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSSyncMoney)
}

void CSSyncMoney::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(type_));
}

CSSyncMoney::~CSSyncMoney() {
  // @@protoc_insertion_point(destructor:BYDLD.CSSyncMoney)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSyncMoney::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSSyncMoney::ArenaDtor(void* object) {
  CSSyncMoney* _this = reinterpret_cast< CSSyncMoney* >(object);
  (void)_this;
}
void CSSyncMoney::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSyncMoney::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSyncMoney& CSSyncMoney::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSyncMoney_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSSyncMoney::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSSyncMoney)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSyncMoney::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSyncMoney::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSSyncMoney)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSSyncMoney)
  return target;
}

size_t CSSyncMoney::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSSyncMoney)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSyncMoney::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSSyncMoney)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSyncMoney* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSyncMoney>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSSyncMoney)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSSyncMoney)
    MergeFrom(*source);
  }
}

void CSSyncMoney::MergeFrom(const CSSyncMoney& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSSyncMoney)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void CSSyncMoney::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSSyncMoney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSyncMoney::CopyFrom(const CSSyncMoney& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSSyncMoney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSyncMoney::IsInitialized() const {
  return true;
}

void CSSyncMoney::InternalSwap(CSSyncMoney* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSSyncMoney, type_)
      + sizeof(CSSyncMoney::type_)
      - PROTOBUF_FIELD_OFFSET(CSSyncMoney, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSyncMoney::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSyncMoney::_Internal {
 public:
};

SCSyncMoney::SCSyncMoney(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCSyncMoney)
}
SCSyncMoney::SCSyncMoney(const SCSyncMoney& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&ingot_score_) -
    reinterpret_cast<char*>(&score_)) + sizeof(ingot_score_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCSyncMoney)
}

void SCSyncMoney::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&score_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ingot_score_) -
      reinterpret_cast<char*>(&score_)) + sizeof(ingot_score_));
}

SCSyncMoney::~SCSyncMoney() {
  // @@protoc_insertion_point(destructor:BYDLD.SCSyncMoney)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSyncMoney::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSyncMoney::ArenaDtor(void* object) {
  SCSyncMoney* _this = reinterpret_cast< SCSyncMoney* >(object);
  (void)_this;
}
void SCSyncMoney::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSyncMoney::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSyncMoney& SCSyncMoney::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSyncMoney_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCSyncMoney::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCSyncMoney)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ingot_score_) -
      reinterpret_cast<char*>(&score_)) + sizeof(ingot_score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSyncMoney::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 delta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 invalid_score = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          invalid_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 freetime_score = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          freetime_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ticket = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ingot_score = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ingot_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSyncMoney::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCSyncMoney)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int64 score = 2;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_score(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // int32 delta = 4;
  if (this->delta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_delta(), target);
  }

  // int32 invalid_score = 5;
  if (this->invalid_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_invalid_score(), target);
  }

  // int32 freetime_score = 6;
  if (this->freetime_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_freetime_score(), target);
  }

  // int32 ticket = 7;
  if (this->ticket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_ticket(), target);
  }

  // int32 ingot_score = 8;
  if (this->ingot_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_ingot_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCSyncMoney)
  return target;
}

size_t SCSyncMoney::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCSyncMoney)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 score = 2;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_score());
  }

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 delta = 4;
  if (this->delta() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_delta());
  }

  // int32 invalid_score = 5;
  if (this->invalid_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_invalid_score());
  }

  // int32 freetime_score = 6;
  if (this->freetime_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_freetime_score());
  }

  // int32 ticket = 7;
  if (this->ticket() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ticket());
  }

  // int32 ingot_score = 8;
  if (this->ingot_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ingot_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSyncMoney::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCSyncMoney)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSyncMoney* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSyncMoney>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCSyncMoney)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCSyncMoney)
    MergeFrom(*source);
  }
}

void SCSyncMoney::MergeFrom(const SCSyncMoney& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCSyncMoney)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.delta() != 0) {
    _internal_set_delta(from._internal_delta());
  }
  if (from.invalid_score() != 0) {
    _internal_set_invalid_score(from._internal_invalid_score());
  }
  if (from.freetime_score() != 0) {
    _internal_set_freetime_score(from._internal_freetime_score());
  }
  if (from.ticket() != 0) {
    _internal_set_ticket(from._internal_ticket());
  }
  if (from.ingot_score() != 0) {
    _internal_set_ingot_score(from._internal_ingot_score());
  }
}

void SCSyncMoney::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCSyncMoney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSyncMoney::CopyFrom(const SCSyncMoney& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCSyncMoney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSyncMoney::IsInitialized() const {
  return true;
}

void SCSyncMoney::InternalSwap(SCSyncMoney* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCSyncMoney, ingot_score_)
      + sizeof(SCSyncMoney::ingot_score_)
      - PROTOBUF_FIELD_OFFSET(SCSyncMoney, score_)>(
          reinterpret_cast<char*>(&score_),
          reinterpret_cast<char*>(&other->score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSyncMoney::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FishTrace::_Internal {
 public:
};

FishTrace::FishTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.FishTrace)
}
FishTrace::FishTrace(const FishTrace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&wait_time_) -
    reinterpret_cast<char*>(&x_)) + sizeof(wait_time_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.FishTrace)
}

void FishTrace::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&wait_time_) -
      reinterpret_cast<char*>(&x_)) + sizeof(wait_time_));
}

FishTrace::~FishTrace() {
  // @@protoc_insertion_point(destructor:BYDLD.FishTrace)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FishTrace::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FishTrace::ArenaDtor(void* object) {
  FishTrace* _this = reinterpret_cast< FishTrace* >(object);
  (void)_this;
}
void FishTrace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FishTrace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FishTrace& FishTrace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FishTrace_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void FishTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.FishTrace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wait_time_) -
      reinterpret_cast<char*>(&x_)) + sizeof(wait_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FishTrace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float wait_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          wait_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FishTrace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.FishTrace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // float wait_time = 4;
  if (!(this->wait_time() <= 0 && this->wait_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_wait_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.FishTrace)
  return target;
}

size_t FishTrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.FishTrace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  // float wait_time = 4;
  if (!(this->wait_time() <= 0 && this->wait_time() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FishTrace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.FishTrace)
  GOOGLE_DCHECK_NE(&from, this);
  const FishTrace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FishTrace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.FishTrace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.FishTrace)
    MergeFrom(*source);
  }
}

void FishTrace::MergeFrom(const FishTrace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.FishTrace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from.wait_time() <= 0 && from.wait_time() >= 0)) {
    _internal_set_wait_time(from._internal_wait_time());
  }
}

void FishTrace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.FishTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishTrace::CopyFrom(const FishTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.FishTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishTrace::IsInitialized() const {
  return true;
}

void FishTrace::InternalSwap(FishTrace* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FishTrace, wait_time_)
      + sizeof(FishTrace::wait_time_)
      - PROTOBUF_FIELD_OFFSET(FishTrace, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FishTrace::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCFishTracesList::_Internal {
 public:
};

SCFishTracesList::SCFishTracesList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fish_traces_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCFishTracesList)
}
SCFishTracesList::SCFishTracesList(const SCFishTracesList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fish_traces_(from.fish_traces_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  accelerate_flag_ = from.accelerate_flag_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCFishTracesList)
}

void SCFishTracesList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCFishTracesList_BYDLD_2eproto.base);
  accelerate_flag_ = false;
}

SCFishTracesList::~SCFishTracesList() {
  // @@protoc_insertion_point(destructor:BYDLD.SCFishTracesList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCFishTracesList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCFishTracesList::ArenaDtor(void* object) {
  SCFishTracesList* _this = reinterpret_cast< SCFishTracesList* >(object);
  (void)_this;
}
void SCFishTracesList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCFishTracesList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCFishTracesList& SCFishTracesList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCFishTracesList_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCFishTracesList::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCFishTracesList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fish_traces_.Clear();
  accelerate_flag_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCFishTracesList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.FishTraces fish_traces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fish_traces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool accelerate_flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          accelerate_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCFishTracesList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCFishTracesList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.FishTraces fish_traces = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fish_traces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fish_traces(i), target, stream);
  }

  // bool accelerate_flag = 2;
  if (this->accelerate_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_accelerate_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCFishTracesList)
  return target;
}

size_t SCFishTracesList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCFishTracesList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.FishTraces fish_traces = 1;
  total_size += 1UL * this->_internal_fish_traces_size();
  for (const auto& msg : this->fish_traces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool accelerate_flag = 2;
  if (this->accelerate_flag() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCFishTracesList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCFishTracesList)
  GOOGLE_DCHECK_NE(&from, this);
  const SCFishTracesList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCFishTracesList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCFishTracesList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCFishTracesList)
    MergeFrom(*source);
  }
}

void SCFishTracesList::MergeFrom(const SCFishTracesList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCFishTracesList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fish_traces_.MergeFrom(from.fish_traces_);
  if (from.accelerate_flag() != 0) {
    _internal_set_accelerate_flag(from._internal_accelerate_flag());
  }
}

void SCFishTracesList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCFishTracesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCFishTracesList::CopyFrom(const SCFishTracesList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCFishTracesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCFishTracesList::IsInitialized() const {
  return true;
}

void SCFishTracesList::InternalSwap(SCFishTracesList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fish_traces_.InternalSwap(&other->fish_traces_);
  swap(accelerate_flag_, other->accelerate_flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCFishTracesList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FishTraces::_Internal {
 public:
};

FishTraces::FishTraces(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fish_trace_(arena),
  small_fish_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.FishTraces)
}
FishTraces::FishTraces(const FishTraces& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fish_trace_(from.fish_trace_),
      small_fish_list_(from.small_fish_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fish_uid_, &from.fish_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&fish_gender_) -
    reinterpret_cast<char*>(&fish_uid_)) + sizeof(fish_gender_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.FishTraces)
}

void FishTraces::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FishTraces_BYDLD_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fish_uid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&fish_gender_) -
      reinterpret_cast<char*>(&fish_uid_)) + sizeof(fish_gender_));
}

FishTraces::~FishTraces() {
  // @@protoc_insertion_point(destructor:BYDLD.FishTraces)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FishTraces::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FishTraces::ArenaDtor(void* object) {
  FishTraces* _this = reinterpret_cast< FishTraces* >(object);
  (void)_this;
}
void FishTraces::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FishTraces::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FishTraces& FishTraces::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FishTraces_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void FishTraces::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.FishTraces)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fish_trace_.Clear();
  small_fish_list_.Clear();
  ::memset(&fish_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fish_gender_) -
      reinterpret_cast<char*>(&fish_uid_)) + sizeof(fish_gender_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FishTraces::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 fish_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fish_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fish_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 live_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          live_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 route_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          route_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.FishTrace fish_trace = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fish_trace(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 fish_cur_point = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          fish_cur_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool already_move = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          already_move_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 stage = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sub_stage = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          sub_stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lifespan = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          lifespan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 frozen_time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          frozen_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_gender = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          fish_gender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.FishTraces small_fish_list = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_small_fish_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FishTraces::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.FishTraces)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fish_uid = 1;
  if (this->fish_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fish_uid(), target);
  }

  // int32 fish_id = 2;
  if (this->fish_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fish_id(), target);
  }

  // int32 live_time = 3;
  if (this->live_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_live_time(), target);
  }

  // float speed = 4;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_speed(), target);
  }

  // int32 route_type = 5;
  if (this->route_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_route_type(), target);
  }

  // repeated .BYDLD.FishTrace fish_trace = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fish_trace_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_fish_trace(i), target, stream);
  }

  // int32 fish_cur_point = 7;
  if (this->fish_cur_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_fish_cur_point(), target);
  }

  // bool already_move = 8;
  if (this->already_move() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_already_move(), target);
  }

  // float x = 9;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_x(), target);
  }

  // float y = 10;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_y(), target);
  }

  // float time = 11;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_time(), target);
  }

  // int32 stage = 12;
  if (this->stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_stage(), target);
  }

  // int32 sub_stage = 13;
  if (this->sub_stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_sub_stage(), target);
  }

  // int32 lifespan = 14;
  if (this->lifespan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_lifespan(), target);
  }

  // int32 frozen_time = 15;
  if (this->frozen_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_frozen_time(), target);
  }

  // int32 fish_gender = 16;
  if (this->fish_gender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_fish_gender(), target);
  }

  // repeated .BYDLD.FishTraces small_fish_list = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_small_fish_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_small_fish_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.FishTraces)
  return target;
}

size_t FishTraces::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.FishTraces)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.FishTrace fish_trace = 6;
  total_size += 1UL * this->_internal_fish_trace_size();
  for (const auto& msg : this->fish_trace_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .BYDLD.FishTraces small_fish_list = 17;
  total_size += 2UL * this->_internal_small_fish_list_size();
  for (const auto& msg : this->small_fish_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 fish_uid = 1;
  if (this->fish_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_uid());
  }

  // int32 fish_id = 2;
  if (this->fish_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_id());
  }

  // int32 live_time = 3;
  if (this->live_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_live_time());
  }

  // float speed = 4;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 route_type = 5;
  if (this->route_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_route_type());
  }

  // int32 fish_cur_point = 7;
  if (this->fish_cur_point() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_cur_point());
  }

  // bool already_move = 8;
  if (this->already_move() != 0) {
    total_size += 1 + 1;
  }

  // float x = 9;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 10;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float time = 11;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 stage = 12;
  if (this->stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stage());
  }

  // int32 sub_stage = 13;
  if (this->sub_stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sub_stage());
  }

  // int32 lifespan = 14;
  if (this->lifespan() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lifespan());
  }

  // int32 frozen_time = 15;
  if (this->frozen_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frozen_time());
  }

  // int32 fish_gender = 16;
  if (this->fish_gender() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_gender());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FishTraces::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.FishTraces)
  GOOGLE_DCHECK_NE(&from, this);
  const FishTraces* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FishTraces>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.FishTraces)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.FishTraces)
    MergeFrom(*source);
  }
}

void FishTraces::MergeFrom(const FishTraces& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.FishTraces)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fish_trace_.MergeFrom(from.fish_trace_);
  small_fish_list_.MergeFrom(from.small_fish_list_);
  if (from.fish_uid() != 0) {
    _internal_set_fish_uid(from._internal_fish_uid());
  }
  if (from.fish_id() != 0) {
    _internal_set_fish_id(from._internal_fish_id());
  }
  if (from.live_time() != 0) {
    _internal_set_live_time(from._internal_live_time());
  }
  if (!(from.speed() <= 0 && from.speed() >= 0)) {
    _internal_set_speed(from._internal_speed());
  }
  if (from.route_type() != 0) {
    _internal_set_route_type(from._internal_route_type());
  }
  if (from.fish_cur_point() != 0) {
    _internal_set_fish_cur_point(from._internal_fish_cur_point());
  }
  if (from.already_move() != 0) {
    _internal_set_already_move(from._internal_already_move());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.time() <= 0 && from.time() >= 0)) {
    _internal_set_time(from._internal_time());
  }
  if (from.stage() != 0) {
    _internal_set_stage(from._internal_stage());
  }
  if (from.sub_stage() != 0) {
    _internal_set_sub_stage(from._internal_sub_stage());
  }
  if (from.lifespan() != 0) {
    _internal_set_lifespan(from._internal_lifespan());
  }
  if (from.frozen_time() != 0) {
    _internal_set_frozen_time(from._internal_frozen_time());
  }
  if (from.fish_gender() != 0) {
    _internal_set_fish_gender(from._internal_fish_gender());
  }
}

void FishTraces::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.FishTraces)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishTraces::CopyFrom(const FishTraces& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.FishTraces)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishTraces::IsInitialized() const {
  return true;
}

void FishTraces::InternalSwap(FishTraces* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fish_trace_.InternalSwap(&other->fish_trace_);
  small_fish_list_.InternalSwap(&other->small_fish_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FishTraces, fish_gender_)
      + sizeof(FishTraces::fish_gender_)
      - PROTOBUF_FIELD_OFFSET(FishTraces, fish_uid_)>(
          reinterpret_cast<char*>(&fish_uid_),
          reinterpret_cast<char*>(&other->fish_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FishTraces::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSyncFishReq::_Internal {
 public:
};

CSSyncFishReq::CSSyncFishReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSSyncFishReq)
}
CSSyncFishReq::CSSyncFishReq(const CSSyncFishReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chair_idx_ = from.chair_idx_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSSyncFishReq)
}

void CSSyncFishReq::SharedCtor() {
  chair_idx_ = 0;
}

CSSyncFishReq::~CSSyncFishReq() {
  // @@protoc_insertion_point(destructor:BYDLD.CSSyncFishReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSyncFishReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSSyncFishReq::ArenaDtor(void* object) {
  CSSyncFishReq* _this = reinterpret_cast< CSSyncFishReq* >(object);
  (void)_this;
}
void CSSyncFishReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSyncFishReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSyncFishReq& CSSyncFishReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSyncFishReq_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSSyncFishReq::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSSyncFishReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chair_idx_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSyncFishReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSyncFishReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSSyncFishReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSSyncFishReq)
  return target;
}

size_t CSSyncFishReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSSyncFishReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSyncFishReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSSyncFishReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSyncFishReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSyncFishReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSSyncFishReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSSyncFishReq)
    MergeFrom(*source);
  }
}

void CSSyncFishReq::MergeFrom(const CSSyncFishReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSSyncFishReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
}

void CSSyncFishReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSSyncFishReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSyncFishReq::CopyFrom(const CSSyncFishReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSSyncFishReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSyncFishReq::IsInitialized() const {
  return true;
}

void CSSyncFishReq::InternalSwap(CSSyncFishReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(chair_idx_, other->chair_idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSyncFishReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSyncFishReq::_Internal {
 public:
};

SCSyncFishReq::SCSyncFishReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCSyncFishReq)
}
SCSyncFishReq::SCSyncFishReq(const SCSyncFishReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chair_idx_ = from.chair_idx_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCSyncFishReq)
}

void SCSyncFishReq::SharedCtor() {
  chair_idx_ = 0;
}

SCSyncFishReq::~SCSyncFishReq() {
  // @@protoc_insertion_point(destructor:BYDLD.SCSyncFishReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSyncFishReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSyncFishReq::ArenaDtor(void* object) {
  SCSyncFishReq* _this = reinterpret_cast< SCSyncFishReq* >(object);
  (void)_this;
}
void SCSyncFishReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSyncFishReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSyncFishReq& SCSyncFishReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSyncFishReq_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCSyncFishReq::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCSyncFishReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chair_idx_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSyncFishReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSyncFishReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCSyncFishReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCSyncFishReq)
  return target;
}

size_t SCSyncFishReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCSyncFishReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSyncFishReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCSyncFishReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSyncFishReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSyncFishReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCSyncFishReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCSyncFishReq)
    MergeFrom(*source);
  }
}

void SCSyncFishReq::MergeFrom(const SCSyncFishReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCSyncFishReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
}

void SCSyncFishReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCSyncFishReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSyncFishReq::CopyFrom(const SCSyncFishReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCSyncFishReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSyncFishReq::IsInitialized() const {
  return true;
}

void SCSyncFishReq::InternalSwap(SCSyncFishReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(chair_idx_, other->chair_idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSyncFishReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSyncFishRsp::_Internal {
 public:
};

CSSyncFishRsp::CSSyncFishRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fish_traces_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSSyncFishRsp)
}
CSSyncFishRsp::CSSyncFishRsp(const CSSyncFishRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fish_traces_(from.fish_traces_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  accelerate_flag_ = from.accelerate_flag_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSSyncFishRsp)
}

void CSSyncFishRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSSyncFishRsp_BYDLD_2eproto.base);
  accelerate_flag_ = false;
}

CSSyncFishRsp::~CSSyncFishRsp() {
  // @@protoc_insertion_point(destructor:BYDLD.CSSyncFishRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSyncFishRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSSyncFishRsp::ArenaDtor(void* object) {
  CSSyncFishRsp* _this = reinterpret_cast< CSSyncFishRsp* >(object);
  (void)_this;
}
void CSSyncFishRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSyncFishRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSyncFishRsp& CSSyncFishRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSyncFishRsp_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSSyncFishRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSSyncFishRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fish_traces_.Clear();
  accelerate_flag_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSyncFishRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.FishTraces fish_traces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fish_traces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool accelerate_flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          accelerate_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSyncFishRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSSyncFishRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.FishTraces fish_traces = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fish_traces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fish_traces(i), target, stream);
  }

  // bool accelerate_flag = 2;
  if (this->accelerate_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_accelerate_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSSyncFishRsp)
  return target;
}

size_t CSSyncFishRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSSyncFishRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.FishTraces fish_traces = 1;
  total_size += 1UL * this->_internal_fish_traces_size();
  for (const auto& msg : this->fish_traces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool accelerate_flag = 2;
  if (this->accelerate_flag() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSyncFishRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSSyncFishRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSyncFishRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSyncFishRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSSyncFishRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSSyncFishRsp)
    MergeFrom(*source);
  }
}

void CSSyncFishRsp::MergeFrom(const CSSyncFishRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSSyncFishRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fish_traces_.MergeFrom(from.fish_traces_);
  if (from.accelerate_flag() != 0) {
    _internal_set_accelerate_flag(from._internal_accelerate_flag());
  }
}

void CSSyncFishRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSSyncFishRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSyncFishRsp::CopyFrom(const CSSyncFishRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSSyncFishRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSyncFishRsp::IsInitialized() const {
  return true;
}

void CSSyncFishRsp::InternalSwap(CSSyncFishRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fish_traces_.InternalSwap(&other->fish_traces_);
  swap(accelerate_flag_, other->accelerate_flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSyncFishRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSyncFishRsp::_Internal {
 public:
};

SCSyncFishRsp::SCSyncFishRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fish_traces_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCSyncFishRsp)
}
SCSyncFishRsp::SCSyncFishRsp(const SCSyncFishRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fish_traces_(from.fish_traces_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  accelerate_flag_ = from.accelerate_flag_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCSyncFishRsp)
}

void SCSyncFishRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCSyncFishRsp_BYDLD_2eproto.base);
  accelerate_flag_ = false;
}

SCSyncFishRsp::~SCSyncFishRsp() {
  // @@protoc_insertion_point(destructor:BYDLD.SCSyncFishRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSyncFishRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSyncFishRsp::ArenaDtor(void* object) {
  SCSyncFishRsp* _this = reinterpret_cast< SCSyncFishRsp* >(object);
  (void)_this;
}
void SCSyncFishRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSyncFishRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSyncFishRsp& SCSyncFishRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSyncFishRsp_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCSyncFishRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCSyncFishRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fish_traces_.Clear();
  accelerate_flag_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSyncFishRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.FishTraces fish_traces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fish_traces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool accelerate_flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          accelerate_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSyncFishRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCSyncFishRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.FishTraces fish_traces = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fish_traces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fish_traces(i), target, stream);
  }

  // bool accelerate_flag = 2;
  if (this->accelerate_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_accelerate_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCSyncFishRsp)
  return target;
}

size_t SCSyncFishRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCSyncFishRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.FishTraces fish_traces = 1;
  total_size += 1UL * this->_internal_fish_traces_size();
  for (const auto& msg : this->fish_traces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool accelerate_flag = 2;
  if (this->accelerate_flag() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSyncFishRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCSyncFishRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSyncFishRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSyncFishRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCSyncFishRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCSyncFishRsp)
    MergeFrom(*source);
  }
}

void SCSyncFishRsp::MergeFrom(const SCSyncFishRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCSyncFishRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fish_traces_.MergeFrom(from.fish_traces_);
  if (from.accelerate_flag() != 0) {
    _internal_set_accelerate_flag(from._internal_accelerate_flag());
  }
}

void SCSyncFishRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCSyncFishRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSyncFishRsp::CopyFrom(const SCSyncFishRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCSyncFishRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSyncFishRsp::IsInitialized() const {
  return true;
}

void SCSyncFishRsp::InternalSwap(SCSyncFishRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fish_traces_.InternalSwap(&other->fish_traces_);
  swap(accelerate_flag_, other->accelerate_flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSyncFishRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCChangeScene::_Internal {
 public:
};

SCChangeScene::SCChangeScene(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCChangeScene)
}
SCChangeScene::SCChangeScene(const SCChangeScene& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  scene_index_ = from.scene_index_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCChangeScene)
}

void SCChangeScene::SharedCtor() {
  scene_index_ = 0;
}

SCChangeScene::~SCChangeScene() {
  // @@protoc_insertion_point(destructor:BYDLD.SCChangeScene)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCChangeScene::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCChangeScene::ArenaDtor(void* object) {
  SCChangeScene* _this = reinterpret_cast< SCChangeScene* >(object);
  (void)_this;
}
void SCChangeScene::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCChangeScene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCChangeScene& SCChangeScene::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCChangeScene_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCChangeScene::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCChangeScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scene_index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCChangeScene::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 scene_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          scene_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCChangeScene::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCChangeScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 scene_index = 1;
  if (this->scene_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_scene_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCChangeScene)
  return target;
}

size_t SCChangeScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCChangeScene)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 scene_index = 1;
  if (this->scene_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scene_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCChangeScene::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCChangeScene)
  GOOGLE_DCHECK_NE(&from, this);
  const SCChangeScene* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCChangeScene>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCChangeScene)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCChangeScene)
    MergeFrom(*source);
  }
}

void SCChangeScene::MergeFrom(const SCChangeScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCChangeScene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scene_index() != 0) {
    _internal_set_scene_index(from._internal_scene_index());
  }
}

void SCChangeScene::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCChangeScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCChangeScene::CopyFrom(const SCChangeScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCChangeScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCChangeScene::IsInitialized() const {
  return true;
}

void SCChangeScene::InternalSwap(SCChangeScene* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scene_index_, other->scene_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCChangeScene::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSFishOutsideScreen::_Internal {
 public:
};

CSFishOutsideScreen::CSFishOutsideScreen(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSFishOutsideScreen)
}
CSFishOutsideScreen::CSFishOutsideScreen(const CSFishOutsideScreen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fish_uid_ = from.fish_uid_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSFishOutsideScreen)
}

void CSFishOutsideScreen::SharedCtor() {
  fish_uid_ = 0;
}

CSFishOutsideScreen::~CSFishOutsideScreen() {
  // @@protoc_insertion_point(destructor:BYDLD.CSFishOutsideScreen)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSFishOutsideScreen::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSFishOutsideScreen::ArenaDtor(void* object) {
  CSFishOutsideScreen* _this = reinterpret_cast< CSFishOutsideScreen* >(object);
  (void)_this;
}
void CSFishOutsideScreen::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSFishOutsideScreen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSFishOutsideScreen& CSFishOutsideScreen::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSFishOutsideScreen_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSFishOutsideScreen::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSFishOutsideScreen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fish_uid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSFishOutsideScreen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 fish_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fish_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSFishOutsideScreen::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSFishOutsideScreen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fish_uid = 1;
  if (this->fish_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fish_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSFishOutsideScreen)
  return target;
}

size_t CSFishOutsideScreen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSFishOutsideScreen)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 fish_uid = 1;
  if (this->fish_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSFishOutsideScreen::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSFishOutsideScreen)
  GOOGLE_DCHECK_NE(&from, this);
  const CSFishOutsideScreen* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSFishOutsideScreen>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSFishOutsideScreen)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSFishOutsideScreen)
    MergeFrom(*source);
  }
}

void CSFishOutsideScreen::MergeFrom(const CSFishOutsideScreen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSFishOutsideScreen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fish_uid() != 0) {
    _internal_set_fish_uid(from._internal_fish_uid());
  }
}

void CSFishOutsideScreen::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSFishOutsideScreen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSFishOutsideScreen::CopyFrom(const CSFishOutsideScreen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSFishOutsideScreen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFishOutsideScreen::IsInitialized() const {
  return true;
}

void CSFishOutsideScreen::InternalSwap(CSFishOutsideScreen* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(fish_uid_, other->fish_uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSFishOutsideScreen::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSLockFish::_Internal {
 public:
};

CSLockFish::CSLockFish(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSLockFish)
}
CSLockFish::CSLockFish(const CSLockFish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_open_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(is_open_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSLockFish)
}

void CSLockFish::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_open_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(is_open_));
}

CSLockFish::~CSLockFish() {
  // @@protoc_insertion_point(destructor:BYDLD.CSLockFish)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSLockFish::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSLockFish::ArenaDtor(void* object) {
  CSLockFish* _this = reinterpret_cast< CSLockFish* >(object);
  (void)_this;
}
void CSLockFish::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSLockFish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSLockFish& CSLockFish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSLockFish_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSLockFish::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSLockFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_open_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(is_open_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSLockFish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fish_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_open = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSLockFish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSLockFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 fish_uid = 2;
  if (this->fish_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fish_uid(), target);
  }

  // bool is_open = 3;
  if (this->is_open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_open(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSLockFish)
  return target;
}

size_t CSLockFish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSLockFish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 fish_uid = 2;
  if (this->fish_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_uid());
  }

  // bool is_open = 3;
  if (this->is_open() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSLockFish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSLockFish)
  GOOGLE_DCHECK_NE(&from, this);
  const CSLockFish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSLockFish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSLockFish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSLockFish)
    MergeFrom(*source);
  }
}

void CSLockFish::MergeFrom(const CSLockFish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSLockFish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.fish_uid() != 0) {
    _internal_set_fish_uid(from._internal_fish_uid());
  }
  if (from.is_open() != 0) {
    _internal_set_is_open(from._internal_is_open());
  }
}

void CSLockFish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSLockFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLockFish::CopyFrom(const CSLockFish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSLockFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLockFish::IsInitialized() const {
  return true;
}

void CSLockFish::InternalSwap(CSLockFish* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSLockFish, is_open_)
      + sizeof(CSLockFish::is_open_)
      - PROTOBUF_FIELD_OFFSET(CSLockFish, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSLockFish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCLockFish::_Internal {
 public:
};

SCLockFish::SCLockFish(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCLockFish)
}
SCLockFish::SCLockFish(const SCLockFish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_open_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(is_open_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCLockFish)
}

void SCLockFish::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_open_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(is_open_));
}

SCLockFish::~SCLockFish() {
  // @@protoc_insertion_point(destructor:BYDLD.SCLockFish)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCLockFish::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCLockFish::ArenaDtor(void* object) {
  SCLockFish* _this = reinterpret_cast< SCLockFish* >(object);
  (void)_this;
}
void SCLockFish::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCLockFish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCLockFish& SCLockFish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCLockFish_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCLockFish::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCLockFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_open_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(is_open_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCLockFish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fish_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_open = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCLockFish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCLockFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 fish_uid = 2;
  if (this->fish_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fish_uid(), target);
  }

  // bool is_open = 3;
  if (this->is_open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_open(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCLockFish)
  return target;
}

size_t SCLockFish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCLockFish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 fish_uid = 2;
  if (this->fish_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_uid());
  }

  // bool is_open = 3;
  if (this->is_open() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCLockFish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCLockFish)
  GOOGLE_DCHECK_NE(&from, this);
  const SCLockFish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCLockFish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCLockFish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCLockFish)
    MergeFrom(*source);
  }
}

void SCLockFish::MergeFrom(const SCLockFish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCLockFish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.fish_uid() != 0) {
    _internal_set_fish_uid(from._internal_fish_uid());
  }
  if (from.is_open() != 0) {
    _internal_set_is_open(from._internal_is_open());
  }
}

void SCLockFish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCLockFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCLockFish::CopyFrom(const SCLockFish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCLockFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCLockFish::IsInitialized() const {
  return true;
}

void SCLockFish::InternalSwap(SCLockFish* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCLockFish, is_open_)
      + sizeof(SCLockFish::is_open_)
      - PROTOBUF_FIELD_OFFSET(SCLockFish, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCLockFish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSetSkill::_Internal {
 public:
};

CSSetSkill::CSSetSkill(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSSetSkill)
}
CSSetSkill::CSSetSkill(const CSSetSkill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&auto_flag_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(auto_flag_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSSetSkill)
}

void CSSetSkill::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&auto_flag_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(auto_flag_));
}

CSSetSkill::~CSSetSkill() {
  // @@protoc_insertion_point(destructor:BYDLD.CSSetSkill)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSetSkill::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSSetSkill::ArenaDtor(void* object) {
  CSSetSkill* _this = reinterpret_cast< CSSetSkill* >(object);
  (void)_this;
}
void CSSetSkill::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSetSkill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSetSkill& CSSetSkill::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSetSkill_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSSetSkill::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSSetSkill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auto_flag_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(auto_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSetSkill::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 double_flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          double_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 through_flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          through_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool auto_flag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          auto_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSetSkill::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSSetSkill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 double_flag = 2;
  if (this->double_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_double_flag(), target);
  }

  // int32 through_flag = 3;
  if (this->through_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_through_flag(), target);
  }

  // bool auto_flag = 4;
  if (this->auto_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_auto_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSSetSkill)
  return target;
}

size_t CSSetSkill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSSetSkill)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 double_flag = 2;
  if (this->double_flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_double_flag());
  }

  // int32 through_flag = 3;
  if (this->through_flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_through_flag());
  }

  // bool auto_flag = 4;
  if (this->auto_flag() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSetSkill::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSSetSkill)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSetSkill* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSetSkill>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSSetSkill)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSSetSkill)
    MergeFrom(*source);
  }
}

void CSSetSkill::MergeFrom(const CSSetSkill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSSetSkill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.double_flag() != 0) {
    _internal_set_double_flag(from._internal_double_flag());
  }
  if (from.through_flag() != 0) {
    _internal_set_through_flag(from._internal_through_flag());
  }
  if (from.auto_flag() != 0) {
    _internal_set_auto_flag(from._internal_auto_flag());
  }
}

void CSSetSkill::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSSetSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSetSkill::CopyFrom(const CSSetSkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSSetSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSetSkill::IsInitialized() const {
  return true;
}

void CSSetSkill::InternalSwap(CSSetSkill* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSSetSkill, auto_flag_)
      + sizeof(CSSetSkill::auto_flag_)
      - PROTOBUF_FIELD_OFFSET(CSSetSkill, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSetSkill::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSetSkill::_Internal {
 public:
};

SCSetSkill::SCSetSkill(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCSetSkill)
}
SCSetSkill::SCSetSkill(const SCSetSkill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&through_flag_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(through_flag_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCSetSkill)
}

void SCSetSkill::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&through_flag_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(through_flag_));
}

SCSetSkill::~SCSetSkill() {
  // @@protoc_insertion_point(destructor:BYDLD.SCSetSkill)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSetSkill::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSetSkill::ArenaDtor(void* object) {
  SCSetSkill* _this = reinterpret_cast< SCSetSkill* >(object);
  (void)_this;
}
void SCSetSkill::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSetSkill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSetSkill& SCSetSkill::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSetSkill_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCSetSkill::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCSetSkill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&through_flag_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(through_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSetSkill::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 double_flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          double_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 through_flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          through_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSetSkill::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCSetSkill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 double_flag = 2;
  if (this->double_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_double_flag(), target);
  }

  // int32 through_flag = 3;
  if (this->through_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_through_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCSetSkill)
  return target;
}

size_t SCSetSkill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCSetSkill)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 double_flag = 2;
  if (this->double_flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_double_flag());
  }

  // int32 through_flag = 3;
  if (this->through_flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_through_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSetSkill::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCSetSkill)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSetSkill* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSetSkill>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCSetSkill)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCSetSkill)
    MergeFrom(*source);
  }
}

void SCSetSkill::MergeFrom(const SCSetSkill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCSetSkill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.double_flag() != 0) {
    _internal_set_double_flag(from._internal_double_flag());
  }
  if (from.through_flag() != 0) {
    _internal_set_through_flag(from._internal_through_flag());
  }
}

void SCSetSkill::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCSetSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSetSkill::CopyFrom(const SCSetSkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCSetSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSetSkill::IsInitialized() const {
  return true;
}

void SCSetSkill::InternalSwap(SCSetSkill* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCSetSkill, through_flag_)
      + sizeof(SCSetSkill::through_flag_)
      - PROTOBUF_FIELD_OFFSET(SCSetSkill, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSetSkill::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUserTimeoutKick::_Internal {
 public:
};

SCUserTimeoutKick::SCUserTimeoutKick(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCUserTimeoutKick)
}
SCUserTimeoutKick::SCUserTimeoutKick(const SCUserTimeoutKick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  count_sec_ = from.count_sec_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCUserTimeoutKick)
}

void SCUserTimeoutKick::SharedCtor() {
  count_sec_ = 0;
}

SCUserTimeoutKick::~SCUserTimeoutKick() {
  // @@protoc_insertion_point(destructor:BYDLD.SCUserTimeoutKick)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUserTimeoutKick::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCUserTimeoutKick::ArenaDtor(void* object) {
  SCUserTimeoutKick* _this = reinterpret_cast< SCUserTimeoutKick* >(object);
  (void)_this;
}
void SCUserTimeoutKick::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUserTimeoutKick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUserTimeoutKick& SCUserTimeoutKick::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUserTimeoutKick_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCUserTimeoutKick::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCUserTimeoutKick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  count_sec_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUserTimeoutKick::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 count_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          count_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUserTimeoutKick::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCUserTimeoutKick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count_sec = 1;
  if (this->count_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_count_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCUserTimeoutKick)
  return target;
}

size_t SCUserTimeoutKick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCUserTimeoutKick)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 count_sec = 1;
  if (this->count_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count_sec());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUserTimeoutKick::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCUserTimeoutKick)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUserTimeoutKick* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUserTimeoutKick>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCUserTimeoutKick)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCUserTimeoutKick)
    MergeFrom(*source);
  }
}

void SCUserTimeoutKick::MergeFrom(const SCUserTimeoutKick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCUserTimeoutKick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.count_sec() != 0) {
    _internal_set_count_sec(from._internal_count_sec());
  }
}

void SCUserTimeoutKick::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCUserTimeoutKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUserTimeoutKick::CopyFrom(const SCUserTimeoutKick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCUserTimeoutKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUserTimeoutKick::IsInitialized() const {
  return true;
}

void SCUserTimeoutKick::InternalSwap(SCUserTimeoutKick* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(count_sec_, other->count_sec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUserTimeoutKick::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSUserRunBackground::_Internal {
 public:
};

CSUserRunBackground::CSUserRunBackground(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSUserRunBackground)
}
CSUserRunBackground::CSUserRunBackground(const CSUserRunBackground& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&background_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(background_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSUserRunBackground)
}

void CSUserRunBackground::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&background_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(background_));
}

CSUserRunBackground::~CSUserRunBackground() {
  // @@protoc_insertion_point(destructor:BYDLD.CSUserRunBackground)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSUserRunBackground::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSUserRunBackground::ArenaDtor(void* object) {
  CSUserRunBackground* _this = reinterpret_cast< CSUserRunBackground* >(object);
  (void)_this;
}
void CSUserRunBackground::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSUserRunBackground::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSUserRunBackground& CSUserRunBackground::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSUserRunBackground_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSUserRunBackground::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSUserRunBackground)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&background_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(background_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSUserRunBackground::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool background = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          background_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSUserRunBackground::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSUserRunBackground)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // bool background = 2;
  if (this->background() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_background(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSUserRunBackground)
  return target;
}

size_t CSUserRunBackground::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSUserRunBackground)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // bool background = 2;
  if (this->background() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSUserRunBackground::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSUserRunBackground)
  GOOGLE_DCHECK_NE(&from, this);
  const CSUserRunBackground* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSUserRunBackground>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSUserRunBackground)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSUserRunBackground)
    MergeFrom(*source);
  }
}

void CSUserRunBackground::MergeFrom(const CSUserRunBackground& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSUserRunBackground)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.background() != 0) {
    _internal_set_background(from._internal_background());
  }
}

void CSUserRunBackground::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSUserRunBackground)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUserRunBackground::CopyFrom(const CSUserRunBackground& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSUserRunBackground)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUserRunBackground::IsInitialized() const {
  return true;
}

void CSUserRunBackground::InternalSwap(CSUserRunBackground* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSUserRunBackground, background_)
      + sizeof(CSUserRunBackground::background_)
      - PROTOBUF_FIELD_OFFSET(CSUserRunBackground, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSUserRunBackground::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUserRunBackground::_Internal {
 public:
};

SCUserRunBackground::SCUserRunBackground(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  station_base_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCUserRunBackground)
}
SCUserRunBackground::SCUserRunBackground(const SCUserRunBackground& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      station_base_list_(from.station_base_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCUserRunBackground)
}

void SCUserRunBackground::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCUserRunBackground_BYDLD_2eproto.base);
}

SCUserRunBackground::~SCUserRunBackground() {
  // @@protoc_insertion_point(destructor:BYDLD.SCUserRunBackground)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUserRunBackground::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCUserRunBackground::ArenaDtor(void* object) {
  SCUserRunBackground* _this = reinterpret_cast< SCUserRunBackground* >(object);
  (void)_this;
}
void SCUserRunBackground::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUserRunBackground::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUserRunBackground& SCUserRunBackground::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUserRunBackground_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCUserRunBackground::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCUserRunBackground)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  station_base_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUserRunBackground::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.StationBase station_base_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_station_base_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUserRunBackground::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCUserRunBackground)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.StationBase station_base_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_station_base_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_station_base_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCUserRunBackground)
  return target;
}

size_t SCUserRunBackground::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCUserRunBackground)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.StationBase station_base_list = 1;
  total_size += 1UL * this->_internal_station_base_list_size();
  for (const auto& msg : this->station_base_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUserRunBackground::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCUserRunBackground)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUserRunBackground* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUserRunBackground>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCUserRunBackground)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCUserRunBackground)
    MergeFrom(*source);
  }
}

void SCUserRunBackground::MergeFrom(const SCUserRunBackground& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCUserRunBackground)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  station_base_list_.MergeFrom(from.station_base_list_);
}

void SCUserRunBackground::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCUserRunBackground)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUserRunBackground::CopyFrom(const SCUserRunBackground& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCUserRunBackground)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUserRunBackground::IsInitialized() const {
  return true;
}

void SCUserRunBackground::InternalSwap(SCUserRunBackground* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  station_base_list_.InternalSwap(&other->station_base_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUserRunBackground::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSUpdateHallProp::_Internal {
 public:
};

CSUpdateHallProp::CSUpdateHallProp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSUpdateHallProp)
}
CSUpdateHallProp::CSUpdateHallProp(const CSUpdateHallProp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&configid_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(configid_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSUpdateHallProp)
}

void CSUpdateHallProp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&configid_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(configid_));
}

CSUpdateHallProp::~CSUpdateHallProp() {
  // @@protoc_insertion_point(destructor:BYDLD.CSUpdateHallProp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSUpdateHallProp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSUpdateHallProp::ArenaDtor(void* object) {
  CSUpdateHallProp* _this = reinterpret_cast< CSUpdateHallProp* >(object);
  (void)_this;
}
void CSUpdateHallProp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSUpdateHallProp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSUpdateHallProp& CSUpdateHallProp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSUpdateHallProp_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSUpdateHallProp::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSUpdateHallProp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&configid_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(configid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSUpdateHallProp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 configId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          configid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSUpdateHallProp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSUpdateHallProp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 configId = 2;
  if (this->configid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_configid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSUpdateHallProp)
  return target;
}

size_t CSUpdateHallProp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSUpdateHallProp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 configId = 2;
  if (this->configid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_configid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSUpdateHallProp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSUpdateHallProp)
  GOOGLE_DCHECK_NE(&from, this);
  const CSUpdateHallProp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSUpdateHallProp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSUpdateHallProp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSUpdateHallProp)
    MergeFrom(*source);
  }
}

void CSUpdateHallProp::MergeFrom(const CSUpdateHallProp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSUpdateHallProp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.configid() != 0) {
    _internal_set_configid(from._internal_configid());
  }
}

void CSUpdateHallProp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSUpdateHallProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUpdateHallProp::CopyFrom(const CSUpdateHallProp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSUpdateHallProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUpdateHallProp::IsInitialized() const {
  return true;
}

void CSUpdateHallProp::InternalSwap(CSUpdateHallProp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSUpdateHallProp, configid_)
      + sizeof(CSUpdateHallProp::configid_)
      - PROTOBUF_FIELD_OFFSET(CSUpdateHallProp, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSUpdateHallProp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSHeartBeat::_Internal {
 public:
};

CSHeartBeat::CSHeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSHeartBeat)
}
CSHeartBeat::CSHeartBeat(const CSHeartBeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chair_idx_ = from.chair_idx_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSHeartBeat)
}

void CSHeartBeat::SharedCtor() {
  chair_idx_ = 0;
}

CSHeartBeat::~CSHeartBeat() {
  // @@protoc_insertion_point(destructor:BYDLD.CSHeartBeat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSHeartBeat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSHeartBeat::ArenaDtor(void* object) {
  CSHeartBeat* _this = reinterpret_cast< CSHeartBeat* >(object);
  (void)_this;
}
void CSHeartBeat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSHeartBeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSHeartBeat& CSHeartBeat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSHeartBeat_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSHeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chair_idx_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSHeartBeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSHeartBeat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSHeartBeat)
  return target;
}

size_t CSHeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSHeartBeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSHeartBeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const CSHeartBeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSHeartBeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSHeartBeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSHeartBeat)
    MergeFrom(*source);
  }
}

void CSHeartBeat::MergeFrom(const CSHeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
}

void CSHeartBeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSHeartBeat::CopyFrom(const CSHeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSHeartBeat::IsInitialized() const {
  return true;
}

void CSHeartBeat::InternalSwap(CSHeartBeat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(chair_idx_, other->chair_idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSHeartBeat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCHeartBeat::_Internal {
 public:
};

SCHeartBeat::SCHeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCHeartBeat)
}
SCHeartBeat::SCHeartBeat(const SCHeartBeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chair_idx_ = from.chair_idx_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCHeartBeat)
}

void SCHeartBeat::SharedCtor() {
  chair_idx_ = 0;
}

SCHeartBeat::~SCHeartBeat() {
  // @@protoc_insertion_point(destructor:BYDLD.SCHeartBeat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCHeartBeat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCHeartBeat::ArenaDtor(void* object) {
  SCHeartBeat* _this = reinterpret_cast< SCHeartBeat* >(object);
  (void)_this;
}
void SCHeartBeat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCHeartBeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCHeartBeat& SCHeartBeat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCHeartBeat_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCHeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chair_idx_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCHeartBeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCHeartBeat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCHeartBeat)
  return target;
}

size_t SCHeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCHeartBeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCHeartBeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const SCHeartBeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCHeartBeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCHeartBeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCHeartBeat)
    MergeFrom(*source);
  }
}

void SCHeartBeat::MergeFrom(const SCHeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
}

void SCHeartBeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCHeartBeat::CopyFrom(const SCHeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCHeartBeat::IsInitialized() const {
  return true;
}

void SCHeartBeat::InternalSwap(SCHeartBeat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(chair_idx_, other->chair_idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCHeartBeat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCComTask::_Internal {
 public:
};

SCComTask::SCComTask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCComTask)
}
SCComTask::SCComTask(const SCComTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gun_ratio_, &from.gun_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&ticket_) -
    reinterpret_cast<char*>(&gun_ratio_)) + sizeof(ticket_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCComTask)
}

void SCComTask::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gun_ratio_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ticket_) -
      reinterpret_cast<char*>(&gun_ratio_)) + sizeof(ticket_));
}

SCComTask::~SCComTask() {
  // @@protoc_insertion_point(destructor:BYDLD.SCComTask)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCComTask::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCComTask::ArenaDtor(void* object) {
  SCComTask* _this = reinterpret_cast< SCComTask* >(object);
  (void)_this;
}
void SCComTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCComTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCComTask& SCComTask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCComTask_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCComTask::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCComTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gun_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ticket_) -
      reinterpret_cast<char*>(&gun_ratio_)) + sizeof(ticket_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCComTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gun_ratio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gun_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gun_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gun_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 award = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          award_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ticket = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCComTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCComTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gun_ratio = 1;
  if (this->gun_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gun_ratio(), target);
  }

  // int32 gun_level = 2;
  if (this->gun_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gun_level(), target);
  }

  // int32 award = 3;
  if (this->award() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_award(), target);
  }

  // int32 ticket = 4;
  if (this->ticket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ticket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCComTask)
  return target;
}

size_t SCComTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCComTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gun_ratio = 1;
  if (this->gun_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gun_ratio());
  }

  // int32 gun_level = 2;
  if (this->gun_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gun_level());
  }

  // int32 award = 3;
  if (this->award() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_award());
  }

  // int32 ticket = 4;
  if (this->ticket() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ticket());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCComTask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCComTask)
  GOOGLE_DCHECK_NE(&from, this);
  const SCComTask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCComTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCComTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCComTask)
    MergeFrom(*source);
  }
}

void SCComTask::MergeFrom(const SCComTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCComTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gun_ratio() != 0) {
    _internal_set_gun_ratio(from._internal_gun_ratio());
  }
  if (from.gun_level() != 0) {
    _internal_set_gun_level(from._internal_gun_level());
  }
  if (from.award() != 0) {
    _internal_set_award(from._internal_award());
  }
  if (from.ticket() != 0) {
    _internal_set_ticket(from._internal_ticket());
  }
}

void SCComTask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCComTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCComTask::CopyFrom(const SCComTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCComTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCComTask::IsInitialized() const {
  return true;
}

void SCComTask::InternalSwap(SCComTask* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCComTask, ticket_)
      + sizeof(SCComTask::ticket_)
      - PROTOBUF_FIELD_OFFSET(SCComTask, gun_ratio_)>(
          reinterpret_cast<char*>(&gun_ratio_),
          reinterpret_cast<char*>(&other->gun_ratio_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCComTask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSTaskInfo::_Internal {
 public:
};

CSTaskInfo::CSTaskInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSTaskInfo)
}
CSTaskInfo::CSTaskInfo(const CSTaskInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSTaskInfo)
}

void CSTaskInfo::SharedCtor() {
}

CSTaskInfo::~CSTaskInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.CSTaskInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSTaskInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSTaskInfo::ArenaDtor(void* object) {
  CSTaskInfo* _this = reinterpret_cast< CSTaskInfo* >(object);
  (void)_this;
}
void CSTaskInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSTaskInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSTaskInfo& CSTaskInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSTaskInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSTaskInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSTaskInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSTaskInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSTaskInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSTaskInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSTaskInfo)
  return target;
}

size_t CSTaskInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSTaskInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSTaskInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSTaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSTaskInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSTaskInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSTaskInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSTaskInfo)
    MergeFrom(*source);
  }
}

void CSTaskInfo::MergeFrom(const CSTaskInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSTaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSTaskInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSTaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTaskInfo::CopyFrom(const CSTaskInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSTaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTaskInfo::IsInitialized() const {
  return true;
}

void CSTaskInfo::InternalSwap(CSTaskInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSTaskInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCTaskInfo::_Internal {
 public:
};

SCTaskInfo::SCTaskInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCTaskInfo)
}
SCTaskInfo::SCTaskInfo(const SCTaskInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gun_ratio_, &from.gun_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&ticket_) -
    reinterpret_cast<char*>(&gun_ratio_)) + sizeof(ticket_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCTaskInfo)
}

void SCTaskInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gun_ratio_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ticket_) -
      reinterpret_cast<char*>(&gun_ratio_)) + sizeof(ticket_));
}

SCTaskInfo::~SCTaskInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.SCTaskInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCTaskInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCTaskInfo::ArenaDtor(void* object) {
  SCTaskInfo* _this = reinterpret_cast< SCTaskInfo* >(object);
  (void)_this;
}
void SCTaskInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCTaskInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCTaskInfo& SCTaskInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCTaskInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCTaskInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCTaskInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gun_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ticket_) -
      reinterpret_cast<char*>(&gun_ratio_)) + sizeof(ticket_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCTaskInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gun_ratio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gun_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gun_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gun_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cur_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cur_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vip_level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          vip_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_unlock = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_unlock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 award = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          award_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_vip_unlock = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          is_vip_unlock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ticket = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCTaskInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCTaskInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gun_ratio = 1;
  if (this->gun_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gun_ratio(), target);
  }

  // int32 gun_level = 2;
  if (this->gun_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gun_level(), target);
  }

  // int32 cur_num = 3;
  if (this->cur_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cur_num(), target);
  }

  // int32 total_num = 4;
  if (this->total_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_total_num(), target);
  }

  // int32 vip_level = 5;
  if (this->vip_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_vip_level(), target);
  }

  // int32 is_unlock = 6;
  if (this->is_unlock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_is_unlock(), target);
  }

  // int32 award = 7;
  if (this->award() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_award(), target);
  }

  // bool is_vip_unlock = 8;
  if (this->is_vip_unlock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_vip_unlock(), target);
  }

  // int32 ticket = 9;
  if (this->ticket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_ticket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCTaskInfo)
  return target;
}

size_t SCTaskInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCTaskInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gun_ratio = 1;
  if (this->gun_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gun_ratio());
  }

  // int32 gun_level = 2;
  if (this->gun_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gun_level());
  }

  // int32 cur_num = 3;
  if (this->cur_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_num());
  }

  // int32 total_num = 4;
  if (this->total_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_num());
  }

  // int32 vip_level = 5;
  if (this->vip_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vip_level());
  }

  // int32 is_unlock = 6;
  if (this->is_unlock() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_unlock());
  }

  // int32 award = 7;
  if (this->award() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_award());
  }

  // bool is_vip_unlock = 8;
  if (this->is_vip_unlock() != 0) {
    total_size += 1 + 1;
  }

  // int32 ticket = 9;
  if (this->ticket() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ticket());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCTaskInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCTaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCTaskInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCTaskInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCTaskInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCTaskInfo)
    MergeFrom(*source);
  }
}

void SCTaskInfo::MergeFrom(const SCTaskInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCTaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gun_ratio() != 0) {
    _internal_set_gun_ratio(from._internal_gun_ratio());
  }
  if (from.gun_level() != 0) {
    _internal_set_gun_level(from._internal_gun_level());
  }
  if (from.cur_num() != 0) {
    _internal_set_cur_num(from._internal_cur_num());
  }
  if (from.total_num() != 0) {
    _internal_set_total_num(from._internal_total_num());
  }
  if (from.vip_level() != 0) {
    _internal_set_vip_level(from._internal_vip_level());
  }
  if (from.is_unlock() != 0) {
    _internal_set_is_unlock(from._internal_is_unlock());
  }
  if (from.award() != 0) {
    _internal_set_award(from._internal_award());
  }
  if (from.is_vip_unlock() != 0) {
    _internal_set_is_vip_unlock(from._internal_is_vip_unlock());
  }
  if (from.ticket() != 0) {
    _internal_set_ticket(from._internal_ticket());
  }
}

void SCTaskInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCTaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCTaskInfo::CopyFrom(const SCTaskInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCTaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCTaskInfo::IsInitialized() const {
  return true;
}

void SCTaskInfo::InternalSwap(SCTaskInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCTaskInfo, ticket_)
      + sizeof(SCTaskInfo::ticket_)
      - PROTOBUF_FIELD_OFFSET(SCTaskInfo, gun_ratio_)>(
          reinterpret_cast<char*>(&gun_ratio_),
          reinterpret_cast<char*>(&other->gun_ratio_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCTaskInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserScoreRecord::_Internal {
 public:
};

UserScoreRecord::UserScoreRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.UserScoreRecord)
}
UserScoreRecord::UserScoreRecord(const UserScoreRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArena());
  }
  score_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_score().empty()) {
    score_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_score(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.UserScoreRecord)
}

void UserScoreRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserScoreRecord_BYDLD_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  score_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

UserScoreRecord::~UserScoreRecord() {
  // @@protoc_insertion_point(destructor:BYDLD.UserScoreRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserScoreRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  score_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserScoreRecord::ArenaDtor(void* object) {
  UserScoreRecord* _this = reinterpret_cast< UserScoreRecord* >(object);
  (void)_this;
}
void UserScoreRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserScoreRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserScoreRecord& UserScoreRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserScoreRecord_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void UserScoreRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.UserScoreRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmpty();
  score_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserScoreRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.UserScoreRecord.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_score();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.UserScoreRecord.score"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserScoreRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.UserScoreRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // string content = 2;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.UserScoreRecord.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  // string score = 3;
  if (this->score().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_score().data(), static_cast<int>(this->_internal_score().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.UserScoreRecord.score");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.UserScoreRecord)
  return target;
}

size_t UserScoreRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.UserScoreRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 2;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string score = 3;
  if (this->score().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_score());
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserScoreRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.UserScoreRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const UserScoreRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserScoreRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.UserScoreRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.UserScoreRecord)
    MergeFrom(*source);
  }
}

void UserScoreRecord::MergeFrom(const UserScoreRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.UserScoreRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
  if (from.score().size() > 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void UserScoreRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.UserScoreRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserScoreRecord::CopyFrom(const UserScoreRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.UserScoreRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserScoreRecord::IsInitialized() const {
  return true;
}

void UserScoreRecord::InternalSwap(UserScoreRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  score_.Swap(&other->score_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserScoreRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSFreeTimeEnd::_Internal {
 public:
};

CSFreeTimeEnd::CSFreeTimeEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSFreeTimeEnd)
}
CSFreeTimeEnd::CSFreeTimeEnd(const CSFreeTimeEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSFreeTimeEnd)
}

void CSFreeTimeEnd::SharedCtor() {
}

CSFreeTimeEnd::~CSFreeTimeEnd() {
  // @@protoc_insertion_point(destructor:BYDLD.CSFreeTimeEnd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSFreeTimeEnd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSFreeTimeEnd::ArenaDtor(void* object) {
  CSFreeTimeEnd* _this = reinterpret_cast< CSFreeTimeEnd* >(object);
  (void)_this;
}
void CSFreeTimeEnd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSFreeTimeEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSFreeTimeEnd& CSFreeTimeEnd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSFreeTimeEnd_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSFreeTimeEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSFreeTimeEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSFreeTimeEnd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSFreeTimeEnd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSFreeTimeEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSFreeTimeEnd)
  return target;
}

size_t CSFreeTimeEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSFreeTimeEnd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSFreeTimeEnd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSFreeTimeEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const CSFreeTimeEnd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSFreeTimeEnd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSFreeTimeEnd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSFreeTimeEnd)
    MergeFrom(*source);
  }
}

void CSFreeTimeEnd::MergeFrom(const CSFreeTimeEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSFreeTimeEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSFreeTimeEnd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSFreeTimeEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSFreeTimeEnd::CopyFrom(const CSFreeTimeEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSFreeTimeEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFreeTimeEnd::IsInitialized() const {
  return true;
}

void CSFreeTimeEnd::InternalSwap(CSFreeTimeEnd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSFreeTimeEnd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSyncFreeTimes::_Internal {
 public:
};

SCSyncFreeTimes::SCSyncFreeTimes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCSyncFreeTimes)
}
SCSyncFreeTimes::SCSyncFreeTimes(const SCSyncFreeTimes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&times_, &from.times_,
    static_cast<size_t>(reinterpret_cast<char*>(&exchange_) -
    reinterpret_cast<char*>(&times_)) + sizeof(exchange_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCSyncFreeTimes)
}

void SCSyncFreeTimes::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&times_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&exchange_) -
      reinterpret_cast<char*>(&times_)) + sizeof(exchange_));
}

SCSyncFreeTimes::~SCSyncFreeTimes() {
  // @@protoc_insertion_point(destructor:BYDLD.SCSyncFreeTimes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSyncFreeTimes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSyncFreeTimes::ArenaDtor(void* object) {
  SCSyncFreeTimes* _this = reinterpret_cast< SCSyncFreeTimes* >(object);
  (void)_this;
}
void SCSyncFreeTimes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSyncFreeTimes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSyncFreeTimes& SCSyncFreeTimes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSyncFreeTimes_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCSyncFreeTimes::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCSyncFreeTimes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&times_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exchange_) -
      reinterpret_cast<char*>(&times_)) + sizeof(exchange_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSyncFreeTimes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 times = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair_idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 exchange = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          exchange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSyncFreeTimes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCSyncFreeTimes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 times = 1;
  if (this->times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_times(), target);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  // int32 chair_idx = 3;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_chair_idx(), target);
  }

  // int32 type = 4;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_type(), target);
  }

  // int32 exchange = 5;
  if (this->exchange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_exchange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCSyncFreeTimes)
  return target;
}

size_t SCSyncFreeTimes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCSyncFreeTimes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 times = 1;
  if (this->times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_times());
  }

  // int32 level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int32 chair_idx = 3;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 exchange = 5;
  if (this->exchange() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_exchange());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSyncFreeTimes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCSyncFreeTimes)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSyncFreeTimes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSyncFreeTimes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCSyncFreeTimes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCSyncFreeTimes)
    MergeFrom(*source);
  }
}

void SCSyncFreeTimes::MergeFrom(const SCSyncFreeTimes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCSyncFreeTimes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.times() != 0) {
    _internal_set_times(from._internal_times());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.exchange() != 0) {
    _internal_set_exchange(from._internal_exchange());
  }
}

void SCSyncFreeTimes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCSyncFreeTimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSyncFreeTimes::CopyFrom(const SCSyncFreeTimes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCSyncFreeTimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSyncFreeTimes::IsInitialized() const {
  return true;
}

void SCSyncFreeTimes::InternalSwap(SCSyncFreeTimes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCSyncFreeTimes, exchange_)
      + sizeof(SCSyncFreeTimes::exchange_)
      - PROTOBUF_FIELD_OFFSET(SCSyncFreeTimes, times_)>(
          reinterpret_cast<char*>(&times_),
          reinterpret_cast<char*>(&other->times_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSyncFreeTimes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSClickStatistic::_Internal {
 public:
};

CSClickStatistic::CSClickStatistic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSClickStatistic)
}
CSClickStatistic::CSClickStatistic(const CSClickStatistic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_num().empty()) {
    num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_num(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSClickStatistic)
}

void CSClickStatistic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSClickStatistic_BYDLD_2eproto.base);
  num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CSClickStatistic::~CSClickStatistic() {
  // @@protoc_insertion_point(destructor:BYDLD.CSClickStatistic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSClickStatistic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  num_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSClickStatistic::ArenaDtor(void* object) {
  CSClickStatistic* _this = reinterpret_cast< CSClickStatistic* >(object);
  (void)_this;
}
void CSClickStatistic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSClickStatistic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSClickStatistic& CSClickStatistic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSClickStatistic_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSClickStatistic::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSClickStatistic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSClickStatistic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_num();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.CSClickStatistic.num"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSClickStatistic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSClickStatistic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string num = 1;
  if (this->num().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_num().data(), static_cast<int>(this->_internal_num().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.CSClickStatistic.num");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSClickStatistic)
  return target;
}

size_t CSClickStatistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSClickStatistic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string num = 1;
  if (this->num().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSClickStatistic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSClickStatistic)
  GOOGLE_DCHECK_NE(&from, this);
  const CSClickStatistic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSClickStatistic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSClickStatistic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSClickStatistic)
    MergeFrom(*source);
  }
}

void CSClickStatistic::MergeFrom(const CSClickStatistic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSClickStatistic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num().size() > 0) {
    _internal_set_num(from._internal_num());
  }
}

void CSClickStatistic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSClickStatistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSClickStatistic::CopyFrom(const CSClickStatistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSClickStatistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSClickStatistic::IsInitialized() const {
  return true;
}

void CSClickStatistic::InternalSwap(CSClickStatistic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  num_.Swap(&other->num_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CSClickStatistic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class JumpHighArena::_Internal {
 public:
};

JumpHighArena::JumpHighArena(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fish_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.JumpHighArena)
}
JumpHighArena::JumpHighArena(const JumpHighArena& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fish_id_(from.fish_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_open_, &from.is_open_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_time_) -
    reinterpret_cast<char*>(&is_open_)) + sizeof(game_time_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.JumpHighArena)
}

void JumpHighArena::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&is_open_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&game_time_) -
      reinterpret_cast<char*>(&is_open_)) + sizeof(game_time_));
}

JumpHighArena::~JumpHighArena() {
  // @@protoc_insertion_point(destructor:BYDLD.JumpHighArena)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JumpHighArena::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void JumpHighArena::ArenaDtor(void* object) {
  JumpHighArena* _this = reinterpret_cast< JumpHighArena* >(object);
  (void)_this;
}
void JumpHighArena::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JumpHighArena::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JumpHighArena& JumpHighArena::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JumpHighArena_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void JumpHighArena::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.JumpHighArena)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fish_id_.Clear();
  ::memset(&is_open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_time_) -
      reinterpret_cast<char*>(&is_open_)) + sizeof(game_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JumpHighArena::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_open = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 coin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 game_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 fish_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_fish_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_fish_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JumpHighArena::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.JumpHighArena)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_open = 1;
  if (this->is_open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_open(), target);
  }

  // int32 vip = 2;
  if (this->vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_vip(), target);
  }

  // int32 coin = 3;
  if (this->coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_coin(), target);
  }

  // int32 game_time = 4;
  if (this->game_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_game_time(), target);
  }

  // repeated int32 fish_id = 5;
  {
    int byte_size = _fish_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_fish_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.JumpHighArena)
  return target;
}

size_t JumpHighArena::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.JumpHighArena)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 fish_id = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->fish_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _fish_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool is_open = 1;
  if (this->is_open() != 0) {
    total_size += 1 + 1;
  }

  // int32 vip = 2;
  if (this->vip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vip());
  }

  // int32 coin = 3;
  if (this->coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_coin());
  }

  // int32 game_time = 4;
  if (this->game_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JumpHighArena::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.JumpHighArena)
  GOOGLE_DCHECK_NE(&from, this);
  const JumpHighArena* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JumpHighArena>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.JumpHighArena)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.JumpHighArena)
    MergeFrom(*source);
  }
}

void JumpHighArena::MergeFrom(const JumpHighArena& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.JumpHighArena)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fish_id_.MergeFrom(from.fish_id_);
  if (from.is_open() != 0) {
    _internal_set_is_open(from._internal_is_open());
  }
  if (from.vip() != 0) {
    _internal_set_vip(from._internal_vip());
  }
  if (from.coin() != 0) {
    _internal_set_coin(from._internal_coin());
  }
  if (from.game_time() != 0) {
    _internal_set_game_time(from._internal_game_time());
  }
}

void JumpHighArena::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.JumpHighArena)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JumpHighArena::CopyFrom(const JumpHighArena& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.JumpHighArena)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JumpHighArena::IsInitialized() const {
  return true;
}

void JumpHighArena::InternalSwap(JumpHighArena* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fish_id_.InternalSwap(&other->fish_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JumpHighArena, game_time_)
      + sizeof(JumpHighArena::game_time_)
      - PROTOBUF_FIELD_OFFSET(JumpHighArena, is_open_)>(
          reinterpret_cast<char*>(&is_open_),
          reinterpret_cast<char*>(&other->is_open_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JumpHighArena::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GiftBag::_Internal {
 public:
};

GiftBag::GiftBag(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fish_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.GiftBag)
}
GiftBag::GiftBag(const GiftBag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fish_id_(from.fish_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_open_ = from.is_open_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.GiftBag)
}

void GiftBag::SharedCtor() {
  is_open_ = false;
}

GiftBag::~GiftBag() {
  // @@protoc_insertion_point(destructor:BYDLD.GiftBag)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GiftBag::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GiftBag::ArenaDtor(void* object) {
  GiftBag* _this = reinterpret_cast< GiftBag* >(object);
  (void)_this;
}
void GiftBag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GiftBag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GiftBag& GiftBag::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GiftBag_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void GiftBag::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.GiftBag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fish_id_.Clear();
  is_open_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GiftBag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_open = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 fish_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_fish_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_fish_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GiftBag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.GiftBag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_open = 1;
  if (this->is_open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_open(), target);
  }

  // repeated int32 fish_id = 2;
  {
    int byte_size = _fish_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_fish_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.GiftBag)
  return target;
}

size_t GiftBag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.GiftBag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 fish_id = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->fish_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _fish_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool is_open = 1;
  if (this->is_open() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GiftBag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.GiftBag)
  GOOGLE_DCHECK_NE(&from, this);
  const GiftBag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GiftBag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.GiftBag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.GiftBag)
    MergeFrom(*source);
  }
}

void GiftBag::MergeFrom(const GiftBag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.GiftBag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fish_id_.MergeFrom(from.fish_id_);
  if (from.is_open() != 0) {
    _internal_set_is_open(from._internal_is_open());
  }
}

void GiftBag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.GiftBag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GiftBag::CopyFrom(const GiftBag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.GiftBag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiftBag::IsInitialized() const {
  return true;
}

void GiftBag::InternalSwap(GiftBag* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fish_id_.InternalSwap(&other->fish_id_);
  swap(is_open_, other->is_open_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GiftBag::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NewYearCardActivityInfo::_Internal {
 public:
};

NewYearCardActivityInfo::NewYearCardActivityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.NewYearCardActivityInfo)
}
NewYearCardActivityInfo::NewYearCardActivityInfo(const NewYearCardActivityInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&card_enable_, &from.card_enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&card_vip_) -
    reinterpret_cast<char*>(&card_enable_)) + sizeof(card_vip_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.NewYearCardActivityInfo)
}

void NewYearCardActivityInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&card_enable_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&card_vip_) -
      reinterpret_cast<char*>(&card_enable_)) + sizeof(card_vip_));
}

NewYearCardActivityInfo::~NewYearCardActivityInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.NewYearCardActivityInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewYearCardActivityInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NewYearCardActivityInfo::ArenaDtor(void* object) {
  NewYearCardActivityInfo* _this = reinterpret_cast< NewYearCardActivityInfo* >(object);
  (void)_this;
}
void NewYearCardActivityInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewYearCardActivityInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewYearCardActivityInfo& NewYearCardActivityInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewYearCardActivityInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void NewYearCardActivityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.NewYearCardActivityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&card_enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_vip_) -
      reinterpret_cast<char*>(&card_enable_)) + sizeof(card_vip_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewYearCardActivityInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool card_enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          card_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 card_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          card_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 card_vip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          card_vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewYearCardActivityInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.NewYearCardActivityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool card_enable = 1;
  if (this->card_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_card_enable(), target);
  }

  // int32 card_count = 2;
  if (this->card_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_card_count(), target);
  }

  // int32 card_vip = 3;
  if (this->card_vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_card_vip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.NewYearCardActivityInfo)
  return target;
}

size_t NewYearCardActivityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.NewYearCardActivityInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool card_enable = 1;
  if (this->card_enable() != 0) {
    total_size += 1 + 1;
  }

  // int32 card_count = 2;
  if (this->card_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_card_count());
  }

  // int32 card_vip = 3;
  if (this->card_vip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_card_vip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewYearCardActivityInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.NewYearCardActivityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NewYearCardActivityInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewYearCardActivityInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.NewYearCardActivityInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.NewYearCardActivityInfo)
    MergeFrom(*source);
  }
}

void NewYearCardActivityInfo::MergeFrom(const NewYearCardActivityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.NewYearCardActivityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.card_enable() != 0) {
    _internal_set_card_enable(from._internal_card_enable());
  }
  if (from.card_count() != 0) {
    _internal_set_card_count(from._internal_card_count());
  }
  if (from.card_vip() != 0) {
    _internal_set_card_vip(from._internal_card_vip());
  }
}

void NewYearCardActivityInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.NewYearCardActivityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewYearCardActivityInfo::CopyFrom(const NewYearCardActivityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.NewYearCardActivityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewYearCardActivityInfo::IsInitialized() const {
  return true;
}

void NewYearCardActivityInfo::InternalSwap(NewYearCardActivityInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewYearCardActivityInfo, card_vip_)
      + sizeof(NewYearCardActivityInfo::card_vip_)
      - PROTOBUF_FIELD_OFFSET(NewYearCardActivityInfo, card_enable_)>(
          reinterpret_cast<char*>(&card_enable_),
          reinterpret_cast<char*>(&other->card_enable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewYearCardActivityInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserPoolActivityInfo::_Internal {
 public:
};

UserPoolActivityInfo::UserPoolActivityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  award_fish_(arena),
  user_pool_limit_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.UserPoolActivityInfo)
}
UserPoolActivityInfo::UserPoolActivityInfo(const UserPoolActivityInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      award_fish_(from.award_fish_),
      user_pool_limit_(from.user_pool_limit_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_pool_show_ = from.user_pool_show_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.UserPoolActivityInfo)
}

void UserPoolActivityInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserPoolActivityInfo_BYDLD_2eproto.base);
  user_pool_show_ = false;
}

UserPoolActivityInfo::~UserPoolActivityInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.UserPoolActivityInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserPoolActivityInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserPoolActivityInfo::ArenaDtor(void* object) {
  UserPoolActivityInfo* _this = reinterpret_cast< UserPoolActivityInfo* >(object);
  (void)_this;
}
void UserPoolActivityInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserPoolActivityInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserPoolActivityInfo& UserPoolActivityInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserPoolActivityInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void UserPoolActivityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.UserPoolActivityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  award_fish_.Clear();
  user_pool_limit_.Clear();
  user_pool_show_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserPoolActivityInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool user_pool_show = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_pool_show_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 award_fish = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_award_fish(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_award_fish(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.Object3 user_pool_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_pool_limit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserPoolActivityInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.UserPoolActivityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool user_pool_show = 1;
  if (this->user_pool_show() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_user_pool_show(), target);
  }

  // repeated int32 award_fish = 2;
  {
    int byte_size = _award_fish_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_award_fish(), byte_size, target);
    }
  }

  // repeated .BYDLD.Object3 user_pool_limit = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_user_pool_limit_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_user_pool_limit(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.UserPoolActivityInfo)
  return target;
}

size_t UserPoolActivityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.UserPoolActivityInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 award_fish = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->award_fish_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _award_fish_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .BYDLD.Object3 user_pool_limit = 3;
  total_size += 1UL * this->_internal_user_pool_limit_size();
  for (const auto& msg : this->user_pool_limit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool user_pool_show = 1;
  if (this->user_pool_show() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserPoolActivityInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.UserPoolActivityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserPoolActivityInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserPoolActivityInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.UserPoolActivityInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.UserPoolActivityInfo)
    MergeFrom(*source);
  }
}

void UserPoolActivityInfo::MergeFrom(const UserPoolActivityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.UserPoolActivityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  award_fish_.MergeFrom(from.award_fish_);
  user_pool_limit_.MergeFrom(from.user_pool_limit_);
  if (from.user_pool_show() != 0) {
    _internal_set_user_pool_show(from._internal_user_pool_show());
  }
}

void UserPoolActivityInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.UserPoolActivityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserPoolActivityInfo::CopyFrom(const UserPoolActivityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.UserPoolActivityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPoolActivityInfo::IsInitialized() const {
  return true;
}

void UserPoolActivityInfo::InternalSwap(UserPoolActivityInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  award_fish_.InternalSwap(&other->award_fish_);
  user_pool_limit_.InternalSwap(&other->user_pool_limit_);
  swap(user_pool_show_, other->user_pool_show_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserPoolActivityInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DragonBallConfig::_Internal {
 public:
};

DragonBallConfig::DragonBallConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.DragonBallConfig)
}
DragonBallConfig::DragonBallConfig(const DragonBallConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ratio_, &from.ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_) -
    reinterpret_cast<char*>(&ratio_)) + sizeof(next_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.DragonBallConfig)
}

void DragonBallConfig::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ratio_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&next_) -
      reinterpret_cast<char*>(&ratio_)) + sizeof(next_));
}

DragonBallConfig::~DragonBallConfig() {
  // @@protoc_insertion_point(destructor:BYDLD.DragonBallConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DragonBallConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DragonBallConfig::ArenaDtor(void* object) {
  DragonBallConfig* _this = reinterpret_cast< DragonBallConfig* >(object);
  (void)_this;
}
void DragonBallConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DragonBallConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DragonBallConfig& DragonBallConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DragonBallConfig_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void DragonBallConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.DragonBallConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_) -
      reinterpret_cast<char*>(&ratio_)) + sizeof(next_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DragonBallConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ratio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool next = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          next_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DragonBallConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.DragonBallConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ratio = 1;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ratio(), target);
  }

  // bool next = 2;
  if (this->next() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_next(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.DragonBallConfig)
  return target;
}

size_t DragonBallConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.DragonBallConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ratio = 1;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // bool next = 2;
  if (this->next() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DragonBallConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.DragonBallConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DragonBallConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DragonBallConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.DragonBallConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.DragonBallConfig)
    MergeFrom(*source);
  }
}

void DragonBallConfig::MergeFrom(const DragonBallConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.DragonBallConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.next() != 0) {
    _internal_set_next(from._internal_next());
  }
}

void DragonBallConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.DragonBallConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DragonBallConfig::CopyFrom(const DragonBallConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.DragonBallConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DragonBallConfig::IsInitialized() const {
  return true;
}

void DragonBallConfig::InternalSwap(DragonBallConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DragonBallConfig, next_)
      + sizeof(DragonBallConfig::next_)
      - PROTOBUF_FIELD_OFFSET(DragonBallConfig, ratio_)>(
          reinterpret_cast<char*>(&ratio_),
          reinterpret_cast<char*>(&other->ratio_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DragonBallConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCActivityInfo::_Internal {
 public:
  static const ::BYDLD::JumpHighArena& jump(const SCActivityInfo* msg);
  static const ::BYDLD::GiftBag& config(const SCActivityInfo* msg);
  static const ::BYDLD::NewYearCardActivityInfo& card(const SCActivityInfo* msg);
  static const ::BYDLD::UserPoolActivityInfo& user_pool(const SCActivityInfo* msg);
};

const ::BYDLD::JumpHighArena&
SCActivityInfo::_Internal::jump(const SCActivityInfo* msg) {
  return *msg->jump_;
}
const ::BYDLD::GiftBag&
SCActivityInfo::_Internal::config(const SCActivityInfo* msg) {
  return *msg->config_;
}
const ::BYDLD::NewYearCardActivityInfo&
SCActivityInfo::_Internal::card(const SCActivityInfo* msg) {
  return *msg->card_;
}
const ::BYDLD::UserPoolActivityInfo&
SCActivityInfo::_Internal::user_pool(const SCActivityInfo* msg) {
  return *msg->user_pool_;
}
SCActivityInfo::SCActivityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dragon_wheel_(arena),
  trident_wheel_(arena),
  dragon_ball_(arena),
  toad_multi_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCActivityInfo)
}
SCActivityInfo::SCActivityInfo(const SCActivityInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dragon_wheel_(from.dragon_wheel_),
      trident_wheel_(from.trident_wheel_),
      dragon_ball_(from.dragon_ball_),
      toad_multi_(from.toad_multi_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_jump()) {
    jump_ = new ::BYDLD::JumpHighArena(*from.jump_);
  } else {
    jump_ = nullptr;
  }
  if (from._internal_has_config()) {
    config_ = new ::BYDLD::GiftBag(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_card()) {
    card_ = new ::BYDLD::NewYearCardActivityInfo(*from.card_);
  } else {
    card_ = nullptr;
  }
  if (from._internal_has_user_pool()) {
    user_pool_ = new ::BYDLD::UserPoolActivityInfo(*from.user_pool_);
  } else {
    user_pool_ = nullptr;
  }
  ::memcpy(&award_pool_rank_, &from.award_pool_rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&lucky_draw_) -
    reinterpret_cast<char*>(&award_pool_rank_)) + sizeof(lucky_draw_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCActivityInfo)
}

void SCActivityInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCActivityInfo_BYDLD_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&jump_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lucky_draw_) -
      reinterpret_cast<char*>(&jump_)) + sizeof(lucky_draw_));
}

SCActivityInfo::~SCActivityInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.SCActivityInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCActivityInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete jump_;
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete card_;
  if (this != internal_default_instance()) delete user_pool_;
}

void SCActivityInfo::ArenaDtor(void* object) {
  SCActivityInfo* _this = reinterpret_cast< SCActivityInfo* >(object);
  (void)_this;
}
void SCActivityInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCActivityInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCActivityInfo& SCActivityInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCActivityInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCActivityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCActivityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dragon_wheel_.Clear();
  trident_wheel_.Clear();
  dragon_ball_.Clear();
  toad_multi_.Clear();
  if (GetArena() == nullptr && jump_ != nullptr) {
    delete jump_;
  }
  jump_ = nullptr;
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArena() == nullptr && card_ != nullptr) {
    delete card_;
  }
  card_ = nullptr;
  if (GetArena() == nullptr && user_pool_ != nullptr) {
    delete user_pool_;
  }
  user_pool_ = nullptr;
  ::memset(&award_pool_rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lucky_draw_) -
      reinterpret_cast<char*>(&award_pool_rank_)) + sizeof(lucky_draw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCActivityInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BYDLD.JumpHighArena jump = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_jump(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BYDLD.GiftBag config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BYDLD.NewYearCardActivityInfo card = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_card(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool award_pool_rank = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          award_pool_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BYDLD.UserPoolActivityInfo user_pool = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_pool(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool lucky_draw = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          lucky_draw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.Object4 dragon_wheel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dragon_wheel(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.Object3 trident_wheel = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trident_wheel(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.DragonBallConfig dragon_ball = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dragon_ball(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 toad_multi = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_toad_multi(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_toad_multi(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCActivityInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCActivityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BYDLD.JumpHighArena jump = 1;
  if (this->has_jump()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::jump(this), target, stream);
  }

  // .BYDLD.GiftBag config = 2;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::config(this), target, stream);
  }

  // .BYDLD.NewYearCardActivityInfo card = 3;
  if (this->has_card()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::card(this), target, stream);
  }

  // bool award_pool_rank = 4;
  if (this->award_pool_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_award_pool_rank(), target);
  }

  // .BYDLD.UserPoolActivityInfo user_pool = 5;
  if (this->has_user_pool()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::user_pool(this), target, stream);
  }

  // bool lucky_draw = 6;
  if (this->lucky_draw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_lucky_draw(), target);
  }

  // repeated .BYDLD.Object4 dragon_wheel = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dragon_wheel_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_dragon_wheel(i), target, stream);
  }

  // repeated .BYDLD.Object3 trident_wheel = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trident_wheel_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_trident_wheel(i), target, stream);
  }

  // repeated .BYDLD.DragonBallConfig dragon_ball = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dragon_ball_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_dragon_ball(i), target, stream);
  }

  // repeated int32 toad_multi = 10;
  {
    int byte_size = _toad_multi_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          10, _internal_toad_multi(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCActivityInfo)
  return target;
}

size_t SCActivityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCActivityInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.Object4 dragon_wheel = 7;
  total_size += 1UL * this->_internal_dragon_wheel_size();
  for (const auto& msg : this->dragon_wheel_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .BYDLD.Object3 trident_wheel = 8;
  total_size += 1UL * this->_internal_trident_wheel_size();
  for (const auto& msg : this->trident_wheel_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .BYDLD.DragonBallConfig dragon_ball = 9;
  total_size += 1UL * this->_internal_dragon_ball_size();
  for (const auto& msg : this->dragon_ball_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 toad_multi = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->toad_multi_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _toad_multi_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .BYDLD.JumpHighArena jump = 1;
  if (this->has_jump()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *jump_);
  }

  // .BYDLD.GiftBag config = 2;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .BYDLD.NewYearCardActivityInfo card = 3;
  if (this->has_card()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *card_);
  }

  // .BYDLD.UserPoolActivityInfo user_pool = 5;
  if (this->has_user_pool()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_pool_);
  }

  // bool award_pool_rank = 4;
  if (this->award_pool_rank() != 0) {
    total_size += 1 + 1;
  }

  // bool lucky_draw = 6;
  if (this->lucky_draw() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCActivityInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCActivityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCActivityInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCActivityInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCActivityInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCActivityInfo)
    MergeFrom(*source);
  }
}

void SCActivityInfo::MergeFrom(const SCActivityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCActivityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dragon_wheel_.MergeFrom(from.dragon_wheel_);
  trident_wheel_.MergeFrom(from.trident_wheel_);
  dragon_ball_.MergeFrom(from.dragon_ball_);
  toad_multi_.MergeFrom(from.toad_multi_);
  if (from.has_jump()) {
    _internal_mutable_jump()->::BYDLD::JumpHighArena::MergeFrom(from._internal_jump());
  }
  if (from.has_config()) {
    _internal_mutable_config()->::BYDLD::GiftBag::MergeFrom(from._internal_config());
  }
  if (from.has_card()) {
    _internal_mutable_card()->::BYDLD::NewYearCardActivityInfo::MergeFrom(from._internal_card());
  }
  if (from.has_user_pool()) {
    _internal_mutable_user_pool()->::BYDLD::UserPoolActivityInfo::MergeFrom(from._internal_user_pool());
  }
  if (from.award_pool_rank() != 0) {
    _internal_set_award_pool_rank(from._internal_award_pool_rank());
  }
  if (from.lucky_draw() != 0) {
    _internal_set_lucky_draw(from._internal_lucky_draw());
  }
}

void SCActivityInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCActivityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCActivityInfo::CopyFrom(const SCActivityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCActivityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCActivityInfo::IsInitialized() const {
  return true;
}

void SCActivityInfo::InternalSwap(SCActivityInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dragon_wheel_.InternalSwap(&other->dragon_wheel_);
  trident_wheel_.InternalSwap(&other->trident_wheel_);
  dragon_ball_.InternalSwap(&other->dragon_ball_);
  toad_multi_.InternalSwap(&other->toad_multi_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCActivityInfo, lucky_draw_)
      + sizeof(SCActivityInfo::lucky_draw_)
      - PROTOBUF_FIELD_OFFSET(SCActivityInfo, jump_)>(
          reinterpret_cast<char*>(&jump_),
          reinterpret_cast<char*>(&other->jump_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCActivityInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPropEndNotify::_Internal {
 public:
};

SCPropEndNotify::SCPropEndNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCPropEndNotify)
}
SCPropEndNotify::SCPropEndNotify(const SCPropEndNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&free_times_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(free_times_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCPropEndNotify)
}

void SCPropEndNotify::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&free_times_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(free_times_));
}

SCPropEndNotify::~SCPropEndNotify() {
  // @@protoc_insertion_point(destructor:BYDLD.SCPropEndNotify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPropEndNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCPropEndNotify::ArenaDtor(void* object) {
  SCPropEndNotify* _this = reinterpret_cast< SCPropEndNotify* >(object);
  (void)_this;
}
void SCPropEndNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPropEndNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPropEndNotify& SCPropEndNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPropEndNotify_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCPropEndNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCPropEndNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&free_times_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(free_times_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPropEndNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 prop_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          prop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 free_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          free_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 free_times = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          free_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPropEndNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCPropEndNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 prop_id = 2;
  if (this->prop_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_prop_id(), target);
  }

  // int32 status = 3;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_status(), target);
  }

  // int32 free_level = 4;
  if (this->free_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_free_level(), target);
  }

  // int32 free_times = 5;
  if (this->free_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_free_times(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCPropEndNotify)
  return target;
}

size_t SCPropEndNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCPropEndNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 prop_id = 2;
  if (this->prop_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prop_id());
  }

  // int32 status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 free_level = 4;
  if (this->free_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_free_level());
  }

  // int32 free_times = 5;
  if (this->free_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_free_times());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPropEndNotify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCPropEndNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPropEndNotify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPropEndNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCPropEndNotify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCPropEndNotify)
    MergeFrom(*source);
  }
}

void SCPropEndNotify::MergeFrom(const SCPropEndNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCPropEndNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.prop_id() != 0) {
    _internal_set_prop_id(from._internal_prop_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.free_level() != 0) {
    _internal_set_free_level(from._internal_free_level());
  }
  if (from.free_times() != 0) {
    _internal_set_free_times(from._internal_free_times());
  }
}

void SCPropEndNotify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCPropEndNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPropEndNotify::CopyFrom(const SCPropEndNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCPropEndNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPropEndNotify::IsInitialized() const {
  return true;
}

void SCPropEndNotify::InternalSwap(SCPropEndNotify* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCPropEndNotify, free_times_)
      + sizeof(SCPropEndNotify::free_times_)
      - PROTOBUF_FIELD_OFFSET(SCPropEndNotify, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPropEndNotify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPropDropNotify::_Internal {
 public:
};

SCPropDropNotify::SCPropDropNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCPropDropNotify)
}
SCPropDropNotify::SCPropDropNotify(const SCPropDropNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&lock_ratio_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(lock_ratio_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCPropDropNotify)
}

void SCPropDropNotify::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lock_ratio_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(lock_ratio_));
}

SCPropDropNotify::~SCPropDropNotify() {
  // @@protoc_insertion_point(destructor:BYDLD.SCPropDropNotify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPropDropNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCPropDropNotify::ArenaDtor(void* object) {
  SCPropDropNotify* _this = reinterpret_cast< SCPropDropNotify* >(object);
  (void)_this;
}
void SCPropDropNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPropDropNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPropDropNotify& SCPropDropNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPropDropNotify_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCPropDropNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCPropDropNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lock_ratio_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(lock_ratio_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPropDropNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fish_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 prop_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          prop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lock_ratio = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          lock_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPropDropNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCPropDropNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 fish_uid = 2;
  if (this->fish_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fish_uid(), target);
  }

  // int32 prop_id = 3;
  if (this->prop_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_prop_id(), target);
  }

  // int32 count = 4;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_count(), target);
  }

  // int32 lock_ratio = 5;
  if (this->lock_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_lock_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCPropDropNotify)
  return target;
}

size_t SCPropDropNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCPropDropNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 fish_uid = 2;
  if (this->fish_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_uid());
  }

  // int32 prop_id = 3;
  if (this->prop_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prop_id());
  }

  // int32 count = 4;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  // int32 lock_ratio = 5;
  if (this->lock_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lock_ratio());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPropDropNotify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCPropDropNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPropDropNotify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPropDropNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCPropDropNotify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCPropDropNotify)
    MergeFrom(*source);
  }
}

void SCPropDropNotify::MergeFrom(const SCPropDropNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCPropDropNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.fish_uid() != 0) {
    _internal_set_fish_uid(from._internal_fish_uid());
  }
  if (from.prop_id() != 0) {
    _internal_set_prop_id(from._internal_prop_id());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.lock_ratio() != 0) {
    _internal_set_lock_ratio(from._internal_lock_ratio());
  }
}

void SCPropDropNotify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCPropDropNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPropDropNotify::CopyFrom(const SCPropDropNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCPropDropNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPropDropNotify::IsInitialized() const {
  return true;
}

void SCPropDropNotify::InternalSwap(SCPropDropNotify* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCPropDropNotify, lock_ratio_)
      + sizeof(SCPropDropNotify::lock_ratio_)
      - PROTOBUF_FIELD_OFFSET(SCPropDropNotify, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPropDropNotify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Prop::_Internal {
 public:
};

Prop::Prop(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.Prop)
}
Prop::Prop(const Prop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&trident_multi_) -
    reinterpret_cast<char*>(&id_)) + sizeof(trident_multi_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.Prop)
}

void Prop::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&trident_multi_) -
      reinterpret_cast<char*>(&id_)) + sizeof(trident_multi_));
}

Prop::~Prop() {
  // @@protoc_insertion_point(destructor:BYDLD.Prop)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Prop::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Prop::ArenaDtor(void* object) {
  Prop* _this = reinterpret_cast< Prop* >(object);
  (void)_this;
}
void Prop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Prop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Prop& Prop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Prop_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void Prop::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.Prop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trident_multi_) -
      reinterpret_cast<char*>(&id_)) + sizeof(trident_multi_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Prop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float angle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 multiple = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 crit_multi = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          crit_multi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ingot_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ingot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 remain_times = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          remain_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_times = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          total_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bullet_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          bullet_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ingot_multi = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ingot_multi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trident_multi = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          trident_multi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Prop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.Prop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // int32 ratio = 3;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ratio(), target);
  }

  // float x = 4;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_x(), target);
  }

  // float y = 5;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_y(), target);
  }

  // float angle = 6;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_angle(), target);
  }

  // int32 status = 7;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_status(), target);
  }

  // int32 multiple = 8;
  if (this->multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_multiple(), target);
  }

  // int32 crit_multi = 9;
  if (this->crit_multi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_crit_multi(), target);
  }

  // int32 ingot_id = 10;
  if (this->ingot_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_ingot_id(), target);
  }

  // int32 remain_times = 11;
  if (this->remain_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_remain_times(), target);
  }

  // int32 total_times = 12;
  if (this->total_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_total_times(), target);
  }

  // int32 bullet_id = 13;
  if (this->bullet_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_bullet_id(), target);
  }

  // int32 ingot_multi = 14;
  if (this->ingot_multi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_ingot_multi(), target);
  }

  // int32 trident_multi = 15;
  if (this->trident_multi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_trident_multi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.Prop)
  return target;
}

size_t Prop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.Prop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  // int32 ratio = 3;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // float x = 4;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 5;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float angle = 6;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 status = 7;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 multiple = 8;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_multiple());
  }

  // int32 crit_multi = 9;
  if (this->crit_multi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_crit_multi());
  }

  // int32 ingot_id = 10;
  if (this->ingot_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ingot_id());
  }

  // int32 remain_times = 11;
  if (this->remain_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_remain_times());
  }

  // int32 total_times = 12;
  if (this->total_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_times());
  }

  // int32 bullet_id = 13;
  if (this->bullet_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bullet_id());
  }

  // int32 ingot_multi = 14;
  if (this->ingot_multi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ingot_multi());
  }

  // int32 trident_multi = 15;
  if (this->trident_multi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trident_multi());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Prop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.Prop)
  GOOGLE_DCHECK_NE(&from, this);
  const Prop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Prop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.Prop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.Prop)
    MergeFrom(*source);
  }
}

void Prop::MergeFrom(const Prop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.Prop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.angle() <= 0 && from.angle() >= 0)) {
    _internal_set_angle(from._internal_angle());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.multiple() != 0) {
    _internal_set_multiple(from._internal_multiple());
  }
  if (from.crit_multi() != 0) {
    _internal_set_crit_multi(from._internal_crit_multi());
  }
  if (from.ingot_id() != 0) {
    _internal_set_ingot_id(from._internal_ingot_id());
  }
  if (from.remain_times() != 0) {
    _internal_set_remain_times(from._internal_remain_times());
  }
  if (from.total_times() != 0) {
    _internal_set_total_times(from._internal_total_times());
  }
  if (from.bullet_id() != 0) {
    _internal_set_bullet_id(from._internal_bullet_id());
  }
  if (from.ingot_multi() != 0) {
    _internal_set_ingot_multi(from._internal_ingot_multi());
  }
  if (from.trident_multi() != 0) {
    _internal_set_trident_multi(from._internal_trident_multi());
  }
}

void Prop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.Prop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Prop::CopyFrom(const Prop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.Prop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prop::IsInitialized() const {
  return true;
}

void Prop::InternalSwap(Prop* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Prop, trident_multi_)
      + sizeof(Prop::trident_multi_)
      - PROTOBUF_FIELD_OFFSET(Prop, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Prop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserProp::_Internal {
 public:
};

UserProp::UserProp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  props_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.UserProp)
}
UserProp::UserProp(const UserProp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      props_(from.props_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chair_idx_ = from.chair_idx_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.UserProp)
}

void UserProp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserProp_BYDLD_2eproto.base);
  chair_idx_ = 0;
}

UserProp::~UserProp() {
  // @@protoc_insertion_point(destructor:BYDLD.UserProp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserProp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserProp::ArenaDtor(void* object) {
  UserProp* _this = reinterpret_cast< UserProp* >(object);
  (void)_this;
}
void UserProp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserProp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserProp& UserProp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserProp_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void UserProp::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.UserProp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  props_.Clear();
  chair_idx_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserProp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.Prop props = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_props(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserProp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.UserProp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // repeated .BYDLD.Prop props = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_props_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_props(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.UserProp)
  return target;
}

size_t UserProp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.UserProp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.Prop props = 2;
  total_size += 1UL * this->_internal_props_size();
  for (const auto& msg : this->props_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserProp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.UserProp)
  GOOGLE_DCHECK_NE(&from, this);
  const UserProp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserProp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.UserProp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.UserProp)
    MergeFrom(*source);
  }
}

void UserProp::MergeFrom(const UserProp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.UserProp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  props_.MergeFrom(from.props_);
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
}

void UserProp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.UserProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserProp::CopyFrom(const UserProp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.UserProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserProp::IsInitialized() const {
  return true;
}

void UserProp::InternalSwap(UserProp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  props_.InternalSwap(&other->props_);
  swap(chair_idx_, other->chair_idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserProp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UsersProp::_Internal {
 public:
};

UsersProp::UsersProp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  user_prop_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.UsersProp)
}
UsersProp::UsersProp(const UsersProp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      user_prop_(from.user_prop_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.UsersProp)
}

void UsersProp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UsersProp_BYDLD_2eproto.base);
}

UsersProp::~UsersProp() {
  // @@protoc_insertion_point(destructor:BYDLD.UsersProp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UsersProp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UsersProp::ArenaDtor(void* object) {
  UsersProp* _this = reinterpret_cast< UsersProp* >(object);
  (void)_this;
}
void UsersProp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UsersProp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsersProp& UsersProp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsersProp_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void UsersProp::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.UsersProp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_prop_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UsersProp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.UserProp user_prop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_prop(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsersProp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.UsersProp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.UserProp user_prop = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_user_prop_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_user_prop(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.UsersProp)
  return target;
}

size_t UsersProp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.UsersProp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.UserProp user_prop = 1;
  total_size += 1UL * this->_internal_user_prop_size();
  for (const auto& msg : this->user_prop_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsersProp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.UsersProp)
  GOOGLE_DCHECK_NE(&from, this);
  const UsersProp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsersProp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.UsersProp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.UsersProp)
    MergeFrom(*source);
  }
}

void UsersProp::MergeFrom(const UsersProp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.UsersProp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_prop_.MergeFrom(from.user_prop_);
}

void UsersProp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.UsersProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsersProp::CopyFrom(const UsersProp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.UsersProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsersProp::IsInitialized() const {
  return true;
}

void UsersProp::InternalSwap(UsersProp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_prop_.InternalSwap(&other->user_prop_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsersProp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SSAwardPoolMsg::_Internal {
 public:
};

SSAwardPoolMsg::SSAwardPoolMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SSAwardPoolMsg)
}
SSAwardPoolMsg::SSAwardPoolMsg(const SSAwardPoolMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&uniqueid_, &from.uniqueid_,
    static_cast<size_t>(reinterpret_cast<char*>(&delta_) -
    reinterpret_cast<char*>(&uniqueid_)) + sizeof(delta_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SSAwardPoolMsg)
}

void SSAwardPoolMsg::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&uniqueid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&delta_) -
      reinterpret_cast<char*>(&uniqueid_)) + sizeof(delta_));
}

SSAwardPoolMsg::~SSAwardPoolMsg() {
  // @@protoc_insertion_point(destructor:BYDLD.SSAwardPoolMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SSAwardPoolMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SSAwardPoolMsg::ArenaDtor(void* object) {
  SSAwardPoolMsg* _this = reinterpret_cast< SSAwardPoolMsg* >(object);
  (void)_this;
}
void SSAwardPoolMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSAwardPoolMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSAwardPoolMsg& SSAwardPoolMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSAwardPoolMsg_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SSAwardPoolMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SSAwardPoolMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uniqueid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delta_) -
      reinterpret_cast<char*>(&uniqueid_)) + sizeof(delta_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSAwardPoolMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uniqueID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uniqueid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 arenaID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          arenaid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 poolID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          poolid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 delta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSAwardPoolMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SSAwardPoolMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uniqueID = 1;
  if (this->uniqueid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uniqueid(), target);
  }

  // int32 arenaID = 2;
  if (this->arenaid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_arenaid(), target);
  }

  // int32 poolID = 3;
  if (this->poolid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_poolid(), target);
  }

  // int32 delta = 4;
  if (this->delta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_delta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SSAwardPoolMsg)
  return target;
}

size_t SSAwardPoolMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SSAwardPoolMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uniqueID = 1;
  if (this->uniqueid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uniqueid());
  }

  // int32 arenaID = 2;
  if (this->arenaid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_arenaid());
  }

  // int32 poolID = 3;
  if (this->poolid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_poolid());
  }

  // int32 delta = 4;
  if (this->delta() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_delta());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSAwardPoolMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SSAwardPoolMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SSAwardPoolMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSAwardPoolMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SSAwardPoolMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SSAwardPoolMsg)
    MergeFrom(*source);
  }
}

void SSAwardPoolMsg::MergeFrom(const SSAwardPoolMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SSAwardPoolMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uniqueid() != 0) {
    _internal_set_uniqueid(from._internal_uniqueid());
  }
  if (from.arenaid() != 0) {
    _internal_set_arenaid(from._internal_arenaid());
  }
  if (from.poolid() != 0) {
    _internal_set_poolid(from._internal_poolid());
  }
  if (from.delta() != 0) {
    _internal_set_delta(from._internal_delta());
  }
}

void SSAwardPoolMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SSAwardPoolMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSAwardPoolMsg::CopyFrom(const SSAwardPoolMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SSAwardPoolMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSAwardPoolMsg::IsInitialized() const {
  return true;
}

void SSAwardPoolMsg::InternalSwap(SSAwardPoolMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSAwardPoolMsg, delta_)
      + sizeof(SSAwardPoolMsg::delta_)
      - PROTOBUF_FIELD_OFFSET(SSAwardPoolMsg, uniqueid_)>(
          reinterpret_cast<char*>(&uniqueid_),
          reinterpret_cast<char*>(&other->uniqueid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSAwardPoolMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSScratchNewYearCard::_Internal {
 public:
};

CSScratchNewYearCard::CSScratchNewYearCard(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSScratchNewYearCard)
}
CSScratchNewYearCard::CSScratchNewYearCard(const CSScratchNewYearCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chair_idx_ = from.chair_idx_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSScratchNewYearCard)
}

void CSScratchNewYearCard::SharedCtor() {
  chair_idx_ = 0;
}

CSScratchNewYearCard::~CSScratchNewYearCard() {
  // @@protoc_insertion_point(destructor:BYDLD.CSScratchNewYearCard)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSScratchNewYearCard::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSScratchNewYearCard::ArenaDtor(void* object) {
  CSScratchNewYearCard* _this = reinterpret_cast< CSScratchNewYearCard* >(object);
  (void)_this;
}
void CSScratchNewYearCard::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSScratchNewYearCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSScratchNewYearCard& CSScratchNewYearCard::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSScratchNewYearCard_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSScratchNewYearCard::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSScratchNewYearCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chair_idx_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSScratchNewYearCard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSScratchNewYearCard::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSScratchNewYearCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSScratchNewYearCard)
  return target;
}

size_t CSScratchNewYearCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSScratchNewYearCard)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSScratchNewYearCard::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSScratchNewYearCard)
  GOOGLE_DCHECK_NE(&from, this);
  const CSScratchNewYearCard* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSScratchNewYearCard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSScratchNewYearCard)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSScratchNewYearCard)
    MergeFrom(*source);
  }
}

void CSScratchNewYearCard::MergeFrom(const CSScratchNewYearCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSScratchNewYearCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
}

void CSScratchNewYearCard::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSScratchNewYearCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSScratchNewYearCard::CopyFrom(const CSScratchNewYearCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSScratchNewYearCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSScratchNewYearCard::IsInitialized() const {
  return true;
}

void CSScratchNewYearCard::InternalSwap(CSScratchNewYearCard* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(chair_idx_, other->chair_idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSScratchNewYearCard::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSBuyNewYearCard::_Internal {
 public:
};

CSBuyNewYearCard::CSBuyNewYearCard(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSBuyNewYearCard)
}
CSBuyNewYearCard::CSBuyNewYearCard(const CSBuyNewYearCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  buy_count_ = from.buy_count_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSBuyNewYearCard)
}

void CSBuyNewYearCard::SharedCtor() {
  buy_count_ = 0;
}

CSBuyNewYearCard::~CSBuyNewYearCard() {
  // @@protoc_insertion_point(destructor:BYDLD.CSBuyNewYearCard)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSBuyNewYearCard::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSBuyNewYearCard::ArenaDtor(void* object) {
  CSBuyNewYearCard* _this = reinterpret_cast< CSBuyNewYearCard* >(object);
  (void)_this;
}
void CSBuyNewYearCard::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSBuyNewYearCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSBuyNewYearCard& CSBuyNewYearCard::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSBuyNewYearCard_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSBuyNewYearCard::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSBuyNewYearCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buy_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSBuyNewYearCard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 buy_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          buy_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSBuyNewYearCard::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSBuyNewYearCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 buy_count = 1;
  if (this->buy_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_buy_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSBuyNewYearCard)
  return target;
}

size_t CSBuyNewYearCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSBuyNewYearCard)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 buy_count = 1;
  if (this->buy_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_buy_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSBuyNewYearCard::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSBuyNewYearCard)
  GOOGLE_DCHECK_NE(&from, this);
  const CSBuyNewYearCard* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSBuyNewYearCard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSBuyNewYearCard)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSBuyNewYearCard)
    MergeFrom(*source);
  }
}

void CSBuyNewYearCard::MergeFrom(const CSBuyNewYearCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSBuyNewYearCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.buy_count() != 0) {
    _internal_set_buy_count(from._internal_buy_count());
  }
}

void CSBuyNewYearCard::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSBuyNewYearCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBuyNewYearCard::CopyFrom(const CSBuyNewYearCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSBuyNewYearCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBuyNewYearCard::IsInitialized() const {
  return true;
}

void CSBuyNewYearCard::InternalSwap(CSBuyNewYearCard* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(buy_count_, other->buy_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSBuyNewYearCard::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NewYearCardMultiple::_Internal {
 public:
};

NewYearCardMultiple::NewYearCardMultiple(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.NewYearCardMultiple)
}
NewYearCardMultiple::NewYearCardMultiple(const NewYearCardMultiple& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  award_no_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_award_no().empty()) {
    award_no_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_award_no(), 
      GetArena());
  }
  multiple_ = from.multiple_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.NewYearCardMultiple)
}

void NewYearCardMultiple::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewYearCardMultiple_BYDLD_2eproto.base);
  award_no_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  multiple_ = 0;
}

NewYearCardMultiple::~NewYearCardMultiple() {
  // @@protoc_insertion_point(destructor:BYDLD.NewYearCardMultiple)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewYearCardMultiple::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  award_no_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NewYearCardMultiple::ArenaDtor(void* object) {
  NewYearCardMultiple* _this = reinterpret_cast< NewYearCardMultiple* >(object);
  (void)_this;
}
void NewYearCardMultiple::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewYearCardMultiple::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewYearCardMultiple& NewYearCardMultiple::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewYearCardMultiple_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void NewYearCardMultiple::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.NewYearCardMultiple)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  award_no_.ClearToEmpty();
  multiple_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewYearCardMultiple::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string award_no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_award_no();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.NewYearCardMultiple.award_no"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 multiple = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewYearCardMultiple::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.NewYearCardMultiple)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string award_no = 1;
  if (this->award_no().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_award_no().data(), static_cast<int>(this->_internal_award_no().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.NewYearCardMultiple.award_no");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_award_no(), target);
  }

  // int32 multiple = 2;
  if (this->multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_multiple(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.NewYearCardMultiple)
  return target;
}

size_t NewYearCardMultiple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.NewYearCardMultiple)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string award_no = 1;
  if (this->award_no().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_award_no());
  }

  // int32 multiple = 2;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_multiple());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewYearCardMultiple::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.NewYearCardMultiple)
  GOOGLE_DCHECK_NE(&from, this);
  const NewYearCardMultiple* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewYearCardMultiple>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.NewYearCardMultiple)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.NewYearCardMultiple)
    MergeFrom(*source);
  }
}

void NewYearCardMultiple::MergeFrom(const NewYearCardMultiple& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.NewYearCardMultiple)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.award_no().size() > 0) {
    _internal_set_award_no(from._internal_award_no());
  }
  if (from.multiple() != 0) {
    _internal_set_multiple(from._internal_multiple());
  }
}

void NewYearCardMultiple::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.NewYearCardMultiple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewYearCardMultiple::CopyFrom(const NewYearCardMultiple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.NewYearCardMultiple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewYearCardMultiple::IsInitialized() const {
  return true;
}

void NewYearCardMultiple::InternalSwap(NewYearCardMultiple* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  award_no_.Swap(&other->award_no_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(multiple_, other->multiple_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewYearCardMultiple::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCScratchNewYearCard::_Internal {
 public:
};

SCScratchNewYearCard::SCScratchNewYearCard(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  multiples_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCScratchNewYearCard)
}
SCScratchNewYearCard::SCScratchNewYearCard(const SCScratchNewYearCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      multiples_(from.multiples_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&result_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCScratchNewYearCard)
}

void SCScratchNewYearCard::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCScratchNewYearCard_BYDLD_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&result_)) + sizeof(count_));
}

SCScratchNewYearCard::~SCScratchNewYearCard() {
  // @@protoc_insertion_point(destructor:BYDLD.SCScratchNewYearCard)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCScratchNewYearCard::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCScratchNewYearCard::ArenaDtor(void* object) {
  SCScratchNewYearCard* _this = reinterpret_cast< SCScratchNewYearCard* >(object);
  (void)_this;
}
void SCScratchNewYearCard::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCScratchNewYearCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCScratchNewYearCard& SCScratchNewYearCard::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCScratchNewYearCard_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCScratchNewYearCard::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCScratchNewYearCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  multiples_.Clear();
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&result_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCScratchNewYearCard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cur_score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cur_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 base = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.NewYearCardMultiple multiples = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_multiples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCScratchNewYearCard::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCScratchNewYearCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // int32 chair_idx = 2;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chair_idx(), target);
  }

  // int64 cur_score = 3;
  if (this->cur_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_cur_score(), target);
  }

  // int32 base = 4;
  if (this->base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_base(), target);
  }

  // int32 count = 5;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_count(), target);
  }

  // repeated .BYDLD.NewYearCardMultiple multiples = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_multiples_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_multiples(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCScratchNewYearCard)
  return target;
}

size_t SCScratchNewYearCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCScratchNewYearCard)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.NewYearCardMultiple multiples = 6;
  total_size += 1UL * this->_internal_multiples_size();
  for (const auto& msg : this->multiples_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  // int32 chair_idx = 2;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int64 cur_score = 3;
  if (this->cur_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cur_score());
  }

  // int32 base = 4;
  if (this->base() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_base());
  }

  // int32 count = 5;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCScratchNewYearCard::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCScratchNewYearCard)
  GOOGLE_DCHECK_NE(&from, this);
  const SCScratchNewYearCard* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCScratchNewYearCard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCScratchNewYearCard)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCScratchNewYearCard)
    MergeFrom(*source);
  }
}

void SCScratchNewYearCard::MergeFrom(const SCScratchNewYearCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCScratchNewYearCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  multiples_.MergeFrom(from.multiples_);
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.cur_score() != 0) {
    _internal_set_cur_score(from._internal_cur_score());
  }
  if (from.base() != 0) {
    _internal_set_base(from._internal_base());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void SCScratchNewYearCard::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCScratchNewYearCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCScratchNewYearCard::CopyFrom(const SCScratchNewYearCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCScratchNewYearCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCScratchNewYearCard::IsInitialized() const {
  return true;
}

void SCScratchNewYearCard::InternalSwap(SCScratchNewYearCard* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  multiples_.InternalSwap(&other->multiples_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCScratchNewYearCard, count_)
      + sizeof(SCScratchNewYearCard::count_)
      - PROTOBUF_FIELD_OFFSET(SCScratchNewYearCard, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCScratchNewYearCard::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSNewYearCardExchange::_Internal {
 public:
};

CSNewYearCardExchange::CSNewYearCardExchange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSNewYearCardExchange)
}
CSNewYearCardExchange::CSNewYearCardExchange(const CSNewYearCardExchange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&times_, &from.times_,
    static_cast<size_t>(reinterpret_cast<char*>(&exchange_all_) -
    reinterpret_cast<char*>(&times_)) + sizeof(exchange_all_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSNewYearCardExchange)
}

void CSNewYearCardExchange::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&times_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&exchange_all_) -
      reinterpret_cast<char*>(&times_)) + sizeof(exchange_all_));
}

CSNewYearCardExchange::~CSNewYearCardExchange() {
  // @@protoc_insertion_point(destructor:BYDLD.CSNewYearCardExchange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSNewYearCardExchange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSNewYearCardExchange::ArenaDtor(void* object) {
  CSNewYearCardExchange* _this = reinterpret_cast< CSNewYearCardExchange* >(object);
  (void)_this;
}
void CSNewYearCardExchange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSNewYearCardExchange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSNewYearCardExchange& CSNewYearCardExchange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSNewYearCardExchange_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSNewYearCardExchange::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSNewYearCardExchange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&times_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exchange_all_) -
      reinterpret_cast<char*>(&times_)) + sizeof(exchange_all_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNewYearCardExchange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 times = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool exchange_all = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          exchange_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSNewYearCardExchange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSNewYearCardExchange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 times = 1;
  if (this->times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_times(), target);
  }

  // bool exchange_all = 2;
  if (this->exchange_all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_exchange_all(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSNewYearCardExchange)
  return target;
}

size_t CSNewYearCardExchange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSNewYearCardExchange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 times = 1;
  if (this->times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_times());
  }

  // bool exchange_all = 2;
  if (this->exchange_all() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSNewYearCardExchange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSNewYearCardExchange)
  GOOGLE_DCHECK_NE(&from, this);
  const CSNewYearCardExchange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSNewYearCardExchange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSNewYearCardExchange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSNewYearCardExchange)
    MergeFrom(*source);
  }
}

void CSNewYearCardExchange::MergeFrom(const CSNewYearCardExchange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSNewYearCardExchange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.times() != 0) {
    _internal_set_times(from._internal_times());
  }
  if (from.exchange_all() != 0) {
    _internal_set_exchange_all(from._internal_exchange_all());
  }
}

void CSNewYearCardExchange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSNewYearCardExchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSNewYearCardExchange::CopyFrom(const CSNewYearCardExchange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSNewYearCardExchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNewYearCardExchange::IsInitialized() const {
  return true;
}

void CSNewYearCardExchange::InternalSwap(CSNewYearCardExchange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSNewYearCardExchange, exchange_all_)
      + sizeof(CSNewYearCardExchange::exchange_all_)
      - PROTOBUF_FIELD_OFFSET(CSNewYearCardExchange, times_)>(
          reinterpret_cast<char*>(&times_),
          reinterpret_cast<char*>(&other->times_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNewYearCardExchange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NewYearCardAward::_Internal {
 public:
};

NewYearCardAward::NewYearCardAward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  multiples_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.NewYearCardAward)
}
NewYearCardAward::NewYearCardAward(const NewYearCardAward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      multiples_(from.multiples_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&card_idx_, &from.card_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&base_) -
    reinterpret_cast<char*>(&card_idx_)) + sizeof(base_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.NewYearCardAward)
}

void NewYearCardAward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewYearCardAward_BYDLD_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&card_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&base_) -
      reinterpret_cast<char*>(&card_idx_)) + sizeof(base_));
}

NewYearCardAward::~NewYearCardAward() {
  // @@protoc_insertion_point(destructor:BYDLD.NewYearCardAward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewYearCardAward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NewYearCardAward::ArenaDtor(void* object) {
  NewYearCardAward* _this = reinterpret_cast< NewYearCardAward* >(object);
  (void)_this;
}
void NewYearCardAward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewYearCardAward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewYearCardAward& NewYearCardAward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewYearCardAward_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void NewYearCardAward::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.NewYearCardAward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  multiples_.Clear();
  ::memset(&card_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&base_) -
      reinterpret_cast<char*>(&card_idx_)) + sizeof(base_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewYearCardAward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 card_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          card_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 award = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          award_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bless_award = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bless_award_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 base = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.NewYearCardMultiple multiples = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_multiples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewYearCardAward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.NewYearCardAward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 card_idx = 1;
  if (this->card_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_card_idx(), target);
  }

  // int32 award = 2;
  if (this->award() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_award(), target);
  }

  // int32 bless_award = 3;
  if (this->bless_award() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_bless_award(), target);
  }

  // int32 base = 4;
  if (this->base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_base(), target);
  }

  // repeated .BYDLD.NewYearCardMultiple multiples = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_multiples_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_multiples(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.NewYearCardAward)
  return target;
}

size_t NewYearCardAward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.NewYearCardAward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.NewYearCardMultiple multiples = 5;
  total_size += 1UL * this->_internal_multiples_size();
  for (const auto& msg : this->multiples_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 card_idx = 1;
  if (this->card_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_card_idx());
  }

  // int32 award = 2;
  if (this->award() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_award());
  }

  // int32 bless_award = 3;
  if (this->bless_award() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bless_award());
  }

  // int32 base = 4;
  if (this->base() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_base());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewYearCardAward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.NewYearCardAward)
  GOOGLE_DCHECK_NE(&from, this);
  const NewYearCardAward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewYearCardAward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.NewYearCardAward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.NewYearCardAward)
    MergeFrom(*source);
  }
}

void NewYearCardAward::MergeFrom(const NewYearCardAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.NewYearCardAward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  multiples_.MergeFrom(from.multiples_);
  if (from.card_idx() != 0) {
    _internal_set_card_idx(from._internal_card_idx());
  }
  if (from.award() != 0) {
    _internal_set_award(from._internal_award());
  }
  if (from.bless_award() != 0) {
    _internal_set_bless_award(from._internal_bless_award());
  }
  if (from.base() != 0) {
    _internal_set_base(from._internal_base());
  }
}

void NewYearCardAward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.NewYearCardAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewYearCardAward::CopyFrom(const NewYearCardAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.NewYearCardAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewYearCardAward::IsInitialized() const {
  return true;
}

void NewYearCardAward::InternalSwap(NewYearCardAward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  multiples_.InternalSwap(&other->multiples_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewYearCardAward, base_)
      + sizeof(NewYearCardAward::base_)
      - PROTOBUF_FIELD_OFFSET(NewYearCardAward, card_idx_)>(
          reinterpret_cast<char*>(&card_idx_),
          reinterpret_cast<char*>(&other->card_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewYearCardAward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCNewYearCardExchange::_Internal {
 public:
};

SCNewYearCardExchange::SCNewYearCardExchange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  awards_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCNewYearCardExchange)
}
SCNewYearCardExchange::SCNewYearCardExchange(const SCNewYearCardExchange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      awards_(from.awards_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&req_id_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(req_id_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCNewYearCardExchange)
}

void SCNewYearCardExchange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCNewYearCardExchange_BYDLD_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&req_id_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(req_id_));
}

SCNewYearCardExchange::~SCNewYearCardExchange() {
  // @@protoc_insertion_point(destructor:BYDLD.SCNewYearCardExchange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCNewYearCardExchange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCNewYearCardExchange::ArenaDtor(void* object) {
  SCNewYearCardExchange* _this = reinterpret_cast< SCNewYearCardExchange* >(object);
  (void)_this;
}
void SCNewYearCardExchange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCNewYearCardExchange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCNewYearCardExchange& SCNewYearCardExchange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCNewYearCardExchange_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCNewYearCardExchange::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCNewYearCardExchange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  awards_.Clear();
  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_id_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(req_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCNewYearCardExchange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.NewYearCardAward awards = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_awards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool exchange_all = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          exchange_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 req_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          req_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCNewYearCardExchange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCNewYearCardExchange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_result(), target);
  }

  // repeated .BYDLD.NewYearCardAward awards = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_awards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_awards(i), target, stream);
  }

  // int64 score = 4;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_score(), target);
  }

  // int32 count = 5;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_count(), target);
  }

  // bool exchange_all = 6;
  if (this->exchange_all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_exchange_all(), target);
  }

  // int32 req_id = 7;
  if (this->req_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_req_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCNewYearCardExchange)
  return target;
}

size_t SCNewYearCardExchange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCNewYearCardExchange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.NewYearCardAward awards = 3;
  total_size += 1UL * this->_internal_awards_size();
  for (const auto& msg : this->awards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  // int64 score = 4;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_score());
  }

  // int32 count = 5;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  // bool exchange_all = 6;
  if (this->exchange_all() != 0) {
    total_size += 1 + 1;
  }

  // int32 req_id = 7;
  if (this->req_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_req_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCNewYearCardExchange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCNewYearCardExchange)
  GOOGLE_DCHECK_NE(&from, this);
  const SCNewYearCardExchange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCNewYearCardExchange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCNewYearCardExchange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCNewYearCardExchange)
    MergeFrom(*source);
  }
}

void SCNewYearCardExchange::MergeFrom(const SCNewYearCardExchange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCNewYearCardExchange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  awards_.MergeFrom(from.awards_);
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.exchange_all() != 0) {
    _internal_set_exchange_all(from._internal_exchange_all());
  }
  if (from.req_id() != 0) {
    _internal_set_req_id(from._internal_req_id());
  }
}

void SCNewYearCardExchange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCNewYearCardExchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCNewYearCardExchange::CopyFrom(const SCNewYearCardExchange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCNewYearCardExchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCNewYearCardExchange::IsInitialized() const {
  return true;
}

void SCNewYearCardExchange::InternalSwap(SCNewYearCardExchange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  awards_.InternalSwap(&other->awards_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCNewYearCardExchange, req_id_)
      + sizeof(SCNewYearCardExchange::req_id_)
      - PROTOBUF_FIELD_OFFSET(SCNewYearCardExchange, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCNewYearCardExchange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSNewYearCardAwardRecord::_Internal {
 public:
};

CSNewYearCardAwardRecord::CSNewYearCardAwardRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSNewYearCardAwardRecord)
}
CSNewYearCardAwardRecord::CSNewYearCardAwardRecord(const CSNewYearCardAwardRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSNewYearCardAwardRecord)
}

void CSNewYearCardAwardRecord::SharedCtor() {
}

CSNewYearCardAwardRecord::~CSNewYearCardAwardRecord() {
  // @@protoc_insertion_point(destructor:BYDLD.CSNewYearCardAwardRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSNewYearCardAwardRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSNewYearCardAwardRecord::ArenaDtor(void* object) {
  CSNewYearCardAwardRecord* _this = reinterpret_cast< CSNewYearCardAwardRecord* >(object);
  (void)_this;
}
void CSNewYearCardAwardRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSNewYearCardAwardRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSNewYearCardAwardRecord& CSNewYearCardAwardRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSNewYearCardAwardRecord_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSNewYearCardAwardRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSNewYearCardAwardRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNewYearCardAwardRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSNewYearCardAwardRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSNewYearCardAwardRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSNewYearCardAwardRecord)
  return target;
}

size_t CSNewYearCardAwardRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSNewYearCardAwardRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSNewYearCardAwardRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSNewYearCardAwardRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const CSNewYearCardAwardRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSNewYearCardAwardRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSNewYearCardAwardRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSNewYearCardAwardRecord)
    MergeFrom(*source);
  }
}

void CSNewYearCardAwardRecord::MergeFrom(const CSNewYearCardAwardRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSNewYearCardAwardRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSNewYearCardAwardRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSNewYearCardAwardRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSNewYearCardAwardRecord::CopyFrom(const CSNewYearCardAwardRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSNewYearCardAwardRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNewYearCardAwardRecord::IsInitialized() const {
  return true;
}

void CSNewYearCardAwardRecord::InternalSwap(CSNewYearCardAwardRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNewYearCardAwardRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NewYearCardAwardRecord::_Internal {
 public:
};

NewYearCardAwardRecord::NewYearCardAwardRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.NewYearCardAwardRecord)
}
NewYearCardAwardRecord::NewYearCardAwardRecord(const NewYearCardAwardRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&bless_award_) -
    reinterpret_cast<char*>(&time_)) + sizeof(bless_award_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.NewYearCardAwardRecord)
}

void NewYearCardAwardRecord::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bless_award_) -
      reinterpret_cast<char*>(&time_)) + sizeof(bless_award_));
}

NewYearCardAwardRecord::~NewYearCardAwardRecord() {
  // @@protoc_insertion_point(destructor:BYDLD.NewYearCardAwardRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewYearCardAwardRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NewYearCardAwardRecord::ArenaDtor(void* object) {
  NewYearCardAwardRecord* _this = reinterpret_cast< NewYearCardAwardRecord* >(object);
  (void)_this;
}
void NewYearCardAwardRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewYearCardAwardRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewYearCardAwardRecord& NewYearCardAwardRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewYearCardAwardRecord_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void NewYearCardAwardRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.NewYearCardAwardRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bless_award_) -
      reinterpret_cast<char*>(&time_)) + sizeof(bless_award_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewYearCardAwardRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 normal_award = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          normal_award_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bless_award = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bless_award_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewYearCardAwardRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.NewYearCardAwardRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_time(), target);
  }

  // int32 normal_award = 2;
  if (this->normal_award() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_normal_award(), target);
  }

  // int32 bless_award = 3;
  if (this->bless_award() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_bless_award(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.NewYearCardAwardRecord)
  return target;
}

size_t NewYearCardAwardRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.NewYearCardAwardRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  // int32 normal_award = 2;
  if (this->normal_award() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_normal_award());
  }

  // int32 bless_award = 3;
  if (this->bless_award() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bless_award());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewYearCardAwardRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.NewYearCardAwardRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const NewYearCardAwardRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewYearCardAwardRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.NewYearCardAwardRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.NewYearCardAwardRecord)
    MergeFrom(*source);
  }
}

void NewYearCardAwardRecord::MergeFrom(const NewYearCardAwardRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.NewYearCardAwardRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.normal_award() != 0) {
    _internal_set_normal_award(from._internal_normal_award());
  }
  if (from.bless_award() != 0) {
    _internal_set_bless_award(from._internal_bless_award());
  }
}

void NewYearCardAwardRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.NewYearCardAwardRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewYearCardAwardRecord::CopyFrom(const NewYearCardAwardRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.NewYearCardAwardRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewYearCardAwardRecord::IsInitialized() const {
  return true;
}

void NewYearCardAwardRecord::InternalSwap(NewYearCardAwardRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewYearCardAwardRecord, bless_award_)
      + sizeof(NewYearCardAwardRecord::bless_award_)
      - PROTOBUF_FIELD_OFFSET(NewYearCardAwardRecord, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewYearCardAwardRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCNewYearCardAwardRecord::_Internal {
 public:
};

SCNewYearCardAwardRecord::SCNewYearCardAwardRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCNewYearCardAwardRecord)
}
SCNewYearCardAwardRecord::SCNewYearCardAwardRecord(const SCNewYearCardAwardRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      records_(from.records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCNewYearCardAwardRecord)
}

void SCNewYearCardAwardRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCNewYearCardAwardRecord_BYDLD_2eproto.base);
  result_ = 0;
}

SCNewYearCardAwardRecord::~SCNewYearCardAwardRecord() {
  // @@protoc_insertion_point(destructor:BYDLD.SCNewYearCardAwardRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCNewYearCardAwardRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCNewYearCardAwardRecord::ArenaDtor(void* object) {
  SCNewYearCardAwardRecord* _this = reinterpret_cast< SCNewYearCardAwardRecord* >(object);
  (void)_this;
}
void SCNewYearCardAwardRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCNewYearCardAwardRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCNewYearCardAwardRecord& SCNewYearCardAwardRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCNewYearCardAwardRecord_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCNewYearCardAwardRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCNewYearCardAwardRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  records_.Clear();
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCNewYearCardAwardRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.NewYearCardAwardRecord records = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCNewYearCardAwardRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCNewYearCardAwardRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // repeated .BYDLD.NewYearCardAwardRecord records = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCNewYearCardAwardRecord)
  return target;
}

size_t SCNewYearCardAwardRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCNewYearCardAwardRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.NewYearCardAwardRecord records = 2;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCNewYearCardAwardRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCNewYearCardAwardRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const SCNewYearCardAwardRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCNewYearCardAwardRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCNewYearCardAwardRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCNewYearCardAwardRecord)
    MergeFrom(*source);
  }
}

void SCNewYearCardAwardRecord::MergeFrom(const SCNewYearCardAwardRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCNewYearCardAwardRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  records_.MergeFrom(from.records_);
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void SCNewYearCardAwardRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCNewYearCardAwardRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCNewYearCardAwardRecord::CopyFrom(const SCNewYearCardAwardRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCNewYearCardAwardRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCNewYearCardAwardRecord::IsInitialized() const {
  return true;
}

void SCNewYearCardAwardRecord::InternalSwap(SCNewYearCardAwardRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  records_.InternalSwap(&other->records_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCNewYearCardAwardRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SkillTime::_Internal {
 public:
};

SkillTime::SkillTime(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SkillTime)
}
SkillTime::SkillTime(const SkillTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&type_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SkillTime)
}

void SkillTime::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&type_)) + sizeof(time_));
}

SkillTime::~SkillTime() {
  // @@protoc_insertion_point(destructor:BYDLD.SkillTime)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SkillTime::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SkillTime::ArenaDtor(void* object) {
  SkillTime* _this = reinterpret_cast< SkillTime* >(object);
  (void)_this;
}
void SkillTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SkillTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SkillTime& SkillTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SkillTime_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SkillTime::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SkillTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&type_)) + sizeof(time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SkillTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SkillTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SkillTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 time = 2;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SkillTime)
  return target;
}

size_t SkillTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SkillTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SkillTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SkillTime)
  GOOGLE_DCHECK_NE(&from, this);
  const SkillTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SkillTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SkillTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SkillTime)
    MergeFrom(*source);
  }
}

void SkillTime::MergeFrom(const SkillTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SkillTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void SkillTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SkillTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillTime::CopyFrom(const SkillTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SkillTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillTime::IsInitialized() const {
  return true;
}

void SkillTime::InternalSwap(SkillTime* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SkillTime, time_)
      + sizeof(SkillTime::time_)
      - PROTOBUF_FIELD_OFFSET(SkillTime, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SkillTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSaveSkillTime::_Internal {
 public:
};

CSSaveSkillTime::CSSaveSkillTime(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  skil_time_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSSaveSkillTime)
}
CSSaveSkillTime::CSSaveSkillTime(const CSSaveSkillTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      skil_time_(from.skil_time_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSSaveSkillTime)
}

void CSSaveSkillTime::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSSaveSkillTime_BYDLD_2eproto.base);
}

CSSaveSkillTime::~CSSaveSkillTime() {
  // @@protoc_insertion_point(destructor:BYDLD.CSSaveSkillTime)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSaveSkillTime::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSSaveSkillTime::ArenaDtor(void* object) {
  CSSaveSkillTime* _this = reinterpret_cast< CSSaveSkillTime* >(object);
  (void)_this;
}
void CSSaveSkillTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSaveSkillTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSaveSkillTime& CSSaveSkillTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSaveSkillTime_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSSaveSkillTime::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSSaveSkillTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skil_time_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSaveSkillTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.SkillTime skil_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skil_time(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSaveSkillTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSSaveSkillTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.SkillTime skil_time = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_skil_time_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_skil_time(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSSaveSkillTime)
  return target;
}

size_t CSSaveSkillTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSSaveSkillTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.SkillTime skil_time = 1;
  total_size += 1UL * this->_internal_skil_time_size();
  for (const auto& msg : this->skil_time_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSaveSkillTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSSaveSkillTime)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSaveSkillTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSaveSkillTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSSaveSkillTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSSaveSkillTime)
    MergeFrom(*source);
  }
}

void CSSaveSkillTime::MergeFrom(const CSSaveSkillTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSSaveSkillTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skil_time_.MergeFrom(from.skil_time_);
}

void CSSaveSkillTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSSaveSkillTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSaveSkillTime::CopyFrom(const CSSaveSkillTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSSaveSkillTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSaveSkillTime::IsInitialized() const {
  return true;
}

void CSSaveSkillTime::InternalSwap(CSSaveSkillTime* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  skil_time_.InternalSwap(&other->skil_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSaveSkillTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSuperTridentShoot::_Internal {
 public:
};

CSSuperTridentShoot::CSSuperTridentShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSSuperTridentShoot)
}
CSSuperTridentShoot::CSSuperTridentShoot(const CSSuperTridentShoot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSSuperTridentShoot)
}

void CSSuperTridentShoot::SharedCtor() {
}

CSSuperTridentShoot::~CSSuperTridentShoot() {
  // @@protoc_insertion_point(destructor:BYDLD.CSSuperTridentShoot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSuperTridentShoot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSSuperTridentShoot::ArenaDtor(void* object) {
  CSSuperTridentShoot* _this = reinterpret_cast< CSSuperTridentShoot* >(object);
  (void)_this;
}
void CSSuperTridentShoot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSuperTridentShoot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSuperTridentShoot& CSSuperTridentShoot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSuperTridentShoot_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSSuperTridentShoot::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSSuperTridentShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSuperTridentShoot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSuperTridentShoot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSSuperTridentShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSSuperTridentShoot)
  return target;
}

size_t CSSuperTridentShoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSSuperTridentShoot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSuperTridentShoot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSSuperTridentShoot)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSuperTridentShoot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSuperTridentShoot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSSuperTridentShoot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSSuperTridentShoot)
    MergeFrom(*source);
  }
}

void CSSuperTridentShoot::MergeFrom(const CSSuperTridentShoot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSSuperTridentShoot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSSuperTridentShoot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSSuperTridentShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSuperTridentShoot::CopyFrom(const CSSuperTridentShoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSSuperTridentShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSuperTridentShoot::IsInitialized() const {
  return true;
}

void CSSuperTridentShoot::InternalSwap(CSSuperTridentShoot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSuperTridentShoot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSuperTridentShoot::_Internal {
 public:
};

SCSuperTridentShoot::SCSuperTridentShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCSuperTridentShoot)
}
SCSuperTridentShoot::SCSuperTridentShoot(const SCSuperTridentShoot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chair_idx_ = from.chair_idx_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCSuperTridentShoot)
}

void SCSuperTridentShoot::SharedCtor() {
  chair_idx_ = 0;
}

SCSuperTridentShoot::~SCSuperTridentShoot() {
  // @@protoc_insertion_point(destructor:BYDLD.SCSuperTridentShoot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSuperTridentShoot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSuperTridentShoot::ArenaDtor(void* object) {
  SCSuperTridentShoot* _this = reinterpret_cast< SCSuperTridentShoot* >(object);
  (void)_this;
}
void SCSuperTridentShoot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSuperTridentShoot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSuperTridentShoot& SCSuperTridentShoot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSuperTridentShoot_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCSuperTridentShoot::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCSuperTridentShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chair_idx_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSuperTridentShoot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSuperTridentShoot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCSuperTridentShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCSuperTridentShoot)
  return target;
}

size_t SCSuperTridentShoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCSuperTridentShoot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSuperTridentShoot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCSuperTridentShoot)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSuperTridentShoot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSuperTridentShoot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCSuperTridentShoot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCSuperTridentShoot)
    MergeFrom(*source);
  }
}

void SCSuperTridentShoot::MergeFrom(const SCSuperTridentShoot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCSuperTridentShoot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
}

void SCSuperTridentShoot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCSuperTridentShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSuperTridentShoot::CopyFrom(const SCSuperTridentShoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCSuperTridentShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSuperTridentShoot::IsInitialized() const {
  return true;
}

void SCSuperTridentShoot::InternalSwap(SCSuperTridentShoot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(chair_idx_, other->chair_idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSuperTridentShoot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSuperTridentAttack::_Internal {
 public:
};

CSSuperTridentAttack::CSSuperTridentAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  screen_fishes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSSuperTridentAttack)
}
CSSuperTridentAttack::CSSuperTridentAttack(const CSSuperTridentAttack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      screen_fishes_(from.screen_fishes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSSuperTridentAttack)
}

void CSSuperTridentAttack::SharedCtor() {
}

CSSuperTridentAttack::~CSSuperTridentAttack() {
  // @@protoc_insertion_point(destructor:BYDLD.CSSuperTridentAttack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSuperTridentAttack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSSuperTridentAttack::ArenaDtor(void* object) {
  CSSuperTridentAttack* _this = reinterpret_cast< CSSuperTridentAttack* >(object);
  (void)_this;
}
void CSSuperTridentAttack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSuperTridentAttack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSuperTridentAttack& CSSuperTridentAttack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSuperTridentAttack_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSSuperTridentAttack::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSSuperTridentAttack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  screen_fishes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSuperTridentAttack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 screen_fishes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_screen_fishes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_screen_fishes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSuperTridentAttack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSSuperTridentAttack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 screen_fishes = 1;
  {
    int byte_size = _screen_fishes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_screen_fishes(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSSuperTridentAttack)
  return target;
}

size_t CSSuperTridentAttack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSSuperTridentAttack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 screen_fishes = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->screen_fishes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _screen_fishes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSuperTridentAttack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSSuperTridentAttack)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSuperTridentAttack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSuperTridentAttack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSSuperTridentAttack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSSuperTridentAttack)
    MergeFrom(*source);
  }
}

void CSSuperTridentAttack::MergeFrom(const CSSuperTridentAttack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSSuperTridentAttack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  screen_fishes_.MergeFrom(from.screen_fishes_);
}

void CSSuperTridentAttack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSSuperTridentAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSuperTridentAttack::CopyFrom(const CSSuperTridentAttack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSSuperTridentAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSuperTridentAttack::IsInitialized() const {
  return true;
}

void CSSuperTridentAttack::InternalSwap(CSSuperTridentAttack* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  screen_fishes_.InternalSwap(&other->screen_fishes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSuperTridentAttack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CommonResp::_Internal {
 public:
};

CommonResp::CommonResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CommonResp)
}
CommonResp::CommonResp(const CommonResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CommonResp)
}

void CommonResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommonResp_BYDLD_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

CommonResp::~CommonResp() {
  // @@protoc_insertion_point(destructor:BYDLD.CommonResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommonResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommonResp::ArenaDtor(void* object) {
  CommonResp* _this = reinterpret_cast< CommonResp* >(object);
  (void)_this;
}
void CommonResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommonResp& CommonResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommonResp_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CommonResp::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CommonResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.CommonResp.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CommonResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.CommonResp.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CommonResp)
  return target;
}

size_t CommonResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CommonResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CommonResp)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommonResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CommonResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CommonResp)
    MergeFrom(*source);
  }
}

void CommonResp::MergeFrom(const CommonResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CommonResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void CommonResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CommonResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonResp::CopyFrom(const CommonResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CommonResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonResp::IsInitialized() const {
  return true;
}

void CommonResp::InternalSwap(CommonResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSAwardPoolRecord::_Internal {
 public:
};

CSAwardPoolRecord::CSAwardPoolRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSAwardPoolRecord)
}
CSAwardPoolRecord::CSAwardPoolRecord(const CSAwardPoolRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSAwardPoolRecord)
}

void CSAwardPoolRecord::SharedCtor() {
}

CSAwardPoolRecord::~CSAwardPoolRecord() {
  // @@protoc_insertion_point(destructor:BYDLD.CSAwardPoolRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSAwardPoolRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSAwardPoolRecord::ArenaDtor(void* object) {
  CSAwardPoolRecord* _this = reinterpret_cast< CSAwardPoolRecord* >(object);
  (void)_this;
}
void CSAwardPoolRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSAwardPoolRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSAwardPoolRecord& CSAwardPoolRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSAwardPoolRecord_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSAwardPoolRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSAwardPoolRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSAwardPoolRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSAwardPoolRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSAwardPoolRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSAwardPoolRecord)
  return target;
}

size_t CSAwardPoolRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSAwardPoolRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSAwardPoolRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSAwardPoolRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const CSAwardPoolRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSAwardPoolRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSAwardPoolRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSAwardPoolRecord)
    MergeFrom(*source);
  }
}

void CSAwardPoolRecord::MergeFrom(const CSAwardPoolRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSAwardPoolRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSAwardPoolRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSAwardPoolRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSAwardPoolRecord::CopyFrom(const CSAwardPoolRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSAwardPoolRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAwardPoolRecord::IsInitialized() const {
  return true;
}

void CSAwardPoolRecord::InternalSwap(CSAwardPoolRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSAwardPoolRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AwardPoolRecord::_Internal {
 public:
};

AwardPoolRecord::AwardPoolRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.AwardPoolRecord)
}
AwardPoolRecord::AwardPoolRecord(const AwardPoolRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_time().empty()) {
    time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_time(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&poolid_, &from.poolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&poolid_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.AwardPoolRecord)
}

void AwardPoolRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AwardPoolRecord_BYDLD_2eproto.base);
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&poolid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&poolid_)) + sizeof(playerid_));
}

AwardPoolRecord::~AwardPoolRecord() {
  // @@protoc_insertion_point(destructor:BYDLD.AwardPoolRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AwardPoolRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AwardPoolRecord::ArenaDtor(void* object) {
  AwardPoolRecord* _this = reinterpret_cast< AwardPoolRecord* >(object);
  (void)_this;
}
void AwardPoolRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AwardPoolRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AwardPoolRecord& AwardPoolRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AwardPoolRecord_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void AwardPoolRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.AwardPoolRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_.ClearToEmpty();
  name_.ClearToEmpty();
  ::memset(&poolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&poolid_)) + sizeof(playerid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AwardPoolRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.AwardPoolRecord.time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.AwardPoolRecord.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 poolId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          poolid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 award = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          award_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 playerId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AwardPoolRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.AwardPoolRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string time = 1;
  if (this->time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.AwardPoolRecord.time");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_time(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.AwardPoolRecord.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 poolId = 3;
  if (this->poolid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_poolid(), target);
  }

  // int32 award = 4;
  if (this->award() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_award(), target);
  }

  // int32 playerId = 5;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.AwardPoolRecord)
  return target;
}

size_t AwardPoolRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.AwardPoolRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string time = 1;
  if (this->time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 poolId = 3;
  if (this->poolid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_poolid());
  }

  // int32 award = 4;
  if (this->award() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_award());
  }

  // int32 playerId = 5;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AwardPoolRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.AwardPoolRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const AwardPoolRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AwardPoolRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.AwardPoolRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.AwardPoolRecord)
    MergeFrom(*source);
  }
}

void AwardPoolRecord::MergeFrom(const AwardPoolRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.AwardPoolRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time().size() > 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.poolid() != 0) {
    _internal_set_poolid(from._internal_poolid());
  }
  if (from.award() != 0) {
    _internal_set_award(from._internal_award());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
}

void AwardPoolRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.AwardPoolRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AwardPoolRecord::CopyFrom(const AwardPoolRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.AwardPoolRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AwardPoolRecord::IsInitialized() const {
  return true;
}

void AwardPoolRecord::InternalSwap(AwardPoolRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  time_.Swap(&other->time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AwardPoolRecord, playerid_)
      + sizeof(AwardPoolRecord::playerid_)
      - PROTOBUF_FIELD_OFFSET(AwardPoolRecord, poolid_)>(
          reinterpret_cast<char*>(&poolid_),
          reinterpret_cast<char*>(&other->poolid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AwardPoolRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCAwardPoolRecord::_Internal {
 public:
};

SCAwardPoolRecord::SCAwardPoolRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCAwardPoolRecord)
}
SCAwardPoolRecord::SCAwardPoolRecord(const SCAwardPoolRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      records_(from.records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCAwardPoolRecord)
}

void SCAwardPoolRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCAwardPoolRecord_BYDLD_2eproto.base);
}

SCAwardPoolRecord::~SCAwardPoolRecord() {
  // @@protoc_insertion_point(destructor:BYDLD.SCAwardPoolRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCAwardPoolRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCAwardPoolRecord::ArenaDtor(void* object) {
  SCAwardPoolRecord* _this = reinterpret_cast< SCAwardPoolRecord* >(object);
  (void)_this;
}
void SCAwardPoolRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCAwardPoolRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCAwardPoolRecord& SCAwardPoolRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCAwardPoolRecord_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCAwardPoolRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCAwardPoolRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  records_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCAwardPoolRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.AwardPoolRecord records = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCAwardPoolRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCAwardPoolRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.AwardPoolRecord records = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCAwardPoolRecord)
  return target;
}

size_t SCAwardPoolRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCAwardPoolRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.AwardPoolRecord records = 1;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCAwardPoolRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCAwardPoolRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const SCAwardPoolRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCAwardPoolRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCAwardPoolRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCAwardPoolRecord)
    MergeFrom(*source);
  }
}

void SCAwardPoolRecord::MergeFrom(const SCAwardPoolRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCAwardPoolRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  records_.MergeFrom(from.records_);
}

void SCAwardPoolRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCAwardPoolRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCAwardPoolRecord::CopyFrom(const SCAwardPoolRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCAwardPoolRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCAwardPoolRecord::IsInitialized() const {
  return true;
}

void SCAwardPoolRecord::InternalSwap(SCAwardPoolRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  records_.InternalSwap(&other->records_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCAwardPoolRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSFortuneShoot::_Internal {
 public:
};

CSFortuneShoot::CSFortuneShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSFortuneShoot)
}
CSFortuneShoot::CSFortuneShoot(const CSFortuneShoot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSFortuneShoot)
}

void CSFortuneShoot::SharedCtor() {
}

CSFortuneShoot::~CSFortuneShoot() {
  // @@protoc_insertion_point(destructor:BYDLD.CSFortuneShoot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSFortuneShoot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSFortuneShoot::ArenaDtor(void* object) {
  CSFortuneShoot* _this = reinterpret_cast< CSFortuneShoot* >(object);
  (void)_this;
}
void CSFortuneShoot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSFortuneShoot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSFortuneShoot& CSFortuneShoot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSFortuneShoot_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSFortuneShoot::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSFortuneShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSFortuneShoot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSFortuneShoot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSFortuneShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSFortuneShoot)
  return target;
}

size_t CSFortuneShoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSFortuneShoot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSFortuneShoot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSFortuneShoot)
  GOOGLE_DCHECK_NE(&from, this);
  const CSFortuneShoot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSFortuneShoot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSFortuneShoot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSFortuneShoot)
    MergeFrom(*source);
  }
}

void CSFortuneShoot::MergeFrom(const CSFortuneShoot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSFortuneShoot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSFortuneShoot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSFortuneShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSFortuneShoot::CopyFrom(const CSFortuneShoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSFortuneShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFortuneShoot::IsInitialized() const {
  return true;
}

void CSFortuneShoot::InternalSwap(CSFortuneShoot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSFortuneShoot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCFortuneShoot::_Internal {
 public:
};

SCFortuneShoot::SCFortuneShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCFortuneShoot)
}
SCFortuneShoot::SCFortuneShoot(const SCFortuneShoot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_shoot_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(can_shoot_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCFortuneShoot)
}

void SCFortuneShoot::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&can_shoot_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(can_shoot_));
}

SCFortuneShoot::~SCFortuneShoot() {
  // @@protoc_insertion_point(destructor:BYDLD.SCFortuneShoot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCFortuneShoot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCFortuneShoot::ArenaDtor(void* object) {
  SCFortuneShoot* _this = reinterpret_cast< SCFortuneShoot* >(object);
  (void)_this;
}
void SCFortuneShoot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCFortuneShoot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCFortuneShoot& SCFortuneShoot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCFortuneShoot_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCFortuneShoot::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCFortuneShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_shoot_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(can_shoot_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCFortuneShoot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool can_shoot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          can_shoot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCFortuneShoot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCFortuneShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // bool can_shoot = 2;
  if (this->can_shoot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_can_shoot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCFortuneShoot)
  return target;
}

size_t SCFortuneShoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCFortuneShoot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // bool can_shoot = 2;
  if (this->can_shoot() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCFortuneShoot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCFortuneShoot)
  GOOGLE_DCHECK_NE(&from, this);
  const SCFortuneShoot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCFortuneShoot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCFortuneShoot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCFortuneShoot)
    MergeFrom(*source);
  }
}

void SCFortuneShoot::MergeFrom(const SCFortuneShoot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCFortuneShoot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.can_shoot() != 0) {
    _internal_set_can_shoot(from._internal_can_shoot());
  }
}

void SCFortuneShoot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCFortuneShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCFortuneShoot::CopyFrom(const SCFortuneShoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCFortuneShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCFortuneShoot::IsInitialized() const {
  return true;
}

void SCFortuneShoot::InternalSwap(SCFortuneShoot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCFortuneShoot, can_shoot_)
      + sizeof(SCFortuneShoot::can_shoot_)
      - PROTOBUF_FIELD_OFFSET(SCFortuneShoot, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCFortuneShoot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IngotInfo::_Internal {
 public:
};

IngotInfo::IngotInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.IngotInfo)
}
IngotInfo::IngotInfo(const IngotInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ingot_id_, &from.ingot_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_) -
    reinterpret_cast<char*>(&ingot_id_)) + sizeof(total_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.IngotInfo)
}

void IngotInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ingot_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&total_) -
      reinterpret_cast<char*>(&ingot_id_)) + sizeof(total_));
}

IngotInfo::~IngotInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.IngotInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IngotInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IngotInfo::ArenaDtor(void* object) {
  IngotInfo* _this = reinterpret_cast< IngotInfo* >(object);
  (void)_this;
}
void IngotInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IngotInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IngotInfo& IngotInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IngotInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void IngotInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.IngotInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ingot_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_) -
      reinterpret_cast<char*>(&ingot_id_)) + sizeof(total_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IngotInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ingot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ingot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 remain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          remain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IngotInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.IngotInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ingot_id = 1;
  if (this->ingot_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ingot_id(), target);
  }

  // int32 remain = 2;
  if (this->remain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_remain(), target);
  }

  // int32 total = 3;
  if (this->total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.IngotInfo)
  return target;
}

size_t IngotInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.IngotInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ingot_id = 1;
  if (this->ingot_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ingot_id());
  }

  // int32 remain = 2;
  if (this->remain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_remain());
  }

  // int32 total = 3;
  if (this->total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IngotInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.IngotInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const IngotInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IngotInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.IngotInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.IngotInfo)
    MergeFrom(*source);
  }
}

void IngotInfo::MergeFrom(const IngotInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.IngotInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ingot_id() != 0) {
    _internal_set_ingot_id(from._internal_ingot_id());
  }
  if (from.remain() != 0) {
    _internal_set_remain(from._internal_remain());
  }
  if (from.total() != 0) {
    _internal_set_total(from._internal_total());
  }
}

void IngotInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.IngotInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IngotInfo::CopyFrom(const IngotInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.IngotInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IngotInfo::IsInitialized() const {
  return true;
}

void IngotInfo::InternalSwap(IngotInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IngotInfo, total_)
      + sizeof(IngotInfo::total_)
      - PROTOBUF_FIELD_OFFSET(IngotInfo, ingot_id_)>(
          reinterpret_cast<char*>(&ingot_id_),
          reinterpret_cast<char*>(&other->ingot_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IngotInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSyncFortune::_Internal {
 public:
  static const ::BYDLD::IngotInfo& ingot_info(const SCSyncFortune* msg);
};

const ::BYDLD::IngotInfo&
SCSyncFortune::_Internal::ingot_info(const SCSyncFortune* msg) {
  return *msg->ingot_info_;
}
SCSyncFortune::SCSyncFortune(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCSyncFortune)
}
SCSyncFortune::SCSyncFortune(const SCSyncFortune& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ingot_info()) {
    ingot_info_ = new ::BYDLD::IngotInfo(*from.ingot_info_);
  } else {
    ingot_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCSyncFortune)
}

void SCSyncFortune::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCSyncFortune_BYDLD_2eproto.base);
  ingot_info_ = nullptr;
}

SCSyncFortune::~SCSyncFortune() {
  // @@protoc_insertion_point(destructor:BYDLD.SCSyncFortune)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSyncFortune::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ingot_info_;
}

void SCSyncFortune::ArenaDtor(void* object) {
  SCSyncFortune* _this = reinterpret_cast< SCSyncFortune* >(object);
  (void)_this;
}
void SCSyncFortune::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSyncFortune::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSyncFortune& SCSyncFortune::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSyncFortune_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCSyncFortune::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCSyncFortune)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && ingot_info_ != nullptr) {
    delete ingot_info_;
  }
  ingot_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSyncFortune::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BYDLD.IngotInfo ingot_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ingot_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSyncFortune::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCSyncFortune)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BYDLD.IngotInfo ingot_info = 1;
  if (this->has_ingot_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ingot_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCSyncFortune)
  return target;
}

size_t SCSyncFortune::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCSyncFortune)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BYDLD.IngotInfo ingot_info = 1;
  if (this->has_ingot_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ingot_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSyncFortune::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCSyncFortune)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSyncFortune* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSyncFortune>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCSyncFortune)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCSyncFortune)
    MergeFrom(*source);
  }
}

void SCSyncFortune::MergeFrom(const SCSyncFortune& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCSyncFortune)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ingot_info()) {
    _internal_mutable_ingot_info()->::BYDLD::IngotInfo::MergeFrom(from._internal_ingot_info());
  }
}

void SCSyncFortune::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCSyncFortune)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSyncFortune::CopyFrom(const SCSyncFortune& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCSyncFortune)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSyncFortune::IsInitialized() const {
  return true;
}

void SCSyncFortune::InternalSwap(SCSyncFortune* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ingot_info_, other->ingot_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSyncFortune::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSUserPoolInfo::_Internal {
 public:
};

CSUserPoolInfo::CSUserPoolInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSUserPoolInfo)
}
CSUserPoolInfo::CSUserPoolInfo(const CSUserPoolInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  open_page_ = from.open_page_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSUserPoolInfo)
}

void CSUserPoolInfo::SharedCtor() {
  open_page_ = false;
}

CSUserPoolInfo::~CSUserPoolInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.CSUserPoolInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSUserPoolInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSUserPoolInfo::ArenaDtor(void* object) {
  CSUserPoolInfo* _this = reinterpret_cast< CSUserPoolInfo* >(object);
  (void)_this;
}
void CSUserPoolInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSUserPoolInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSUserPoolInfo& CSUserPoolInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSUserPoolInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSUserPoolInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSUserPoolInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  open_page_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSUserPoolInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool open_page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          open_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSUserPoolInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSUserPoolInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool open_page = 1;
  if (this->open_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_open_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSUserPoolInfo)
  return target;
}

size_t CSUserPoolInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSUserPoolInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool open_page = 1;
  if (this->open_page() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSUserPoolInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSUserPoolInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSUserPoolInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSUserPoolInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSUserPoolInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSUserPoolInfo)
    MergeFrom(*source);
  }
}

void CSUserPoolInfo::MergeFrom(const CSUserPoolInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSUserPoolInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.open_page() != 0) {
    _internal_set_open_page(from._internal_open_page());
  }
}

void CSUserPoolInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSUserPoolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUserPoolInfo::CopyFrom(const CSUserPoolInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSUserPoolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUserPoolInfo::IsInitialized() const {
  return true;
}

void CSUserPoolInfo::InternalSwap(CSUserPoolInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(open_page_, other->open_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSUserPoolInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GoodsInfo::_Internal {
 public:
};

GoodsInfo::GoodsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.GoodsInfo)
}
GoodsInfo::GoodsInfo(const GoodsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&prop_id_, &from.prop_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_id_) -
    reinterpret_cast<char*>(&prop_id_)) + sizeof(client_id_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.GoodsInfo)
}

void GoodsInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&prop_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&client_id_) -
      reinterpret_cast<char*>(&prop_id_)) + sizeof(client_id_));
}

GoodsInfo::~GoodsInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.GoodsInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GoodsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GoodsInfo::ArenaDtor(void* object) {
  GoodsInfo* _this = reinterpret_cast< GoodsInfo* >(object);
  (void)_this;
}
void GoodsInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GoodsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GoodsInfo& GoodsInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GoodsInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void GoodsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.GoodsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&prop_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_id_) -
      reinterpret_cast<char*>(&prop_id_)) + sizeof(client_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GoodsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 prop_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          prop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 prop_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          prop_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 client_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GoodsInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.GoodsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 prop_id = 1;
  if (this->prop_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_prop_id(), target);
  }

  // int32 prop_num = 2;
  if (this->prop_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_prop_num(), target);
  }

  // int32 client_id = 3;
  if (this->client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.GoodsInfo)
  return target;
}

size_t GoodsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.GoodsInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 prop_id = 1;
  if (this->prop_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prop_id());
  }

  // int32 prop_num = 2;
  if (this->prop_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prop_num());
  }

  // int32 client_id = 3;
  if (this->client_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_client_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GoodsInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.GoodsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GoodsInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GoodsInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.GoodsInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.GoodsInfo)
    MergeFrom(*source);
  }
}

void GoodsInfo::MergeFrom(const GoodsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.GoodsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prop_id() != 0) {
    _internal_set_prop_id(from._internal_prop_id());
  }
  if (from.prop_num() != 0) {
    _internal_set_prop_num(from._internal_prop_num());
  }
  if (from.client_id() != 0) {
    _internal_set_client_id(from._internal_client_id());
  }
}

void GoodsInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.GoodsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoodsInfo::CopyFrom(const GoodsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.GoodsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoodsInfo::IsInitialized() const {
  return true;
}

void GoodsInfo::InternalSwap(GoodsInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GoodsInfo, client_id_)
      + sizeof(GoodsInfo::client_id_)
      - PROTOBUF_FIELD_OFFSET(GoodsInfo, prop_id_)>(
          reinterpret_cast<char*>(&prop_id_),
          reinterpret_cast<char*>(&other->prop_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GoodsInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserAwardItem::_Internal {
 public:
};

UserAwardItem::UserAwardItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  goods_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.UserAwardItem)
}
UserAwardItem::UserAwardItem(const UserAwardItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      goods_(from.goods_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_max_) -
    reinterpret_cast<char*>(&index_)) + sizeof(item_max_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.UserAwardItem)
}

void UserAwardItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserAwardItem_BYDLD_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&item_max_) -
      reinterpret_cast<char*>(&index_)) + sizeof(item_max_));
}

UserAwardItem::~UserAwardItem() {
  // @@protoc_insertion_point(destructor:BYDLD.UserAwardItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserAwardItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserAwardItem::ArenaDtor(void* object) {
  UserAwardItem* _this = reinterpret_cast< UserAwardItem* >(object);
  (void)_this;
}
void UserAwardItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserAwardItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserAwardItem& UserAwardItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserAwardItem_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void UserAwardItem::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.UserAwardItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  goods_.Clear();
  name_.ClearToEmpty();
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_max_) -
      reinterpret_cast<char*>(&index_)) + sizeof(item_max_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserAwardItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 item_max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          item_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.UserAwardItem.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.GoodsInfo goods = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_goods(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserAwardItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.UserAwardItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 item_max = 2;
  if (this->item_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_item_max(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.UserAwardItem.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // repeated .BYDLD.GoodsInfo goods = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_goods_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_goods(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.UserAwardItem)
  return target;
}

size_t UserAwardItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.UserAwardItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.GoodsInfo goods = 4;
  total_size += 1UL * this->_internal_goods_size();
  for (const auto& msg : this->goods_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 item_max = 2;
  if (this->item_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_item_max());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserAwardItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.UserAwardItem)
  GOOGLE_DCHECK_NE(&from, this);
  const UserAwardItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserAwardItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.UserAwardItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.UserAwardItem)
    MergeFrom(*source);
  }
}

void UserAwardItem::MergeFrom(const UserAwardItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.UserAwardItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  goods_.MergeFrom(from.goods_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.item_max() != 0) {
    _internal_set_item_max(from._internal_item_max());
  }
}

void UserAwardItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.UserAwardItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAwardItem::CopyFrom(const UserAwardItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.UserAwardItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAwardItem::IsInitialized() const {
  return true;
}

void UserAwardItem::InternalSwap(UserAwardItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  goods_.InternalSwap(&other->goods_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserAwardItem, item_max_)
      + sizeof(UserAwardItem::item_max_)
      - PROTOBUF_FIELD_OFFSET(UserAwardItem, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserAwardItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUserPoolInfo::_Internal {
 public:
};

SCUserPoolInfo::SCUserPoolInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCUserPoolInfo)
}
SCUserPoolInfo::SCUserPoolInfo(const SCUserPoolInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&pool_max_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(pool_max_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCUserPoolInfo)
}

void SCUserPoolInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCUserPoolInfo_BYDLD_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&pool_max_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(pool_max_));
}

SCUserPoolInfo::~SCUserPoolInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.SCUserPoolInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUserPoolInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCUserPoolInfo::ArenaDtor(void* object) {
  SCUserPoolInfo* _this = reinterpret_cast< SCUserPoolInfo* >(object);
  (void)_this;
}
void SCUserPoolInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUserPoolInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUserPoolInfo& SCUserPoolInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUserPoolInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCUserPoolInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCUserPoolInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pool_max_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(pool_max_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUserPoolInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool open_page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          open_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pool_max = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pool_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.UserAwardItem items = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUserPoolInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCUserPoolInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // bool open_page = 2;
  if (this->open_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_open_page(), target);
  }

  // bool status = 3;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_status(), target);
  }

  // int32 count = 4;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_count(), target);
  }

  // int32 pool_max = 5;
  if (this->pool_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_pool_max(), target);
  }

  // repeated .BYDLD.UserAwardItem items = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCUserPoolInfo)
  return target;
}

size_t SCUserPoolInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCUserPoolInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.UserAwardItem items = 6;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // bool open_page = 2;
  if (this->open_page() != 0) {
    total_size += 1 + 1;
  }

  // bool status = 3;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  // int32 count = 4;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  // int32 pool_max = 5;
  if (this->pool_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pool_max());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUserPoolInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCUserPoolInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUserPoolInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUserPoolInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCUserPoolInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCUserPoolInfo)
    MergeFrom(*source);
  }
}

void SCUserPoolInfo::MergeFrom(const SCUserPoolInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCUserPoolInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.open_page() != 0) {
    _internal_set_open_page(from._internal_open_page());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.pool_max() != 0) {
    _internal_set_pool_max(from._internal_pool_max());
  }
}

void SCUserPoolInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCUserPoolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUserPoolInfo::CopyFrom(const SCUserPoolInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCUserPoolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUserPoolInfo::IsInitialized() const {
  return true;
}

void SCUserPoolInfo::InternalSwap(SCUserPoolInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCUserPoolInfo, pool_max_)
      + sizeof(SCUserPoolInfo::pool_max_)
      - PROTOBUF_FIELD_OFFSET(SCUserPoolInfo, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUserPoolInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSUserPoolStatus::_Internal {
 public:
};

CSUserPoolStatus::CSUserPoolStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSUserPoolStatus)
}
CSUserPoolStatus::CSUserPoolStatus(const CSUserPoolStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  open_ = from.open_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSUserPoolStatus)
}

void CSUserPoolStatus::SharedCtor() {
  open_ = false;
}

CSUserPoolStatus::~CSUserPoolStatus() {
  // @@protoc_insertion_point(destructor:BYDLD.CSUserPoolStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSUserPoolStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSUserPoolStatus::ArenaDtor(void* object) {
  CSUserPoolStatus* _this = reinterpret_cast< CSUserPoolStatus* >(object);
  (void)_this;
}
void CSUserPoolStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSUserPoolStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSUserPoolStatus& CSUserPoolStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSUserPoolStatus_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSUserPoolStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSUserPoolStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  open_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSUserPoolStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool open = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSUserPoolStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSUserPoolStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool open = 1;
  if (this->open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_open(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSUserPoolStatus)
  return target;
}

size_t CSUserPoolStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSUserPoolStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool open = 1;
  if (this->open() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSUserPoolStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSUserPoolStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CSUserPoolStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSUserPoolStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSUserPoolStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSUserPoolStatus)
    MergeFrom(*source);
  }
}

void CSUserPoolStatus::MergeFrom(const CSUserPoolStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSUserPoolStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.open() != 0) {
    _internal_set_open(from._internal_open());
  }
}

void CSUserPoolStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSUserPoolStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUserPoolStatus::CopyFrom(const CSUserPoolStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSUserPoolStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUserPoolStatus::IsInitialized() const {
  return true;
}

void CSUserPoolStatus::InternalSwap(CSUserPoolStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(open_, other->open_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSUserPoolStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUserPoolStatus::_Internal {
 public:
};

SCUserPoolStatus::SCUserPoolStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCUserPoolStatus)
}
SCUserPoolStatus::SCUserPoolStatus(const SCUserPoolStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  open_ = from.open_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCUserPoolStatus)
}

void SCUserPoolStatus::SharedCtor() {
  open_ = false;
}

SCUserPoolStatus::~SCUserPoolStatus() {
  // @@protoc_insertion_point(destructor:BYDLD.SCUserPoolStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUserPoolStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCUserPoolStatus::ArenaDtor(void* object) {
  SCUserPoolStatus* _this = reinterpret_cast< SCUserPoolStatus* >(object);
  (void)_this;
}
void SCUserPoolStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUserPoolStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUserPoolStatus& SCUserPoolStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUserPoolStatus_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCUserPoolStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCUserPoolStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  open_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUserPoolStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool open = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUserPoolStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCUserPoolStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool open = 1;
  if (this->open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_open(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCUserPoolStatus)
  return target;
}

size_t SCUserPoolStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCUserPoolStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool open = 1;
  if (this->open() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUserPoolStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCUserPoolStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUserPoolStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUserPoolStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCUserPoolStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCUserPoolStatus)
    MergeFrom(*source);
  }
}

void SCUserPoolStatus::MergeFrom(const SCUserPoolStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCUserPoolStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.open() != 0) {
    _internal_set_open(from._internal_open());
  }
}

void SCUserPoolStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCUserPoolStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUserPoolStatus::CopyFrom(const SCUserPoolStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCUserPoolStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUserPoolStatus::IsInitialized() const {
  return true;
}

void SCUserPoolStatus::InternalSwap(SCUserPoolStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(open_, other->open_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUserPoolStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSUserPoolPreDraw::_Internal {
 public:
};

CSUserPoolPreDraw::CSUserPoolPreDraw(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSUserPoolPreDraw)
}
CSUserPoolPreDraw::CSUserPoolPreDraw(const CSUserPoolPreDraw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSUserPoolPreDraw)
}

void CSUserPoolPreDraw::SharedCtor() {
  level_ = 0;
}

CSUserPoolPreDraw::~CSUserPoolPreDraw() {
  // @@protoc_insertion_point(destructor:BYDLD.CSUserPoolPreDraw)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSUserPoolPreDraw::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSUserPoolPreDraw::ArenaDtor(void* object) {
  CSUserPoolPreDraw* _this = reinterpret_cast< CSUserPoolPreDraw* >(object);
  (void)_this;
}
void CSUserPoolPreDraw::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSUserPoolPreDraw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSUserPoolPreDraw& CSUserPoolPreDraw::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSUserPoolPreDraw_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSUserPoolPreDraw::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSUserPoolPreDraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSUserPoolPreDraw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSUserPoolPreDraw::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSUserPoolPreDraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSUserPoolPreDraw)
  return target;
}

size_t CSUserPoolPreDraw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSUserPoolPreDraw)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSUserPoolPreDraw::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSUserPoolPreDraw)
  GOOGLE_DCHECK_NE(&from, this);
  const CSUserPoolPreDraw* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSUserPoolPreDraw>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSUserPoolPreDraw)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSUserPoolPreDraw)
    MergeFrom(*source);
  }
}

void CSUserPoolPreDraw::MergeFrom(const CSUserPoolPreDraw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSUserPoolPreDraw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void CSUserPoolPreDraw::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSUserPoolPreDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUserPoolPreDraw::CopyFrom(const CSUserPoolPreDraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSUserPoolPreDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUserPoolPreDraw::IsInitialized() const {
  return true;
}

void CSUserPoolPreDraw::InternalSwap(CSUserPoolPreDraw* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSUserPoolPreDraw::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUserPoolPreDraw::_Internal {
 public:
};

SCUserPoolPreDraw::SCUserPoolPreDraw(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCUserPoolPreDraw)
}
SCUserPoolPreDraw::SCUserPoolPreDraw(const SCUserPoolPreDraw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArena());
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&code_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCUserPoolPreDraw)
}

void SCUserPoolPreDraw::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCUserPoolPreDraw_BYDLD_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&code_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&code_)) + sizeof(level_));
}

SCUserPoolPreDraw::~SCUserPoolPreDraw() {
  // @@protoc_insertion_point(destructor:BYDLD.SCUserPoolPreDraw)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUserPoolPreDraw::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SCUserPoolPreDraw::ArenaDtor(void* object) {
  SCUserPoolPreDraw* _this = reinterpret_cast< SCUserPoolPreDraw* >(object);
  (void)_this;
}
void SCUserPoolPreDraw::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUserPoolPreDraw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUserPoolPreDraw& SCUserPoolPreDraw::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUserPoolPreDraw_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCUserPoolPreDraw::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCUserPoolPreDraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&code_)) + sizeof(level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUserPoolPreDraw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.SCUserPoolPreDraw.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUserPoolPreDraw::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCUserPoolPreDraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  // string msg = 3;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.SCUserPoolPreDraw.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCUserPoolPreDraw)
  return target;
}

size_t SCUserPoolPreDraw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCUserPoolPreDraw)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  // int32 level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUserPoolPreDraw::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCUserPoolPreDraw)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUserPoolPreDraw* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUserPoolPreDraw>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCUserPoolPreDraw)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCUserPoolPreDraw)
    MergeFrom(*source);
  }
}

void SCUserPoolPreDraw::MergeFrom(const SCUserPoolPreDraw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCUserPoolPreDraw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {
    _internal_set_msg(from._internal_msg());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void SCUserPoolPreDraw::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCUserPoolPreDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUserPoolPreDraw::CopyFrom(const SCUserPoolPreDraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCUserPoolPreDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUserPoolPreDraw::IsInitialized() const {
  return true;
}

void SCUserPoolPreDraw::InternalSwap(SCUserPoolPreDraw* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCUserPoolPreDraw, level_)
      + sizeof(SCUserPoolPreDraw::level_)
      - PROTOBUF_FIELD_OFFSET(SCUserPoolPreDraw, code_)>(
          reinterpret_cast<char*>(&code_),
          reinterpret_cast<char*>(&other->code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUserPoolPreDraw::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSUserPoolDraw::_Internal {
 public:
};

CSUserPoolDraw::CSUserPoolDraw(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSUserPoolDraw)
}
CSUserPoolDraw::CSUserPoolDraw(const CSUserPoolDraw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSUserPoolDraw)
}

void CSUserPoolDraw::SharedCtor() {
}

CSUserPoolDraw::~CSUserPoolDraw() {
  // @@protoc_insertion_point(destructor:BYDLD.CSUserPoolDraw)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSUserPoolDraw::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSUserPoolDraw::ArenaDtor(void* object) {
  CSUserPoolDraw* _this = reinterpret_cast< CSUserPoolDraw* >(object);
  (void)_this;
}
void CSUserPoolDraw::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSUserPoolDraw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSUserPoolDraw& CSUserPoolDraw::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSUserPoolDraw_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSUserPoolDraw::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSUserPoolDraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSUserPoolDraw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSUserPoolDraw::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSUserPoolDraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSUserPoolDraw)
  return target;
}

size_t CSUserPoolDraw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSUserPoolDraw)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSUserPoolDraw::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSUserPoolDraw)
  GOOGLE_DCHECK_NE(&from, this);
  const CSUserPoolDraw* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSUserPoolDraw>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSUserPoolDraw)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSUserPoolDraw)
    MergeFrom(*source);
  }
}

void CSUserPoolDraw::MergeFrom(const CSUserPoolDraw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSUserPoolDraw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSUserPoolDraw::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSUserPoolDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUserPoolDraw::CopyFrom(const CSUserPoolDraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSUserPoolDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUserPoolDraw::IsInitialized() const {
  return true;
}

void CSUserPoolDraw::InternalSwap(CSUserPoolDraw* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSUserPoolDraw::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUserPoolDraw::_Internal {
 public:
  static const ::BYDLD::GoodsInfo& award(const SCUserPoolDraw* msg);
  static const ::BYDLD::Object3& award_cnt(const SCUserPoolDraw* msg);
};

const ::BYDLD::GoodsInfo&
SCUserPoolDraw::_Internal::award(const SCUserPoolDraw* msg) {
  return *msg->award_;
}
const ::BYDLD::Object3&
SCUserPoolDraw::_Internal::award_cnt(const SCUserPoolDraw* msg) {
  return *msg->award_cnt_;
}
SCUserPoolDraw::SCUserPoolDraw(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  goods_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCUserPoolDraw)
}
SCUserPoolDraw::SCUserPoolDraw(const SCUserPoolDraw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      goods_(from.goods_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_award()) {
    award_ = new ::BYDLD::GoodsInfo(*from.award_);
  } else {
    award_ = nullptr;
  }
  if (from._internal_has_award_cnt()) {
    award_cnt_ = new ::BYDLD::Object3(*from.award_cnt_);
  } else {
    award_cnt_ = nullptr;
  }
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCUserPoolDraw)
}

void SCUserPoolDraw::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCUserPoolDraw_BYDLD_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&award_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&award_)) + sizeof(index_));
}

SCUserPoolDraw::~SCUserPoolDraw() {
  // @@protoc_insertion_point(destructor:BYDLD.SCUserPoolDraw)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUserPoolDraw::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete award_;
  if (this != internal_default_instance()) delete award_cnt_;
}

void SCUserPoolDraw::ArenaDtor(void* object) {
  SCUserPoolDraw* _this = reinterpret_cast< SCUserPoolDraw* >(object);
  (void)_this;
}
void SCUserPoolDraw::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUserPoolDraw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUserPoolDraw& SCUserPoolDraw::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUserPoolDraw_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCUserPoolDraw::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCUserPoolDraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  goods_.Clear();
  if (GetArena() == nullptr && award_ != nullptr) {
    delete award_;
  }
  award_ = nullptr;
  if (GetArena() == nullptr && award_cnt_ != nullptr) {
    delete award_cnt_;
  }
  award_cnt_ = nullptr;
  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUserPoolDraw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.GoodsInfo goods = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_goods(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .BYDLD.GoodsInfo award = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_award(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BYDLD.Object3 award_cnt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_award_cnt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 upgradecost = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          upgradecost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUserPoolDraw::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCUserPoolDraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // repeated .BYDLD.GoodsInfo goods = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_goods_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_goods(i), target, stream);
  }

  // .BYDLD.GoodsInfo award = 3;
  if (this->has_award()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::award(this), target, stream);
  }

  // .BYDLD.Object3 award_cnt = 4;
  if (this->has_award_cnt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::award_cnt(this), target, stream);
  }

  // int32 upgradecost = 5;
  if (this->upgradecost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_upgradecost(), target);
  }

  // int32 index = 6;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCUserPoolDraw)
  return target;
}

size_t SCUserPoolDraw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCUserPoolDraw)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.GoodsInfo goods = 2;
  total_size += 1UL * this->_internal_goods_size();
  for (const auto& msg : this->goods_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .BYDLD.GoodsInfo award = 3;
  if (this->has_award()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *award_);
  }

  // .BYDLD.Object3 award_cnt = 4;
  if (this->has_award_cnt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *award_cnt_);
  }

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 upgradecost = 5;
  if (this->upgradecost() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_upgradecost());
  }

  // int32 index = 6;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUserPoolDraw::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCUserPoolDraw)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUserPoolDraw* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUserPoolDraw>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCUserPoolDraw)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCUserPoolDraw)
    MergeFrom(*source);
  }
}

void SCUserPoolDraw::MergeFrom(const SCUserPoolDraw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCUserPoolDraw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  goods_.MergeFrom(from.goods_);
  if (from.has_award()) {
    _internal_mutable_award()->::BYDLD::GoodsInfo::MergeFrom(from._internal_award());
  }
  if (from.has_award_cnt()) {
    _internal_mutable_award_cnt()->::BYDLD::Object3::MergeFrom(from._internal_award_cnt());
  }
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.upgradecost() != 0) {
    _internal_set_upgradecost(from._internal_upgradecost());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void SCUserPoolDraw::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCUserPoolDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUserPoolDraw::CopyFrom(const SCUserPoolDraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCUserPoolDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUserPoolDraw::IsInitialized() const {
  return true;
}

void SCUserPoolDraw::InternalSwap(SCUserPoolDraw* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  goods_.InternalSwap(&other->goods_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCUserPoolDraw, index_)
      + sizeof(SCUserPoolDraw::index_)
      - PROTOBUF_FIELD_OFFSET(SCUserPoolDraw, award_)>(
          reinterpret_cast<char*>(&award_),
          reinterpret_cast<char*>(&other->award_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUserPoolDraw::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUserPoolAdd::_Internal {
 public:
};

SCUserPoolAdd::SCUserPoolAdd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCUserPoolAdd)
}
SCUserPoolAdd::SCUserPoolAdd(const SCUserPoolAdd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  level_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_level_name().empty()) {
    level_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_level_name(), 
      GetArena());
  }
  ::memcpy(&add_, &from.add_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&add_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCUserPoolAdd)
}

void SCUserPoolAdd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCUserPoolAdd_BYDLD_2eproto.base);
  level_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&add_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&add_)) + sizeof(status_));
}

SCUserPoolAdd::~SCUserPoolAdd() {
  // @@protoc_insertion_point(destructor:BYDLD.SCUserPoolAdd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUserPoolAdd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  level_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SCUserPoolAdd::ArenaDtor(void* object) {
  SCUserPoolAdd* _this = reinterpret_cast< SCUserPoolAdd* >(object);
  (void)_this;
}
void SCUserPoolAdd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUserPoolAdd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUserPoolAdd& SCUserPoolAdd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUserPoolAdd_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCUserPoolAdd::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCUserPoolAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_name_.ClearToEmpty();
  ::memset(&add_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&add_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUserPoolAdd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 add = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          add_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 first_max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          first_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pool_max = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pool_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string level_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_level_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.SCUserPoolAdd.level_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUserPoolAdd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCUserPoolAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 add = 1;
  if (this->add() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_add(), target);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // int32 first_max = 3;
  if (this->first_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_first_max(), target);
  }

  // int32 pool_max = 4;
  if (this->pool_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_pool_max(), target);
  }

  // bool status = 5;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_status(), target);
  }

  // string level_name = 6;
  if (this->level_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_level_name().data(), static_cast<int>(this->_internal_level_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.SCUserPoolAdd.level_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_level_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCUserPoolAdd)
  return target;
}

size_t SCUserPoolAdd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCUserPoolAdd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string level_name = 6;
  if (this->level_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_level_name());
  }

  // int32 add = 1;
  if (this->add() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_add());
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  // int32 first_max = 3;
  if (this->first_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_first_max());
  }

  // int32 pool_max = 4;
  if (this->pool_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pool_max());
  }

  // bool status = 5;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUserPoolAdd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCUserPoolAdd)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUserPoolAdd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUserPoolAdd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCUserPoolAdd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCUserPoolAdd)
    MergeFrom(*source);
  }
}

void SCUserPoolAdd::MergeFrom(const SCUserPoolAdd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCUserPoolAdd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level_name().size() > 0) {
    _internal_set_level_name(from._internal_level_name());
  }
  if (from.add() != 0) {
    _internal_set_add(from._internal_add());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.first_max() != 0) {
    _internal_set_first_max(from._internal_first_max());
  }
  if (from.pool_max() != 0) {
    _internal_set_pool_max(from._internal_pool_max());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SCUserPoolAdd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCUserPoolAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUserPoolAdd::CopyFrom(const SCUserPoolAdd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCUserPoolAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUserPoolAdd::IsInitialized() const {
  return true;
}

void SCUserPoolAdd::InternalSwap(SCUserPoolAdd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  level_name_.Swap(&other->level_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCUserPoolAdd, status_)
      + sizeof(SCUserPoolAdd::status_)
      - PROTOBUF_FIELD_OFFSET(SCUserPoolAdd, add_)>(
          reinterpret_cast<char*>(&add_),
          reinterpret_cast<char*>(&other->add_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUserPoolAdd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ResultRank::_Internal {
 public:
};

ResultRank::ResultRank(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.ResultRank)
}
ResultRank::ResultRank(const ResultRank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_icon().empty()) {
    icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  idx_ = from.idx_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.ResultRank)
}

void ResultRank::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResultRank_BYDLD_2eproto.base);
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idx_ = 0;
}

ResultRank::~ResultRank() {
  // @@protoc_insertion_point(destructor:BYDLD.ResultRank)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResultRank::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResultRank::ArenaDtor(void* object) {
  ResultRank* _this = reinterpret_cast< ResultRank* >(object);
  (void)_this;
}
void ResultRank::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResultRank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResultRank& ResultRank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResultRank_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void ResultRank::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.ResultRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  icon_.ClearToEmpty();
  name_.ClearToEmpty();
  idx_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResultRank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string icon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.ResultRank.icon"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.ResultRank.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResultRank::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.ResultRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_idx(), target);
  }

  // string icon = 2;
  if (this->icon().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.ResultRank.icon");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_icon(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.ResultRank.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.ResultRank)
  return target;
}

size_t ResultRank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.ResultRank)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string icon = 2;
  if (this->icon().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icon());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 idx = 1;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResultRank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.ResultRank)
  GOOGLE_DCHECK_NE(&from, this);
  const ResultRank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResultRank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.ResultRank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.ResultRank)
    MergeFrom(*source);
  }
}

void ResultRank::MergeFrom(const ResultRank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.ResultRank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.icon().size() > 0) {
    _internal_set_icon(from._internal_icon());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
}

void ResultRank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.ResultRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultRank::CopyFrom(const ResultRank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.ResultRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultRank::IsInitialized() const {
  return true;
}

void ResultRank::InternalSwap(ResultRank* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  icon_.Swap(&other->icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(idx_, other->idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResultRank::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCMatchResult::_Internal {
 public:
};

SCMatchResult::SCMatchResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rank_list_(arena),
  match_goods_(arena),
  pack_goods_(arena),
  lucky_goods_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCMatchResult)
}
SCMatchResult::SCMatchResult(const SCMatchResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rank_list_(from.rank_list_),
      match_goods_(from.match_goods_),
      pack_goods_(from.pack_goods_),
      lucky_goods_(from.lucky_goods_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&matchid_, &from.matchid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reaward_addition_) -
    reinterpret_cast<char*>(&matchid_)) + sizeof(reaward_addition_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCMatchResult)
}

void SCMatchResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCMatchResult_BYDLD_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&matchid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&reaward_addition_) -
      reinterpret_cast<char*>(&matchid_)) + sizeof(reaward_addition_));
}

SCMatchResult::~SCMatchResult() {
  // @@protoc_insertion_point(destructor:BYDLD.SCMatchResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCMatchResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCMatchResult::ArenaDtor(void* object) {
  SCMatchResult* _this = reinterpret_cast< SCMatchResult* >(object);
  (void)_this;
}
void SCMatchResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCMatchResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCMatchResult& SCMatchResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCMatchResult_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCMatchResult::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCMatchResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rank_list_.Clear();
  match_goods_.Clear();
  pack_goods_.Clear();
  lucky_goods_.Clear();
  ::memset(&matchid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reaward_addition_) -
      reinterpret_cast<char*>(&matchid_)) + sizeof(reaward_addition_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCMatchResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 matchId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          matchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.ResultRank rank_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rank_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool isPack = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ispack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 oneself_rank = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          oneself_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 addition_source = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          addition_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reaward_addition = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          reaward_addition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.Object3 match_goods = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_match_goods(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.Object3 pack_goods = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pack_goods(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.Object3 lucky_goods = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lucky_goods(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCMatchResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCMatchResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 matchId = 1;
  if (this->matchid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_matchid(), target);
  }

  // repeated .BYDLD.ResultRank rank_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rank_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_rank_list(i), target, stream);
  }

  // bool isPack = 3;
  if (this->ispack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_ispack(), target);
  }

  // int32 oneself_rank = 4;
  if (this->oneself_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_oneself_rank(), target);
  }

  // int32 addition_source = 5;
  if (this->addition_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_addition_source(), target);
  }

  // int32 reaward_addition = 6;
  if (this->reaward_addition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_reaward_addition(), target);
  }

  // repeated .BYDLD.Object3 match_goods = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_match_goods_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_match_goods(i), target, stream);
  }

  // repeated .BYDLD.Object3 pack_goods = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pack_goods_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_pack_goods(i), target, stream);
  }

  // repeated .BYDLD.Object3 lucky_goods = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lucky_goods_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_lucky_goods(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCMatchResult)
  return target;
}

size_t SCMatchResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCMatchResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.ResultRank rank_list = 2;
  total_size += 1UL * this->_internal_rank_list_size();
  for (const auto& msg : this->rank_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .BYDLD.Object3 match_goods = 7;
  total_size += 1UL * this->_internal_match_goods_size();
  for (const auto& msg : this->match_goods_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .BYDLD.Object3 pack_goods = 8;
  total_size += 1UL * this->_internal_pack_goods_size();
  for (const auto& msg : this->pack_goods_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .BYDLD.Object3 lucky_goods = 9;
  total_size += 1UL * this->_internal_lucky_goods_size();
  for (const auto& msg : this->lucky_goods_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 matchId = 1;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_matchid());
  }

  // bool isPack = 3;
  if (this->ispack() != 0) {
    total_size += 1 + 1;
  }

  // int32 oneself_rank = 4;
  if (this->oneself_rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_oneself_rank());
  }

  // int32 addition_source = 5;
  if (this->addition_source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_addition_source());
  }

  // int32 reaward_addition = 6;
  if (this->reaward_addition() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reaward_addition());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCMatchResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCMatchResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SCMatchResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCMatchResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCMatchResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCMatchResult)
    MergeFrom(*source);
  }
}

void SCMatchResult::MergeFrom(const SCMatchResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCMatchResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rank_list_.MergeFrom(from.rank_list_);
  match_goods_.MergeFrom(from.match_goods_);
  pack_goods_.MergeFrom(from.pack_goods_);
  lucky_goods_.MergeFrom(from.lucky_goods_);
  if (from.matchid() != 0) {
    _internal_set_matchid(from._internal_matchid());
  }
  if (from.ispack() != 0) {
    _internal_set_ispack(from._internal_ispack());
  }
  if (from.oneself_rank() != 0) {
    _internal_set_oneself_rank(from._internal_oneself_rank());
  }
  if (from.addition_source() != 0) {
    _internal_set_addition_source(from._internal_addition_source());
  }
  if (from.reaward_addition() != 0) {
    _internal_set_reaward_addition(from._internal_reaward_addition());
  }
}

void SCMatchResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCMatchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCMatchResult::CopyFrom(const SCMatchResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCMatchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMatchResult::IsInitialized() const {
  return true;
}

void SCMatchResult::InternalSwap(SCMatchResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rank_list_.InternalSwap(&other->rank_list_);
  match_goods_.InternalSwap(&other->match_goods_);
  pack_goods_.InternalSwap(&other->pack_goods_);
  lucky_goods_.InternalSwap(&other->lucky_goods_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCMatchResult, reaward_addition_)
      + sizeof(SCMatchResult::reaward_addition_)
      - PROTOBUF_FIELD_OFFSET(SCMatchResult, matchid_)>(
          reinterpret_cast<char*>(&matchid_),
          reinterpret_cast<char*>(&other->matchid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCMatchResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MatchPackAddition::_Internal {
 public:
};

MatchPackAddition::MatchPackAddition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.MatchPackAddition)
}
MatchPackAddition::MatchPackAddition(const MatchPackAddition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  ::memcpy(&is_buy_, &from.is_buy_,
    static_cast<size_t>(reinterpret_cast<char*>(&sec_) -
    reinterpret_cast<char*>(&is_buy_)) + sizeof(sec_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.MatchPackAddition)
}

void MatchPackAddition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchPackAddition_BYDLD_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&is_buy_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sec_) -
      reinterpret_cast<char*>(&is_buy_)) + sizeof(sec_));
}

MatchPackAddition::~MatchPackAddition() {
  // @@protoc_insertion_point(destructor:BYDLD.MatchPackAddition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchPackAddition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MatchPackAddition::ArenaDtor(void* object) {
  MatchPackAddition* _this = reinterpret_cast< MatchPackAddition* >(object);
  (void)_this;
}
void MatchPackAddition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchPackAddition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchPackAddition& MatchPackAddition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchPackAddition_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void MatchPackAddition::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.MatchPackAddition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  ::memset(&is_buy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sec_) -
      reinterpret_cast<char*>(&is_buy_)) + sizeof(sec_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchPackAddition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.MatchPackAddition.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_buy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_buy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float score_addition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          score_addition_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float reaward_addition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          reaward_addition_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 card = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          card_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sec = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchPackAddition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.MatchPackAddition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.MatchPackAddition.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // bool is_buy = 2;
  if (this->is_buy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_buy(), target);
  }

  // float score_addition = 3;
  if (!(this->score_addition() <= 0 && this->score_addition() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_score_addition(), target);
  }

  // float reaward_addition = 4;
  if (!(this->reaward_addition() <= 0 && this->reaward_addition() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_reaward_addition(), target);
  }

  // int32 card = 5;
  if (this->card() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_card(), target);
  }

  // int32 sec = 6;
  if (this->sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.MatchPackAddition)
  return target;
}

size_t MatchPackAddition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.MatchPackAddition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bool is_buy = 2;
  if (this->is_buy() != 0) {
    total_size += 1 + 1;
  }

  // float score_addition = 3;
  if (!(this->score_addition() <= 0 && this->score_addition() >= 0)) {
    total_size += 1 + 4;
  }

  // float reaward_addition = 4;
  if (!(this->reaward_addition() <= 0 && this->reaward_addition() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 card = 5;
  if (this->card() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_card());
  }

  // int32 sec = 6;
  if (this->sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sec());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchPackAddition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.MatchPackAddition)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchPackAddition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchPackAddition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.MatchPackAddition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.MatchPackAddition)
    MergeFrom(*source);
  }
}

void MatchPackAddition::MergeFrom(const MatchPackAddition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.MatchPackAddition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.is_buy() != 0) {
    _internal_set_is_buy(from._internal_is_buy());
  }
  if (!(from.score_addition() <= 0 && from.score_addition() >= 0)) {
    _internal_set_score_addition(from._internal_score_addition());
  }
  if (!(from.reaward_addition() <= 0 && from.reaward_addition() >= 0)) {
    _internal_set_reaward_addition(from._internal_reaward_addition());
  }
  if (from.card() != 0) {
    _internal_set_card(from._internal_card());
  }
  if (from.sec() != 0) {
    _internal_set_sec(from._internal_sec());
  }
}

void MatchPackAddition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.MatchPackAddition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchPackAddition::CopyFrom(const MatchPackAddition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.MatchPackAddition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchPackAddition::IsInitialized() const {
  return true;
}

void MatchPackAddition::InternalSwap(MatchPackAddition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchPackAddition, sec_)
      + sizeof(MatchPackAddition::sec_)
      - PROTOBUF_FIELD_OFFSET(MatchPackAddition, is_buy_)>(
          reinterpret_cast<char*>(&is_buy_),
          reinterpret_cast<char*>(&other->is_buy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchPackAddition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSMatchPackAddition::_Internal {
 public:
};

CSMatchPackAddition::CSMatchPackAddition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSMatchPackAddition)
}
CSMatchPackAddition::CSMatchPackAddition(const CSMatchPackAddition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSMatchPackAddition)
}

void CSMatchPackAddition::SharedCtor() {
}

CSMatchPackAddition::~CSMatchPackAddition() {
  // @@protoc_insertion_point(destructor:BYDLD.CSMatchPackAddition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSMatchPackAddition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSMatchPackAddition::ArenaDtor(void* object) {
  CSMatchPackAddition* _this = reinterpret_cast< CSMatchPackAddition* >(object);
  (void)_this;
}
void CSMatchPackAddition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSMatchPackAddition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSMatchPackAddition& CSMatchPackAddition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSMatchPackAddition_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSMatchPackAddition::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSMatchPackAddition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSMatchPackAddition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSMatchPackAddition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSMatchPackAddition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSMatchPackAddition)
  return target;
}

size_t CSMatchPackAddition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSMatchPackAddition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSMatchPackAddition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSMatchPackAddition)
  GOOGLE_DCHECK_NE(&from, this);
  const CSMatchPackAddition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSMatchPackAddition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSMatchPackAddition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSMatchPackAddition)
    MergeFrom(*source);
  }
}

void CSMatchPackAddition::MergeFrom(const CSMatchPackAddition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSMatchPackAddition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSMatchPackAddition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSMatchPackAddition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMatchPackAddition::CopyFrom(const CSMatchPackAddition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSMatchPackAddition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMatchPackAddition::IsInitialized() const {
  return true;
}

void CSMatchPackAddition::InternalSwap(CSMatchPackAddition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSMatchPackAddition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCMatchPackAddition::_Internal {
 public:
};

SCMatchPackAddition::SCMatchPackAddition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  addition_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCMatchPackAddition)
}
SCMatchPackAddition::SCMatchPackAddition(const SCMatchPackAddition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      addition_(from.addition_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCMatchPackAddition)
}

void SCMatchPackAddition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCMatchPackAddition_BYDLD_2eproto.base);
}

SCMatchPackAddition::~SCMatchPackAddition() {
  // @@protoc_insertion_point(destructor:BYDLD.SCMatchPackAddition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCMatchPackAddition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCMatchPackAddition::ArenaDtor(void* object) {
  SCMatchPackAddition* _this = reinterpret_cast< SCMatchPackAddition* >(object);
  (void)_this;
}
void SCMatchPackAddition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCMatchPackAddition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCMatchPackAddition& SCMatchPackAddition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCMatchPackAddition_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCMatchPackAddition::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCMatchPackAddition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addition_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCMatchPackAddition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.MatchPackAddition addition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_addition(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCMatchPackAddition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCMatchPackAddition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.MatchPackAddition addition = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_addition_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_addition(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCMatchPackAddition)
  return target;
}

size_t SCMatchPackAddition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCMatchPackAddition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.MatchPackAddition addition = 1;
  total_size += 1UL * this->_internal_addition_size();
  for (const auto& msg : this->addition_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCMatchPackAddition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCMatchPackAddition)
  GOOGLE_DCHECK_NE(&from, this);
  const SCMatchPackAddition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCMatchPackAddition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCMatchPackAddition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCMatchPackAddition)
    MergeFrom(*source);
  }
}

void SCMatchPackAddition::MergeFrom(const SCMatchPackAddition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCMatchPackAddition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addition_.MergeFrom(from.addition_);
}

void SCMatchPackAddition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCMatchPackAddition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCMatchPackAddition::CopyFrom(const SCMatchPackAddition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCMatchPackAddition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMatchPackAddition::IsInitialized() const {
  return true;
}

void SCMatchPackAddition::InternalSwap(SCMatchPackAddition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  addition_.InternalSwap(&other->addition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCMatchPackAddition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCMatchPackInvail::_Internal {
 public:
};

SCMatchPackInvail::SCMatchPackInvail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCMatchPackInvail)
}
SCMatchPackInvail::SCMatchPackInvail(const SCMatchPackInvail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  packid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_packid().empty()) {
    packid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_packid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCMatchPackInvail)
}

void SCMatchPackInvail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCMatchPackInvail_BYDLD_2eproto.base);
  packid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SCMatchPackInvail::~SCMatchPackInvail() {
  // @@protoc_insertion_point(destructor:BYDLD.SCMatchPackInvail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCMatchPackInvail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  packid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SCMatchPackInvail::ArenaDtor(void* object) {
  SCMatchPackInvail* _this = reinterpret_cast< SCMatchPackInvail* >(object);
  (void)_this;
}
void SCMatchPackInvail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCMatchPackInvail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCMatchPackInvail& SCMatchPackInvail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCMatchPackInvail_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCMatchPackInvail::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCMatchPackInvail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCMatchPackInvail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string packId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_packid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.SCMatchPackInvail.packId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCMatchPackInvail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCMatchPackInvail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string packId = 1;
  if (this->packid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_packid().data(), static_cast<int>(this->_internal_packid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.SCMatchPackInvail.packId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_packid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCMatchPackInvail)
  return target;
}

size_t SCMatchPackInvail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCMatchPackInvail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string packId = 1;
  if (this->packid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_packid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCMatchPackInvail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCMatchPackInvail)
  GOOGLE_DCHECK_NE(&from, this);
  const SCMatchPackInvail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCMatchPackInvail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCMatchPackInvail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCMatchPackInvail)
    MergeFrom(*source);
  }
}

void SCMatchPackInvail::MergeFrom(const SCMatchPackInvail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCMatchPackInvail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.packid().size() > 0) {
    _internal_set_packid(from._internal_packid());
  }
}

void SCMatchPackInvail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCMatchPackInvail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCMatchPackInvail::CopyFrom(const SCMatchPackInvail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCMatchPackInvail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMatchPackInvail::IsInitialized() const {
  return true;
}

void SCMatchPackInvail::InternalSwap(SCMatchPackInvail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  packid_.Swap(&other->packid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SCMatchPackInvail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HttpResult::_Internal {
 public:
};

HttpResult::HttpResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.HttpResult)
}
HttpResult::HttpResult(const HttpResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  en_ = from.en_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.HttpResult)
}

void HttpResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HttpResult_BYDLD_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  en_ = 0;
}

HttpResult::~HttpResult() {
  // @@protoc_insertion_point(destructor:BYDLD.HttpResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HttpResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HttpResult::ArenaDtor(void* object) {
  HttpResult* _this = reinterpret_cast< HttpResult* >(object);
  (void)_this;
}
void HttpResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HttpResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HttpResult& HttpResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HttpResult_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void HttpResult::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.HttpResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  en_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HttpResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 En = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          en_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.HttpResult.Data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HttpResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.HttpResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 En = 1;
  if (this->en() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_en(), target);
  }

  // string Data = 2;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.HttpResult.Data");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.HttpResult)
  return target;
}

size_t HttpResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.HttpResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // int32 En = 1;
  if (this->en() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_en());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HttpResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.HttpResult)
  GOOGLE_DCHECK_NE(&from, this);
  const HttpResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HttpResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.HttpResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.HttpResult)
    MergeFrom(*source);
  }
}

void HttpResult::MergeFrom(const HttpResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.HttpResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.en() != 0) {
    _internal_set_en(from._internal_en());
  }
}

void HttpResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.HttpResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpResult::CopyFrom(const HttpResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.HttpResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpResult::IsInitialized() const {
  return true;
}

void HttpResult::InternalSwap(HttpResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(en_, other->en_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HttpResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSHBonusPool::_Internal {
 public:
};

CSHBonusPool::CSHBonusPool(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSHBonusPool)
}
CSHBonusPool::CSHBonusPool(const CSHBonusPool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mathcid_, &from.mathcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&mathcid_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSHBonusPool)
}

void CSHBonusPool::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&mathcid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&mathcid_)) + sizeof(playerid_));
}

CSHBonusPool::~CSHBonusPool() {
  // @@protoc_insertion_point(destructor:BYDLD.CSHBonusPool)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSHBonusPool::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSHBonusPool::ArenaDtor(void* object) {
  CSHBonusPool* _this = reinterpret_cast< CSHBonusPool* >(object);
  (void)_this;
}
void CSHBonusPool::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSHBonusPool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSHBonusPool& CSHBonusPool::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSHBonusPool_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSHBonusPool::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSHBonusPool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mathcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&mathcid_)) + sizeof(playerid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSHBonusPool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mathcId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mathcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 timeId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 playerId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSHBonusPool::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSHBonusPool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mathcId = 1;
  if (this->mathcid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mathcid(), target);
  }

  // int32 timeId = 2;
  if (this->timeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_timeid(), target);
  }

  // int32 playerId = 3;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSHBonusPool)
  return target;
}

size_t CSHBonusPool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSHBonusPool)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 mathcId = 1;
  if (this->mathcid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mathcid());
  }

  // int32 timeId = 2;
  if (this->timeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timeid());
  }

  // int32 playerId = 3;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSHBonusPool::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSHBonusPool)
  GOOGLE_DCHECK_NE(&from, this);
  const CSHBonusPool* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSHBonusPool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSHBonusPool)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSHBonusPool)
    MergeFrom(*source);
  }
}

void CSHBonusPool::MergeFrom(const CSHBonusPool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSHBonusPool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mathcid() != 0) {
    _internal_set_mathcid(from._internal_mathcid());
  }
  if (from.timeid() != 0) {
    _internal_set_timeid(from._internal_timeid());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
}

void CSHBonusPool::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSHBonusPool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSHBonusPool::CopyFrom(const CSHBonusPool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSHBonusPool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSHBonusPool::IsInitialized() const {
  return true;
}

void CSHBonusPool::InternalSwap(CSHBonusPool* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSHBonusPool, playerid_)
      + sizeof(CSHBonusPool::playerid_)
      - PROTOBUF_FIELD_OFFSET(CSHBonusPool, mathcid_)>(
          reinterpret_cast<char*>(&mathcid_),
          reinterpret_cast<char*>(&other->mathcid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSHBonusPool::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HBonusPool::_Internal {
 public:
};

HBonusPool::HBonusPool(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.HBonusPool)
}
HBonusPool::HBonusPool(const HBonusPool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&value_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.HBonusPool)
}

void HBonusPool::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HBonusPool_BYDLD_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&value_)) + sizeof(count_));
}

HBonusPool::~HBonusPool() {
  // @@protoc_insertion_point(destructor:BYDLD.HBonusPool)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HBonusPool::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HBonusPool::ArenaDtor(void* object) {
  HBonusPool* _this = reinterpret_cast< HBonusPool* >(object);
  (void)_this;
}
void HBonusPool::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HBonusPool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HBonusPool& HBonusPool::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HBonusPool_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void HBonusPool::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.HBonusPool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&value_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HBonusPool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.HBonusPool.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HBonusPool::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.HBonusPool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.HBonusPool.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.HBonusPool)
  return target;
}

size_t HBonusPool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.HBonusPool)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }

  // int32 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HBonusPool::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.HBonusPool)
  GOOGLE_DCHECK_NE(&from, this);
  const HBonusPool* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HBonusPool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.HBonusPool)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.HBonusPool)
    MergeFrom(*source);
  }
}

void HBonusPool::MergeFrom(const HBonusPool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.HBonusPool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void HBonusPool::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.HBonusPool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HBonusPool::CopyFrom(const HBonusPool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.HBonusPool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HBonusPool::IsInitialized() const {
  return true;
}

void HBonusPool::InternalSwap(HBonusPool* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HBonusPool, count_)
      + sizeof(HBonusPool::count_)
      - PROTOBUF_FIELD_OFFSET(HBonusPool, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HBonusPool::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCHBonusPool::_Internal {
 public:
};

SCHBonusPool::SCHBonusPool(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pool_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCHBonusPool)
}
SCHBonusPool::SCHBonusPool(const SCHBonusPool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pool_(from.pool_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCHBonusPool)
}

void SCHBonusPool::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCHBonusPool_BYDLD_2eproto.base);
}

SCHBonusPool::~SCHBonusPool() {
  // @@protoc_insertion_point(destructor:BYDLD.SCHBonusPool)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCHBonusPool::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCHBonusPool::ArenaDtor(void* object) {
  SCHBonusPool* _this = reinterpret_cast< SCHBonusPool* >(object);
  (void)_this;
}
void SCHBonusPool::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCHBonusPool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCHBonusPool& SCHBonusPool::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCHBonusPool_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCHBonusPool::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCHBonusPool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pool_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCHBonusPool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.HBonusPool pool = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pool(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCHBonusPool::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCHBonusPool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.HBonusPool pool = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pool_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pool(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCHBonusPool)
  return target;
}

size_t SCHBonusPool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCHBonusPool)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.HBonusPool pool = 1;
  total_size += 1UL * this->_internal_pool_size();
  for (const auto& msg : this->pool_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCHBonusPool::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCHBonusPool)
  GOOGLE_DCHECK_NE(&from, this);
  const SCHBonusPool* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCHBonusPool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCHBonusPool)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCHBonusPool)
    MergeFrom(*source);
  }
}

void SCHBonusPool::MergeFrom(const SCHBonusPool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCHBonusPool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pool_.MergeFrom(from.pool_);
}

void SCHBonusPool::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCHBonusPool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCHBonusPool::CopyFrom(const SCHBonusPool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCHBonusPool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCHBonusPool::IsInitialized() const {
  return true;
}

void SCHBonusPool::InternalSwap(SCHBonusPool* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pool_.InternalSwap(&other->pool_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCHBonusPool::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSHRankBar::_Internal {
 public:
};

CSHRankBar::CSHRankBar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSHRankBar)
}
CSHRankBar::CSHRankBar(const CSHRankBar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mathcid_, &from.mathcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&mathcid_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSHRankBar)
}

void CSHRankBar::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&mathcid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&mathcid_)) + sizeof(playerid_));
}

CSHRankBar::~CSHRankBar() {
  // @@protoc_insertion_point(destructor:BYDLD.CSHRankBar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSHRankBar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSHRankBar::ArenaDtor(void* object) {
  CSHRankBar* _this = reinterpret_cast< CSHRankBar* >(object);
  (void)_this;
}
void CSHRankBar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSHRankBar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSHRankBar& CSHRankBar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSHRankBar_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSHRankBar::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSHRankBar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mathcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&mathcid_)) + sizeof(playerid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSHRankBar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mathcId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mathcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 timeId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 playerId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSHRankBar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSHRankBar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mathcId = 1;
  if (this->mathcid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mathcid(), target);
  }

  // int32 timeId = 2;
  if (this->timeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_timeid(), target);
  }

  // int32 playerId = 3;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSHRankBar)
  return target;
}

size_t CSHRankBar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSHRankBar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 mathcId = 1;
  if (this->mathcid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mathcid());
  }

  // int32 timeId = 2;
  if (this->timeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timeid());
  }

  // int32 playerId = 3;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSHRankBar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSHRankBar)
  GOOGLE_DCHECK_NE(&from, this);
  const CSHRankBar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSHRankBar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSHRankBar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSHRankBar)
    MergeFrom(*source);
  }
}

void CSHRankBar::MergeFrom(const CSHRankBar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSHRankBar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mathcid() != 0) {
    _internal_set_mathcid(from._internal_mathcid());
  }
  if (from.timeid() != 0) {
    _internal_set_timeid(from._internal_timeid());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
}

void CSHRankBar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSHRankBar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSHRankBar::CopyFrom(const CSHRankBar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSHRankBar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSHRankBar::IsInitialized() const {
  return true;
}

void CSHRankBar::InternalSwap(CSHRankBar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSHRankBar, playerid_)
      + sizeof(CSHRankBar::playerid_)
      - PROTOBUF_FIELD_OFFSET(CSHRankBar, mathcid_)>(
          reinterpret_cast<char*>(&mathcid_),
          reinterpret_cast<char*>(&other->mathcid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSHRankBar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCHRankBar::_Internal {
 public:
};

SCHRankBar::SCHRankBar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCHRankBar)
}
SCHRankBar::SCHRankBar(const SCHRankBar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&idx_, &from.idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&reaward_) -
    reinterpret_cast<char*>(&idx_)) + sizeof(reaward_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCHRankBar)
}

void SCHRankBar::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&reaward_) -
      reinterpret_cast<char*>(&idx_)) + sizeof(reaward_));
}

SCHRankBar::~SCHRankBar() {
  // @@protoc_insertion_point(destructor:BYDLD.SCHRankBar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCHRankBar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCHRankBar::ArenaDtor(void* object) {
  SCHRankBar* _this = reinterpret_cast< SCHRankBar* >(object);
  (void)_this;
}
void SCHRankBar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCHRankBar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCHRankBar& SCHRankBar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCHRankBar_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCHRankBar::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCHRankBar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reaward_) -
      reinterpret_cast<char*>(&idx_)) + sizeof(reaward_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCHRankBar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reaward = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          reaward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCHRankBar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCHRankBar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_idx(), target);
  }

  // int32 total = 2;
  if (this->total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total(), target);
  }

  // int32 reaward = 3;
  if (this->reaward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_reaward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCHRankBar)
  return target;
}

size_t SCHRankBar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCHRankBar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_idx());
  }

  // int32 total = 2;
  if (this->total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total());
  }

  // int32 reaward = 3;
  if (this->reaward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reaward());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCHRankBar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCHRankBar)
  GOOGLE_DCHECK_NE(&from, this);
  const SCHRankBar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCHRankBar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCHRankBar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCHRankBar)
    MergeFrom(*source);
  }
}

void SCHRankBar::MergeFrom(const SCHRankBar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCHRankBar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
  if (from.total() != 0) {
    _internal_set_total(from._internal_total());
  }
  if (from.reaward() != 0) {
    _internal_set_reaward(from._internal_reaward());
  }
}

void SCHRankBar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCHRankBar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCHRankBar::CopyFrom(const SCHRankBar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCHRankBar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCHRankBar::IsInitialized() const {
  return true;
}

void SCHRankBar::InternalSwap(SCHRankBar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCHRankBar, reaward_)
      + sizeof(SCHRankBar::reaward_)
      - PROTOBUF_FIELD_OFFSET(SCHRankBar, idx_)>(
          reinterpret_cast<char*>(&idx_),
          reinterpret_cast<char*>(&other->idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCHRankBar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RealRank::_Internal {
 public:
};

RealRank::RealRank(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  goods_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.RealRank)
}
RealRank::RealRank(const RealRank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      goods_(from.goods_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_icon().empty()) {
    icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&idx_, &from.idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&idx_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.RealRank)
}

void RealRank::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RealRank_BYDLD_2eproto.base);
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&idx_)) + sizeof(score_));
}

RealRank::~RealRank() {
  // @@protoc_insertion_point(destructor:BYDLD.RealRank)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RealRank::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RealRank::ArenaDtor(void* object) {
  RealRank* _this = reinterpret_cast< RealRank* >(object);
  (void)_this;
}
void RealRank::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RealRank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RealRank& RealRank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RealRank_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void RealRank::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.RealRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  goods_.Clear();
  icon_.ClearToEmpty();
  name_.ClearToEmpty();
  ::memset(&idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&idx_)) + sizeof(score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RealRank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string icon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.RealRank.icon"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.RealRank.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.Object3 goods = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_goods(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RealRank::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.RealRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_idx(), target);
  }

  // string icon = 2;
  if (this->icon().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.RealRank.icon");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_icon(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.RealRank.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // int32 score = 4;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_score(), target);
  }

  // repeated .BYDLD.Object3 goods = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_goods_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_goods(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.RealRank)
  return target;
}

size_t RealRank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.RealRank)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.Object3 goods = 5;
  total_size += 1UL * this->_internal_goods_size();
  for (const auto& msg : this->goods_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string icon = 2;
  if (this->icon().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icon());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 idx = 1;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_idx());
  }

  // int32 score = 4;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RealRank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.RealRank)
  GOOGLE_DCHECK_NE(&from, this);
  const RealRank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RealRank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.RealRank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.RealRank)
    MergeFrom(*source);
  }
}

void RealRank::MergeFrom(const RealRank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.RealRank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  goods_.MergeFrom(from.goods_);
  if (from.icon().size() > 0) {
    _internal_set_icon(from._internal_icon());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
}

void RealRank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.RealRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealRank::CopyFrom(const RealRank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.RealRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealRank::IsInitialized() const {
  return true;
}

void RealRank::InternalSwap(RealRank* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  goods_.InternalSwap(&other->goods_);
  icon_.Swap(&other->icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RealRank, score_)
      + sizeof(RealRank::score_)
      - PROTOBUF_FIELD_OFFSET(RealRank, idx_)>(
          reinterpret_cast<char*>(&idx_),
          reinterpret_cast<char*>(&other->idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RealRank::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSHRealRank::_Internal {
 public:
};

CSHRealRank::CSHRealRank(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSHRealRank)
}
CSHRealRank::CSHRealRank(const CSHRealRank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(timeid_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSHRealRank)
}

void CSHRealRank::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&timeid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(timeid_));
}

CSHRealRank::~CSHRealRank() {
  // @@protoc_insertion_point(destructor:BYDLD.CSHRealRank)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSHRealRank::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSHRealRank::ArenaDtor(void* object) {
  CSHRealRank* _this = reinterpret_cast< CSHRealRank* >(object);
  (void)_this;
}
void CSHRealRank::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSHRealRank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSHRealRank& CSHRealRank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSHRealRank_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSHRealRank::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSHRealRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(timeid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSHRealRank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mathcId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mathcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 timeId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSHRealRank::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSHRealRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // int32 mathcId = 2;
  if (this->mathcid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mathcid(), target);
  }

  // int32 timeId = 3;
  if (this->timeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_timeid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSHRealRank)
  return target;
}

size_t CSHRealRank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSHRealRank)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  // int32 mathcId = 2;
  if (this->mathcid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mathcid());
  }

  // int32 timeId = 3;
  if (this->timeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timeid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSHRealRank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSHRealRank)
  GOOGLE_DCHECK_NE(&from, this);
  const CSHRealRank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSHRealRank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSHRealRank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSHRealRank)
    MergeFrom(*source);
  }
}

void CSHRealRank::MergeFrom(const CSHRealRank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSHRealRank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.mathcid() != 0) {
    _internal_set_mathcid(from._internal_mathcid());
  }
  if (from.timeid() != 0) {
    _internal_set_timeid(from._internal_timeid());
  }
}

void CSHRealRank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSHRealRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSHRealRank::CopyFrom(const CSHRealRank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSHRealRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSHRealRank::IsInitialized() const {
  return true;
}

void CSHRealRank::InternalSwap(CSHRealRank* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSHRealRank, timeid_)
      + sizeof(CSHRealRank::timeid_)
      - PROTOBUF_FIELD_OFFSET(CSHRealRank, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSHRealRank::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCHRealRank::_Internal {
 public:
  static const ::BYDLD::RealRank& onself_rank(const SCHRealRank* msg);
};

const ::BYDLD::RealRank&
SCHRealRank::_Internal::onself_rank(const SCHRealRank* msg) {
  return *msg->onself_rank_;
}
SCHRealRank::SCHRealRank(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  real_rank_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCHRealRank)
}
SCHRealRank::SCHRealRank(const SCHRealRank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      real_rank_(from.real_rank_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_onself_rank()) {
    onself_rank_ = new ::BYDLD::RealRank(*from.onself_rank_);
  } else {
    onself_rank_ = nullptr;
  }
  ::memcpy(&total_num_, &from.total_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&vip_addition_) -
    reinterpret_cast<char*>(&total_num_)) + sizeof(vip_addition_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCHRealRank)
}

void SCHRealRank::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCHRealRank_BYDLD_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&onself_rank_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&vip_addition_) -
      reinterpret_cast<char*>(&onself_rank_)) + sizeof(vip_addition_));
}

SCHRealRank::~SCHRealRank() {
  // @@protoc_insertion_point(destructor:BYDLD.SCHRealRank)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCHRealRank::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete onself_rank_;
}

void SCHRealRank::ArenaDtor(void* object) {
  SCHRealRank* _this = reinterpret_cast< SCHRealRank* >(object);
  (void)_this;
}
void SCHRealRank::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCHRealRank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCHRealRank& SCHRealRank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCHRealRank_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCHRealRank::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCHRealRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  real_rank_.Clear();
  if (GetArena() == nullptr && onself_rank_ != nullptr) {
    delete onself_rank_;
  }
  onself_rank_ = nullptr;
  ::memset(&total_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vip_addition_) -
      reinterpret_cast<char*>(&total_num_)) + sizeof(vip_addition_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCHRealRank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.RealRank real_rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_real_rank(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .BYDLD.RealRank onself_rank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_onself_rank(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score_addition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          score_addition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reward_addition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          reward_addition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 card_addition = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          card_addition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vip_addition = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          vip_addition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCHRealRank::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCHRealRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.RealRank real_rank = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_real_rank_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_real_rank(i), target, stream);
  }

  // .BYDLD.RealRank onself_rank = 2;
  if (this->has_onself_rank()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::onself_rank(this), target, stream);
  }

  // int32 total_num = 3;
  if (this->total_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_num(), target);
  }

  // int32 score_addition = 4;
  if (this->score_addition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_score_addition(), target);
  }

  // int32 reward_addition = 5;
  if (this->reward_addition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_reward_addition(), target);
  }

  // int32 card_addition = 6;
  if (this->card_addition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_card_addition(), target);
  }

  // int32 vip_addition = 7;
  if (this->vip_addition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_vip_addition(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCHRealRank)
  return target;
}

size_t SCHRealRank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCHRealRank)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.RealRank real_rank = 1;
  total_size += 1UL * this->_internal_real_rank_size();
  for (const auto& msg : this->real_rank_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .BYDLD.RealRank onself_rank = 2;
  if (this->has_onself_rank()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *onself_rank_);
  }

  // int32 total_num = 3;
  if (this->total_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_num());
  }

  // int32 score_addition = 4;
  if (this->score_addition() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score_addition());
  }

  // int32 reward_addition = 5;
  if (this->reward_addition() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reward_addition());
  }

  // int32 card_addition = 6;
  if (this->card_addition() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_card_addition());
  }

  // int32 vip_addition = 7;
  if (this->vip_addition() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vip_addition());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCHRealRank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCHRealRank)
  GOOGLE_DCHECK_NE(&from, this);
  const SCHRealRank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCHRealRank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCHRealRank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCHRealRank)
    MergeFrom(*source);
  }
}

void SCHRealRank::MergeFrom(const SCHRealRank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCHRealRank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  real_rank_.MergeFrom(from.real_rank_);
  if (from.has_onself_rank()) {
    _internal_mutable_onself_rank()->::BYDLD::RealRank::MergeFrom(from._internal_onself_rank());
  }
  if (from.total_num() != 0) {
    _internal_set_total_num(from._internal_total_num());
  }
  if (from.score_addition() != 0) {
    _internal_set_score_addition(from._internal_score_addition());
  }
  if (from.reward_addition() != 0) {
    _internal_set_reward_addition(from._internal_reward_addition());
  }
  if (from.card_addition() != 0) {
    _internal_set_card_addition(from._internal_card_addition());
  }
  if (from.vip_addition() != 0) {
    _internal_set_vip_addition(from._internal_vip_addition());
  }
}

void SCHRealRank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCHRealRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCHRealRank::CopyFrom(const SCHRealRank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCHRealRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCHRealRank::IsInitialized() const {
  return true;
}

void SCHRealRank::InternalSwap(SCHRealRank* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  real_rank_.InternalSwap(&other->real_rank_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCHRealRank, vip_addition_)
      + sizeof(SCHRealRank::vip_addition_)
      - PROTOBUF_FIELD_OFFSET(SCHRealRank, onself_rank_)>(
          reinterpret_cast<char*>(&onself_rank_),
          reinterpret_cast<char*>(&other->onself_rank_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCHRealRank::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Reward::_Internal {
 public:
};

Reward::Reward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  goods_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.Reward)
}
Reward::Reward(const Reward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      goods_(from.goods_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lucky_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lucky().empty()) {
    lucky_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lucky(), 
      GetArena());
  }
  ::memcpy(&idxl_, &from.idxl_,
    static_cast<size_t>(reinterpret_cast<char*>(&idxr_) -
    reinterpret_cast<char*>(&idxl_)) + sizeof(idxr_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.Reward)
}

void Reward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Reward_BYDLD_2eproto.base);
  lucky_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&idxl_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&idxr_) -
      reinterpret_cast<char*>(&idxl_)) + sizeof(idxr_));
}

Reward::~Reward() {
  // @@protoc_insertion_point(destructor:BYDLD.Reward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Reward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  lucky_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Reward::ArenaDtor(void* object) {
  Reward* _this = reinterpret_cast< Reward* >(object);
  (void)_this;
}
void Reward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Reward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Reward& Reward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Reward_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void Reward::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.Reward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  goods_.Clear();
  lucky_.ClearToEmpty();
  ::memset(&idxl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idxr_) -
      reinterpret_cast<char*>(&idxl_)) + sizeof(idxr_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Reward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 idxl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idxl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 idxr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          idxr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.Object3 goods = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_goods(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string lucky = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_lucky();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.Reward.lucky"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Reward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.Reward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idxl = 1;
  if (this->idxl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_idxl(), target);
  }

  // int32 idxr = 2;
  if (this->idxr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_idxr(), target);
  }

  // repeated .BYDLD.Object3 goods = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_goods_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_goods(i), target, stream);
  }

  // string lucky = 4;
  if (this->lucky().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lucky().data(), static_cast<int>(this->_internal_lucky().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.Reward.lucky");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_lucky(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.Reward)
  return target;
}

size_t Reward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.Reward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.Object3 goods = 3;
  total_size += 1UL * this->_internal_goods_size();
  for (const auto& msg : this->goods_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string lucky = 4;
  if (this->lucky().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lucky());
  }

  // int32 idxl = 1;
  if (this->idxl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_idxl());
  }

  // int32 idxr = 2;
  if (this->idxr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_idxr());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Reward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.Reward)
  GOOGLE_DCHECK_NE(&from, this);
  const Reward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Reward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.Reward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.Reward)
    MergeFrom(*source);
  }
}

void Reward::MergeFrom(const Reward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.Reward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  goods_.MergeFrom(from.goods_);
  if (from.lucky().size() > 0) {
    _internal_set_lucky(from._internal_lucky());
  }
  if (from.idxl() != 0) {
    _internal_set_idxl(from._internal_idxl());
  }
  if (from.idxr() != 0) {
    _internal_set_idxr(from._internal_idxr());
  }
}

void Reward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.Reward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reward::CopyFrom(const Reward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.Reward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reward::IsInitialized() const {
  return true;
}

void Reward::InternalSwap(Reward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  goods_.InternalSwap(&other->goods_);
  lucky_.Swap(&other->lucky_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Reward, idxr_)
      + sizeof(Reward::idxr_)
      - PROTOBUF_FIELD_OFFSET(Reward, idxl_)>(
          reinterpret_cast<char*>(&idxl_),
          reinterpret_cast<char*>(&other->idxl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Reward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSHReward::_Internal {
 public:
};

CSHReward::CSHReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSHReward)
}
CSHReward::CSHReward(const CSHReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mathcid_, &from.mathcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeid_) -
    reinterpret_cast<char*>(&mathcid_)) + sizeof(timeid_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSHReward)
}

void CSHReward::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&mathcid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&timeid_) -
      reinterpret_cast<char*>(&mathcid_)) + sizeof(timeid_));
}

CSHReward::~CSHReward() {
  // @@protoc_insertion_point(destructor:BYDLD.CSHReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSHReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSHReward::ArenaDtor(void* object) {
  CSHReward* _this = reinterpret_cast< CSHReward* >(object);
  (void)_this;
}
void CSHReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSHReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSHReward& CSHReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSHReward_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSHReward::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSHReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mathcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeid_) -
      reinterpret_cast<char*>(&mathcid_)) + sizeof(timeid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSHReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mathcId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mathcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 timeId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSHReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSHReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mathcId = 1;
  if (this->mathcid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mathcid(), target);
  }

  // int32 timeId = 2;
  if (this->timeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_timeid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSHReward)
  return target;
}

size_t CSHReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSHReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 mathcId = 1;
  if (this->mathcid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mathcid());
  }

  // int32 timeId = 2;
  if (this->timeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timeid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSHReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSHReward)
  GOOGLE_DCHECK_NE(&from, this);
  const CSHReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSHReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSHReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSHReward)
    MergeFrom(*source);
  }
}

void CSHReward::MergeFrom(const CSHReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSHReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mathcid() != 0) {
    _internal_set_mathcid(from._internal_mathcid());
  }
  if (from.timeid() != 0) {
    _internal_set_timeid(from._internal_timeid());
  }
}

void CSHReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSHReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSHReward::CopyFrom(const CSHReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSHReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSHReward::IsInitialized() const {
  return true;
}

void CSHReward::InternalSwap(CSHReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSHReward, timeid_)
      + sizeof(CSHReward::timeid_)
      - PROTOBUF_FIELD_OFFSET(CSHReward, mathcid_)>(
          reinterpret_cast<char*>(&mathcid_),
          reinterpret_cast<char*>(&other->mathcid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSHReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCHReward::_Internal {
 public:
};

SCHReward::SCHReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCHReward)
}
SCHReward::SCHReward(const SCHReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rewards_ = from.rewards_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCHReward)
}

void SCHReward::SharedCtor() {
  rewards_ = 0;
}

SCHReward::~SCHReward() {
  // @@protoc_insertion_point(destructor:BYDLD.SCHReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCHReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCHReward::ArenaDtor(void* object) {
  SCHReward* _this = reinterpret_cast< SCHReward* >(object);
  (void)_this;
}
void SCHReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCHReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCHReward& SCHReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCHReward_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCHReward::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCHReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rewards_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCHReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 rewards = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rewards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCHReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCHReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rewards = 1;
  if (this->rewards() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rewards(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCHReward)
  return target;
}

size_t SCHReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCHReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 rewards = 1;
  if (this->rewards() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rewards());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCHReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCHReward)
  GOOGLE_DCHECK_NE(&from, this);
  const SCHReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCHReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCHReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCHReward)
    MergeFrom(*source);
  }
}

void SCHReward::MergeFrom(const SCHReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCHReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rewards() != 0) {
    _internal_set_rewards(from._internal_rewards());
  }
}

void SCHReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCHReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCHReward::CopyFrom(const SCHReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCHReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCHReward::IsInitialized() const {
  return true;
}

void SCHReward::InternalSwap(SCHReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rewards_, other->rewards_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCHReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSHMatchInfoTip::_Internal {
 public:
};

CSHMatchInfoTip::CSHMatchInfoTip(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSHMatchInfoTip)
}
CSHMatchInfoTip::CSHMatchInfoTip(const CSHMatchInfoTip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSHMatchInfoTip)
}

void CSHMatchInfoTip::SharedCtor() {
}

CSHMatchInfoTip::~CSHMatchInfoTip() {
  // @@protoc_insertion_point(destructor:BYDLD.CSHMatchInfoTip)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSHMatchInfoTip::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSHMatchInfoTip::ArenaDtor(void* object) {
  CSHMatchInfoTip* _this = reinterpret_cast< CSHMatchInfoTip* >(object);
  (void)_this;
}
void CSHMatchInfoTip::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSHMatchInfoTip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSHMatchInfoTip& CSHMatchInfoTip::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSHMatchInfoTip_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSHMatchInfoTip::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSHMatchInfoTip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSHMatchInfoTip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSHMatchInfoTip::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSHMatchInfoTip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSHMatchInfoTip)
  return target;
}

size_t CSHMatchInfoTip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSHMatchInfoTip)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSHMatchInfoTip::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSHMatchInfoTip)
  GOOGLE_DCHECK_NE(&from, this);
  const CSHMatchInfoTip* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSHMatchInfoTip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSHMatchInfoTip)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSHMatchInfoTip)
    MergeFrom(*source);
  }
}

void CSHMatchInfoTip::MergeFrom(const CSHMatchInfoTip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSHMatchInfoTip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSHMatchInfoTip::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSHMatchInfoTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSHMatchInfoTip::CopyFrom(const CSHMatchInfoTip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSHMatchInfoTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSHMatchInfoTip::IsInitialized() const {
  return true;
}

void CSHMatchInfoTip::InternalSwap(CSHMatchInfoTip* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSHMatchInfoTip::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MatchInfoTip::_Internal {
 public:
};

MatchInfoTip::MatchInfoTip(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  goods_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.MatchInfoTip)
}
MatchInfoTip::MatchInfoTip(const MatchInfoTip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      goods_(from.goods_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_time().empty()) {
    time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_time(), 
      GetArena());
  }
  mathcid_ = from.mathcid_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.MatchInfoTip)
}

void MatchInfoTip::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchInfoTip_BYDLD_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mathcid_ = 0;
}

MatchInfoTip::~MatchInfoTip() {
  // @@protoc_insertion_point(destructor:BYDLD.MatchInfoTip)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchInfoTip::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MatchInfoTip::ArenaDtor(void* object) {
  MatchInfoTip* _this = reinterpret_cast< MatchInfoTip* >(object);
  (void)_this;
}
void MatchInfoTip::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchInfoTip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchInfoTip& MatchInfoTip::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchInfoTip_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void MatchInfoTip::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.MatchInfoTip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  goods_.Clear();
  name_.ClearToEmpty();
  time_.ClearToEmpty();
  mathcid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchInfoTip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.MatchInfoTip.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mathcId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mathcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.MatchInfoTip.time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.Object3 goods = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_goods(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchInfoTip::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.MatchInfoTip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.MatchInfoTip.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 mathcId = 2;
  if (this->mathcid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mathcid(), target);
  }

  // string time = 3;
  if (this->time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.MatchInfoTip.time");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_time(), target);
  }

  // repeated .BYDLD.Object3 goods = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_goods_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_goods(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.MatchInfoTip)
  return target;
}

size_t MatchInfoTip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.MatchInfoTip)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.Object3 goods = 4;
  total_size += 1UL * this->_internal_goods_size();
  for (const auto& msg : this->goods_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string time = 3;
  if (this->time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time());
  }

  // int32 mathcId = 2;
  if (this->mathcid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mathcid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchInfoTip::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.MatchInfoTip)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchInfoTip* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchInfoTip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.MatchInfoTip)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.MatchInfoTip)
    MergeFrom(*source);
  }
}

void MatchInfoTip::MergeFrom(const MatchInfoTip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.MatchInfoTip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  goods_.MergeFrom(from.goods_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.time().size() > 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.mathcid() != 0) {
    _internal_set_mathcid(from._internal_mathcid());
  }
}

void MatchInfoTip::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.MatchInfoTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchInfoTip::CopyFrom(const MatchInfoTip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.MatchInfoTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchInfoTip::IsInitialized() const {
  return true;
}

void MatchInfoTip::InternalSwap(MatchInfoTip* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  goods_.InternalSwap(&other->goods_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  time_.Swap(&other->time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(mathcid_, other->mathcid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchInfoTip::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCHMatchInfoTip::_Internal {
 public:
};

SCHMatchInfoTip::SCHMatchInfoTip(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  matchtips_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCHMatchInfoTip)
}
SCHMatchInfoTip::SCHMatchInfoTip(const SCHMatchInfoTip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      matchtips_(from.matchtips_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCHMatchInfoTip)
}

void SCHMatchInfoTip::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCHMatchInfoTip_BYDLD_2eproto.base);
}

SCHMatchInfoTip::~SCHMatchInfoTip() {
  // @@protoc_insertion_point(destructor:BYDLD.SCHMatchInfoTip)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCHMatchInfoTip::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCHMatchInfoTip::ArenaDtor(void* object) {
  SCHMatchInfoTip* _this = reinterpret_cast< SCHMatchInfoTip* >(object);
  (void)_this;
}
void SCHMatchInfoTip::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCHMatchInfoTip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCHMatchInfoTip& SCHMatchInfoTip::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCHMatchInfoTip_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCHMatchInfoTip::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCHMatchInfoTip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matchtips_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCHMatchInfoTip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.MatchInfoTip matchTips = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matchtips(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCHMatchInfoTip::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCHMatchInfoTip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.MatchInfoTip matchTips = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_matchtips_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_matchtips(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCHMatchInfoTip)
  return target;
}

size_t SCHMatchInfoTip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCHMatchInfoTip)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.MatchInfoTip matchTips = 1;
  total_size += 1UL * this->_internal_matchtips_size();
  for (const auto& msg : this->matchtips_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCHMatchInfoTip::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCHMatchInfoTip)
  GOOGLE_DCHECK_NE(&from, this);
  const SCHMatchInfoTip* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCHMatchInfoTip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCHMatchInfoTip)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCHMatchInfoTip)
    MergeFrom(*source);
  }
}

void SCHMatchInfoTip::MergeFrom(const SCHMatchInfoTip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCHMatchInfoTip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matchtips_.MergeFrom(from.matchtips_);
}

void SCHMatchInfoTip::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCHMatchInfoTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCHMatchInfoTip::CopyFrom(const SCHMatchInfoTip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCHMatchInfoTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCHMatchInfoTip::IsInitialized() const {
  return true;
}

void SCHMatchInfoTip::InternalSwap(SCHMatchInfoTip* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  matchtips_.InternalSwap(&other->matchtips_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCHMatchInfoTip::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSHMatchInfo::_Internal {
 public:
};

CSHMatchInfo::CSHMatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSHMatchInfo)
}
CSHMatchInfo::CSHMatchInfo(const CSHMatchInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSHMatchInfo)
}

void CSHMatchInfo::SharedCtor() {
  playerid_ = 0;
}

CSHMatchInfo::~CSHMatchInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.CSHMatchInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSHMatchInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSHMatchInfo::ArenaDtor(void* object) {
  CSHMatchInfo* _this = reinterpret_cast< CSHMatchInfo* >(object);
  (void)_this;
}
void CSHMatchInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSHMatchInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSHMatchInfo& CSHMatchInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSHMatchInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSHMatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSHMatchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSHMatchInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSHMatchInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSHMatchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSHMatchInfo)
  return target;
}

size_t CSHMatchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSHMatchInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSHMatchInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSHMatchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSHMatchInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSHMatchInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSHMatchInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSHMatchInfo)
    MergeFrom(*source);
  }
}

void CSHMatchInfo::MergeFrom(const CSHMatchInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSHMatchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
}

void CSHMatchInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSHMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSHMatchInfo::CopyFrom(const CSHMatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSHMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSHMatchInfo::IsInitialized() const {
  return true;
}

void CSHMatchInfo::InternalSwap(CSHMatchInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(playerid_, other->playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSHMatchInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCHMatchInfo::_Internal {
 public:
};

SCHMatchInfo::SCHMatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCHMatchInfo)
}
SCHMatchInfo::SCHMatchInfo(const SCHMatchInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_time().empty()) {
    time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_time(), 
      GetArena());
  }
  ::memcpy(&mathcid_, &from.mathcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_) -
    reinterpret_cast<char*>(&mathcid_)) + sizeof(down_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCHMatchInfo)
}

void SCHMatchInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCHMatchInfo_BYDLD_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&mathcid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&down_) -
      reinterpret_cast<char*>(&mathcid_)) + sizeof(down_));
}

SCHMatchInfo::~SCHMatchInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.SCHMatchInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCHMatchInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SCHMatchInfo::ArenaDtor(void* object) {
  SCHMatchInfo* _this = reinterpret_cast< SCHMatchInfo* >(object);
  (void)_this;
}
void SCHMatchInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCHMatchInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCHMatchInfo& SCHMatchInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCHMatchInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCHMatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCHMatchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  time_.ClearToEmpty();
  ::memset(&mathcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_) -
      reinterpret_cast<char*>(&mathcid_)) + sizeof(down_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCHMatchInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.SCHMatchInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mathcId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mathcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 timeId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 down = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.SCHMatchInfo.time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCHMatchInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCHMatchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.SCHMatchInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 mathcId = 2;
  if (this->mathcid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mathcid(), target);
  }

  // int32 timeId = 3;
  if (this->timeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_timeid(), target);
  }

  // int32 status = 4;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_status(), target);
  }

  // int32 down = 5;
  if (this->down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_down(), target);
  }

  // string time = 6;
  if (this->time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.SCHMatchInfo.time");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCHMatchInfo)
  return target;
}

size_t SCHMatchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCHMatchInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string time = 6;
  if (this->time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time());
  }

  // int32 mathcId = 2;
  if (this->mathcid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mathcid());
  }

  // int32 timeId = 3;
  if (this->timeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timeid());
  }

  // int32 status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 down = 5;
  if (this->down() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_down());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCHMatchInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCHMatchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCHMatchInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCHMatchInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCHMatchInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCHMatchInfo)
    MergeFrom(*source);
  }
}

void SCHMatchInfo::MergeFrom(const SCHMatchInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCHMatchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.time().size() > 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.mathcid() != 0) {
    _internal_set_mathcid(from._internal_mathcid());
  }
  if (from.timeid() != 0) {
    _internal_set_timeid(from._internal_timeid());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.down() != 0) {
    _internal_set_down(from._internal_down());
  }
}

void SCHMatchInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCHMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCHMatchInfo::CopyFrom(const SCHMatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCHMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCHMatchInfo::IsInitialized() const {
  return true;
}

void SCHMatchInfo::InternalSwap(SCHMatchInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  time_.Swap(&other->time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCHMatchInfo, down_)
      + sizeof(SCHMatchInfo::down_)
      - PROTOBUF_FIELD_OFFSET(SCHMatchInfo, mathcid_)>(
          reinterpret_cast<char*>(&mathcid_),
          reinterpret_cast<char*>(&other->mathcid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCHMatchInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HistoryRank::_Internal {
 public:
};

HistoryRank::HistoryRank(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  match_goods_(arena),
  pack_goods_(arena),
  lucky_goods_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.HistoryRank)
}
HistoryRank::HistoryRank(const HistoryRank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      match_goods_(from.match_goods_),
      pack_goods_(from.pack_goods_),
      lucky_goods_(from.lucky_goods_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_icon().empty()) {
    icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&idx_, &from.idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&addition_) -
    reinterpret_cast<char*>(&idx_)) + sizeof(addition_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.HistoryRank)
}

void HistoryRank::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HistoryRank_BYDLD_2eproto.base);
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&addition_) -
      reinterpret_cast<char*>(&idx_)) + sizeof(addition_));
}

HistoryRank::~HistoryRank() {
  // @@protoc_insertion_point(destructor:BYDLD.HistoryRank)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HistoryRank::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HistoryRank::ArenaDtor(void* object) {
  HistoryRank* _this = reinterpret_cast< HistoryRank* >(object);
  (void)_this;
}
void HistoryRank::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HistoryRank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HistoryRank& HistoryRank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HistoryRank_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void HistoryRank::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.HistoryRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_goods_.Clear();
  pack_goods_.Clear();
  lucky_goods_.Clear();
  icon_.ClearToEmpty();
  name_.ClearToEmpty();
  ::memset(&idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&addition_) -
      reinterpret_cast<char*>(&idx_)) + sizeof(addition_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistoryRank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string icon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.HistoryRank.icon"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.HistoryRank.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 addition_source = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          addition_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 addition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          addition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.Object3 match_goods = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_match_goods(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.Object3 pack_goods = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pack_goods(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.Object3 lucky_goods = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lucky_goods(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HistoryRank::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.HistoryRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_idx(), target);
  }

  // string icon = 2;
  if (this->icon().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.HistoryRank.icon");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_icon(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.HistoryRank.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // int32 addition_source = 4;
  if (this->addition_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_addition_source(), target);
  }

  // int32 addition = 5;
  if (this->addition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_addition(), target);
  }

  // repeated .BYDLD.Object3 match_goods = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_match_goods_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_match_goods(i), target, stream);
  }

  // repeated .BYDLD.Object3 pack_goods = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pack_goods_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_pack_goods(i), target, stream);
  }

  // repeated .BYDLD.Object3 lucky_goods = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lucky_goods_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_lucky_goods(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.HistoryRank)
  return target;
}

size_t HistoryRank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.HistoryRank)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.Object3 match_goods = 6;
  total_size += 1UL * this->_internal_match_goods_size();
  for (const auto& msg : this->match_goods_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .BYDLD.Object3 pack_goods = 7;
  total_size += 1UL * this->_internal_pack_goods_size();
  for (const auto& msg : this->pack_goods_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .BYDLD.Object3 lucky_goods = 8;
  total_size += 1UL * this->_internal_lucky_goods_size();
  for (const auto& msg : this->lucky_goods_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string icon = 2;
  if (this->icon().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icon());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 idx = 1;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_idx());
  }

  // int32 addition_source = 4;
  if (this->addition_source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_addition_source());
  }

  // int32 addition = 5;
  if (this->addition() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_addition());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoryRank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.HistoryRank)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoryRank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HistoryRank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.HistoryRank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.HistoryRank)
    MergeFrom(*source);
  }
}

void HistoryRank::MergeFrom(const HistoryRank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.HistoryRank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  match_goods_.MergeFrom(from.match_goods_);
  pack_goods_.MergeFrom(from.pack_goods_);
  lucky_goods_.MergeFrom(from.lucky_goods_);
  if (from.icon().size() > 0) {
    _internal_set_icon(from._internal_icon());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
  if (from.addition_source() != 0) {
    _internal_set_addition_source(from._internal_addition_source());
  }
  if (from.addition() != 0) {
    _internal_set_addition(from._internal_addition());
  }
}

void HistoryRank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.HistoryRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryRank::CopyFrom(const HistoryRank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.HistoryRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryRank::IsInitialized() const {
  return true;
}

void HistoryRank::InternalSwap(HistoryRank* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  match_goods_.InternalSwap(&other->match_goods_);
  pack_goods_.InternalSwap(&other->pack_goods_);
  lucky_goods_.InternalSwap(&other->lucky_goods_);
  icon_.Swap(&other->icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistoryRank, addition_)
      + sizeof(HistoryRank::addition_)
      - PROTOBUF_FIELD_OFFSET(HistoryRank, idx_)>(
          reinterpret_cast<char*>(&idx_),
          reinterpret_cast<char*>(&other->idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HistoryRank::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSHHistoryRank::_Internal {
 public:
};

CSHHistoryRank::CSHHistoryRank(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSHHistoryRank)
}
CSHHistoryRank::CSHHistoryRank(const CSHHistoryRank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&matchid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(matchid_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSHHistoryRank)
}

void CSHHistoryRank::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&matchid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(matchid_));
}

CSHHistoryRank::~CSHHistoryRank() {
  // @@protoc_insertion_point(destructor:BYDLD.CSHHistoryRank)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSHHistoryRank::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSHHistoryRank::ArenaDtor(void* object) {
  CSHHistoryRank* _this = reinterpret_cast< CSHHistoryRank* >(object);
  (void)_this;
}
void CSHHistoryRank::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSHHistoryRank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSHHistoryRank& CSHHistoryRank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSHHistoryRank_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSHHistoryRank::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSHHistoryRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(matchid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSHHistoryRank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 matchId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          matchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSHHistoryRank::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSHHistoryRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // int32 matchId = 2;
  if (this->matchid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_matchid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSHHistoryRank)
  return target;
}

size_t CSHHistoryRank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSHHistoryRank)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  // int32 matchId = 2;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_matchid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSHHistoryRank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSHHistoryRank)
  GOOGLE_DCHECK_NE(&from, this);
  const CSHHistoryRank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSHHistoryRank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSHHistoryRank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSHHistoryRank)
    MergeFrom(*source);
  }
}

void CSHHistoryRank::MergeFrom(const CSHHistoryRank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSHHistoryRank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.matchid() != 0) {
    _internal_set_matchid(from._internal_matchid());
  }
}

void CSHHistoryRank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSHHistoryRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSHHistoryRank::CopyFrom(const CSHHistoryRank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSHHistoryRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSHHistoryRank::IsInitialized() const {
  return true;
}

void CSHHistoryRank::InternalSwap(CSHHistoryRank* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSHHistoryRank, matchid_)
      + sizeof(CSHHistoryRank::matchid_)
      - PROTOBUF_FIELD_OFFSET(CSHHistoryRank, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSHHistoryRank::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCHHistoryRank::_Internal {
 public:
  static const ::BYDLD::HistoryRank& oneself_rank(const SCHHistoryRank* msg);
};

const ::BYDLD::HistoryRank&
SCHHistoryRank::_Internal::oneself_rank(const SCHHistoryRank* msg) {
  return *msg->oneself_rank_;
}
SCHHistoryRank::SCHHistoryRank(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rank_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCHHistoryRank)
}
SCHHistoryRank::SCHHistoryRank(const SCHHistoryRank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rank_list_(from.rank_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_oneself_rank()) {
    oneself_rank_ = new ::BYDLD::HistoryRank(*from.oneself_rank_);
  } else {
    oneself_rank_ = nullptr;
  }
  matchid_ = from.matchid_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCHHistoryRank)
}

void SCHHistoryRank::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCHHistoryRank_BYDLD_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&oneself_rank_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&matchid_) -
      reinterpret_cast<char*>(&oneself_rank_)) + sizeof(matchid_));
}

SCHHistoryRank::~SCHHistoryRank() {
  // @@protoc_insertion_point(destructor:BYDLD.SCHHistoryRank)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCHHistoryRank::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete oneself_rank_;
}

void SCHHistoryRank::ArenaDtor(void* object) {
  SCHHistoryRank* _this = reinterpret_cast< SCHHistoryRank* >(object);
  (void)_this;
}
void SCHHistoryRank::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCHHistoryRank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCHHistoryRank& SCHHistoryRank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCHHistoryRank_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCHHistoryRank::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCHHistoryRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rank_list_.Clear();
  if (GetArena() == nullptr && oneself_rank_ != nullptr) {
    delete oneself_rank_;
  }
  oneself_rank_ = nullptr;
  matchid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCHHistoryRank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 matchId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          matchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.HistoryRank rank_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rank_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .BYDLD.HistoryRank oneself_rank = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_oneself_rank(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCHHistoryRank::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCHHistoryRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 matchId = 1;
  if (this->matchid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_matchid(), target);
  }

  // repeated .BYDLD.HistoryRank rank_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rank_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_rank_list(i), target, stream);
  }

  // .BYDLD.HistoryRank oneself_rank = 3;
  if (this->has_oneself_rank()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::oneself_rank(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCHHistoryRank)
  return target;
}

size_t SCHHistoryRank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCHHistoryRank)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.HistoryRank rank_list = 2;
  total_size += 1UL * this->_internal_rank_list_size();
  for (const auto& msg : this->rank_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .BYDLD.HistoryRank oneself_rank = 3;
  if (this->has_oneself_rank()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oneself_rank_);
  }

  // int32 matchId = 1;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_matchid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCHHistoryRank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCHHistoryRank)
  GOOGLE_DCHECK_NE(&from, this);
  const SCHHistoryRank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCHHistoryRank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCHHistoryRank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCHHistoryRank)
    MergeFrom(*source);
  }
}

void SCHHistoryRank::MergeFrom(const SCHHistoryRank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCHHistoryRank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rank_list_.MergeFrom(from.rank_list_);
  if (from.has_oneself_rank()) {
    _internal_mutable_oneself_rank()->::BYDLD::HistoryRank::MergeFrom(from._internal_oneself_rank());
  }
  if (from.matchid() != 0) {
    _internal_set_matchid(from._internal_matchid());
  }
}

void SCHHistoryRank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCHHistoryRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCHHistoryRank::CopyFrom(const SCHHistoryRank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCHHistoryRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCHHistoryRank::IsInitialized() const {
  return true;
}

void SCHHistoryRank::InternalSwap(SCHHistoryRank* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rank_list_.InternalSwap(&other->rank_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCHHistoryRank, matchid_)
      + sizeof(SCHHistoryRank::matchid_)
      - PROTOBUF_FIELD_OFFSET(SCHHistoryRank, oneself_rank_)>(
          reinterpret_cast<char*>(&oneself_rank_),
          reinterpret_cast<char*>(&other->oneself_rank_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCHHistoryRank::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSHLuckyInfo::_Internal {
 public:
};

CSHLuckyInfo::CSHLuckyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSHLuckyInfo)
}
CSHLuckyInfo::CSHLuckyInfo(const CSHLuckyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  matchid_ = from.matchid_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSHLuckyInfo)
}

void CSHLuckyInfo::SharedCtor() {
  matchid_ = 0;
}

CSHLuckyInfo::~CSHLuckyInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.CSHLuckyInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSHLuckyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSHLuckyInfo::ArenaDtor(void* object) {
  CSHLuckyInfo* _this = reinterpret_cast< CSHLuckyInfo* >(object);
  (void)_this;
}
void CSHLuckyInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSHLuckyInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSHLuckyInfo& CSHLuckyInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSHLuckyInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSHLuckyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSHLuckyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matchid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSHLuckyInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 matchId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          matchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSHLuckyInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSHLuckyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 matchId = 1;
  if (this->matchid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_matchid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSHLuckyInfo)
  return target;
}

size_t CSHLuckyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSHLuckyInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 matchId = 1;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_matchid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSHLuckyInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSHLuckyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSHLuckyInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSHLuckyInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSHLuckyInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSHLuckyInfo)
    MergeFrom(*source);
  }
}

void CSHLuckyInfo::MergeFrom(const CSHLuckyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSHLuckyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.matchid() != 0) {
    _internal_set_matchid(from._internal_matchid());
  }
}

void CSHLuckyInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSHLuckyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSHLuckyInfo::CopyFrom(const CSHLuckyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSHLuckyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSHLuckyInfo::IsInitialized() const {
  return true;
}

void CSHLuckyInfo::InternalSwap(CSHLuckyInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(matchid_, other->matchid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSHLuckyInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LuckyInfo::_Internal {
 public:
};

LuckyInfo::LuckyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.LuckyInfo)
}
LuckyInfo::LuckyInfo(const LuckyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lrange_, &from.lrange_,
    static_cast<size_t>(reinterpret_cast<char*>(&rrange_) -
    reinterpret_cast<char*>(&lrange_)) + sizeof(rrange_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.LuckyInfo)
}

void LuckyInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&lrange_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&rrange_) -
      reinterpret_cast<char*>(&lrange_)) + sizeof(rrange_));
}

LuckyInfo::~LuckyInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.LuckyInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LuckyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LuckyInfo::ArenaDtor(void* object) {
  LuckyInfo* _this = reinterpret_cast< LuckyInfo* >(object);
  (void)_this;
}
void LuckyInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LuckyInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LuckyInfo& LuckyInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LuckyInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void LuckyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.LuckyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lrange_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rrange_) -
      reinterpret_cast<char*>(&lrange_)) + sizeof(rrange_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LuckyInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 lRange = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          lrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rRange = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LuckyInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.LuckyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lRange = 1;
  if (this->lrange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_lrange(), target);
  }

  // int32 rRange = 2;
  if (this->rrange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rrange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.LuckyInfo)
  return target;
}

size_t LuckyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.LuckyInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 lRange = 1;
  if (this->lrange() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lrange());
  }

  // int32 rRange = 2;
  if (this->rrange() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rrange());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LuckyInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.LuckyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LuckyInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LuckyInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.LuckyInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.LuckyInfo)
    MergeFrom(*source);
  }
}

void LuckyInfo::MergeFrom(const LuckyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.LuckyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lrange() != 0) {
    _internal_set_lrange(from._internal_lrange());
  }
  if (from.rrange() != 0) {
    _internal_set_rrange(from._internal_rrange());
  }
}

void LuckyInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.LuckyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LuckyInfo::CopyFrom(const LuckyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.LuckyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LuckyInfo::IsInitialized() const {
  return true;
}

void LuckyInfo::InternalSwap(LuckyInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LuckyInfo, rrange_)
      + sizeof(LuckyInfo::rrange_)
      - PROTOBUF_FIELD_OFFSET(LuckyInfo, lrange_)>(
          reinterpret_cast<char*>(&lrange_),
          reinterpret_cast<char*>(&other->lrange_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LuckyInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCHLuckyInfo::_Internal {
 public:
};

SCHLuckyInfo::SCHLuckyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCHLuckyInfo)
}
SCHLuckyInfo::SCHLuckyInfo(const SCHLuckyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  matchid_ = from.matchid_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCHLuckyInfo)
}

void SCHLuckyInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCHLuckyInfo_BYDLD_2eproto.base);
  matchid_ = 0;
}

SCHLuckyInfo::~SCHLuckyInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.SCHLuckyInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCHLuckyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCHLuckyInfo::ArenaDtor(void* object) {
  SCHLuckyInfo* _this = reinterpret_cast< SCHLuckyInfo* >(object);
  (void)_this;
}
void SCHLuckyInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCHLuckyInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCHLuckyInfo& SCHLuckyInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCHLuckyInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCHLuckyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCHLuckyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  matchid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCHLuckyInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 matchId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          matchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.LuckyInfo data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCHLuckyInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCHLuckyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 matchId = 1;
  if (this->matchid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_matchid(), target);
  }

  // repeated .BYDLD.LuckyInfo data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCHLuckyInfo)
  return target;
}

size_t SCHLuckyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCHLuckyInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.LuckyInfo data = 2;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 matchId = 1;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_matchid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCHLuckyInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCHLuckyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCHLuckyInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCHLuckyInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCHLuckyInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCHLuckyInfo)
    MergeFrom(*source);
  }
}

void SCHLuckyInfo::MergeFrom(const SCHLuckyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCHLuckyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.matchid() != 0) {
    _internal_set_matchid(from._internal_matchid());
  }
}

void SCHLuckyInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCHLuckyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCHLuckyInfo::CopyFrom(const SCHLuckyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCHLuckyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCHLuckyInfo::IsInitialized() const {
  return true;
}

void SCHLuckyInfo::InternalSwap(SCHLuckyInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  swap(matchid_, other->matchid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCHLuckyInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AwardDetail::_Internal {
 public:
};

AwardDetail::AwardDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.AwardDetail)
}
AwardDetail::AwardDetail(const AwardDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick_name().empty()) {
    nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nick_name(), 
      GetArena());
  }
  photo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_photo().empty()) {
    photo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_photo(), 
      GetArena());
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&vip_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(vip_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.AwardDetail)
}

void AwardDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AwardDetail_BYDLD_2eproto.base);
  nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  photo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&vip_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(vip_));
}

AwardDetail::~AwardDetail() {
  // @@protoc_insertion_point(destructor:BYDLD.AwardDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AwardDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nick_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  photo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AwardDetail::ArenaDtor(void* object) {
  AwardDetail* _this = reinterpret_cast< AwardDetail* >(object);
  (void)_this;
}
void AwardDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AwardDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AwardDetail& AwardDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AwardDetail_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void AwardDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.AwardDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nick_name_.ClearToEmpty();
  photo_.ClearToEmpty();
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vip_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(vip_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AwardDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nums = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nums_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 period = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nick_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_nick_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.AwardDetail.nick_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string photo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_photo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.AwardDetail.photo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AwardDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.AwardDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int32 nums = 2;
  if (this->nums() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_nums(), target);
  }

  // int32 period = 3;
  if (this->period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_period(), target);
  }

  // int32 vip = 4;
  if (this->vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_vip(), target);
  }

  // string nick_name = 5;
  if (this->nick_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick_name().data(), static_cast<int>(this->_internal_nick_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.AwardDetail.nick_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_nick_name(), target);
  }

  // string photo = 6;
  if (this->photo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_photo().data(), static_cast<int>(this->_internal_photo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.AwardDetail.photo");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_photo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.AwardDetail)
  return target;
}

size_t AwardDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.AwardDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick_name = 5;
  if (this->nick_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick_name());
  }

  // string photo = 6;
  if (this->photo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_photo());
  }

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_id());
  }

  // int32 nums = 2;
  if (this->nums() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nums());
  }

  // int32 period = 3;
  if (this->period() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_period());
  }

  // int32 vip = 4;
  if (this->vip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AwardDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.AwardDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const AwardDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AwardDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.AwardDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.AwardDetail)
    MergeFrom(*source);
  }
}

void AwardDetail::MergeFrom(const AwardDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.AwardDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nick_name().size() > 0) {
    _internal_set_nick_name(from._internal_nick_name());
  }
  if (from.photo().size() > 0) {
    _internal_set_photo(from._internal_photo());
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.nums() != 0) {
    _internal_set_nums(from._internal_nums());
  }
  if (from.period() != 0) {
    _internal_set_period(from._internal_period());
  }
  if (from.vip() != 0) {
    _internal_set_vip(from._internal_vip());
  }
}

void AwardDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.AwardDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AwardDetail::CopyFrom(const AwardDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.AwardDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AwardDetail::IsInitialized() const {
  return true;
}

void AwardDetail::InternalSwap(AwardDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nick_name_.Swap(&other->nick_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  photo_.Swap(&other->photo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AwardDetail, vip_)
      + sizeof(AwardDetail::vip_)
      - PROTOBUF_FIELD_OFFSET(AwardDetail, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AwardDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCLuckyAwardNotify::_Internal {
 public:
};

SCLuckyAwardNotify::SCLuckyAwardNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  detail_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCLuckyAwardNotify)
}
SCLuckyAwardNotify::SCLuckyAwardNotify(const SCLuckyAwardNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      detail_(from.detail_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  award_type_ = from.award_type_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCLuckyAwardNotify)
}

void SCLuckyAwardNotify::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCLuckyAwardNotify_BYDLD_2eproto.base);
  award_type_ = 0;
}

SCLuckyAwardNotify::~SCLuckyAwardNotify() {
  // @@protoc_insertion_point(destructor:BYDLD.SCLuckyAwardNotify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCLuckyAwardNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCLuckyAwardNotify::ArenaDtor(void* object) {
  SCLuckyAwardNotify* _this = reinterpret_cast< SCLuckyAwardNotify* >(object);
  (void)_this;
}
void SCLuckyAwardNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCLuckyAwardNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCLuckyAwardNotify& SCLuckyAwardNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCLuckyAwardNotify_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCLuckyAwardNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCLuckyAwardNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detail_.Clear();
  award_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCLuckyAwardNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 award_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          award_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.AwardDetail detail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_detail(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCLuckyAwardNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCLuckyAwardNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 award_type = 1;
  if (this->award_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_award_type(), target);
  }

  // repeated .BYDLD.AwardDetail detail = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_detail_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_detail(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCLuckyAwardNotify)
  return target;
}

size_t SCLuckyAwardNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCLuckyAwardNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.AwardDetail detail = 2;
  total_size += 1UL * this->_internal_detail_size();
  for (const auto& msg : this->detail_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 award_type = 1;
  if (this->award_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_award_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCLuckyAwardNotify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCLuckyAwardNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const SCLuckyAwardNotify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCLuckyAwardNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCLuckyAwardNotify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCLuckyAwardNotify)
    MergeFrom(*source);
  }
}

void SCLuckyAwardNotify::MergeFrom(const SCLuckyAwardNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCLuckyAwardNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detail_.MergeFrom(from.detail_);
  if (from.award_type() != 0) {
    _internal_set_award_type(from._internal_award_type());
  }
}

void SCLuckyAwardNotify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCLuckyAwardNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCLuckyAwardNotify::CopyFrom(const SCLuckyAwardNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCLuckyAwardNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCLuckyAwardNotify::IsInitialized() const {
  return true;
}

void SCLuckyAwardNotify::InternalSwap(SCLuckyAwardNotify* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  detail_.InternalSwap(&other->detail_);
  swap(award_type_, other->award_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCLuckyAwardNotify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AwardProp::_Internal {
 public:
};

AwardProp::AwardProp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.AwardProp)
}
AwardProp::AwardProp(const AwardProp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&prop_id_, &from.prop_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&prop_id_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.AwardProp)
}

void AwardProp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&prop_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&prop_id_)) + sizeof(num_));
}

AwardProp::~AwardProp() {
  // @@protoc_insertion_point(destructor:BYDLD.AwardProp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AwardProp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AwardProp::ArenaDtor(void* object) {
  AwardProp* _this = reinterpret_cast< AwardProp* >(object);
  (void)_this;
}
void AwardProp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AwardProp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AwardProp& AwardProp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AwardProp_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void AwardProp::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.AwardProp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&prop_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&prop_id_)) + sizeof(num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AwardProp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 prop_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          prop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AwardProp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.AwardProp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 prop_id = 1;
  if (this->prop_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_prop_id(), target);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.AwardProp)
  return target;
}

size_t AwardProp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.AwardProp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 prop_id = 1;
  if (this->prop_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prop_id());
  }

  // int32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AwardProp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.AwardProp)
  GOOGLE_DCHECK_NE(&from, this);
  const AwardProp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AwardProp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.AwardProp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.AwardProp)
    MergeFrom(*source);
  }
}

void AwardProp::MergeFrom(const AwardProp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.AwardProp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prop_id() != 0) {
    _internal_set_prop_id(from._internal_prop_id());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
}

void AwardProp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.AwardProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AwardProp::CopyFrom(const AwardProp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.AwardProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AwardProp::IsInitialized() const {
  return true;
}

void AwardProp::InternalSwap(AwardProp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AwardProp, num_)
      + sizeof(AwardProp::num_)
      - PROTOBUF_FIELD_OFFSET(AwardProp, prop_id_)>(
          reinterpret_cast<char*>(&prop_id_),
          reinterpret_cast<char*>(&other->prop_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AwardProp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LuckyTaskInfo::_Internal {
 public:
};

LuckyTaskInfo::LuckyTaskInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.LuckyTaskInfo)
}
LuckyTaskInfo::LuckyTaskInfo(const LuckyTaskInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_) -
    reinterpret_cast<char*>(&id_)) + sizeof(show_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.LuckyTaskInfo)
}

void LuckyTaskInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LuckyTaskInfo_BYDLD_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&show_) -
      reinterpret_cast<char*>(&id_)) + sizeof(show_));
}

LuckyTaskInfo::~LuckyTaskInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.LuckyTaskInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LuckyTaskInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LuckyTaskInfo::ArenaDtor(void* object) {
  LuckyTaskInfo* _this = reinterpret_cast< LuckyTaskInfo* >(object);
  (void)_this;
}
void LuckyTaskInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LuckyTaskInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LuckyTaskInfo& LuckyTaskInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LuckyTaskInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void LuckyTaskInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.LuckyTaskInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&show_) -
      reinterpret_cast<char*>(&id_)) + sizeof(show_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LuckyTaskInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.LuckyTaskInfo.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cur = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          cur_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool show = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          show_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LuckyTaskInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.LuckyTaskInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_status(), target);
  }

  // int32 score = 3;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_score(), target);
  }

  // string text = 4;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.LuckyTaskInfo.text");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_text(), target);
  }

  // int32 cur = 5;
  if (this->cur() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_cur(), target);
  }

  // int32 total = 6;
  if (this->total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_total(), target);
  }

  // bool show = 7;
  if (this->show() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_show(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.LuckyTaskInfo)
  return target;
}

size_t LuckyTaskInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.LuckyTaskInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 4;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 score = 3;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int32 cur = 5;
  if (this->cur() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur());
  }

  // int32 total = 6;
  if (this->total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total());
  }

  // bool show = 7;
  if (this->show() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LuckyTaskInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.LuckyTaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LuckyTaskInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LuckyTaskInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.LuckyTaskInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.LuckyTaskInfo)
    MergeFrom(*source);
  }
}

void LuckyTaskInfo::MergeFrom(const LuckyTaskInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.LuckyTaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {
    _internal_set_text(from._internal_text());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.cur() != 0) {
    _internal_set_cur(from._internal_cur());
  }
  if (from.total() != 0) {
    _internal_set_total(from._internal_total());
  }
  if (from.show() != 0) {
    _internal_set_show(from._internal_show());
  }
}

void LuckyTaskInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.LuckyTaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LuckyTaskInfo::CopyFrom(const LuckyTaskInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.LuckyTaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LuckyTaskInfo::IsInitialized() const {
  return true;
}

void LuckyTaskInfo::InternalSwap(LuckyTaskInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LuckyTaskInfo, show_)
      + sizeof(LuckyTaskInfo::show_)
      - PROTOBUF_FIELD_OFFSET(LuckyTaskInfo, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LuckyTaskInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSLuckyDrawInfo::_Internal {
 public:
};

CSLuckyDrawInfo::CSLuckyDrawInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSLuckyDrawInfo)
}
CSLuckyDrawInfo::CSLuckyDrawInfo(const CSLuckyDrawInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSLuckyDrawInfo)
}

void CSLuckyDrawInfo::SharedCtor() {
}

CSLuckyDrawInfo::~CSLuckyDrawInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.CSLuckyDrawInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSLuckyDrawInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSLuckyDrawInfo::ArenaDtor(void* object) {
  CSLuckyDrawInfo* _this = reinterpret_cast< CSLuckyDrawInfo* >(object);
  (void)_this;
}
void CSLuckyDrawInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSLuckyDrawInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSLuckyDrawInfo& CSLuckyDrawInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSLuckyDrawInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSLuckyDrawInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSLuckyDrawInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSLuckyDrawInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSLuckyDrawInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSLuckyDrawInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSLuckyDrawInfo)
  return target;
}

size_t CSLuckyDrawInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSLuckyDrawInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSLuckyDrawInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSLuckyDrawInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSLuckyDrawInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSLuckyDrawInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSLuckyDrawInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSLuckyDrawInfo)
    MergeFrom(*source);
  }
}

void CSLuckyDrawInfo::MergeFrom(const CSLuckyDrawInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSLuckyDrawInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSLuckyDrawInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSLuckyDrawInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLuckyDrawInfo::CopyFrom(const CSLuckyDrawInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSLuckyDrawInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLuckyDrawInfo::IsInitialized() const {
  return true;
}

void CSLuckyDrawInfo::InternalSwap(CSLuckyDrawInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSLuckyDrawInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCLuckyDrawInfo::_Internal {
 public:
};

SCLuckyDrawInfo::SCLuckyDrawInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hour_reward_(arena),
  day_reward_(arena),
  day_lucky_nums_(arena),
  task_info_(arena),
  hour_lucky_nums_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCLuckyDrawInfo)
}
SCLuckyDrawInfo::SCLuckyDrawInfo(const SCLuckyDrawInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hour_reward_(from.hour_reward_),
      day_reward_(from.day_reward_),
      day_lucky_nums_(from.day_lucky_nums_),
      task_info_(from.task_info_),
      hour_lucky_nums_(from.hour_lucky_nums_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hour_remain_sec_, &from.hour_remain_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_remain_sec_) -
    reinterpret_cast<char*>(&hour_remain_sec_)) + sizeof(next_remain_sec_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCLuckyDrawInfo)
}

void SCLuckyDrawInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCLuckyDrawInfo_BYDLD_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&hour_remain_sec_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&next_remain_sec_) -
      reinterpret_cast<char*>(&hour_remain_sec_)) + sizeof(next_remain_sec_));
}

SCLuckyDrawInfo::~SCLuckyDrawInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.SCLuckyDrawInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCLuckyDrawInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCLuckyDrawInfo::ArenaDtor(void* object) {
  SCLuckyDrawInfo* _this = reinterpret_cast< SCLuckyDrawInfo* >(object);
  (void)_this;
}
void SCLuckyDrawInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCLuckyDrawInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCLuckyDrawInfo& SCLuckyDrawInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCLuckyDrawInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCLuckyDrawInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCLuckyDrawInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hour_reward_.Clear();
  day_reward_.Clear();
  day_lucky_nums_.Clear();
  task_info_.Clear();
  hour_lucky_nums_.Clear();
  ::memset(&hour_remain_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_remain_sec_) -
      reinterpret_cast<char*>(&hour_remain_sec_)) + sizeof(next_remain_sec_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCLuckyDrawInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 hour_remain_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          hour_remain_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 day_remain_sec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          day_remain_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.AwardProp hour_reward = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hour_reward(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.AwardProp day_reward = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_day_reward(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 day_lucky_nums = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_day_lucky_nums(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_day_lucky_nums(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hour_total = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          hour_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 day_total = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          day_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hour_award_num = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          hour_award_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 day_award_num = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          day_award_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 next_start_tick = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          next_start_tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.LuckyTaskInfo task_info = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_task_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 exchange_score = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          exchange_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 next_remain_sec = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          next_remain_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 hour_lucky_nums = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_hour_lucky_nums(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120) {
          _internal_add_hour_lucky_nums(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCLuckyDrawInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCLuckyDrawInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hour_remain_sec = 1;
  if (this->hour_remain_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_hour_remain_sec(), target);
  }

  // int32 day_remain_sec = 2;
  if (this->day_remain_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_day_remain_sec(), target);
  }

  // repeated .BYDLD.AwardProp hour_reward = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hour_reward_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_hour_reward(i), target, stream);
  }

  // repeated .BYDLD.AwardProp day_reward = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_day_reward_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_day_reward(i), target, stream);
  }

  // repeated int32 day_lucky_nums = 5;
  {
    int byte_size = _day_lucky_nums_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_day_lucky_nums(), byte_size, target);
    }
  }

  // int32 score = 6;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_score(), target);
  }

  // int32 hour_total = 7;
  if (this->hour_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_hour_total(), target);
  }

  // int32 day_total = 8;
  if (this->day_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_day_total(), target);
  }

  // int32 hour_award_num = 9;
  if (this->hour_award_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_hour_award_num(), target);
  }

  // int32 day_award_num = 10;
  if (this->day_award_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_day_award_num(), target);
  }

  // int32 next_start_tick = 11;
  if (this->next_start_tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_next_start_tick(), target);
  }

  // repeated .BYDLD.LuckyTaskInfo task_info = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_task_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_task_info(i), target, stream);
  }

  // int32 exchange_score = 13;
  if (this->exchange_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_exchange_score(), target);
  }

  // int32 next_remain_sec = 14;
  if (this->next_remain_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_next_remain_sec(), target);
  }

  // repeated int32 hour_lucky_nums = 15;
  {
    int byte_size = _hour_lucky_nums_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          15, _internal_hour_lucky_nums(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCLuckyDrawInfo)
  return target;
}

size_t SCLuckyDrawInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCLuckyDrawInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.AwardProp hour_reward = 3;
  total_size += 1UL * this->_internal_hour_reward_size();
  for (const auto& msg : this->hour_reward_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .BYDLD.AwardProp day_reward = 4;
  total_size += 1UL * this->_internal_day_reward_size();
  for (const auto& msg : this->day_reward_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 day_lucky_nums = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->day_lucky_nums_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _day_lucky_nums_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .BYDLD.LuckyTaskInfo task_info = 12;
  total_size += 1UL * this->_internal_task_info_size();
  for (const auto& msg : this->task_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 hour_lucky_nums = 15;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->hour_lucky_nums_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _hour_lucky_nums_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 hour_remain_sec = 1;
  if (this->hour_remain_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hour_remain_sec());
  }

  // int32 day_remain_sec = 2;
  if (this->day_remain_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_day_remain_sec());
  }

  // int32 score = 6;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int32 hour_total = 7;
  if (this->hour_total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hour_total());
  }

  // int32 day_total = 8;
  if (this->day_total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_day_total());
  }

  // int32 hour_award_num = 9;
  if (this->hour_award_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hour_award_num());
  }

  // int32 day_award_num = 10;
  if (this->day_award_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_day_award_num());
  }

  // int32 next_start_tick = 11;
  if (this->next_start_tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_next_start_tick());
  }

  // int32 exchange_score = 13;
  if (this->exchange_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_exchange_score());
  }

  // int32 next_remain_sec = 14;
  if (this->next_remain_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_next_remain_sec());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCLuckyDrawInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCLuckyDrawInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCLuckyDrawInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCLuckyDrawInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCLuckyDrawInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCLuckyDrawInfo)
    MergeFrom(*source);
  }
}

void SCLuckyDrawInfo::MergeFrom(const SCLuckyDrawInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCLuckyDrawInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hour_reward_.MergeFrom(from.hour_reward_);
  day_reward_.MergeFrom(from.day_reward_);
  day_lucky_nums_.MergeFrom(from.day_lucky_nums_);
  task_info_.MergeFrom(from.task_info_);
  hour_lucky_nums_.MergeFrom(from.hour_lucky_nums_);
  if (from.hour_remain_sec() != 0) {
    _internal_set_hour_remain_sec(from._internal_hour_remain_sec());
  }
  if (from.day_remain_sec() != 0) {
    _internal_set_day_remain_sec(from._internal_day_remain_sec());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.hour_total() != 0) {
    _internal_set_hour_total(from._internal_hour_total());
  }
  if (from.day_total() != 0) {
    _internal_set_day_total(from._internal_day_total());
  }
  if (from.hour_award_num() != 0) {
    _internal_set_hour_award_num(from._internal_hour_award_num());
  }
  if (from.day_award_num() != 0) {
    _internal_set_day_award_num(from._internal_day_award_num());
  }
  if (from.next_start_tick() != 0) {
    _internal_set_next_start_tick(from._internal_next_start_tick());
  }
  if (from.exchange_score() != 0) {
    _internal_set_exchange_score(from._internal_exchange_score());
  }
  if (from.next_remain_sec() != 0) {
    _internal_set_next_remain_sec(from._internal_next_remain_sec());
  }
}

void SCLuckyDrawInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCLuckyDrawInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCLuckyDrawInfo::CopyFrom(const SCLuckyDrawInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCLuckyDrawInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCLuckyDrawInfo::IsInitialized() const {
  return true;
}

void SCLuckyDrawInfo::InternalSwap(SCLuckyDrawInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hour_reward_.InternalSwap(&other->hour_reward_);
  day_reward_.InternalSwap(&other->day_reward_);
  day_lucky_nums_.InternalSwap(&other->day_lucky_nums_);
  task_info_.InternalSwap(&other->task_info_);
  hour_lucky_nums_.InternalSwap(&other->hour_lucky_nums_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCLuckyDrawInfo, next_remain_sec_)
      + sizeof(SCLuckyDrawInfo::next_remain_sec_)
      - PROTOBUF_FIELD_OFFSET(SCLuckyDrawInfo, hour_remain_sec_)>(
          reinterpret_cast<char*>(&hour_remain_sec_),
          reinterpret_cast<char*>(&other->hour_remain_sec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCLuckyDrawInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSGetLuckyTaskAward::_Internal {
 public:
};

CSGetLuckyTaskAward::CSGetLuckyTaskAward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSGetLuckyTaskAward)
}
CSGetLuckyTaskAward::CSGetLuckyTaskAward(const CSGetLuckyTaskAward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_id_ = from.task_id_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSGetLuckyTaskAward)
}

void CSGetLuckyTaskAward::SharedCtor() {
  task_id_ = 0;
}

CSGetLuckyTaskAward::~CSGetLuckyTaskAward() {
  // @@protoc_insertion_point(destructor:BYDLD.CSGetLuckyTaskAward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSGetLuckyTaskAward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSGetLuckyTaskAward::ArenaDtor(void* object) {
  CSGetLuckyTaskAward* _this = reinterpret_cast< CSGetLuckyTaskAward* >(object);
  (void)_this;
}
void CSGetLuckyTaskAward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSGetLuckyTaskAward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSGetLuckyTaskAward& CSGetLuckyTaskAward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSGetLuckyTaskAward_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSGetLuckyTaskAward::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSGetLuckyTaskAward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSGetLuckyTaskAward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSGetLuckyTaskAward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSGetLuckyTaskAward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 task_id = 1;
  if (this->task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_task_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSGetLuckyTaskAward)
  return target;
}

size_t CSGetLuckyTaskAward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSGetLuckyTaskAward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 task_id = 1;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_task_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSGetLuckyTaskAward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSGetLuckyTaskAward)
  GOOGLE_DCHECK_NE(&from, this);
  const CSGetLuckyTaskAward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSGetLuckyTaskAward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSGetLuckyTaskAward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSGetLuckyTaskAward)
    MergeFrom(*source);
  }
}

void CSGetLuckyTaskAward::MergeFrom(const CSGetLuckyTaskAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSGetLuckyTaskAward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.task_id() != 0) {
    _internal_set_task_id(from._internal_task_id());
  }
}

void CSGetLuckyTaskAward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSGetLuckyTaskAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetLuckyTaskAward::CopyFrom(const CSGetLuckyTaskAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSGetLuckyTaskAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetLuckyTaskAward::IsInitialized() const {
  return true;
}

void CSGetLuckyTaskAward::InternalSwap(CSGetLuckyTaskAward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(task_id_, other->task_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSGetLuckyTaskAward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCLuckyTaskInfo::_Internal {
 public:
  static const ::BYDLD::LuckyTaskInfo& task(const SCLuckyTaskInfo* msg);
};

const ::BYDLD::LuckyTaskInfo&
SCLuckyTaskInfo::_Internal::task(const SCLuckyTaskInfo* msg) {
  return *msg->task_;
}
SCLuckyTaskInfo::SCLuckyTaskInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCLuckyTaskInfo)
}
SCLuckyTaskInfo::SCLuckyTaskInfo(const SCLuckyTaskInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task()) {
    task_ = new ::BYDLD::LuckyTaskInfo(*from.task_);
  } else {
    task_ = nullptr;
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&score_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCLuckyTaskInfo)
}

void SCLuckyTaskInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCLuckyTaskInfo_BYDLD_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&task_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&task_)) + sizeof(code_));
}

SCLuckyTaskInfo::~SCLuckyTaskInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.SCLuckyTaskInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCLuckyTaskInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete task_;
}

void SCLuckyTaskInfo::ArenaDtor(void* object) {
  SCLuckyTaskInfo* _this = reinterpret_cast< SCLuckyTaskInfo* >(object);
  (void)_this;
}
void SCLuckyTaskInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCLuckyTaskInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCLuckyTaskInfo& SCLuckyTaskInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCLuckyTaskInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCLuckyTaskInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCLuckyTaskInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&score_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCLuckyTaskInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BYDLD.LuckyTaskInfo task = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCLuckyTaskInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCLuckyTaskInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BYDLD.LuckyTaskInfo task = 1;
  if (this->has_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::task(this), target, stream);
  }

  // int32 score = 2;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_score(), target);
  }

  // int32 code = 3;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCLuckyTaskInfo)
  return target;
}

size_t SCLuckyTaskInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCLuckyTaskInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BYDLD.LuckyTaskInfo task = 1;
  if (this->has_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_);
  }

  // int32 score = 2;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int32 code = 3;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCLuckyTaskInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCLuckyTaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCLuckyTaskInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCLuckyTaskInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCLuckyTaskInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCLuckyTaskInfo)
    MergeFrom(*source);
  }
}

void SCLuckyTaskInfo::MergeFrom(const SCLuckyTaskInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCLuckyTaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task()) {
    _internal_mutable_task()->::BYDLD::LuckyTaskInfo::MergeFrom(from._internal_task());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void SCLuckyTaskInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCLuckyTaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCLuckyTaskInfo::CopyFrom(const SCLuckyTaskInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCLuckyTaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCLuckyTaskInfo::IsInitialized() const {
  return true;
}

void SCLuckyTaskInfo::InternalSwap(SCLuckyTaskInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCLuckyTaskInfo, code_)
      + sizeof(SCLuckyTaskInfo::code_)
      - PROTOBUF_FIELD_OFFSET(SCLuckyTaskInfo, task_)>(
          reinterpret_cast<char*>(&task_),
          reinterpret_cast<char*>(&other->task_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCLuckyTaskInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSGetLuckyNum::_Internal {
 public:
};

CSGetLuckyNum::CSGetLuckyNum(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSGetLuckyNum)
}
CSGetLuckyNum::CSGetLuckyNum(const CSGetLuckyNum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  times_ = from.times_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSGetLuckyNum)
}

void CSGetLuckyNum::SharedCtor() {
  times_ = 0;
}

CSGetLuckyNum::~CSGetLuckyNum() {
  // @@protoc_insertion_point(destructor:BYDLD.CSGetLuckyNum)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSGetLuckyNum::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSGetLuckyNum::ArenaDtor(void* object) {
  CSGetLuckyNum* _this = reinterpret_cast< CSGetLuckyNum* >(object);
  (void)_this;
}
void CSGetLuckyNum::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSGetLuckyNum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSGetLuckyNum& CSGetLuckyNum::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSGetLuckyNum_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSGetLuckyNum::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSGetLuckyNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  times_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSGetLuckyNum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 times = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSGetLuckyNum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSGetLuckyNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 times = 1;
  if (this->times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_times(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSGetLuckyNum)
  return target;
}

size_t CSGetLuckyNum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSGetLuckyNum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 times = 1;
  if (this->times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_times());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSGetLuckyNum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSGetLuckyNum)
  GOOGLE_DCHECK_NE(&from, this);
  const CSGetLuckyNum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSGetLuckyNum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSGetLuckyNum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSGetLuckyNum)
    MergeFrom(*source);
  }
}

void CSGetLuckyNum::MergeFrom(const CSGetLuckyNum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSGetLuckyNum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.times() != 0) {
    _internal_set_times(from._internal_times());
  }
}

void CSGetLuckyNum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSGetLuckyNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetLuckyNum::CopyFrom(const CSGetLuckyNum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSGetLuckyNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetLuckyNum::IsInitialized() const {
  return true;
}

void CSGetLuckyNum::InternalSwap(CSGetLuckyNum* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(times_, other->times_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSGetLuckyNum::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGetLuckyNum::_Internal {
 public:
};

SCGetLuckyNum::SCGetLuckyNum(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lucky_nums_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCGetLuckyNum)
}
SCGetLuckyNum::SCGetLuckyNum(const SCGetLuckyNum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lucky_nums_(from.lucky_nums_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&score_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCGetLuckyNum)
}

void SCGetLuckyNum::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&score_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&score_)) + sizeof(error_code_));
}

SCGetLuckyNum::~SCGetLuckyNum() {
  // @@protoc_insertion_point(destructor:BYDLD.SCGetLuckyNum)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGetLuckyNum::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCGetLuckyNum::ArenaDtor(void* object) {
  SCGetLuckyNum* _this = reinterpret_cast< SCGetLuckyNum* >(object);
  (void)_this;
}
void SCGetLuckyNum::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGetLuckyNum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGetLuckyNum& SCGetLuckyNum::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGetLuckyNum_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCGetLuckyNum::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCGetLuckyNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lucky_nums_.Clear();
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&score_)) + sizeof(error_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGetLuckyNum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 error_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 lucky_nums = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_lucky_nums(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_lucky_nums(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGetLuckyNum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCGetLuckyNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 score = 1;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_score(), target);
  }

  // int32 error_code = 2;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_error_code(), target);
  }

  // repeated int32 lucky_nums = 3;
  {
    int byte_size = _lucky_nums_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_lucky_nums(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCGetLuckyNum)
  return target;
}

size_t SCGetLuckyNum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCGetLuckyNum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 lucky_nums = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->lucky_nums_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _lucky_nums_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 score = 1;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int32 error_code = 2;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGetLuckyNum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCGetLuckyNum)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGetLuckyNum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGetLuckyNum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCGetLuckyNum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCGetLuckyNum)
    MergeFrom(*source);
  }
}

void SCGetLuckyNum::MergeFrom(const SCGetLuckyNum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCGetLuckyNum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lucky_nums_.MergeFrom(from.lucky_nums_);
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
}

void SCGetLuckyNum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCGetLuckyNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGetLuckyNum::CopyFrom(const SCGetLuckyNum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCGetLuckyNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGetLuckyNum::IsInitialized() const {
  return true;
}

void SCGetLuckyNum::InternalSwap(SCGetLuckyNum* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lucky_nums_.InternalSwap(&other->lucky_nums_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCGetLuckyNum, error_code_)
      + sizeof(SCGetLuckyNum::error_code_)
      - PROTOBUF_FIELD_OFFSET(SCGetLuckyNum, score_)>(
          reinterpret_cast<char*>(&score_),
          reinterpret_cast<char*>(&other->score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGetLuckyNum::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSLuckyRedDot::_Internal {
 public:
};

CSLuckyRedDot::CSLuckyRedDot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSLuckyRedDot)
}
CSLuckyRedDot::CSLuckyRedDot(const CSLuckyRedDot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSLuckyRedDot)
}

void CSLuckyRedDot::SharedCtor() {
}

CSLuckyRedDot::~CSLuckyRedDot() {
  // @@protoc_insertion_point(destructor:BYDLD.CSLuckyRedDot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSLuckyRedDot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSLuckyRedDot::ArenaDtor(void* object) {
  CSLuckyRedDot* _this = reinterpret_cast< CSLuckyRedDot* >(object);
  (void)_this;
}
void CSLuckyRedDot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSLuckyRedDot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSLuckyRedDot& CSLuckyRedDot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSLuckyRedDot_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSLuckyRedDot::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSLuckyRedDot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSLuckyRedDot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSLuckyRedDot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSLuckyRedDot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSLuckyRedDot)
  return target;
}

size_t CSLuckyRedDot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSLuckyRedDot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSLuckyRedDot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSLuckyRedDot)
  GOOGLE_DCHECK_NE(&from, this);
  const CSLuckyRedDot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSLuckyRedDot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSLuckyRedDot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSLuckyRedDot)
    MergeFrom(*source);
  }
}

void CSLuckyRedDot::MergeFrom(const CSLuckyRedDot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSLuckyRedDot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSLuckyRedDot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSLuckyRedDot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLuckyRedDot::CopyFrom(const CSLuckyRedDot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSLuckyRedDot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLuckyRedDot::IsInitialized() const {
  return true;
}

void CSLuckyRedDot::InternalSwap(CSLuckyRedDot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSLuckyRedDot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCLuckyRedDot::_Internal {
 public:
};

SCLuckyRedDot::SCLuckyRedDot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCLuckyRedDot)
}
SCLuckyRedDot::SCLuckyRedDot(const SCLuckyRedDot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  show_ = from.show_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCLuckyRedDot)
}

void SCLuckyRedDot::SharedCtor() {
  show_ = false;
}

SCLuckyRedDot::~SCLuckyRedDot() {
  // @@protoc_insertion_point(destructor:BYDLD.SCLuckyRedDot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCLuckyRedDot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCLuckyRedDot::ArenaDtor(void* object) {
  SCLuckyRedDot* _this = reinterpret_cast< SCLuckyRedDot* >(object);
  (void)_this;
}
void SCLuckyRedDot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCLuckyRedDot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCLuckyRedDot& SCLuckyRedDot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCLuckyRedDot_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCLuckyRedDot::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCLuckyRedDot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  show_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCLuckyRedDot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool show = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          show_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCLuckyRedDot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCLuckyRedDot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool show = 1;
  if (this->show() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_show(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCLuckyRedDot)
  return target;
}

size_t SCLuckyRedDot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCLuckyRedDot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool show = 1;
  if (this->show() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCLuckyRedDot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCLuckyRedDot)
  GOOGLE_DCHECK_NE(&from, this);
  const SCLuckyRedDot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCLuckyRedDot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCLuckyRedDot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCLuckyRedDot)
    MergeFrom(*source);
  }
}

void SCLuckyRedDot::MergeFrom(const SCLuckyRedDot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCLuckyRedDot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.show() != 0) {
    _internal_set_show(from._internal_show());
  }
}

void SCLuckyRedDot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCLuckyRedDot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCLuckyRedDot::CopyFrom(const SCLuckyRedDot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCLuckyRedDot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCLuckyRedDot::IsInitialized() const {
  return true;
}

void SCLuckyRedDot::InternalSwap(SCLuckyRedDot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(show_, other->show_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCLuckyRedDot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LuckyRecord::_Internal {
 public:
};

LuckyRecord::LuckyRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.LuckyRecord)
}
LuckyRecord::LuckyRecord(const LuckyRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick_name().empty()) {
    nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nick_name(), 
      GetArena());
  }
  ::memcpy(&vip_, &from.vip_,
    static_cast<size_t>(reinterpret_cast<char*>(&tick_) -
    reinterpret_cast<char*>(&vip_)) + sizeof(tick_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.LuckyRecord)
}

void LuckyRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LuckyRecord_BYDLD_2eproto.base);
  nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&vip_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&vip_)) + sizeof(tick_));
}

LuckyRecord::~LuckyRecord() {
  // @@protoc_insertion_point(destructor:BYDLD.LuckyRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LuckyRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nick_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LuckyRecord::ArenaDtor(void* object) {
  LuckyRecord* _this = reinterpret_cast< LuckyRecord* >(object);
  (void)_this;
}
void LuckyRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LuckyRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LuckyRecord& LuckyRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LuckyRecord_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void LuckyRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.LuckyRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nick_name_.ClearToEmpty();
  ::memset(&vip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&vip_)) + sizeof(tick_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LuckyRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 vip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lucky_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lucky_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tick = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nick_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_nick_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.LuckyRecord.nick_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LuckyRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.LuckyRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vip = 1;
  if (this->vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vip(), target);
  }

  // int32 times = 2;
  if (this->times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_times(), target);
  }

  // int32 lucky_num = 3;
  if (this->lucky_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_lucky_num(), target);
  }

  // int32 tick = 4;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_tick(), target);
  }

  // string nick_name = 5;
  if (this->nick_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick_name().data(), static_cast<int>(this->_internal_nick_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.LuckyRecord.nick_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_nick_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.LuckyRecord)
  return target;
}

size_t LuckyRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.LuckyRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick_name = 5;
  if (this->nick_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick_name());
  }

  // int32 vip = 1;
  if (this->vip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vip());
  }

  // int32 times = 2;
  if (this->times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_times());
  }

  // int32 lucky_num = 3;
  if (this->lucky_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lucky_num());
  }

  // int32 tick = 4;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tick());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LuckyRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.LuckyRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const LuckyRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LuckyRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.LuckyRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.LuckyRecord)
    MergeFrom(*source);
  }
}

void LuckyRecord::MergeFrom(const LuckyRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.LuckyRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nick_name().size() > 0) {
    _internal_set_nick_name(from._internal_nick_name());
  }
  if (from.vip() != 0) {
    _internal_set_vip(from._internal_vip());
  }
  if (from.times() != 0) {
    _internal_set_times(from._internal_times());
  }
  if (from.lucky_num() != 0) {
    _internal_set_lucky_num(from._internal_lucky_num());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
}

void LuckyRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.LuckyRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LuckyRecord::CopyFrom(const LuckyRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.LuckyRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LuckyRecord::IsInitialized() const {
  return true;
}

void LuckyRecord::InternalSwap(LuckyRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nick_name_.Swap(&other->nick_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LuckyRecord, tick_)
      + sizeof(LuckyRecord::tick_)
      - PROTOBUF_FIELD_OFFSET(LuckyRecord, vip_)>(
          reinterpret_cast<char*>(&vip_),
          reinterpret_cast<char*>(&other->vip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LuckyRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OwnRecord::_Internal {
 public:
};

OwnRecord::OwnRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reward_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.OwnRecord)
}
OwnRecord::OwnRecord(const OwnRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reward_(from.reward_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&lucky_num_) -
    reinterpret_cast<char*>(&status_)) + sizeof(lucky_num_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.OwnRecord)
}

void OwnRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OwnRecord_BYDLD_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lucky_num_) -
      reinterpret_cast<char*>(&status_)) + sizeof(lucky_num_));
}

OwnRecord::~OwnRecord() {
  // @@protoc_insertion_point(destructor:BYDLD.OwnRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OwnRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OwnRecord::ArenaDtor(void* object) {
  OwnRecord* _this = reinterpret_cast< OwnRecord* >(object);
  (void)_this;
}
void OwnRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OwnRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OwnRecord& OwnRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OwnRecord_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void OwnRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.OwnRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_.Clear();
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lucky_num_) -
      reinterpret_cast<char*>(&status_)) + sizeof(lucky_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OwnRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.AwardProp reward = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lucky_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lucky_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OwnRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.OwnRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.AwardProp reward = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reward_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_reward(i), target, stream);
  }

  // int32 status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_status(), target);
  }

  // int32 tick = 3;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_tick(), target);
  }

  // int32 lucky_num = 4;
  if (this->lucky_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_lucky_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.OwnRecord)
  return target;
}

size_t OwnRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.OwnRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.AwardProp reward = 1;
  total_size += 1UL * this->_internal_reward_size();
  for (const auto& msg : this->reward_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 tick = 3;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tick());
  }

  // int32 lucky_num = 4;
  if (this->lucky_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lucky_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OwnRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.OwnRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const OwnRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OwnRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.OwnRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.OwnRecord)
    MergeFrom(*source);
  }
}

void OwnRecord::MergeFrom(const OwnRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.OwnRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_.MergeFrom(from.reward_);
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
  if (from.lucky_num() != 0) {
    _internal_set_lucky_num(from._internal_lucky_num());
  }
}

void OwnRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.OwnRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OwnRecord::CopyFrom(const OwnRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.OwnRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwnRecord::IsInitialized() const {
  return true;
}

void OwnRecord::InternalSwap(OwnRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reward_.InternalSwap(&other->reward_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OwnRecord, lucky_num_)
      + sizeof(OwnRecord::lucky_num_)
      - PROTOBUF_FIELD_OFFSET(OwnRecord, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OwnRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSLuckyRecord::_Internal {
 public:
};

CSLuckyRecord::CSLuckyRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSLuckyRecord)
}
CSLuckyRecord::CSLuckyRecord(const CSLuckyRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSLuckyRecord)
}

void CSLuckyRecord::SharedCtor() {
  type_ = 0;
}

CSLuckyRecord::~CSLuckyRecord() {
  // @@protoc_insertion_point(destructor:BYDLD.CSLuckyRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSLuckyRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSLuckyRecord::ArenaDtor(void* object) {
  CSLuckyRecord* _this = reinterpret_cast< CSLuckyRecord* >(object);
  (void)_this;
}
void CSLuckyRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSLuckyRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSLuckyRecord& CSLuckyRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSLuckyRecord_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSLuckyRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSLuckyRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSLuckyRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSLuckyRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSLuckyRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSLuckyRecord)
  return target;
}

size_t CSLuckyRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSLuckyRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSLuckyRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSLuckyRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const CSLuckyRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSLuckyRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSLuckyRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSLuckyRecord)
    MergeFrom(*source);
  }
}

void CSLuckyRecord::MergeFrom(const CSLuckyRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSLuckyRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void CSLuckyRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSLuckyRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLuckyRecord::CopyFrom(const CSLuckyRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSLuckyRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLuckyRecord::IsInitialized() const {
  return true;
}

void CSLuckyRecord::InternalSwap(CSLuckyRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSLuckyRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCLuckyRecord::_Internal {
 public:
};

SCLuckyRecord::SCLuckyRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  record_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCLuckyRecord)
}
SCLuckyRecord::SCLuckyRecord(const SCLuckyRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      record_(from.record_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCLuckyRecord)
}

void SCLuckyRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCLuckyRecord_BYDLD_2eproto.base);
  type_ = 0;
}

SCLuckyRecord::~SCLuckyRecord() {
  // @@protoc_insertion_point(destructor:BYDLD.SCLuckyRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCLuckyRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCLuckyRecord::ArenaDtor(void* object) {
  SCLuckyRecord* _this = reinterpret_cast< SCLuckyRecord* >(object);
  (void)_this;
}
void SCLuckyRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCLuckyRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCLuckyRecord& SCLuckyRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCLuckyRecord_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCLuckyRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCLuckyRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_.Clear();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCLuckyRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.LuckyRecord record = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCLuckyRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCLuckyRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // repeated .BYDLD.LuckyRecord record = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_record_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_record(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCLuckyRecord)
  return target;
}

size_t SCLuckyRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCLuckyRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.LuckyRecord record = 2;
  total_size += 1UL * this->_internal_record_size();
  for (const auto& msg : this->record_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCLuckyRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCLuckyRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const SCLuckyRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCLuckyRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCLuckyRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCLuckyRecord)
    MergeFrom(*source);
  }
}

void SCLuckyRecord::MergeFrom(const SCLuckyRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCLuckyRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  record_.MergeFrom(from.record_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void SCLuckyRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCLuckyRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCLuckyRecord::CopyFrom(const SCLuckyRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCLuckyRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCLuckyRecord::IsInitialized() const {
  return true;
}

void SCLuckyRecord::InternalSwap(SCLuckyRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  record_.InternalSwap(&other->record_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCLuckyRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCOwnRecord::_Internal {
 public:
};

SCOwnRecord::SCOwnRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  record_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCOwnRecord)
}
SCOwnRecord::SCOwnRecord(const SCOwnRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      record_(from.record_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCOwnRecord)
}

void SCOwnRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCOwnRecord_BYDLD_2eproto.base);
}

SCOwnRecord::~SCOwnRecord() {
  // @@protoc_insertion_point(destructor:BYDLD.SCOwnRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCOwnRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCOwnRecord::ArenaDtor(void* object) {
  SCOwnRecord* _this = reinterpret_cast< SCOwnRecord* >(object);
  (void)_this;
}
void SCOwnRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCOwnRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCOwnRecord& SCOwnRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCOwnRecord_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCOwnRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCOwnRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCOwnRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.OwnRecord record = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCOwnRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCOwnRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.OwnRecord record = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_record_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_record(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCOwnRecord)
  return target;
}

size_t SCOwnRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCOwnRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.OwnRecord record = 1;
  total_size += 1UL * this->_internal_record_size();
  for (const auto& msg : this->record_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCOwnRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCOwnRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const SCOwnRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCOwnRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCOwnRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCOwnRecord)
    MergeFrom(*source);
  }
}

void SCOwnRecord::MergeFrom(const SCOwnRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCOwnRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  record_.MergeFrom(from.record_);
}

void SCOwnRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCOwnRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCOwnRecord::CopyFrom(const SCOwnRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCOwnRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCOwnRecord::IsInitialized() const {
  return true;
}

void SCOwnRecord::InternalSwap(SCOwnRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  record_.InternalSwap(&other->record_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCOwnRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSDragonWheelStart::_Internal {
 public:
};

CSDragonWheelStart::CSDragonWheelStart(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSDragonWheelStart)
}
CSDragonWheelStart::CSDragonWheelStart(const CSDragonWheelStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stage_ = from.stage_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSDragonWheelStart)
}

void CSDragonWheelStart::SharedCtor() {
  stage_ = 0;
}

CSDragonWheelStart::~CSDragonWheelStart() {
  // @@protoc_insertion_point(destructor:BYDLD.CSDragonWheelStart)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSDragonWheelStart::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSDragonWheelStart::ArenaDtor(void* object) {
  CSDragonWheelStart* _this = reinterpret_cast< CSDragonWheelStart* >(object);
  (void)_this;
}
void CSDragonWheelStart::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSDragonWheelStart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSDragonWheelStart& CSDragonWheelStart::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSDragonWheelStart_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSDragonWheelStart::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSDragonWheelStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stage_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDragonWheelStart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 stage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSDragonWheelStart::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSDragonWheelStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 stage = 1;
  if (this->stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_stage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSDragonWheelStart)
  return target;
}

size_t CSDragonWheelStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSDragonWheelStart)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 stage = 1;
  if (this->stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSDragonWheelStart::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSDragonWheelStart)
  GOOGLE_DCHECK_NE(&from, this);
  const CSDragonWheelStart* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSDragonWheelStart>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSDragonWheelStart)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSDragonWheelStart)
    MergeFrom(*source);
  }
}

void CSDragonWheelStart::MergeFrom(const CSDragonWheelStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSDragonWheelStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stage() != 0) {
    _internal_set_stage(from._internal_stage());
  }
}

void CSDragonWheelStart::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSDragonWheelStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDragonWheelStart::CopyFrom(const CSDragonWheelStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSDragonWheelStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDragonWheelStart::IsInitialized() const {
  return true;
}

void CSDragonWheelStart::InternalSwap(CSDragonWheelStart* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(stage_, other->stage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDragonWheelStart::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCDragonWheelStop::_Internal {
 public:
};

SCDragonWheelStop::SCDragonWheelStop(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCDragonWheelStop)
}
SCDragonWheelStop::SCDragonWheelStop(const SCDragonWheelStop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&stage_, &from.stage_,
    static_cast<size_t>(reinterpret_cast<char*>(&bullet_ratio_) -
    reinterpret_cast<char*>(&stage_)) + sizeof(bullet_ratio_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCDragonWheelStop)
}

void SCDragonWheelStop::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&stage_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bullet_ratio_) -
      reinterpret_cast<char*>(&stage_)) + sizeof(bullet_ratio_));
}

SCDragonWheelStop::~SCDragonWheelStop() {
  // @@protoc_insertion_point(destructor:BYDLD.SCDragonWheelStop)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCDragonWheelStop::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCDragonWheelStop::ArenaDtor(void* object) {
  SCDragonWheelStop* _this = reinterpret_cast< SCDragonWheelStop* >(object);
  (void)_this;
}
void SCDragonWheelStop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCDragonWheelStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCDragonWheelStop& SCDragonWheelStop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCDragonWheelStop_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCDragonWheelStop::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCDragonWheelStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&stage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bullet_ratio_) -
      reinterpret_cast<char*>(&stage_)) + sizeof(bullet_ratio_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCDragonWheelStop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 stage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 atomic_ratio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          atomic_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fortune_ratio = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          fortune_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 poseidon_ratio = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          poseidon_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 error = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          fish_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_prop = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          is_prop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bullet_ratio = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          bullet_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCDragonWheelStop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCDragonWheelStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 stage = 1;
  if (this->stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_stage(), target);
  }

  // int32 ratio = 2;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ratio(), target);
  }

  // int32 score = 3;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_score(), target);
  }

  // int32 atomic_ratio = 4;
  if (this->atomic_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_atomic_ratio(), target);
  }

  // int32 fortune_ratio = 5;
  if (this->fortune_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_fortune_ratio(), target);
  }

  // int32 poseidon_ratio = 6;
  if (this->poseidon_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_poseidon_ratio(), target);
  }

  // int32 error = 7;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_error(), target);
  }

  // int32 chair_id = 8;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_chair_id(), target);
  }

  // int32 fish_value = 9;
  if (this->fish_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_fish_value(), target);
  }

  // bool is_prop = 10;
  if (this->is_prop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_prop(), target);
  }

  // int32 bullet_ratio = 11;
  if (this->bullet_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_bullet_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCDragonWheelStop)
  return target;
}

size_t SCDragonWheelStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCDragonWheelStop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 stage = 1;
  if (this->stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stage());
  }

  // int32 ratio = 2;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // int32 score = 3;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int32 atomic_ratio = 4;
  if (this->atomic_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_atomic_ratio());
  }

  // int32 fortune_ratio = 5;
  if (this->fortune_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fortune_ratio());
  }

  // int32 poseidon_ratio = 6;
  if (this->poseidon_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_poseidon_ratio());
  }

  // int32 error = 7;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error());
  }

  // int32 chair_id = 8;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 fish_value = 9;
  if (this->fish_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_value());
  }

  // bool is_prop = 10;
  if (this->is_prop() != 0) {
    total_size += 1 + 1;
  }

  // int32 bullet_ratio = 11;
  if (this->bullet_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bullet_ratio());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCDragonWheelStop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCDragonWheelStop)
  GOOGLE_DCHECK_NE(&from, this);
  const SCDragonWheelStop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCDragonWheelStop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCDragonWheelStop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCDragonWheelStop)
    MergeFrom(*source);
  }
}

void SCDragonWheelStop::MergeFrom(const SCDragonWheelStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCDragonWheelStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stage() != 0) {
    _internal_set_stage(from._internal_stage());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.atomic_ratio() != 0) {
    _internal_set_atomic_ratio(from._internal_atomic_ratio());
  }
  if (from.fortune_ratio() != 0) {
    _internal_set_fortune_ratio(from._internal_fortune_ratio());
  }
  if (from.poseidon_ratio() != 0) {
    _internal_set_poseidon_ratio(from._internal_poseidon_ratio());
  }
  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.fish_value() != 0) {
    _internal_set_fish_value(from._internal_fish_value());
  }
  if (from.is_prop() != 0) {
    _internal_set_is_prop(from._internal_is_prop());
  }
  if (from.bullet_ratio() != 0) {
    _internal_set_bullet_ratio(from._internal_bullet_ratio());
  }
}

void SCDragonWheelStop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCDragonWheelStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCDragonWheelStop::CopyFrom(const SCDragonWheelStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCDragonWheelStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCDragonWheelStop::IsInitialized() const {
  return true;
}

void SCDragonWheelStop::InternalSwap(SCDragonWheelStop* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCDragonWheelStop, bullet_ratio_)
      + sizeof(SCDragonWheelStop::bullet_ratio_)
      - PROTOBUF_FIELD_OFFSET(SCDragonWheelStop, stage_)>(
          reinterpret_cast<char*>(&stage_),
          reinterpret_cast<char*>(&other->stage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCDragonWheelStop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSyncHallProp::_Internal {
 public:
};

SCSyncHallProp::SCSyncHallProp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hall_prop_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCSyncHallProp)
}
SCSyncHallProp::SCSyncHallProp(const SCSyncHallProp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hall_prop_(from.hall_prop_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCSyncHallProp)
}

void SCSyncHallProp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCSyncHallProp_BYDLD_2eproto.base);
}

SCSyncHallProp::~SCSyncHallProp() {
  // @@protoc_insertion_point(destructor:BYDLD.SCSyncHallProp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSyncHallProp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSyncHallProp::ArenaDtor(void* object) {
  SCSyncHallProp* _this = reinterpret_cast< SCSyncHallProp* >(object);
  (void)_this;
}
void SCSyncHallProp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSyncHallProp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSyncHallProp& SCSyncHallProp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSyncHallProp_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCSyncHallProp::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCSyncHallProp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hall_prop_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSyncHallProp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.Object3 hall_prop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hall_prop(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSyncHallProp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCSyncHallProp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.Object3 hall_prop = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hall_prop_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_hall_prop(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCSyncHallProp)
  return target;
}

size_t SCSyncHallProp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCSyncHallProp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.Object3 hall_prop = 1;
  total_size += 1UL * this->_internal_hall_prop_size();
  for (const auto& msg : this->hall_prop_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSyncHallProp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCSyncHallProp)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSyncHallProp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSyncHallProp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCSyncHallProp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCSyncHallProp)
    MergeFrom(*source);
  }
}

void SCSyncHallProp::MergeFrom(const SCSyncHallProp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCSyncHallProp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hall_prop_.MergeFrom(from.hall_prop_);
}

void SCSyncHallProp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCSyncHallProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSyncHallProp::CopyFrom(const SCSyncHallProp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCSyncHallProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSyncHallProp::IsInitialized() const {
  return true;
}

void SCSyncHallProp::InternalSwap(SCSyncHallProp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hall_prop_.InternalSwap(&other->hall_prop_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSyncHallProp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSCheckDragonWheelProp::_Internal {
 public:
};

CSCheckDragonWheelProp::CSCheckDragonWheelProp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSCheckDragonWheelProp)
}
CSCheckDragonWheelProp::CSCheckDragonWheelProp(const CSCheckDragonWheelProp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prop_id_ = from.prop_id_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSCheckDragonWheelProp)
}

void CSCheckDragonWheelProp::SharedCtor() {
  prop_id_ = 0;
}

CSCheckDragonWheelProp::~CSCheckDragonWheelProp() {
  // @@protoc_insertion_point(destructor:BYDLD.CSCheckDragonWheelProp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSCheckDragonWheelProp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSCheckDragonWheelProp::ArenaDtor(void* object) {
  CSCheckDragonWheelProp* _this = reinterpret_cast< CSCheckDragonWheelProp* >(object);
  (void)_this;
}
void CSCheckDragonWheelProp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSCheckDragonWheelProp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSCheckDragonWheelProp& CSCheckDragonWheelProp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSCheckDragonWheelProp_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSCheckDragonWheelProp::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSCheckDragonWheelProp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prop_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSCheckDragonWheelProp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 prop_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          prop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSCheckDragonWheelProp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSCheckDragonWheelProp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 prop_id = 1;
  if (this->prop_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_prop_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSCheckDragonWheelProp)
  return target;
}

size_t CSCheckDragonWheelProp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSCheckDragonWheelProp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 prop_id = 1;
  if (this->prop_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prop_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSCheckDragonWheelProp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSCheckDragonWheelProp)
  GOOGLE_DCHECK_NE(&from, this);
  const CSCheckDragonWheelProp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSCheckDragonWheelProp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSCheckDragonWheelProp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSCheckDragonWheelProp)
    MergeFrom(*source);
  }
}

void CSCheckDragonWheelProp::MergeFrom(const CSCheckDragonWheelProp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSCheckDragonWheelProp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prop_id() != 0) {
    _internal_set_prop_id(from._internal_prop_id());
  }
}

void CSCheckDragonWheelProp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSCheckDragonWheelProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSCheckDragonWheelProp::CopyFrom(const CSCheckDragonWheelProp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSCheckDragonWheelProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCheckDragonWheelProp::IsInitialized() const {
  return true;
}

void CSCheckDragonWheelProp::InternalSwap(CSCheckDragonWheelProp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(prop_id_, other->prop_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSCheckDragonWheelProp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCCheckDragonWheelProp::_Internal {
 public:
};

SCCheckDragonWheelProp::SCCheckDragonWheelProp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCCheckDragonWheelProp)
}
SCCheckDragonWheelProp::SCCheckDragonWheelProp(const SCCheckDragonWheelProp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&can_use_, &from.can_use_,
    static_cast<size_t>(reinterpret_cast<char*>(&ratio_) -
    reinterpret_cast<char*>(&can_use_)) + sizeof(ratio_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCCheckDragonWheelProp)
}

void SCCheckDragonWheelProp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&can_use_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ratio_) -
      reinterpret_cast<char*>(&can_use_)) + sizeof(ratio_));
}

SCCheckDragonWheelProp::~SCCheckDragonWheelProp() {
  // @@protoc_insertion_point(destructor:BYDLD.SCCheckDragonWheelProp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCCheckDragonWheelProp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCCheckDragonWheelProp::ArenaDtor(void* object) {
  SCCheckDragonWheelProp* _this = reinterpret_cast< SCCheckDragonWheelProp* >(object);
  (void)_this;
}
void SCCheckDragonWheelProp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCCheckDragonWheelProp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCCheckDragonWheelProp& SCCheckDragonWheelProp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCCheckDragonWheelProp_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCCheckDragonWheelProp::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCCheckDragonWheelProp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&can_use_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ratio_) -
      reinterpret_cast<char*>(&can_use_)) + sizeof(ratio_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCCheckDragonWheelProp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool can_use = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          can_use_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 prop_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          prop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCCheckDragonWheelProp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCCheckDragonWheelProp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool can_use = 1;
  if (this->can_use() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_can_use(), target);
  }

  // int32 prop_id = 2;
  if (this->prop_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_prop_id(), target);
  }

  // int32 chair_id = 3;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_chair_id(), target);
  }

  // int32 ratio = 4;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCCheckDragonWheelProp)
  return target;
}

size_t SCCheckDragonWheelProp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCCheckDragonWheelProp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool can_use = 1;
  if (this->can_use() != 0) {
    total_size += 1 + 1;
  }

  // int32 prop_id = 2;
  if (this->prop_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prop_id());
  }

  // int32 chair_id = 3;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 ratio = 4;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCCheckDragonWheelProp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCCheckDragonWheelProp)
  GOOGLE_DCHECK_NE(&from, this);
  const SCCheckDragonWheelProp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCCheckDragonWheelProp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCCheckDragonWheelProp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCCheckDragonWheelProp)
    MergeFrom(*source);
  }
}

void SCCheckDragonWheelProp::MergeFrom(const SCCheckDragonWheelProp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCCheckDragonWheelProp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.can_use() != 0) {
    _internal_set_can_use(from._internal_can_use());
  }
  if (from.prop_id() != 0) {
    _internal_set_prop_id(from._internal_prop_id());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
}

void SCCheckDragonWheelProp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCCheckDragonWheelProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCCheckDragonWheelProp::CopyFrom(const SCCheckDragonWheelProp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCCheckDragonWheelProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCCheckDragonWheelProp::IsInitialized() const {
  return true;
}

void SCCheckDragonWheelProp::InternalSwap(SCCheckDragonWheelProp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCCheckDragonWheelProp, ratio_)
      + sizeof(SCCheckDragonWheelProp::ratio_)
      - PROTOBUF_FIELD_OFFSET(SCCheckDragonWheelProp, can_use_)>(
          reinterpret_cast<char*>(&can_use_),
          reinterpret_cast<char*>(&other->can_use_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCCheckDragonWheelProp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSUserPoolDoubleInfo::_Internal {
 public:
};

CSUserPoolDoubleInfo::CSUserPoolDoubleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSUserPoolDoubleInfo)
}
CSUserPoolDoubleInfo::CSUserPoolDoubleInfo(const CSUserPoolDoubleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSUserPoolDoubleInfo)
}

void CSUserPoolDoubleInfo::SharedCtor() {
}

CSUserPoolDoubleInfo::~CSUserPoolDoubleInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.CSUserPoolDoubleInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSUserPoolDoubleInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSUserPoolDoubleInfo::ArenaDtor(void* object) {
  CSUserPoolDoubleInfo* _this = reinterpret_cast< CSUserPoolDoubleInfo* >(object);
  (void)_this;
}
void CSUserPoolDoubleInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSUserPoolDoubleInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSUserPoolDoubleInfo& CSUserPoolDoubleInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSUserPoolDoubleInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSUserPoolDoubleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSUserPoolDoubleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSUserPoolDoubleInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSUserPoolDoubleInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSUserPoolDoubleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSUserPoolDoubleInfo)
  return target;
}

size_t CSUserPoolDoubleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSUserPoolDoubleInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSUserPoolDoubleInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSUserPoolDoubleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSUserPoolDoubleInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSUserPoolDoubleInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSUserPoolDoubleInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSUserPoolDoubleInfo)
    MergeFrom(*source);
  }
}

void CSUserPoolDoubleInfo::MergeFrom(const CSUserPoolDoubleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSUserPoolDoubleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSUserPoolDoubleInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSUserPoolDoubleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUserPoolDoubleInfo::CopyFrom(const CSUserPoolDoubleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSUserPoolDoubleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUserPoolDoubleInfo::IsInitialized() const {
  return true;
}

void CSUserPoolDoubleInfo::InternalSwap(CSUserPoolDoubleInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSUserPoolDoubleInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUserPoolDoubleInfo::_Internal {
 public:
  static const ::BYDLD::Object2& item_before(const SCUserPoolDoubleInfo* msg);
  static const ::BYDLD::Object2& item_double(const SCUserPoolDoubleInfo* msg);
};

const ::BYDLD::Object2&
SCUserPoolDoubleInfo::_Internal::item_before(const SCUserPoolDoubleInfo* msg) {
  return *msg->item_before_;
}
const ::BYDLD::Object2&
SCUserPoolDoubleInfo::_Internal::item_double(const SCUserPoolDoubleInfo* msg) {
  return *msg->item_double_;
}
SCUserPoolDoubleInfo::SCUserPoolDoubleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCUserPoolDoubleInfo)
}
SCUserPoolDoubleInfo::SCUserPoolDoubleInfo(const SCUserPoolDoubleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item_before()) {
    item_before_ = new ::BYDLD::Object2(*from.item_before_);
  } else {
    item_before_ = nullptr;
  }
  if (from._internal_has_item_double()) {
    item_double_ = new ::BYDLD::Object2(*from.item_double_);
  } else {
    item_double_ = nullptr;
  }
  cost_ = from.cost_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCUserPoolDoubleInfo)
}

void SCUserPoolDoubleInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCUserPoolDoubleInfo_BYDLD_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&item_before_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cost_) -
      reinterpret_cast<char*>(&item_before_)) + sizeof(cost_));
}

SCUserPoolDoubleInfo::~SCUserPoolDoubleInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.SCUserPoolDoubleInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUserPoolDoubleInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete item_before_;
  if (this != internal_default_instance()) delete item_double_;
}

void SCUserPoolDoubleInfo::ArenaDtor(void* object) {
  SCUserPoolDoubleInfo* _this = reinterpret_cast< SCUserPoolDoubleInfo* >(object);
  (void)_this;
}
void SCUserPoolDoubleInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUserPoolDoubleInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUserPoolDoubleInfo& SCUserPoolDoubleInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUserPoolDoubleInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCUserPoolDoubleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCUserPoolDoubleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && item_before_ != nullptr) {
    delete item_before_;
  }
  item_before_ = nullptr;
  if (GetArena() == nullptr && item_double_ != nullptr) {
    delete item_double_;
  }
  item_double_ = nullptr;
  cost_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUserPoolDoubleInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cost = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BYDLD.Object2 item_before = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_before(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BYDLD.Object2 item_double = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_double(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUserPoolDoubleInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCUserPoolDoubleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cost = 1;
  if (this->cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cost(), target);
  }

  // .BYDLD.Object2 item_before = 2;
  if (this->has_item_before()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::item_before(this), target, stream);
  }

  // .BYDLD.Object2 item_double = 3;
  if (this->has_item_double()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::item_double(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCUserPoolDoubleInfo)
  return target;
}

size_t SCUserPoolDoubleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCUserPoolDoubleInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BYDLD.Object2 item_before = 2;
  if (this->has_item_before()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_before_);
  }

  // .BYDLD.Object2 item_double = 3;
  if (this->has_item_double()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_double_);
  }

  // int32 cost = 1;
  if (this->cost() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cost());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUserPoolDoubleInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCUserPoolDoubleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUserPoolDoubleInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUserPoolDoubleInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCUserPoolDoubleInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCUserPoolDoubleInfo)
    MergeFrom(*source);
  }
}

void SCUserPoolDoubleInfo::MergeFrom(const SCUserPoolDoubleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCUserPoolDoubleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_item_before()) {
    _internal_mutable_item_before()->::BYDLD::Object2::MergeFrom(from._internal_item_before());
  }
  if (from.has_item_double()) {
    _internal_mutable_item_double()->::BYDLD::Object2::MergeFrom(from._internal_item_double());
  }
  if (from.cost() != 0) {
    _internal_set_cost(from._internal_cost());
  }
}

void SCUserPoolDoubleInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCUserPoolDoubleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUserPoolDoubleInfo::CopyFrom(const SCUserPoolDoubleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCUserPoolDoubleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUserPoolDoubleInfo::IsInitialized() const {
  return true;
}

void SCUserPoolDoubleInfo::InternalSwap(SCUserPoolDoubleInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCUserPoolDoubleInfo, cost_)
      + sizeof(SCUserPoolDoubleInfo::cost_)
      - PROTOBUF_FIELD_OFFSET(SCUserPoolDoubleInfo, item_before_)>(
          reinterpret_cast<char*>(&item_before_),
          reinterpret_cast<char*>(&other->item_before_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUserPoolDoubleInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSUserPoolDouble::_Internal {
 public:
};

CSUserPoolDouble::CSUserPoolDouble(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSUserPoolDouble)
}
CSUserPoolDouble::CSUserPoolDouble(const CSUserPoolDouble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_double_ = from.is_double_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSUserPoolDouble)
}

void CSUserPoolDouble::SharedCtor() {
  is_double_ = false;
}

CSUserPoolDouble::~CSUserPoolDouble() {
  // @@protoc_insertion_point(destructor:BYDLD.CSUserPoolDouble)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSUserPoolDouble::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSUserPoolDouble::ArenaDtor(void* object) {
  CSUserPoolDouble* _this = reinterpret_cast< CSUserPoolDouble* >(object);
  (void)_this;
}
void CSUserPoolDouble::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSUserPoolDouble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSUserPoolDouble& CSUserPoolDouble::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSUserPoolDouble_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSUserPoolDouble::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSUserPoolDouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_double_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSUserPoolDouble::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_double = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_double_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSUserPoolDouble::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSUserPoolDouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_double = 1;
  if (this->is_double() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_double(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSUserPoolDouble)
  return target;
}

size_t CSUserPoolDouble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSUserPoolDouble)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_double = 1;
  if (this->is_double() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSUserPoolDouble::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSUserPoolDouble)
  GOOGLE_DCHECK_NE(&from, this);
  const CSUserPoolDouble* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSUserPoolDouble>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSUserPoolDouble)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSUserPoolDouble)
    MergeFrom(*source);
  }
}

void CSUserPoolDouble::MergeFrom(const CSUserPoolDouble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSUserPoolDouble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_double() != 0) {
    _internal_set_is_double(from._internal_is_double());
  }
}

void CSUserPoolDouble::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSUserPoolDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUserPoolDouble::CopyFrom(const CSUserPoolDouble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSUserPoolDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUserPoolDouble::IsInitialized() const {
  return true;
}

void CSUserPoolDouble::InternalSwap(CSUserPoolDouble* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(is_double_, other->is_double_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSUserPoolDouble::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUserPoolDouble::_Internal {
 public:
  static const ::BYDLD::Object3& item(const SCUserPoolDouble* msg);
  static const ::BYDLD::Object3& extra_item(const SCUserPoolDouble* msg);
};

const ::BYDLD::Object3&
SCUserPoolDouble::_Internal::item(const SCUserPoolDouble* msg) {
  return *msg->item_;
}
const ::BYDLD::Object3&
SCUserPoolDouble::_Internal::extra_item(const SCUserPoolDouble* msg) {
  return *msg->extra_item_;
}
SCUserPoolDouble::SCUserPoolDouble(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCUserPoolDouble)
}
SCUserPoolDouble::SCUserPoolDouble(const SCUserPoolDouble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item()) {
    item_ = new ::BYDLD::Object3(*from.item_);
  } else {
    item_ = nullptr;
  }
  if (from._internal_has_extra_item()) {
    extra_item_ = new ::BYDLD::Object3(*from.extra_item_);
  } else {
    extra_item_ = nullptr;
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&chair_idx_) -
    reinterpret_cast<char*>(&code_)) + sizeof(chair_idx_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCUserPoolDouble)
}

void SCUserPoolDouble::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCUserPoolDouble_BYDLD_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&item_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_idx_) -
      reinterpret_cast<char*>(&item_)) + sizeof(chair_idx_));
}

SCUserPoolDouble::~SCUserPoolDouble() {
  // @@protoc_insertion_point(destructor:BYDLD.SCUserPoolDouble)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUserPoolDouble::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete item_;
  if (this != internal_default_instance()) delete extra_item_;
}

void SCUserPoolDouble::ArenaDtor(void* object) {
  SCUserPoolDouble* _this = reinterpret_cast< SCUserPoolDouble* >(object);
  (void)_this;
}
void SCUserPoolDouble::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUserPoolDouble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUserPoolDouble& SCUserPoolDouble::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUserPoolDouble_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCUserPoolDouble::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCUserPoolDouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  if (GetArena() == nullptr && extra_item_ != nullptr) {
    delete extra_item_;
  }
  extra_item_ = nullptr;
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) -
      reinterpret_cast<char*>(&code_)) + sizeof(chair_idx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUserPoolDouble::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair_idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BYDLD.Object3 item = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BYDLD.Object3 extra_item = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUserPoolDouble::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCUserPoolDouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_result(), target);
  }

  // int32 chair_idx = 3;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_chair_idx(), target);
  }

  // .BYDLD.Object3 item = 4;
  if (this->has_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::item(this), target, stream);
  }

  // .BYDLD.Object3 extra_item = 5;
  if (this->has_extra_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::extra_item(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCUserPoolDouble)
  return target;
}

size_t SCUserPoolDouble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCUserPoolDouble)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BYDLD.Object3 item = 4;
  if (this->has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_);
  }

  // .BYDLD.Object3 extra_item = 5;
  if (this->has_extra_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_item_);
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  // int32 result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  // int32 chair_idx = 3;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUserPoolDouble::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCUserPoolDouble)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUserPoolDouble* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUserPoolDouble>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCUserPoolDouble)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCUserPoolDouble)
    MergeFrom(*source);
  }
}

void SCUserPoolDouble::MergeFrom(const SCUserPoolDouble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCUserPoolDouble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_item()) {
    _internal_mutable_item()->::BYDLD::Object3::MergeFrom(from._internal_item());
  }
  if (from.has_extra_item()) {
    _internal_mutable_extra_item()->::BYDLD::Object3::MergeFrom(from._internal_extra_item());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
}

void SCUserPoolDouble::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCUserPoolDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUserPoolDouble::CopyFrom(const SCUserPoolDouble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCUserPoolDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUserPoolDouble::IsInitialized() const {
  return true;
}

void SCUserPoolDouble::InternalSwap(SCUserPoolDouble* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCUserPoolDouble, chair_idx_)
      + sizeof(SCUserPoolDouble::chair_idx_)
      - PROTOBUF_FIELD_OFFSET(SCUserPoolDouble, item_)>(
          reinterpret_cast<char*>(&item_),
          reinterpret_cast<char*>(&other->item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUserPoolDouble::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSLuckyPoolInfo::_Internal {
 public:
};

CSLuckyPoolInfo::CSLuckyPoolInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSLuckyPoolInfo)
}
CSLuckyPoolInfo::CSLuckyPoolInfo(const CSLuckyPoolInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSLuckyPoolInfo)
}

void CSLuckyPoolInfo::SharedCtor() {
}

CSLuckyPoolInfo::~CSLuckyPoolInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.CSLuckyPoolInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSLuckyPoolInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSLuckyPoolInfo::ArenaDtor(void* object) {
  CSLuckyPoolInfo* _this = reinterpret_cast< CSLuckyPoolInfo* >(object);
  (void)_this;
}
void CSLuckyPoolInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSLuckyPoolInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSLuckyPoolInfo& CSLuckyPoolInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSLuckyPoolInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSLuckyPoolInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSLuckyPoolInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSLuckyPoolInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSLuckyPoolInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSLuckyPoolInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSLuckyPoolInfo)
  return target;
}

size_t CSLuckyPoolInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSLuckyPoolInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSLuckyPoolInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSLuckyPoolInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSLuckyPoolInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSLuckyPoolInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSLuckyPoolInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSLuckyPoolInfo)
    MergeFrom(*source);
  }
}

void CSLuckyPoolInfo::MergeFrom(const CSLuckyPoolInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSLuckyPoolInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSLuckyPoolInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSLuckyPoolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLuckyPoolInfo::CopyFrom(const CSLuckyPoolInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSLuckyPoolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLuckyPoolInfo::IsInitialized() const {
  return true;
}

void CSLuckyPoolInfo::InternalSwap(CSLuckyPoolInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSLuckyPoolInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCLuckyPoolInfo::_Internal {
 public:
};

SCLuckyPoolInfo::SCLuckyPoolInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCLuckyPoolInfo)
}
SCLuckyPoolInfo::SCLuckyPoolInfo(const SCLuckyPoolInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&count_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCLuckyPoolInfo)
}

void SCLuckyPoolInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&count_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&count_)) + sizeof(max_));
}

SCLuckyPoolInfo::~SCLuckyPoolInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.SCLuckyPoolInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCLuckyPoolInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCLuckyPoolInfo::ArenaDtor(void* object) {
  SCLuckyPoolInfo* _this = reinterpret_cast< SCLuckyPoolInfo* >(object);
  (void)_this;
}
void SCLuckyPoolInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCLuckyPoolInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCLuckyPoolInfo& SCLuckyPoolInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCLuckyPoolInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCLuckyPoolInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCLuckyPoolInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&count_)) + sizeof(max_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCLuckyPoolInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCLuckyPoolInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCLuckyPoolInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_count(), target);
  }

  // int32 max = 2;
  if (this->max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCLuckyPoolInfo)
  return target;
}

size_t SCLuckyPoolInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCLuckyPoolInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  // int32 max = 2;
  if (this->max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCLuckyPoolInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCLuckyPoolInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCLuckyPoolInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCLuckyPoolInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCLuckyPoolInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCLuckyPoolInfo)
    MergeFrom(*source);
  }
}

void SCLuckyPoolInfo::MergeFrom(const SCLuckyPoolInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCLuckyPoolInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.max() != 0) {
    _internal_set_max(from._internal_max());
  }
}

void SCLuckyPoolInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCLuckyPoolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCLuckyPoolInfo::CopyFrom(const SCLuckyPoolInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCLuckyPoolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCLuckyPoolInfo::IsInitialized() const {
  return true;
}

void SCLuckyPoolInfo::InternalSwap(SCLuckyPoolInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCLuckyPoolInfo, max_)
      + sizeof(SCLuckyPoolInfo::max_)
      - PROTOBUF_FIELD_OFFSET(SCLuckyPoolInfo, count_)>(
          reinterpret_cast<char*>(&count_),
          reinterpret_cast<char*>(&other->count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCLuckyPoolInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSLuckyPoolDraw::_Internal {
 public:
};

CSLuckyPoolDraw::CSLuckyPoolDraw(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSLuckyPoolDraw)
}
CSLuckyPoolDraw::CSLuckyPoolDraw(const CSLuckyPoolDraw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSLuckyPoolDraw)
}

void CSLuckyPoolDraw::SharedCtor() {
}

CSLuckyPoolDraw::~CSLuckyPoolDraw() {
  // @@protoc_insertion_point(destructor:BYDLD.CSLuckyPoolDraw)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSLuckyPoolDraw::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSLuckyPoolDraw::ArenaDtor(void* object) {
  CSLuckyPoolDraw* _this = reinterpret_cast< CSLuckyPoolDraw* >(object);
  (void)_this;
}
void CSLuckyPoolDraw::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSLuckyPoolDraw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSLuckyPoolDraw& CSLuckyPoolDraw::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSLuckyPoolDraw_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSLuckyPoolDraw::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSLuckyPoolDraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSLuckyPoolDraw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSLuckyPoolDraw::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSLuckyPoolDraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSLuckyPoolDraw)
  return target;
}

size_t CSLuckyPoolDraw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSLuckyPoolDraw)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSLuckyPoolDraw::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSLuckyPoolDraw)
  GOOGLE_DCHECK_NE(&from, this);
  const CSLuckyPoolDraw* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSLuckyPoolDraw>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSLuckyPoolDraw)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSLuckyPoolDraw)
    MergeFrom(*source);
  }
}

void CSLuckyPoolDraw::MergeFrom(const CSLuckyPoolDraw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSLuckyPoolDraw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSLuckyPoolDraw::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSLuckyPoolDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLuckyPoolDraw::CopyFrom(const CSLuckyPoolDraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSLuckyPoolDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLuckyPoolDraw::IsInitialized() const {
  return true;
}

void CSLuckyPoolDraw::InternalSwap(CSLuckyPoolDraw* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSLuckyPoolDraw::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCLuckyPoolDraw::_Internal {
 public:
  static const ::BYDLD::Object3& item(const SCLuckyPoolDraw* msg);
};

const ::BYDLD::Object3&
SCLuckyPoolDraw::_Internal::item(const SCLuckyPoolDraw* msg) {
  return *msg->item_;
}
SCLuckyPoolDraw::SCLuckyPoolDraw(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCLuckyPoolDraw)
}
SCLuckyPoolDraw::SCLuckyPoolDraw(const SCLuckyPoolDraw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item()) {
    item_ = new ::BYDLD::Object3(*from.item_);
  } else {
    item_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCLuckyPoolDraw)
}

void SCLuckyPoolDraw::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCLuckyPoolDraw_BYDLD_2eproto.base);
  item_ = nullptr;
}

SCLuckyPoolDraw::~SCLuckyPoolDraw() {
  // @@protoc_insertion_point(destructor:BYDLD.SCLuckyPoolDraw)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCLuckyPoolDraw::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete item_;
}

void SCLuckyPoolDraw::ArenaDtor(void* object) {
  SCLuckyPoolDraw* _this = reinterpret_cast< SCLuckyPoolDraw* >(object);
  (void)_this;
}
void SCLuckyPoolDraw::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCLuckyPoolDraw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCLuckyPoolDraw& SCLuckyPoolDraw::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCLuckyPoolDraw_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCLuckyPoolDraw::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCLuckyPoolDraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCLuckyPoolDraw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BYDLD.Object3 item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCLuckyPoolDraw::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCLuckyPoolDraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BYDLD.Object3 item = 1;
  if (this->has_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::item(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCLuckyPoolDraw)
  return target;
}

size_t SCLuckyPoolDraw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCLuckyPoolDraw)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BYDLD.Object3 item = 1;
  if (this->has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCLuckyPoolDraw::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCLuckyPoolDraw)
  GOOGLE_DCHECK_NE(&from, this);
  const SCLuckyPoolDraw* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCLuckyPoolDraw>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCLuckyPoolDraw)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCLuckyPoolDraw)
    MergeFrom(*source);
  }
}

void SCLuckyPoolDraw::MergeFrom(const SCLuckyPoolDraw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCLuckyPoolDraw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_item()) {
    _internal_mutable_item()->::BYDLD::Object3::MergeFrom(from._internal_item());
  }
}

void SCLuckyPoolDraw::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCLuckyPoolDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCLuckyPoolDraw::CopyFrom(const SCLuckyPoolDraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCLuckyPoolDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCLuckyPoolDraw::IsInitialized() const {
  return true;
}

void SCLuckyPoolDraw::InternalSwap(SCLuckyPoolDraw* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(item_, other->item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCLuckyPoolDraw::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TridentRankList::_Internal {
 public:
};

TridentRankList::TridentRankList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.TridentRankList)
}
TridentRankList::TridentRankList(const TridentRankList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick_name().empty()) {
    nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nick_name(), 
      GetArena());
  }
  date_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date_time().empty()) {
    date_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_date_time(), 
      GetArena());
  }
  ::memcpy(&user_dbid_, &from.user_dbid_,
    static_cast<size_t>(reinterpret_cast<char*>(&rank_) -
    reinterpret_cast<char*>(&user_dbid_)) + sizeof(rank_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.TridentRankList)
}

void TridentRankList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TridentRankList_BYDLD_2eproto.base);
  nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_dbid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&rank_) -
      reinterpret_cast<char*>(&user_dbid_)) + sizeof(rank_));
}

TridentRankList::~TridentRankList() {
  // @@protoc_insertion_point(destructor:BYDLD.TridentRankList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TridentRankList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nick_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TridentRankList::ArenaDtor(void* object) {
  TridentRankList* _this = reinterpret_cast< TridentRankList* >(object);
  (void)_this;
}
void TridentRankList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TridentRankList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TridentRankList& TridentRankList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TridentRankList_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void TridentRankList::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.TridentRankList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nick_name_.ClearToEmpty();
  date_time_.ClearToEmpty();
  ::memset(&user_dbid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rank_) -
      reinterpret_cast<char*>(&user_dbid_)) + sizeof(rank_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TridentRankList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_dbid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_dbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nick_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nick_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.TridentRankList.nick_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 continue_times = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          continue_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string date_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_date_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.TridentRankList.date_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rank = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TridentRankList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.TridentRankList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_dbid = 1;
  if (this->user_dbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_dbid(), target);
  }

  // string nick_name = 2;
  if (this->nick_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick_name().data(), static_cast<int>(this->_internal_nick_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.TridentRankList.nick_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nick_name(), target);
  }

  // int32 continue_times = 3;
  if (this->continue_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_continue_times(), target);
  }

  // string date_time = 4;
  if (this->date_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date_time().data(), static_cast<int>(this->_internal_date_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.TridentRankList.date_time");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_date_time(), target);
  }

  // int32 rank = 5;
  if (this->rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_rank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.TridentRankList)
  return target;
}

size_t TridentRankList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.TridentRankList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick_name = 2;
  if (this->nick_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick_name());
  }

  // string date_time = 4;
  if (this->date_time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date_time());
  }

  // int32 user_dbid = 1;
  if (this->user_dbid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_dbid());
  }

  // int32 continue_times = 3;
  if (this->continue_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_continue_times());
  }

  // int32 rank = 5;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rank());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TridentRankList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.TridentRankList)
  GOOGLE_DCHECK_NE(&from, this);
  const TridentRankList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TridentRankList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.TridentRankList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.TridentRankList)
    MergeFrom(*source);
  }
}

void TridentRankList::MergeFrom(const TridentRankList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.TridentRankList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nick_name().size() > 0) {
    _internal_set_nick_name(from._internal_nick_name());
  }
  if (from.date_time().size() > 0) {
    _internal_set_date_time(from._internal_date_time());
  }
  if (from.user_dbid() != 0) {
    _internal_set_user_dbid(from._internal_user_dbid());
  }
  if (from.continue_times() != 0) {
    _internal_set_continue_times(from._internal_continue_times());
  }
  if (from.rank() != 0) {
    _internal_set_rank(from._internal_rank());
  }
}

void TridentRankList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.TridentRankList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TridentRankList::CopyFrom(const TridentRankList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.TridentRankList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TridentRankList::IsInitialized() const {
  return true;
}

void TridentRankList::InternalSwap(TridentRankList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nick_name_.Swap(&other->nick_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  date_time_.Swap(&other->date_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TridentRankList, rank_)
      + sizeof(TridentRankList::rank_)
      - PROTOBUF_FIELD_OFFSET(TridentRankList, user_dbid_)>(
          reinterpret_cast<char*>(&user_dbid_),
          reinterpret_cast<char*>(&other->user_dbid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TridentRankList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCTridentRankResult::_Internal {
 public:
};

SCTridentRankResult::SCTridentRankResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cur_ranks_(arena),
  his_ranks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCTridentRankResult)
}
SCTridentRankResult::SCTridentRankResult(const SCTridentRankResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cur_ranks_(from.cur_ranks_),
      his_ranks_(from.his_ranks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCTridentRankResult)
}

void SCTridentRankResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCTridentRankResult_BYDLD_2eproto.base);
}

SCTridentRankResult::~SCTridentRankResult() {
  // @@protoc_insertion_point(destructor:BYDLD.SCTridentRankResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCTridentRankResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCTridentRankResult::ArenaDtor(void* object) {
  SCTridentRankResult* _this = reinterpret_cast< SCTridentRankResult* >(object);
  (void)_this;
}
void SCTridentRankResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCTridentRankResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCTridentRankResult& SCTridentRankResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCTridentRankResult_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCTridentRankResult::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCTridentRankResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cur_ranks_.Clear();
  his_ranks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCTridentRankResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.TridentRankList cur_ranks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cur_ranks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.TridentRankList his_ranks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_his_ranks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCTridentRankResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCTridentRankResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.TridentRankList cur_ranks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cur_ranks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cur_ranks(i), target, stream);
  }

  // repeated .BYDLD.TridentRankList his_ranks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_his_ranks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_his_ranks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCTridentRankResult)
  return target;
}

size_t SCTridentRankResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCTridentRankResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.TridentRankList cur_ranks = 1;
  total_size += 1UL * this->_internal_cur_ranks_size();
  for (const auto& msg : this->cur_ranks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .BYDLD.TridentRankList his_ranks = 2;
  total_size += 1UL * this->_internal_his_ranks_size();
  for (const auto& msg : this->his_ranks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCTridentRankResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCTridentRankResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SCTridentRankResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCTridentRankResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCTridentRankResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCTridentRankResult)
    MergeFrom(*source);
  }
}

void SCTridentRankResult::MergeFrom(const SCTridentRankResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCTridentRankResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cur_ranks_.MergeFrom(from.cur_ranks_);
  his_ranks_.MergeFrom(from.his_ranks_);
}

void SCTridentRankResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCTridentRankResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCTridentRankResult::CopyFrom(const SCTridentRankResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCTridentRankResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCTridentRankResult::IsInitialized() const {
  return true;
}

void SCTridentRankResult::InternalSwap(SCTridentRankResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cur_ranks_.InternalSwap(&other->cur_ranks_);
  his_ranks_.InternalSwap(&other->his_ranks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCTridentRankResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSBigSmallWinInfo::_Internal {
 public:
};

CSBigSmallWinInfo::CSBigSmallWinInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSBigSmallWinInfo)
}
CSBigSmallWinInfo::CSBigSmallWinInfo(const CSBigSmallWinInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chair_idx_ = from.chair_idx_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSBigSmallWinInfo)
}

void CSBigSmallWinInfo::SharedCtor() {
  chair_idx_ = 0;
}

CSBigSmallWinInfo::~CSBigSmallWinInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.CSBigSmallWinInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSBigSmallWinInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSBigSmallWinInfo::ArenaDtor(void* object) {
  CSBigSmallWinInfo* _this = reinterpret_cast< CSBigSmallWinInfo* >(object);
  (void)_this;
}
void CSBigSmallWinInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSBigSmallWinInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSBigSmallWinInfo& CSBigSmallWinInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSBigSmallWinInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSBigSmallWinInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSBigSmallWinInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chair_idx_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSBigSmallWinInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSBigSmallWinInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSBigSmallWinInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSBigSmallWinInfo)
  return target;
}

size_t CSBigSmallWinInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSBigSmallWinInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSBigSmallWinInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSBigSmallWinInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSBigSmallWinInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSBigSmallWinInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSBigSmallWinInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSBigSmallWinInfo)
    MergeFrom(*source);
  }
}

void CSBigSmallWinInfo::MergeFrom(const CSBigSmallWinInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSBigSmallWinInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
}

void CSBigSmallWinInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSBigSmallWinInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBigSmallWinInfo::CopyFrom(const CSBigSmallWinInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSBigSmallWinInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBigSmallWinInfo::IsInitialized() const {
  return true;
}

void CSBigSmallWinInfo::InternalSwap(CSBigSmallWinInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(chair_idx_, other->chair_idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSBigSmallWinInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCBigSmallWinInfo::_Internal {
 public:
};

SCBigSmallWinInfo::SCBigSmallWinInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCBigSmallWinInfo)
}
SCBigSmallWinInfo::SCBigSmallWinInfo(const SCBigSmallWinInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  date_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date_time().empty()) {
    date_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_date_time(), 
      GetArena());
  }
  ::memcpy(&cur_win_times_, &from.cur_win_times_,
    static_cast<size_t>(reinterpret_cast<char*>(&today_win_times_) -
    reinterpret_cast<char*>(&cur_win_times_)) + sizeof(today_win_times_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCBigSmallWinInfo)
}

void SCBigSmallWinInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCBigSmallWinInfo_BYDLD_2eproto.base);
  date_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cur_win_times_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&today_win_times_) -
      reinterpret_cast<char*>(&cur_win_times_)) + sizeof(today_win_times_));
}

SCBigSmallWinInfo::~SCBigSmallWinInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.SCBigSmallWinInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCBigSmallWinInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  date_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SCBigSmallWinInfo::ArenaDtor(void* object) {
  SCBigSmallWinInfo* _this = reinterpret_cast< SCBigSmallWinInfo* >(object);
  (void)_this;
}
void SCBigSmallWinInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCBigSmallWinInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCBigSmallWinInfo& SCBigSmallWinInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCBigSmallWinInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCBigSmallWinInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCBigSmallWinInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  date_time_.ClearToEmpty();
  ::memset(&cur_win_times_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&today_win_times_) -
      reinterpret_cast<char*>(&cur_win_times_)) + sizeof(today_win_times_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCBigSmallWinInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cur_win_times = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cur_win_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 today_win_times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          today_win_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string date_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_date_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.SCBigSmallWinInfo.date_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCBigSmallWinInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCBigSmallWinInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cur_win_times = 1;
  if (this->cur_win_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cur_win_times(), target);
  }

  // int32 today_win_times = 2;
  if (this->today_win_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_today_win_times(), target);
  }

  // string date_time = 3;
  if (this->date_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date_time().data(), static_cast<int>(this->_internal_date_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.SCBigSmallWinInfo.date_time");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_date_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCBigSmallWinInfo)
  return target;
}

size_t SCBigSmallWinInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCBigSmallWinInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string date_time = 3;
  if (this->date_time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date_time());
  }

  // int32 cur_win_times = 1;
  if (this->cur_win_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_win_times());
  }

  // int32 today_win_times = 2;
  if (this->today_win_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_today_win_times());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCBigSmallWinInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCBigSmallWinInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCBigSmallWinInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCBigSmallWinInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCBigSmallWinInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCBigSmallWinInfo)
    MergeFrom(*source);
  }
}

void SCBigSmallWinInfo::MergeFrom(const SCBigSmallWinInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCBigSmallWinInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.date_time().size() > 0) {
    _internal_set_date_time(from._internal_date_time());
  }
  if (from.cur_win_times() != 0) {
    _internal_set_cur_win_times(from._internal_cur_win_times());
  }
  if (from.today_win_times() != 0) {
    _internal_set_today_win_times(from._internal_today_win_times());
  }
}

void SCBigSmallWinInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCBigSmallWinInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCBigSmallWinInfo::CopyFrom(const SCBigSmallWinInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCBigSmallWinInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCBigSmallWinInfo::IsInitialized() const {
  return true;
}

void SCBigSmallWinInfo::InternalSwap(SCBigSmallWinInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  date_time_.Swap(&other->date_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCBigSmallWinInfo, today_win_times_)
      + sizeof(SCBigSmallWinInfo::today_win_times_)
      - PROTOBUF_FIELD_OFFSET(SCBigSmallWinInfo, cur_win_times_)>(
          reinterpret_cast<char*>(&cur_win_times_),
          reinterpret_cast<char*>(&other->cur_win_times_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCBigSmallWinInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSBigSmallRecord::_Internal {
 public:
};

CSBigSmallRecord::CSBigSmallRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSBigSmallRecord)
}
CSBigSmallRecord::CSBigSmallRecord(const CSBigSmallRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  max_get_ = from.max_get_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSBigSmallRecord)
}

void CSBigSmallRecord::SharedCtor() {
  max_get_ = 0;
}

CSBigSmallRecord::~CSBigSmallRecord() {
  // @@protoc_insertion_point(destructor:BYDLD.CSBigSmallRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSBigSmallRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSBigSmallRecord::ArenaDtor(void* object) {
  CSBigSmallRecord* _this = reinterpret_cast< CSBigSmallRecord* >(object);
  (void)_this;
}
void CSBigSmallRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSBigSmallRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSBigSmallRecord& CSBigSmallRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSBigSmallRecord_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSBigSmallRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSBigSmallRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_get_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSBigSmallRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 max_get = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_get_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSBigSmallRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSBigSmallRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_get = 1;
  if (this->max_get() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_get(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSBigSmallRecord)
  return target;
}

size_t CSBigSmallRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSBigSmallRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 max_get = 1;
  if (this->max_get() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_get());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSBigSmallRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSBigSmallRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const CSBigSmallRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSBigSmallRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSBigSmallRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSBigSmallRecord)
    MergeFrom(*source);
  }
}

void CSBigSmallRecord::MergeFrom(const CSBigSmallRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSBigSmallRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_get() != 0) {
    _internal_set_max_get(from._internal_max_get());
  }
}

void CSBigSmallRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSBigSmallRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBigSmallRecord::CopyFrom(const CSBigSmallRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSBigSmallRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBigSmallRecord::IsInitialized() const {
  return true;
}

void CSBigSmallRecord::InternalSwap(CSBigSmallRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(max_get_, other->max_get_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSBigSmallRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BigSmallRecord::_Internal {
 public:
};

BigSmallRecord::BigSmallRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.BigSmallRecord)
}
BigSmallRecord::BigSmallRecord(const BigSmallRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dices_(from.dices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.BigSmallRecord)
}

void BigSmallRecord::SharedCtor() {
}

BigSmallRecord::~BigSmallRecord() {
  // @@protoc_insertion_point(destructor:BYDLD.BigSmallRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BigSmallRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BigSmallRecord::ArenaDtor(void* object) {
  BigSmallRecord* _this = reinterpret_cast< BigSmallRecord* >(object);
  (void)_this;
}
void BigSmallRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BigSmallRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BigSmallRecord& BigSmallRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BigSmallRecord_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void BigSmallRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.BigSmallRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BigSmallRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 dices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_dices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_dices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BigSmallRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.BigSmallRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 dices = 1;
  {
    int byte_size = _dices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_dices(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.BigSmallRecord)
  return target;
}

size_t BigSmallRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.BigSmallRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 dices = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->dices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BigSmallRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.BigSmallRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const BigSmallRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BigSmallRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.BigSmallRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.BigSmallRecord)
    MergeFrom(*source);
  }
}

void BigSmallRecord::MergeFrom(const BigSmallRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.BigSmallRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dices_.MergeFrom(from.dices_);
}

void BigSmallRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.BigSmallRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigSmallRecord::CopyFrom(const BigSmallRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.BigSmallRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigSmallRecord::IsInitialized() const {
  return true;
}

void BigSmallRecord::InternalSwap(BigSmallRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dices_.InternalSwap(&other->dices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BigSmallRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCBigSmallRecord::_Internal {
 public:
};

SCBigSmallRecord::SCBigSmallRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCBigSmallRecord)
}
SCBigSmallRecord::SCBigSmallRecord(const SCBigSmallRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      records_(from.records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCBigSmallRecord)
}

void SCBigSmallRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCBigSmallRecord_BYDLD_2eproto.base);
}

SCBigSmallRecord::~SCBigSmallRecord() {
  // @@protoc_insertion_point(destructor:BYDLD.SCBigSmallRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCBigSmallRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCBigSmallRecord::ArenaDtor(void* object) {
  SCBigSmallRecord* _this = reinterpret_cast< SCBigSmallRecord* >(object);
  (void)_this;
}
void SCBigSmallRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCBigSmallRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCBigSmallRecord& SCBigSmallRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCBigSmallRecord_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCBigSmallRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCBigSmallRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  records_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCBigSmallRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.BigSmallRecord records = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCBigSmallRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCBigSmallRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.BigSmallRecord records = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCBigSmallRecord)
  return target;
}

size_t SCBigSmallRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCBigSmallRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.BigSmallRecord records = 1;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCBigSmallRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCBigSmallRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const SCBigSmallRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCBigSmallRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCBigSmallRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCBigSmallRecord)
    MergeFrom(*source);
  }
}

void SCBigSmallRecord::MergeFrom(const SCBigSmallRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCBigSmallRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  records_.MergeFrom(from.records_);
}

void SCBigSmallRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCBigSmallRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCBigSmallRecord::CopyFrom(const SCBigSmallRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCBigSmallRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCBigSmallRecord::IsInitialized() const {
  return true;
}

void SCBigSmallRecord::InternalSwap(SCBigSmallRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  records_.InternalSwap(&other->records_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCBigSmallRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ItemEnableInfo::_Internal {
 public:
};

ItemEnableInfo::ItemEnableInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.ItemEnableInfo)
}
ItemEnableInfo::ItemEnableInfo(const ItemEnableInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&name_, &from.name_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_) -
    reinterpret_cast<char*>(&name_)) + sizeof(enable_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.ItemEnableInfo)
}

void ItemEnableInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&name_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&enable_) -
      reinterpret_cast<char*>(&name_)) + sizeof(enable_));
}

ItemEnableInfo::~ItemEnableInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.ItemEnableInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ItemEnableInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ItemEnableInfo::ArenaDtor(void* object) {
  ItemEnableInfo* _this = reinterpret_cast< ItemEnableInfo* >(object);
  (void)_this;
}
void ItemEnableInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ItemEnableInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ItemEnableInfo& ItemEnableInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ItemEnableInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void ItemEnableInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.ItemEnableInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_) -
      reinterpret_cast<char*>(&name_)) + sizeof(enable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemEnableInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ItemEnableInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.ItemEnableInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 name = 1;
  if (this->name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_name(), target);
  }

  // bool enable = 2;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.ItemEnableInfo)
  return target;
}

size_t ItemEnableInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.ItemEnableInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 name = 1;
  if (this->name() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_name());
  }

  // bool enable = 2;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ItemEnableInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.ItemEnableInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ItemEnableInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ItemEnableInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.ItemEnableInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.ItemEnableInfo)
    MergeFrom(*source);
  }
}

void ItemEnableInfo::MergeFrom(const ItemEnableInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.ItemEnableInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name() != 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
}

void ItemEnableInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.ItemEnableInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemEnableInfo::CopyFrom(const ItemEnableInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.ItemEnableInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemEnableInfo::IsInitialized() const {
  return true;
}

void ItemEnableInfo::InternalSwap(ItemEnableInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemEnableInfo, enable_)
      + sizeof(ItemEnableInfo::enable_)
      - PROTOBUF_FIELD_OFFSET(ItemEnableInfo, name_)>(
          reinterpret_cast<char*>(&name_),
          reinterpret_cast<char*>(&other->name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemEnableInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ItemEnableNotice::_Internal {
 public:
};

ItemEnableNotice::ItemEnableNotice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.ItemEnableNotice)
}
ItemEnableNotice::ItemEnableNotice(const ItemEnableNotice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.ItemEnableNotice)
}

void ItemEnableNotice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ItemEnableNotice_BYDLD_2eproto.base);
}

ItemEnableNotice::~ItemEnableNotice() {
  // @@protoc_insertion_point(destructor:BYDLD.ItemEnableNotice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ItemEnableNotice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ItemEnableNotice::ArenaDtor(void* object) {
  ItemEnableNotice* _this = reinterpret_cast< ItemEnableNotice* >(object);
  (void)_this;
}
void ItemEnableNotice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ItemEnableNotice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ItemEnableNotice& ItemEnableNotice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ItemEnableNotice_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void ItemEnableNotice::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.ItemEnableNotice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemEnableNotice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.ItemEnableInfo items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ItemEnableNotice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.ItemEnableNotice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.ItemEnableInfo items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.ItemEnableNotice)
  return target;
}

size_t ItemEnableNotice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.ItemEnableNotice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.ItemEnableInfo items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ItemEnableNotice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.ItemEnableNotice)
  GOOGLE_DCHECK_NE(&from, this);
  const ItemEnableNotice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ItemEnableNotice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.ItemEnableNotice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.ItemEnableNotice)
    MergeFrom(*source);
  }
}

void ItemEnableNotice::MergeFrom(const ItemEnableNotice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.ItemEnableNotice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void ItemEnableNotice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.ItemEnableNotice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemEnableNotice::CopyFrom(const ItemEnableNotice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.ItemEnableNotice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemEnableNotice::IsInitialized() const {
  return true;
}

void ItemEnableNotice::InternalSwap(ItemEnableNotice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemEnableNotice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RewardTask::_Internal {
 public:
};

RewardTask::RewardTask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.RewardTask)
}
RewardTask::RewardTask(const RewardTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&taskid_, &from.taskid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&taskid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.RewardTask)
}

void RewardTask::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&taskid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&taskid_)) + sizeof(status_));
}

RewardTask::~RewardTask() {
  // @@protoc_insertion_point(destructor:BYDLD.RewardTask)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RewardTask::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RewardTask::ArenaDtor(void* object) {
  RewardTask* _this = reinterpret_cast< RewardTask* >(object);
  (void)_this;
}
void RewardTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RewardTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RewardTask& RewardTask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RewardTask_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void RewardTask::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.RewardTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&taskid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&taskid_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RewardTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RewardTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.RewardTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 taskId = 1;
  if (this->taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_taskid(), target);
  }

  // int32 status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.RewardTask)
  return target;
}

size_t RewardTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.RewardTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 taskId = 1;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_taskid());
  }

  // int32 status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RewardTask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.RewardTask)
  GOOGLE_DCHECK_NE(&from, this);
  const RewardTask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RewardTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.RewardTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.RewardTask)
    MergeFrom(*source);
  }
}

void RewardTask::MergeFrom(const RewardTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.RewardTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taskid() != 0) {
    _internal_set_taskid(from._internal_taskid());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void RewardTask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.RewardTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardTask::CopyFrom(const RewardTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.RewardTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardTask::IsInitialized() const {
  return true;
}

void RewardTask::InternalSwap(RewardTask* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RewardTask, status_)
      + sizeof(RewardTask::status_)
      - PROTOBUF_FIELD_OFFSET(RewardTask, taskid_)>(
          reinterpret_cast<char*>(&taskid_),
          reinterpret_cast<char*>(&other->taskid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RewardTask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RewardConf::_Internal {
 public:
};

RewardConf::RewardConf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.RewardConf)
}
RewardConf::RewardConf(const RewardConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&taskid_, &from.taskid_,
    static_cast<size_t>(reinterpret_cast<char*>(&naward_) -
    reinterpret_cast<char*>(&taskid_)) + sizeof(naward_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.RewardConf)
}

void RewardConf::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&taskid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&naward_) -
      reinterpret_cast<char*>(&taskid_)) + sizeof(naward_));
}

RewardConf::~RewardConf() {
  // @@protoc_insertion_point(destructor:BYDLD.RewardConf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RewardConf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RewardConf::ArenaDtor(void* object) {
  RewardConf* _this = reinterpret_cast< RewardConf* >(object);
  (void)_this;
}
void RewardConf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RewardConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RewardConf& RewardConf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RewardConf_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void RewardConf::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.RewardConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&taskid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&naward_) -
      reinterpret_cast<char*>(&taskid_)) + sizeof(naward_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RewardConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 taskID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nAward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          naward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RewardConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.RewardConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 taskID = 1;
  if (this->taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_taskid(), target);
  }

  // int32 nAward = 2;
  if (this->naward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_naward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.RewardConf)
  return target;
}

size_t RewardConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.RewardConf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 taskID = 1;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_taskid());
  }

  // int32 nAward = 2;
  if (this->naward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_naward());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RewardConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.RewardConf)
  GOOGLE_DCHECK_NE(&from, this);
  const RewardConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RewardConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.RewardConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.RewardConf)
    MergeFrom(*source);
  }
}

void RewardConf::MergeFrom(const RewardConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.RewardConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taskid() != 0) {
    _internal_set_taskid(from._internal_taskid());
  }
  if (from.naward() != 0) {
    _internal_set_naward(from._internal_naward());
  }
}

void RewardConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.RewardConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardConf::CopyFrom(const RewardConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.RewardConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardConf::IsInitialized() const {
  return true;
}

void RewardConf::InternalSwap(RewardConf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RewardConf, naward_)
      + sizeof(RewardConf::naward_)
      - PROTOBUF_FIELD_OFFSET(RewardConf, taskid_)>(
          reinterpret_cast<char*>(&taskid_),
          reinterpret_cast<char*>(&other->taskid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RewardConf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSReqRewardAddTask::_Internal {
 public:
};

CSReqRewardAddTask::CSReqRewardAddTask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSReqRewardAddTask)
}
CSReqRewardAddTask::CSReqRewardAddTask(const CSReqRewardAddTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&taskid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(taskid_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSReqRewardAddTask)
}

void CSReqRewardAddTask::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&taskid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(taskid_));
}

CSReqRewardAddTask::~CSReqRewardAddTask() {
  // @@protoc_insertion_point(destructor:BYDLD.CSReqRewardAddTask)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSReqRewardAddTask::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSReqRewardAddTask::ArenaDtor(void* object) {
  CSReqRewardAddTask* _this = reinterpret_cast< CSReqRewardAddTask* >(object);
  (void)_this;
}
void CSReqRewardAddTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSReqRewardAddTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSReqRewardAddTask& CSReqRewardAddTask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSReqRewardAddTask_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSReqRewardAddTask::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSReqRewardAddTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&taskid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(taskid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSReqRewardAddTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 taskID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSReqRewardAddTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSReqRewardAddTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 taskID = 2;
  if (this->taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_taskid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSReqRewardAddTask)
  return target;
}

size_t CSReqRewardAddTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSReqRewardAddTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 taskID = 2;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_taskid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSReqRewardAddTask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSReqRewardAddTask)
  GOOGLE_DCHECK_NE(&from, this);
  const CSReqRewardAddTask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSReqRewardAddTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSReqRewardAddTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSReqRewardAddTask)
    MergeFrom(*source);
  }
}

void CSReqRewardAddTask::MergeFrom(const CSReqRewardAddTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSReqRewardAddTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.taskid() != 0) {
    _internal_set_taskid(from._internal_taskid());
  }
}

void CSReqRewardAddTask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSReqRewardAddTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSReqRewardAddTask::CopyFrom(const CSReqRewardAddTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSReqRewardAddTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReqRewardAddTask::IsInitialized() const {
  return true;
}

void CSReqRewardAddTask::InternalSwap(CSReqRewardAddTask* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSReqRewardAddTask, taskid_)
      + sizeof(CSReqRewardAddTask::taskid_)
      - PROTOBUF_FIELD_OFFSET(CSReqRewardAddTask, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSReqRewardAddTask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCRepRewardTaskList::_Internal {
 public:
};

SCRepRewardTaskList::SCRepRewardTaskList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCRepRewardTaskList)
}
SCRepRewardTaskList::SCRepRewardTaskList(const SCRepRewardTaskList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tlist_(from.tlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCRepRewardTaskList)
}

void SCRepRewardTaskList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCRepRewardTaskList_BYDLD_2eproto.base);
  id_ = 0;
}

SCRepRewardTaskList::~SCRepRewardTaskList() {
  // @@protoc_insertion_point(destructor:BYDLD.SCRepRewardTaskList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCRepRewardTaskList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCRepRewardTaskList::ArenaDtor(void* object) {
  SCRepRewardTaskList* _this = reinterpret_cast< SCRepRewardTaskList* >(object);
  (void)_this;
}
void SCRepRewardTaskList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCRepRewardTaskList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCRepRewardTaskList& SCRepRewardTaskList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCRepRewardTaskList_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCRepRewardTaskList::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCRepRewardTaskList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tlist_.Clear();
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCRepRewardTaskList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.RewardTask tList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCRepRewardTaskList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCRepRewardTaskList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated .BYDLD.RewardTask tList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCRepRewardTaskList)
  return target;
}

size_t SCRepRewardTaskList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCRepRewardTaskList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.RewardTask tList = 2;
  total_size += 1UL * this->_internal_tlist_size();
  for (const auto& msg : this->tlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCRepRewardTaskList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCRepRewardTaskList)
  GOOGLE_DCHECK_NE(&from, this);
  const SCRepRewardTaskList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCRepRewardTaskList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCRepRewardTaskList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCRepRewardTaskList)
    MergeFrom(*source);
  }
}

void SCRepRewardTaskList::MergeFrom(const SCRepRewardTaskList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCRepRewardTaskList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tlist_.MergeFrom(from.tlist_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void SCRepRewardTaskList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCRepRewardTaskList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCRepRewardTaskList::CopyFrom(const SCRepRewardTaskList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCRepRewardTaskList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCRepRewardTaskList::IsInitialized() const {
  return true;
}

void SCRepRewardTaskList::InternalSwap(SCRepRewardTaskList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tlist_.InternalSwap(&other->tlist_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCRepRewardTaskList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCRewardTaskFinish::_Internal {
 public:
};

SCRewardTaskFinish::SCRewardTaskFinish(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCRewardTaskFinish)
}
SCRewardTaskFinish::SCRewardTaskFinish(const SCRewardTaskFinish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tlist_(from.tlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&money_) -
    reinterpret_cast<char*>(&result_)) + sizeof(money_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCRewardTaskFinish)
}

void SCRewardTaskFinish::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCRewardTaskFinish_BYDLD_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&money_) -
      reinterpret_cast<char*>(&result_)) + sizeof(money_));
}

SCRewardTaskFinish::~SCRewardTaskFinish() {
  // @@protoc_insertion_point(destructor:BYDLD.SCRewardTaskFinish)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCRewardTaskFinish::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCRewardTaskFinish::ArenaDtor(void* object) {
  SCRewardTaskFinish* _this = reinterpret_cast< SCRewardTaskFinish* >(object);
  (void)_this;
}
void SCRewardTaskFinish::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCRewardTaskFinish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCRewardTaskFinish& SCRewardTaskFinish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCRewardTaskFinish_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCRewardTaskFinish::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCRewardTaskFinish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tlist_.Clear();
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&money_) -
      reinterpret_cast<char*>(&result_)) + sizeof(money_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCRewardTaskFinish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 money = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.RewardTask tList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCRewardTaskFinish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCRewardTaskFinish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // int32 money = 2;
  if (this->money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_money(), target);
  }

  // repeated .BYDLD.RewardTask tList = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_tlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCRewardTaskFinish)
  return target;
}

size_t SCRewardTaskFinish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCRewardTaskFinish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.RewardTask tList = 3;
  total_size += 1UL * this->_internal_tlist_size();
  for (const auto& msg : this->tlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  // int32 money = 2;
  if (this->money() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_money());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCRewardTaskFinish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCRewardTaskFinish)
  GOOGLE_DCHECK_NE(&from, this);
  const SCRewardTaskFinish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCRewardTaskFinish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCRewardTaskFinish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCRewardTaskFinish)
    MergeFrom(*source);
  }
}

void SCRewardTaskFinish::MergeFrom(const SCRewardTaskFinish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCRewardTaskFinish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tlist_.MergeFrom(from.tlist_);
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.money() != 0) {
    _internal_set_money(from._internal_money());
  }
}

void SCRewardTaskFinish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCRewardTaskFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCRewardTaskFinish::CopyFrom(const SCRewardTaskFinish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCRewardTaskFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCRewardTaskFinish::IsInitialized() const {
  return true;
}

void SCRewardTaskFinish::InternalSwap(SCRewardTaskFinish* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tlist_.InternalSwap(&other->tlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCRewardTaskFinish, money_)
      + sizeof(SCRewardTaskFinish::money_)
      - PROTOBUF_FIELD_OFFSET(SCRewardTaskFinish, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCRewardTaskFinish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSyncRewardTaskResult::_Internal {
 public:
  static const ::BYDLD::SCRewardTaskFinish& result(const SCSyncRewardTaskResult* msg);
};

const ::BYDLD::SCRewardTaskFinish&
SCSyncRewardTaskResult::_Internal::result(const SCSyncRewardTaskResult* msg) {
  return *msg->result_;
}
SCSyncRewardTaskResult::SCSyncRewardTaskResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCSyncRewardTaskResult)
}
SCSyncRewardTaskResult::SCSyncRewardTaskResult(const SCSyncRewardTaskResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::BYDLD::SCRewardTaskFinish(*from.result_);
  } else {
    result_ = nullptr;
  }
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&trident_multi_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(trident_multi_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCSyncRewardTaskResult)
}

void SCSyncRewardTaskResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCSyncRewardTaskResult_BYDLD_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&trident_multi_) -
      reinterpret_cast<char*>(&result_)) + sizeof(trident_multi_));
}

SCSyncRewardTaskResult::~SCSyncRewardTaskResult() {
  // @@protoc_insertion_point(destructor:BYDLD.SCSyncRewardTaskResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSyncRewardTaskResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void SCSyncRewardTaskResult::ArenaDtor(void* object) {
  SCSyncRewardTaskResult* _this = reinterpret_cast< SCSyncRewardTaskResult* >(object);
  (void)_this;
}
void SCSyncRewardTaskResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSyncRewardTaskResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSyncRewardTaskResult& SCSyncRewardTaskResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSyncRewardTaskResult_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCSyncRewardTaskResult::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCSyncRewardTaskResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trident_multi_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(trident_multi_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSyncRewardTaskResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BYDLD.SCRewardTaskFinish result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 earn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          earn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fish_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 get_peilv = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          get_peilv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 multiple = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 crit_multiple = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          crit_multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ingot_multi = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ingot_multi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trident_multi = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          trident_multi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSyncRewardTaskResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCSyncRewardTaskResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // .BYDLD.SCRewardTaskFinish result = 2;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::result(this), target, stream);
  }

  // int32 earn = 3;
  if (this->earn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_earn(), target);
  }

  // int32 fish_id = 4;
  if (this->fish_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_fish_id(), target);
  }

  // int32 get_peilv = 5;
  if (this->get_peilv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_get_peilv(), target);
  }

  // int32 multiple = 6;
  if (this->multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_multiple(), target);
  }

  // int32 crit_multiple = 7;
  if (this->crit_multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_crit_multiple(), target);
  }

  // int32 ingot_multi = 8;
  if (this->ingot_multi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_ingot_multi(), target);
  }

  // int32 trident_multi = 9;
  if (this->trident_multi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_trident_multi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCSyncRewardTaskResult)
  return target;
}

size_t SCSyncRewardTaskResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCSyncRewardTaskResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BYDLD.SCRewardTaskFinish result = 2;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 earn = 3;
  if (this->earn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_earn());
  }

  // int32 fish_id = 4;
  if (this->fish_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_id());
  }

  // int32 get_peilv = 5;
  if (this->get_peilv() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_get_peilv());
  }

  // int32 multiple = 6;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_multiple());
  }

  // int32 crit_multiple = 7;
  if (this->crit_multiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_crit_multiple());
  }

  // int32 ingot_multi = 8;
  if (this->ingot_multi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ingot_multi());
  }

  // int32 trident_multi = 9;
  if (this->trident_multi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trident_multi());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSyncRewardTaskResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCSyncRewardTaskResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSyncRewardTaskResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSyncRewardTaskResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCSyncRewardTaskResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCSyncRewardTaskResult)
    MergeFrom(*source);
  }
}

void SCSyncRewardTaskResult::MergeFrom(const SCSyncRewardTaskResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCSyncRewardTaskResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::BYDLD::SCRewardTaskFinish::MergeFrom(from._internal_result());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.earn() != 0) {
    _internal_set_earn(from._internal_earn());
  }
  if (from.fish_id() != 0) {
    _internal_set_fish_id(from._internal_fish_id());
  }
  if (from.get_peilv() != 0) {
    _internal_set_get_peilv(from._internal_get_peilv());
  }
  if (from.multiple() != 0) {
    _internal_set_multiple(from._internal_multiple());
  }
  if (from.crit_multiple() != 0) {
    _internal_set_crit_multiple(from._internal_crit_multiple());
  }
  if (from.ingot_multi() != 0) {
    _internal_set_ingot_multi(from._internal_ingot_multi());
  }
  if (from.trident_multi() != 0) {
    _internal_set_trident_multi(from._internal_trident_multi());
  }
}

void SCSyncRewardTaskResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCSyncRewardTaskResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSyncRewardTaskResult::CopyFrom(const SCSyncRewardTaskResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCSyncRewardTaskResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSyncRewardTaskResult::IsInitialized() const {
  return true;
}

void SCSyncRewardTaskResult::InternalSwap(SCSyncRewardTaskResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCSyncRewardTaskResult, trident_multi_)
      + sizeof(SCSyncRewardTaskResult::trident_multi_)
      - PROTOBUF_FIELD_OFFSET(SCSyncRewardTaskResult, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSyncRewardTaskResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSReqRewardRecord::_Internal {
 public:
};

CSReqRewardRecord::CSReqRewardRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSReqRewardRecord)
}
CSReqRewardRecord::CSReqRewardRecord(const CSReqRewardRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSReqRewardRecord)
}

void CSReqRewardRecord::SharedCtor() {
  id_ = 0;
}

CSReqRewardRecord::~CSReqRewardRecord() {
  // @@protoc_insertion_point(destructor:BYDLD.CSReqRewardRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSReqRewardRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSReqRewardRecord::ArenaDtor(void* object) {
  CSReqRewardRecord* _this = reinterpret_cast< CSReqRewardRecord* >(object);
  (void)_this;
}
void CSReqRewardRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSReqRewardRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSReqRewardRecord& CSReqRewardRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSReqRewardRecord_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSReqRewardRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSReqRewardRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSReqRewardRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSReqRewardRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSReqRewardRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSReqRewardRecord)
  return target;
}

size_t CSReqRewardRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSReqRewardRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSReqRewardRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSReqRewardRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const CSReqRewardRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSReqRewardRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSReqRewardRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSReqRewardRecord)
    MergeFrom(*source);
  }
}

void CSReqRewardRecord::MergeFrom(const CSReqRewardRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSReqRewardRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void CSReqRewardRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSReqRewardRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSReqRewardRecord::CopyFrom(const CSReqRewardRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSReqRewardRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReqRewardRecord::IsInitialized() const {
  return true;
}

void CSReqRewardRecord::InternalSwap(CSReqRewardRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSReqRewardRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCRepRewardTaskRecord::_Internal {
 public:
};

SCRepRewardTaskRecord::SCRepRewardTaskRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  record_(arena),
  conflist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCRepRewardTaskRecord)
}
SCRepRewardTaskRecord::SCRepRewardTaskRecord(const SCRepRewardTaskRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      record_(from.record_),
      conflist_(from.conflist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cost_) -
    reinterpret_cast<char*>(&id_)) + sizeof(cost_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCRepRewardTaskRecord)
}

void SCRepRewardTaskRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCRepRewardTaskRecord_BYDLD_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cost_) -
      reinterpret_cast<char*>(&id_)) + sizeof(cost_));
}

SCRepRewardTaskRecord::~SCRepRewardTaskRecord() {
  // @@protoc_insertion_point(destructor:BYDLD.SCRepRewardTaskRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCRepRewardTaskRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCRepRewardTaskRecord::ArenaDtor(void* object) {
  SCRepRewardTaskRecord* _this = reinterpret_cast< SCRepRewardTaskRecord* >(object);
  (void)_this;
}
void SCRepRewardTaskRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCRepRewardTaskRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCRepRewardTaskRecord& SCRepRewardTaskRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCRepRewardTaskRecord_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCRepRewardTaskRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCRepRewardTaskRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_.Clear();
  conflist_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cost_) -
      reinterpret_cast<char*>(&id_)) + sizeof(cost_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCRepRewardTaskRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nRecord = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nrecord_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cost = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.SCRewardTaskFinish record = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.RewardConf confList = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conflist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCRepRewardTaskRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCRepRewardTaskRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 nRecord = 2;
  if (this->nrecord() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_nrecord(), target);
  }

  // int32 cost = 3;
  if (this->cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cost(), target);
  }

  // repeated .BYDLD.SCRewardTaskFinish record = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_record_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_record(i), target, stream);
  }

  // repeated .BYDLD.RewardConf confList = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_conflist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_conflist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCRepRewardTaskRecord)
  return target;
}

size_t SCRepRewardTaskRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCRepRewardTaskRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.SCRewardTaskFinish record = 4;
  total_size += 1UL * this->_internal_record_size();
  for (const auto& msg : this->record_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .BYDLD.RewardConf confList = 5;
  total_size += 1UL * this->_internal_conflist_size();
  for (const auto& msg : this->conflist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 nRecord = 2;
  if (this->nrecord() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nrecord());
  }

  // int32 cost = 3;
  if (this->cost() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cost());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCRepRewardTaskRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCRepRewardTaskRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const SCRepRewardTaskRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCRepRewardTaskRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCRepRewardTaskRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCRepRewardTaskRecord)
    MergeFrom(*source);
  }
}

void SCRepRewardTaskRecord::MergeFrom(const SCRepRewardTaskRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCRepRewardTaskRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  record_.MergeFrom(from.record_);
  conflist_.MergeFrom(from.conflist_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.nrecord() != 0) {
    _internal_set_nrecord(from._internal_nrecord());
  }
  if (from.cost() != 0) {
    _internal_set_cost(from._internal_cost());
  }
}

void SCRepRewardTaskRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCRepRewardTaskRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCRepRewardTaskRecord::CopyFrom(const SCRepRewardTaskRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCRepRewardTaskRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCRepRewardTaskRecord::IsInitialized() const {
  return true;
}

void SCRepRewardTaskRecord::InternalSwap(SCRepRewardTaskRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  record_.InternalSwap(&other->record_);
  conflist_.InternalSwap(&other->conflist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCRepRewardTaskRecord, cost_)
      + sizeof(SCRepRewardTaskRecord::cost_)
      - PROTOBUF_FIELD_OFFSET(SCRepRewardTaskRecord, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCRepRewardTaskRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSRewardChangeAuto::_Internal {
 public:
};

CSRewardChangeAuto::CSRewardChangeAuto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSRewardChangeAuto)
}
CSRewardChangeAuto::CSRewardChangeAuto(const CSRewardChangeAuto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  autotimes_ = from.autotimes_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSRewardChangeAuto)
}

void CSRewardChangeAuto::SharedCtor() {
  autotimes_ = 0;
}

CSRewardChangeAuto::~CSRewardChangeAuto() {
  // @@protoc_insertion_point(destructor:BYDLD.CSRewardChangeAuto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSRewardChangeAuto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSRewardChangeAuto::ArenaDtor(void* object) {
  CSRewardChangeAuto* _this = reinterpret_cast< CSRewardChangeAuto* >(object);
  (void)_this;
}
void CSRewardChangeAuto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSRewardChangeAuto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSRewardChangeAuto& CSRewardChangeAuto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSRewardChangeAuto_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSRewardChangeAuto::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSRewardChangeAuto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  autotimes_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRewardChangeAuto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 autoTimes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          autotimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSRewardChangeAuto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSRewardChangeAuto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 autoTimes = 1;
  if (this->autotimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_autotimes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSRewardChangeAuto)
  return target;
}

size_t CSRewardChangeAuto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSRewardChangeAuto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 autoTimes = 1;
  if (this->autotimes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_autotimes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSRewardChangeAuto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSRewardChangeAuto)
  GOOGLE_DCHECK_NE(&from, this);
  const CSRewardChangeAuto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSRewardChangeAuto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSRewardChangeAuto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSRewardChangeAuto)
    MergeFrom(*source);
  }
}

void CSRewardChangeAuto::MergeFrom(const CSRewardChangeAuto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSRewardChangeAuto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.autotimes() != 0) {
    _internal_set_autotimes(from._internal_autotimes());
  }
}

void CSRewardChangeAuto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSRewardChangeAuto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRewardChangeAuto::CopyFrom(const CSRewardChangeAuto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSRewardChangeAuto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRewardChangeAuto::IsInitialized() const {
  return true;
}

void CSRewardChangeAuto::InternalSwap(CSRewardChangeAuto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(autotimes_, other->autotimes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRewardChangeAuto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCRewardAutoRep::_Internal {
 public:
};

SCRewardAutoRep::SCRewardAutoRep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCRewardAutoRep)
}
SCRewardAutoRep::SCRewardAutoRep(const SCRewardAutoRep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&accept_) -
    reinterpret_cast<char*>(&status_)) + sizeof(accept_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCRewardAutoRep)
}

void SCRewardAutoRep::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&accept_) -
      reinterpret_cast<char*>(&status_)) + sizeof(accept_));
}

SCRewardAutoRep::~SCRewardAutoRep() {
  // @@protoc_insertion_point(destructor:BYDLD.SCRewardAutoRep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCRewardAutoRep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCRewardAutoRep::ArenaDtor(void* object) {
  SCRewardAutoRep* _this = reinterpret_cast< SCRewardAutoRep* >(object);
  (void)_this;
}
void SCRewardAutoRep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCRewardAutoRep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCRewardAutoRep& SCRewardAutoRep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCRewardAutoRep_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCRewardAutoRep::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCRewardAutoRep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accept_) -
      reinterpret_cast<char*>(&status_)) + sizeof(accept_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCRewardAutoRep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool accept = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          accept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCRewardAutoRep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCRewardAutoRep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // bool accept = 2;
  if (this->accept() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_accept(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCRewardAutoRep)
  return target;
}

size_t SCRewardAutoRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCRewardAutoRep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // bool accept = 2;
  if (this->accept() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCRewardAutoRep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCRewardAutoRep)
  GOOGLE_DCHECK_NE(&from, this);
  const SCRewardAutoRep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCRewardAutoRep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCRewardAutoRep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCRewardAutoRep)
    MergeFrom(*source);
  }
}

void SCRewardAutoRep::MergeFrom(const SCRewardAutoRep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCRewardAutoRep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.accept() != 0) {
    _internal_set_accept(from._internal_accept());
  }
}

void SCRewardAutoRep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCRewardAutoRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCRewardAutoRep::CopyFrom(const SCRewardAutoRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCRewardAutoRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCRewardAutoRep::IsInitialized() const {
  return true;
}

void SCRewardAutoRep::InternalSwap(SCRewardAutoRep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCRewardAutoRep, accept_)
      + sizeof(SCRewardAutoRep::accept_)
      - PROTOBUF_FIELD_OFFSET(SCRewardAutoRep, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCRewardAutoRep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSeaCrabCreate::_Internal {
 public:
};

SCSeaCrabCreate::SCSeaCrabCreate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCSeaCrabCreate)
}
SCSeaCrabCreate::SCSeaCrabCreate(const SCSeaCrabCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCSeaCrabCreate)
}

void SCSeaCrabCreate::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(status_));
}

SCSeaCrabCreate::~SCSeaCrabCreate() {
  // @@protoc_insertion_point(destructor:BYDLD.SCSeaCrabCreate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSeaCrabCreate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSeaCrabCreate::ArenaDtor(void* object) {
  SCSeaCrabCreate* _this = reinterpret_cast< SCSeaCrabCreate* >(object);
  (void)_this;
}
void SCSeaCrabCreate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSeaCrabCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSeaCrabCreate& SCSeaCrabCreate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSeaCrabCreate_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCSeaCrabCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCSeaCrabCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSeaCrabCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSeaCrabCreate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCSeaCrabCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCSeaCrabCreate)
  return target;
}

size_t SCSeaCrabCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCSeaCrabCreate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSeaCrabCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCSeaCrabCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSeaCrabCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSeaCrabCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCSeaCrabCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCSeaCrabCreate)
    MergeFrom(*source);
  }
}

void SCSeaCrabCreate::MergeFrom(const SCSeaCrabCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCSeaCrabCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SCSeaCrabCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCSeaCrabCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSeaCrabCreate::CopyFrom(const SCSeaCrabCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCSeaCrabCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSeaCrabCreate::IsInitialized() const {
  return true;
}

void SCSeaCrabCreate::InternalSwap(SCSeaCrabCreate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCSeaCrabCreate, status_)
      + sizeof(SCSeaCrabCreate::status_)
      - PROTOBUF_FIELD_OFFSET(SCSeaCrabCreate, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSeaCrabCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSyncCrabStatus::_Internal {
 public:
};

CSSyncCrabStatus::CSSyncCrabStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSSyncCrabStatus)
}
CSSyncCrabStatus::CSSyncCrabStatus(const CSSyncCrabStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSSyncCrabStatus)
}

void CSSyncCrabStatus::SharedCtor() {
}

CSSyncCrabStatus::~CSSyncCrabStatus() {
  // @@protoc_insertion_point(destructor:BYDLD.CSSyncCrabStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSyncCrabStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSSyncCrabStatus::ArenaDtor(void* object) {
  CSSyncCrabStatus* _this = reinterpret_cast< CSSyncCrabStatus* >(object);
  (void)_this;
}
void CSSyncCrabStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSyncCrabStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSyncCrabStatus& CSSyncCrabStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSyncCrabStatus_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSSyncCrabStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSSyncCrabStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSyncCrabStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSyncCrabStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSSyncCrabStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSSyncCrabStatus)
  return target;
}

size_t CSSyncCrabStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSSyncCrabStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSyncCrabStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSSyncCrabStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSyncCrabStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSyncCrabStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSSyncCrabStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSSyncCrabStatus)
    MergeFrom(*source);
  }
}

void CSSyncCrabStatus::MergeFrom(const CSSyncCrabStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSSyncCrabStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSSyncCrabStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSSyncCrabStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSyncCrabStatus::CopyFrom(const CSSyncCrabStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSSyncCrabStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSyncCrabStatus::IsInitialized() const {
  return true;
}

void CSSyncCrabStatus::InternalSwap(CSSyncCrabStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSyncCrabStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSyncCrabStatus::_Internal {
 public:
};

SCSyncCrabStatus::SCSyncCrabStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCSyncCrabStatus)
}
SCSyncCrabStatus::SCSyncCrabStatus(const SCSyncCrabStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&multiple_2_) -
    reinterpret_cast<char*>(&status_)) + sizeof(multiple_2_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCSyncCrabStatus)
}

void SCSyncCrabStatus::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&multiple_2_) -
      reinterpret_cast<char*>(&status_)) + sizeof(multiple_2_));
}

SCSyncCrabStatus::~SCSyncCrabStatus() {
  // @@protoc_insertion_point(destructor:BYDLD.SCSyncCrabStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSyncCrabStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSyncCrabStatus::ArenaDtor(void* object) {
  SCSyncCrabStatus* _this = reinterpret_cast< SCSyncCrabStatus* >(object);
  (void)_this;
}
void SCSyncCrabStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSyncCrabStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSyncCrabStatus& SCSyncCrabStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSyncCrabStatus_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCSyncCrabStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCSyncCrabStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multiple_2_) -
      reinterpret_cast<char*>(&status_)) + sizeof(multiple_2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSyncCrabStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 multiple_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          multiple_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 multiple_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          multiple_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSyncCrabStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCSyncCrabStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // int32 chair_id = 2;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chair_id(), target);
  }

  // int32 multiple_1 = 3;
  if (this->multiple_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_multiple_1(), target);
  }

  // int32 multiple_2 = 4;
  if (this->multiple_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_multiple_2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCSyncCrabStatus)
  return target;
}

size_t SCSyncCrabStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCSyncCrabStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 chair_id = 2;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 multiple_1 = 3;
  if (this->multiple_1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_multiple_1());
  }

  // int32 multiple_2 = 4;
  if (this->multiple_2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_multiple_2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSyncCrabStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCSyncCrabStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSyncCrabStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSyncCrabStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCSyncCrabStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCSyncCrabStatus)
    MergeFrom(*source);
  }
}

void SCSyncCrabStatus::MergeFrom(const SCSyncCrabStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCSyncCrabStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.multiple_1() != 0) {
    _internal_set_multiple_1(from._internal_multiple_1());
  }
  if (from.multiple_2() != 0) {
    _internal_set_multiple_2(from._internal_multiple_2());
  }
}

void SCSyncCrabStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCSyncCrabStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSyncCrabStatus::CopyFrom(const SCSyncCrabStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCSyncCrabStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSyncCrabStatus::IsInitialized() const {
  return true;
}

void SCSyncCrabStatus::InternalSwap(SCSyncCrabStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCSyncCrabStatus, multiple_2_)
      + sizeof(SCSyncCrabStatus::multiple_2_)
      - PROTOBUF_FIELD_OFFSET(SCSyncCrabStatus, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSyncCrabStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSDragonBallEnd::_Internal {
 public:
};

CSDragonBallEnd::CSDragonBallEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSDragonBallEnd)
}
CSDragonBallEnd::CSDragonBallEnd(const CSDragonBallEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSDragonBallEnd)
}

void CSDragonBallEnd::SharedCtor() {
}

CSDragonBallEnd::~CSDragonBallEnd() {
  // @@protoc_insertion_point(destructor:BYDLD.CSDragonBallEnd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSDragonBallEnd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSDragonBallEnd::ArenaDtor(void* object) {
  CSDragonBallEnd* _this = reinterpret_cast< CSDragonBallEnd* >(object);
  (void)_this;
}
void CSDragonBallEnd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSDragonBallEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSDragonBallEnd& CSDragonBallEnd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSDragonBallEnd_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSDragonBallEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSDragonBallEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDragonBallEnd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSDragonBallEnd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSDragonBallEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSDragonBallEnd)
  return target;
}

size_t CSDragonBallEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSDragonBallEnd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSDragonBallEnd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSDragonBallEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const CSDragonBallEnd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSDragonBallEnd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSDragonBallEnd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSDragonBallEnd)
    MergeFrom(*source);
  }
}

void CSDragonBallEnd::MergeFrom(const CSDragonBallEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSDragonBallEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSDragonBallEnd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSDragonBallEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDragonBallEnd::CopyFrom(const CSDragonBallEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSDragonBallEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDragonBallEnd::IsInitialized() const {
  return true;
}

void CSDragonBallEnd::InternalSwap(CSDragonBallEnd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDragonBallEnd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCDragonBallRes::_Internal {
 public:
};

SCDragonBallRes::SCDragonBallRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCDragonBallRes)
}
SCDragonBallRes::SCDragonBallRes(const SCDragonBallRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_award_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(total_award_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCDragonBallRes)
}

void SCDragonBallRes::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&total_award_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(total_award_));
}

SCDragonBallRes::~SCDragonBallRes() {
  // @@protoc_insertion_point(destructor:BYDLD.SCDragonBallRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCDragonBallRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCDragonBallRes::ArenaDtor(void* object) {
  SCDragonBallRes* _this = reinterpret_cast< SCDragonBallRes* >(object);
  (void)_this;
}
void SCDragonBallRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCDragonBallRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCDragonBallRes& SCDragonBallRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCDragonBallRes_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCDragonBallRes::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCDragonBallRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_award_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(total_award_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCDragonBallRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lock_ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lock_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 base_ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          base_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_award = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_award_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCDragonBallRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCDragonBallRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 lock_ratio = 2;
  if (this->lock_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_lock_ratio(), target);
  }

  // int32 base_ratio = 3;
  if (this->base_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_base_ratio(), target);
  }

  // int32 total_award = 4;
  if (this->total_award() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_total_award(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCDragonBallRes)
  return target;
}

size_t SCDragonBallRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCDragonBallRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 lock_ratio = 2;
  if (this->lock_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lock_ratio());
  }

  // int32 base_ratio = 3;
  if (this->base_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_base_ratio());
  }

  // int32 total_award = 4;
  if (this->total_award() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_award());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCDragonBallRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCDragonBallRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SCDragonBallRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCDragonBallRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCDragonBallRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCDragonBallRes)
    MergeFrom(*source);
  }
}

void SCDragonBallRes::MergeFrom(const SCDragonBallRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCDragonBallRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.lock_ratio() != 0) {
    _internal_set_lock_ratio(from._internal_lock_ratio());
  }
  if (from.base_ratio() != 0) {
    _internal_set_base_ratio(from._internal_base_ratio());
  }
  if (from.total_award() != 0) {
    _internal_set_total_award(from._internal_total_award());
  }
}

void SCDragonBallRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCDragonBallRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCDragonBallRes::CopyFrom(const SCDragonBallRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCDragonBallRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCDragonBallRes::IsInitialized() const {
  return true;
}

void SCDragonBallRes::InternalSwap(SCDragonBallRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCDragonBallRes, total_award_)
      + sizeof(SCDragonBallRes::total_award_)
      - PROTOBUF_FIELD_OFFSET(SCDragonBallRes, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCDragonBallRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DevouredFish::_Internal {
 public:
};

DevouredFish::DevouredFish(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.DevouredFish)
}
DevouredFish::DevouredFish(const DevouredFish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fish_uid_, &from.fish_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&earn_) -
    reinterpret_cast<char*>(&fish_uid_)) + sizeof(earn_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.DevouredFish)
}

void DevouredFish::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fish_uid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&earn_) -
      reinterpret_cast<char*>(&fish_uid_)) + sizeof(earn_));
}

DevouredFish::~DevouredFish() {
  // @@protoc_insertion_point(destructor:BYDLD.DevouredFish)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DevouredFish::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DevouredFish::ArenaDtor(void* object) {
  DevouredFish* _this = reinterpret_cast< DevouredFish* >(object);
  (void)_this;
}
void DevouredFish::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DevouredFish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DevouredFish& DevouredFish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DevouredFish_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void DevouredFish::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.DevouredFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fish_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&earn_) -
      reinterpret_cast<char*>(&fish_uid_)) + sizeof(earn_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DevouredFish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 fish_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fish_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 earn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          earn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DevouredFish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.DevouredFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fish_uid = 1;
  if (this->fish_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fish_uid(), target);
  }

  // int32 earn = 2;
  if (this->earn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_earn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.DevouredFish)
  return target;
}

size_t DevouredFish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.DevouredFish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 fish_uid = 1;
  if (this->fish_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_uid());
  }

  // int32 earn = 2;
  if (this->earn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_earn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DevouredFish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.DevouredFish)
  GOOGLE_DCHECK_NE(&from, this);
  const DevouredFish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DevouredFish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.DevouredFish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.DevouredFish)
    MergeFrom(*source);
  }
}

void DevouredFish::MergeFrom(const DevouredFish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.DevouredFish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fish_uid() != 0) {
    _internal_set_fish_uid(from._internal_fish_uid());
  }
  if (from.earn() != 0) {
    _internal_set_earn(from._internal_earn());
  }
}

void DevouredFish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.DevouredFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DevouredFish::CopyFrom(const DevouredFish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.DevouredFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevouredFish::IsInitialized() const {
  return true;
}

void DevouredFish::InternalSwap(DevouredFish* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DevouredFish, earn_)
      + sizeof(DevouredFish::earn_)
      - PROTOBUF_FIELD_OFFSET(DevouredFish, fish_uid_)>(
          reinterpret_cast<char*>(&fish_uid_),
          reinterpret_cast<char*>(&other->fish_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DevouredFish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSDevourHit::_Internal {
 public:
};

CSDevourHit::CSDevourHit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  screen_fishes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSDevourHit)
}
CSDevourHit::CSDevourHit(const CSDevourHit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      screen_fishes_(from.screen_fishes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSDevourHit)
}

void CSDevourHit::SharedCtor() {
}

CSDevourHit::~CSDevourHit() {
  // @@protoc_insertion_point(destructor:BYDLD.CSDevourHit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSDevourHit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSDevourHit::ArenaDtor(void* object) {
  CSDevourHit* _this = reinterpret_cast< CSDevourHit* >(object);
  (void)_this;
}
void CSDevourHit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSDevourHit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSDevourHit& CSDevourHit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSDevourHit_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSDevourHit::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSDevourHit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  screen_fishes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDevourHit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 screen_fishes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_screen_fishes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_screen_fishes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSDevourHit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSDevourHit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 screen_fishes = 1;
  {
    int byte_size = _screen_fishes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_screen_fishes(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSDevourHit)
  return target;
}

size_t CSDevourHit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSDevourHit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 screen_fishes = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->screen_fishes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _screen_fishes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSDevourHit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSDevourHit)
  GOOGLE_DCHECK_NE(&from, this);
  const CSDevourHit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSDevourHit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSDevourHit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSDevourHit)
    MergeFrom(*source);
  }
}

void CSDevourHit::MergeFrom(const CSDevourHit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSDevourHit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  screen_fishes_.MergeFrom(from.screen_fishes_);
}

void CSDevourHit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSDevourHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDevourHit::CopyFrom(const CSDevourHit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSDevourHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDevourHit::IsInitialized() const {
  return true;
}

void CSDevourHit::InternalSwap(CSDevourHit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  screen_fishes_.InternalSwap(&other->screen_fishes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDevourHit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCDevourHit::_Internal {
 public:
};

SCDevourHit::SCDevourHit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  devour_fishes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCDevourHit)
}
SCDevourHit::SCDevourHit(const SCDevourHit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      devour_fishes_(from.devour_fishes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&crit_, &from.crit_,
    static_cast<size_t>(reinterpret_cast<char*>(&ingot_multi_) -
    reinterpret_cast<char*>(&crit_)) + sizeof(ingot_multi_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCDevourHit)
}

void SCDevourHit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCDevourHit_BYDLD_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&crit_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ingot_multi_) -
      reinterpret_cast<char*>(&crit_)) + sizeof(ingot_multi_));
}

SCDevourHit::~SCDevourHit() {
  // @@protoc_insertion_point(destructor:BYDLD.SCDevourHit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCDevourHit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCDevourHit::ArenaDtor(void* object) {
  SCDevourHit* _this = reinterpret_cast< SCDevourHit* >(object);
  (void)_this;
}
void SCDevourHit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCDevourHit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCDevourHit& SCDevourHit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCDevourHit_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCDevourHit::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCDevourHit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devour_fishes_.Clear();
  ::memset(&crit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ingot_multi_) -
      reinterpret_cast<char*>(&crit_)) + sizeof(ingot_multi_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCDevourHit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.DevouredFish devour_fishes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devour_fishes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 crit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          crit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 multiple = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ingot_multi = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ingot_multi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCDevourHit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCDevourHit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.DevouredFish devour_fishes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_devour_fishes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_devour_fishes(i), target, stream);
  }

  // int32 crit = 2;
  if (this->crit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_crit(), target);
  }

  // int32 multiple = 3;
  if (this->multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_multiple(), target);
  }

  // int32 ingot_multi = 4;
  if (this->ingot_multi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ingot_multi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCDevourHit)
  return target;
}

size_t SCDevourHit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCDevourHit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.DevouredFish devour_fishes = 1;
  total_size += 1UL * this->_internal_devour_fishes_size();
  for (const auto& msg : this->devour_fishes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 crit = 2;
  if (this->crit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_crit());
  }

  // int32 multiple = 3;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_multiple());
  }

  // int32 ingot_multi = 4;
  if (this->ingot_multi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ingot_multi());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCDevourHit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCDevourHit)
  GOOGLE_DCHECK_NE(&from, this);
  const SCDevourHit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCDevourHit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCDevourHit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCDevourHit)
    MergeFrom(*source);
  }
}

void SCDevourHit::MergeFrom(const SCDevourHit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCDevourHit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devour_fishes_.MergeFrom(from.devour_fishes_);
  if (from.crit() != 0) {
    _internal_set_crit(from._internal_crit());
  }
  if (from.multiple() != 0) {
    _internal_set_multiple(from._internal_multiple());
  }
  if (from.ingot_multi() != 0) {
    _internal_set_ingot_multi(from._internal_ingot_multi());
  }
}

void SCDevourHit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCDevourHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCDevourHit::CopyFrom(const SCDevourHit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCDevourHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCDevourHit::IsInitialized() const {
  return true;
}

void SCDevourHit::InternalSwap(SCDevourHit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  devour_fishes_.InternalSwap(&other->devour_fishes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCDevourHit, ingot_multi_)
      + sizeof(SCDevourHit::ingot_multi_)
      - PROTOBUF_FIELD_OFFSET(SCDevourHit, crit_)>(
          reinterpret_cast<char*>(&crit_),
          reinterpret_cast<char*>(&other->crit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCDevourHit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OpenChestReward::_Internal {
 public:
  static const ::BYDLD::Decimal& num(const OpenChestReward* msg);
};

const ::BYDLD::Decimal&
OpenChestReward::_Internal::num(const OpenChestReward* msg) {
  return *msg->num_;
}
OpenChestReward::OpenChestReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.OpenChestReward)
}
OpenChestReward::OpenChestReward(const OpenChestReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_num()) {
    num_ = new ::BYDLD::Decimal(*from.num_);
  } else {
    num_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.OpenChestReward)
}

void OpenChestReward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpenChestReward_BYDLD_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&num_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&num_)) + sizeof(id_));
}

OpenChestReward::~OpenChestReward() {
  // @@protoc_insertion_point(destructor:BYDLD.OpenChestReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpenChestReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete num_;
}

void OpenChestReward::ArenaDtor(void* object) {
  OpenChestReward* _this = reinterpret_cast< OpenChestReward* >(object);
  (void)_this;
}
void OpenChestReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpenChestReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpenChestReward& OpenChestReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpenChestReward_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void OpenChestReward::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.OpenChestReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && num_ != nullptr) {
    delete num_;
  }
  num_ = nullptr;
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenChestReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BYDLD.Decimal num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_num(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpenChestReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.OpenChestReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .BYDLD.Decimal num = 2;
  if (this->has_num()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::num(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.OpenChestReward)
  return target;
}

size_t OpenChestReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.OpenChestReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BYDLD.Decimal num = 2;
  if (this->has_num()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *num_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenChestReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.OpenChestReward)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenChestReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpenChestReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.OpenChestReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.OpenChestReward)
    MergeFrom(*source);
  }
}

void OpenChestReward::MergeFrom(const OpenChestReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.OpenChestReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_num()) {
    _internal_mutable_num()->::BYDLD::Decimal::MergeFrom(from._internal_num());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void OpenChestReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.OpenChestReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenChestReward::CopyFrom(const OpenChestReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.OpenChestReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenChestReward::IsInitialized() const {
  return true;
}

void OpenChestReward::InternalSwap(OpenChestReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpenChestReward, id_)
      + sizeof(OpenChestReward::id_)
      - PROTOBUF_FIELD_OFFSET(OpenChestReward, num_)>(
          reinterpret_cast<char*>(&num_),
          reinterpret_cast<char*>(&other->num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenChestReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUpdateChestStatus::_Internal {
 public:
};

SCUpdateChestStatus::SCUpdateChestStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCUpdateChestStatus)
}
SCUpdateChestStatus::SCUpdateChestStatus(const SCUpdateChestStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chest_type_, &from.chest_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&available_reward_) -
    reinterpret_cast<char*>(&chest_type_)) + sizeof(available_reward_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCUpdateChestStatus)
}

void SCUpdateChestStatus::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chest_type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&available_reward_) -
      reinterpret_cast<char*>(&chest_type_)) + sizeof(available_reward_));
}

SCUpdateChestStatus::~SCUpdateChestStatus() {
  // @@protoc_insertion_point(destructor:BYDLD.SCUpdateChestStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUpdateChestStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCUpdateChestStatus::ArenaDtor(void* object) {
  SCUpdateChestStatus* _this = reinterpret_cast< SCUpdateChestStatus* >(object);
  (void)_this;
}
void SCUpdateChestStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUpdateChestStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUpdateChestStatus& SCUpdateChestStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUpdateChestStatus_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCUpdateChestStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCUpdateChestStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chest_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&available_reward_) -
      reinterpret_cast<char*>(&chest_type_)) + sizeof(available_reward_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUpdateChestStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_active = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BYDLD.ChestType chest_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_chest_type(static_cast<::BYDLD::ChestType>(val));
        } else goto handle_unusual;
        continue;
      // int32 total_progress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 remain_progress = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          remain_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool guide = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          guide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 available_reward = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          available_reward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUpdateChestStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCUpdateChestStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_active = 1;
  if (this->is_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_active(), target);
  }

  // .BYDLD.ChestType chest_type = 2;
  if (this->chest_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_chest_type(), target);
  }

  // int32 total_progress = 3;
  if (this->total_progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_progress(), target);
  }

  // int32 remain_progress = 4;
  if (this->remain_progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_remain_progress(), target);
  }

  // bool guide = 5;
  if (this->guide() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_guide(), target);
  }

  // int32 available_reward = 6;
  if (this->available_reward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_available_reward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCUpdateChestStatus)
  return target;
}

size_t SCUpdateChestStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCUpdateChestStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BYDLD.ChestType chest_type = 2;
  if (this->chest_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chest_type());
  }

  // int32 total_progress = 3;
  if (this->total_progress() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_progress());
  }

  // bool is_active = 1;
  if (this->is_active() != 0) {
    total_size += 1 + 1;
  }

  // bool guide = 5;
  if (this->guide() != 0) {
    total_size += 1 + 1;
  }

  // int32 remain_progress = 4;
  if (this->remain_progress() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_remain_progress());
  }

  // int32 available_reward = 6;
  if (this->available_reward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_available_reward());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUpdateChestStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCUpdateChestStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUpdateChestStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUpdateChestStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCUpdateChestStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCUpdateChestStatus)
    MergeFrom(*source);
  }
}

void SCUpdateChestStatus::MergeFrom(const SCUpdateChestStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCUpdateChestStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chest_type() != 0) {
    _internal_set_chest_type(from._internal_chest_type());
  }
  if (from.total_progress() != 0) {
    _internal_set_total_progress(from._internal_total_progress());
  }
  if (from.is_active() != 0) {
    _internal_set_is_active(from._internal_is_active());
  }
  if (from.guide() != 0) {
    _internal_set_guide(from._internal_guide());
  }
  if (from.remain_progress() != 0) {
    _internal_set_remain_progress(from._internal_remain_progress());
  }
  if (from.available_reward() != 0) {
    _internal_set_available_reward(from._internal_available_reward());
  }
}

void SCUpdateChestStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCUpdateChestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUpdateChestStatus::CopyFrom(const SCUpdateChestStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCUpdateChestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUpdateChestStatus::IsInitialized() const {
  return true;
}

void SCUpdateChestStatus::InternalSwap(SCUpdateChestStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCUpdateChestStatus, available_reward_)
      + sizeof(SCUpdateChestStatus::available_reward_)
      - PROTOBUF_FIELD_OFFSET(SCUpdateChestStatus, chest_type_)>(
          reinterpret_cast<char*>(&chest_type_),
          reinterpret_cast<char*>(&other->chest_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUpdateChestStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSChestConfig::_Internal {
 public:
};

CSChestConfig::CSChestConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSChestConfig)
}
CSChestConfig::CSChestConfig(const CSChestConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSChestConfig)
}

void CSChestConfig::SharedCtor() {
}

CSChestConfig::~CSChestConfig() {
  // @@protoc_insertion_point(destructor:BYDLD.CSChestConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSChestConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSChestConfig::ArenaDtor(void* object) {
  CSChestConfig* _this = reinterpret_cast< CSChestConfig* >(object);
  (void)_this;
}
void CSChestConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSChestConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSChestConfig& CSChestConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSChestConfig_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSChestConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSChestConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSChestConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSChestConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSChestConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSChestConfig)
  return target;
}

size_t CSChestConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSChestConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSChestConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSChestConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CSChestConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSChestConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSChestConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSChestConfig)
    MergeFrom(*source);
  }
}

void CSChestConfig::MergeFrom(const CSChestConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSChestConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSChestConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSChestConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSChestConfig::CopyFrom(const CSChestConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSChestConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSChestConfig::IsInitialized() const {
  return true;
}

void CSChestConfig::InternalSwap(CSChestConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSChestConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChestBrief::_Internal {
 public:
};

ChestBrief::ChestBrief(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reward_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.ChestBrief)
}
ChestBrief::ChestBrief(const ChestBrief& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reward_(from.reward_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chest_type_ = from.chest_type_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.ChestBrief)
}

void ChestBrief::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChestBrief_BYDLD_2eproto.base);
  chest_type_ = 0;
}

ChestBrief::~ChestBrief() {
  // @@protoc_insertion_point(destructor:BYDLD.ChestBrief)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChestBrief::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChestBrief::ArenaDtor(void* object) {
  ChestBrief* _this = reinterpret_cast< ChestBrief* >(object);
  (void)_this;
}
void ChestBrief::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChestBrief::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChestBrief& ChestBrief::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChestBrief_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void ChestBrief::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.ChestBrief)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_.Clear();
  chest_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChestBrief::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BYDLD.ChestType chest_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_chest_type(static_cast<::BYDLD::ChestType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.OpenChestReward reward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChestBrief::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.ChestBrief)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BYDLD.ChestType chest_type = 1;
  if (this->chest_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_chest_type(), target);
  }

  // repeated .BYDLD.OpenChestReward reward = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reward_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_reward(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.ChestBrief)
  return target;
}

size_t ChestBrief::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.ChestBrief)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.OpenChestReward reward = 2;
  total_size += 1UL * this->_internal_reward_size();
  for (const auto& msg : this->reward_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .BYDLD.ChestType chest_type = 1;
  if (this->chest_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chest_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChestBrief::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.ChestBrief)
  GOOGLE_DCHECK_NE(&from, this);
  const ChestBrief* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChestBrief>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.ChestBrief)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.ChestBrief)
    MergeFrom(*source);
  }
}

void ChestBrief::MergeFrom(const ChestBrief& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.ChestBrief)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_.MergeFrom(from.reward_);
  if (from.chest_type() != 0) {
    _internal_set_chest_type(from._internal_chest_type());
  }
}

void ChestBrief::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.ChestBrief)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChestBrief::CopyFrom(const ChestBrief& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.ChestBrief)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChestBrief::IsInitialized() const {
  return true;
}

void ChestBrief::InternalSwap(ChestBrief* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reward_.InternalSwap(&other->reward_);
  swap(chest_type_, other->chest_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChestBrief::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCChestConfig::_Internal {
 public:
};

SCChestConfig::SCChestConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  chest_brief_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCChestConfig)
}
SCChestConfig::SCChestConfig(const SCChestConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      chest_brief_list_(from.chest_brief_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&end_time_, &from.end_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_enable_) -
    reinterpret_cast<char*>(&end_time_)) + sizeof(is_enable_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCChestConfig)
}

void SCChestConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCChestConfig_BYDLD_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_enable_) -
      reinterpret_cast<char*>(&end_time_)) + sizeof(is_enable_));
}

SCChestConfig::~SCChestConfig() {
  // @@protoc_insertion_point(destructor:BYDLD.SCChestConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCChestConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCChestConfig::ArenaDtor(void* object) {
  SCChestConfig* _this = reinterpret_cast< SCChestConfig* >(object);
  (void)_this;
}
void SCChestConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCChestConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCChestConfig& SCChestConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCChestConfig_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCChestConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCChestConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chest_brief_list_.Clear();
  ::memset(&end_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_enable_) -
      reinterpret_cast<char*>(&end_time_)) + sizeof(is_enable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCChestConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 end_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BYDLD.ChestBrief chest_brief_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chest_brief_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 min_ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          min_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool auto_open = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          auto_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BYDLD.ChestAutoSelectOption auto_option = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_auto_option(static_cast<::BYDLD::ChestAutoSelectOption>(val));
        } else goto handle_unusual;
        continue;
      // bool is_enable = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCChestConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCChestConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 end_time = 1;
  if (this->end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_end_time(), target);
  }

  // repeated .BYDLD.ChestBrief chest_brief_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chest_brief_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_chest_brief_list(i), target, stream);
  }

  // int32 min_ratio = 3;
  if (this->min_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_min_ratio(), target);
  }

  // bool auto_open = 4;
  if (this->auto_open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_auto_open(), target);
  }

  // .BYDLD.ChestAutoSelectOption auto_option = 5;
  if (this->auto_option() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_auto_option(), target);
  }

  // bool is_enable = 6;
  if (this->is_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCChestConfig)
  return target;
}

size_t SCChestConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCChestConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.ChestBrief chest_brief_list = 2;
  total_size += 1UL * this->_internal_chest_brief_list_size();
  for (const auto& msg : this->chest_brief_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 end_time = 1;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_end_time());
  }

  // int32 min_ratio = 3;
  if (this->min_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_ratio());
  }

  // .BYDLD.ChestAutoSelectOption auto_option = 5;
  if (this->auto_option() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_auto_option());
  }

  // bool auto_open = 4;
  if (this->auto_open() != 0) {
    total_size += 1 + 1;
  }

  // bool is_enable = 6;
  if (this->is_enable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCChestConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCChestConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SCChestConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCChestConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCChestConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCChestConfig)
    MergeFrom(*source);
  }
}

void SCChestConfig::MergeFrom(const SCChestConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCChestConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chest_brief_list_.MergeFrom(from.chest_brief_list_);
  if (from.end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
  if (from.min_ratio() != 0) {
    _internal_set_min_ratio(from._internal_min_ratio());
  }
  if (from.auto_option() != 0) {
    _internal_set_auto_option(from._internal_auto_option());
  }
  if (from.auto_open() != 0) {
    _internal_set_auto_open(from._internal_auto_open());
  }
  if (from.is_enable() != 0) {
    _internal_set_is_enable(from._internal_is_enable());
  }
}

void SCChestConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCChestConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCChestConfig::CopyFrom(const SCChestConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCChestConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCChestConfig::IsInitialized() const {
  return true;
}

void SCChestConfig::InternalSwap(SCChestConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  chest_brief_list_.InternalSwap(&other->chest_brief_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCChestConfig, is_enable_)
      + sizeof(SCChestConfig::is_enable_)
      - PROTOBUF_FIELD_OFFSET(SCChestConfig, end_time_)>(
          reinterpret_cast<char*>(&end_time_),
          reinterpret_cast<char*>(&other->end_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCChestConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSOpenChest::_Internal {
 public:
};

CSOpenChest::CSOpenChest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSOpenChest)
}
CSOpenChest::CSOpenChest(const CSOpenChest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSOpenChest)
}

void CSOpenChest::SharedCtor() {
}

CSOpenChest::~CSOpenChest() {
  // @@protoc_insertion_point(destructor:BYDLD.CSOpenChest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOpenChest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSOpenChest::ArenaDtor(void* object) {
  CSOpenChest* _this = reinterpret_cast< CSOpenChest* >(object);
  (void)_this;
}
void CSOpenChest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOpenChest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSOpenChest& CSOpenChest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSOpenChest_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSOpenChest::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSOpenChest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOpenChest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOpenChest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSOpenChest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSOpenChest)
  return target;
}

size_t CSOpenChest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSOpenChest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOpenChest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSOpenChest)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOpenChest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOpenChest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSOpenChest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSOpenChest)
    MergeFrom(*source);
  }
}

void CSOpenChest::MergeFrom(const CSOpenChest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSOpenChest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSOpenChest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSOpenChest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOpenChest::CopyFrom(const CSOpenChest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSOpenChest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOpenChest::IsInitialized() const {
  return true;
}

void CSOpenChest::InternalSwap(CSOpenChest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOpenChest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCOpenChest::_Internal {
 public:
};

SCOpenChest::SCOpenChest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reward_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCOpenChest)
}
SCOpenChest::SCOpenChest(const SCOpenChest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reward_list_(from.reward_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auto_option_ = from.auto_option_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCOpenChest)
}

void SCOpenChest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCOpenChest_BYDLD_2eproto.base);
  auto_option_ = 0;
}

SCOpenChest::~SCOpenChest() {
  // @@protoc_insertion_point(destructor:BYDLD.SCOpenChest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCOpenChest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCOpenChest::ArenaDtor(void* object) {
  SCOpenChest* _this = reinterpret_cast< SCOpenChest* >(object);
  (void)_this;
}
void SCOpenChest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCOpenChest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCOpenChest& SCOpenChest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCOpenChest_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCOpenChest::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCOpenChest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_list_.Clear();
  auto_option_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCOpenChest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.OpenChestReward reward_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .BYDLD.ChestAutoSelectOption auto_option = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_auto_option(static_cast<::BYDLD::ChestAutoSelectOption>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCOpenChest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCOpenChest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.OpenChestReward reward_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reward_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_reward_list(i), target, stream);
  }

  // .BYDLD.ChestAutoSelectOption auto_option = 2;
  if (this->auto_option() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_auto_option(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCOpenChest)
  return target;
}

size_t SCOpenChest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCOpenChest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.OpenChestReward reward_list = 1;
  total_size += 1UL * this->_internal_reward_list_size();
  for (const auto& msg : this->reward_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .BYDLD.ChestAutoSelectOption auto_option = 2;
  if (this->auto_option() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_auto_option());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCOpenChest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCOpenChest)
  GOOGLE_DCHECK_NE(&from, this);
  const SCOpenChest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCOpenChest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCOpenChest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCOpenChest)
    MergeFrom(*source);
  }
}

void SCOpenChest::MergeFrom(const SCOpenChest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCOpenChest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_list_.MergeFrom(from.reward_list_);
  if (from.auto_option() != 0) {
    _internal_set_auto_option(from._internal_auto_option());
  }
}

void SCOpenChest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCOpenChest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCOpenChest::CopyFrom(const SCOpenChest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCOpenChest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCOpenChest::IsInitialized() const {
  return true;
}

void SCOpenChest::InternalSwap(SCOpenChest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reward_list_.InternalSwap(&other->reward_list_);
  swap(auto_option_, other->auto_option_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCOpenChest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSelectChestReward::_Internal {
 public:
};

CSSelectChestReward::CSSelectChestReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSSelectChestReward)
}
CSSelectChestReward::CSSelectChestReward(const CSSelectChestReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  select_index_ = from.select_index_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSSelectChestReward)
}

void CSSelectChestReward::SharedCtor() {
  select_index_ = 0;
}

CSSelectChestReward::~CSSelectChestReward() {
  // @@protoc_insertion_point(destructor:BYDLD.CSSelectChestReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSelectChestReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSSelectChestReward::ArenaDtor(void* object) {
  CSSelectChestReward* _this = reinterpret_cast< CSSelectChestReward* >(object);
  (void)_this;
}
void CSSelectChestReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSelectChestReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSelectChestReward& CSSelectChestReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSelectChestReward_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSSelectChestReward::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSSelectChestReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  select_index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSelectChestReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 select_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          select_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSelectChestReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSSelectChestReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 select_index = 1;
  if (this->select_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_select_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSSelectChestReward)
  return target;
}

size_t CSSelectChestReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSSelectChestReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 select_index = 1;
  if (this->select_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_select_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSelectChestReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSSelectChestReward)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSelectChestReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSelectChestReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSSelectChestReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSSelectChestReward)
    MergeFrom(*source);
  }
}

void CSSelectChestReward::MergeFrom(const CSSelectChestReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSSelectChestReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.select_index() != 0) {
    _internal_set_select_index(from._internal_select_index());
  }
}

void CSSelectChestReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSSelectChestReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSelectChestReward::CopyFrom(const CSSelectChestReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSSelectChestReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSelectChestReward::IsInitialized() const {
  return true;
}

void CSSelectChestReward::InternalSwap(CSSelectChestReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(select_index_, other->select_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSelectChestReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSelectChestReward::_Internal {
 public:
  static const ::BYDLD::OpenChestReward& reward(const SCSelectChestReward* msg);
};

const ::BYDLD::OpenChestReward&
SCSelectChestReward::_Internal::reward(const SCSelectChestReward* msg) {
  return *msg->reward_;
}
SCSelectChestReward::SCSelectChestReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCSelectChestReward)
}
SCSelectChestReward::SCSelectChestReward(const SCSelectChestReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reward()) {
    reward_ = new ::BYDLD::OpenChestReward(*from.reward_);
  } else {
    reward_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCSelectChestReward)
}

void SCSelectChestReward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCSelectChestReward_BYDLD_2eproto.base);
  reward_ = nullptr;
}

SCSelectChestReward::~SCSelectChestReward() {
  // @@protoc_insertion_point(destructor:BYDLD.SCSelectChestReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSelectChestReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete reward_;
}

void SCSelectChestReward::ArenaDtor(void* object) {
  SCSelectChestReward* _this = reinterpret_cast< SCSelectChestReward* >(object);
  (void)_this;
}
void SCSelectChestReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSelectChestReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSelectChestReward& SCSelectChestReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSelectChestReward_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCSelectChestReward::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCSelectChestReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && reward_ != nullptr) {
    delete reward_;
  }
  reward_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSelectChestReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BYDLD.OpenChestReward reward = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reward(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSelectChestReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCSelectChestReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BYDLD.OpenChestReward reward = 1;
  if (this->has_reward()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reward(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCSelectChestReward)
  return target;
}

size_t SCSelectChestReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCSelectChestReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BYDLD.OpenChestReward reward = 1;
  if (this->has_reward()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reward_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSelectChestReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCSelectChestReward)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSelectChestReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSelectChestReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCSelectChestReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCSelectChestReward)
    MergeFrom(*source);
  }
}

void SCSelectChestReward::MergeFrom(const SCSelectChestReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCSelectChestReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_reward()) {
    _internal_mutable_reward()->::BYDLD::OpenChestReward::MergeFrom(from._internal_reward());
  }
}

void SCSelectChestReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCSelectChestReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSelectChestReward::CopyFrom(const SCSelectChestReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCSelectChestReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSelectChestReward::IsInitialized() const {
  return true;
}

void SCSelectChestReward::InternalSwap(SCSelectChestReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(reward_, other->reward_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSelectChestReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSChestSetAutoSelect::_Internal {
 public:
};

CSChestSetAutoSelect::CSChestSetAutoSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSChestSetAutoSelect)
}
CSChestSetAutoSelect::CSChestSetAutoSelect(const CSChestSetAutoSelect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&auto_option_, &from.auto_option_,
    static_cast<size_t>(reinterpret_cast<char*>(&auto_open_) -
    reinterpret_cast<char*>(&auto_option_)) + sizeof(auto_open_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSChestSetAutoSelect)
}

void CSChestSetAutoSelect::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&auto_option_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&auto_open_) -
      reinterpret_cast<char*>(&auto_option_)) + sizeof(auto_open_));
}

CSChestSetAutoSelect::~CSChestSetAutoSelect() {
  // @@protoc_insertion_point(destructor:BYDLD.CSChestSetAutoSelect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSChestSetAutoSelect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSChestSetAutoSelect::ArenaDtor(void* object) {
  CSChestSetAutoSelect* _this = reinterpret_cast< CSChestSetAutoSelect* >(object);
  (void)_this;
}
void CSChestSetAutoSelect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSChestSetAutoSelect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSChestSetAutoSelect& CSChestSetAutoSelect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSChestSetAutoSelect_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSChestSetAutoSelect::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSChestSetAutoSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&auto_option_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auto_open_) -
      reinterpret_cast<char*>(&auto_option_)) + sizeof(auto_open_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSChestSetAutoSelect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BYDLD.ChestAutoSelectOption auto_option = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_auto_option(static_cast<::BYDLD::ChestAutoSelectOption>(val));
        } else goto handle_unusual;
        continue;
      // bool auto_open = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          auto_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSChestSetAutoSelect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSChestSetAutoSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BYDLD.ChestAutoSelectOption auto_option = 1;
  if (this->auto_option() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_auto_option(), target);
  }

  // bool auto_open = 2;
  if (this->auto_open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_auto_open(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSChestSetAutoSelect)
  return target;
}

size_t CSChestSetAutoSelect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSChestSetAutoSelect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BYDLD.ChestAutoSelectOption auto_option = 1;
  if (this->auto_option() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_auto_option());
  }

  // bool auto_open = 2;
  if (this->auto_open() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSChestSetAutoSelect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSChestSetAutoSelect)
  GOOGLE_DCHECK_NE(&from, this);
  const CSChestSetAutoSelect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSChestSetAutoSelect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSChestSetAutoSelect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSChestSetAutoSelect)
    MergeFrom(*source);
  }
}

void CSChestSetAutoSelect::MergeFrom(const CSChestSetAutoSelect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSChestSetAutoSelect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auto_option() != 0) {
    _internal_set_auto_option(from._internal_auto_option());
  }
  if (from.auto_open() != 0) {
    _internal_set_auto_open(from._internal_auto_open());
  }
}

void CSChestSetAutoSelect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSChestSetAutoSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSChestSetAutoSelect::CopyFrom(const CSChestSetAutoSelect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSChestSetAutoSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSChestSetAutoSelect::IsInitialized() const {
  return true;
}

void CSChestSetAutoSelect::InternalSwap(CSChestSetAutoSelect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSChestSetAutoSelect, auto_open_)
      + sizeof(CSChestSetAutoSelect::auto_open_)
      - PROTOBUF_FIELD_OFFSET(CSChestSetAutoSelect, auto_option_)>(
          reinterpret_cast<char*>(&auto_option_),
          reinterpret_cast<char*>(&other->auto_option_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSChestSetAutoSelect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCChestSetAutoSelect::_Internal {
 public:
};

SCChestSetAutoSelect::SCChestSetAutoSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCChestSetAutoSelect)
}
SCChestSetAutoSelect::SCChestSetAutoSelect(const SCChestSetAutoSelect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&auto_option_, &from.auto_option_,
    static_cast<size_t>(reinterpret_cast<char*>(&auto_open_) -
    reinterpret_cast<char*>(&auto_option_)) + sizeof(auto_open_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCChestSetAutoSelect)
}

void SCChestSetAutoSelect::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&auto_option_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&auto_open_) -
      reinterpret_cast<char*>(&auto_option_)) + sizeof(auto_open_));
}

SCChestSetAutoSelect::~SCChestSetAutoSelect() {
  // @@protoc_insertion_point(destructor:BYDLD.SCChestSetAutoSelect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCChestSetAutoSelect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCChestSetAutoSelect::ArenaDtor(void* object) {
  SCChestSetAutoSelect* _this = reinterpret_cast< SCChestSetAutoSelect* >(object);
  (void)_this;
}
void SCChestSetAutoSelect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCChestSetAutoSelect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCChestSetAutoSelect& SCChestSetAutoSelect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCChestSetAutoSelect_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCChestSetAutoSelect::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCChestSetAutoSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&auto_option_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auto_open_) -
      reinterpret_cast<char*>(&auto_option_)) + sizeof(auto_open_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCChestSetAutoSelect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BYDLD.ChestAutoSelectOption auto_option = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_auto_option(static_cast<::BYDLD::ChestAutoSelectOption>(val));
        } else goto handle_unusual;
        continue;
      // bool auto_open = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          auto_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCChestSetAutoSelect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCChestSetAutoSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BYDLD.ChestAutoSelectOption auto_option = 1;
  if (this->auto_option() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_auto_option(), target);
  }

  // bool auto_open = 2;
  if (this->auto_open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_auto_open(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCChestSetAutoSelect)
  return target;
}

size_t SCChestSetAutoSelect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCChestSetAutoSelect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BYDLD.ChestAutoSelectOption auto_option = 1;
  if (this->auto_option() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_auto_option());
  }

  // bool auto_open = 2;
  if (this->auto_open() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCChestSetAutoSelect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCChestSetAutoSelect)
  GOOGLE_DCHECK_NE(&from, this);
  const SCChestSetAutoSelect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCChestSetAutoSelect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCChestSetAutoSelect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCChestSetAutoSelect)
    MergeFrom(*source);
  }
}

void SCChestSetAutoSelect::MergeFrom(const SCChestSetAutoSelect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCChestSetAutoSelect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auto_option() != 0) {
    _internal_set_auto_option(from._internal_auto_option());
  }
  if (from.auto_open() != 0) {
    _internal_set_auto_open(from._internal_auto_open());
  }
}

void SCChestSetAutoSelect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCChestSetAutoSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCChestSetAutoSelect::CopyFrom(const SCChestSetAutoSelect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCChestSetAutoSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCChestSetAutoSelect::IsInitialized() const {
  return true;
}

void SCChestSetAutoSelect::InternalSwap(SCChestSetAutoSelect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCChestSetAutoSelect, auto_open_)
      + sizeof(SCChestSetAutoSelect::auto_open_)
      - PROTOBUF_FIELD_OFFSET(SCChestSetAutoSelect, auto_option_)>(
          reinterpret_cast<char*>(&auto_option_),
          reinterpret_cast<char*>(&other->auto_option_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCChestSetAutoSelect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSChestSetEnable::_Internal {
 public:
};

CSChestSetEnable::CSChestSetEnable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSChestSetEnable)
}
CSChestSetEnable::CSChestSetEnable(const CSChestSetEnable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_enable_ = from.is_enable_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSChestSetEnable)
}

void CSChestSetEnable::SharedCtor() {
  is_enable_ = false;
}

CSChestSetEnable::~CSChestSetEnable() {
  // @@protoc_insertion_point(destructor:BYDLD.CSChestSetEnable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSChestSetEnable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSChestSetEnable::ArenaDtor(void* object) {
  CSChestSetEnable* _this = reinterpret_cast< CSChestSetEnable* >(object);
  (void)_this;
}
void CSChestSetEnable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSChestSetEnable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSChestSetEnable& CSChestSetEnable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSChestSetEnable_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSChestSetEnable::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSChestSetEnable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_enable_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSChestSetEnable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSChestSetEnable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSChestSetEnable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_enable = 1;
  if (this->is_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSChestSetEnable)
  return target;
}

size_t CSChestSetEnable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSChestSetEnable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_enable = 1;
  if (this->is_enable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSChestSetEnable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSChestSetEnable)
  GOOGLE_DCHECK_NE(&from, this);
  const CSChestSetEnable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSChestSetEnable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSChestSetEnable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSChestSetEnable)
    MergeFrom(*source);
  }
}

void CSChestSetEnable::MergeFrom(const CSChestSetEnable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSChestSetEnable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_enable() != 0) {
    _internal_set_is_enable(from._internal_is_enable());
  }
}

void CSChestSetEnable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSChestSetEnable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSChestSetEnable::CopyFrom(const CSChestSetEnable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSChestSetEnable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSChestSetEnable::IsInitialized() const {
  return true;
}

void CSChestSetEnable::InternalSwap(CSChestSetEnable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(is_enable_, other->is_enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSChestSetEnable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCChestSetEnable::_Internal {
 public:
};

SCChestSetEnable::SCChestSetEnable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCChestSetEnable)
}
SCChestSetEnable::SCChestSetEnable(const SCChestSetEnable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_enable_ = from.is_enable_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCChestSetEnable)
}

void SCChestSetEnable::SharedCtor() {
  is_enable_ = false;
}

SCChestSetEnable::~SCChestSetEnable() {
  // @@protoc_insertion_point(destructor:BYDLD.SCChestSetEnable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCChestSetEnable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCChestSetEnable::ArenaDtor(void* object) {
  SCChestSetEnable* _this = reinterpret_cast< SCChestSetEnable* >(object);
  (void)_this;
}
void SCChestSetEnable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCChestSetEnable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCChestSetEnable& SCChestSetEnable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCChestSetEnable_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCChestSetEnable::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCChestSetEnable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_enable_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCChestSetEnable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCChestSetEnable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCChestSetEnable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_enable = 1;
  if (this->is_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCChestSetEnable)
  return target;
}

size_t SCChestSetEnable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCChestSetEnable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_enable = 1;
  if (this->is_enable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCChestSetEnable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCChestSetEnable)
  GOOGLE_DCHECK_NE(&from, this);
  const SCChestSetEnable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCChestSetEnable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCChestSetEnable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCChestSetEnable)
    MergeFrom(*source);
  }
}

void SCChestSetEnable::MergeFrom(const SCChestSetEnable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCChestSetEnable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_enable() != 0) {
    _internal_set_is_enable(from._internal_is_enable());
  }
}

void SCChestSetEnable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCChestSetEnable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCChestSetEnable::CopyFrom(const SCChestSetEnable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCChestSetEnable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCChestSetEnable::IsInitialized() const {
  return true;
}

void SCChestSetEnable::InternalSwap(SCChestSetEnable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(is_enable_, other->is_enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCChestSetEnable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSyncAnimation::_Internal {
 public:
};

CSSyncAnimation::CSSyncAnimation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSSyncAnimation)
}
CSSyncAnimation::CSSyncAnimation(const CSSyncAnimation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArena());
  }
  ::memcpy(&animationid_, &from.animationid_,
    static_cast<size_t>(reinterpret_cast<char*>(&complete_) -
    reinterpret_cast<char*>(&animationid_)) + sizeof(complete_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSSyncAnimation)
}

void CSSyncAnimation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSSyncAnimation_BYDLD_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&animationid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&complete_) -
      reinterpret_cast<char*>(&animationid_)) + sizeof(complete_));
}

CSSyncAnimation::~CSSyncAnimation() {
  // @@protoc_insertion_point(destructor:BYDLD.CSSyncAnimation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSyncAnimation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSSyncAnimation::ArenaDtor(void* object) {
  CSSyncAnimation* _this = reinterpret_cast< CSSyncAnimation* >(object);
  (void)_this;
}
void CSSyncAnimation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSyncAnimation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSyncAnimation& CSSyncAnimation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSyncAnimation_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSSyncAnimation::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSSyncAnimation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmpty();
  ::memset(&animationid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&complete_) -
      reinterpret_cast<char*>(&animationid_)) + sizeof(complete_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSyncAnimation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 animationId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          animationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 step = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool complete = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          complete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.CSSyncAnimation.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSyncAnimation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSSyncAnimation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 animationId = 1;
  if (this->animationid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_animationid(), target);
  }

  // int32 step = 2;
  if (this->step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_step(), target);
  }

  // bool complete = 3;
  if (this->complete() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_complete(), target);
  }

  // string content = 4;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.CSSyncAnimation.content");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSSyncAnimation)
  return target;
}

size_t CSSyncAnimation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSSyncAnimation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 4;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // int32 animationId = 1;
  if (this->animationid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_animationid());
  }

  // int32 step = 2;
  if (this->step() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_step());
  }

  // bool complete = 3;
  if (this->complete() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSyncAnimation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSSyncAnimation)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSyncAnimation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSyncAnimation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSSyncAnimation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSSyncAnimation)
    MergeFrom(*source);
  }
}

void CSSyncAnimation::MergeFrom(const CSSyncAnimation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSSyncAnimation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
  if (from.animationid() != 0) {
    _internal_set_animationid(from._internal_animationid());
  }
  if (from.step() != 0) {
    _internal_set_step(from._internal_step());
  }
  if (from.complete() != 0) {
    _internal_set_complete(from._internal_complete());
  }
}

void CSSyncAnimation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSSyncAnimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSyncAnimation::CopyFrom(const CSSyncAnimation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSSyncAnimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSyncAnimation::IsInitialized() const {
  return true;
}

void CSSyncAnimation::InternalSwap(CSSyncAnimation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSSyncAnimation, complete_)
      + sizeof(CSSyncAnimation::complete_)
      - PROTOBUF_FIELD_OFFSET(CSSyncAnimation, animationid_)>(
          reinterpret_cast<char*>(&animationid_),
          reinterpret_cast<char*>(&other->animationid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSyncAnimation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSyncAnimation::_Internal {
 public:
};

SCSyncAnimation::SCSyncAnimation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCSyncAnimation)
}
SCSyncAnimation::SCSyncAnimation(const SCSyncAnimation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArena());
  }
  ::memcpy(&animationid_, &from.animationid_,
    static_cast<size_t>(reinterpret_cast<char*>(&complete_) -
    reinterpret_cast<char*>(&animationid_)) + sizeof(complete_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCSyncAnimation)
}

void SCSyncAnimation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCSyncAnimation_BYDLD_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&animationid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&complete_) -
      reinterpret_cast<char*>(&animationid_)) + sizeof(complete_));
}

SCSyncAnimation::~SCSyncAnimation() {
  // @@protoc_insertion_point(destructor:BYDLD.SCSyncAnimation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSyncAnimation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SCSyncAnimation::ArenaDtor(void* object) {
  SCSyncAnimation* _this = reinterpret_cast< SCSyncAnimation* >(object);
  (void)_this;
}
void SCSyncAnimation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSyncAnimation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSyncAnimation& SCSyncAnimation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSyncAnimation_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCSyncAnimation::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCSyncAnimation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmpty();
  ::memset(&animationid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&complete_) -
      reinterpret_cast<char*>(&animationid_)) + sizeof(complete_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSyncAnimation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 animationId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          animationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 step = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool complete = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          complete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BYDLD.SCSyncAnimation.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSyncAnimation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCSyncAnimation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 animationId = 1;
  if (this->animationid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_animationid(), target);
  }

  // int32 step = 2;
  if (this->step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_step(), target);
  }

  // bool complete = 3;
  if (this->complete() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_complete(), target);
  }

  // string content = 4;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BYDLD.SCSyncAnimation.content");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCSyncAnimation)
  return target;
}

size_t SCSyncAnimation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCSyncAnimation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 4;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // int32 animationId = 1;
  if (this->animationid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_animationid());
  }

  // int32 step = 2;
  if (this->step() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_step());
  }

  // bool complete = 3;
  if (this->complete() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSyncAnimation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCSyncAnimation)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSyncAnimation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSyncAnimation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCSyncAnimation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCSyncAnimation)
    MergeFrom(*source);
  }
}

void SCSyncAnimation::MergeFrom(const SCSyncAnimation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCSyncAnimation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
  if (from.animationid() != 0) {
    _internal_set_animationid(from._internal_animationid());
  }
  if (from.step() != 0) {
    _internal_set_step(from._internal_step());
  }
  if (from.complete() != 0) {
    _internal_set_complete(from._internal_complete());
  }
}

void SCSyncAnimation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCSyncAnimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSyncAnimation::CopyFrom(const SCSyncAnimation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCSyncAnimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSyncAnimation::IsInitialized() const {
  return true;
}

void SCSyncAnimation::InternalSwap(SCSyncAnimation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCSyncAnimation, complete_)
      + sizeof(SCSyncAnimation::complete_)
      - PROTOBUF_FIELD_OFFSET(SCSyncAnimation, animationid_)>(
          reinterpret_cast<char*>(&animationid_),
          reinterpret_cast<char*>(&other->animationid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSyncAnimation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSMagicCardList::_Internal {
 public:
};

CSMagicCardList::CSMagicCardList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSMagicCardList)
}
CSMagicCardList::CSMagicCardList(const CSMagicCardList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSMagicCardList)
}

void CSMagicCardList::SharedCtor() {
}

CSMagicCardList::~CSMagicCardList() {
  // @@protoc_insertion_point(destructor:BYDLD.CSMagicCardList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSMagicCardList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSMagicCardList::ArenaDtor(void* object) {
  CSMagicCardList* _this = reinterpret_cast< CSMagicCardList* >(object);
  (void)_this;
}
void CSMagicCardList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSMagicCardList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSMagicCardList& CSMagicCardList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSMagicCardList_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSMagicCardList::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSMagicCardList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSMagicCardList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSMagicCardList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSMagicCardList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSMagicCardList)
  return target;
}

size_t CSMagicCardList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSMagicCardList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSMagicCardList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSMagicCardList)
  GOOGLE_DCHECK_NE(&from, this);
  const CSMagicCardList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSMagicCardList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSMagicCardList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSMagicCardList)
    MergeFrom(*source);
  }
}

void CSMagicCardList::MergeFrom(const CSMagicCardList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSMagicCardList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSMagicCardList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSMagicCardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMagicCardList::CopyFrom(const CSMagicCardList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSMagicCardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMagicCardList::IsInitialized() const {
  return true;
}

void CSMagicCardList::InternalSwap(CSMagicCardList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSMagicCardList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCMagicCardList::_Internal {
 public:
};

SCMagicCardList::SCMagicCardList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  magiccardlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCMagicCardList)
}
SCMagicCardList::SCMagicCardList(const SCMagicCardList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      magiccardlist_(from.magiccardlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCMagicCardList)
}

void SCMagicCardList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCMagicCardList_BYDLD_2eproto.base);
}

SCMagicCardList::~SCMagicCardList() {
  // @@protoc_insertion_point(destructor:BYDLD.SCMagicCardList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCMagicCardList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCMagicCardList::ArenaDtor(void* object) {
  SCMagicCardList* _this = reinterpret_cast< SCMagicCardList* >(object);
  (void)_this;
}
void SCMagicCardList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCMagicCardList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCMagicCardList& SCMagicCardList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCMagicCardList_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCMagicCardList::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCMagicCardList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  magiccardlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCMagicCardList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BYDLD.MagicCardInfo magicCardList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_magiccardlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCMagicCardList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCMagicCardList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BYDLD.MagicCardInfo magicCardList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_magiccardlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_magiccardlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCMagicCardList)
  return target;
}

size_t SCMagicCardList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCMagicCardList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BYDLD.MagicCardInfo magicCardList = 1;
  total_size += 1UL * this->_internal_magiccardlist_size();
  for (const auto& msg : this->magiccardlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCMagicCardList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCMagicCardList)
  GOOGLE_DCHECK_NE(&from, this);
  const SCMagicCardList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCMagicCardList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCMagicCardList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCMagicCardList)
    MergeFrom(*source);
  }
}

void SCMagicCardList::MergeFrom(const SCMagicCardList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCMagicCardList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  magiccardlist_.MergeFrom(from.magiccardlist_);
}

void SCMagicCardList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCMagicCardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCMagicCardList::CopyFrom(const SCMagicCardList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCMagicCardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMagicCardList::IsInitialized() const {
  return true;
}

void SCMagicCardList::InternalSwap(SCMagicCardList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  magiccardlist_.InternalSwap(&other->magiccardlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCMagicCardList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCTortoiseExplode::_Internal {
 public:
};

SCTortoiseExplode::SCTortoiseExplode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCTortoiseExplode)
}
SCTortoiseExplode::SCTortoiseExplode(const SCTortoiseExplode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_double_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(is_double_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCTortoiseExplode)
}

void SCTortoiseExplode::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_double_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(is_double_));
}

SCTortoiseExplode::~SCTortoiseExplode() {
  // @@protoc_insertion_point(destructor:BYDLD.SCTortoiseExplode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCTortoiseExplode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCTortoiseExplode::ArenaDtor(void* object) {
  SCTortoiseExplode* _this = reinterpret_cast< SCTortoiseExplode* >(object);
  (void)_this;
}
void SCTortoiseExplode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCTortoiseExplode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCTortoiseExplode& SCTortoiseExplode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCTortoiseExplode_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCTortoiseExplode::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCTortoiseExplode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_double_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(is_double_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCTortoiseExplode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fish_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bullet_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bullet_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_effect = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          max_effect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_double = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_double_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCTortoiseExplode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCTortoiseExplode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 fish_uid = 2;
  if (this->fish_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fish_uid(), target);
  }

  // int32 bullet_id = 3;
  if (this->bullet_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_bullet_id(), target);
  }

  // int32 ratio = 4;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ratio(), target);
  }

  // int32 max_effect = 5;
  if (this->max_effect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_max_effect(), target);
  }

  // bool is_double = 6;
  if (this->is_double() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_double(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCTortoiseExplode)
  return target;
}

size_t SCTortoiseExplode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCTortoiseExplode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 fish_uid = 2;
  if (this->fish_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_uid());
  }

  // int32 bullet_id = 3;
  if (this->bullet_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bullet_id());
  }

  // int32 ratio = 4;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // int32 max_effect = 5;
  if (this->max_effect() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_effect());
  }

  // bool is_double = 6;
  if (this->is_double() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCTortoiseExplode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCTortoiseExplode)
  GOOGLE_DCHECK_NE(&from, this);
  const SCTortoiseExplode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCTortoiseExplode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCTortoiseExplode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCTortoiseExplode)
    MergeFrom(*source);
  }
}

void SCTortoiseExplode::MergeFrom(const SCTortoiseExplode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCTortoiseExplode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.fish_uid() != 0) {
    _internal_set_fish_uid(from._internal_fish_uid());
  }
  if (from.bullet_id() != 0) {
    _internal_set_bullet_id(from._internal_bullet_id());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.max_effect() != 0) {
    _internal_set_max_effect(from._internal_max_effect());
  }
  if (from.is_double() != 0) {
    _internal_set_is_double(from._internal_is_double());
  }
}

void SCTortoiseExplode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCTortoiseExplode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCTortoiseExplode::CopyFrom(const SCTortoiseExplode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCTortoiseExplode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCTortoiseExplode::IsInitialized() const {
  return true;
}

void SCTortoiseExplode::InternalSwap(SCTortoiseExplode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCTortoiseExplode, is_double_)
      + sizeof(SCTortoiseExplode::is_double_)
      - PROTOBUF_FIELD_OFFSET(SCTortoiseExplode, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCTortoiseExplode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSBuyGun::_Internal {
 public:
};

CSBuyGun::CSBuyGun(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSBuyGun)
}
CSBuyGun::CSBuyGun(const CSBuyGun& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gun_level_ = from.gun_level_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSBuyGun)
}

void CSBuyGun::SharedCtor() {
  gun_level_ = 0;
}

CSBuyGun::~CSBuyGun() {
  // @@protoc_insertion_point(destructor:BYDLD.CSBuyGun)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSBuyGun::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSBuyGun::ArenaDtor(void* object) {
  CSBuyGun* _this = reinterpret_cast< CSBuyGun* >(object);
  (void)_this;
}
void CSBuyGun::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSBuyGun::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSBuyGun& CSBuyGun::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSBuyGun_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSBuyGun::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSBuyGun)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gun_level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSBuyGun::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gun_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gun_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSBuyGun::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSBuyGun)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gun_level = 1;
  if (this->gun_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gun_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSBuyGun)
  return target;
}

size_t CSBuyGun::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSBuyGun)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gun_level = 1;
  if (this->gun_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gun_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSBuyGun::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSBuyGun)
  GOOGLE_DCHECK_NE(&from, this);
  const CSBuyGun* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSBuyGun>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSBuyGun)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSBuyGun)
    MergeFrom(*source);
  }
}

void CSBuyGun::MergeFrom(const CSBuyGun& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSBuyGun)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gun_level() != 0) {
    _internal_set_gun_level(from._internal_gun_level());
  }
}

void CSBuyGun::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSBuyGun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBuyGun::CopyFrom(const CSBuyGun& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSBuyGun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBuyGun::IsInitialized() const {
  return true;
}

void CSBuyGun::InternalSwap(CSBuyGun* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(gun_level_, other->gun_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSBuyGun::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCBuyGun::_Internal {
 public:
};

SCBuyGun::SCBuyGun(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCBuyGun)
}
SCBuyGun::SCBuyGun(const SCBuyGun& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_buy_, &from.is_buy_,
    static_cast<size_t>(reinterpret_cast<char*>(&gun_level_) -
    reinterpret_cast<char*>(&is_buy_)) + sizeof(gun_level_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCBuyGun)
}

void SCBuyGun::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&is_buy_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&gun_level_) -
      reinterpret_cast<char*>(&is_buy_)) + sizeof(gun_level_));
}

SCBuyGun::~SCBuyGun() {
  // @@protoc_insertion_point(destructor:BYDLD.SCBuyGun)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCBuyGun::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCBuyGun::ArenaDtor(void* object) {
  SCBuyGun* _this = reinterpret_cast< SCBuyGun* >(object);
  (void)_this;
}
void SCBuyGun::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCBuyGun::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCBuyGun& SCBuyGun::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCBuyGun_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCBuyGun::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCBuyGun)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_buy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gun_level_) -
      reinterpret_cast<char*>(&is_buy_)) + sizeof(gun_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCBuyGun::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_buy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_buy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gun_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gun_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCBuyGun::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCBuyGun)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_buy = 1;
  if (this->is_buy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_buy(), target);
  }

  // int32 gun_level = 2;
  if (this->gun_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gun_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCBuyGun)
  return target;
}

size_t SCBuyGun::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCBuyGun)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_buy = 1;
  if (this->is_buy() != 0) {
    total_size += 1 + 1;
  }

  // int32 gun_level = 2;
  if (this->gun_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gun_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCBuyGun::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCBuyGun)
  GOOGLE_DCHECK_NE(&from, this);
  const SCBuyGun* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCBuyGun>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCBuyGun)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCBuyGun)
    MergeFrom(*source);
  }
}

void SCBuyGun::MergeFrom(const SCBuyGun& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCBuyGun)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_buy() != 0) {
    _internal_set_is_buy(from._internal_is_buy());
  }
  if (from.gun_level() != 0) {
    _internal_set_gun_level(from._internal_gun_level());
  }
}

void SCBuyGun::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCBuyGun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCBuyGun::CopyFrom(const SCBuyGun& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCBuyGun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCBuyGun::IsInitialized() const {
  return true;
}

void SCBuyGun::InternalSwap(SCBuyGun* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCBuyGun, gun_level_)
      + sizeof(SCBuyGun::gun_level_)
      - PROTOBUF_FIELD_OFFSET(SCBuyGun, is_buy_)>(
          reinterpret_cast<char*>(&is_buy_),
          reinterpret_cast<char*>(&other->is_buy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCBuyGun::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCWaterDropInfo::_Internal {
 public:
};

SCWaterDropInfo::SCWaterDropInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCWaterDropInfo)
}
SCWaterDropInfo::SCWaterDropInfo(const SCWaterDropInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enable_, &from.enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&fragment_count_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(fragment_count_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCWaterDropInfo)
}

void SCWaterDropInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&enable_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&fragment_count_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(fragment_count_));
}

SCWaterDropInfo::~SCWaterDropInfo() {
  // @@protoc_insertion_point(destructor:BYDLD.SCWaterDropInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCWaterDropInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCWaterDropInfo::ArenaDtor(void* object) {
  SCWaterDropInfo* _this = reinterpret_cast< SCWaterDropInfo* >(object);
  (void)_this;
}
void SCWaterDropInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCWaterDropInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCWaterDropInfo& SCWaterDropInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCWaterDropInfo_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCWaterDropInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCWaterDropInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fragment_count_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(fragment_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCWaterDropInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 drop_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          drop_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fragment_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fragment_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCWaterDropInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCWaterDropInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  // int32 drop_count = 2;
  if (this->drop_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_drop_count(), target);
  }

  // int32 fragment_count = 3;
  if (this->fragment_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_fragment_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCWaterDropInfo)
  return target;
}

size_t SCWaterDropInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCWaterDropInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // int32 drop_count = 2;
  if (this->drop_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_drop_count());
  }

  // int32 fragment_count = 3;
  if (this->fragment_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fragment_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCWaterDropInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCWaterDropInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCWaterDropInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCWaterDropInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCWaterDropInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCWaterDropInfo)
    MergeFrom(*source);
  }
}

void SCWaterDropInfo::MergeFrom(const SCWaterDropInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCWaterDropInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  if (from.drop_count() != 0) {
    _internal_set_drop_count(from._internal_drop_count());
  }
  if (from.fragment_count() != 0) {
    _internal_set_fragment_count(from._internal_fragment_count());
  }
}

void SCWaterDropInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCWaterDropInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCWaterDropInfo::CopyFrom(const SCWaterDropInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCWaterDropInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCWaterDropInfo::IsInitialized() const {
  return true;
}

void SCWaterDropInfo::InternalSwap(SCWaterDropInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCWaterDropInfo, fragment_count_)
      + sizeof(SCWaterDropInfo::fragment_count_)
      - PROTOBUF_FIELD_OFFSET(SCWaterDropInfo, enable_)>(
          reinterpret_cast<char*>(&enable_),
          reinterpret_cast<char*>(&other->enable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCWaterDropInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSBuyWings::_Internal {
 public:
};

CSBuyWings::CSBuyWings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSBuyWings)
}
CSBuyWings::CSBuyWings(const CSBuyWings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  wings_id_ = from.wings_id_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSBuyWings)
}

void CSBuyWings::SharedCtor() {
  wings_id_ = 0;
}

CSBuyWings::~CSBuyWings() {
  // @@protoc_insertion_point(destructor:BYDLD.CSBuyWings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSBuyWings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSBuyWings::ArenaDtor(void* object) {
  CSBuyWings* _this = reinterpret_cast< CSBuyWings* >(object);
  (void)_this;
}
void CSBuyWings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSBuyWings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSBuyWings& CSBuyWings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSBuyWings_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSBuyWings::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSBuyWings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wings_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSBuyWings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 wings_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          wings_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSBuyWings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSBuyWings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 wings_id = 1;
  if (this->wings_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_wings_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSBuyWings)
  return target;
}

size_t CSBuyWings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSBuyWings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 wings_id = 1;
  if (this->wings_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wings_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSBuyWings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSBuyWings)
  GOOGLE_DCHECK_NE(&from, this);
  const CSBuyWings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSBuyWings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSBuyWings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSBuyWings)
    MergeFrom(*source);
  }
}

void CSBuyWings::MergeFrom(const CSBuyWings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSBuyWings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.wings_id() != 0) {
    _internal_set_wings_id(from._internal_wings_id());
  }
}

void CSBuyWings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSBuyWings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBuyWings::CopyFrom(const CSBuyWings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSBuyWings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBuyWings::IsInitialized() const {
  return true;
}

void CSBuyWings::InternalSwap(CSBuyWings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(wings_id_, other->wings_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSBuyWings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCBuyWings::_Internal {
 public:
};

SCBuyWings::SCBuyWings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCBuyWings)
}
SCBuyWings::SCBuyWings(const SCBuyWings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&wings_id_, &from.wings_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_buy_) -
    reinterpret_cast<char*>(&wings_id_)) + sizeof(is_buy_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCBuyWings)
}

void SCBuyWings::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&wings_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_buy_) -
      reinterpret_cast<char*>(&wings_id_)) + sizeof(is_buy_));
}

SCBuyWings::~SCBuyWings() {
  // @@protoc_insertion_point(destructor:BYDLD.SCBuyWings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCBuyWings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCBuyWings::ArenaDtor(void* object) {
  SCBuyWings* _this = reinterpret_cast< SCBuyWings* >(object);
  (void)_this;
}
void SCBuyWings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCBuyWings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCBuyWings& SCBuyWings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCBuyWings_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCBuyWings::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCBuyWings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&wings_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_buy_) -
      reinterpret_cast<char*>(&wings_id_)) + sizeof(is_buy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCBuyWings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 wings_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          wings_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_buy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_buy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCBuyWings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCBuyWings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 wings_id = 1;
  if (this->wings_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_wings_id(), target);
  }

  // bool is_buy = 2;
  if (this->is_buy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_buy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCBuyWings)
  return target;
}

size_t SCBuyWings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCBuyWings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 wings_id = 1;
  if (this->wings_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wings_id());
  }

  // bool is_buy = 2;
  if (this->is_buy() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCBuyWings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCBuyWings)
  GOOGLE_DCHECK_NE(&from, this);
  const SCBuyWings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCBuyWings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCBuyWings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCBuyWings)
    MergeFrom(*source);
  }
}

void SCBuyWings::MergeFrom(const SCBuyWings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCBuyWings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.wings_id() != 0) {
    _internal_set_wings_id(from._internal_wings_id());
  }
  if (from.is_buy() != 0) {
    _internal_set_is_buy(from._internal_is_buy());
  }
}

void SCBuyWings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCBuyWings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCBuyWings::CopyFrom(const SCBuyWings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCBuyWings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCBuyWings::IsInitialized() const {
  return true;
}

void SCBuyWings::InternalSwap(SCBuyWings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCBuyWings, is_buy_)
      + sizeof(SCBuyWings::is_buy_)
      - PROTOBUF_FIELD_OFFSET(SCBuyWings, wings_id_)>(
          reinterpret_cast<char*>(&wings_id_),
          reinterpret_cast<char*>(&other->wings_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCBuyWings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSetWings::_Internal {
 public:
};

CSSetWings::CSSetWings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSSetWings)
}
CSSetWings::CSSetWings(const CSSetWings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  wings_prop_id_ = from.wings_prop_id_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSSetWings)
}

void CSSetWings::SharedCtor() {
  wings_prop_id_ = 0;
}

CSSetWings::~CSSetWings() {
  // @@protoc_insertion_point(destructor:BYDLD.CSSetWings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSetWings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSSetWings::ArenaDtor(void* object) {
  CSSetWings* _this = reinterpret_cast< CSSetWings* >(object);
  (void)_this;
}
void CSSetWings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSetWings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSetWings& CSSetWings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSetWings_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSSetWings::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSSetWings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wings_prop_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSetWings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 wings_prop_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          wings_prop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSetWings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSSetWings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 wings_prop_id = 1;
  if (this->wings_prop_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_wings_prop_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSSetWings)
  return target;
}

size_t CSSetWings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSSetWings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 wings_prop_id = 1;
  if (this->wings_prop_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wings_prop_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSetWings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSSetWings)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSetWings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSetWings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSSetWings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSSetWings)
    MergeFrom(*source);
  }
}

void CSSetWings::MergeFrom(const CSSetWings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSSetWings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.wings_prop_id() != 0) {
    _internal_set_wings_prop_id(from._internal_wings_prop_id());
  }
}

void CSSetWings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSSetWings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSetWings::CopyFrom(const CSSetWings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSSetWings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSetWings::IsInitialized() const {
  return true;
}

void CSSetWings::InternalSwap(CSSetWings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(wings_prop_id_, other->wings_prop_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSetWings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSetWings::_Internal {
 public:
};

SCSetWings::SCSetWings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCSetWings)
}
SCSetWings::SCSetWings(const SCSetWings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCSetWings)
}

void SCSetWings::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(code_));
}

SCSetWings::~SCSetWings() {
  // @@protoc_insertion_point(destructor:BYDLD.SCSetWings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSetWings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSetWings::ArenaDtor(void* object) {
  SCSetWings* _this = reinterpret_cast< SCSetWings* >(object);
  (void)_this;
}
void SCSetWings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSetWings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSetWings& SCSetWings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSetWings_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCSetWings::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCSetWings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSetWings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 wings_prop_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          wings_prop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSetWings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCSetWings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 wings_prop_id = 2;
  if (this->wings_prop_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_wings_prop_id(), target);
  }

  // int32 code = 3;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCSetWings)
  return target;
}

size_t SCSetWings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCSetWings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 wings_prop_id = 2;
  if (this->wings_prop_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wings_prop_id());
  }

  // int32 code = 3;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSetWings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCSetWings)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSetWings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSetWings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCSetWings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCSetWings)
    MergeFrom(*source);
  }
}

void SCSetWings::MergeFrom(const SCSetWings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCSetWings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.wings_prop_id() != 0) {
    _internal_set_wings_prop_id(from._internal_wings_prop_id());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void SCSetWings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCSetWings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSetWings::CopyFrom(const SCSetWings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCSetWings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSetWings::IsInitialized() const {
  return true;
}

void SCSetWings::InternalSwap(SCSetWings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCSetWings, code_)
      + sizeof(SCSetWings::code_)
      - PROTOBUF_FIELD_OFFSET(SCSetWings, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSetWings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCBeKicked::_Internal {
 public:
};

SCBeKicked::SCBeKicked(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCBeKicked)
}
SCBeKicked::SCBeKicked(const SCBeKicked& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCBeKicked)
}

void SCBeKicked::SharedCtor() {
  reason_ = 0;
}

SCBeKicked::~SCBeKicked() {
  // @@protoc_insertion_point(destructor:BYDLD.SCBeKicked)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCBeKicked::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCBeKicked::ArenaDtor(void* object) {
  SCBeKicked* _this = reinterpret_cast< SCBeKicked* >(object);
  (void)_this;
}
void SCBeKicked::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCBeKicked::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCBeKicked& SCBeKicked::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCBeKicked_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCBeKicked::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCBeKicked)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCBeKicked::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BYDLD.BeKickedReason reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::BYDLD::BeKickedReason>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCBeKicked::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCBeKicked)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BYDLD.BeKickedReason reason = 1;
  if (this->reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCBeKicked)
  return target;
}

size_t SCBeKicked::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCBeKicked)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BYDLD.BeKickedReason reason = 1;
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCBeKicked::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCBeKicked)
  GOOGLE_DCHECK_NE(&from, this);
  const SCBeKicked* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCBeKicked>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCBeKicked)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCBeKicked)
    MergeFrom(*source);
  }
}

void SCBeKicked::MergeFrom(const SCBeKicked& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCBeKicked)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
}

void SCBeKicked::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCBeKicked)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCBeKicked::CopyFrom(const SCBeKicked& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCBeKicked)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCBeKicked::IsInitialized() const {
  return true;
}

void SCBeKicked::InternalSwap(SCBeKicked* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCBeKicked::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSClientTimeValidate::_Internal {
 public:
};

CSClientTimeValidate::CSClientTimeValidate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSClientTimeValidate)
}
CSClientTimeValidate::CSClientTimeValidate(const CSClientTimeValidate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSClientTimeValidate)
}

void CSClientTimeValidate::SharedCtor() {
  timestamp_ = 0;
}

CSClientTimeValidate::~CSClientTimeValidate() {
  // @@protoc_insertion_point(destructor:BYDLD.CSClientTimeValidate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSClientTimeValidate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSClientTimeValidate::ArenaDtor(void* object) {
  CSClientTimeValidate* _this = reinterpret_cast< CSClientTimeValidate* >(object);
  (void)_this;
}
void CSClientTimeValidate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSClientTimeValidate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSClientTimeValidate& CSClientTimeValidate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSClientTimeValidate_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSClientTimeValidate::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSClientTimeValidate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSClientTimeValidate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSClientTimeValidate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSClientTimeValidate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSClientTimeValidate)
  return target;
}

size_t CSClientTimeValidate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSClientTimeValidate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSClientTimeValidate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSClientTimeValidate)
  GOOGLE_DCHECK_NE(&from, this);
  const CSClientTimeValidate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSClientTimeValidate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSClientTimeValidate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSClientTimeValidate)
    MergeFrom(*source);
  }
}

void CSClientTimeValidate::MergeFrom(const CSClientTimeValidate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSClientTimeValidate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void CSClientTimeValidate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSClientTimeValidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSClientTimeValidate::CopyFrom(const CSClientTimeValidate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSClientTimeValidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSClientTimeValidate::IsInitialized() const {
  return true;
}

void CSClientTimeValidate::InternalSwap(CSClientTimeValidate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSClientTimeValidate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCClientTimeValidate::_Internal {
 public:
};

SCClientTimeValidate::SCClientTimeValidate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCClientTimeValidate)
}
SCClientTimeValidate::SCClientTimeValidate(const SCClientTimeValidate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCClientTimeValidate)
}

void SCClientTimeValidate::SharedCtor() {
}

SCClientTimeValidate::~SCClientTimeValidate() {
  // @@protoc_insertion_point(destructor:BYDLD.SCClientTimeValidate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCClientTimeValidate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCClientTimeValidate::ArenaDtor(void* object) {
  SCClientTimeValidate* _this = reinterpret_cast< SCClientTimeValidate* >(object);
  (void)_this;
}
void SCClientTimeValidate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCClientTimeValidate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCClientTimeValidate& SCClientTimeValidate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCClientTimeValidate_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCClientTimeValidate::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCClientTimeValidate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCClientTimeValidate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCClientTimeValidate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCClientTimeValidate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCClientTimeValidate)
  return target;
}

size_t SCClientTimeValidate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCClientTimeValidate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCClientTimeValidate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCClientTimeValidate)
  GOOGLE_DCHECK_NE(&from, this);
  const SCClientTimeValidate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCClientTimeValidate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCClientTimeValidate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCClientTimeValidate)
    MergeFrom(*source);
  }
}

void SCClientTimeValidate::MergeFrom(const SCClientTimeValidate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCClientTimeValidate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SCClientTimeValidate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCClientTimeValidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCClientTimeValidate::CopyFrom(const SCClientTimeValidate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCClientTimeValidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCClientTimeValidate::IsInitialized() const {
  return true;
}

void SCClientTimeValidate::InternalSwap(SCClientTimeValidate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCClientTimeValidate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSChangeTable::_Internal {
 public:
};

CSChangeTable::CSChangeTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.CSChangeTable)
}
CSChangeTable::CSChangeTable(const CSChangeTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.CSChangeTable)
}

void CSChangeTable::SharedCtor() {
}

CSChangeTable::~CSChangeTable() {
  // @@protoc_insertion_point(destructor:BYDLD.CSChangeTable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSChangeTable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSChangeTable::ArenaDtor(void* object) {
  CSChangeTable* _this = reinterpret_cast< CSChangeTable* >(object);
  (void)_this;
}
void CSChangeTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSChangeTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSChangeTable& CSChangeTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSChangeTable_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void CSChangeTable::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.CSChangeTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSChangeTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSChangeTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.CSChangeTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.CSChangeTable)
  return target;
}

size_t CSChangeTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.CSChangeTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSChangeTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.CSChangeTable)
  GOOGLE_DCHECK_NE(&from, this);
  const CSChangeTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSChangeTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.CSChangeTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.CSChangeTable)
    MergeFrom(*source);
  }
}

void CSChangeTable::MergeFrom(const CSChangeTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.CSChangeTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSChangeTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.CSChangeTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSChangeTable::CopyFrom(const CSChangeTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.CSChangeTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSChangeTable::IsInitialized() const {
  return true;
}

void CSChangeTable::InternalSwap(CSChangeTable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSChangeTable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCChangeTable::_Internal {
 public:
};

SCChangeTable::SCChangeTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BYDLD.SCChangeTable)
}
SCChangeTable::SCChangeTable(const SCChangeTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BYDLD.SCChangeTable)
}

void SCChangeTable::SharedCtor() {
}

SCChangeTable::~SCChangeTable() {
  // @@protoc_insertion_point(destructor:BYDLD.SCChangeTable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCChangeTable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCChangeTable::ArenaDtor(void* object) {
  SCChangeTable* _this = reinterpret_cast< SCChangeTable* >(object);
  (void)_this;
}
void SCChangeTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCChangeTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCChangeTable& SCChangeTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCChangeTable_BYDLD_2eproto.base);
  return *internal_default_instance();
}


void SCChangeTable::Clear() {
// @@protoc_insertion_point(message_clear_start:BYDLD.SCChangeTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCChangeTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCChangeTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BYDLD.SCChangeTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BYDLD.SCChangeTable)
  return target;
}

size_t SCChangeTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BYDLD.SCChangeTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCChangeTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BYDLD.SCChangeTable)
  GOOGLE_DCHECK_NE(&from, this);
  const SCChangeTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCChangeTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BYDLD.SCChangeTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BYDLD.SCChangeTable)
    MergeFrom(*source);
  }
}

void SCChangeTable::MergeFrom(const SCChangeTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BYDLD.SCChangeTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SCChangeTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BYDLD.SCChangeTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCChangeTable::CopyFrom(const SCChangeTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BYDLD.SCChangeTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCChangeTable::IsInitialized() const {
  return true;
}

void SCChangeTable::InternalSwap(SCChangeTable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCChangeTable::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace BYDLD
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::BYDLD::SC_SceneInfo* Arena::CreateMaybeMessage< ::BYDLD::SC_SceneInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SC_SceneInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::GunSpecEffect* Arena::CreateMaybeMessage< ::BYDLD::GunSpecEffect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::GunSpecEffect >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::WingsSpecEffect* Arena::CreateMaybeMessage< ::BYDLD::WingsSpecEffect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::WingsSpecEffect >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::WingsInfo* Arena::CreateMaybeMessage< ::BYDLD::WingsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::WingsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::PurchaseGun* Arena::CreateMaybeMessage< ::BYDLD::PurchaseGun >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::PurchaseGun >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCVipInfo* Arena::CreateMaybeMessage< ::BYDLD::SCVipInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCVipInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::GunDetail* Arena::CreateMaybeMessage< ::BYDLD::GunDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::GunDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCWingsInfo* Arena::CreateMaybeMessage< ::BYDLD::SCWingsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCWingsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCGunInfo* Arena::CreateMaybeMessage< ::BYDLD::SCGunInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCGunInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCPurchaseCheck* Arena::CreateMaybeMessage< ::BYDLD::SCPurchaseCheck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCPurchaseCheck >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::ObjectData* Arena::CreateMaybeMessage< ::BYDLD::ObjectData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::ObjectData >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::Object2* Arena::CreateMaybeMessage< ::BYDLD::Object2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::Object2 >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::Object3* Arena::CreateMaybeMessage< ::BYDLD::Object3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::Object3 >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::Object4* Arena::CreateMaybeMessage< ::BYDLD::Object4 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::Object4 >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::Decimal* Arena::CreateMaybeMessage< ::BYDLD::Decimal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::Decimal >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSTridentInfo* Arena::CreateMaybeMessage< ::BYDLD::CSTridentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSTridentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCTridentInfo* Arena::CreateMaybeMessage< ::BYDLD::SCTridentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCTridentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSTridentBet* Arena::CreateMaybeMessage< ::BYDLD::CSTridentBet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSTridentBet >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCTridentBet* Arena::CreateMaybeMessage< ::BYDLD::SCTridentBet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCTridentBet >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCPropsTrident* Arena::CreateMaybeMessage< ::BYDLD::SCPropsTrident >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCPropsTrident >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSBigSmallChoose* Arena::CreateMaybeMessage< ::BYDLD::CSBigSmallChoose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSBigSmallChoose >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCBigSmallChoose* Arena::CreateMaybeMessage< ::BYDLD::SCBigSmallChoose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCBigSmallChoose >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSBigSmallBet* Arena::CreateMaybeMessage< ::BYDLD::CSBigSmallBet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSBigSmallBet >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCBigSmallBet* Arena::CreateMaybeMessage< ::BYDLD::SCBigSmallBet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCBigSmallBet >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSShootTorpedo* Arena::CreateMaybeMessage< ::BYDLD::CSShootTorpedo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSShootTorpedo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCShootTorpedo* Arena::CreateMaybeMessage< ::BYDLD::SCShootTorpedo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCShootTorpedo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCPropsTorpedo* Arena::CreateMaybeMessage< ::BYDLD::SCPropsTorpedo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCPropsTorpedo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::AwardPoolData* Arena::CreateMaybeMessage< ::BYDLD::AwardPoolData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::AwardPoolData >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCPropsAwardPool* Arena::CreateMaybeMessage< ::BYDLD::SCPropsAwardPool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCPropsAwardPool >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSLoginGameWithToken* Arena::CreateMaybeMessage< ::BYDLD::CSLoginGameWithToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSLoginGameWithToken >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCLoginGameWithToken* Arena::CreateMaybeMessage< ::BYDLD::SCLoginGameWithToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCLoginGameWithToken >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSUserReady* Arena::CreateMaybeMessage< ::BYDLD::CSUserReady >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSUserReady >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::EffectInfo* Arena::CreateMaybeMessage< ::BYDLD::EffectInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::EffectInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SpecEffect* Arena::CreateMaybeMessage< ::BYDLD::SpecEffect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SpecEffect >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::StationBase* Arena::CreateMaybeMessage< ::BYDLD::StationBase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::StationBase >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCUserReady* Arena::CreateMaybeMessage< ::BYDLD::SCUserReady >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCUserReady >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::JadeAwardInfo* Arena::CreateMaybeMessage< ::BYDLD::JadeAwardInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::JadeAwardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSJadeAwardInfo* Arena::CreateMaybeMessage< ::BYDLD::CSJadeAwardInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSJadeAwardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCJadeAwardInfo* Arena::CreateMaybeMessage< ::BYDLD::SCJadeAwardInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCJadeAwardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSNotifyLogout* Arena::CreateMaybeMessage< ::BYDLD::CSNotifyLogout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSNotifyLogout >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCNotifyLogout* Arena::CreateMaybeMessage< ::BYDLD::SCNotifyLogout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCNotifyLogout >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSSetProbability* Arena::CreateMaybeMessage< ::BYDLD::CSSetProbability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSSetProbability >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCSetProbability* Arena::CreateMaybeMessage< ::BYDLD::SCSetProbability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCSetProbability >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::UserShoot* Arena::CreateMaybeMessage< ::BYDLD::UserShoot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::UserShoot >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSUserShootMulti* Arena::CreateMaybeMessage< ::BYDLD::CSUserShootMulti >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSUserShootMulti >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::UserShootRsp* Arena::CreateMaybeMessage< ::BYDLD::UserShootRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::UserShootRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCUserShootMulti* Arena::CreateMaybeMessage< ::BYDLD::SCUserShootMulti >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCUserShootMulti >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::HitFish* Arena::CreateMaybeMessage< ::BYDLD::HitFish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::HitFish >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSHitMultiFish* Arena::CreateMaybeMessage< ::BYDLD::CSHitMultiFish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSHitMultiFish >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::EffectFish* Arena::CreateMaybeMessage< ::BYDLD::EffectFish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::EffectFish >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::DragonBallWheelInfo* Arena::CreateMaybeMessage< ::BYDLD::DragonBallWheelInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::DragonBallWheelInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::DragonBallInfo* Arena::CreateMaybeMessage< ::BYDLD::DragonBallInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::DragonBallInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::OctopusKingItem* Arena::CreateMaybeMessage< ::BYDLD::OctopusKingItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::OctopusKingItem >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::OctopusKingInfo* Arena::CreateMaybeMessage< ::BYDLD::OctopusKingInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::OctopusKingInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::MagicCardInfo* Arena::CreateMaybeMessage< ::BYDLD::MagicCardInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::MagicCardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::MagicInfo* Arena::CreateMaybeMessage< ::BYDLD::MagicInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::MagicInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::roulette_result* Arena::CreateMaybeMessage< ::BYDLD::roulette_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::roulette_result >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::zeus_result* Arena::CreateMaybeMessage< ::BYDLD::zeus_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::zeus_result >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::Zeus* Arena::CreateMaybeMessage< ::BYDLD::Zeus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::Zeus >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::GemConfig* Arena::CreateMaybeMessage< ::BYDLD::GemConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::GemConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCGemConfigList* Arena::CreateMaybeMessage< ::BYDLD::SCGemConfigList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCGemConfigList >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::ItemWheel* Arena::CreateMaybeMessage< ::BYDLD::ItemWheel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::ItemWheel >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CritWheel* Arena::CreateMaybeMessage< ::BYDLD::CritWheel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CritWheel >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::GoldenJadeInfo* Arena::CreateMaybeMessage< ::BYDLD::GoldenJadeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::GoldenJadeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::AztecGemConfigItem* Arena::CreateMaybeMessage< ::BYDLD::AztecGemConfigItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::AztecGemConfigItem >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::AztecGemConfig* Arena::CreateMaybeMessage< ::BYDLD::AztecGemConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::AztecGemConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSAztecGemConfig* Arena::CreateMaybeMessage< ::BYDLD::CSAztecGemConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSAztecGemConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCAztecGemConfig* Arena::CreateMaybeMessage< ::BYDLD::SCAztecGemConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCAztecGemConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::AztecClearReward* Arena::CreateMaybeMessage< ::BYDLD::AztecClearReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::AztecClearReward >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::AztecTable* Arena::CreateMaybeMessage< ::BYDLD::AztecTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::AztecTable >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::AztecStep* Arena::CreateMaybeMessage< ::BYDLD::AztecStep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::AztecStep >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::AztecDataInfo* Arena::CreateMaybeMessage< ::BYDLD::AztecDataInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::AztecDataInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::Capturefish* Arena::CreateMaybeMessage< ::BYDLD::Capturefish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::Capturefish >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCHitMultiFish* Arena::CreateMaybeMessage< ::BYDLD::SCHitMultiFish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCHitMultiFish >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSSyncMoney* Arena::CreateMaybeMessage< ::BYDLD::CSSyncMoney >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSSyncMoney >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCSyncMoney* Arena::CreateMaybeMessage< ::BYDLD::SCSyncMoney >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCSyncMoney >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::FishTrace* Arena::CreateMaybeMessage< ::BYDLD::FishTrace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::FishTrace >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCFishTracesList* Arena::CreateMaybeMessage< ::BYDLD::SCFishTracesList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCFishTracesList >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::FishTraces* Arena::CreateMaybeMessage< ::BYDLD::FishTraces >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::FishTraces >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSSyncFishReq* Arena::CreateMaybeMessage< ::BYDLD::CSSyncFishReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSSyncFishReq >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCSyncFishReq* Arena::CreateMaybeMessage< ::BYDLD::SCSyncFishReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCSyncFishReq >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSSyncFishRsp* Arena::CreateMaybeMessage< ::BYDLD::CSSyncFishRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSSyncFishRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCSyncFishRsp* Arena::CreateMaybeMessage< ::BYDLD::SCSyncFishRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCSyncFishRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCChangeScene* Arena::CreateMaybeMessage< ::BYDLD::SCChangeScene >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCChangeScene >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSFishOutsideScreen* Arena::CreateMaybeMessage< ::BYDLD::CSFishOutsideScreen >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSFishOutsideScreen >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSLockFish* Arena::CreateMaybeMessage< ::BYDLD::CSLockFish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSLockFish >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCLockFish* Arena::CreateMaybeMessage< ::BYDLD::SCLockFish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCLockFish >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSSetSkill* Arena::CreateMaybeMessage< ::BYDLD::CSSetSkill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSSetSkill >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCSetSkill* Arena::CreateMaybeMessage< ::BYDLD::SCSetSkill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCSetSkill >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCUserTimeoutKick* Arena::CreateMaybeMessage< ::BYDLD::SCUserTimeoutKick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCUserTimeoutKick >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSUserRunBackground* Arena::CreateMaybeMessage< ::BYDLD::CSUserRunBackground >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSUserRunBackground >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCUserRunBackground* Arena::CreateMaybeMessage< ::BYDLD::SCUserRunBackground >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCUserRunBackground >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSUpdateHallProp* Arena::CreateMaybeMessage< ::BYDLD::CSUpdateHallProp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSUpdateHallProp >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSHeartBeat* Arena::CreateMaybeMessage< ::BYDLD::CSHeartBeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSHeartBeat >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCHeartBeat* Arena::CreateMaybeMessage< ::BYDLD::SCHeartBeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCHeartBeat >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCComTask* Arena::CreateMaybeMessage< ::BYDLD::SCComTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCComTask >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSTaskInfo* Arena::CreateMaybeMessage< ::BYDLD::CSTaskInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSTaskInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCTaskInfo* Arena::CreateMaybeMessage< ::BYDLD::SCTaskInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCTaskInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::UserScoreRecord* Arena::CreateMaybeMessage< ::BYDLD::UserScoreRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::UserScoreRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSFreeTimeEnd* Arena::CreateMaybeMessage< ::BYDLD::CSFreeTimeEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSFreeTimeEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCSyncFreeTimes* Arena::CreateMaybeMessage< ::BYDLD::SCSyncFreeTimes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCSyncFreeTimes >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSClickStatistic* Arena::CreateMaybeMessage< ::BYDLD::CSClickStatistic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSClickStatistic >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::JumpHighArena* Arena::CreateMaybeMessage< ::BYDLD::JumpHighArena >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::JumpHighArena >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::GiftBag* Arena::CreateMaybeMessage< ::BYDLD::GiftBag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::GiftBag >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::NewYearCardActivityInfo* Arena::CreateMaybeMessage< ::BYDLD::NewYearCardActivityInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::NewYearCardActivityInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::UserPoolActivityInfo* Arena::CreateMaybeMessage< ::BYDLD::UserPoolActivityInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::UserPoolActivityInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::DragonBallConfig* Arena::CreateMaybeMessage< ::BYDLD::DragonBallConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::DragonBallConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCActivityInfo* Arena::CreateMaybeMessage< ::BYDLD::SCActivityInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCActivityInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCPropEndNotify* Arena::CreateMaybeMessage< ::BYDLD::SCPropEndNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCPropEndNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCPropDropNotify* Arena::CreateMaybeMessage< ::BYDLD::SCPropDropNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCPropDropNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::Prop* Arena::CreateMaybeMessage< ::BYDLD::Prop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::Prop >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::UserProp* Arena::CreateMaybeMessage< ::BYDLD::UserProp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::UserProp >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::UsersProp* Arena::CreateMaybeMessage< ::BYDLD::UsersProp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::UsersProp >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SSAwardPoolMsg* Arena::CreateMaybeMessage< ::BYDLD::SSAwardPoolMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SSAwardPoolMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSScratchNewYearCard* Arena::CreateMaybeMessage< ::BYDLD::CSScratchNewYearCard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSScratchNewYearCard >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSBuyNewYearCard* Arena::CreateMaybeMessage< ::BYDLD::CSBuyNewYearCard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSBuyNewYearCard >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::NewYearCardMultiple* Arena::CreateMaybeMessage< ::BYDLD::NewYearCardMultiple >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::NewYearCardMultiple >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCScratchNewYearCard* Arena::CreateMaybeMessage< ::BYDLD::SCScratchNewYearCard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCScratchNewYearCard >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSNewYearCardExchange* Arena::CreateMaybeMessage< ::BYDLD::CSNewYearCardExchange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSNewYearCardExchange >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::NewYearCardAward* Arena::CreateMaybeMessage< ::BYDLD::NewYearCardAward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::NewYearCardAward >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCNewYearCardExchange* Arena::CreateMaybeMessage< ::BYDLD::SCNewYearCardExchange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCNewYearCardExchange >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSNewYearCardAwardRecord* Arena::CreateMaybeMessage< ::BYDLD::CSNewYearCardAwardRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSNewYearCardAwardRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::NewYearCardAwardRecord* Arena::CreateMaybeMessage< ::BYDLD::NewYearCardAwardRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::NewYearCardAwardRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCNewYearCardAwardRecord* Arena::CreateMaybeMessage< ::BYDLD::SCNewYearCardAwardRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCNewYearCardAwardRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SkillTime* Arena::CreateMaybeMessage< ::BYDLD::SkillTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SkillTime >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSSaveSkillTime* Arena::CreateMaybeMessage< ::BYDLD::CSSaveSkillTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSSaveSkillTime >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSSuperTridentShoot* Arena::CreateMaybeMessage< ::BYDLD::CSSuperTridentShoot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSSuperTridentShoot >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCSuperTridentShoot* Arena::CreateMaybeMessage< ::BYDLD::SCSuperTridentShoot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCSuperTridentShoot >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSSuperTridentAttack* Arena::CreateMaybeMessage< ::BYDLD::CSSuperTridentAttack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSSuperTridentAttack >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CommonResp* Arena::CreateMaybeMessage< ::BYDLD::CommonResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CommonResp >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSAwardPoolRecord* Arena::CreateMaybeMessage< ::BYDLD::CSAwardPoolRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSAwardPoolRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::AwardPoolRecord* Arena::CreateMaybeMessage< ::BYDLD::AwardPoolRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::AwardPoolRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCAwardPoolRecord* Arena::CreateMaybeMessage< ::BYDLD::SCAwardPoolRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCAwardPoolRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSFortuneShoot* Arena::CreateMaybeMessage< ::BYDLD::CSFortuneShoot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSFortuneShoot >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCFortuneShoot* Arena::CreateMaybeMessage< ::BYDLD::SCFortuneShoot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCFortuneShoot >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::IngotInfo* Arena::CreateMaybeMessage< ::BYDLD::IngotInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::IngotInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCSyncFortune* Arena::CreateMaybeMessage< ::BYDLD::SCSyncFortune >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCSyncFortune >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSUserPoolInfo* Arena::CreateMaybeMessage< ::BYDLD::CSUserPoolInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSUserPoolInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::GoodsInfo* Arena::CreateMaybeMessage< ::BYDLD::GoodsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::GoodsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::UserAwardItem* Arena::CreateMaybeMessage< ::BYDLD::UserAwardItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::UserAwardItem >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCUserPoolInfo* Arena::CreateMaybeMessage< ::BYDLD::SCUserPoolInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCUserPoolInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSUserPoolStatus* Arena::CreateMaybeMessage< ::BYDLD::CSUserPoolStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSUserPoolStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCUserPoolStatus* Arena::CreateMaybeMessage< ::BYDLD::SCUserPoolStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCUserPoolStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSUserPoolPreDraw* Arena::CreateMaybeMessage< ::BYDLD::CSUserPoolPreDraw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSUserPoolPreDraw >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCUserPoolPreDraw* Arena::CreateMaybeMessage< ::BYDLD::SCUserPoolPreDraw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCUserPoolPreDraw >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSUserPoolDraw* Arena::CreateMaybeMessage< ::BYDLD::CSUserPoolDraw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSUserPoolDraw >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCUserPoolDraw* Arena::CreateMaybeMessage< ::BYDLD::SCUserPoolDraw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCUserPoolDraw >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCUserPoolAdd* Arena::CreateMaybeMessage< ::BYDLD::SCUserPoolAdd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCUserPoolAdd >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::ResultRank* Arena::CreateMaybeMessage< ::BYDLD::ResultRank >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::ResultRank >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCMatchResult* Arena::CreateMaybeMessage< ::BYDLD::SCMatchResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCMatchResult >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::MatchPackAddition* Arena::CreateMaybeMessage< ::BYDLD::MatchPackAddition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::MatchPackAddition >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSMatchPackAddition* Arena::CreateMaybeMessage< ::BYDLD::CSMatchPackAddition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSMatchPackAddition >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCMatchPackAddition* Arena::CreateMaybeMessage< ::BYDLD::SCMatchPackAddition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCMatchPackAddition >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCMatchPackInvail* Arena::CreateMaybeMessage< ::BYDLD::SCMatchPackInvail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCMatchPackInvail >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::HttpResult* Arena::CreateMaybeMessage< ::BYDLD::HttpResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::HttpResult >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSHBonusPool* Arena::CreateMaybeMessage< ::BYDLD::CSHBonusPool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSHBonusPool >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::HBonusPool* Arena::CreateMaybeMessage< ::BYDLD::HBonusPool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::HBonusPool >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCHBonusPool* Arena::CreateMaybeMessage< ::BYDLD::SCHBonusPool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCHBonusPool >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSHRankBar* Arena::CreateMaybeMessage< ::BYDLD::CSHRankBar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSHRankBar >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCHRankBar* Arena::CreateMaybeMessage< ::BYDLD::SCHRankBar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCHRankBar >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::RealRank* Arena::CreateMaybeMessage< ::BYDLD::RealRank >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::RealRank >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSHRealRank* Arena::CreateMaybeMessage< ::BYDLD::CSHRealRank >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSHRealRank >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCHRealRank* Arena::CreateMaybeMessage< ::BYDLD::SCHRealRank >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCHRealRank >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::Reward* Arena::CreateMaybeMessage< ::BYDLD::Reward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::Reward >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSHReward* Arena::CreateMaybeMessage< ::BYDLD::CSHReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSHReward >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCHReward* Arena::CreateMaybeMessage< ::BYDLD::SCHReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCHReward >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSHMatchInfoTip* Arena::CreateMaybeMessage< ::BYDLD::CSHMatchInfoTip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSHMatchInfoTip >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::MatchInfoTip* Arena::CreateMaybeMessage< ::BYDLD::MatchInfoTip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::MatchInfoTip >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCHMatchInfoTip* Arena::CreateMaybeMessage< ::BYDLD::SCHMatchInfoTip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCHMatchInfoTip >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSHMatchInfo* Arena::CreateMaybeMessage< ::BYDLD::CSHMatchInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSHMatchInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCHMatchInfo* Arena::CreateMaybeMessage< ::BYDLD::SCHMatchInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCHMatchInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::HistoryRank* Arena::CreateMaybeMessage< ::BYDLD::HistoryRank >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::HistoryRank >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSHHistoryRank* Arena::CreateMaybeMessage< ::BYDLD::CSHHistoryRank >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSHHistoryRank >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCHHistoryRank* Arena::CreateMaybeMessage< ::BYDLD::SCHHistoryRank >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCHHistoryRank >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSHLuckyInfo* Arena::CreateMaybeMessage< ::BYDLD::CSHLuckyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSHLuckyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::LuckyInfo* Arena::CreateMaybeMessage< ::BYDLD::LuckyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::LuckyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCHLuckyInfo* Arena::CreateMaybeMessage< ::BYDLD::SCHLuckyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCHLuckyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::AwardDetail* Arena::CreateMaybeMessage< ::BYDLD::AwardDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::AwardDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCLuckyAwardNotify* Arena::CreateMaybeMessage< ::BYDLD::SCLuckyAwardNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCLuckyAwardNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::AwardProp* Arena::CreateMaybeMessage< ::BYDLD::AwardProp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::AwardProp >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::LuckyTaskInfo* Arena::CreateMaybeMessage< ::BYDLD::LuckyTaskInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::LuckyTaskInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSLuckyDrawInfo* Arena::CreateMaybeMessage< ::BYDLD::CSLuckyDrawInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSLuckyDrawInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCLuckyDrawInfo* Arena::CreateMaybeMessage< ::BYDLD::SCLuckyDrawInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCLuckyDrawInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSGetLuckyTaskAward* Arena::CreateMaybeMessage< ::BYDLD::CSGetLuckyTaskAward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSGetLuckyTaskAward >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCLuckyTaskInfo* Arena::CreateMaybeMessage< ::BYDLD::SCLuckyTaskInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCLuckyTaskInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSGetLuckyNum* Arena::CreateMaybeMessage< ::BYDLD::CSGetLuckyNum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSGetLuckyNum >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCGetLuckyNum* Arena::CreateMaybeMessage< ::BYDLD::SCGetLuckyNum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCGetLuckyNum >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSLuckyRedDot* Arena::CreateMaybeMessage< ::BYDLD::CSLuckyRedDot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSLuckyRedDot >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCLuckyRedDot* Arena::CreateMaybeMessage< ::BYDLD::SCLuckyRedDot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCLuckyRedDot >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::LuckyRecord* Arena::CreateMaybeMessage< ::BYDLD::LuckyRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::LuckyRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::OwnRecord* Arena::CreateMaybeMessage< ::BYDLD::OwnRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::OwnRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSLuckyRecord* Arena::CreateMaybeMessage< ::BYDLD::CSLuckyRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSLuckyRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCLuckyRecord* Arena::CreateMaybeMessage< ::BYDLD::SCLuckyRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCLuckyRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCOwnRecord* Arena::CreateMaybeMessage< ::BYDLD::SCOwnRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCOwnRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSDragonWheelStart* Arena::CreateMaybeMessage< ::BYDLD::CSDragonWheelStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSDragonWheelStart >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCDragonWheelStop* Arena::CreateMaybeMessage< ::BYDLD::SCDragonWheelStop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCDragonWheelStop >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCSyncHallProp* Arena::CreateMaybeMessage< ::BYDLD::SCSyncHallProp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCSyncHallProp >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSCheckDragonWheelProp* Arena::CreateMaybeMessage< ::BYDLD::CSCheckDragonWheelProp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSCheckDragonWheelProp >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCCheckDragonWheelProp* Arena::CreateMaybeMessage< ::BYDLD::SCCheckDragonWheelProp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCCheckDragonWheelProp >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSUserPoolDoubleInfo* Arena::CreateMaybeMessage< ::BYDLD::CSUserPoolDoubleInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSUserPoolDoubleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCUserPoolDoubleInfo* Arena::CreateMaybeMessage< ::BYDLD::SCUserPoolDoubleInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCUserPoolDoubleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSUserPoolDouble* Arena::CreateMaybeMessage< ::BYDLD::CSUserPoolDouble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSUserPoolDouble >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCUserPoolDouble* Arena::CreateMaybeMessage< ::BYDLD::SCUserPoolDouble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCUserPoolDouble >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSLuckyPoolInfo* Arena::CreateMaybeMessage< ::BYDLD::CSLuckyPoolInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSLuckyPoolInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCLuckyPoolInfo* Arena::CreateMaybeMessage< ::BYDLD::SCLuckyPoolInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCLuckyPoolInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSLuckyPoolDraw* Arena::CreateMaybeMessage< ::BYDLD::CSLuckyPoolDraw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSLuckyPoolDraw >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCLuckyPoolDraw* Arena::CreateMaybeMessage< ::BYDLD::SCLuckyPoolDraw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCLuckyPoolDraw >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::TridentRankList* Arena::CreateMaybeMessage< ::BYDLD::TridentRankList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::TridentRankList >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCTridentRankResult* Arena::CreateMaybeMessage< ::BYDLD::SCTridentRankResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCTridentRankResult >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSBigSmallWinInfo* Arena::CreateMaybeMessage< ::BYDLD::CSBigSmallWinInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSBigSmallWinInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCBigSmallWinInfo* Arena::CreateMaybeMessage< ::BYDLD::SCBigSmallWinInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCBigSmallWinInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSBigSmallRecord* Arena::CreateMaybeMessage< ::BYDLD::CSBigSmallRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSBigSmallRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::BigSmallRecord* Arena::CreateMaybeMessage< ::BYDLD::BigSmallRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::BigSmallRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCBigSmallRecord* Arena::CreateMaybeMessage< ::BYDLD::SCBigSmallRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCBigSmallRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::ItemEnableInfo* Arena::CreateMaybeMessage< ::BYDLD::ItemEnableInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::ItemEnableInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::ItemEnableNotice* Arena::CreateMaybeMessage< ::BYDLD::ItemEnableNotice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::ItemEnableNotice >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::RewardTask* Arena::CreateMaybeMessage< ::BYDLD::RewardTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::RewardTask >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::RewardConf* Arena::CreateMaybeMessage< ::BYDLD::RewardConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::RewardConf >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSReqRewardAddTask* Arena::CreateMaybeMessage< ::BYDLD::CSReqRewardAddTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSReqRewardAddTask >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCRepRewardTaskList* Arena::CreateMaybeMessage< ::BYDLD::SCRepRewardTaskList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCRepRewardTaskList >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCRewardTaskFinish* Arena::CreateMaybeMessage< ::BYDLD::SCRewardTaskFinish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCRewardTaskFinish >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCSyncRewardTaskResult* Arena::CreateMaybeMessage< ::BYDLD::SCSyncRewardTaskResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCSyncRewardTaskResult >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSReqRewardRecord* Arena::CreateMaybeMessage< ::BYDLD::CSReqRewardRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSReqRewardRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCRepRewardTaskRecord* Arena::CreateMaybeMessage< ::BYDLD::SCRepRewardTaskRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCRepRewardTaskRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSRewardChangeAuto* Arena::CreateMaybeMessage< ::BYDLD::CSRewardChangeAuto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSRewardChangeAuto >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCRewardAutoRep* Arena::CreateMaybeMessage< ::BYDLD::SCRewardAutoRep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCRewardAutoRep >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCSeaCrabCreate* Arena::CreateMaybeMessage< ::BYDLD::SCSeaCrabCreate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCSeaCrabCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSSyncCrabStatus* Arena::CreateMaybeMessage< ::BYDLD::CSSyncCrabStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSSyncCrabStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCSyncCrabStatus* Arena::CreateMaybeMessage< ::BYDLD::SCSyncCrabStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCSyncCrabStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSDragonBallEnd* Arena::CreateMaybeMessage< ::BYDLD::CSDragonBallEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSDragonBallEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCDragonBallRes* Arena::CreateMaybeMessage< ::BYDLD::SCDragonBallRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCDragonBallRes >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::DevouredFish* Arena::CreateMaybeMessage< ::BYDLD::DevouredFish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::DevouredFish >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSDevourHit* Arena::CreateMaybeMessage< ::BYDLD::CSDevourHit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSDevourHit >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCDevourHit* Arena::CreateMaybeMessage< ::BYDLD::SCDevourHit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCDevourHit >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::OpenChestReward* Arena::CreateMaybeMessage< ::BYDLD::OpenChestReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::OpenChestReward >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCUpdateChestStatus* Arena::CreateMaybeMessage< ::BYDLD::SCUpdateChestStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCUpdateChestStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSChestConfig* Arena::CreateMaybeMessage< ::BYDLD::CSChestConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSChestConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::ChestBrief* Arena::CreateMaybeMessage< ::BYDLD::ChestBrief >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::ChestBrief >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCChestConfig* Arena::CreateMaybeMessage< ::BYDLD::SCChestConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCChestConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSOpenChest* Arena::CreateMaybeMessage< ::BYDLD::CSOpenChest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSOpenChest >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCOpenChest* Arena::CreateMaybeMessage< ::BYDLD::SCOpenChest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCOpenChest >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSSelectChestReward* Arena::CreateMaybeMessage< ::BYDLD::CSSelectChestReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSSelectChestReward >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCSelectChestReward* Arena::CreateMaybeMessage< ::BYDLD::SCSelectChestReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCSelectChestReward >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSChestSetAutoSelect* Arena::CreateMaybeMessage< ::BYDLD::CSChestSetAutoSelect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSChestSetAutoSelect >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCChestSetAutoSelect* Arena::CreateMaybeMessage< ::BYDLD::SCChestSetAutoSelect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCChestSetAutoSelect >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSChestSetEnable* Arena::CreateMaybeMessage< ::BYDLD::CSChestSetEnable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSChestSetEnable >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCChestSetEnable* Arena::CreateMaybeMessage< ::BYDLD::SCChestSetEnable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCChestSetEnable >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSSyncAnimation* Arena::CreateMaybeMessage< ::BYDLD::CSSyncAnimation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSSyncAnimation >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCSyncAnimation* Arena::CreateMaybeMessage< ::BYDLD::SCSyncAnimation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCSyncAnimation >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSMagicCardList* Arena::CreateMaybeMessage< ::BYDLD::CSMagicCardList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSMagicCardList >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCMagicCardList* Arena::CreateMaybeMessage< ::BYDLD::SCMagicCardList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCMagicCardList >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCTortoiseExplode* Arena::CreateMaybeMessage< ::BYDLD::SCTortoiseExplode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCTortoiseExplode >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSBuyGun* Arena::CreateMaybeMessage< ::BYDLD::CSBuyGun >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSBuyGun >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCBuyGun* Arena::CreateMaybeMessage< ::BYDLD::SCBuyGun >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCBuyGun >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCWaterDropInfo* Arena::CreateMaybeMessage< ::BYDLD::SCWaterDropInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCWaterDropInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSBuyWings* Arena::CreateMaybeMessage< ::BYDLD::CSBuyWings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSBuyWings >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCBuyWings* Arena::CreateMaybeMessage< ::BYDLD::SCBuyWings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCBuyWings >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSSetWings* Arena::CreateMaybeMessage< ::BYDLD::CSSetWings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSSetWings >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCSetWings* Arena::CreateMaybeMessage< ::BYDLD::SCSetWings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCSetWings >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCBeKicked* Arena::CreateMaybeMessage< ::BYDLD::SCBeKicked >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCBeKicked >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSClientTimeValidate* Arena::CreateMaybeMessage< ::BYDLD::CSClientTimeValidate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSClientTimeValidate >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCClientTimeValidate* Arena::CreateMaybeMessage< ::BYDLD::SCClientTimeValidate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCClientTimeValidate >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::CSChangeTable* Arena::CreateMaybeMessage< ::BYDLD::CSChangeTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::CSChangeTable >(arena);
}
template<> PROTOBUF_NOINLINE ::BYDLD::SCChangeTable* Arena::CreateMaybeMessage< ::BYDLD::SCChangeTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BYDLD::SCChangeTable >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
