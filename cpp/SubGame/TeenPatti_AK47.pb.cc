// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TeenPatti_AK47.proto

#include "TeenPatti_AK47.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_TeenPatti_5fAK47_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AKMsgHandCards_TeenPatti_5fAK47_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TeenPatti_5fAK47_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AKMsgPlayerInfo_TeenPatti_5fAK47_2eproto;
namespace TeenPatti_AK47 {
class AKMsgTableStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AKMsgTableState> _instance;
} _AKMsgTableState_default_instance_;
class AKMsgHandCardsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AKMsgHandCards> _instance;
} _AKMsgHandCards_default_instance_;
class AKMsgPlayerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AKMsgPlayerInfo> _instance;
} _AKMsgPlayerInfo_default_instance_;
class AKMsgSceneInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AKMsgSceneInfo> _instance;
} _AKMsgSceneInfo_default_instance_;
class AKMsgGameStartRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AKMsgGameStartResp> _instance;
} _AKMsgGameStartResp_default_instance_;
class AKMsgNotifyActionRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AKMsgNotifyActionResp> _instance;
} _AKMsgNotifyActionResp_default_instance_;
class AKMsgActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AKMsgAction> _instance;
} _AKMsgAction_default_instance_;
class AKMsgGiveUpRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AKMsgGiveUpResp> _instance;
} _AKMsgGiveUpResp_default_instance_;
class AKMsgLookCardRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AKMsgLookCardResp> _instance;
} _AKMsgLookCardResp_default_instance_;
class AKMsgAddBetRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AKMsgAddBetResp> _instance;
} _AKMsgAddBetResp_default_instance_;
class AKMsgCompareCardRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AKMsgCompareCardResp> _instance;
} _AKMsgCompareCardResp_default_instance_;
class AKMsgCompareCardRetRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AKMsgCompareCardRetResp> _instance;
} _AKMsgCompareCardRetResp_default_instance_;
class AKMsgGameResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AKMsgGameResult> _instance;
} _AKMsgGameResult_default_instance_;
class AKMsgNotifyPlayerActDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AKMsgNotifyPlayerAct> _instance;
} _AKMsgNotifyPlayerAct_default_instance_;
}  // namespace TeenPatti_AK47
static void InitDefaultsscc_info_AKMsgAction_TeenPatti_5fAK47_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TeenPatti_AK47::_AKMsgAction_default_instance_;
    new (ptr) ::TeenPatti_AK47::AKMsgAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AKMsgAction_TeenPatti_5fAK47_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AKMsgAction_TeenPatti_5fAK47_2eproto}, {}};

static void InitDefaultsscc_info_AKMsgAddBetResp_TeenPatti_5fAK47_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TeenPatti_AK47::_AKMsgAddBetResp_default_instance_;
    new (ptr) ::TeenPatti_AK47::AKMsgAddBetResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AKMsgAddBetResp_TeenPatti_5fAK47_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AKMsgAddBetResp_TeenPatti_5fAK47_2eproto}, {}};

static void InitDefaultsscc_info_AKMsgCompareCardResp_TeenPatti_5fAK47_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TeenPatti_AK47::_AKMsgCompareCardResp_default_instance_;
    new (ptr) ::TeenPatti_AK47::AKMsgCompareCardResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AKMsgCompareCardResp_TeenPatti_5fAK47_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AKMsgCompareCardResp_TeenPatti_5fAK47_2eproto}, {}};

static void InitDefaultsscc_info_AKMsgCompareCardRetResp_TeenPatti_5fAK47_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TeenPatti_AK47::_AKMsgCompareCardRetResp_default_instance_;
    new (ptr) ::TeenPatti_AK47::AKMsgCompareCardRetResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AKMsgCompareCardRetResp_TeenPatti_5fAK47_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AKMsgCompareCardRetResp_TeenPatti_5fAK47_2eproto}, {
      &scc_info_AKMsgHandCards_TeenPatti_5fAK47_2eproto.base,}};

static void InitDefaultsscc_info_AKMsgGameResult_TeenPatti_5fAK47_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TeenPatti_AK47::_AKMsgGameResult_default_instance_;
    new (ptr) ::TeenPatti_AK47::AKMsgGameResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AKMsgGameResult_TeenPatti_5fAK47_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AKMsgGameResult_TeenPatti_5fAK47_2eproto}, {
      &scc_info_AKMsgHandCards_TeenPatti_5fAK47_2eproto.base,}};

static void InitDefaultsscc_info_AKMsgGameStartResp_TeenPatti_5fAK47_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TeenPatti_AK47::_AKMsgGameStartResp_default_instance_;
    new (ptr) ::TeenPatti_AK47::AKMsgGameStartResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AKMsgGameStartResp_TeenPatti_5fAK47_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AKMsgGameStartResp_TeenPatti_5fAK47_2eproto}, {}};

static void InitDefaultsscc_info_AKMsgGiveUpResp_TeenPatti_5fAK47_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TeenPatti_AK47::_AKMsgGiveUpResp_default_instance_;
    new (ptr) ::TeenPatti_AK47::AKMsgGiveUpResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AKMsgGiveUpResp_TeenPatti_5fAK47_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AKMsgGiveUpResp_TeenPatti_5fAK47_2eproto}, {}};

static void InitDefaultsscc_info_AKMsgHandCards_TeenPatti_5fAK47_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TeenPatti_AK47::_AKMsgHandCards_default_instance_;
    new (ptr) ::TeenPatti_AK47::AKMsgHandCards();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AKMsgHandCards_TeenPatti_5fAK47_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AKMsgHandCards_TeenPatti_5fAK47_2eproto}, {}};

static void InitDefaultsscc_info_AKMsgLookCardResp_TeenPatti_5fAK47_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TeenPatti_AK47::_AKMsgLookCardResp_default_instance_;
    new (ptr) ::TeenPatti_AK47::AKMsgLookCardResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AKMsgLookCardResp_TeenPatti_5fAK47_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AKMsgLookCardResp_TeenPatti_5fAK47_2eproto}, {
      &scc_info_AKMsgHandCards_TeenPatti_5fAK47_2eproto.base,}};

static void InitDefaultsscc_info_AKMsgNotifyActionResp_TeenPatti_5fAK47_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TeenPatti_AK47::_AKMsgNotifyActionResp_default_instance_;
    new (ptr) ::TeenPatti_AK47::AKMsgNotifyActionResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AKMsgNotifyActionResp_TeenPatti_5fAK47_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AKMsgNotifyActionResp_TeenPatti_5fAK47_2eproto}, {}};

static void InitDefaultsscc_info_AKMsgNotifyPlayerAct_TeenPatti_5fAK47_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TeenPatti_AK47::_AKMsgNotifyPlayerAct_default_instance_;
    new (ptr) ::TeenPatti_AK47::AKMsgNotifyPlayerAct();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AKMsgNotifyPlayerAct_TeenPatti_5fAK47_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AKMsgNotifyPlayerAct_TeenPatti_5fAK47_2eproto}, {}};

static void InitDefaultsscc_info_AKMsgPlayerInfo_TeenPatti_5fAK47_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TeenPatti_AK47::_AKMsgPlayerInfo_default_instance_;
    new (ptr) ::TeenPatti_AK47::AKMsgPlayerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AKMsgPlayerInfo_TeenPatti_5fAK47_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AKMsgPlayerInfo_TeenPatti_5fAK47_2eproto}, {
      &scc_info_AKMsgHandCards_TeenPatti_5fAK47_2eproto.base,}};

static void InitDefaultsscc_info_AKMsgSceneInfo_TeenPatti_5fAK47_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TeenPatti_AK47::_AKMsgSceneInfo_default_instance_;
    new (ptr) ::TeenPatti_AK47::AKMsgSceneInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AKMsgSceneInfo_TeenPatti_5fAK47_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AKMsgSceneInfo_TeenPatti_5fAK47_2eproto}, {
      &scc_info_AKMsgPlayerInfo_TeenPatti_5fAK47_2eproto.base,}};

static void InitDefaultsscc_info_AKMsgTableState_TeenPatti_5fAK47_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TeenPatti_AK47::_AKMsgTableState_default_instance_;
    new (ptr) ::TeenPatti_AK47::AKMsgTableState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AKMsgTableState_TeenPatti_5fAK47_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AKMsgTableState_TeenPatti_5fAK47_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TeenPatti_5fAK47_2eproto[14];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_TeenPatti_5fAK47_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TeenPatti_5fAK47_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TeenPatti_5fAK47_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgTableState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgTableState, state_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgTableState, out_ime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgHandCards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgHandCards, card_type_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgHandCards, cards_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgHandCards, change_cards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgPlayerInfo, chair_id_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgPlayerInfo, ming_zhu_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgPlayerInfo, play_status_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgPlayerInfo, player_bet_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgPlayerInfo, last_bet_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgPlayerInfo, gold_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgPlayerInfo, win_gold_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgPlayerInfo, handl_cards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgSceneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgSceneInfo, max_score_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgSceneInfo, table_max_score_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgSceneInfo, cell_score_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgSceneInfo, cur_times_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgSceneInfo, table_state_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgSceneInfo, total_bet_score_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgSceneInfo, tax_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgSceneInfo, banker_chair_id_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgSceneInfo, cur_chair_id_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgSceneInfo, cur_chair_act_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgSceneInfo, out_time_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgSceneInfo, total_time_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgSceneInfo, compare_user_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgSceneInfo, compare_win_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgSceneInfo, player_infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgGameStartResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgGameStartResp, cur_chair_id_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgGameStartResp, cur_times_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgGameStartResp, banker_chair_id_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgGameStartResp, max_score_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgGameStartResp, max_blind_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgGameStartResp, cell_score_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgGameStartResp, table_max_score_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgGameStartResp, play_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgNotifyActionResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgNotifyActionResp, cur_chair_id_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgNotifyActionResp, cur_times_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgNotifyActionResp, current_act_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgNotifyActionResp, oper_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgAction, act_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgAction, bet_score_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgAction, compare_user_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgAction, is_ok_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgGiveUpResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgGiveUpResp, chair_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgLookCardResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgLookCardResp, chair_id_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgLookCardResp, cur_chair_id_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgLookCardResp, new_act_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgLookCardResp, handl_cards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgAddBetResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgAddBetResp, add_chair_id_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgAddBetResp, add_score_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgAddBetResp, bet_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgCompareCardResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgCompareCardResp, chair_id_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgCompareCardResp, compare_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgCompareCardRetResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgCompareCardRetResp, current_chair_id_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgCompareCardRetResp, current_act_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgCompareCardRetResp, lost_id_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgCompareCardRetResp, compare_id_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgCompareCardRetResp, passive_id_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgCompareCardRetResp, compare_cards_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgCompareCardRetResp, passive_cards_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgCompareCardRetResp, is_agree_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgGameResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgGameResult, game_tax_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgGameResult, game_score_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgGameResult, player_hands_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgGameResult, end_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgNotifyPlayerAct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgNotifyPlayerAct, chair_id_),
  PROTOBUF_FIELD_OFFSET(::TeenPatti_AK47::AKMsgNotifyPlayerAct, act_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TeenPatti_AK47::AKMsgTableState)},
  { 7, -1, sizeof(::TeenPatti_AK47::AKMsgHandCards)},
  { 15, -1, sizeof(::TeenPatti_AK47::AKMsgPlayerInfo)},
  { 28, -1, sizeof(::TeenPatti_AK47::AKMsgSceneInfo)},
  { 48, -1, sizeof(::TeenPatti_AK47::AKMsgGameStartResp)},
  { 61, -1, sizeof(::TeenPatti_AK47::AKMsgNotifyActionResp)},
  { 70, -1, sizeof(::TeenPatti_AK47::AKMsgAction)},
  { 79, -1, sizeof(::TeenPatti_AK47::AKMsgGiveUpResp)},
  { 85, -1, sizeof(::TeenPatti_AK47::AKMsgLookCardResp)},
  { 94, -1, sizeof(::TeenPatti_AK47::AKMsgAddBetResp)},
  { 102, -1, sizeof(::TeenPatti_AK47::AKMsgCompareCardResp)},
  { 109, -1, sizeof(::TeenPatti_AK47::AKMsgCompareCardRetResp)},
  { 122, -1, sizeof(::TeenPatti_AK47::AKMsgGameResult)},
  { 131, -1, sizeof(::TeenPatti_AK47::AKMsgNotifyPlayerAct)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TeenPatti_AK47::_AKMsgTableState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TeenPatti_AK47::_AKMsgHandCards_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TeenPatti_AK47::_AKMsgPlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TeenPatti_AK47::_AKMsgSceneInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TeenPatti_AK47::_AKMsgGameStartResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TeenPatti_AK47::_AKMsgNotifyActionResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TeenPatti_AK47::_AKMsgAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TeenPatti_AK47::_AKMsgGiveUpResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TeenPatti_AK47::_AKMsgLookCardResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TeenPatti_AK47::_AKMsgAddBetResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TeenPatti_AK47::_AKMsgCompareCardResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TeenPatti_AK47::_AKMsgCompareCardRetResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TeenPatti_AK47::_AKMsgGameResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TeenPatti_AK47::_AKMsgNotifyPlayerAct_default_instance_),
};

const char descriptor_table_protodef_TeenPatti_5fAK47_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024TeenPatti_AK47.proto\022\016TeenPatti_AK47\"1"
  "\n\017AKMsgTableState\022\r\n\005state\030\001 \001(\005\022\017\n\007out_"
  "ime\030\002 \001(\005\"H\n\016AKMsgHandCards\022\021\n\tcard_type"
  "\030\001 \001(\005\022\r\n\005cards\030\002 \003(\005\022\024\n\014change_cards\030\003 "
  "\003(\005\"\305\001\n\017AKMsgPlayerInfo\022\020\n\010chair_id\030\001 \001("
  "\005\022\020\n\010ming_zhu\030\002 \001(\010\022\023\n\013play_status\030\003 \001(\005"
  "\022\022\n\nplayer_bet\030\004 \001(\003\022\020\n\010last_bet\030\005 \001(\003\022\014"
  "\n\004gold\030\006 \001(\003\022\020\n\010win_gold\030\007 \001(\003\0223\n\013handl_"
  "cards\030\010 \001(\0132\036.TeenPatti_AK47.AKMsgHandCa"
  "rds\"\354\002\n\016AKMsgSceneInfo\022\021\n\tmax_score\030\001 \001("
  "\003\022\027\n\017table_max_score\030\002 \001(\003\022\022\n\ncell_score"
  "\030\003 \001(\003\022\021\n\tcur_times\030\004 \001(\005\022\023\n\013table_state"
  "\030\005 \001(\005\022\027\n\017total_bet_score\030\006 \001(\003\022\013\n\003tax\030\007"
  " \001(\005\022\027\n\017banker_chair_id\030\010 \001(\005\022\024\n\014cur_cha"
  "ir_id\030\t \001(\005\022\025\n\rcur_chair_act\030\n \001(\005\022\020\n\010ou"
  "t_time\030\013 \001(\005\022\022\n\ntotal_time\030\014 \001(\005\022\024\n\014comp"
  "are_user\030\r \001(\005\022\023\n\013compare_win\030\016 \001(\005\0225\n\014p"
  "layer_infos\030\017 \003(\0132\037.TeenPatti_AK47.AKMsg"
  "PlayerInfo\"\275\001\n\022AKMsgGameStartResp\022\024\n\014cur"
  "_chair_id\030\001 \001(\005\022\021\n\tcur_times\030\002 \001(\005\022\027\n\017ba"
  "nker_chair_id\030\003 \001(\005\022\021\n\tmax_score\030\004 \001(\003\022\021"
  "\n\tmax_blind\030\005 \001(\003\022\022\n\ncell_score\030\006 \001(\003\022\027\n"
  "\017table_max_score\030\007 \001(\003\022\022\n\nplay_index\030\010 \003"
  "(\005\"h\n\025AKMsgNotifyActionResp\022\024\n\014cur_chair"
  "_id\030\001 \001(\005\022\021\n\tcur_times\030\002 \001(\005\022\023\n\013current_"
  "act\030\003 \001(\005\022\021\n\toper_time\030\004 \001(\005\"R\n\013AKMsgAct"
  "ion\022\013\n\003act\030\001 \001(\005\022\021\n\tbet_score\030\002 \001(\003\022\024\n\014c"
  "ompare_user\030\003 \001(\003\022\r\n\005is_ok\030\004 \001(\010\"#\n\017AKMs"
  "gGiveUpResp\022\020\n\010chair_id\030\001 \001(\005\"\201\001\n\021AKMsgL"
  "ookCardResp\022\020\n\010chair_id\030\001 \001(\005\022\024\n\014cur_cha"
  "ir_id\030\002 \001(\005\022\017\n\007new_act\030\003 \001(\005\0223\n\013handl_ca"
  "rds\030\004 \001(\0132\036.TeenPatti_AK47.AKMsgHandCard"
  "s\"L\n\017AKMsgAddBetResp\022\024\n\014add_chair_id\030\001 \001"
  "(\005\022\021\n\tadd_score\030\002 \001(\003\022\020\n\010bet_type\030\003 \001(\003\""
  "<\n\024AKMsgCompareCardResp\022\020\n\010chair_id\030\001 \001("
  "\005\022\022\n\ncompare_id\030\002 \001(\005\"\201\002\n\027AKMsgCompareCa"
  "rdRetResp\022\030\n\020current_chair_id\030\001 \001(\005\022\023\n\013c"
  "urrent_act\030\002 \001(\005\022\017\n\007lost_id\030\003 \001(\005\022\022\n\ncom"
  "pare_id\030\004 \001(\005\022\022\n\npassive_id\030\005 \001(\005\0225\n\rcom"
  "pare_cards\030\006 \001(\0132\036.TeenPatti_AK47.AKMsgH"
  "andCards\0225\n\rpassive_cards\030\007 \001(\0132\036.TeenPa"
  "tti_AK47.AKMsgHandCards\022\020\n\010is_agree\030\010 \001("
  "\010\"\200\001\n\017AKMsgGameResult\022\020\n\010game_tax\030\001 \001(\005\022"
  "\022\n\ngame_score\030\002 \003(\003\0224\n\014player_hands\030\003 \003("
  "\0132\036.TeenPatti_AK47.AKMsgHandCards\022\021\n\tend"
  "_state\030\004 \001(\005\"5\n\024AKMsgNotifyPlayerAct\022\020\n\010"
  "chair_id\030\001 \001(\005\022\013\n\003act\030\002 \001(\005*g\n\014EAKGameSt"
  "ate\022\017\n\013GS_TP_READY\020\000\022\016\n\nGS_TP_DEAL\020\001\022\021\n\r"
  "GS_TP_PLAYING\020\002\022\021\n\rGS_TP_COMPARE\020\003\022\020\n\014GS"
  "_TP_RESULT\020\004*U\n\016EAKPlayerState\022\014\n\010PS_REA"
  "DY\020\000\022\013\n\007PS_PLAY\020\001\022\013\n\007PS_GIVE\020\002\022\013\n\007PS_FAI"
  "L\020\003\022\016\n\nPS_TIMEOUT\020\004*\207\001\n\013EAKCardType\022\r\n\tC"
  "T_SINGLE\020\000\022\r\n\tCT_DOUBLE\020\001\022\016\n\nCT_JIN_HUA\020"
  "\002\022\016\n\nCT_SHUN_ZI\020\003\022\017\n\013CT_SHUN_JIN\020\004\022\r\n\tCT"
  "_BAO_ZI\020\005\022\016\n\nCT_SPECIAL\020\006\022\n\n\006CT_MAX\020\007*\204\001"
  "\n\rEAKGameAction\022\r\n\tInvaldAct\020\000\022\n\n\006GiveUp"
  "\020\001\022\014\n\010LookCard\020\002\022\013\n\007CallBet\020\004\022\n\n\006AddBet\020"
  "\010\022\017\n\013CompareCard\020\020\022\020\n\014CompareReply\020 \022\016\n\n"
  "AllCompare\020@*\277\005\n\017EAKMsgIDSubGame\022\025\n\021MsgI"
  "DSubGame_Null\020\000\022\036\n\032MsgIDSubGame_GameStar"
  "tResp\020\001\022!\n\035MsgIDSubGame_NotifyActionResp"
  "\020\002\022\027\n\023MsgIDSubGame_Action\020\003\022\033\n\027MsgIDSubG"
  "ame_GiveUpResp\020\004\022\031\n\025MsgIDSubGame_LookCar"
  "d\020\005\022\033\n\027MsgIDSubGame_AddBetResp\020\006\022 \n\034MsgI"
  "DSubGame_CompareCardResp\020\007\022\037\n\033MsgIDSubGa"
  "me_CompareRetResp\020\010\022\037\n\033MsgIDSubGame_Game"
  "ResultResp\020\t\022 \n\034MsgIDSubGame_NotifyState"
  "Resp\020\n\022\034\n\030MsgIDSubGame_TimeOutResp\020\013\022\035\n\031"
  "MsgIDSubGame_TimeOutReady\020\014\022!\n\035MsgIDSubG"
  "ame_TimeOutReadyResp\020\r\022 \n\034MsgIDSubGame_T"
  "imeOutKickResp\020\016\022&\n\"MsgIDSubGame_NotifyS"
  "ystemCheatResp\020\024\022#\n\037MsgIDSubGame_NotifyC"
  "ardTypeResp\020\025\022 \n\034MsgIDSubGame_NotifyIsMa"
  "xResp\020\026\022\'\n#MsgIDSubGame_NotifyRemainDoub"
  "leResp\020\027\022 \n\034MsgIDSubGame_NotifyRoundResp"
  "\020\030\022\"\n\036MsgIDSubGame_NotifyLastActResp\020\031b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TeenPatti_5fAK47_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_TeenPatti_5fAK47_2eproto_sccs[14] = {
  &scc_info_AKMsgAction_TeenPatti_5fAK47_2eproto.base,
  &scc_info_AKMsgAddBetResp_TeenPatti_5fAK47_2eproto.base,
  &scc_info_AKMsgCompareCardResp_TeenPatti_5fAK47_2eproto.base,
  &scc_info_AKMsgCompareCardRetResp_TeenPatti_5fAK47_2eproto.base,
  &scc_info_AKMsgGameResult_TeenPatti_5fAK47_2eproto.base,
  &scc_info_AKMsgGameStartResp_TeenPatti_5fAK47_2eproto.base,
  &scc_info_AKMsgGiveUpResp_TeenPatti_5fAK47_2eproto.base,
  &scc_info_AKMsgHandCards_TeenPatti_5fAK47_2eproto.base,
  &scc_info_AKMsgLookCardResp_TeenPatti_5fAK47_2eproto.base,
  &scc_info_AKMsgNotifyActionResp_TeenPatti_5fAK47_2eproto.base,
  &scc_info_AKMsgNotifyPlayerAct_TeenPatti_5fAK47_2eproto.base,
  &scc_info_AKMsgPlayerInfo_TeenPatti_5fAK47_2eproto.base,
  &scc_info_AKMsgSceneInfo_TeenPatti_5fAK47_2eproto.base,
  &scc_info_AKMsgTableState_TeenPatti_5fAK47_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TeenPatti_5fAK47_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TeenPatti_5fAK47_2eproto = {
  false, false, descriptor_table_protodef_TeenPatti_5fAK47_2eproto, "TeenPatti_AK47.proto", 3046,
  &descriptor_table_TeenPatti_5fAK47_2eproto_once, descriptor_table_TeenPatti_5fAK47_2eproto_sccs, descriptor_table_TeenPatti_5fAK47_2eproto_deps, 14, 0,
  schemas, file_default_instances, TableStruct_TeenPatti_5fAK47_2eproto::offsets,
  file_level_metadata_TeenPatti_5fAK47_2eproto, 14, file_level_enum_descriptors_TeenPatti_5fAK47_2eproto, file_level_service_descriptors_TeenPatti_5fAK47_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_TeenPatti_5fAK47_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_TeenPatti_5fAK47_2eproto)), true);
namespace TeenPatti_AK47 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EAKGameState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TeenPatti_5fAK47_2eproto);
  return file_level_enum_descriptors_TeenPatti_5fAK47_2eproto[0];
}
bool EAKGameState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EAKPlayerState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TeenPatti_5fAK47_2eproto);
  return file_level_enum_descriptors_TeenPatti_5fAK47_2eproto[1];
}
bool EAKPlayerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EAKCardType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TeenPatti_5fAK47_2eproto);
  return file_level_enum_descriptors_TeenPatti_5fAK47_2eproto[2];
}
bool EAKCardType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EAKGameAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TeenPatti_5fAK47_2eproto);
  return file_level_enum_descriptors_TeenPatti_5fAK47_2eproto[3];
}
bool EAKGameAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EAKMsgIDSubGame_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TeenPatti_5fAK47_2eproto);
  return file_level_enum_descriptors_TeenPatti_5fAK47_2eproto[4];
}
bool EAKMsgIDSubGame_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class AKMsgTableState::_Internal {
 public:
};

AKMsgTableState::AKMsgTableState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TeenPatti_AK47.AKMsgTableState)
}
AKMsgTableState::AKMsgTableState(const AKMsgTableState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&out_ime_) -
    reinterpret_cast<char*>(&state_)) + sizeof(out_ime_));
  // @@protoc_insertion_point(copy_constructor:TeenPatti_AK47.AKMsgTableState)
}

void AKMsgTableState::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&state_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&out_ime_) -
      reinterpret_cast<char*>(&state_)) + sizeof(out_ime_));
}

AKMsgTableState::~AKMsgTableState() {
  // @@protoc_insertion_point(destructor:TeenPatti_AK47.AKMsgTableState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AKMsgTableState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AKMsgTableState::ArenaDtor(void* object) {
  AKMsgTableState* _this = reinterpret_cast< AKMsgTableState* >(object);
  (void)_this;
}
void AKMsgTableState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AKMsgTableState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AKMsgTableState& AKMsgTableState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AKMsgTableState_TeenPatti_5fAK47_2eproto.base);
  return *internal_default_instance();
}


void AKMsgTableState::Clear() {
// @@protoc_insertion_point(message_clear_start:TeenPatti_AK47.AKMsgTableState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_ime_) -
      reinterpret_cast<char*>(&state_)) + sizeof(out_ime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AKMsgTableState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 out_ime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          out_ime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AKMsgTableState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeenPatti_AK47.AKMsgTableState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // int32 out_ime = 2;
  if (this->out_ime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_out_ime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeenPatti_AK47.AKMsgTableState)
  return target;
}

size_t AKMsgTableState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeenPatti_AK47.AKMsgTableState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 out_ime = 2;
  if (this->out_ime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_out_ime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AKMsgTableState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeenPatti_AK47.AKMsgTableState)
  GOOGLE_DCHECK_NE(&from, this);
  const AKMsgTableState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AKMsgTableState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeenPatti_AK47.AKMsgTableState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeenPatti_AK47.AKMsgTableState)
    MergeFrom(*source);
  }
}

void AKMsgTableState::MergeFrom(const AKMsgTableState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeenPatti_AK47.AKMsgTableState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.out_ime() != 0) {
    _internal_set_out_ime(from._internal_out_ime());
  }
}

void AKMsgTableState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeenPatti_AK47.AKMsgTableState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AKMsgTableState::CopyFrom(const AKMsgTableState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeenPatti_AK47.AKMsgTableState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AKMsgTableState::IsInitialized() const {
  return true;
}

void AKMsgTableState::InternalSwap(AKMsgTableState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AKMsgTableState, out_ime_)
      + sizeof(AKMsgTableState::out_ime_)
      - PROTOBUF_FIELD_OFFSET(AKMsgTableState, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AKMsgTableState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AKMsgHandCards::_Internal {
 public:
};

AKMsgHandCards::AKMsgHandCards(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cards_(arena),
  change_cards_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TeenPatti_AK47.AKMsgHandCards)
}
AKMsgHandCards::AKMsgHandCards(const AKMsgHandCards& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cards_(from.cards_),
      change_cards_(from.change_cards_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  card_type_ = from.card_type_;
  // @@protoc_insertion_point(copy_constructor:TeenPatti_AK47.AKMsgHandCards)
}

void AKMsgHandCards::SharedCtor() {
  card_type_ = 0;
}

AKMsgHandCards::~AKMsgHandCards() {
  // @@protoc_insertion_point(destructor:TeenPatti_AK47.AKMsgHandCards)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AKMsgHandCards::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AKMsgHandCards::ArenaDtor(void* object) {
  AKMsgHandCards* _this = reinterpret_cast< AKMsgHandCards* >(object);
  (void)_this;
}
void AKMsgHandCards::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AKMsgHandCards::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AKMsgHandCards& AKMsgHandCards::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AKMsgHandCards_TeenPatti_5fAK47_2eproto.base);
  return *internal_default_instance();
}


void AKMsgHandCards::Clear() {
// @@protoc_insertion_point(message_clear_start:TeenPatti_AK47.AKMsgHandCards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cards_.Clear();
  change_cards_.Clear();
  card_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AKMsgHandCards::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 card_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          card_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 cards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_cards(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_cards(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 change_cards = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_change_cards(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_change_cards(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AKMsgHandCards::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeenPatti_AK47.AKMsgHandCards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 card_type = 1;
  if (this->card_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_card_type(), target);
  }

  // repeated int32 cards = 2;
  {
    int byte_size = _cards_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_cards(), byte_size, target);
    }
  }

  // repeated int32 change_cards = 3;
  {
    int byte_size = _change_cards_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_change_cards(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeenPatti_AK47.AKMsgHandCards)
  return target;
}

size_t AKMsgHandCards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeenPatti_AK47.AKMsgHandCards)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 cards = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->cards_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _cards_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 change_cards = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->change_cards_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _change_cards_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 card_type = 1;
  if (this->card_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_card_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AKMsgHandCards::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeenPatti_AK47.AKMsgHandCards)
  GOOGLE_DCHECK_NE(&from, this);
  const AKMsgHandCards* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AKMsgHandCards>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeenPatti_AK47.AKMsgHandCards)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeenPatti_AK47.AKMsgHandCards)
    MergeFrom(*source);
  }
}

void AKMsgHandCards::MergeFrom(const AKMsgHandCards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeenPatti_AK47.AKMsgHandCards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cards_.MergeFrom(from.cards_);
  change_cards_.MergeFrom(from.change_cards_);
  if (from.card_type() != 0) {
    _internal_set_card_type(from._internal_card_type());
  }
}

void AKMsgHandCards::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeenPatti_AK47.AKMsgHandCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AKMsgHandCards::CopyFrom(const AKMsgHandCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeenPatti_AK47.AKMsgHandCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AKMsgHandCards::IsInitialized() const {
  return true;
}

void AKMsgHandCards::InternalSwap(AKMsgHandCards* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cards_.InternalSwap(&other->cards_);
  change_cards_.InternalSwap(&other->change_cards_);
  swap(card_type_, other->card_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AKMsgHandCards::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AKMsgPlayerInfo::_Internal {
 public:
  static const ::TeenPatti_AK47::AKMsgHandCards& handl_cards(const AKMsgPlayerInfo* msg);
};

const ::TeenPatti_AK47::AKMsgHandCards&
AKMsgPlayerInfo::_Internal::handl_cards(const AKMsgPlayerInfo* msg) {
  return *msg->handl_cards_;
}
AKMsgPlayerInfo::AKMsgPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TeenPatti_AK47.AKMsgPlayerInfo)
}
AKMsgPlayerInfo::AKMsgPlayerInfo(const AKMsgPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_handl_cards()) {
    handl_cards_ = new ::TeenPatti_AK47::AKMsgHandCards(*from.handl_cards_);
  } else {
    handl_cards_ = nullptr;
  }
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&play_status_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(play_status_));
  // @@protoc_insertion_point(copy_constructor:TeenPatti_AK47.AKMsgPlayerInfo)
}

void AKMsgPlayerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AKMsgPlayerInfo_TeenPatti_5fAK47_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&handl_cards_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&play_status_) -
      reinterpret_cast<char*>(&handl_cards_)) + sizeof(play_status_));
}

AKMsgPlayerInfo::~AKMsgPlayerInfo() {
  // @@protoc_insertion_point(destructor:TeenPatti_AK47.AKMsgPlayerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AKMsgPlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete handl_cards_;
}

void AKMsgPlayerInfo::ArenaDtor(void* object) {
  AKMsgPlayerInfo* _this = reinterpret_cast< AKMsgPlayerInfo* >(object);
  (void)_this;
}
void AKMsgPlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AKMsgPlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AKMsgPlayerInfo& AKMsgPlayerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AKMsgPlayerInfo_TeenPatti_5fAK47_2eproto.base);
  return *internal_default_instance();
}


void AKMsgPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TeenPatti_AK47.AKMsgPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && handl_cards_ != nullptr) {
    delete handl_cards_;
  }
  handl_cards_ = nullptr;
  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_status_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(play_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AKMsgPlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ming_zhu = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ming_zhu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 play_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          play_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 player_bet = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          player_bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 last_bet = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          last_bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 gold = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 win_gold = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          win_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TeenPatti_AK47.AKMsgHandCards handl_cards = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_handl_cards(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AKMsgPlayerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeenPatti_AK47.AKMsgPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // bool ming_zhu = 2;
  if (this->ming_zhu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ming_zhu(), target);
  }

  // int32 play_status = 3;
  if (this->play_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_play_status(), target);
  }

  // int64 player_bet = 4;
  if (this->player_bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_player_bet(), target);
  }

  // int64 last_bet = 5;
  if (this->last_bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_last_bet(), target);
  }

  // int64 gold = 6;
  if (this->gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_gold(), target);
  }

  // int64 win_gold = 7;
  if (this->win_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_win_gold(), target);
  }

  // .TeenPatti_AK47.AKMsgHandCards handl_cards = 8;
  if (this->has_handl_cards()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::handl_cards(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeenPatti_AK47.AKMsgPlayerInfo)
  return target;
}

size_t AKMsgPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeenPatti_AK47.AKMsgPlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TeenPatti_AK47.AKMsgHandCards handl_cards = 8;
  if (this->has_handl_cards()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *handl_cards_);
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // bool ming_zhu = 2;
  if (this->ming_zhu() != 0) {
    total_size += 1 + 1;
  }

  // int64 player_bet = 4;
  if (this->player_bet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_player_bet());
  }

  // int64 last_bet = 5;
  if (this->last_bet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_last_bet());
  }

  // int64 gold = 6;
  if (this->gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_gold());
  }

  // int64 win_gold = 7;
  if (this->win_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_win_gold());
  }

  // int32 play_status = 3;
  if (this->play_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_play_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AKMsgPlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeenPatti_AK47.AKMsgPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AKMsgPlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AKMsgPlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeenPatti_AK47.AKMsgPlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeenPatti_AK47.AKMsgPlayerInfo)
    MergeFrom(*source);
  }
}

void AKMsgPlayerInfo::MergeFrom(const AKMsgPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeenPatti_AK47.AKMsgPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_handl_cards()) {
    _internal_mutable_handl_cards()->::TeenPatti_AK47::AKMsgHandCards::MergeFrom(from._internal_handl_cards());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.ming_zhu() != 0) {
    _internal_set_ming_zhu(from._internal_ming_zhu());
  }
  if (from.player_bet() != 0) {
    _internal_set_player_bet(from._internal_player_bet());
  }
  if (from.last_bet() != 0) {
    _internal_set_last_bet(from._internal_last_bet());
  }
  if (from.gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  if (from.win_gold() != 0) {
    _internal_set_win_gold(from._internal_win_gold());
  }
  if (from.play_status() != 0) {
    _internal_set_play_status(from._internal_play_status());
  }
}

void AKMsgPlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeenPatti_AK47.AKMsgPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AKMsgPlayerInfo::CopyFrom(const AKMsgPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeenPatti_AK47.AKMsgPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AKMsgPlayerInfo::IsInitialized() const {
  return true;
}

void AKMsgPlayerInfo::InternalSwap(AKMsgPlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AKMsgPlayerInfo, play_status_)
      + sizeof(AKMsgPlayerInfo::play_status_)
      - PROTOBUF_FIELD_OFFSET(AKMsgPlayerInfo, handl_cards_)>(
          reinterpret_cast<char*>(&handl_cards_),
          reinterpret_cast<char*>(&other->handl_cards_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AKMsgPlayerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AKMsgSceneInfo::_Internal {
 public:
};

AKMsgSceneInfo::AKMsgSceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TeenPatti_AK47.AKMsgSceneInfo)
}
AKMsgSceneInfo::AKMsgSceneInfo(const AKMsgSceneInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      player_infos_(from.player_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_score_, &from.max_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&compare_win_) -
    reinterpret_cast<char*>(&max_score_)) + sizeof(compare_win_));
  // @@protoc_insertion_point(copy_constructor:TeenPatti_AK47.AKMsgSceneInfo)
}

void AKMsgSceneInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AKMsgSceneInfo_TeenPatti_5fAK47_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&max_score_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&compare_win_) -
      reinterpret_cast<char*>(&max_score_)) + sizeof(compare_win_));
}

AKMsgSceneInfo::~AKMsgSceneInfo() {
  // @@protoc_insertion_point(destructor:TeenPatti_AK47.AKMsgSceneInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AKMsgSceneInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AKMsgSceneInfo::ArenaDtor(void* object) {
  AKMsgSceneInfo* _this = reinterpret_cast< AKMsgSceneInfo* >(object);
  (void)_this;
}
void AKMsgSceneInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AKMsgSceneInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AKMsgSceneInfo& AKMsgSceneInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AKMsgSceneInfo_TeenPatti_5fAK47_2eproto.base);
  return *internal_default_instance();
}


void AKMsgSceneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TeenPatti_AK47.AKMsgSceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_infos_.Clear();
  ::memset(&max_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compare_win_) -
      reinterpret_cast<char*>(&max_score_)) + sizeof(compare_win_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AKMsgSceneInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 max_score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 table_max_score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          table_max_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cell_score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cell_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cur_times = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cur_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 table_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          table_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_bet_score = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          total_bet_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tax = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          tax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 banker_chair_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          banker_chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cur_chair_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          cur_chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cur_chair_act = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          cur_chair_act_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 out_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          out_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          total_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 compare_user = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          compare_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 compare_win = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          compare_win_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TeenPatti_AK47.AKMsgPlayerInfo player_infos = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AKMsgSceneInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeenPatti_AK47.AKMsgSceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 max_score = 1;
  if (this->max_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_max_score(), target);
  }

  // int64 table_max_score = 2;
  if (this->table_max_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_table_max_score(), target);
  }

  // int64 cell_score = 3;
  if (this->cell_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_cell_score(), target);
  }

  // int32 cur_times = 4;
  if (this->cur_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_cur_times(), target);
  }

  // int32 table_state = 5;
  if (this->table_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_table_state(), target);
  }

  // int64 total_bet_score = 6;
  if (this->total_bet_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_total_bet_score(), target);
  }

  // int32 tax = 7;
  if (this->tax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_tax(), target);
  }

  // int32 banker_chair_id = 8;
  if (this->banker_chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_banker_chair_id(), target);
  }

  // int32 cur_chair_id = 9;
  if (this->cur_chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_cur_chair_id(), target);
  }

  // int32 cur_chair_act = 10;
  if (this->cur_chair_act() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_cur_chair_act(), target);
  }

  // int32 out_time = 11;
  if (this->out_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_out_time(), target);
  }

  // int32 total_time = 12;
  if (this->total_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_total_time(), target);
  }

  // int32 compare_user = 13;
  if (this->compare_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_compare_user(), target);
  }

  // int32 compare_win = 14;
  if (this->compare_win() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_compare_win(), target);
  }

  // repeated .TeenPatti_AK47.AKMsgPlayerInfo player_infos = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_player_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeenPatti_AK47.AKMsgSceneInfo)
  return target;
}

size_t AKMsgSceneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeenPatti_AK47.AKMsgSceneInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TeenPatti_AK47.AKMsgPlayerInfo player_infos = 15;
  total_size += 1UL * this->_internal_player_infos_size();
  for (const auto& msg : this->player_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 max_score = 1;
  if (this->max_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_score());
  }

  // int64 table_max_score = 2;
  if (this->table_max_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_table_max_score());
  }

  // int64 cell_score = 3;
  if (this->cell_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cell_score());
  }

  // int32 cur_times = 4;
  if (this->cur_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_times());
  }

  // int32 table_state = 5;
  if (this->table_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_table_state());
  }

  // int64 total_bet_score = 6;
  if (this->total_bet_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_bet_score());
  }

  // int32 tax = 7;
  if (this->tax() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tax());
  }

  // int32 banker_chair_id = 8;
  if (this->banker_chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_banker_chair_id());
  }

  // int32 cur_chair_id = 9;
  if (this->cur_chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_chair_id());
  }

  // int32 cur_chair_act = 10;
  if (this->cur_chair_act() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_chair_act());
  }

  // int32 out_time = 11;
  if (this->out_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_out_time());
  }

  // int32 total_time = 12;
  if (this->total_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_time());
  }

  // int32 compare_user = 13;
  if (this->compare_user() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_compare_user());
  }

  // int32 compare_win = 14;
  if (this->compare_win() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_compare_win());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AKMsgSceneInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeenPatti_AK47.AKMsgSceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AKMsgSceneInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AKMsgSceneInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeenPatti_AK47.AKMsgSceneInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeenPatti_AK47.AKMsgSceneInfo)
    MergeFrom(*source);
  }
}

void AKMsgSceneInfo::MergeFrom(const AKMsgSceneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeenPatti_AK47.AKMsgSceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_infos_.MergeFrom(from.player_infos_);
  if (from.max_score() != 0) {
    _internal_set_max_score(from._internal_max_score());
  }
  if (from.table_max_score() != 0) {
    _internal_set_table_max_score(from._internal_table_max_score());
  }
  if (from.cell_score() != 0) {
    _internal_set_cell_score(from._internal_cell_score());
  }
  if (from.cur_times() != 0) {
    _internal_set_cur_times(from._internal_cur_times());
  }
  if (from.table_state() != 0) {
    _internal_set_table_state(from._internal_table_state());
  }
  if (from.total_bet_score() != 0) {
    _internal_set_total_bet_score(from._internal_total_bet_score());
  }
  if (from.tax() != 0) {
    _internal_set_tax(from._internal_tax());
  }
  if (from.banker_chair_id() != 0) {
    _internal_set_banker_chair_id(from._internal_banker_chair_id());
  }
  if (from.cur_chair_id() != 0) {
    _internal_set_cur_chair_id(from._internal_cur_chair_id());
  }
  if (from.cur_chair_act() != 0) {
    _internal_set_cur_chair_act(from._internal_cur_chair_act());
  }
  if (from.out_time() != 0) {
    _internal_set_out_time(from._internal_out_time());
  }
  if (from.total_time() != 0) {
    _internal_set_total_time(from._internal_total_time());
  }
  if (from.compare_user() != 0) {
    _internal_set_compare_user(from._internal_compare_user());
  }
  if (from.compare_win() != 0) {
    _internal_set_compare_win(from._internal_compare_win());
  }
}

void AKMsgSceneInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeenPatti_AK47.AKMsgSceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AKMsgSceneInfo::CopyFrom(const AKMsgSceneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeenPatti_AK47.AKMsgSceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AKMsgSceneInfo::IsInitialized() const {
  return true;
}

void AKMsgSceneInfo::InternalSwap(AKMsgSceneInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  player_infos_.InternalSwap(&other->player_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AKMsgSceneInfo, compare_win_)
      + sizeof(AKMsgSceneInfo::compare_win_)
      - PROTOBUF_FIELD_OFFSET(AKMsgSceneInfo, max_score_)>(
          reinterpret_cast<char*>(&max_score_),
          reinterpret_cast<char*>(&other->max_score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AKMsgSceneInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AKMsgGameStartResp::_Internal {
 public:
};

AKMsgGameStartResp::AKMsgGameStartResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  play_index_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TeenPatti_AK47.AKMsgGameStartResp)
}
AKMsgGameStartResp::AKMsgGameStartResp(const AKMsgGameStartResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      play_index_(from.play_index_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cur_chair_id_, &from.cur_chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&banker_chair_id_) -
    reinterpret_cast<char*>(&cur_chair_id_)) + sizeof(banker_chair_id_));
  // @@protoc_insertion_point(copy_constructor:TeenPatti_AK47.AKMsgGameStartResp)
}

void AKMsgGameStartResp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cur_chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&banker_chair_id_) -
      reinterpret_cast<char*>(&cur_chair_id_)) + sizeof(banker_chair_id_));
}

AKMsgGameStartResp::~AKMsgGameStartResp() {
  // @@protoc_insertion_point(destructor:TeenPatti_AK47.AKMsgGameStartResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AKMsgGameStartResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AKMsgGameStartResp::ArenaDtor(void* object) {
  AKMsgGameStartResp* _this = reinterpret_cast< AKMsgGameStartResp* >(object);
  (void)_this;
}
void AKMsgGameStartResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AKMsgGameStartResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AKMsgGameStartResp& AKMsgGameStartResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AKMsgGameStartResp_TeenPatti_5fAK47_2eproto.base);
  return *internal_default_instance();
}


void AKMsgGameStartResp::Clear() {
// @@protoc_insertion_point(message_clear_start:TeenPatti_AK47.AKMsgGameStartResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  play_index_.Clear();
  ::memset(&cur_chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&banker_chair_id_) -
      reinterpret_cast<char*>(&cur_chair_id_)) + sizeof(banker_chair_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AKMsgGameStartResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cur_chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cur_chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cur_times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cur_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 banker_chair_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          banker_chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 max_score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 max_blind = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          max_blind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cell_score = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          cell_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 table_max_score = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          table_max_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 play_index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_play_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_play_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AKMsgGameStartResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeenPatti_AK47.AKMsgGameStartResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cur_chair_id = 1;
  if (this->cur_chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cur_chair_id(), target);
  }

  // int32 cur_times = 2;
  if (this->cur_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cur_times(), target);
  }

  // int32 banker_chair_id = 3;
  if (this->banker_chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_banker_chair_id(), target);
  }

  // int64 max_score = 4;
  if (this->max_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_max_score(), target);
  }

  // int64 max_blind = 5;
  if (this->max_blind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_max_blind(), target);
  }

  // int64 cell_score = 6;
  if (this->cell_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_cell_score(), target);
  }

  // int64 table_max_score = 7;
  if (this->table_max_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_table_max_score(), target);
  }

  // repeated int32 play_index = 8;
  {
    int byte_size = _play_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_play_index(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeenPatti_AK47.AKMsgGameStartResp)
  return target;
}

size_t AKMsgGameStartResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeenPatti_AK47.AKMsgGameStartResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 play_index = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->play_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _play_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 cur_chair_id = 1;
  if (this->cur_chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_chair_id());
  }

  // int32 cur_times = 2;
  if (this->cur_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_times());
  }

  // int64 max_score = 4;
  if (this->max_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_score());
  }

  // int64 max_blind = 5;
  if (this->max_blind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_blind());
  }

  // int64 cell_score = 6;
  if (this->cell_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cell_score());
  }

  // int64 table_max_score = 7;
  if (this->table_max_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_table_max_score());
  }

  // int32 banker_chair_id = 3;
  if (this->banker_chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_banker_chair_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AKMsgGameStartResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeenPatti_AK47.AKMsgGameStartResp)
  GOOGLE_DCHECK_NE(&from, this);
  const AKMsgGameStartResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AKMsgGameStartResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeenPatti_AK47.AKMsgGameStartResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeenPatti_AK47.AKMsgGameStartResp)
    MergeFrom(*source);
  }
}

void AKMsgGameStartResp::MergeFrom(const AKMsgGameStartResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeenPatti_AK47.AKMsgGameStartResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  play_index_.MergeFrom(from.play_index_);
  if (from.cur_chair_id() != 0) {
    _internal_set_cur_chair_id(from._internal_cur_chair_id());
  }
  if (from.cur_times() != 0) {
    _internal_set_cur_times(from._internal_cur_times());
  }
  if (from.max_score() != 0) {
    _internal_set_max_score(from._internal_max_score());
  }
  if (from.max_blind() != 0) {
    _internal_set_max_blind(from._internal_max_blind());
  }
  if (from.cell_score() != 0) {
    _internal_set_cell_score(from._internal_cell_score());
  }
  if (from.table_max_score() != 0) {
    _internal_set_table_max_score(from._internal_table_max_score());
  }
  if (from.banker_chair_id() != 0) {
    _internal_set_banker_chair_id(from._internal_banker_chair_id());
  }
}

void AKMsgGameStartResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeenPatti_AK47.AKMsgGameStartResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AKMsgGameStartResp::CopyFrom(const AKMsgGameStartResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeenPatti_AK47.AKMsgGameStartResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AKMsgGameStartResp::IsInitialized() const {
  return true;
}

void AKMsgGameStartResp::InternalSwap(AKMsgGameStartResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  play_index_.InternalSwap(&other->play_index_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AKMsgGameStartResp, banker_chair_id_)
      + sizeof(AKMsgGameStartResp::banker_chair_id_)
      - PROTOBUF_FIELD_OFFSET(AKMsgGameStartResp, cur_chair_id_)>(
          reinterpret_cast<char*>(&cur_chair_id_),
          reinterpret_cast<char*>(&other->cur_chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AKMsgGameStartResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AKMsgNotifyActionResp::_Internal {
 public:
};

AKMsgNotifyActionResp::AKMsgNotifyActionResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TeenPatti_AK47.AKMsgNotifyActionResp)
}
AKMsgNotifyActionResp::AKMsgNotifyActionResp(const AKMsgNotifyActionResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cur_chair_id_, &from.cur_chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&oper_time_) -
    reinterpret_cast<char*>(&cur_chair_id_)) + sizeof(oper_time_));
  // @@protoc_insertion_point(copy_constructor:TeenPatti_AK47.AKMsgNotifyActionResp)
}

void AKMsgNotifyActionResp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cur_chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&oper_time_) -
      reinterpret_cast<char*>(&cur_chair_id_)) + sizeof(oper_time_));
}

AKMsgNotifyActionResp::~AKMsgNotifyActionResp() {
  // @@protoc_insertion_point(destructor:TeenPatti_AK47.AKMsgNotifyActionResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AKMsgNotifyActionResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AKMsgNotifyActionResp::ArenaDtor(void* object) {
  AKMsgNotifyActionResp* _this = reinterpret_cast< AKMsgNotifyActionResp* >(object);
  (void)_this;
}
void AKMsgNotifyActionResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AKMsgNotifyActionResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AKMsgNotifyActionResp& AKMsgNotifyActionResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AKMsgNotifyActionResp_TeenPatti_5fAK47_2eproto.base);
  return *internal_default_instance();
}


void AKMsgNotifyActionResp::Clear() {
// @@protoc_insertion_point(message_clear_start:TeenPatti_AK47.AKMsgNotifyActionResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cur_chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oper_time_) -
      reinterpret_cast<char*>(&cur_chair_id_)) + sizeof(oper_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AKMsgNotifyActionResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cur_chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cur_chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cur_times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cur_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 current_act = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          current_act_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 oper_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          oper_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AKMsgNotifyActionResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeenPatti_AK47.AKMsgNotifyActionResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cur_chair_id = 1;
  if (this->cur_chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cur_chair_id(), target);
  }

  // int32 cur_times = 2;
  if (this->cur_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cur_times(), target);
  }

  // int32 current_act = 3;
  if (this->current_act() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_current_act(), target);
  }

  // int32 oper_time = 4;
  if (this->oper_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_oper_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeenPatti_AK47.AKMsgNotifyActionResp)
  return target;
}

size_t AKMsgNotifyActionResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeenPatti_AK47.AKMsgNotifyActionResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cur_chair_id = 1;
  if (this->cur_chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_chair_id());
  }

  // int32 cur_times = 2;
  if (this->cur_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_times());
  }

  // int32 current_act = 3;
  if (this->current_act() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_current_act());
  }

  // int32 oper_time = 4;
  if (this->oper_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_oper_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AKMsgNotifyActionResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeenPatti_AK47.AKMsgNotifyActionResp)
  GOOGLE_DCHECK_NE(&from, this);
  const AKMsgNotifyActionResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AKMsgNotifyActionResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeenPatti_AK47.AKMsgNotifyActionResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeenPatti_AK47.AKMsgNotifyActionResp)
    MergeFrom(*source);
  }
}

void AKMsgNotifyActionResp::MergeFrom(const AKMsgNotifyActionResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeenPatti_AK47.AKMsgNotifyActionResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cur_chair_id() != 0) {
    _internal_set_cur_chair_id(from._internal_cur_chair_id());
  }
  if (from.cur_times() != 0) {
    _internal_set_cur_times(from._internal_cur_times());
  }
  if (from.current_act() != 0) {
    _internal_set_current_act(from._internal_current_act());
  }
  if (from.oper_time() != 0) {
    _internal_set_oper_time(from._internal_oper_time());
  }
}

void AKMsgNotifyActionResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeenPatti_AK47.AKMsgNotifyActionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AKMsgNotifyActionResp::CopyFrom(const AKMsgNotifyActionResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeenPatti_AK47.AKMsgNotifyActionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AKMsgNotifyActionResp::IsInitialized() const {
  return true;
}

void AKMsgNotifyActionResp::InternalSwap(AKMsgNotifyActionResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AKMsgNotifyActionResp, oper_time_)
      + sizeof(AKMsgNotifyActionResp::oper_time_)
      - PROTOBUF_FIELD_OFFSET(AKMsgNotifyActionResp, cur_chair_id_)>(
          reinterpret_cast<char*>(&cur_chair_id_),
          reinterpret_cast<char*>(&other->cur_chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AKMsgNotifyActionResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AKMsgAction::_Internal {
 public:
};

AKMsgAction::AKMsgAction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TeenPatti_AK47.AKMsgAction)
}
AKMsgAction::AKMsgAction(const AKMsgAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bet_score_, &from.bet_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&compare_user_) -
    reinterpret_cast<char*>(&bet_score_)) + sizeof(compare_user_));
  // @@protoc_insertion_point(copy_constructor:TeenPatti_AK47.AKMsgAction)
}

void AKMsgAction::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bet_score_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&compare_user_) -
      reinterpret_cast<char*>(&bet_score_)) + sizeof(compare_user_));
}

AKMsgAction::~AKMsgAction() {
  // @@protoc_insertion_point(destructor:TeenPatti_AK47.AKMsgAction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AKMsgAction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AKMsgAction::ArenaDtor(void* object) {
  AKMsgAction* _this = reinterpret_cast< AKMsgAction* >(object);
  (void)_this;
}
void AKMsgAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AKMsgAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AKMsgAction& AKMsgAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AKMsgAction_TeenPatti_5fAK47_2eproto.base);
  return *internal_default_instance();
}


void AKMsgAction::Clear() {
// @@protoc_insertion_point(message_clear_start:TeenPatti_AK47.AKMsgAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bet_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compare_user_) -
      reinterpret_cast<char*>(&bet_score_)) + sizeof(compare_user_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AKMsgAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 act = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          act_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 bet_score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bet_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 compare_user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          compare_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_ok = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AKMsgAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeenPatti_AK47.AKMsgAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 act = 1;
  if (this->act() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_act(), target);
  }

  // int64 bet_score = 2;
  if (this->bet_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_bet_score(), target);
  }

  // int64 compare_user = 3;
  if (this->compare_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_compare_user(), target);
  }

  // bool is_ok = 4;
  if (this->is_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_ok(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeenPatti_AK47.AKMsgAction)
  return target;
}

size_t AKMsgAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeenPatti_AK47.AKMsgAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 bet_score = 2;
  if (this->bet_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_bet_score());
  }

  // int32 act = 1;
  if (this->act() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_act());
  }

  // bool is_ok = 4;
  if (this->is_ok() != 0) {
    total_size += 1 + 1;
  }

  // int64 compare_user = 3;
  if (this->compare_user() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_compare_user());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AKMsgAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeenPatti_AK47.AKMsgAction)
  GOOGLE_DCHECK_NE(&from, this);
  const AKMsgAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AKMsgAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeenPatti_AK47.AKMsgAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeenPatti_AK47.AKMsgAction)
    MergeFrom(*source);
  }
}

void AKMsgAction::MergeFrom(const AKMsgAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeenPatti_AK47.AKMsgAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bet_score() != 0) {
    _internal_set_bet_score(from._internal_bet_score());
  }
  if (from.act() != 0) {
    _internal_set_act(from._internal_act());
  }
  if (from.is_ok() != 0) {
    _internal_set_is_ok(from._internal_is_ok());
  }
  if (from.compare_user() != 0) {
    _internal_set_compare_user(from._internal_compare_user());
  }
}

void AKMsgAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeenPatti_AK47.AKMsgAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AKMsgAction::CopyFrom(const AKMsgAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeenPatti_AK47.AKMsgAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AKMsgAction::IsInitialized() const {
  return true;
}

void AKMsgAction::InternalSwap(AKMsgAction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AKMsgAction, compare_user_)
      + sizeof(AKMsgAction::compare_user_)
      - PROTOBUF_FIELD_OFFSET(AKMsgAction, bet_score_)>(
          reinterpret_cast<char*>(&bet_score_),
          reinterpret_cast<char*>(&other->bet_score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AKMsgAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AKMsgGiveUpResp::_Internal {
 public:
};

AKMsgGiveUpResp::AKMsgGiveUpResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TeenPatti_AK47.AKMsgGiveUpResp)
}
AKMsgGiveUpResp::AKMsgGiveUpResp(const AKMsgGiveUpResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chair_id_ = from.chair_id_;
  // @@protoc_insertion_point(copy_constructor:TeenPatti_AK47.AKMsgGiveUpResp)
}

void AKMsgGiveUpResp::SharedCtor() {
  chair_id_ = 0;
}

AKMsgGiveUpResp::~AKMsgGiveUpResp() {
  // @@protoc_insertion_point(destructor:TeenPatti_AK47.AKMsgGiveUpResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AKMsgGiveUpResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AKMsgGiveUpResp::ArenaDtor(void* object) {
  AKMsgGiveUpResp* _this = reinterpret_cast< AKMsgGiveUpResp* >(object);
  (void)_this;
}
void AKMsgGiveUpResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AKMsgGiveUpResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AKMsgGiveUpResp& AKMsgGiveUpResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AKMsgGiveUpResp_TeenPatti_5fAK47_2eproto.base);
  return *internal_default_instance();
}


void AKMsgGiveUpResp::Clear() {
// @@protoc_insertion_point(message_clear_start:TeenPatti_AK47.AKMsgGiveUpResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chair_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AKMsgGiveUpResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AKMsgGiveUpResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeenPatti_AK47.AKMsgGiveUpResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeenPatti_AK47.AKMsgGiveUpResp)
  return target;
}

size_t AKMsgGiveUpResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeenPatti_AK47.AKMsgGiveUpResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AKMsgGiveUpResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeenPatti_AK47.AKMsgGiveUpResp)
  GOOGLE_DCHECK_NE(&from, this);
  const AKMsgGiveUpResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AKMsgGiveUpResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeenPatti_AK47.AKMsgGiveUpResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeenPatti_AK47.AKMsgGiveUpResp)
    MergeFrom(*source);
  }
}

void AKMsgGiveUpResp::MergeFrom(const AKMsgGiveUpResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeenPatti_AK47.AKMsgGiveUpResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
}

void AKMsgGiveUpResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeenPatti_AK47.AKMsgGiveUpResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AKMsgGiveUpResp::CopyFrom(const AKMsgGiveUpResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeenPatti_AK47.AKMsgGiveUpResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AKMsgGiveUpResp::IsInitialized() const {
  return true;
}

void AKMsgGiveUpResp::InternalSwap(AKMsgGiveUpResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(chair_id_, other->chair_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AKMsgGiveUpResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AKMsgLookCardResp::_Internal {
 public:
  static const ::TeenPatti_AK47::AKMsgHandCards& handl_cards(const AKMsgLookCardResp* msg);
};

const ::TeenPatti_AK47::AKMsgHandCards&
AKMsgLookCardResp::_Internal::handl_cards(const AKMsgLookCardResp* msg) {
  return *msg->handl_cards_;
}
AKMsgLookCardResp::AKMsgLookCardResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TeenPatti_AK47.AKMsgLookCardResp)
}
AKMsgLookCardResp::AKMsgLookCardResp(const AKMsgLookCardResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_handl_cards()) {
    handl_cards_ = new ::TeenPatti_AK47::AKMsgHandCards(*from.handl_cards_);
  } else {
    handl_cards_ = nullptr;
  }
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_act_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(new_act_));
  // @@protoc_insertion_point(copy_constructor:TeenPatti_AK47.AKMsgLookCardResp)
}

void AKMsgLookCardResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AKMsgLookCardResp_TeenPatti_5fAK47_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&handl_cards_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&new_act_) -
      reinterpret_cast<char*>(&handl_cards_)) + sizeof(new_act_));
}

AKMsgLookCardResp::~AKMsgLookCardResp() {
  // @@protoc_insertion_point(destructor:TeenPatti_AK47.AKMsgLookCardResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AKMsgLookCardResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete handl_cards_;
}

void AKMsgLookCardResp::ArenaDtor(void* object) {
  AKMsgLookCardResp* _this = reinterpret_cast< AKMsgLookCardResp* >(object);
  (void)_this;
}
void AKMsgLookCardResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AKMsgLookCardResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AKMsgLookCardResp& AKMsgLookCardResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AKMsgLookCardResp_TeenPatti_5fAK47_2eproto.base);
  return *internal_default_instance();
}


void AKMsgLookCardResp::Clear() {
// @@protoc_insertion_point(message_clear_start:TeenPatti_AK47.AKMsgLookCardResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && handl_cards_ != nullptr) {
    delete handl_cards_;
  }
  handl_cards_ = nullptr;
  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_act_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(new_act_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AKMsgLookCardResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cur_chair_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cur_chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 new_act = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          new_act_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TeenPatti_AK47.AKMsgHandCards handl_cards = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_handl_cards(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AKMsgLookCardResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeenPatti_AK47.AKMsgLookCardResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 cur_chair_id = 2;
  if (this->cur_chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cur_chair_id(), target);
  }

  // int32 new_act = 3;
  if (this->new_act() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_new_act(), target);
  }

  // .TeenPatti_AK47.AKMsgHandCards handl_cards = 4;
  if (this->has_handl_cards()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::handl_cards(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeenPatti_AK47.AKMsgLookCardResp)
  return target;
}

size_t AKMsgLookCardResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeenPatti_AK47.AKMsgLookCardResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TeenPatti_AK47.AKMsgHandCards handl_cards = 4;
  if (this->has_handl_cards()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *handl_cards_);
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 cur_chair_id = 2;
  if (this->cur_chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_chair_id());
  }

  // int32 new_act = 3;
  if (this->new_act() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_new_act());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AKMsgLookCardResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeenPatti_AK47.AKMsgLookCardResp)
  GOOGLE_DCHECK_NE(&from, this);
  const AKMsgLookCardResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AKMsgLookCardResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeenPatti_AK47.AKMsgLookCardResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeenPatti_AK47.AKMsgLookCardResp)
    MergeFrom(*source);
  }
}

void AKMsgLookCardResp::MergeFrom(const AKMsgLookCardResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeenPatti_AK47.AKMsgLookCardResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_handl_cards()) {
    _internal_mutable_handl_cards()->::TeenPatti_AK47::AKMsgHandCards::MergeFrom(from._internal_handl_cards());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.cur_chair_id() != 0) {
    _internal_set_cur_chair_id(from._internal_cur_chair_id());
  }
  if (from.new_act() != 0) {
    _internal_set_new_act(from._internal_new_act());
  }
}

void AKMsgLookCardResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeenPatti_AK47.AKMsgLookCardResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AKMsgLookCardResp::CopyFrom(const AKMsgLookCardResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeenPatti_AK47.AKMsgLookCardResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AKMsgLookCardResp::IsInitialized() const {
  return true;
}

void AKMsgLookCardResp::InternalSwap(AKMsgLookCardResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AKMsgLookCardResp, new_act_)
      + sizeof(AKMsgLookCardResp::new_act_)
      - PROTOBUF_FIELD_OFFSET(AKMsgLookCardResp, handl_cards_)>(
          reinterpret_cast<char*>(&handl_cards_),
          reinterpret_cast<char*>(&other->handl_cards_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AKMsgLookCardResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AKMsgAddBetResp::_Internal {
 public:
};

AKMsgAddBetResp::AKMsgAddBetResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TeenPatti_AK47.AKMsgAddBetResp)
}
AKMsgAddBetResp::AKMsgAddBetResp(const AKMsgAddBetResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&add_score_, &from.add_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&add_chair_id_) -
    reinterpret_cast<char*>(&add_score_)) + sizeof(add_chair_id_));
  // @@protoc_insertion_point(copy_constructor:TeenPatti_AK47.AKMsgAddBetResp)
}

void AKMsgAddBetResp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&add_score_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&add_chair_id_) -
      reinterpret_cast<char*>(&add_score_)) + sizeof(add_chair_id_));
}

AKMsgAddBetResp::~AKMsgAddBetResp() {
  // @@protoc_insertion_point(destructor:TeenPatti_AK47.AKMsgAddBetResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AKMsgAddBetResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AKMsgAddBetResp::ArenaDtor(void* object) {
  AKMsgAddBetResp* _this = reinterpret_cast< AKMsgAddBetResp* >(object);
  (void)_this;
}
void AKMsgAddBetResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AKMsgAddBetResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AKMsgAddBetResp& AKMsgAddBetResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AKMsgAddBetResp_TeenPatti_5fAK47_2eproto.base);
  return *internal_default_instance();
}


void AKMsgAddBetResp::Clear() {
// @@protoc_insertion_point(message_clear_start:TeenPatti_AK47.AKMsgAddBetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&add_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&add_chair_id_) -
      reinterpret_cast<char*>(&add_score_)) + sizeof(add_chair_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AKMsgAddBetResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 add_chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          add_chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 add_score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          add_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 bet_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bet_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AKMsgAddBetResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeenPatti_AK47.AKMsgAddBetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 add_chair_id = 1;
  if (this->add_chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_add_chair_id(), target);
  }

  // int64 add_score = 2;
  if (this->add_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_add_score(), target);
  }

  // int64 bet_type = 3;
  if (this->bet_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_bet_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeenPatti_AK47.AKMsgAddBetResp)
  return target;
}

size_t AKMsgAddBetResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeenPatti_AK47.AKMsgAddBetResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 add_score = 2;
  if (this->add_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_add_score());
  }

  // int64 bet_type = 3;
  if (this->bet_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_bet_type());
  }

  // int32 add_chair_id = 1;
  if (this->add_chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_add_chair_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AKMsgAddBetResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeenPatti_AK47.AKMsgAddBetResp)
  GOOGLE_DCHECK_NE(&from, this);
  const AKMsgAddBetResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AKMsgAddBetResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeenPatti_AK47.AKMsgAddBetResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeenPatti_AK47.AKMsgAddBetResp)
    MergeFrom(*source);
  }
}

void AKMsgAddBetResp::MergeFrom(const AKMsgAddBetResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeenPatti_AK47.AKMsgAddBetResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.add_score() != 0) {
    _internal_set_add_score(from._internal_add_score());
  }
  if (from.bet_type() != 0) {
    _internal_set_bet_type(from._internal_bet_type());
  }
  if (from.add_chair_id() != 0) {
    _internal_set_add_chair_id(from._internal_add_chair_id());
  }
}

void AKMsgAddBetResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeenPatti_AK47.AKMsgAddBetResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AKMsgAddBetResp::CopyFrom(const AKMsgAddBetResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeenPatti_AK47.AKMsgAddBetResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AKMsgAddBetResp::IsInitialized() const {
  return true;
}

void AKMsgAddBetResp::InternalSwap(AKMsgAddBetResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AKMsgAddBetResp, add_chair_id_)
      + sizeof(AKMsgAddBetResp::add_chair_id_)
      - PROTOBUF_FIELD_OFFSET(AKMsgAddBetResp, add_score_)>(
          reinterpret_cast<char*>(&add_score_),
          reinterpret_cast<char*>(&other->add_score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AKMsgAddBetResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AKMsgCompareCardResp::_Internal {
 public:
};

AKMsgCompareCardResp::AKMsgCompareCardResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TeenPatti_AK47.AKMsgCompareCardResp)
}
AKMsgCompareCardResp::AKMsgCompareCardResp(const AKMsgCompareCardResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&compare_id_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(compare_id_));
  // @@protoc_insertion_point(copy_constructor:TeenPatti_AK47.AKMsgCompareCardResp)
}

void AKMsgCompareCardResp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&compare_id_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(compare_id_));
}

AKMsgCompareCardResp::~AKMsgCompareCardResp() {
  // @@protoc_insertion_point(destructor:TeenPatti_AK47.AKMsgCompareCardResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AKMsgCompareCardResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AKMsgCompareCardResp::ArenaDtor(void* object) {
  AKMsgCompareCardResp* _this = reinterpret_cast< AKMsgCompareCardResp* >(object);
  (void)_this;
}
void AKMsgCompareCardResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AKMsgCompareCardResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AKMsgCompareCardResp& AKMsgCompareCardResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AKMsgCompareCardResp_TeenPatti_5fAK47_2eproto.base);
  return *internal_default_instance();
}


void AKMsgCompareCardResp::Clear() {
// @@protoc_insertion_point(message_clear_start:TeenPatti_AK47.AKMsgCompareCardResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compare_id_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(compare_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AKMsgCompareCardResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 compare_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          compare_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AKMsgCompareCardResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeenPatti_AK47.AKMsgCompareCardResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 compare_id = 2;
  if (this->compare_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_compare_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeenPatti_AK47.AKMsgCompareCardResp)
  return target;
}

size_t AKMsgCompareCardResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeenPatti_AK47.AKMsgCompareCardResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 compare_id = 2;
  if (this->compare_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_compare_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AKMsgCompareCardResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeenPatti_AK47.AKMsgCompareCardResp)
  GOOGLE_DCHECK_NE(&from, this);
  const AKMsgCompareCardResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AKMsgCompareCardResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeenPatti_AK47.AKMsgCompareCardResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeenPatti_AK47.AKMsgCompareCardResp)
    MergeFrom(*source);
  }
}

void AKMsgCompareCardResp::MergeFrom(const AKMsgCompareCardResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeenPatti_AK47.AKMsgCompareCardResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.compare_id() != 0) {
    _internal_set_compare_id(from._internal_compare_id());
  }
}

void AKMsgCompareCardResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeenPatti_AK47.AKMsgCompareCardResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AKMsgCompareCardResp::CopyFrom(const AKMsgCompareCardResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeenPatti_AK47.AKMsgCompareCardResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AKMsgCompareCardResp::IsInitialized() const {
  return true;
}

void AKMsgCompareCardResp::InternalSwap(AKMsgCompareCardResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AKMsgCompareCardResp, compare_id_)
      + sizeof(AKMsgCompareCardResp::compare_id_)
      - PROTOBUF_FIELD_OFFSET(AKMsgCompareCardResp, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AKMsgCompareCardResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AKMsgCompareCardRetResp::_Internal {
 public:
  static const ::TeenPatti_AK47::AKMsgHandCards& compare_cards(const AKMsgCompareCardRetResp* msg);
  static const ::TeenPatti_AK47::AKMsgHandCards& passive_cards(const AKMsgCompareCardRetResp* msg);
};

const ::TeenPatti_AK47::AKMsgHandCards&
AKMsgCompareCardRetResp::_Internal::compare_cards(const AKMsgCompareCardRetResp* msg) {
  return *msg->compare_cards_;
}
const ::TeenPatti_AK47::AKMsgHandCards&
AKMsgCompareCardRetResp::_Internal::passive_cards(const AKMsgCompareCardRetResp* msg) {
  return *msg->passive_cards_;
}
AKMsgCompareCardRetResp::AKMsgCompareCardRetResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TeenPatti_AK47.AKMsgCompareCardRetResp)
}
AKMsgCompareCardRetResp::AKMsgCompareCardRetResp(const AKMsgCompareCardRetResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_compare_cards()) {
    compare_cards_ = new ::TeenPatti_AK47::AKMsgHandCards(*from.compare_cards_);
  } else {
    compare_cards_ = nullptr;
  }
  if (from._internal_has_passive_cards()) {
    passive_cards_ = new ::TeenPatti_AK47::AKMsgHandCards(*from.passive_cards_);
  } else {
    passive_cards_ = nullptr;
  }
  ::memcpy(&current_chair_id_, &from.current_chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_agree_) -
    reinterpret_cast<char*>(&current_chair_id_)) + sizeof(is_agree_));
  // @@protoc_insertion_point(copy_constructor:TeenPatti_AK47.AKMsgCompareCardRetResp)
}

void AKMsgCompareCardRetResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AKMsgCompareCardRetResp_TeenPatti_5fAK47_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&compare_cards_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_agree_) -
      reinterpret_cast<char*>(&compare_cards_)) + sizeof(is_agree_));
}

AKMsgCompareCardRetResp::~AKMsgCompareCardRetResp() {
  // @@protoc_insertion_point(destructor:TeenPatti_AK47.AKMsgCompareCardRetResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AKMsgCompareCardRetResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete compare_cards_;
  if (this != internal_default_instance()) delete passive_cards_;
}

void AKMsgCompareCardRetResp::ArenaDtor(void* object) {
  AKMsgCompareCardRetResp* _this = reinterpret_cast< AKMsgCompareCardRetResp* >(object);
  (void)_this;
}
void AKMsgCompareCardRetResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AKMsgCompareCardRetResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AKMsgCompareCardRetResp& AKMsgCompareCardRetResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AKMsgCompareCardRetResp_TeenPatti_5fAK47_2eproto.base);
  return *internal_default_instance();
}


void AKMsgCompareCardRetResp::Clear() {
// @@protoc_insertion_point(message_clear_start:TeenPatti_AK47.AKMsgCompareCardRetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && compare_cards_ != nullptr) {
    delete compare_cards_;
  }
  compare_cards_ = nullptr;
  if (GetArena() == nullptr && passive_cards_ != nullptr) {
    delete passive_cards_;
  }
  passive_cards_ = nullptr;
  ::memset(&current_chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_agree_) -
      reinterpret_cast<char*>(&current_chair_id_)) + sizeof(is_agree_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AKMsgCompareCardRetResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 current_chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          current_chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 current_act = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          current_act_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lost_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lost_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 compare_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          compare_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 passive_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          passive_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TeenPatti_AK47.AKMsgHandCards compare_cards = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_compare_cards(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TeenPatti_AK47.AKMsgHandCards passive_cards = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_passive_cards(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_agree = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          is_agree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AKMsgCompareCardRetResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeenPatti_AK47.AKMsgCompareCardRetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 current_chair_id = 1;
  if (this->current_chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_current_chair_id(), target);
  }

  // int32 current_act = 2;
  if (this->current_act() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_current_act(), target);
  }

  // int32 lost_id = 3;
  if (this->lost_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_lost_id(), target);
  }

  // int32 compare_id = 4;
  if (this->compare_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_compare_id(), target);
  }

  // int32 passive_id = 5;
  if (this->passive_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_passive_id(), target);
  }

  // .TeenPatti_AK47.AKMsgHandCards compare_cards = 6;
  if (this->has_compare_cards()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::compare_cards(this), target, stream);
  }

  // .TeenPatti_AK47.AKMsgHandCards passive_cards = 7;
  if (this->has_passive_cards()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::passive_cards(this), target, stream);
  }

  // bool is_agree = 8;
  if (this->is_agree() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_agree(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeenPatti_AK47.AKMsgCompareCardRetResp)
  return target;
}

size_t AKMsgCompareCardRetResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeenPatti_AK47.AKMsgCompareCardRetResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TeenPatti_AK47.AKMsgHandCards compare_cards = 6;
  if (this->has_compare_cards()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *compare_cards_);
  }

  // .TeenPatti_AK47.AKMsgHandCards passive_cards = 7;
  if (this->has_passive_cards()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *passive_cards_);
  }

  // int32 current_chair_id = 1;
  if (this->current_chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_current_chair_id());
  }

  // int32 current_act = 2;
  if (this->current_act() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_current_act());
  }

  // int32 lost_id = 3;
  if (this->lost_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lost_id());
  }

  // int32 compare_id = 4;
  if (this->compare_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_compare_id());
  }

  // int32 passive_id = 5;
  if (this->passive_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_passive_id());
  }

  // bool is_agree = 8;
  if (this->is_agree() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AKMsgCompareCardRetResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeenPatti_AK47.AKMsgCompareCardRetResp)
  GOOGLE_DCHECK_NE(&from, this);
  const AKMsgCompareCardRetResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AKMsgCompareCardRetResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeenPatti_AK47.AKMsgCompareCardRetResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeenPatti_AK47.AKMsgCompareCardRetResp)
    MergeFrom(*source);
  }
}

void AKMsgCompareCardRetResp::MergeFrom(const AKMsgCompareCardRetResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeenPatti_AK47.AKMsgCompareCardRetResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_compare_cards()) {
    _internal_mutable_compare_cards()->::TeenPatti_AK47::AKMsgHandCards::MergeFrom(from._internal_compare_cards());
  }
  if (from.has_passive_cards()) {
    _internal_mutable_passive_cards()->::TeenPatti_AK47::AKMsgHandCards::MergeFrom(from._internal_passive_cards());
  }
  if (from.current_chair_id() != 0) {
    _internal_set_current_chair_id(from._internal_current_chair_id());
  }
  if (from.current_act() != 0) {
    _internal_set_current_act(from._internal_current_act());
  }
  if (from.lost_id() != 0) {
    _internal_set_lost_id(from._internal_lost_id());
  }
  if (from.compare_id() != 0) {
    _internal_set_compare_id(from._internal_compare_id());
  }
  if (from.passive_id() != 0) {
    _internal_set_passive_id(from._internal_passive_id());
  }
  if (from.is_agree() != 0) {
    _internal_set_is_agree(from._internal_is_agree());
  }
}

void AKMsgCompareCardRetResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeenPatti_AK47.AKMsgCompareCardRetResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AKMsgCompareCardRetResp::CopyFrom(const AKMsgCompareCardRetResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeenPatti_AK47.AKMsgCompareCardRetResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AKMsgCompareCardRetResp::IsInitialized() const {
  return true;
}

void AKMsgCompareCardRetResp::InternalSwap(AKMsgCompareCardRetResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AKMsgCompareCardRetResp, is_agree_)
      + sizeof(AKMsgCompareCardRetResp::is_agree_)
      - PROTOBUF_FIELD_OFFSET(AKMsgCompareCardRetResp, compare_cards_)>(
          reinterpret_cast<char*>(&compare_cards_),
          reinterpret_cast<char*>(&other->compare_cards_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AKMsgCompareCardRetResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AKMsgGameResult::_Internal {
 public:
};

AKMsgGameResult::AKMsgGameResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  game_score_(arena),
  player_hands_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TeenPatti_AK47.AKMsgGameResult)
}
AKMsgGameResult::AKMsgGameResult(const AKMsgGameResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      game_score_(from.game_score_),
      player_hands_(from.player_hands_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_tax_, &from.game_tax_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_state_) -
    reinterpret_cast<char*>(&game_tax_)) + sizeof(end_state_));
  // @@protoc_insertion_point(copy_constructor:TeenPatti_AK47.AKMsgGameResult)
}

void AKMsgGameResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AKMsgGameResult_TeenPatti_5fAK47_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&game_tax_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&end_state_) -
      reinterpret_cast<char*>(&game_tax_)) + sizeof(end_state_));
}

AKMsgGameResult::~AKMsgGameResult() {
  // @@protoc_insertion_point(destructor:TeenPatti_AK47.AKMsgGameResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AKMsgGameResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AKMsgGameResult::ArenaDtor(void* object) {
  AKMsgGameResult* _this = reinterpret_cast< AKMsgGameResult* >(object);
  (void)_this;
}
void AKMsgGameResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AKMsgGameResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AKMsgGameResult& AKMsgGameResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AKMsgGameResult_TeenPatti_5fAK47_2eproto.base);
  return *internal_default_instance();
}


void AKMsgGameResult::Clear() {
// @@protoc_insertion_point(message_clear_start:TeenPatti_AK47.AKMsgGameResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_score_.Clear();
  player_hands_.Clear();
  ::memset(&game_tax_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_state_) -
      reinterpret_cast<char*>(&game_tax_)) + sizeof(end_state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AKMsgGameResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 game_tax = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_tax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 game_score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_game_score(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_game_score(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TeenPatti_AK47.AKMsgHandCards player_hands = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_hands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 end_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          end_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AKMsgGameResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeenPatti_AK47.AKMsgGameResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_tax = 1;
  if (this->game_tax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_tax(), target);
  }

  // repeated int64 game_score = 2;
  {
    int byte_size = _game_score_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_game_score(), byte_size, target);
    }
  }

  // repeated .TeenPatti_AK47.AKMsgHandCards player_hands = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_hands_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_player_hands(i), target, stream);
  }

  // int32 end_state = 4;
  if (this->end_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_end_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeenPatti_AK47.AKMsgGameResult)
  return target;
}

size_t AKMsgGameResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeenPatti_AK47.AKMsgGameResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 game_score = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->game_score_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _game_score_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .TeenPatti_AK47.AKMsgHandCards player_hands = 3;
  total_size += 1UL * this->_internal_player_hands_size();
  for (const auto& msg : this->player_hands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 game_tax = 1;
  if (this->game_tax() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_tax());
  }

  // int32 end_state = 4;
  if (this->end_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_end_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AKMsgGameResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeenPatti_AK47.AKMsgGameResult)
  GOOGLE_DCHECK_NE(&from, this);
  const AKMsgGameResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AKMsgGameResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeenPatti_AK47.AKMsgGameResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeenPatti_AK47.AKMsgGameResult)
    MergeFrom(*source);
  }
}

void AKMsgGameResult::MergeFrom(const AKMsgGameResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeenPatti_AK47.AKMsgGameResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_score_.MergeFrom(from.game_score_);
  player_hands_.MergeFrom(from.player_hands_);
  if (from.game_tax() != 0) {
    _internal_set_game_tax(from._internal_game_tax());
  }
  if (from.end_state() != 0) {
    _internal_set_end_state(from._internal_end_state());
  }
}

void AKMsgGameResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeenPatti_AK47.AKMsgGameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AKMsgGameResult::CopyFrom(const AKMsgGameResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeenPatti_AK47.AKMsgGameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AKMsgGameResult::IsInitialized() const {
  return true;
}

void AKMsgGameResult::InternalSwap(AKMsgGameResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  game_score_.InternalSwap(&other->game_score_);
  player_hands_.InternalSwap(&other->player_hands_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AKMsgGameResult, end_state_)
      + sizeof(AKMsgGameResult::end_state_)
      - PROTOBUF_FIELD_OFFSET(AKMsgGameResult, game_tax_)>(
          reinterpret_cast<char*>(&game_tax_),
          reinterpret_cast<char*>(&other->game_tax_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AKMsgGameResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AKMsgNotifyPlayerAct::_Internal {
 public:
};

AKMsgNotifyPlayerAct::AKMsgNotifyPlayerAct(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TeenPatti_AK47.AKMsgNotifyPlayerAct)
}
AKMsgNotifyPlayerAct::AKMsgNotifyPlayerAct(const AKMsgNotifyPlayerAct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&act_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(act_));
  // @@protoc_insertion_point(copy_constructor:TeenPatti_AK47.AKMsgNotifyPlayerAct)
}

void AKMsgNotifyPlayerAct::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&act_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(act_));
}

AKMsgNotifyPlayerAct::~AKMsgNotifyPlayerAct() {
  // @@protoc_insertion_point(destructor:TeenPatti_AK47.AKMsgNotifyPlayerAct)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AKMsgNotifyPlayerAct::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AKMsgNotifyPlayerAct::ArenaDtor(void* object) {
  AKMsgNotifyPlayerAct* _this = reinterpret_cast< AKMsgNotifyPlayerAct* >(object);
  (void)_this;
}
void AKMsgNotifyPlayerAct::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AKMsgNotifyPlayerAct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AKMsgNotifyPlayerAct& AKMsgNotifyPlayerAct::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AKMsgNotifyPlayerAct_TeenPatti_5fAK47_2eproto.base);
  return *internal_default_instance();
}


void AKMsgNotifyPlayerAct::Clear() {
// @@protoc_insertion_point(message_clear_start:TeenPatti_AK47.AKMsgNotifyPlayerAct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&act_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(act_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AKMsgNotifyPlayerAct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 act = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          act_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AKMsgNotifyPlayerAct::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeenPatti_AK47.AKMsgNotifyPlayerAct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 act = 2;
  if (this->act() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_act(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeenPatti_AK47.AKMsgNotifyPlayerAct)
  return target;
}

size_t AKMsgNotifyPlayerAct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeenPatti_AK47.AKMsgNotifyPlayerAct)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 act = 2;
  if (this->act() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_act());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AKMsgNotifyPlayerAct::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeenPatti_AK47.AKMsgNotifyPlayerAct)
  GOOGLE_DCHECK_NE(&from, this);
  const AKMsgNotifyPlayerAct* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AKMsgNotifyPlayerAct>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeenPatti_AK47.AKMsgNotifyPlayerAct)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeenPatti_AK47.AKMsgNotifyPlayerAct)
    MergeFrom(*source);
  }
}

void AKMsgNotifyPlayerAct::MergeFrom(const AKMsgNotifyPlayerAct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeenPatti_AK47.AKMsgNotifyPlayerAct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.act() != 0) {
    _internal_set_act(from._internal_act());
  }
}

void AKMsgNotifyPlayerAct::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeenPatti_AK47.AKMsgNotifyPlayerAct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AKMsgNotifyPlayerAct::CopyFrom(const AKMsgNotifyPlayerAct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeenPatti_AK47.AKMsgNotifyPlayerAct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AKMsgNotifyPlayerAct::IsInitialized() const {
  return true;
}

void AKMsgNotifyPlayerAct::InternalSwap(AKMsgNotifyPlayerAct* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AKMsgNotifyPlayerAct, act_)
      + sizeof(AKMsgNotifyPlayerAct::act_)
      - PROTOBUF_FIELD_OFFSET(AKMsgNotifyPlayerAct, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AKMsgNotifyPlayerAct::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace TeenPatti_AK47
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TeenPatti_AK47::AKMsgTableState* Arena::CreateMaybeMessage< ::TeenPatti_AK47::AKMsgTableState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TeenPatti_AK47::AKMsgTableState >(arena);
}
template<> PROTOBUF_NOINLINE ::TeenPatti_AK47::AKMsgHandCards* Arena::CreateMaybeMessage< ::TeenPatti_AK47::AKMsgHandCards >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TeenPatti_AK47::AKMsgHandCards >(arena);
}
template<> PROTOBUF_NOINLINE ::TeenPatti_AK47::AKMsgPlayerInfo* Arena::CreateMaybeMessage< ::TeenPatti_AK47::AKMsgPlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TeenPatti_AK47::AKMsgPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TeenPatti_AK47::AKMsgSceneInfo* Arena::CreateMaybeMessage< ::TeenPatti_AK47::AKMsgSceneInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TeenPatti_AK47::AKMsgSceneInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TeenPatti_AK47::AKMsgGameStartResp* Arena::CreateMaybeMessage< ::TeenPatti_AK47::AKMsgGameStartResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TeenPatti_AK47::AKMsgGameStartResp >(arena);
}
template<> PROTOBUF_NOINLINE ::TeenPatti_AK47::AKMsgNotifyActionResp* Arena::CreateMaybeMessage< ::TeenPatti_AK47::AKMsgNotifyActionResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TeenPatti_AK47::AKMsgNotifyActionResp >(arena);
}
template<> PROTOBUF_NOINLINE ::TeenPatti_AK47::AKMsgAction* Arena::CreateMaybeMessage< ::TeenPatti_AK47::AKMsgAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TeenPatti_AK47::AKMsgAction >(arena);
}
template<> PROTOBUF_NOINLINE ::TeenPatti_AK47::AKMsgGiveUpResp* Arena::CreateMaybeMessage< ::TeenPatti_AK47::AKMsgGiveUpResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TeenPatti_AK47::AKMsgGiveUpResp >(arena);
}
template<> PROTOBUF_NOINLINE ::TeenPatti_AK47::AKMsgLookCardResp* Arena::CreateMaybeMessage< ::TeenPatti_AK47::AKMsgLookCardResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TeenPatti_AK47::AKMsgLookCardResp >(arena);
}
template<> PROTOBUF_NOINLINE ::TeenPatti_AK47::AKMsgAddBetResp* Arena::CreateMaybeMessage< ::TeenPatti_AK47::AKMsgAddBetResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TeenPatti_AK47::AKMsgAddBetResp >(arena);
}
template<> PROTOBUF_NOINLINE ::TeenPatti_AK47::AKMsgCompareCardResp* Arena::CreateMaybeMessage< ::TeenPatti_AK47::AKMsgCompareCardResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TeenPatti_AK47::AKMsgCompareCardResp >(arena);
}
template<> PROTOBUF_NOINLINE ::TeenPatti_AK47::AKMsgCompareCardRetResp* Arena::CreateMaybeMessage< ::TeenPatti_AK47::AKMsgCompareCardRetResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TeenPatti_AK47::AKMsgCompareCardRetResp >(arena);
}
template<> PROTOBUF_NOINLINE ::TeenPatti_AK47::AKMsgGameResult* Arena::CreateMaybeMessage< ::TeenPatti_AK47::AKMsgGameResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TeenPatti_AK47::AKMsgGameResult >(arena);
}
template<> PROTOBUF_NOINLINE ::TeenPatti_AK47::AKMsgNotifyPlayerAct* Arena::CreateMaybeMessage< ::TeenPatti_AK47::AKMsgNotifyPlayerAct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TeenPatti_AK47::AKMsgNotifyPlayerAct >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
