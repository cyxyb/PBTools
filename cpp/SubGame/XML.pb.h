// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: XML.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_XML_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_XML_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_XML_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_XML_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_XML_2eproto;
namespace XML {
class CS_Start;
class CS_StartDefaultTypeInternal;
extern CS_StartDefaultTypeInternal _CS_Start_default_instance_;
class SC_CheckOut;
class SC_CheckOutDefaultTypeInternal;
extern SC_CheckOutDefaultTypeInternal _SC_CheckOut_default_instance_;
class SC_SceneInfo;
class SC_SceneInfoDefaultTypeInternal;
extern SC_SceneInfoDefaultTypeInternal _SC_SceneInfo_default_instance_;
class SC_SyncGold;
class SC_SyncGoldDefaultTypeInternal;
extern SC_SyncGoldDefaultTypeInternal _SC_SyncGold_default_instance_;
class SC_stSmallGameInfo;
class SC_stSmallGameInfoDefaultTypeInternal;
extern SC_stSmallGameInfoDefaultTypeInternal _SC_stSmallGameInfo_default_instance_;
}  // namespace XML
PROTOBUF_NAMESPACE_OPEN
template<> ::XML::CS_Start* Arena::CreateMaybeMessage<::XML::CS_Start>(Arena*);
template<> ::XML::SC_CheckOut* Arena::CreateMaybeMessage<::XML::SC_CheckOut>(Arena*);
template<> ::XML::SC_SceneInfo* Arena::CreateMaybeMessage<::XML::SC_SceneInfo>(Arena*);
template<> ::XML::SC_SyncGold* Arena::CreateMaybeMessage<::XML::SC_SyncGold>(Arena*);
template<> ::XML::SC_stSmallGameInfo* Arena::CreateMaybeMessage<::XML::SC_stSmallGameInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace XML {

enum EMsgIDXML : int {
  LABA_MSG_CS_START = 0,
  LABA_MSG_CS_SMALL_GAME = 1,
  LABA_MSG_SC_START = 2,
  LABA_MSG_SC_CHECKOUT = 3,
  LABA_MSG_SC_SYNC_GOLD = 4,
  LABA_MSG_SC_SMALL_GAME = 5,
  LABA_MSG_SC_UPDATE_PRIZE_POOL = 6,
  EMsgIDXML_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EMsgIDXML_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EMsgIDXML_IsValid(int value);
constexpr EMsgIDXML EMsgIDXML_MIN = LABA_MSG_CS_START;
constexpr EMsgIDXML EMsgIDXML_MAX = LABA_MSG_SC_UPDATE_PRIZE_POOL;
constexpr int EMsgIDXML_ARRAYSIZE = EMsgIDXML_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDXML_descriptor();
template<typename T>
inline const std::string& EMsgIDXML_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMsgIDXML>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMsgIDXML_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMsgIDXML_descriptor(), enum_t_value);
}
inline bool EMsgIDXML_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMsgIDXML* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMsgIDXML>(
    EMsgIDXML_descriptor(), name, value);
}
// ===================================================================

class SC_CheckOut PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XML.SC_CheckOut) */ {
 public:
  inline SC_CheckOut() : SC_CheckOut(nullptr) {}
  virtual ~SC_CheckOut();

  SC_CheckOut(const SC_CheckOut& from);
  SC_CheckOut(SC_CheckOut&& from) noexcept
    : SC_CheckOut() {
    *this = ::std::move(from);
  }

  inline SC_CheckOut& operator=(const SC_CheckOut& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_CheckOut& operator=(SC_CheckOut&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_CheckOut& default_instance();

  static inline const SC_CheckOut* internal_default_instance() {
    return reinterpret_cast<const SC_CheckOut*>(
               &_SC_CheckOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SC_CheckOut& a, SC_CheckOut& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_CheckOut* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_CheckOut* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_CheckOut* New() const final {
    return CreateMaybeMessage<SC_CheckOut>(nullptr);
  }

  SC_CheckOut* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_CheckOut>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_CheckOut& from);
  void MergeFrom(const SC_CheckOut& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_CheckOut* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XML.SC_CheckOut";
  }
  protected:
  explicit SC_CheckOut(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_XML_2eproto);
    return ::descriptor_table_XML_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kRewardLineFruitCountFieldNumber = 2,
    kCurGoldFieldNumber = 4,
    kWinPeiLvFieldNumber = 3,
    kWinGoldFieldNumber = 5,
    kTotalWinGoldFieldNumber = 6,
    kFreeTimesFieldNumber = 7,
    kMultipleFieldNumber = 8,
    kJackpotValueFieldNumber = 9,
    kSmallGameTimesFieldNumber = 10,
  };
  // repeated int32 result = 1;
  int result_size() const;
  private:
  int _internal_result_size() const;
  public:
  void clear_result();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_result() const;
  void _internal_add_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_result();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 result(int index) const;
  void set_result(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      result() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_result();

  // repeated int32 reward_line_fruit_count = 2;
  int reward_line_fruit_count_size() const;
  private:
  int _internal_reward_line_fruit_count_size() const;
  public:
  void clear_reward_line_fruit_count();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reward_line_fruit_count(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_reward_line_fruit_count() const;
  void _internal_add_reward_line_fruit_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_reward_line_fruit_count();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 reward_line_fruit_count(int index) const;
  void set_reward_line_fruit_count(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_reward_line_fruit_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      reward_line_fruit_count() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_reward_line_fruit_count();

  // int64 cur_gold = 4;
  void clear_cur_gold();
  ::PROTOBUF_NAMESPACE_ID::int64 cur_gold() const;
  void set_cur_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cur_gold() const;
  void _internal_set_cur_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 win_pei_lv = 3;
  void clear_win_pei_lv();
  ::PROTOBUF_NAMESPACE_ID::int32 win_pei_lv() const;
  void set_win_pei_lv(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_win_pei_lv() const;
  void _internal_set_win_pei_lv(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 win_gold = 5;
  void clear_win_gold();
  ::PROTOBUF_NAMESPACE_ID::int32 win_gold() const;
  void set_win_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_win_gold() const;
  void _internal_set_win_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_win_gold = 6;
  void clear_total_win_gold();
  ::PROTOBUF_NAMESPACE_ID::int32 total_win_gold() const;
  void set_total_win_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_win_gold() const;
  void _internal_set_total_win_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 free_times = 7;
  void clear_free_times();
  ::PROTOBUF_NAMESPACE_ID::int32 free_times() const;
  void set_free_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_free_times() const;
  void _internal_set_free_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 multiple = 8;
  void clear_multiple();
  ::PROTOBUF_NAMESPACE_ID::int32 multiple() const;
  void set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_multiple() const;
  void _internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 jackpot_value = 9;
  void clear_jackpot_value();
  ::PROTOBUF_NAMESPACE_ID::int32 jackpot_value() const;
  void set_jackpot_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_jackpot_value() const;
  void _internal_set_jackpot_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 small_game_times = 10;
  void clear_small_game_times();
  ::PROTOBUF_NAMESPACE_ID::int32 small_game_times() const;
  void set_small_game_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_small_game_times() const;
  void _internal_set_small_game_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:XML.SC_CheckOut)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > result_;
  mutable std::atomic<int> _result_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > reward_line_fruit_count_;
  mutable std::atomic<int> _reward_line_fruit_count_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 cur_gold_;
  ::PROTOBUF_NAMESPACE_ID::int32 win_pei_lv_;
  ::PROTOBUF_NAMESPACE_ID::int32 win_gold_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_win_gold_;
  ::PROTOBUF_NAMESPACE_ID::int32 free_times_;
  ::PROTOBUF_NAMESPACE_ID::int32 multiple_;
  ::PROTOBUF_NAMESPACE_ID::int32 jackpot_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 small_game_times_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_XML_2eproto;
};
// -------------------------------------------------------------------

class CS_Start PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XML.CS_Start) */ {
 public:
  inline CS_Start() : CS_Start(nullptr) {}
  virtual ~CS_Start();

  CS_Start(const CS_Start& from);
  CS_Start(CS_Start&& from) noexcept
    : CS_Start() {
    *this = ::std::move(from);
  }

  inline CS_Start& operator=(const CS_Start& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_Start& operator=(CS_Start&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_Start& default_instance();

  static inline const CS_Start* internal_default_instance() {
    return reinterpret_cast<const CS_Start*>(
               &_CS_Start_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CS_Start& a, CS_Start& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_Start* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_Start* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_Start* New() const final {
    return CreateMaybeMessage<CS_Start>(nullptr);
  }

  CS_Start* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_Start>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_Start& from);
  void MergeFrom(const CS_Start& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_Start* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XML.CS_Start";
  }
  protected:
  explicit CS_Start(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_XML_2eproto);
    return ::descriptor_table_XML_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLineNumFieldNumber = 1,
    kLineGoldFieldNumber = 2,
  };
  // int32 line_num = 1;
  void clear_line_num();
  ::PROTOBUF_NAMESPACE_ID::int32 line_num() const;
  void set_line_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_line_num() const;
  void _internal_set_line_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 line_gold = 2;
  void clear_line_gold();
  ::PROTOBUF_NAMESPACE_ID::int32 line_gold() const;
  void set_line_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_line_gold() const;
  void _internal_set_line_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:XML.CS_Start)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 line_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 line_gold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_XML_2eproto;
};
// -------------------------------------------------------------------

class SC_SyncGold PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XML.SC_SyncGold) */ {
 public:
  inline SC_SyncGold() : SC_SyncGold(nullptr) {}
  virtual ~SC_SyncGold();

  SC_SyncGold(const SC_SyncGold& from);
  SC_SyncGold(SC_SyncGold&& from) noexcept
    : SC_SyncGold() {
    *this = ::std::move(from);
  }

  inline SC_SyncGold& operator=(const SC_SyncGold& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_SyncGold& operator=(SC_SyncGold&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_SyncGold& default_instance();

  static inline const SC_SyncGold* internal_default_instance() {
    return reinterpret_cast<const SC_SyncGold*>(
               &_SC_SyncGold_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SC_SyncGold& a, SC_SyncGold& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_SyncGold* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_SyncGold* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_SyncGold* New() const final {
    return CreateMaybeMessage<SC_SyncGold>(nullptr);
  }

  SC_SyncGold* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_SyncGold>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_SyncGold& from);
  void MergeFrom(const SC_SyncGold& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_SyncGold* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XML.SC_SyncGold";
  }
  protected:
  explicit SC_SyncGold(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_XML_2eproto);
    return ::descriptor_table_XML_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoldFieldNumber = 1,
    kLastWinGoldFieldNumber = 2,
    kTotalWinGoldFieldNumber = 3,
  };
  // int64 gold = 1;
  void clear_gold();
  ::PROTOBUF_NAMESPACE_ID::int64 gold() const;
  void set_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gold() const;
  void _internal_set_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 last_win_gold = 2;
  void clear_last_win_gold();
  ::PROTOBUF_NAMESPACE_ID::int32 last_win_gold() const;
  void set_last_win_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_last_win_gold() const;
  void _internal_set_last_win_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_win_gold = 3;
  void clear_total_win_gold();
  ::PROTOBUF_NAMESPACE_ID::int32 total_win_gold() const;
  void set_total_win_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_win_gold() const;
  void _internal_set_total_win_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:XML.SC_SyncGold)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 gold_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_win_gold_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_win_gold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_XML_2eproto;
};
// -------------------------------------------------------------------

class SC_SceneInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XML.SC_SceneInfo) */ {
 public:
  inline SC_SceneInfo() : SC_SceneInfo(nullptr) {}
  virtual ~SC_SceneInfo();

  SC_SceneInfo(const SC_SceneInfo& from);
  SC_SceneInfo(SC_SceneInfo&& from) noexcept
    : SC_SceneInfo() {
    *this = ::std::move(from);
  }

  inline SC_SceneInfo& operator=(const SC_SceneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_SceneInfo& operator=(SC_SceneInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_SceneInfo& default_instance();

  static inline const SC_SceneInfo* internal_default_instance() {
    return reinterpret_cast<const SC_SceneInfo*>(
               &_SC_SceneInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SC_SceneInfo& a, SC_SceneInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_SceneInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_SceneInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_SceneInfo* New() const final {
    return CreateMaybeMessage<SC_SceneInfo>(nullptr);
  }

  SC_SceneInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_SceneInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_SceneInfo& from);
  void MergeFrom(const SC_SceneInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_SceneInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XML.SC_SceneInfo";
  }
  protected:
  explicit SC_SceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_XML_2eproto);
    return ::descriptor_table_XML_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBetonGoldFieldNumber = 4,
    kLeftFreeGameCntFieldNumber = 1,
    kMultipleFieldNumber = 2,
    kFreeGameCotTotalFieldNumber = 5,
    kFreeGameGoldFieldNumber = 6,
    kSmallCountFieldNumber = 7,
  };
  // repeated int32 beton_gold = 4;
  int beton_gold_size() const;
  private:
  int _internal_beton_gold_size() const;
  public:
  void clear_beton_gold();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_beton_gold(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_beton_gold() const;
  void _internal_add_beton_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_beton_gold();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 beton_gold(int index) const;
  void set_beton_gold(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_beton_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      beton_gold() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_beton_gold();

  // int32 left_free_game_cnt = 1;
  void clear_left_free_game_cnt();
  ::PROTOBUF_NAMESPACE_ID::int32 left_free_game_cnt() const;
  void set_left_free_game_cnt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_left_free_game_cnt() const;
  void _internal_set_left_free_game_cnt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 multiple = 2;
  void clear_multiple();
  ::PROTOBUF_NAMESPACE_ID::int32 multiple() const;
  void set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_multiple() const;
  void _internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 free_game_cot_total = 5;
  void clear_free_game_cot_total();
  ::PROTOBUF_NAMESPACE_ID::int32 free_game_cot_total() const;
  void set_free_game_cot_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_free_game_cot_total() const;
  void _internal_set_free_game_cot_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 free_game_gold = 6;
  void clear_free_game_gold();
  ::PROTOBUF_NAMESPACE_ID::int32 free_game_gold() const;
  void set_free_game_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_free_game_gold() const;
  void _internal_set_free_game_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 small_count = 7;
  void clear_small_count();
  ::PROTOBUF_NAMESPACE_ID::int32 small_count() const;
  void set_small_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_small_count() const;
  void _internal_set_small_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:XML.SC_SceneInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > beton_gold_;
  mutable std::atomic<int> _beton_gold_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 left_free_game_cnt_;
  ::PROTOBUF_NAMESPACE_ID::int32 multiple_;
  ::PROTOBUF_NAMESPACE_ID::int32 free_game_cot_total_;
  ::PROTOBUF_NAMESPACE_ID::int32 free_game_gold_;
  ::PROTOBUF_NAMESPACE_ID::int32 small_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_XML_2eproto;
};
// -------------------------------------------------------------------

class SC_stSmallGameInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XML.SC_stSmallGameInfo) */ {
 public:
  inline SC_stSmallGameInfo() : SC_stSmallGameInfo(nullptr) {}
  virtual ~SC_stSmallGameInfo();

  SC_stSmallGameInfo(const SC_stSmallGameInfo& from);
  SC_stSmallGameInfo(SC_stSmallGameInfo&& from) noexcept
    : SC_stSmallGameInfo() {
    *this = ::std::move(from);
  }

  inline SC_stSmallGameInfo& operator=(const SC_stSmallGameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_stSmallGameInfo& operator=(SC_stSmallGameInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_stSmallGameInfo& default_instance();

  static inline const SC_stSmallGameInfo* internal_default_instance() {
    return reinterpret_cast<const SC_stSmallGameInfo*>(
               &_SC_stSmallGameInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SC_stSmallGameInfo& a, SC_stSmallGameInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_stSmallGameInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_stSmallGameInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_stSmallGameInfo* New() const final {
    return CreateMaybeMessage<SC_stSmallGameInfo>(nullptr);
  }

  SC_stSmallGameInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_stSmallGameInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_stSmallGameInfo& from);
  void MergeFrom(const SC_stSmallGameInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_stSmallGameInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XML.SC_stSmallGameInfo";
  }
  protected:
  explicit SC_stSmallGameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_XML_2eproto);
    return ::descriptor_table_XML_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIconType4FieldNumber = 6,
    kSmallGameTatolConutFieldNumber = 1,
    kSmallGameConutFieldNumber = 2,
    kGameTatolGoldFieldNumber = 3,
    kIconTypeFieldNumber = 4,
    kIconTypeConutFieldNumber = 5,
    kGameGoldFieldNumber = 7,
    kGameEndFieldNumber = 8,
    kLineGoldFieldNumber = 9,
  };
  // repeated int32 icon_type4 = 6;
  int icon_type4_size() const;
  private:
  int _internal_icon_type4_size() const;
  public:
  void clear_icon_type4();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_icon_type4(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_icon_type4() const;
  void _internal_add_icon_type4(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_icon_type4();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 icon_type4(int index) const;
  void set_icon_type4(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_icon_type4(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      icon_type4() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_icon_type4();

  // int32 small_game_tatol_conut = 1;
  void clear_small_game_tatol_conut();
  ::PROTOBUF_NAMESPACE_ID::int32 small_game_tatol_conut() const;
  void set_small_game_tatol_conut(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_small_game_tatol_conut() const;
  void _internal_set_small_game_tatol_conut(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 small_game_conut = 2;
  void clear_small_game_conut();
  ::PROTOBUF_NAMESPACE_ID::int32 small_game_conut() const;
  void set_small_game_conut(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_small_game_conut() const;
  void _internal_set_small_game_conut(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 game_tatol_gold = 3;
  void clear_game_tatol_gold();
  ::PROTOBUF_NAMESPACE_ID::int32 game_tatol_gold() const;
  void set_game_tatol_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_tatol_gold() const;
  void _internal_set_game_tatol_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 icon_type = 4;
  void clear_icon_type();
  ::PROTOBUF_NAMESPACE_ID::int32 icon_type() const;
  void set_icon_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_icon_type() const;
  void _internal_set_icon_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 icon_type_conut = 5;
  void clear_icon_type_conut();
  ::PROTOBUF_NAMESPACE_ID::int32 icon_type_conut() const;
  void set_icon_type_conut(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_icon_type_conut() const;
  void _internal_set_icon_type_conut(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 game_gold = 7;
  void clear_game_gold();
  ::PROTOBUF_NAMESPACE_ID::int32 game_gold() const;
  void set_game_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_gold() const;
  void _internal_set_game_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool game_end = 8;
  void clear_game_end();
  bool game_end() const;
  void set_game_end(bool value);
  private:
  bool _internal_game_end() const;
  void _internal_set_game_end(bool value);
  public:

  // int32 line_gold = 9;
  void clear_line_gold();
  ::PROTOBUF_NAMESPACE_ID::int32 line_gold() const;
  void set_line_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_line_gold() const;
  void _internal_set_line_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:XML.SC_stSmallGameInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > icon_type4_;
  mutable std::atomic<int> _icon_type4_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 small_game_tatol_conut_;
  ::PROTOBUF_NAMESPACE_ID::int32 small_game_conut_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_tatol_gold_;
  ::PROTOBUF_NAMESPACE_ID::int32 icon_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 icon_type_conut_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_gold_;
  bool game_end_;
  ::PROTOBUF_NAMESPACE_ID::int32 line_gold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_XML_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SC_CheckOut

// repeated int32 result = 1;
inline int SC_CheckOut::_internal_result_size() const {
  return result_.size();
}
inline int SC_CheckOut::result_size() const {
  return _internal_result_size();
}
inline void SC_CheckOut::clear_result() {
  result_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_CheckOut::_internal_result(int index) const {
  return result_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_CheckOut::result(int index) const {
  // @@protoc_insertion_point(field_get:XML.SC_CheckOut.result)
  return _internal_result(index);
}
inline void SC_CheckOut::set_result(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  result_.Set(index, value);
  // @@protoc_insertion_point(field_set:XML.SC_CheckOut.result)
}
inline void SC_CheckOut::_internal_add_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  result_.Add(value);
}
inline void SC_CheckOut::add_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_result(value);
  // @@protoc_insertion_point(field_add:XML.SC_CheckOut.result)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_CheckOut::_internal_result() const {
  return result_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_CheckOut::result() const {
  // @@protoc_insertion_point(field_list:XML.SC_CheckOut.result)
  return _internal_result();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_CheckOut::_internal_mutable_result() {
  return &result_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_CheckOut::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:XML.SC_CheckOut.result)
  return _internal_mutable_result();
}

// repeated int32 reward_line_fruit_count = 2;
inline int SC_CheckOut::_internal_reward_line_fruit_count_size() const {
  return reward_line_fruit_count_.size();
}
inline int SC_CheckOut::reward_line_fruit_count_size() const {
  return _internal_reward_line_fruit_count_size();
}
inline void SC_CheckOut::clear_reward_line_fruit_count() {
  reward_line_fruit_count_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_CheckOut::_internal_reward_line_fruit_count(int index) const {
  return reward_line_fruit_count_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_CheckOut::reward_line_fruit_count(int index) const {
  // @@protoc_insertion_point(field_get:XML.SC_CheckOut.reward_line_fruit_count)
  return _internal_reward_line_fruit_count(index);
}
inline void SC_CheckOut::set_reward_line_fruit_count(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  reward_line_fruit_count_.Set(index, value);
  // @@protoc_insertion_point(field_set:XML.SC_CheckOut.reward_line_fruit_count)
}
inline void SC_CheckOut::_internal_add_reward_line_fruit_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  reward_line_fruit_count_.Add(value);
}
inline void SC_CheckOut::add_reward_line_fruit_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_reward_line_fruit_count(value);
  // @@protoc_insertion_point(field_add:XML.SC_CheckOut.reward_line_fruit_count)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_CheckOut::_internal_reward_line_fruit_count() const {
  return reward_line_fruit_count_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_CheckOut::reward_line_fruit_count() const {
  // @@protoc_insertion_point(field_list:XML.SC_CheckOut.reward_line_fruit_count)
  return _internal_reward_line_fruit_count();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_CheckOut::_internal_mutable_reward_line_fruit_count() {
  return &reward_line_fruit_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_CheckOut::mutable_reward_line_fruit_count() {
  // @@protoc_insertion_point(field_mutable_list:XML.SC_CheckOut.reward_line_fruit_count)
  return _internal_mutable_reward_line_fruit_count();
}

// int32 win_pei_lv = 3;
inline void SC_CheckOut::clear_win_pei_lv() {
  win_pei_lv_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_CheckOut::_internal_win_pei_lv() const {
  return win_pei_lv_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_CheckOut::win_pei_lv() const {
  // @@protoc_insertion_point(field_get:XML.SC_CheckOut.win_pei_lv)
  return _internal_win_pei_lv();
}
inline void SC_CheckOut::_internal_set_win_pei_lv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  win_pei_lv_ = value;
}
inline void SC_CheckOut::set_win_pei_lv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_win_pei_lv(value);
  // @@protoc_insertion_point(field_set:XML.SC_CheckOut.win_pei_lv)
}

// int64 cur_gold = 4;
inline void SC_CheckOut::clear_cur_gold() {
  cur_gold_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SC_CheckOut::_internal_cur_gold() const {
  return cur_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SC_CheckOut::cur_gold() const {
  // @@protoc_insertion_point(field_get:XML.SC_CheckOut.cur_gold)
  return _internal_cur_gold();
}
inline void SC_CheckOut::_internal_set_cur_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  cur_gold_ = value;
}
inline void SC_CheckOut::set_cur_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cur_gold(value);
  // @@protoc_insertion_point(field_set:XML.SC_CheckOut.cur_gold)
}

// int32 win_gold = 5;
inline void SC_CheckOut::clear_win_gold() {
  win_gold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_CheckOut::_internal_win_gold() const {
  return win_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_CheckOut::win_gold() const {
  // @@protoc_insertion_point(field_get:XML.SC_CheckOut.win_gold)
  return _internal_win_gold();
}
inline void SC_CheckOut::_internal_set_win_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  win_gold_ = value;
}
inline void SC_CheckOut::set_win_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_win_gold(value);
  // @@protoc_insertion_point(field_set:XML.SC_CheckOut.win_gold)
}

// int32 total_win_gold = 6;
inline void SC_CheckOut::clear_total_win_gold() {
  total_win_gold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_CheckOut::_internal_total_win_gold() const {
  return total_win_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_CheckOut::total_win_gold() const {
  // @@protoc_insertion_point(field_get:XML.SC_CheckOut.total_win_gold)
  return _internal_total_win_gold();
}
inline void SC_CheckOut::_internal_set_total_win_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_win_gold_ = value;
}
inline void SC_CheckOut::set_total_win_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_win_gold(value);
  // @@protoc_insertion_point(field_set:XML.SC_CheckOut.total_win_gold)
}

// int32 free_times = 7;
inline void SC_CheckOut::clear_free_times() {
  free_times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_CheckOut::_internal_free_times() const {
  return free_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_CheckOut::free_times() const {
  // @@protoc_insertion_point(field_get:XML.SC_CheckOut.free_times)
  return _internal_free_times();
}
inline void SC_CheckOut::_internal_set_free_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  free_times_ = value;
}
inline void SC_CheckOut::set_free_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_free_times(value);
  // @@protoc_insertion_point(field_set:XML.SC_CheckOut.free_times)
}

// int32 multiple = 8;
inline void SC_CheckOut::clear_multiple() {
  multiple_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_CheckOut::_internal_multiple() const {
  return multiple_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_CheckOut::multiple() const {
  // @@protoc_insertion_point(field_get:XML.SC_CheckOut.multiple)
  return _internal_multiple();
}
inline void SC_CheckOut::_internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  multiple_ = value;
}
inline void SC_CheckOut::set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_multiple(value);
  // @@protoc_insertion_point(field_set:XML.SC_CheckOut.multiple)
}

// int32 jackpot_value = 9;
inline void SC_CheckOut::clear_jackpot_value() {
  jackpot_value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_CheckOut::_internal_jackpot_value() const {
  return jackpot_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_CheckOut::jackpot_value() const {
  // @@protoc_insertion_point(field_get:XML.SC_CheckOut.jackpot_value)
  return _internal_jackpot_value();
}
inline void SC_CheckOut::_internal_set_jackpot_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  jackpot_value_ = value;
}
inline void SC_CheckOut::set_jackpot_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_jackpot_value(value);
  // @@protoc_insertion_point(field_set:XML.SC_CheckOut.jackpot_value)
}

// int32 small_game_times = 10;
inline void SC_CheckOut::clear_small_game_times() {
  small_game_times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_CheckOut::_internal_small_game_times() const {
  return small_game_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_CheckOut::small_game_times() const {
  // @@protoc_insertion_point(field_get:XML.SC_CheckOut.small_game_times)
  return _internal_small_game_times();
}
inline void SC_CheckOut::_internal_set_small_game_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  small_game_times_ = value;
}
inline void SC_CheckOut::set_small_game_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_small_game_times(value);
  // @@protoc_insertion_point(field_set:XML.SC_CheckOut.small_game_times)
}

// -------------------------------------------------------------------

// CS_Start

// int32 line_num = 1;
inline void CS_Start::clear_line_num() {
  line_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CS_Start::_internal_line_num() const {
  return line_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CS_Start::line_num() const {
  // @@protoc_insertion_point(field_get:XML.CS_Start.line_num)
  return _internal_line_num();
}
inline void CS_Start::_internal_set_line_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  line_num_ = value;
}
inline void CS_Start::set_line_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_line_num(value);
  // @@protoc_insertion_point(field_set:XML.CS_Start.line_num)
}

// int32 line_gold = 2;
inline void CS_Start::clear_line_gold() {
  line_gold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CS_Start::_internal_line_gold() const {
  return line_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CS_Start::line_gold() const {
  // @@protoc_insertion_point(field_get:XML.CS_Start.line_gold)
  return _internal_line_gold();
}
inline void CS_Start::_internal_set_line_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  line_gold_ = value;
}
inline void CS_Start::set_line_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_line_gold(value);
  // @@protoc_insertion_point(field_set:XML.CS_Start.line_gold)
}

// -------------------------------------------------------------------

// SC_SyncGold

// int64 gold = 1;
inline void SC_SyncGold::clear_gold() {
  gold_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SC_SyncGold::_internal_gold() const {
  return gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SC_SyncGold::gold() const {
  // @@protoc_insertion_point(field_get:XML.SC_SyncGold.gold)
  return _internal_gold();
}
inline void SC_SyncGold::_internal_set_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gold_ = value;
}
inline void SC_SyncGold::set_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:XML.SC_SyncGold.gold)
}

// int32 last_win_gold = 2;
inline void SC_SyncGold::clear_last_win_gold() {
  last_win_gold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SyncGold::_internal_last_win_gold() const {
  return last_win_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SyncGold::last_win_gold() const {
  // @@protoc_insertion_point(field_get:XML.SC_SyncGold.last_win_gold)
  return _internal_last_win_gold();
}
inline void SC_SyncGold::_internal_set_last_win_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  last_win_gold_ = value;
}
inline void SC_SyncGold::set_last_win_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_last_win_gold(value);
  // @@protoc_insertion_point(field_set:XML.SC_SyncGold.last_win_gold)
}

// int32 total_win_gold = 3;
inline void SC_SyncGold::clear_total_win_gold() {
  total_win_gold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SyncGold::_internal_total_win_gold() const {
  return total_win_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SyncGold::total_win_gold() const {
  // @@protoc_insertion_point(field_get:XML.SC_SyncGold.total_win_gold)
  return _internal_total_win_gold();
}
inline void SC_SyncGold::_internal_set_total_win_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_win_gold_ = value;
}
inline void SC_SyncGold::set_total_win_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_win_gold(value);
  // @@protoc_insertion_point(field_set:XML.SC_SyncGold.total_win_gold)
}

// -------------------------------------------------------------------

// SC_SceneInfo

// int32 left_free_game_cnt = 1;
inline void SC_SceneInfo::clear_left_free_game_cnt() {
  left_free_game_cnt_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_left_free_game_cnt() const {
  return left_free_game_cnt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::left_free_game_cnt() const {
  // @@protoc_insertion_point(field_get:XML.SC_SceneInfo.left_free_game_cnt)
  return _internal_left_free_game_cnt();
}
inline void SC_SceneInfo::_internal_set_left_free_game_cnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  left_free_game_cnt_ = value;
}
inline void SC_SceneInfo::set_left_free_game_cnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_left_free_game_cnt(value);
  // @@protoc_insertion_point(field_set:XML.SC_SceneInfo.left_free_game_cnt)
}

// int32 multiple = 2;
inline void SC_SceneInfo::clear_multiple() {
  multiple_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_multiple() const {
  return multiple_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::multiple() const {
  // @@protoc_insertion_point(field_get:XML.SC_SceneInfo.multiple)
  return _internal_multiple();
}
inline void SC_SceneInfo::_internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  multiple_ = value;
}
inline void SC_SceneInfo::set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_multiple(value);
  // @@protoc_insertion_point(field_set:XML.SC_SceneInfo.multiple)
}

// repeated int32 beton_gold = 4;
inline int SC_SceneInfo::_internal_beton_gold_size() const {
  return beton_gold_.size();
}
inline int SC_SceneInfo::beton_gold_size() const {
  return _internal_beton_gold_size();
}
inline void SC_SceneInfo::clear_beton_gold() {
  beton_gold_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_beton_gold(int index) const {
  return beton_gold_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::beton_gold(int index) const {
  // @@protoc_insertion_point(field_get:XML.SC_SceneInfo.beton_gold)
  return _internal_beton_gold(index);
}
inline void SC_SceneInfo::set_beton_gold(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  beton_gold_.Set(index, value);
  // @@protoc_insertion_point(field_set:XML.SC_SceneInfo.beton_gold)
}
inline void SC_SceneInfo::_internal_add_beton_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  beton_gold_.Add(value);
}
inline void SC_SceneInfo::add_beton_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_beton_gold(value);
  // @@protoc_insertion_point(field_add:XML.SC_SceneInfo.beton_gold)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_SceneInfo::_internal_beton_gold() const {
  return beton_gold_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_SceneInfo::beton_gold() const {
  // @@protoc_insertion_point(field_list:XML.SC_SceneInfo.beton_gold)
  return _internal_beton_gold();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_SceneInfo::_internal_mutable_beton_gold() {
  return &beton_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_SceneInfo::mutable_beton_gold() {
  // @@protoc_insertion_point(field_mutable_list:XML.SC_SceneInfo.beton_gold)
  return _internal_mutable_beton_gold();
}

// int32 free_game_cot_total = 5;
inline void SC_SceneInfo::clear_free_game_cot_total() {
  free_game_cot_total_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_free_game_cot_total() const {
  return free_game_cot_total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::free_game_cot_total() const {
  // @@protoc_insertion_point(field_get:XML.SC_SceneInfo.free_game_cot_total)
  return _internal_free_game_cot_total();
}
inline void SC_SceneInfo::_internal_set_free_game_cot_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  free_game_cot_total_ = value;
}
inline void SC_SceneInfo::set_free_game_cot_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_free_game_cot_total(value);
  // @@protoc_insertion_point(field_set:XML.SC_SceneInfo.free_game_cot_total)
}

// int32 free_game_gold = 6;
inline void SC_SceneInfo::clear_free_game_gold() {
  free_game_gold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_free_game_gold() const {
  return free_game_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::free_game_gold() const {
  // @@protoc_insertion_point(field_get:XML.SC_SceneInfo.free_game_gold)
  return _internal_free_game_gold();
}
inline void SC_SceneInfo::_internal_set_free_game_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  free_game_gold_ = value;
}
inline void SC_SceneInfo::set_free_game_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_free_game_gold(value);
  // @@protoc_insertion_point(field_set:XML.SC_SceneInfo.free_game_gold)
}

// int32 small_count = 7;
inline void SC_SceneInfo::clear_small_count() {
  small_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_small_count() const {
  return small_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::small_count() const {
  // @@protoc_insertion_point(field_get:XML.SC_SceneInfo.small_count)
  return _internal_small_count();
}
inline void SC_SceneInfo::_internal_set_small_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  small_count_ = value;
}
inline void SC_SceneInfo::set_small_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_small_count(value);
  // @@protoc_insertion_point(field_set:XML.SC_SceneInfo.small_count)
}

// -------------------------------------------------------------------

// SC_stSmallGameInfo

// int32 small_game_tatol_conut = 1;
inline void SC_stSmallGameInfo::clear_small_game_tatol_conut() {
  small_game_tatol_conut_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_stSmallGameInfo::_internal_small_game_tatol_conut() const {
  return small_game_tatol_conut_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_stSmallGameInfo::small_game_tatol_conut() const {
  // @@protoc_insertion_point(field_get:XML.SC_stSmallGameInfo.small_game_tatol_conut)
  return _internal_small_game_tatol_conut();
}
inline void SC_stSmallGameInfo::_internal_set_small_game_tatol_conut(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  small_game_tatol_conut_ = value;
}
inline void SC_stSmallGameInfo::set_small_game_tatol_conut(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_small_game_tatol_conut(value);
  // @@protoc_insertion_point(field_set:XML.SC_stSmallGameInfo.small_game_tatol_conut)
}

// int32 small_game_conut = 2;
inline void SC_stSmallGameInfo::clear_small_game_conut() {
  small_game_conut_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_stSmallGameInfo::_internal_small_game_conut() const {
  return small_game_conut_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_stSmallGameInfo::small_game_conut() const {
  // @@protoc_insertion_point(field_get:XML.SC_stSmallGameInfo.small_game_conut)
  return _internal_small_game_conut();
}
inline void SC_stSmallGameInfo::_internal_set_small_game_conut(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  small_game_conut_ = value;
}
inline void SC_stSmallGameInfo::set_small_game_conut(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_small_game_conut(value);
  // @@protoc_insertion_point(field_set:XML.SC_stSmallGameInfo.small_game_conut)
}

// int32 game_tatol_gold = 3;
inline void SC_stSmallGameInfo::clear_game_tatol_gold() {
  game_tatol_gold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_stSmallGameInfo::_internal_game_tatol_gold() const {
  return game_tatol_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_stSmallGameInfo::game_tatol_gold() const {
  // @@protoc_insertion_point(field_get:XML.SC_stSmallGameInfo.game_tatol_gold)
  return _internal_game_tatol_gold();
}
inline void SC_stSmallGameInfo::_internal_set_game_tatol_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_tatol_gold_ = value;
}
inline void SC_stSmallGameInfo::set_game_tatol_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_tatol_gold(value);
  // @@protoc_insertion_point(field_set:XML.SC_stSmallGameInfo.game_tatol_gold)
}

// int32 icon_type = 4;
inline void SC_stSmallGameInfo::clear_icon_type() {
  icon_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_stSmallGameInfo::_internal_icon_type() const {
  return icon_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_stSmallGameInfo::icon_type() const {
  // @@protoc_insertion_point(field_get:XML.SC_stSmallGameInfo.icon_type)
  return _internal_icon_type();
}
inline void SC_stSmallGameInfo::_internal_set_icon_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  icon_type_ = value;
}
inline void SC_stSmallGameInfo::set_icon_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_icon_type(value);
  // @@protoc_insertion_point(field_set:XML.SC_stSmallGameInfo.icon_type)
}

// int32 icon_type_conut = 5;
inline void SC_stSmallGameInfo::clear_icon_type_conut() {
  icon_type_conut_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_stSmallGameInfo::_internal_icon_type_conut() const {
  return icon_type_conut_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_stSmallGameInfo::icon_type_conut() const {
  // @@protoc_insertion_point(field_get:XML.SC_stSmallGameInfo.icon_type_conut)
  return _internal_icon_type_conut();
}
inline void SC_stSmallGameInfo::_internal_set_icon_type_conut(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  icon_type_conut_ = value;
}
inline void SC_stSmallGameInfo::set_icon_type_conut(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_icon_type_conut(value);
  // @@protoc_insertion_point(field_set:XML.SC_stSmallGameInfo.icon_type_conut)
}

// repeated int32 icon_type4 = 6;
inline int SC_stSmallGameInfo::_internal_icon_type4_size() const {
  return icon_type4_.size();
}
inline int SC_stSmallGameInfo::icon_type4_size() const {
  return _internal_icon_type4_size();
}
inline void SC_stSmallGameInfo::clear_icon_type4() {
  icon_type4_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_stSmallGameInfo::_internal_icon_type4(int index) const {
  return icon_type4_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_stSmallGameInfo::icon_type4(int index) const {
  // @@protoc_insertion_point(field_get:XML.SC_stSmallGameInfo.icon_type4)
  return _internal_icon_type4(index);
}
inline void SC_stSmallGameInfo::set_icon_type4(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  icon_type4_.Set(index, value);
  // @@protoc_insertion_point(field_set:XML.SC_stSmallGameInfo.icon_type4)
}
inline void SC_stSmallGameInfo::_internal_add_icon_type4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  icon_type4_.Add(value);
}
inline void SC_stSmallGameInfo::add_icon_type4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_icon_type4(value);
  // @@protoc_insertion_point(field_add:XML.SC_stSmallGameInfo.icon_type4)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_stSmallGameInfo::_internal_icon_type4() const {
  return icon_type4_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_stSmallGameInfo::icon_type4() const {
  // @@protoc_insertion_point(field_list:XML.SC_stSmallGameInfo.icon_type4)
  return _internal_icon_type4();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_stSmallGameInfo::_internal_mutable_icon_type4() {
  return &icon_type4_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_stSmallGameInfo::mutable_icon_type4() {
  // @@protoc_insertion_point(field_mutable_list:XML.SC_stSmallGameInfo.icon_type4)
  return _internal_mutable_icon_type4();
}

// int32 game_gold = 7;
inline void SC_stSmallGameInfo::clear_game_gold() {
  game_gold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_stSmallGameInfo::_internal_game_gold() const {
  return game_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_stSmallGameInfo::game_gold() const {
  // @@protoc_insertion_point(field_get:XML.SC_stSmallGameInfo.game_gold)
  return _internal_game_gold();
}
inline void SC_stSmallGameInfo::_internal_set_game_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_gold_ = value;
}
inline void SC_stSmallGameInfo::set_game_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_gold(value);
  // @@protoc_insertion_point(field_set:XML.SC_stSmallGameInfo.game_gold)
}

// bool game_end = 8;
inline void SC_stSmallGameInfo::clear_game_end() {
  game_end_ = false;
}
inline bool SC_stSmallGameInfo::_internal_game_end() const {
  return game_end_;
}
inline bool SC_stSmallGameInfo::game_end() const {
  // @@protoc_insertion_point(field_get:XML.SC_stSmallGameInfo.game_end)
  return _internal_game_end();
}
inline void SC_stSmallGameInfo::_internal_set_game_end(bool value) {
  
  game_end_ = value;
}
inline void SC_stSmallGameInfo::set_game_end(bool value) {
  _internal_set_game_end(value);
  // @@protoc_insertion_point(field_set:XML.SC_stSmallGameInfo.game_end)
}

// int32 line_gold = 9;
inline void SC_stSmallGameInfo::clear_line_gold() {
  line_gold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_stSmallGameInfo::_internal_line_gold() const {
  return line_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_stSmallGameInfo::line_gold() const {
  // @@protoc_insertion_point(field_get:XML.SC_stSmallGameInfo.line_gold)
  return _internal_line_gold();
}
inline void SC_stSmallGameInfo::_internal_set_line_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  line_gold_ = value;
}
inline void SC_stSmallGameInfo::set_line_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_line_gold(value);
  // @@protoc_insertion_point(field_set:XML.SC_stSmallGameInfo.line_gold)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace XML

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::XML::EMsgIDXML> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XML::EMsgIDXML>() {
  return ::XML::EMsgIDXML_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_XML_2eproto
