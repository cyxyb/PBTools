// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DQDZ.proto

#include "DQDZ.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace DQDZ {
class CMD_3D_CS_StartGameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_3D_CS_StartGame> _instance;
} _CMD_3D_CS_StartGame_default_instance_;
class CMD_3D_CS_StartBallGameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_3D_CS_StartBallGame> _instance;
} _CMD_3D_CS_StartBallGame_default_instance_;
class CMD_3D_CS_RequestCaiJinDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_3D_CS_RequestCaiJin> _instance;
} _CMD_3D_CS_RequestCaiJin_default_instance_;
class SC_SceneInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_SceneInfo> _instance;
} _SC_SceneInfo_default_instance_;
class tagGameConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tagGameConfig> _instance;
} _tagGameConfig_default_instance_;
class CMD_3D_SC_ResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_3D_SC_Result> _instance;
} _CMD_3D_SC_Result_default_instance_;
class CMD_StartBallGameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_StartBallGame> _instance;
} _CMD_StartBallGame_default_instance_;
}  // namespace DQDZ
static void InitDefaultsscc_info_CMD_3D_CS_RequestCaiJin_DQDZ_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DQDZ::_CMD_3D_CS_RequestCaiJin_default_instance_;
    new (ptr) ::DQDZ::CMD_3D_CS_RequestCaiJin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_3D_CS_RequestCaiJin_DQDZ_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_3D_CS_RequestCaiJin_DQDZ_2eproto}, {}};

static void InitDefaultsscc_info_CMD_3D_CS_StartBallGame_DQDZ_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DQDZ::_CMD_3D_CS_StartBallGame_default_instance_;
    new (ptr) ::DQDZ::CMD_3D_CS_StartBallGame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_3D_CS_StartBallGame_DQDZ_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_3D_CS_StartBallGame_DQDZ_2eproto}, {}};

static void InitDefaultsscc_info_CMD_3D_CS_StartGame_DQDZ_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DQDZ::_CMD_3D_CS_StartGame_default_instance_;
    new (ptr) ::DQDZ::CMD_3D_CS_StartGame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_3D_CS_StartGame_DQDZ_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_3D_CS_StartGame_DQDZ_2eproto}, {}};

static void InitDefaultsscc_info_CMD_3D_SC_Result_DQDZ_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DQDZ::_CMD_3D_SC_Result_default_instance_;
    new (ptr) ::DQDZ::CMD_3D_SC_Result();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_3D_SC_Result_DQDZ_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_3D_SC_Result_DQDZ_2eproto}, {}};

static void InitDefaultsscc_info_CMD_StartBallGame_DQDZ_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DQDZ::_CMD_StartBallGame_default_instance_;
    new (ptr) ::DQDZ::CMD_StartBallGame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_StartBallGame_DQDZ_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_StartBallGame_DQDZ_2eproto}, {}};

static void InitDefaultsscc_info_SC_SceneInfo_DQDZ_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DQDZ::_SC_SceneInfo_default_instance_;
    new (ptr) ::DQDZ::SC_SceneInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_SceneInfo_DQDZ_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_SceneInfo_DQDZ_2eproto}, {}};

static void InitDefaultsscc_info_tagGameConfig_DQDZ_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DQDZ::_tagGameConfig_default_instance_;
    new (ptr) ::DQDZ::tagGameConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_tagGameConfig_DQDZ_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_tagGameConfig_DQDZ_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_DQDZ_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_DQDZ_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_DQDZ_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_DQDZ_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DQDZ::CMD_3D_CS_StartGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DQDZ::CMD_3D_CS_StartGame, version_),
  PROTOBUF_FIELD_OFFSET(::DQDZ::CMD_3D_CS_StartGame, verify_code_),
  PROTOBUF_FIELD_OFFSET(::DQDZ::CMD_3D_CS_StartGame, bet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DQDZ::CMD_3D_CS_StartBallGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DQDZ::CMD_3D_CS_StartBallGame, version_),
  PROTOBUF_FIELD_OFFSET(::DQDZ::CMD_3D_CS_StartBallGame, verify_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DQDZ::CMD_3D_CS_RequestCaiJin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DQDZ::CMD_3D_CS_RequestCaiJin, version_),
  PROTOBUF_FIELD_OFFSET(::DQDZ::CMD_3D_CS_RequestCaiJin, verify_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DQDZ::SC_SceneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DQDZ::SC_SceneInfo, user_id_),
  PROTOBUF_FIELD_OFFSET(::DQDZ::SC_SceneInfo, net_code_),
  PROTOBUF_FIELD_OFFSET(::DQDZ::SC_SceneInfo, chair_id_),
  PROTOBUF_FIELD_OFFSET(::DQDZ::SC_SceneInfo, table_id_),
  PROTOBUF_FIELD_OFFSET(::DQDZ::SC_SceneInfo, user_state_),
  PROTOBUF_FIELD_OFFSET(::DQDZ::SC_SceneInfo, free_count_),
  PROTOBUF_FIELD_OFFSET(::DQDZ::SC_SceneInfo, multiple_),
  PROTOBUF_FIELD_OFFSET(::DQDZ::SC_SceneInfo, bet_),
  PROTOBUF_FIELD_OFFSET(::DQDZ::SC_SceneInfo, gold_),
  PROTOBUF_FIELD_OFFSET(::DQDZ::SC_SceneInfo, cai_jin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DQDZ::tagGameConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DQDZ::tagGameConfig, bet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DQDZ::CMD_3D_SC_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DQDZ::CMD_3D_SC_Result, user_id_),
  PROTOBUF_FIELD_OFFSET(::DQDZ::CMD_3D_SC_Result, bet_),
  PROTOBUF_FIELD_OFFSET(::DQDZ::CMD_3D_SC_Result, win_gold_),
  PROTOBUF_FIELD_OFFSET(::DQDZ::CMD_3D_SC_Result, com_gold_),
  PROTOBUF_FIELD_OFFSET(::DQDZ::CMD_3D_SC_Result, cur_gold_),
  PROTOBUF_FIELD_OFFSET(::DQDZ::CMD_3D_SC_Result, cai_jin_),
  PROTOBUF_FIELD_OFFSET(::DQDZ::CMD_3D_SC_Result, free_count_),
  PROTOBUF_FIELD_OFFSET(::DQDZ::CMD_3D_SC_Result, icon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DQDZ::CMD_StartBallGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DQDZ::CMD_StartBallGame, user_id_),
  PROTOBUF_FIELD_OFFSET(::DQDZ::CMD_StartBallGame, ret_),
  PROTOBUF_FIELD_OFFSET(::DQDZ::CMD_StartBallGame, add_gold_),
  PROTOBUF_FIELD_OFFSET(::DQDZ::CMD_StartBallGame, cur_gold_),
  PROTOBUF_FIELD_OFFSET(::DQDZ::CMD_StartBallGame, cai_jin_),
  PROTOBUF_FIELD_OFFSET(::DQDZ::CMD_StartBallGame, multiple_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::DQDZ::CMD_3D_CS_StartGame)},
  { 8, -1, sizeof(::DQDZ::CMD_3D_CS_StartBallGame)},
  { 15, -1, sizeof(::DQDZ::CMD_3D_CS_RequestCaiJin)},
  { 22, -1, sizeof(::DQDZ::SC_SceneInfo)},
  { 37, -1, sizeof(::DQDZ::tagGameConfig)},
  { 43, -1, sizeof(::DQDZ::CMD_3D_SC_Result)},
  { 56, -1, sizeof(::DQDZ::CMD_StartBallGame)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DQDZ::_CMD_3D_CS_StartGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DQDZ::_CMD_3D_CS_StartBallGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DQDZ::_CMD_3D_CS_RequestCaiJin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DQDZ::_SC_SceneInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DQDZ::_tagGameConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DQDZ::_CMD_3D_SC_Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DQDZ::_CMD_StartBallGame_default_instance_),
};

const char descriptor_table_protodef_DQDZ_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nDQDZ.proto\022\004DQDZ\"H\n\023CMD_3D_CS_StartGam"
  "e\022\017\n\007version\030\001 \001(\005\022\023\n\013verify_code\030\002 \001(\005\022"
  "\013\n\003bet\030\003 \001(\005\"\?\n\027CMD_3D_CS_StartBallGame\022"
  "\017\n\007version\030\001 \001(\005\022\023\n\013verify_code\030\002 \001(\005\"\?\n"
  "\027CMD_3D_CS_RequestCaiJin\022\017\n\007version\030\001 \001("
  "\005\022\023\n\013verify_code\030\002 \001(\005\"\273\001\n\014SC_SceneInfo\022"
  "\017\n\007user_id\030\001 \001(\005\022\020\n\010net_code\030\002 \001(\005\022\020\n\010ch"
  "air_id\030\003 \001(\005\022\020\n\010table_id\030\004 \001(\005\022\022\n\nuser_s"
  "tate\030\005 \001(\005\022\022\n\nfree_count\030\006 \001(\005\022\020\n\010multip"
  "le\030\007 \001(\005\022\013\n\003bet\030\010 \001(\005\022\014\n\004gold\030\t \001(\003\022\017\n\007c"
  "ai_jin\030\n \001(\003\"\034\n\rtagGameConfig\022\013\n\003bet\030\001 \003"
  "(\005\"\231\001\n\020CMD_3D_SC_Result\022\017\n\007user_id\030\001 \001(\005"
  "\022\013\n\003bet\030\002 \001(\005\022\020\n\010win_gold\030\003 \001(\003\022\020\n\010com_g"
  "old\030\004 \001(\003\022\020\n\010cur_gold\030\005 \001(\003\022\017\n\007cai_jin\030\006"
  " \001(\003\022\022\n\nfree_count\030\007 \001(\005\022\014\n\004icon\030\010 \003(\005\"x"
  "\n\021CMD_StartBallGame\022\017\n\007user_id\030\001 \001(\005\022\013\n\003"
  "ret\030\002 \001(\005\022\020\n\010add_gold\030\003 \001(\003\022\020\n\010cur_gold\030"
  "\004 \001(\003\022\017\n\007cai_jin\030\005 \001(\003\022\020\n\010multiple\030\006 \001(\005"
  "*\252\002\n\020EMsgIDDQDZServer\022\025\n\021SUB_CS_GAME_STA"
  "RT\020\000\022\032\n\026SUB_CS_START_BALL_GAME\020\001\022\032\n\026SUB_"
  "CS_REQUEST_CAI_JIN\020\002\022\025\n\021SUB_SC_GAME_STAR"
  "T\020\003\022\024\n\020SUB_SC_GAME_OVER\020\004\022\034\n\030SUB_SC_UPDA"
  "TE_PRIZE_POOL\020\005\022\026\n\022SUB_SC_GAME_CONFIG\020\006\022"
  "\024\n\020SUB_SC_GAME_DATA\020\007\022\025\n\021SUB_SC_START_GA"
  "ME\020\010\022\032\n\026SUB_SC_START_BALL_GAME\020\t\022\033\n\027SUB_"
  "SC_RESPONSE_CAI_JIN\020\nb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_DQDZ_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_DQDZ_2eproto_sccs[7] = {
  &scc_info_CMD_3D_CS_RequestCaiJin_DQDZ_2eproto.base,
  &scc_info_CMD_3D_CS_StartBallGame_DQDZ_2eproto.base,
  &scc_info_CMD_3D_CS_StartGame_DQDZ_2eproto.base,
  &scc_info_CMD_3D_SC_Result_DQDZ_2eproto.base,
  &scc_info_CMD_StartBallGame_DQDZ_2eproto.base,
  &scc_info_SC_SceneInfo_DQDZ_2eproto.base,
  &scc_info_tagGameConfig_DQDZ_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_DQDZ_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DQDZ_2eproto = {
  false, false, descriptor_table_protodef_DQDZ_2eproto, "DQDZ.proto", 1029,
  &descriptor_table_DQDZ_2eproto_once, descriptor_table_DQDZ_2eproto_sccs, descriptor_table_DQDZ_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_DQDZ_2eproto::offsets,
  file_level_metadata_DQDZ_2eproto, 7, file_level_enum_descriptors_DQDZ_2eproto, file_level_service_descriptors_DQDZ_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_DQDZ_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_DQDZ_2eproto)), true);
namespace DQDZ {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDDQDZServer_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DQDZ_2eproto);
  return file_level_enum_descriptors_DQDZ_2eproto[0];
}
bool EMsgIDDQDZServer_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMD_3D_CS_StartGame::_Internal {
 public:
};

CMD_3D_CS_StartGame::CMD_3D_CS_StartGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DQDZ.CMD_3D_CS_StartGame)
}
CMD_3D_CS_StartGame::CMD_3D_CS_StartGame(const CMD_3D_CS_StartGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&bet_) -
    reinterpret_cast<char*>(&version_)) + sizeof(bet_));
  // @@protoc_insertion_point(copy_constructor:DQDZ.CMD_3D_CS_StartGame)
}

void CMD_3D_CS_StartGame::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bet_) -
      reinterpret_cast<char*>(&version_)) + sizeof(bet_));
}

CMD_3D_CS_StartGame::~CMD_3D_CS_StartGame() {
  // @@protoc_insertion_point(destructor:DQDZ.CMD_3D_CS_StartGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_3D_CS_StartGame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_3D_CS_StartGame::ArenaDtor(void* object) {
  CMD_3D_CS_StartGame* _this = reinterpret_cast< CMD_3D_CS_StartGame* >(object);
  (void)_this;
}
void CMD_3D_CS_StartGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_3D_CS_StartGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_3D_CS_StartGame& CMD_3D_CS_StartGame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_3D_CS_StartGame_DQDZ_2eproto.base);
  return *internal_default_instance();
}


void CMD_3D_CS_StartGame::Clear() {
// @@protoc_insertion_point(message_clear_start:DQDZ.CMD_3D_CS_StartGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bet_) -
      reinterpret_cast<char*>(&version_)) + sizeof(bet_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_3D_CS_StartGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 verify_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          verify_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bet = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_3D_CS_StartGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DQDZ.CMD_3D_CS_StartGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // int32 verify_code = 2;
  if (this->verify_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_verify_code(), target);
  }

  // int32 bet = 3;
  if (this->bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_bet(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DQDZ.CMD_3D_CS_StartGame)
  return target;
}

size_t CMD_3D_CS_StartGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DQDZ.CMD_3D_CS_StartGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  // int32 verify_code = 2;
  if (this->verify_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_verify_code());
  }

  // int32 bet = 3;
  if (this->bet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_3D_CS_StartGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DQDZ.CMD_3D_CS_StartGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_3D_CS_StartGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_3D_CS_StartGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DQDZ.CMD_3D_CS_StartGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DQDZ.CMD_3D_CS_StartGame)
    MergeFrom(*source);
  }
}

void CMD_3D_CS_StartGame::MergeFrom(const CMD_3D_CS_StartGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DQDZ.CMD_3D_CS_StartGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.verify_code() != 0) {
    _internal_set_verify_code(from._internal_verify_code());
  }
  if (from.bet() != 0) {
    _internal_set_bet(from._internal_bet());
  }
}

void CMD_3D_CS_StartGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DQDZ.CMD_3D_CS_StartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_3D_CS_StartGame::CopyFrom(const CMD_3D_CS_StartGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DQDZ.CMD_3D_CS_StartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_3D_CS_StartGame::IsInitialized() const {
  return true;
}

void CMD_3D_CS_StartGame::InternalSwap(CMD_3D_CS_StartGame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_3D_CS_StartGame, bet_)
      + sizeof(CMD_3D_CS_StartGame::bet_)
      - PROTOBUF_FIELD_OFFSET(CMD_3D_CS_StartGame, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_3D_CS_StartGame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_3D_CS_StartBallGame::_Internal {
 public:
};

CMD_3D_CS_StartBallGame::CMD_3D_CS_StartBallGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DQDZ.CMD_3D_CS_StartBallGame)
}
CMD_3D_CS_StartBallGame::CMD_3D_CS_StartBallGame(const CMD_3D_CS_StartBallGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&verify_code_) -
    reinterpret_cast<char*>(&version_)) + sizeof(verify_code_));
  // @@protoc_insertion_point(copy_constructor:DQDZ.CMD_3D_CS_StartBallGame)
}

void CMD_3D_CS_StartBallGame::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&verify_code_) -
      reinterpret_cast<char*>(&version_)) + sizeof(verify_code_));
}

CMD_3D_CS_StartBallGame::~CMD_3D_CS_StartBallGame() {
  // @@protoc_insertion_point(destructor:DQDZ.CMD_3D_CS_StartBallGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_3D_CS_StartBallGame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_3D_CS_StartBallGame::ArenaDtor(void* object) {
  CMD_3D_CS_StartBallGame* _this = reinterpret_cast< CMD_3D_CS_StartBallGame* >(object);
  (void)_this;
}
void CMD_3D_CS_StartBallGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_3D_CS_StartBallGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_3D_CS_StartBallGame& CMD_3D_CS_StartBallGame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_3D_CS_StartBallGame_DQDZ_2eproto.base);
  return *internal_default_instance();
}


void CMD_3D_CS_StartBallGame::Clear() {
// @@protoc_insertion_point(message_clear_start:DQDZ.CMD_3D_CS_StartBallGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&verify_code_) -
      reinterpret_cast<char*>(&version_)) + sizeof(verify_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_3D_CS_StartBallGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 verify_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          verify_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_3D_CS_StartBallGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DQDZ.CMD_3D_CS_StartBallGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // int32 verify_code = 2;
  if (this->verify_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_verify_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DQDZ.CMD_3D_CS_StartBallGame)
  return target;
}

size_t CMD_3D_CS_StartBallGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DQDZ.CMD_3D_CS_StartBallGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  // int32 verify_code = 2;
  if (this->verify_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_verify_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_3D_CS_StartBallGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DQDZ.CMD_3D_CS_StartBallGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_3D_CS_StartBallGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_3D_CS_StartBallGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DQDZ.CMD_3D_CS_StartBallGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DQDZ.CMD_3D_CS_StartBallGame)
    MergeFrom(*source);
  }
}

void CMD_3D_CS_StartBallGame::MergeFrom(const CMD_3D_CS_StartBallGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DQDZ.CMD_3D_CS_StartBallGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.verify_code() != 0) {
    _internal_set_verify_code(from._internal_verify_code());
  }
}

void CMD_3D_CS_StartBallGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DQDZ.CMD_3D_CS_StartBallGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_3D_CS_StartBallGame::CopyFrom(const CMD_3D_CS_StartBallGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DQDZ.CMD_3D_CS_StartBallGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_3D_CS_StartBallGame::IsInitialized() const {
  return true;
}

void CMD_3D_CS_StartBallGame::InternalSwap(CMD_3D_CS_StartBallGame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_3D_CS_StartBallGame, verify_code_)
      + sizeof(CMD_3D_CS_StartBallGame::verify_code_)
      - PROTOBUF_FIELD_OFFSET(CMD_3D_CS_StartBallGame, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_3D_CS_StartBallGame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_3D_CS_RequestCaiJin::_Internal {
 public:
};

CMD_3D_CS_RequestCaiJin::CMD_3D_CS_RequestCaiJin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DQDZ.CMD_3D_CS_RequestCaiJin)
}
CMD_3D_CS_RequestCaiJin::CMD_3D_CS_RequestCaiJin(const CMD_3D_CS_RequestCaiJin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&verify_code_) -
    reinterpret_cast<char*>(&version_)) + sizeof(verify_code_));
  // @@protoc_insertion_point(copy_constructor:DQDZ.CMD_3D_CS_RequestCaiJin)
}

void CMD_3D_CS_RequestCaiJin::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&verify_code_) -
      reinterpret_cast<char*>(&version_)) + sizeof(verify_code_));
}

CMD_3D_CS_RequestCaiJin::~CMD_3D_CS_RequestCaiJin() {
  // @@protoc_insertion_point(destructor:DQDZ.CMD_3D_CS_RequestCaiJin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_3D_CS_RequestCaiJin::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_3D_CS_RequestCaiJin::ArenaDtor(void* object) {
  CMD_3D_CS_RequestCaiJin* _this = reinterpret_cast< CMD_3D_CS_RequestCaiJin* >(object);
  (void)_this;
}
void CMD_3D_CS_RequestCaiJin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_3D_CS_RequestCaiJin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_3D_CS_RequestCaiJin& CMD_3D_CS_RequestCaiJin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_3D_CS_RequestCaiJin_DQDZ_2eproto.base);
  return *internal_default_instance();
}


void CMD_3D_CS_RequestCaiJin::Clear() {
// @@protoc_insertion_point(message_clear_start:DQDZ.CMD_3D_CS_RequestCaiJin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&verify_code_) -
      reinterpret_cast<char*>(&version_)) + sizeof(verify_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_3D_CS_RequestCaiJin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 verify_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          verify_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_3D_CS_RequestCaiJin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DQDZ.CMD_3D_CS_RequestCaiJin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // int32 verify_code = 2;
  if (this->verify_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_verify_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DQDZ.CMD_3D_CS_RequestCaiJin)
  return target;
}

size_t CMD_3D_CS_RequestCaiJin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DQDZ.CMD_3D_CS_RequestCaiJin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  // int32 verify_code = 2;
  if (this->verify_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_verify_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_3D_CS_RequestCaiJin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DQDZ.CMD_3D_CS_RequestCaiJin)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_3D_CS_RequestCaiJin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_3D_CS_RequestCaiJin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DQDZ.CMD_3D_CS_RequestCaiJin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DQDZ.CMD_3D_CS_RequestCaiJin)
    MergeFrom(*source);
  }
}

void CMD_3D_CS_RequestCaiJin::MergeFrom(const CMD_3D_CS_RequestCaiJin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DQDZ.CMD_3D_CS_RequestCaiJin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.verify_code() != 0) {
    _internal_set_verify_code(from._internal_verify_code());
  }
}

void CMD_3D_CS_RequestCaiJin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DQDZ.CMD_3D_CS_RequestCaiJin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_3D_CS_RequestCaiJin::CopyFrom(const CMD_3D_CS_RequestCaiJin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DQDZ.CMD_3D_CS_RequestCaiJin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_3D_CS_RequestCaiJin::IsInitialized() const {
  return true;
}

void CMD_3D_CS_RequestCaiJin::InternalSwap(CMD_3D_CS_RequestCaiJin* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_3D_CS_RequestCaiJin, verify_code_)
      + sizeof(CMD_3D_CS_RequestCaiJin::verify_code_)
      - PROTOBUF_FIELD_OFFSET(CMD_3D_CS_RequestCaiJin, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_3D_CS_RequestCaiJin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SC_SceneInfo::_Internal {
 public:
};

SC_SceneInfo::SC_SceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DQDZ.SC_SceneInfo)
}
SC_SceneInfo::SC_SceneInfo(const SC_SceneInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cai_jin_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(cai_jin_));
  // @@protoc_insertion_point(copy_constructor:DQDZ.SC_SceneInfo)
}

void SC_SceneInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cai_jin_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(cai_jin_));
}

SC_SceneInfo::~SC_SceneInfo() {
  // @@protoc_insertion_point(destructor:DQDZ.SC_SceneInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SC_SceneInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SC_SceneInfo::ArenaDtor(void* object) {
  SC_SceneInfo* _this = reinterpret_cast< SC_SceneInfo* >(object);
  (void)_this;
}
void SC_SceneInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SC_SceneInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_SceneInfo& SC_SceneInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_SceneInfo_DQDZ_2eproto.base);
  return *internal_default_instance();
}


void SC_SceneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:DQDZ.SC_SceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cai_jin_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(cai_jin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_SceneInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 net_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          net_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 table_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          table_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 user_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          user_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 free_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          free_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 multiple = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bet = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 gold = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cai_jin = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          cai_jin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_SceneInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DQDZ.SC_SceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // int32 net_code = 2;
  if (this->net_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_net_code(), target);
  }

  // int32 chair_id = 3;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_chair_id(), target);
  }

  // int32 table_id = 4;
  if (this->table_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_table_id(), target);
  }

  // int32 user_state = 5;
  if (this->user_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_user_state(), target);
  }

  // int32 free_count = 6;
  if (this->free_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_free_count(), target);
  }

  // int32 multiple = 7;
  if (this->multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_multiple(), target);
  }

  // int32 bet = 8;
  if (this->bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_bet(), target);
  }

  // int64 gold = 9;
  if (this->gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_gold(), target);
  }

  // int64 cai_jin = 10;
  if (this->cai_jin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_cai_jin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DQDZ.SC_SceneInfo)
  return target;
}

size_t SC_SceneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DQDZ.SC_SceneInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 net_code = 2;
  if (this->net_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_net_code());
  }

  // int32 chair_id = 3;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 table_id = 4;
  if (this->table_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_table_id());
  }

  // int32 user_state = 5;
  if (this->user_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_state());
  }

  // int32 free_count = 6;
  if (this->free_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_free_count());
  }

  // int32 multiple = 7;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_multiple());
  }

  // int32 bet = 8;
  if (this->bet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet());
  }

  // int64 gold = 9;
  if (this->gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_gold());
  }

  // int64 cai_jin = 10;
  if (this->cai_jin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cai_jin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_SceneInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DQDZ.SC_SceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SceneInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_SceneInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DQDZ.SC_SceneInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DQDZ.SC_SceneInfo)
    MergeFrom(*source);
  }
}

void SC_SceneInfo::MergeFrom(const SC_SceneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DQDZ.SC_SceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.net_code() != 0) {
    _internal_set_net_code(from._internal_net_code());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.table_id() != 0) {
    _internal_set_table_id(from._internal_table_id());
  }
  if (from.user_state() != 0) {
    _internal_set_user_state(from._internal_user_state());
  }
  if (from.free_count() != 0) {
    _internal_set_free_count(from._internal_free_count());
  }
  if (from.multiple() != 0) {
    _internal_set_multiple(from._internal_multiple());
  }
  if (from.bet() != 0) {
    _internal_set_bet(from._internal_bet());
  }
  if (from.gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  if (from.cai_jin() != 0) {
    _internal_set_cai_jin(from._internal_cai_jin());
  }
}

void SC_SceneInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DQDZ.SC_SceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SceneInfo::CopyFrom(const SC_SceneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DQDZ.SC_SceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SceneInfo::IsInitialized() const {
  return true;
}

void SC_SceneInfo::InternalSwap(SC_SceneInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_SceneInfo, cai_jin_)
      + sizeof(SC_SceneInfo::cai_jin_)
      - PROTOBUF_FIELD_OFFSET(SC_SceneInfo, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_SceneInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class tagGameConfig::_Internal {
 public:
};

tagGameConfig::tagGameConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bet_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DQDZ.tagGameConfig)
}
tagGameConfig::tagGameConfig(const tagGameConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bet_(from.bet_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DQDZ.tagGameConfig)
}

void tagGameConfig::SharedCtor() {
}

tagGameConfig::~tagGameConfig() {
  // @@protoc_insertion_point(destructor:DQDZ.tagGameConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void tagGameConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void tagGameConfig::ArenaDtor(void* object) {
  tagGameConfig* _this = reinterpret_cast< tagGameConfig* >(object);
  (void)_this;
}
void tagGameConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void tagGameConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tagGameConfig& tagGameConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tagGameConfig_DQDZ_2eproto.base);
  return *internal_default_instance();
}


void tagGameConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:DQDZ.tagGameConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bet_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* tagGameConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 bet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bet(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_bet(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tagGameConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DQDZ.tagGameConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 bet = 1;
  {
    int byte_size = _bet_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_bet(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DQDZ.tagGameConfig)
  return target;
}

size_t tagGameConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DQDZ.tagGameConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 bet = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bet_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bet_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tagGameConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DQDZ.tagGameConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const tagGameConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tagGameConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DQDZ.tagGameConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DQDZ.tagGameConfig)
    MergeFrom(*source);
  }
}

void tagGameConfig::MergeFrom(const tagGameConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DQDZ.tagGameConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bet_.MergeFrom(from.bet_);
}

void tagGameConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DQDZ.tagGameConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGameConfig::CopyFrom(const tagGameConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DQDZ.tagGameConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGameConfig::IsInitialized() const {
  return true;
}

void tagGameConfig::InternalSwap(tagGameConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bet_.InternalSwap(&other->bet_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tagGameConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_3D_SC_Result::_Internal {
 public:
};

CMD_3D_SC_Result::CMD_3D_SC_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  icon_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DQDZ.CMD_3D_SC_Result)
}
CMD_3D_SC_Result::CMD_3D_SC_Result(const CMD_3D_SC_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      icon_(from.icon_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&free_count_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(free_count_));
  // @@protoc_insertion_point(copy_constructor:DQDZ.CMD_3D_SC_Result)
}

void CMD_3D_SC_Result::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&free_count_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(free_count_));
}

CMD_3D_SC_Result::~CMD_3D_SC_Result() {
  // @@protoc_insertion_point(destructor:DQDZ.CMD_3D_SC_Result)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_3D_SC_Result::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_3D_SC_Result::ArenaDtor(void* object) {
  CMD_3D_SC_Result* _this = reinterpret_cast< CMD_3D_SC_Result* >(object);
  (void)_this;
}
void CMD_3D_SC_Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_3D_SC_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_3D_SC_Result& CMD_3D_SC_Result::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_3D_SC_Result_DQDZ_2eproto.base);
  return *internal_default_instance();
}


void CMD_3D_SC_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:DQDZ.CMD_3D_SC_Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  icon_.Clear();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&free_count_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(free_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_3D_SC_Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 win_gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          win_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 com_gold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          com_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cur_gold = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          cur_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cai_jin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          cai_jin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 free_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          free_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 icon = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_icon(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_icon(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_3D_SC_Result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DQDZ.CMD_3D_SC_Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // int32 bet = 2;
  if (this->bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bet(), target);
  }

  // int64 win_gold = 3;
  if (this->win_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_win_gold(), target);
  }

  // int64 com_gold = 4;
  if (this->com_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_com_gold(), target);
  }

  // int64 cur_gold = 5;
  if (this->cur_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_cur_gold(), target);
  }

  // int64 cai_jin = 6;
  if (this->cai_jin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_cai_jin(), target);
  }

  // int32 free_count = 7;
  if (this->free_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_free_count(), target);
  }

  // repeated int32 icon = 8;
  {
    int byte_size = _icon_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_icon(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DQDZ.CMD_3D_SC_Result)
  return target;
}

size_t CMD_3D_SC_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DQDZ.CMD_3D_SC_Result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 icon = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->icon_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _icon_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 bet = 2;
  if (this->bet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet());
  }

  // int64 win_gold = 3;
  if (this->win_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_win_gold());
  }

  // int64 com_gold = 4;
  if (this->com_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_com_gold());
  }

  // int64 cur_gold = 5;
  if (this->cur_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cur_gold());
  }

  // int64 cai_jin = 6;
  if (this->cai_jin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cai_jin());
  }

  // int32 free_count = 7;
  if (this->free_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_free_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_3D_SC_Result::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DQDZ.CMD_3D_SC_Result)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_3D_SC_Result* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_3D_SC_Result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DQDZ.CMD_3D_SC_Result)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DQDZ.CMD_3D_SC_Result)
    MergeFrom(*source);
  }
}

void CMD_3D_SC_Result::MergeFrom(const CMD_3D_SC_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DQDZ.CMD_3D_SC_Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  icon_.MergeFrom(from.icon_);
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.bet() != 0) {
    _internal_set_bet(from._internal_bet());
  }
  if (from.win_gold() != 0) {
    _internal_set_win_gold(from._internal_win_gold());
  }
  if (from.com_gold() != 0) {
    _internal_set_com_gold(from._internal_com_gold());
  }
  if (from.cur_gold() != 0) {
    _internal_set_cur_gold(from._internal_cur_gold());
  }
  if (from.cai_jin() != 0) {
    _internal_set_cai_jin(from._internal_cai_jin());
  }
  if (from.free_count() != 0) {
    _internal_set_free_count(from._internal_free_count());
  }
}

void CMD_3D_SC_Result::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DQDZ.CMD_3D_SC_Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_3D_SC_Result::CopyFrom(const CMD_3D_SC_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DQDZ.CMD_3D_SC_Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_3D_SC_Result::IsInitialized() const {
  return true;
}

void CMD_3D_SC_Result::InternalSwap(CMD_3D_SC_Result* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  icon_.InternalSwap(&other->icon_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_3D_SC_Result, free_count_)
      + sizeof(CMD_3D_SC_Result::free_count_)
      - PROTOBUF_FIELD_OFFSET(CMD_3D_SC_Result, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_3D_SC_Result::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_StartBallGame::_Internal {
 public:
};

CMD_StartBallGame::CMD_StartBallGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DQDZ.CMD_StartBallGame)
}
CMD_StartBallGame::CMD_StartBallGame(const CMD_StartBallGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&multiple_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(multiple_));
  // @@protoc_insertion_point(copy_constructor:DQDZ.CMD_StartBallGame)
}

void CMD_StartBallGame::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&multiple_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(multiple_));
}

CMD_StartBallGame::~CMD_StartBallGame() {
  // @@protoc_insertion_point(destructor:DQDZ.CMD_StartBallGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_StartBallGame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_StartBallGame::ArenaDtor(void* object) {
  CMD_StartBallGame* _this = reinterpret_cast< CMD_StartBallGame* >(object);
  (void)_this;
}
void CMD_StartBallGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_StartBallGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_StartBallGame& CMD_StartBallGame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_StartBallGame_DQDZ_2eproto.base);
  return *internal_default_instance();
}


void CMD_StartBallGame::Clear() {
// @@protoc_insertion_point(message_clear_start:DQDZ.CMD_StartBallGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multiple_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(multiple_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_StartBallGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 add_gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          add_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cur_gold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cur_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cai_jin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          cai_jin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 multiple = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_StartBallGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DQDZ.CMD_StartBallGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // int32 ret = 2;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ret(), target);
  }

  // int64 add_gold = 3;
  if (this->add_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_add_gold(), target);
  }

  // int64 cur_gold = 4;
  if (this->cur_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_cur_gold(), target);
  }

  // int64 cai_jin = 5;
  if (this->cai_jin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_cai_jin(), target);
  }

  // int32 multiple = 6;
  if (this->multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_multiple(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DQDZ.CMD_StartBallGame)
  return target;
}

size_t CMD_StartBallGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DQDZ.CMD_StartBallGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 ret = 2;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  // int64 add_gold = 3;
  if (this->add_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_add_gold());
  }

  // int64 cur_gold = 4;
  if (this->cur_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cur_gold());
  }

  // int64 cai_jin = 5;
  if (this->cai_jin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cai_jin());
  }

  // int32 multiple = 6;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_multiple());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_StartBallGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DQDZ.CMD_StartBallGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_StartBallGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_StartBallGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DQDZ.CMD_StartBallGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DQDZ.CMD_StartBallGame)
    MergeFrom(*source);
  }
}

void CMD_StartBallGame::MergeFrom(const CMD_StartBallGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DQDZ.CMD_StartBallGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
  if (from.add_gold() != 0) {
    _internal_set_add_gold(from._internal_add_gold());
  }
  if (from.cur_gold() != 0) {
    _internal_set_cur_gold(from._internal_cur_gold());
  }
  if (from.cai_jin() != 0) {
    _internal_set_cai_jin(from._internal_cai_jin());
  }
  if (from.multiple() != 0) {
    _internal_set_multiple(from._internal_multiple());
  }
}

void CMD_StartBallGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DQDZ.CMD_StartBallGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_StartBallGame::CopyFrom(const CMD_StartBallGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DQDZ.CMD_StartBallGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_StartBallGame::IsInitialized() const {
  return true;
}

void CMD_StartBallGame::InternalSwap(CMD_StartBallGame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_StartBallGame, multiple_)
      + sizeof(CMD_StartBallGame::multiple_)
      - PROTOBUF_FIELD_OFFSET(CMD_StartBallGame, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_StartBallGame::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace DQDZ
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DQDZ::CMD_3D_CS_StartGame* Arena::CreateMaybeMessage< ::DQDZ::CMD_3D_CS_StartGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DQDZ::CMD_3D_CS_StartGame >(arena);
}
template<> PROTOBUF_NOINLINE ::DQDZ::CMD_3D_CS_StartBallGame* Arena::CreateMaybeMessage< ::DQDZ::CMD_3D_CS_StartBallGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DQDZ::CMD_3D_CS_StartBallGame >(arena);
}
template<> PROTOBUF_NOINLINE ::DQDZ::CMD_3D_CS_RequestCaiJin* Arena::CreateMaybeMessage< ::DQDZ::CMD_3D_CS_RequestCaiJin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DQDZ::CMD_3D_CS_RequestCaiJin >(arena);
}
template<> PROTOBUF_NOINLINE ::DQDZ::SC_SceneInfo* Arena::CreateMaybeMessage< ::DQDZ::SC_SceneInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DQDZ::SC_SceneInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::DQDZ::tagGameConfig* Arena::CreateMaybeMessage< ::DQDZ::tagGameConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DQDZ::tagGameConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::DQDZ::CMD_3D_SC_Result* Arena::CreateMaybeMessage< ::DQDZ::CMD_3D_SC_Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DQDZ::CMD_3D_SC_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::DQDZ::CMD_StartBallGame* Arena::CreateMaybeMessage< ::DQDZ::CMD_StartBallGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DQDZ::CMD_StartBallGame >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
