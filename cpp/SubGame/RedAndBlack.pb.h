// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RedAndBlack.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RedAndBlack_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RedAndBlack_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RedAndBlack_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RedAndBlack_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RedAndBlack_2eproto;
namespace RedAndBlack {
class MsgAgainBet;
class MsgAgainBetDefaultTypeInternal;
extern MsgAgainBetDefaultTypeInternal _MsgAgainBet_default_instance_;
class MsgAgainBetResp;
class MsgAgainBetRespDefaultTypeInternal;
extern MsgAgainBetRespDefaultTypeInternal _MsgAgainBetResp_default_instance_;
class MsgBet;
class MsgBetDefaultTypeInternal;
extern MsgBetDefaultTypeInternal _MsgBet_default_instance_;
class MsgBetRecord;
class MsgBetRecordDefaultTypeInternal;
extern MsgBetRecordDefaultTypeInternal _MsgBetRecord_default_instance_;
class MsgBetResp;
class MsgBetRespDefaultTypeInternal;
extern MsgBetRespDefaultTypeInternal _MsgBetResp_default_instance_;
class MsgRecord;
class MsgRecordDefaultTypeInternal;
extern MsgRecordDefaultTypeInternal _MsgRecord_default_instance_;
class MsgResult;
class MsgResultDefaultTypeInternal;
extern MsgResultDefaultTypeInternal _MsgResult_default_instance_;
class MsgSceneInfo;
class MsgSceneInfoDefaultTypeInternal;
extern MsgSceneInfoDefaultTypeInternal _MsgSceneInfo_default_instance_;
class MsgSingleAgainBet;
class MsgSingleAgainBetDefaultTypeInternal;
extern MsgSingleAgainBetDefaultTypeInternal _MsgSingleAgainBet_default_instance_;
class MsgTotalBet;
class MsgTotalBetDefaultTypeInternal;
extern MsgTotalBetDefaultTypeInternal _MsgTotalBet_default_instance_;
class MsgWinMsg;
class MsgWinMsgDefaultTypeInternal;
extern MsgWinMsgDefaultTypeInternal _MsgWinMsg_default_instance_;
}  // namespace RedAndBlack
PROTOBUF_NAMESPACE_OPEN
template<> ::RedAndBlack::MsgAgainBet* Arena::CreateMaybeMessage<::RedAndBlack::MsgAgainBet>(Arena*);
template<> ::RedAndBlack::MsgAgainBetResp* Arena::CreateMaybeMessage<::RedAndBlack::MsgAgainBetResp>(Arena*);
template<> ::RedAndBlack::MsgBet* Arena::CreateMaybeMessage<::RedAndBlack::MsgBet>(Arena*);
template<> ::RedAndBlack::MsgBetRecord* Arena::CreateMaybeMessage<::RedAndBlack::MsgBetRecord>(Arena*);
template<> ::RedAndBlack::MsgBetResp* Arena::CreateMaybeMessage<::RedAndBlack::MsgBetResp>(Arena*);
template<> ::RedAndBlack::MsgRecord* Arena::CreateMaybeMessage<::RedAndBlack::MsgRecord>(Arena*);
template<> ::RedAndBlack::MsgResult* Arena::CreateMaybeMessage<::RedAndBlack::MsgResult>(Arena*);
template<> ::RedAndBlack::MsgSceneInfo* Arena::CreateMaybeMessage<::RedAndBlack::MsgSceneInfo>(Arena*);
template<> ::RedAndBlack::MsgSingleAgainBet* Arena::CreateMaybeMessage<::RedAndBlack::MsgSingleAgainBet>(Arena*);
template<> ::RedAndBlack::MsgTotalBet* Arena::CreateMaybeMessage<::RedAndBlack::MsgTotalBet>(Arena*);
template<> ::RedAndBlack::MsgWinMsg* Arena::CreateMaybeMessage<::RedAndBlack::MsgWinMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace RedAndBlack {

enum EMsgIDSubGame : int {
  MsgIDSubGame_Null = 0,
  MsgIDSubGame_Bet = 1,
  MsgIDSubGame_BetResp = 2,
  MsgIDSubGame_AgainBet = 3,
  MsgIDSubGame_AgainBetResp = 4,
  MsgIDSubGame_GameResultResp = 5,
  MsgIDSubGame_BetRecordResp = 6,
  MsgIDSubGame_NotifyStateResp = 7,
  EMsgIDSubGame_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EMsgIDSubGame_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EMsgIDSubGame_IsValid(int value);
constexpr EMsgIDSubGame EMsgIDSubGame_MIN = MsgIDSubGame_Null;
constexpr EMsgIDSubGame EMsgIDSubGame_MAX = MsgIDSubGame_NotifyStateResp;
constexpr int EMsgIDSubGame_ARRAYSIZE = EMsgIDSubGame_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDSubGame_descriptor();
template<typename T>
inline const std::string& EMsgIDSubGame_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMsgIDSubGame>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMsgIDSubGame_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMsgIDSubGame_descriptor(), enum_t_value);
}
inline bool EMsgIDSubGame_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMsgIDSubGame* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMsgIDSubGame>(
    EMsgIDSubGame_descriptor(), name, value);
}
// ===================================================================

class MsgRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RedAndBlack.MsgRecord) */ {
 public:
  inline MsgRecord() : MsgRecord(nullptr) {}
  virtual ~MsgRecord();

  MsgRecord(const MsgRecord& from);
  MsgRecord(MsgRecord&& from) noexcept
    : MsgRecord() {
    *this = ::std::move(from);
  }

  inline MsgRecord& operator=(const MsgRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgRecord& operator=(MsgRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgRecord& default_instance();

  static inline const MsgRecord* internal_default_instance() {
    return reinterpret_cast<const MsgRecord*>(
               &_MsgRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgRecord& a, MsgRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgRecord* New() const final {
    return CreateMaybeMessage<MsgRecord>(nullptr);
  }

  MsgRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgRecord& from);
  void MergeFrom(const MsgRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RedAndBlack.MsgRecord";
  }
  protected:
  explicit MsgRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RedAndBlack_2eproto);
    return ::descriptor_table_RedAndBlack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kCardTypeFieldNumber = 2,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 card_type = 2;
  void clear_card_type();
  ::PROTOBUF_NAMESPACE_ID::int32 card_type() const;
  void set_card_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_card_type() const;
  void _internal_set_card_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RedAndBlack.MsgRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  ::PROTOBUF_NAMESPACE_ID::int32 card_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RedAndBlack_2eproto;
};
// -------------------------------------------------------------------

class MsgSceneInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RedAndBlack.MsgSceneInfo) */ {
 public:
  inline MsgSceneInfo() : MsgSceneInfo(nullptr) {}
  virtual ~MsgSceneInfo();

  MsgSceneInfo(const MsgSceneInfo& from);
  MsgSceneInfo(MsgSceneInfo&& from) noexcept
    : MsgSceneInfo() {
    *this = ::std::move(from);
  }

  inline MsgSceneInfo& operator=(const MsgSceneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSceneInfo& operator=(MsgSceneInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgSceneInfo& default_instance();

  static inline const MsgSceneInfo* internal_default_instance() {
    return reinterpret_cast<const MsgSceneInfo*>(
               &_MsgSceneInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgSceneInfo& a, MsgSceneInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSceneInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSceneInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgSceneInfo* New() const final {
    return CreateMaybeMessage<MsgSceneInfo>(nullptr);
  }

  MsgSceneInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgSceneInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgSceneInfo& from);
  void MergeFrom(const MsgSceneInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgSceneInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RedAndBlack.MsgSceneInfo";
  }
  protected:
  explicit MsgSceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RedAndBlack_2eproto);
    return ::descriptor_table_RedAndBlack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBetFieldNumber = 1,
    kRecordFieldNumber = 2,
    kBetLimitFieldNumber = 3,
    kAreaMulFieldNumber = 5,
    kStateTimeFieldNumber = 6,
    kPlayerLimitFieldNumber = 4,
    kRemainTimeFieldNumber = 7,
    kStateFieldNumber = 8,
  };
  // repeated int32 bet = 1;
  int bet_size() const;
  private:
  int _internal_bet_size() const;
  public:
  void clear_bet();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bet(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_bet() const;
  void _internal_add_bet(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_bet();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 bet(int index) const;
  void set_bet(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_bet(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      bet() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_bet();

  // repeated .RedAndBlack.MsgRecord record = 2;
  int record_size() const;
  private:
  int _internal_record_size() const;
  public:
  void clear_record();
  ::RedAndBlack::MsgRecord* mutable_record(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RedAndBlack::MsgRecord >*
      mutable_record();
  private:
  const ::RedAndBlack::MsgRecord& _internal_record(int index) const;
  ::RedAndBlack::MsgRecord* _internal_add_record();
  public:
  const ::RedAndBlack::MsgRecord& record(int index) const;
  ::RedAndBlack::MsgRecord* add_record();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RedAndBlack::MsgRecord >&
      record() const;

  // repeated int32 bet_limit = 3;
  int bet_limit_size() const;
  private:
  int _internal_bet_limit_size() const;
  public:
  void clear_bet_limit();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bet_limit(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_bet_limit() const;
  void _internal_add_bet_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_bet_limit();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 bet_limit(int index) const;
  void set_bet_limit(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_bet_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      bet_limit() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_bet_limit();

  // repeated int32 area_mul = 5;
  int area_mul_size() const;
  private:
  int _internal_area_mul_size() const;
  public:
  void clear_area_mul();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_area_mul(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_area_mul() const;
  void _internal_add_area_mul(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_area_mul();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 area_mul(int index) const;
  void set_area_mul(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_area_mul(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      area_mul() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_area_mul();

  // repeated int32 state_time = 6;
  int state_time_size() const;
  private:
  int _internal_state_time_size() const;
  public:
  void clear_state_time();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_state_time() const;
  void _internal_add_state_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_state_time();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 state_time(int index) const;
  void set_state_time(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_state_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      state_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_state_time();

  // int32 player_limit = 4;
  void clear_player_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 player_limit() const;
  void set_player_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_limit() const;
  void _internal_set_player_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 remain_time = 7;
  void clear_remain_time();
  ::PROTOBUF_NAMESPACE_ID::int32 remain_time() const;
  void set_remain_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_remain_time() const;
  void _internal_set_remain_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 state = 8;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RedAndBlack.MsgSceneInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > bet_;
  mutable std::atomic<int> _bet_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RedAndBlack::MsgRecord > record_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > bet_limit_;
  mutable std::atomic<int> _bet_limit_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > area_mul_;
  mutable std::atomic<int> _area_mul_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > state_time_;
  mutable std::atomic<int> _state_time_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_limit_;
  ::PROTOBUF_NAMESPACE_ID::int32 remain_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RedAndBlack_2eproto;
};
// -------------------------------------------------------------------

class MsgBet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RedAndBlack.MsgBet) */ {
 public:
  inline MsgBet() : MsgBet(nullptr) {}
  virtual ~MsgBet();

  MsgBet(const MsgBet& from);
  MsgBet(MsgBet&& from) noexcept
    : MsgBet() {
    *this = ::std::move(from);
  }

  inline MsgBet& operator=(const MsgBet& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgBet& operator=(MsgBet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgBet& default_instance();

  static inline const MsgBet* internal_default_instance() {
    return reinterpret_cast<const MsgBet*>(
               &_MsgBet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MsgBet& a, MsgBet& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgBet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgBet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgBet* New() const final {
    return CreateMaybeMessage<MsgBet>(nullptr);
  }

  MsgBet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgBet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgBet& from);
  void MergeFrom(const MsgBet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgBet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RedAndBlack.MsgBet";
  }
  protected:
  explicit MsgBet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RedAndBlack_2eproto);
    return ::descriptor_table_RedAndBlack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kAreaFieldNumber = 2,
  };
  // int32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 area = 2;
  void clear_area();
  ::PROTOBUF_NAMESPACE_ID::int32 area() const;
  void set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_area() const;
  void _internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RedAndBlack.MsgBet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 area_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RedAndBlack_2eproto;
};
// -------------------------------------------------------------------

class MsgBetResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RedAndBlack.MsgBetResp) */ {
 public:
  inline MsgBetResp() : MsgBetResp(nullptr) {}
  virtual ~MsgBetResp();

  MsgBetResp(const MsgBetResp& from);
  MsgBetResp(MsgBetResp&& from) noexcept
    : MsgBetResp() {
    *this = ::std::move(from);
  }

  inline MsgBetResp& operator=(const MsgBetResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgBetResp& operator=(MsgBetResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgBetResp& default_instance();

  static inline const MsgBetResp* internal_default_instance() {
    return reinterpret_cast<const MsgBetResp*>(
               &_MsgBetResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MsgBetResp& a, MsgBetResp& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgBetResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgBetResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgBetResp* New() const final {
    return CreateMaybeMessage<MsgBetResp>(nullptr);
  }

  MsgBetResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgBetResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgBetResp& from);
  void MergeFrom(const MsgBetResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgBetResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RedAndBlack.MsgBetResp";
  }
  protected:
  explicit MsgBetResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RedAndBlack_2eproto);
    return ::descriptor_table_RedAndBlack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBetInfoFieldNumber = 2,
    kChairIdFieldNumber = 1,
  };
  // .RedAndBlack.MsgBet bet_info = 2;
  bool has_bet_info() const;
  private:
  bool _internal_has_bet_info() const;
  public:
  void clear_bet_info();
  const ::RedAndBlack::MsgBet& bet_info() const;
  ::RedAndBlack::MsgBet* release_bet_info();
  ::RedAndBlack::MsgBet* mutable_bet_info();
  void set_allocated_bet_info(::RedAndBlack::MsgBet* bet_info);
  private:
  const ::RedAndBlack::MsgBet& _internal_bet_info() const;
  ::RedAndBlack::MsgBet* _internal_mutable_bet_info();
  public:
  void unsafe_arena_set_allocated_bet_info(
      ::RedAndBlack::MsgBet* bet_info);
  ::RedAndBlack::MsgBet* unsafe_arena_release_bet_info();

  // int32 chair_id = 1;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RedAndBlack.MsgBetResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::RedAndBlack::MsgBet* bet_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RedAndBlack_2eproto;
};
// -------------------------------------------------------------------

class MsgSingleAgainBet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RedAndBlack.MsgSingleAgainBet) */ {
 public:
  inline MsgSingleAgainBet() : MsgSingleAgainBet(nullptr) {}
  virtual ~MsgSingleAgainBet();

  MsgSingleAgainBet(const MsgSingleAgainBet& from);
  MsgSingleAgainBet(MsgSingleAgainBet&& from) noexcept
    : MsgSingleAgainBet() {
    *this = ::std::move(from);
  }

  inline MsgSingleAgainBet& operator=(const MsgSingleAgainBet& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSingleAgainBet& operator=(MsgSingleAgainBet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgSingleAgainBet& default_instance();

  static inline const MsgSingleAgainBet* internal_default_instance() {
    return reinterpret_cast<const MsgSingleAgainBet*>(
               &_MsgSingleAgainBet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MsgSingleAgainBet& a, MsgSingleAgainBet& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSingleAgainBet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSingleAgainBet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgSingleAgainBet* New() const final {
    return CreateMaybeMessage<MsgSingleAgainBet>(nullptr);
  }

  MsgSingleAgainBet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgSingleAgainBet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgSingleAgainBet& from);
  void MergeFrom(const MsgSingleAgainBet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgSingleAgainBet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RedAndBlack.MsgSingleAgainBet";
  }
  protected:
  explicit MsgSingleAgainBet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RedAndBlack_2eproto);
    return ::descriptor_table_RedAndBlack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kAreaFieldNumber = 2,
    kCountFieldNumber = 3,
  };
  // int32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 area = 2;
  void clear_area();
  ::PROTOBUF_NAMESPACE_ID::int32 area() const;
  void set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_area() const;
  void _internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 count = 3;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RedAndBlack.MsgSingleAgainBet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 area_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RedAndBlack_2eproto;
};
// -------------------------------------------------------------------

class MsgAgainBet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RedAndBlack.MsgAgainBet) */ {
 public:
  inline MsgAgainBet() : MsgAgainBet(nullptr) {}
  virtual ~MsgAgainBet();

  MsgAgainBet(const MsgAgainBet& from);
  MsgAgainBet(MsgAgainBet&& from) noexcept
    : MsgAgainBet() {
    *this = ::std::move(from);
  }

  inline MsgAgainBet& operator=(const MsgAgainBet& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgAgainBet& operator=(MsgAgainBet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgAgainBet& default_instance();

  static inline const MsgAgainBet* internal_default_instance() {
    return reinterpret_cast<const MsgAgainBet*>(
               &_MsgAgainBet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MsgAgainBet& a, MsgAgainBet& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgAgainBet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgAgainBet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgAgainBet* New() const final {
    return CreateMaybeMessage<MsgAgainBet>(nullptr);
  }

  MsgAgainBet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgAgainBet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgAgainBet& from);
  void MergeFrom(const MsgAgainBet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgAgainBet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RedAndBlack.MsgAgainBet";
  }
  protected:
  explicit MsgAgainBet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RedAndBlack_2eproto);
    return ::descriptor_table_RedAndBlack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgainBetInfoFieldNumber = 1,
  };
  // repeated .RedAndBlack.MsgSingleAgainBet again_bet_info = 1;
  int again_bet_info_size() const;
  private:
  int _internal_again_bet_info_size() const;
  public:
  void clear_again_bet_info();
  ::RedAndBlack::MsgSingleAgainBet* mutable_again_bet_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RedAndBlack::MsgSingleAgainBet >*
      mutable_again_bet_info();
  private:
  const ::RedAndBlack::MsgSingleAgainBet& _internal_again_bet_info(int index) const;
  ::RedAndBlack::MsgSingleAgainBet* _internal_add_again_bet_info();
  public:
  const ::RedAndBlack::MsgSingleAgainBet& again_bet_info(int index) const;
  ::RedAndBlack::MsgSingleAgainBet* add_again_bet_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RedAndBlack::MsgSingleAgainBet >&
      again_bet_info() const;

  // @@protoc_insertion_point(class_scope:RedAndBlack.MsgAgainBet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RedAndBlack::MsgSingleAgainBet > again_bet_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RedAndBlack_2eproto;
};
// -------------------------------------------------------------------

class MsgAgainBetResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RedAndBlack.MsgAgainBetResp) */ {
 public:
  inline MsgAgainBetResp() : MsgAgainBetResp(nullptr) {}
  virtual ~MsgAgainBetResp();

  MsgAgainBetResp(const MsgAgainBetResp& from);
  MsgAgainBetResp(MsgAgainBetResp&& from) noexcept
    : MsgAgainBetResp() {
    *this = ::std::move(from);
  }

  inline MsgAgainBetResp& operator=(const MsgAgainBetResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgAgainBetResp& operator=(MsgAgainBetResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgAgainBetResp& default_instance();

  static inline const MsgAgainBetResp* internal_default_instance() {
    return reinterpret_cast<const MsgAgainBetResp*>(
               &_MsgAgainBetResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MsgAgainBetResp& a, MsgAgainBetResp& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgAgainBetResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgAgainBetResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgAgainBetResp* New() const final {
    return CreateMaybeMessage<MsgAgainBetResp>(nullptr);
  }

  MsgAgainBetResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgAgainBetResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgAgainBetResp& from);
  void MergeFrom(const MsgAgainBetResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgAgainBetResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RedAndBlack.MsgAgainBetResp";
  }
  protected:
  explicit MsgAgainBetResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RedAndBlack_2eproto);
    return ::descriptor_table_RedAndBlack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgainBetInfoFieldNumber = 2,
    kChairIdFieldNumber = 1,
  };
  // .RedAndBlack.MsgAgainBet again_bet_info = 2;
  bool has_again_bet_info() const;
  private:
  bool _internal_has_again_bet_info() const;
  public:
  void clear_again_bet_info();
  const ::RedAndBlack::MsgAgainBet& again_bet_info() const;
  ::RedAndBlack::MsgAgainBet* release_again_bet_info();
  ::RedAndBlack::MsgAgainBet* mutable_again_bet_info();
  void set_allocated_again_bet_info(::RedAndBlack::MsgAgainBet* again_bet_info);
  private:
  const ::RedAndBlack::MsgAgainBet& _internal_again_bet_info() const;
  ::RedAndBlack::MsgAgainBet* _internal_mutable_again_bet_info();
  public:
  void unsafe_arena_set_allocated_again_bet_info(
      ::RedAndBlack::MsgAgainBet* again_bet_info);
  ::RedAndBlack::MsgAgainBet* unsafe_arena_release_again_bet_info();

  // int32 chair_id = 1;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RedAndBlack.MsgAgainBetResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::RedAndBlack::MsgAgainBet* again_bet_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RedAndBlack_2eproto;
};
// -------------------------------------------------------------------

class MsgWinMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RedAndBlack.MsgWinMsg) */ {
 public:
  inline MsgWinMsg() : MsgWinMsg(nullptr) {}
  virtual ~MsgWinMsg();

  MsgWinMsg(const MsgWinMsg& from);
  MsgWinMsg(MsgWinMsg&& from) noexcept
    : MsgWinMsg() {
    *this = ::std::move(from);
  }

  inline MsgWinMsg& operator=(const MsgWinMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgWinMsg& operator=(MsgWinMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgWinMsg& default_instance();

  static inline const MsgWinMsg* internal_default_instance() {
    return reinterpret_cast<const MsgWinMsg*>(
               &_MsgWinMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MsgWinMsg& a, MsgWinMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgWinMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgWinMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgWinMsg* New() const final {
    return CreateMaybeMessage<MsgWinMsg>(nullptr);
  }

  MsgWinMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgWinMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgWinMsg& from);
  void MergeFrom(const MsgWinMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgWinMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RedAndBlack.MsgWinMsg";
  }
  protected:
  explicit MsgWinMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RedAndBlack_2eproto);
    return ::descriptor_table_RedAndBlack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoldFieldNumber = 2,
    kChairIdFieldNumber = 1,
  };
  // int64 gold = 2;
  void clear_gold();
  ::PROTOBUF_NAMESPACE_ID::int64 gold() const;
  void set_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gold() const;
  void _internal_set_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 chair_id = 1;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RedAndBlack.MsgWinMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 gold_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RedAndBlack_2eproto;
};
// -------------------------------------------------------------------

class MsgResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RedAndBlack.MsgResult) */ {
 public:
  inline MsgResult() : MsgResult(nullptr) {}
  virtual ~MsgResult();

  MsgResult(const MsgResult& from);
  MsgResult(MsgResult&& from) noexcept
    : MsgResult() {
    *this = ::std::move(from);
  }

  inline MsgResult& operator=(const MsgResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgResult& operator=(MsgResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgResult& default_instance();

  static inline const MsgResult* internal_default_instance() {
    return reinterpret_cast<const MsgResult*>(
               &_MsgResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MsgResult& a, MsgResult& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgResult* New() const final {
    return CreateMaybeMessage<MsgResult>(nullptr);
  }

  MsgResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgResult& from);
  void MergeFrom(const MsgResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RedAndBlack.MsgResult";
  }
  protected:
  explicit MsgResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RedAndBlack_2eproto);
    return ::descriptor_table_RedAndBlack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinMsgFieldNumber = 1,
    kCardFieldNumber = 2,
    kCardTypeFieldNumber = 3,
    kResultFieldNumber = 4,
  };
  // repeated .RedAndBlack.MsgWinMsg win_msg = 1;
  int win_msg_size() const;
  private:
  int _internal_win_msg_size() const;
  public:
  void clear_win_msg();
  ::RedAndBlack::MsgWinMsg* mutable_win_msg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RedAndBlack::MsgWinMsg >*
      mutable_win_msg();
  private:
  const ::RedAndBlack::MsgWinMsg& _internal_win_msg(int index) const;
  ::RedAndBlack::MsgWinMsg* _internal_add_win_msg();
  public:
  const ::RedAndBlack::MsgWinMsg& win_msg(int index) const;
  ::RedAndBlack::MsgWinMsg* add_win_msg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RedAndBlack::MsgWinMsg >&
      win_msg() const;

  // repeated int32 card = 2;
  int card_size() const;
  private:
  int _internal_card_size() const;
  public:
  void clear_card();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_card(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_card() const;
  void _internal_add_card(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_card();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 card(int index) const;
  void set_card(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_card(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      card() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_card();

  // repeated int32 card_type = 3;
  int card_type_size() const;
  private:
  int _internal_card_type_size() const;
  public:
  void clear_card_type();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_card_type(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_card_type() const;
  void _internal_add_card_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_card_type();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 card_type(int index) const;
  void set_card_type(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_card_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      card_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_card_type();

  // int32 result = 4;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RedAndBlack.MsgResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RedAndBlack::MsgWinMsg > win_msg_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > card_;
  mutable std::atomic<int> _card_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > card_type_;
  mutable std::atomic<int> _card_type_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RedAndBlack_2eproto;
};
// -------------------------------------------------------------------

class MsgTotalBet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RedAndBlack.MsgTotalBet) */ {
 public:
  inline MsgTotalBet() : MsgTotalBet(nullptr) {}
  virtual ~MsgTotalBet();

  MsgTotalBet(const MsgTotalBet& from);
  MsgTotalBet(MsgTotalBet&& from) noexcept
    : MsgTotalBet() {
    *this = ::std::move(from);
  }

  inline MsgTotalBet& operator=(const MsgTotalBet& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgTotalBet& operator=(MsgTotalBet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgTotalBet& default_instance();

  static inline const MsgTotalBet* internal_default_instance() {
    return reinterpret_cast<const MsgTotalBet*>(
               &_MsgTotalBet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MsgTotalBet& a, MsgTotalBet& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgTotalBet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgTotalBet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgTotalBet* New() const final {
    return CreateMaybeMessage<MsgTotalBet>(nullptr);
  }

  MsgTotalBet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgTotalBet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgTotalBet& from);
  void MergeFrom(const MsgTotalBet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgTotalBet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RedAndBlack.MsgTotalBet";
  }
  protected:
  explicit MsgTotalBet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RedAndBlack_2eproto);
    return ::descriptor_table_RedAndBlack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBetFieldNumber = 2,
    kGoldFieldNumber = 3,
    kChairIdFieldNumber = 1,
  };
  // repeated int32 bet = 2;
  int bet_size() const;
  private:
  int _internal_bet_size() const;
  public:
  void clear_bet();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bet(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_bet() const;
  void _internal_add_bet(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_bet();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 bet(int index) const;
  void set_bet(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_bet(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      bet() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_bet();

  // repeated int64 gold = 3;
  int gold_size() const;
  private:
  int _internal_gold_size() const;
  public:
  void clear_gold();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gold(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_gold() const;
  void _internal_add_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_gold();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 gold(int index) const;
  void set_gold(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      gold() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_gold();

  // int32 chair_id = 1;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RedAndBlack.MsgTotalBet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > bet_;
  mutable std::atomic<int> _bet_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > gold_;
  mutable std::atomic<int> _gold_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RedAndBlack_2eproto;
};
// -------------------------------------------------------------------

class MsgBetRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RedAndBlack.MsgBetRecord) */ {
 public:
  inline MsgBetRecord() : MsgBetRecord(nullptr) {}
  virtual ~MsgBetRecord();

  MsgBetRecord(const MsgBetRecord& from);
  MsgBetRecord(MsgBetRecord&& from) noexcept
    : MsgBetRecord() {
    *this = ::std::move(from);
  }

  inline MsgBetRecord& operator=(const MsgBetRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgBetRecord& operator=(MsgBetRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgBetRecord& default_instance();

  static inline const MsgBetRecord* internal_default_instance() {
    return reinterpret_cast<const MsgBetRecord*>(
               &_MsgBetRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MsgBetRecord& a, MsgBetRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgBetRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgBetRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgBetRecord* New() const final {
    return CreateMaybeMessage<MsgBetRecord>(nullptr);
  }

  MsgBetRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgBetRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgBetRecord& from);
  void MergeFrom(const MsgBetRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgBetRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RedAndBlack.MsgBetRecord";
  }
  protected:
  explicit MsgBetRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RedAndBlack_2eproto);
    return ::descriptor_table_RedAndBlack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBetRecordFieldNumber = 1,
  };
  // repeated .RedAndBlack.MsgTotalBet bet_record = 1;
  int bet_record_size() const;
  private:
  int _internal_bet_record_size() const;
  public:
  void clear_bet_record();
  ::RedAndBlack::MsgTotalBet* mutable_bet_record(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RedAndBlack::MsgTotalBet >*
      mutable_bet_record();
  private:
  const ::RedAndBlack::MsgTotalBet& _internal_bet_record(int index) const;
  ::RedAndBlack::MsgTotalBet* _internal_add_bet_record();
  public:
  const ::RedAndBlack::MsgTotalBet& bet_record(int index) const;
  ::RedAndBlack::MsgTotalBet* add_bet_record();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RedAndBlack::MsgTotalBet >&
      bet_record() const;

  // @@protoc_insertion_point(class_scope:RedAndBlack.MsgBetRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RedAndBlack::MsgTotalBet > bet_record_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RedAndBlack_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgRecord

// int32 result = 1;
inline void MsgRecord::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRecord::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRecord::result() const {
  // @@protoc_insertion_point(field_get:RedAndBlack.MsgRecord.result)
  return _internal_result();
}
inline void MsgRecord::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void MsgRecord::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:RedAndBlack.MsgRecord.result)
}

// int32 card_type = 2;
inline void MsgRecord::clear_card_type() {
  card_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRecord::_internal_card_type() const {
  return card_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRecord::card_type() const {
  // @@protoc_insertion_point(field_get:RedAndBlack.MsgRecord.card_type)
  return _internal_card_type();
}
inline void MsgRecord::_internal_set_card_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  card_type_ = value;
}
inline void MsgRecord::set_card_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_card_type(value);
  // @@protoc_insertion_point(field_set:RedAndBlack.MsgRecord.card_type)
}

// -------------------------------------------------------------------

// MsgSceneInfo

// repeated int32 bet = 1;
inline int MsgSceneInfo::_internal_bet_size() const {
  return bet_.size();
}
inline int MsgSceneInfo::bet_size() const {
  return _internal_bet_size();
}
inline void MsgSceneInfo::clear_bet() {
  bet_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::_internal_bet(int index) const {
  return bet_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::bet(int index) const {
  // @@protoc_insertion_point(field_get:RedAndBlack.MsgSceneInfo.bet)
  return _internal_bet(index);
}
inline void MsgSceneInfo::set_bet(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  bet_.Set(index, value);
  // @@protoc_insertion_point(field_set:RedAndBlack.MsgSceneInfo.bet)
}
inline void MsgSceneInfo::_internal_add_bet(::PROTOBUF_NAMESPACE_ID::int32 value) {
  bet_.Add(value);
}
inline void MsgSceneInfo::add_bet(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_bet(value);
  // @@protoc_insertion_point(field_add:RedAndBlack.MsgSceneInfo.bet)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MsgSceneInfo::_internal_bet() const {
  return bet_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MsgSceneInfo::bet() const {
  // @@protoc_insertion_point(field_list:RedAndBlack.MsgSceneInfo.bet)
  return _internal_bet();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MsgSceneInfo::_internal_mutable_bet() {
  return &bet_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MsgSceneInfo::mutable_bet() {
  // @@protoc_insertion_point(field_mutable_list:RedAndBlack.MsgSceneInfo.bet)
  return _internal_mutable_bet();
}

// repeated .RedAndBlack.MsgRecord record = 2;
inline int MsgSceneInfo::_internal_record_size() const {
  return record_.size();
}
inline int MsgSceneInfo::record_size() const {
  return _internal_record_size();
}
inline void MsgSceneInfo::clear_record() {
  record_.Clear();
}
inline ::RedAndBlack::MsgRecord* MsgSceneInfo::mutable_record(int index) {
  // @@protoc_insertion_point(field_mutable:RedAndBlack.MsgSceneInfo.record)
  return record_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RedAndBlack::MsgRecord >*
MsgSceneInfo::mutable_record() {
  // @@protoc_insertion_point(field_mutable_list:RedAndBlack.MsgSceneInfo.record)
  return &record_;
}
inline const ::RedAndBlack::MsgRecord& MsgSceneInfo::_internal_record(int index) const {
  return record_.Get(index);
}
inline const ::RedAndBlack::MsgRecord& MsgSceneInfo::record(int index) const {
  // @@protoc_insertion_point(field_get:RedAndBlack.MsgSceneInfo.record)
  return _internal_record(index);
}
inline ::RedAndBlack::MsgRecord* MsgSceneInfo::_internal_add_record() {
  return record_.Add();
}
inline ::RedAndBlack::MsgRecord* MsgSceneInfo::add_record() {
  // @@protoc_insertion_point(field_add:RedAndBlack.MsgSceneInfo.record)
  return _internal_add_record();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RedAndBlack::MsgRecord >&
MsgSceneInfo::record() const {
  // @@protoc_insertion_point(field_list:RedAndBlack.MsgSceneInfo.record)
  return record_;
}

// repeated int32 bet_limit = 3;
inline int MsgSceneInfo::_internal_bet_limit_size() const {
  return bet_limit_.size();
}
inline int MsgSceneInfo::bet_limit_size() const {
  return _internal_bet_limit_size();
}
inline void MsgSceneInfo::clear_bet_limit() {
  bet_limit_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::_internal_bet_limit(int index) const {
  return bet_limit_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::bet_limit(int index) const {
  // @@protoc_insertion_point(field_get:RedAndBlack.MsgSceneInfo.bet_limit)
  return _internal_bet_limit(index);
}
inline void MsgSceneInfo::set_bet_limit(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  bet_limit_.Set(index, value);
  // @@protoc_insertion_point(field_set:RedAndBlack.MsgSceneInfo.bet_limit)
}
inline void MsgSceneInfo::_internal_add_bet_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  bet_limit_.Add(value);
}
inline void MsgSceneInfo::add_bet_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_bet_limit(value);
  // @@protoc_insertion_point(field_add:RedAndBlack.MsgSceneInfo.bet_limit)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MsgSceneInfo::_internal_bet_limit() const {
  return bet_limit_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MsgSceneInfo::bet_limit() const {
  // @@protoc_insertion_point(field_list:RedAndBlack.MsgSceneInfo.bet_limit)
  return _internal_bet_limit();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MsgSceneInfo::_internal_mutable_bet_limit() {
  return &bet_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MsgSceneInfo::mutable_bet_limit() {
  // @@protoc_insertion_point(field_mutable_list:RedAndBlack.MsgSceneInfo.bet_limit)
  return _internal_mutable_bet_limit();
}

// int32 player_limit = 4;
inline void MsgSceneInfo::clear_player_limit() {
  player_limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::_internal_player_limit() const {
  return player_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::player_limit() const {
  // @@protoc_insertion_point(field_get:RedAndBlack.MsgSceneInfo.player_limit)
  return _internal_player_limit();
}
inline void MsgSceneInfo::_internal_set_player_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_limit_ = value;
}
inline void MsgSceneInfo::set_player_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_limit(value);
  // @@protoc_insertion_point(field_set:RedAndBlack.MsgSceneInfo.player_limit)
}

// repeated int32 area_mul = 5;
inline int MsgSceneInfo::_internal_area_mul_size() const {
  return area_mul_.size();
}
inline int MsgSceneInfo::area_mul_size() const {
  return _internal_area_mul_size();
}
inline void MsgSceneInfo::clear_area_mul() {
  area_mul_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::_internal_area_mul(int index) const {
  return area_mul_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::area_mul(int index) const {
  // @@protoc_insertion_point(field_get:RedAndBlack.MsgSceneInfo.area_mul)
  return _internal_area_mul(index);
}
inline void MsgSceneInfo::set_area_mul(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  area_mul_.Set(index, value);
  // @@protoc_insertion_point(field_set:RedAndBlack.MsgSceneInfo.area_mul)
}
inline void MsgSceneInfo::_internal_add_area_mul(::PROTOBUF_NAMESPACE_ID::int32 value) {
  area_mul_.Add(value);
}
inline void MsgSceneInfo::add_area_mul(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_area_mul(value);
  // @@protoc_insertion_point(field_add:RedAndBlack.MsgSceneInfo.area_mul)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MsgSceneInfo::_internal_area_mul() const {
  return area_mul_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MsgSceneInfo::area_mul() const {
  // @@protoc_insertion_point(field_list:RedAndBlack.MsgSceneInfo.area_mul)
  return _internal_area_mul();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MsgSceneInfo::_internal_mutable_area_mul() {
  return &area_mul_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MsgSceneInfo::mutable_area_mul() {
  // @@protoc_insertion_point(field_mutable_list:RedAndBlack.MsgSceneInfo.area_mul)
  return _internal_mutable_area_mul();
}

// repeated int32 state_time = 6;
inline int MsgSceneInfo::_internal_state_time_size() const {
  return state_time_.size();
}
inline int MsgSceneInfo::state_time_size() const {
  return _internal_state_time_size();
}
inline void MsgSceneInfo::clear_state_time() {
  state_time_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::_internal_state_time(int index) const {
  return state_time_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::state_time(int index) const {
  // @@protoc_insertion_point(field_get:RedAndBlack.MsgSceneInfo.state_time)
  return _internal_state_time(index);
}
inline void MsgSceneInfo::set_state_time(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  state_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:RedAndBlack.MsgSceneInfo.state_time)
}
inline void MsgSceneInfo::_internal_add_state_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  state_time_.Add(value);
}
inline void MsgSceneInfo::add_state_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_state_time(value);
  // @@protoc_insertion_point(field_add:RedAndBlack.MsgSceneInfo.state_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MsgSceneInfo::_internal_state_time() const {
  return state_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MsgSceneInfo::state_time() const {
  // @@protoc_insertion_point(field_list:RedAndBlack.MsgSceneInfo.state_time)
  return _internal_state_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MsgSceneInfo::_internal_mutable_state_time() {
  return &state_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MsgSceneInfo::mutable_state_time() {
  // @@protoc_insertion_point(field_mutable_list:RedAndBlack.MsgSceneInfo.state_time)
  return _internal_mutable_state_time();
}

// int32 remain_time = 7;
inline void MsgSceneInfo::clear_remain_time() {
  remain_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::_internal_remain_time() const {
  return remain_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::remain_time() const {
  // @@protoc_insertion_point(field_get:RedAndBlack.MsgSceneInfo.remain_time)
  return _internal_remain_time();
}
inline void MsgSceneInfo::_internal_set_remain_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  remain_time_ = value;
}
inline void MsgSceneInfo::set_remain_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_remain_time(value);
  // @@protoc_insertion_point(field_set:RedAndBlack.MsgSceneInfo.remain_time)
}

// int32 state = 8;
inline void MsgSceneInfo::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::state() const {
  // @@protoc_insertion_point(field_get:RedAndBlack.MsgSceneInfo.state)
  return _internal_state();
}
inline void MsgSceneInfo::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void MsgSceneInfo::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:RedAndBlack.MsgSceneInfo.state)
}

// -------------------------------------------------------------------

// MsgBet

// int32 index = 1;
inline void MsgBet::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgBet::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgBet::index() const {
  // @@protoc_insertion_point(field_get:RedAndBlack.MsgBet.index)
  return _internal_index();
}
inline void MsgBet::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void MsgBet::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:RedAndBlack.MsgBet.index)
}

// int32 area = 2;
inline void MsgBet::clear_area() {
  area_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgBet::_internal_area() const {
  return area_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgBet::area() const {
  // @@protoc_insertion_point(field_get:RedAndBlack.MsgBet.area)
  return _internal_area();
}
inline void MsgBet::_internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  area_ = value;
}
inline void MsgBet::set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:RedAndBlack.MsgBet.area)
}

// -------------------------------------------------------------------

// MsgBetResp

// int32 chair_id = 1;
inline void MsgBetResp::clear_chair_id() {
  chair_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgBetResp::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgBetResp::chair_id() const {
  // @@protoc_insertion_point(field_get:RedAndBlack.MsgBetResp.chair_id)
  return _internal_chair_id();
}
inline void MsgBetResp::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_id_ = value;
}
inline void MsgBetResp::set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:RedAndBlack.MsgBetResp.chair_id)
}

// .RedAndBlack.MsgBet bet_info = 2;
inline bool MsgBetResp::_internal_has_bet_info() const {
  return this != internal_default_instance() && bet_info_ != nullptr;
}
inline bool MsgBetResp::has_bet_info() const {
  return _internal_has_bet_info();
}
inline void MsgBetResp::clear_bet_info() {
  if (GetArena() == nullptr && bet_info_ != nullptr) {
    delete bet_info_;
  }
  bet_info_ = nullptr;
}
inline const ::RedAndBlack::MsgBet& MsgBetResp::_internal_bet_info() const {
  const ::RedAndBlack::MsgBet* p = bet_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::RedAndBlack::MsgBet&>(
      ::RedAndBlack::_MsgBet_default_instance_);
}
inline const ::RedAndBlack::MsgBet& MsgBetResp::bet_info() const {
  // @@protoc_insertion_point(field_get:RedAndBlack.MsgBetResp.bet_info)
  return _internal_bet_info();
}
inline void MsgBetResp::unsafe_arena_set_allocated_bet_info(
    ::RedAndBlack::MsgBet* bet_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bet_info_);
  }
  bet_info_ = bet_info;
  if (bet_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RedAndBlack.MsgBetResp.bet_info)
}
inline ::RedAndBlack::MsgBet* MsgBetResp::release_bet_info() {
  
  ::RedAndBlack::MsgBet* temp = bet_info_;
  bet_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RedAndBlack::MsgBet* MsgBetResp::unsafe_arena_release_bet_info() {
  // @@protoc_insertion_point(field_release:RedAndBlack.MsgBetResp.bet_info)
  
  ::RedAndBlack::MsgBet* temp = bet_info_;
  bet_info_ = nullptr;
  return temp;
}
inline ::RedAndBlack::MsgBet* MsgBetResp::_internal_mutable_bet_info() {
  
  if (bet_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::RedAndBlack::MsgBet>(GetArena());
    bet_info_ = p;
  }
  return bet_info_;
}
inline ::RedAndBlack::MsgBet* MsgBetResp::mutable_bet_info() {
  // @@protoc_insertion_point(field_mutable:RedAndBlack.MsgBetResp.bet_info)
  return _internal_mutable_bet_info();
}
inline void MsgBetResp::set_allocated_bet_info(::RedAndBlack::MsgBet* bet_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bet_info_;
  }
  if (bet_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bet_info);
    if (message_arena != submessage_arena) {
      bet_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bet_info, submessage_arena);
    }
    
  } else {
    
  }
  bet_info_ = bet_info;
  // @@protoc_insertion_point(field_set_allocated:RedAndBlack.MsgBetResp.bet_info)
}

// -------------------------------------------------------------------

// MsgSingleAgainBet

// int32 index = 1;
inline void MsgSingleAgainBet::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSingleAgainBet::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSingleAgainBet::index() const {
  // @@protoc_insertion_point(field_get:RedAndBlack.MsgSingleAgainBet.index)
  return _internal_index();
}
inline void MsgSingleAgainBet::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void MsgSingleAgainBet::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:RedAndBlack.MsgSingleAgainBet.index)
}

// int32 area = 2;
inline void MsgSingleAgainBet::clear_area() {
  area_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSingleAgainBet::_internal_area() const {
  return area_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSingleAgainBet::area() const {
  // @@protoc_insertion_point(field_get:RedAndBlack.MsgSingleAgainBet.area)
  return _internal_area();
}
inline void MsgSingleAgainBet::_internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  area_ = value;
}
inline void MsgSingleAgainBet::set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:RedAndBlack.MsgSingleAgainBet.area)
}

// int32 count = 3;
inline void MsgSingleAgainBet::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSingleAgainBet::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSingleAgainBet::count() const {
  // @@protoc_insertion_point(field_get:RedAndBlack.MsgSingleAgainBet.count)
  return _internal_count();
}
inline void MsgSingleAgainBet::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void MsgSingleAgainBet::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:RedAndBlack.MsgSingleAgainBet.count)
}

// -------------------------------------------------------------------

// MsgAgainBet

// repeated .RedAndBlack.MsgSingleAgainBet again_bet_info = 1;
inline int MsgAgainBet::_internal_again_bet_info_size() const {
  return again_bet_info_.size();
}
inline int MsgAgainBet::again_bet_info_size() const {
  return _internal_again_bet_info_size();
}
inline void MsgAgainBet::clear_again_bet_info() {
  again_bet_info_.Clear();
}
inline ::RedAndBlack::MsgSingleAgainBet* MsgAgainBet::mutable_again_bet_info(int index) {
  // @@protoc_insertion_point(field_mutable:RedAndBlack.MsgAgainBet.again_bet_info)
  return again_bet_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RedAndBlack::MsgSingleAgainBet >*
MsgAgainBet::mutable_again_bet_info() {
  // @@protoc_insertion_point(field_mutable_list:RedAndBlack.MsgAgainBet.again_bet_info)
  return &again_bet_info_;
}
inline const ::RedAndBlack::MsgSingleAgainBet& MsgAgainBet::_internal_again_bet_info(int index) const {
  return again_bet_info_.Get(index);
}
inline const ::RedAndBlack::MsgSingleAgainBet& MsgAgainBet::again_bet_info(int index) const {
  // @@protoc_insertion_point(field_get:RedAndBlack.MsgAgainBet.again_bet_info)
  return _internal_again_bet_info(index);
}
inline ::RedAndBlack::MsgSingleAgainBet* MsgAgainBet::_internal_add_again_bet_info() {
  return again_bet_info_.Add();
}
inline ::RedAndBlack::MsgSingleAgainBet* MsgAgainBet::add_again_bet_info() {
  // @@protoc_insertion_point(field_add:RedAndBlack.MsgAgainBet.again_bet_info)
  return _internal_add_again_bet_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RedAndBlack::MsgSingleAgainBet >&
MsgAgainBet::again_bet_info() const {
  // @@protoc_insertion_point(field_list:RedAndBlack.MsgAgainBet.again_bet_info)
  return again_bet_info_;
}

// -------------------------------------------------------------------

// MsgAgainBetResp

// int32 chair_id = 1;
inline void MsgAgainBetResp::clear_chair_id() {
  chair_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgAgainBetResp::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgAgainBetResp::chair_id() const {
  // @@protoc_insertion_point(field_get:RedAndBlack.MsgAgainBetResp.chair_id)
  return _internal_chair_id();
}
inline void MsgAgainBetResp::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_id_ = value;
}
inline void MsgAgainBetResp::set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:RedAndBlack.MsgAgainBetResp.chair_id)
}

// .RedAndBlack.MsgAgainBet again_bet_info = 2;
inline bool MsgAgainBetResp::_internal_has_again_bet_info() const {
  return this != internal_default_instance() && again_bet_info_ != nullptr;
}
inline bool MsgAgainBetResp::has_again_bet_info() const {
  return _internal_has_again_bet_info();
}
inline void MsgAgainBetResp::clear_again_bet_info() {
  if (GetArena() == nullptr && again_bet_info_ != nullptr) {
    delete again_bet_info_;
  }
  again_bet_info_ = nullptr;
}
inline const ::RedAndBlack::MsgAgainBet& MsgAgainBetResp::_internal_again_bet_info() const {
  const ::RedAndBlack::MsgAgainBet* p = again_bet_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::RedAndBlack::MsgAgainBet&>(
      ::RedAndBlack::_MsgAgainBet_default_instance_);
}
inline const ::RedAndBlack::MsgAgainBet& MsgAgainBetResp::again_bet_info() const {
  // @@protoc_insertion_point(field_get:RedAndBlack.MsgAgainBetResp.again_bet_info)
  return _internal_again_bet_info();
}
inline void MsgAgainBetResp::unsafe_arena_set_allocated_again_bet_info(
    ::RedAndBlack::MsgAgainBet* again_bet_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(again_bet_info_);
  }
  again_bet_info_ = again_bet_info;
  if (again_bet_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RedAndBlack.MsgAgainBetResp.again_bet_info)
}
inline ::RedAndBlack::MsgAgainBet* MsgAgainBetResp::release_again_bet_info() {
  
  ::RedAndBlack::MsgAgainBet* temp = again_bet_info_;
  again_bet_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RedAndBlack::MsgAgainBet* MsgAgainBetResp::unsafe_arena_release_again_bet_info() {
  // @@protoc_insertion_point(field_release:RedAndBlack.MsgAgainBetResp.again_bet_info)
  
  ::RedAndBlack::MsgAgainBet* temp = again_bet_info_;
  again_bet_info_ = nullptr;
  return temp;
}
inline ::RedAndBlack::MsgAgainBet* MsgAgainBetResp::_internal_mutable_again_bet_info() {
  
  if (again_bet_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::RedAndBlack::MsgAgainBet>(GetArena());
    again_bet_info_ = p;
  }
  return again_bet_info_;
}
inline ::RedAndBlack::MsgAgainBet* MsgAgainBetResp::mutable_again_bet_info() {
  // @@protoc_insertion_point(field_mutable:RedAndBlack.MsgAgainBetResp.again_bet_info)
  return _internal_mutable_again_bet_info();
}
inline void MsgAgainBetResp::set_allocated_again_bet_info(::RedAndBlack::MsgAgainBet* again_bet_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete again_bet_info_;
  }
  if (again_bet_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(again_bet_info);
    if (message_arena != submessage_arena) {
      again_bet_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, again_bet_info, submessage_arena);
    }
    
  } else {
    
  }
  again_bet_info_ = again_bet_info;
  // @@protoc_insertion_point(field_set_allocated:RedAndBlack.MsgAgainBetResp.again_bet_info)
}

// -------------------------------------------------------------------

// MsgWinMsg

// int32 chair_id = 1;
inline void MsgWinMsg::clear_chair_id() {
  chair_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgWinMsg::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgWinMsg::chair_id() const {
  // @@protoc_insertion_point(field_get:RedAndBlack.MsgWinMsg.chair_id)
  return _internal_chair_id();
}
inline void MsgWinMsg::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_id_ = value;
}
inline void MsgWinMsg::set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:RedAndBlack.MsgWinMsg.chair_id)
}

// int64 gold = 2;
inline void MsgWinMsg::clear_gold() {
  gold_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgWinMsg::_internal_gold() const {
  return gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgWinMsg::gold() const {
  // @@protoc_insertion_point(field_get:RedAndBlack.MsgWinMsg.gold)
  return _internal_gold();
}
inline void MsgWinMsg::_internal_set_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gold_ = value;
}
inline void MsgWinMsg::set_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:RedAndBlack.MsgWinMsg.gold)
}

// -------------------------------------------------------------------

// MsgResult

// repeated .RedAndBlack.MsgWinMsg win_msg = 1;
inline int MsgResult::_internal_win_msg_size() const {
  return win_msg_.size();
}
inline int MsgResult::win_msg_size() const {
  return _internal_win_msg_size();
}
inline void MsgResult::clear_win_msg() {
  win_msg_.Clear();
}
inline ::RedAndBlack::MsgWinMsg* MsgResult::mutable_win_msg(int index) {
  // @@protoc_insertion_point(field_mutable:RedAndBlack.MsgResult.win_msg)
  return win_msg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RedAndBlack::MsgWinMsg >*
MsgResult::mutable_win_msg() {
  // @@protoc_insertion_point(field_mutable_list:RedAndBlack.MsgResult.win_msg)
  return &win_msg_;
}
inline const ::RedAndBlack::MsgWinMsg& MsgResult::_internal_win_msg(int index) const {
  return win_msg_.Get(index);
}
inline const ::RedAndBlack::MsgWinMsg& MsgResult::win_msg(int index) const {
  // @@protoc_insertion_point(field_get:RedAndBlack.MsgResult.win_msg)
  return _internal_win_msg(index);
}
inline ::RedAndBlack::MsgWinMsg* MsgResult::_internal_add_win_msg() {
  return win_msg_.Add();
}
inline ::RedAndBlack::MsgWinMsg* MsgResult::add_win_msg() {
  // @@protoc_insertion_point(field_add:RedAndBlack.MsgResult.win_msg)
  return _internal_add_win_msg();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RedAndBlack::MsgWinMsg >&
MsgResult::win_msg() const {
  // @@protoc_insertion_point(field_list:RedAndBlack.MsgResult.win_msg)
  return win_msg_;
}

// repeated int32 card = 2;
inline int MsgResult::_internal_card_size() const {
  return card_.size();
}
inline int MsgResult::card_size() const {
  return _internal_card_size();
}
inline void MsgResult::clear_card() {
  card_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgResult::_internal_card(int index) const {
  return card_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgResult::card(int index) const {
  // @@protoc_insertion_point(field_get:RedAndBlack.MsgResult.card)
  return _internal_card(index);
}
inline void MsgResult::set_card(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  card_.Set(index, value);
  // @@protoc_insertion_point(field_set:RedAndBlack.MsgResult.card)
}
inline void MsgResult::_internal_add_card(::PROTOBUF_NAMESPACE_ID::int32 value) {
  card_.Add(value);
}
inline void MsgResult::add_card(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_card(value);
  // @@protoc_insertion_point(field_add:RedAndBlack.MsgResult.card)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MsgResult::_internal_card() const {
  return card_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MsgResult::card() const {
  // @@protoc_insertion_point(field_list:RedAndBlack.MsgResult.card)
  return _internal_card();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MsgResult::_internal_mutable_card() {
  return &card_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MsgResult::mutable_card() {
  // @@protoc_insertion_point(field_mutable_list:RedAndBlack.MsgResult.card)
  return _internal_mutable_card();
}

// repeated int32 card_type = 3;
inline int MsgResult::_internal_card_type_size() const {
  return card_type_.size();
}
inline int MsgResult::card_type_size() const {
  return _internal_card_type_size();
}
inline void MsgResult::clear_card_type() {
  card_type_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgResult::_internal_card_type(int index) const {
  return card_type_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgResult::card_type(int index) const {
  // @@protoc_insertion_point(field_get:RedAndBlack.MsgResult.card_type)
  return _internal_card_type(index);
}
inline void MsgResult::set_card_type(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  card_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:RedAndBlack.MsgResult.card_type)
}
inline void MsgResult::_internal_add_card_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  card_type_.Add(value);
}
inline void MsgResult::add_card_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_card_type(value);
  // @@protoc_insertion_point(field_add:RedAndBlack.MsgResult.card_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MsgResult::_internal_card_type() const {
  return card_type_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MsgResult::card_type() const {
  // @@protoc_insertion_point(field_list:RedAndBlack.MsgResult.card_type)
  return _internal_card_type();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MsgResult::_internal_mutable_card_type() {
  return &card_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MsgResult::mutable_card_type() {
  // @@protoc_insertion_point(field_mutable_list:RedAndBlack.MsgResult.card_type)
  return _internal_mutable_card_type();
}

// int32 result = 4;
inline void MsgResult::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgResult::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgResult::result() const {
  // @@protoc_insertion_point(field_get:RedAndBlack.MsgResult.result)
  return _internal_result();
}
inline void MsgResult::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void MsgResult::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:RedAndBlack.MsgResult.result)
}

// -------------------------------------------------------------------

// MsgTotalBet

// int32 chair_id = 1;
inline void MsgTotalBet::clear_chair_id() {
  chair_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgTotalBet::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgTotalBet::chair_id() const {
  // @@protoc_insertion_point(field_get:RedAndBlack.MsgTotalBet.chair_id)
  return _internal_chair_id();
}
inline void MsgTotalBet::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_id_ = value;
}
inline void MsgTotalBet::set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:RedAndBlack.MsgTotalBet.chair_id)
}

// repeated int32 bet = 2;
inline int MsgTotalBet::_internal_bet_size() const {
  return bet_.size();
}
inline int MsgTotalBet::bet_size() const {
  return _internal_bet_size();
}
inline void MsgTotalBet::clear_bet() {
  bet_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgTotalBet::_internal_bet(int index) const {
  return bet_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgTotalBet::bet(int index) const {
  // @@protoc_insertion_point(field_get:RedAndBlack.MsgTotalBet.bet)
  return _internal_bet(index);
}
inline void MsgTotalBet::set_bet(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  bet_.Set(index, value);
  // @@protoc_insertion_point(field_set:RedAndBlack.MsgTotalBet.bet)
}
inline void MsgTotalBet::_internal_add_bet(::PROTOBUF_NAMESPACE_ID::int32 value) {
  bet_.Add(value);
}
inline void MsgTotalBet::add_bet(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_bet(value);
  // @@protoc_insertion_point(field_add:RedAndBlack.MsgTotalBet.bet)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MsgTotalBet::_internal_bet() const {
  return bet_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MsgTotalBet::bet() const {
  // @@protoc_insertion_point(field_list:RedAndBlack.MsgTotalBet.bet)
  return _internal_bet();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MsgTotalBet::_internal_mutable_bet() {
  return &bet_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MsgTotalBet::mutable_bet() {
  // @@protoc_insertion_point(field_mutable_list:RedAndBlack.MsgTotalBet.bet)
  return _internal_mutable_bet();
}

// repeated int64 gold = 3;
inline int MsgTotalBet::_internal_gold_size() const {
  return gold_.size();
}
inline int MsgTotalBet::gold_size() const {
  return _internal_gold_size();
}
inline void MsgTotalBet::clear_gold() {
  gold_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgTotalBet::_internal_gold(int index) const {
  return gold_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgTotalBet::gold(int index) const {
  // @@protoc_insertion_point(field_get:RedAndBlack.MsgTotalBet.gold)
  return _internal_gold(index);
}
inline void MsgTotalBet::set_gold(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  gold_.Set(index, value);
  // @@protoc_insertion_point(field_set:RedAndBlack.MsgTotalBet.gold)
}
inline void MsgTotalBet::_internal_add_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  gold_.Add(value);
}
inline void MsgTotalBet::add_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_gold(value);
  // @@protoc_insertion_point(field_add:RedAndBlack.MsgTotalBet.gold)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
MsgTotalBet::_internal_gold() const {
  return gold_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
MsgTotalBet::gold() const {
  // @@protoc_insertion_point(field_list:RedAndBlack.MsgTotalBet.gold)
  return _internal_gold();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
MsgTotalBet::_internal_mutable_gold() {
  return &gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
MsgTotalBet::mutable_gold() {
  // @@protoc_insertion_point(field_mutable_list:RedAndBlack.MsgTotalBet.gold)
  return _internal_mutable_gold();
}

// -------------------------------------------------------------------

// MsgBetRecord

// repeated .RedAndBlack.MsgTotalBet bet_record = 1;
inline int MsgBetRecord::_internal_bet_record_size() const {
  return bet_record_.size();
}
inline int MsgBetRecord::bet_record_size() const {
  return _internal_bet_record_size();
}
inline void MsgBetRecord::clear_bet_record() {
  bet_record_.Clear();
}
inline ::RedAndBlack::MsgTotalBet* MsgBetRecord::mutable_bet_record(int index) {
  // @@protoc_insertion_point(field_mutable:RedAndBlack.MsgBetRecord.bet_record)
  return bet_record_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RedAndBlack::MsgTotalBet >*
MsgBetRecord::mutable_bet_record() {
  // @@protoc_insertion_point(field_mutable_list:RedAndBlack.MsgBetRecord.bet_record)
  return &bet_record_;
}
inline const ::RedAndBlack::MsgTotalBet& MsgBetRecord::_internal_bet_record(int index) const {
  return bet_record_.Get(index);
}
inline const ::RedAndBlack::MsgTotalBet& MsgBetRecord::bet_record(int index) const {
  // @@protoc_insertion_point(field_get:RedAndBlack.MsgBetRecord.bet_record)
  return _internal_bet_record(index);
}
inline ::RedAndBlack::MsgTotalBet* MsgBetRecord::_internal_add_bet_record() {
  return bet_record_.Add();
}
inline ::RedAndBlack::MsgTotalBet* MsgBetRecord::add_bet_record() {
  // @@protoc_insertion_point(field_add:RedAndBlack.MsgBetRecord.bet_record)
  return _internal_add_bet_record();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RedAndBlack::MsgTotalBet >&
MsgBetRecord::bet_record() const {
  // @@protoc_insertion_point(field_list:RedAndBlack.MsgBetRecord.bet_record)
  return bet_record_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace RedAndBlack

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::RedAndBlack::EMsgIDSubGame> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RedAndBlack::EMsgIDSubGame>() {
  return ::RedAndBlack::EMsgIDSubGame_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RedAndBlack_2eproto
