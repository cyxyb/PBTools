// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlaneWar.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PlaneWar_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PlaneWar_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PlaneWar_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[303]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PlaneWar_2eproto;
namespace PlaneWar {
class Animation;
class AnimationDefaultTypeInternal;
extern AnimationDefaultTypeInternal _Animation_default_instance_;
class ArenaPieceInfo;
class ArenaPieceInfoDefaultTypeInternal;
extern ArenaPieceInfoDefaultTypeInternal _ArenaPieceInfo_default_instance_;
class BeeConfig;
class BeeConfigDefaultTypeInternal;
extern BeeConfigDefaultTypeInternal _BeeConfig_default_instance_;
class BeeInfo;
class BeeInfoDefaultTypeInternal;
extern BeeInfoDefaultTypeInternal _BeeInfo_default_instance_;
class BlackHoleInfo;
class BlackHoleInfoDefaultTypeInternal;
extern BlackHoleInfoDefaultTypeInternal _BlackHoleInfo_default_instance_;
class BuffInfo;
class BuffInfoDefaultTypeInternal;
extern BuffInfoDefaultTypeInternal _BuffInfo_default_instance_;
class CSBuyPlane;
class CSBuyPlaneDefaultTypeInternal;
extern CSBuyPlaneDefaultTypeInternal _CSBuyPlane_default_instance_;
class CSBuyWeapon;
class CSBuyWeaponDefaultTypeInternal;
extern CSBuyWeaponDefaultTypeInternal _CSBuyWeapon_default_instance_;
class CSBuyWings;
class CSBuyWingsDefaultTypeInternal;
extern CSBuyWingsDefaultTypeInternal _CSBuyWings_default_instance_;
class CSChangeTable;
class CSChangeTableDefaultTypeInternal;
extern CSChangeTableDefaultTypeInternal _CSChangeTable_default_instance_;
class CSChestSetAutoSelect;
class CSChestSetAutoSelectDefaultTypeInternal;
extern CSChestSetAutoSelectDefaultTypeInternal _CSChestSetAutoSelect_default_instance_;
class CSChestSetEnable;
class CSChestSetEnableDefaultTypeInternal;
extern CSChestSetEnableDefaultTypeInternal _CSChestSetEnable_default_instance_;
class CSClickStatic;
class CSClickStaticDefaultTypeInternal;
extern CSClickStaticDefaultTypeInternal _CSClickStatic_default_instance_;
class CSCommonRedEnvelopeInfo;
class CSCommonRedEnvelopeInfoDefaultTypeInternal;
extern CSCommonRedEnvelopeInfoDefaultTypeInternal _CSCommonRedEnvelopeInfo_default_instance_;
class CSConfirmWeaponExist;
class CSConfirmWeaponExistDefaultTypeInternal;
extern CSConfirmWeaponExistDefaultTypeInternal _CSConfirmWeaponExist_default_instance_;
class CSDrawPersonalPool;
class CSDrawPersonalPoolDefaultTypeInternal;
extern CSDrawPersonalPoolDefaultTypeInternal _CSDrawPersonalPool_default_instance_;
class CSExistUnReceiveRankReward;
class CSExistUnReceiveRankRewardDefaultTypeInternal;
extern CSExistUnReceiveRankRewardDefaultTypeInternal _CSExistUnReceiveRankReward_default_instance_;
class CSExplodeSettle;
class CSExplodeSettleDefaultTypeInternal;
extern CSExplodeSettleDefaultTypeInternal _CSExplodeSettle_default_instance_;
class CSExtraMul;
class CSExtraMulDefaultTypeInternal;
extern CSExtraMulDefaultTypeInternal _CSExtraMul_default_instance_;
class CSFallIntoBlackHole;
class CSFallIntoBlackHoleDefaultTypeInternal;
extern CSFallIntoBlackHoleDefaultTypeInternal _CSFallIntoBlackHole_default_instance_;
class CSGetGradeRankInfo;
class CSGetGradeRankInfoDefaultTypeInternal;
extern CSGetGradeRankInfoDefaultTypeInternal _CSGetGradeRankInfo_default_instance_;
class CSGetGradeRankList;
class CSGetGradeRankListDefaultTypeInternal;
extern CSGetGradeRankListDefaultTypeInternal _CSGetGradeRankList_default_instance_;
class CSGetGradeRewardInfo;
class CSGetGradeRewardInfoDefaultTypeInternal;
extern CSGetGradeRewardInfoDefaultTypeInternal _CSGetGradeRewardInfo_default_instance_;
class CSGetMatchTaskReward;
class CSGetMatchTaskRewardDefaultTypeInternal;
extern CSGetMatchTaskRewardDefaultTypeInternal _CSGetMatchTaskReward_default_instance_;
class CSGetPoolLuckyReward;
class CSGetPoolLuckyRewardDefaultTypeInternal;
extern CSGetPoolLuckyRewardDefaultTypeInternal _CSGetPoolLuckyReward_default_instance_;
class CSGetTableUserInfo;
class CSGetTableUserInfoDefaultTypeInternal;
extern CSGetTableUserInfoDefaultTypeInternal _CSGetTableUserInfo_default_instance_;
class CSGetTaskInfo;
class CSGetTaskInfoDefaultTypeInternal;
extern CSGetTaskInfoDefaultTypeInternal _CSGetTaskInfo_default_instance_;
class CSGetTaskReward;
class CSGetTaskRewardDefaultTypeInternal;
extern CSGetTaskRewardDefaultTypeInternal _CSGetTaskReward_default_instance_;
class CSGetVideo;
class CSGetVideoDefaultTypeInternal;
extern CSGetVideoDefaultTypeInternal _CSGetVideo_default_instance_;
class CSGiftList;
class CSGiftListDefaultTypeInternal;
extern CSGiftListDefaultTypeInternal _CSGiftList_default_instance_;
class CSGrantCommonRedEnvelopeRank;
class CSGrantCommonRedEnvelopeRankDefaultTypeInternal;
extern CSGrantCommonRedEnvelopeRankDefaultTypeInternal _CSGrantCommonRedEnvelopeRank_default_instance_;
class CSGrantCommonRedEnvelopeRecord;
class CSGrantCommonRedEnvelopeRecordDefaultTypeInternal;
extern CSGrantCommonRedEnvelopeRecordDefaultTypeInternal _CSGrantCommonRedEnvelopeRecord_default_instance_;
class CSHit;
class CSHitDefaultTypeInternal;
extern CSHitDefaultTypeInternal _CSHit_default_instance_;
class CSInteraction;
class CSInteractionDefaultTypeInternal;
extern CSInteractionDefaultTypeInternal _CSInteraction_default_instance_;
class CSLock;
class CSLockDefaultTypeInternal;
extern CSLockDefaultTypeInternal _CSLock_default_instance_;
class CSLogin;
class CSLoginDefaultTypeInternal;
extern CSLoginDefaultTypeInternal _CSLogin_default_instance_;
class CSLogout;
class CSLogoutDefaultTypeInternal;
extern CSLogoutDefaultTypeInternal _CSLogout_default_instance_;
class CSMatchBrief;
class CSMatchBriefDefaultTypeInternal;
extern CSMatchBriefDefaultTypeInternal _CSMatchBrief_default_instance_;
class CSMatchDetail;
class CSMatchDetailDefaultTypeInternal;
extern CSMatchDetailDefaultTypeInternal _CSMatchDetail_default_instance_;
class CSMatchReward;
class CSMatchRewardDefaultTypeInternal;
extern CSMatchRewardDefaultTypeInternal _CSMatchReward_default_instance_;
class CSModRatio;
class CSModRatioDefaultTypeInternal;
extern CSModRatioDefaultTypeInternal _CSModRatio_default_instance_;
class CSMonsterCall;
class CSMonsterCallDefaultTypeInternal;
extern CSMonsterCallDefaultTypeInternal _CSMonsterCall_default_instance_;
class CSMonsterDestory;
class CSMonsterDestoryDefaultTypeInternal;
extern CSMonsterDestoryDefaultTypeInternal _CSMonsterDestory_default_instance_;
class CSOpenCommonRedEnvelope;
class CSOpenCommonRedEnvelopeDefaultTypeInternal;
extern CSOpenCommonRedEnvelopeDefaultTypeInternal _CSOpenCommonRedEnvelope_default_instance_;
class CSOpenCommonRedEnvelopeRank;
class CSOpenCommonRedEnvelopeRankDefaultTypeInternal;
extern CSOpenCommonRedEnvelopeRankDefaultTypeInternal _CSOpenCommonRedEnvelopeRank_default_instance_;
class CSOpenCommonRedEnvelopeRecord;
class CSOpenCommonRedEnvelopeRecordDefaultTypeInternal;
extern CSOpenCommonRedEnvelopeRecordDefaultTypeInternal _CSOpenCommonRedEnvelopeRecord_default_instance_;
class CSOpenPiggyBank;
class CSOpenPiggyBankDefaultTypeInternal;
extern CSOpenPiggyBankDefaultTypeInternal _CSOpenPiggyBank_default_instance_;
class CSOpenRedEnvelope;
class CSOpenRedEnvelopeDefaultTypeInternal;
extern CSOpenRedEnvelopeDefaultTypeInternal _CSOpenRedEnvelope_default_instance_;
class CSPersonalPoolInfo;
class CSPersonalPoolInfoDefaultTypeInternal;
extern CSPersonalPoolInfoDefaultTypeInternal _CSPersonalPoolInfo_default_instance_;
class CSPiggyBankInfo;
class CSPiggyBankInfoDefaultTypeInternal;
extern CSPiggyBankInfoDefaultTypeInternal _CSPiggyBankInfo_default_instance_;
class CSPiggyBankOpenFinish;
class CSPiggyBankOpenFinishDefaultTypeInternal;
extern CSPiggyBankOpenFinishDefaultTypeInternal _CSPiggyBankOpenFinish_default_instance_;
class CSPlanePosSync;
class CSPlanePosSyncDefaultTypeInternal;
extern CSPlanePosSyncDefaultTypeInternal _CSPlanePosSync_default_instance_;
class CSPreHit;
class CSPreHitDefaultTypeInternal;
extern CSPreHitDefaultTypeInternal _CSPreHit_default_instance_;
class CSQueryPackageMarquee;
class CSQueryPackageMarqueeDefaultTypeInternal;
extern CSQueryPackageMarqueeDefaultTypeInternal _CSQueryPackageMarquee_default_instance_;
class CSQueryPackagePurchase;
class CSQueryPackagePurchaseDefaultTypeInternal;
extern CSQueryPackagePurchaseDefaultTypeInternal _CSQueryPackagePurchase_default_instance_;
class CSRankList;
class CSRankListDefaultTypeInternal;
extern CSRankListDefaultTypeInternal _CSRankList_default_instance_;
class CSRankSeasonStatus;
class CSRankSeasonStatusDefaultTypeInternal;
extern CSRankSeasonStatusDefaultTypeInternal _CSRankSeasonStatus_default_instance_;
class CSReady;
class CSReadyDefaultTypeInternal;
extern CSReadyDefaultTypeInternal _CSReady_default_instance_;
class CSReceiveExtraGradeReward;
class CSReceiveExtraGradeRewardDefaultTypeInternal;
extern CSReceiveExtraGradeRewardDefaultTypeInternal _CSReceiveExtraGradeReward_default_instance_;
class CSReceiveGradeReward;
class CSReceiveGradeRewardDefaultTypeInternal;
extern CSReceiveGradeRewardDefaultTypeInternal _CSReceiveGradeReward_default_instance_;
class CSRedEnvelopeInfo;
class CSRedEnvelopeInfoDefaultTypeInternal;
extern CSRedEnvelopeInfoDefaultTypeInternal _CSRedEnvelopeInfo_default_instance_;
class CSRedEnvelopePoint;
class CSRedEnvelopePointDefaultTypeInternal;
extern CSRedEnvelopePointDefaultTypeInternal _CSRedEnvelopePoint_default_instance_;
class CSScratchCardList;
class CSScratchCardListDefaultTypeInternal;
extern CSScratchCardListDefaultTypeInternal _CSScratchCardList_default_instance_;
class CSSelectChestReward;
class CSSelectChestRewardDefaultTypeInternal;
extern CSSelectChestRewardDefaultTypeInternal _CSSelectChestReward_default_instance_;
class CSSelectTitle;
class CSSelectTitleDefaultTypeInternal;
extern CSSelectTitleDefaultTypeInternal _CSSelectTitle_default_instance_;
class CSSelfVideoRecord;
class CSSelfVideoRecordDefaultTypeInternal;
extern CSSelfVideoRecordDefaultTypeInternal _CSSelfVideoRecord_default_instance_;
class CSSetPersonalPoolEnable;
class CSSetPersonalPoolEnableDefaultTypeInternal;
extern CSSetPersonalPoolEnableDefaultTypeInternal _CSSetPersonalPoolEnable_default_instance_;
class CSSetPlane;
class CSSetPlaneDefaultTypeInternal;
extern CSSetPlaneDefaultTypeInternal _CSSetPlane_default_instance_;
class CSSetWings;
class CSSetWingsDefaultTypeInternal;
extern CSSetWingsDefaultTypeInternal _CSSetWings_default_instance_;
class CSShot;
class CSShotDefaultTypeInternal;
extern CSShotDefaultTypeInternal _CSShot_default_instance_;
class CSStateForceSettle;
class CSStateForceSettleDefaultTypeInternal;
extern CSStateForceSettleDefaultTypeInternal _CSStateForceSettle_default_instance_;
class CSSwitchBackGround;
class CSSwitchBackGroundDefaultTypeInternal;
extern CSSwitchBackGroundDefaultTypeInternal _CSSwitchBackGround_default_instance_;
class CSSyncAnimation;
class CSSyncAnimationDefaultTypeInternal;
extern CSSyncAnimationDefaultTypeInternal _CSSyncAnimation_default_instance_;
class CSSyncBlackHolePos;
class CSSyncBlackHolePosDefaultTypeInternal;
extern CSSyncBlackHolePosDefaultTypeInternal _CSSyncBlackHolePos_default_instance_;
class CSSyncConfigs;
class CSSyncConfigsDefaultTypeInternal;
extern CSSyncConfigsDefaultTypeInternal _CSSyncConfigs_default_instance_;
class CSSyncPropsToHall;
class CSSyncPropsToHallDefaultTypeInternal;
extern CSSyncPropsToHallDefaultTypeInternal _CSSyncPropsToHall_default_instance_;
class CSSyncTextConfig;
class CSSyncTextConfigDefaultTypeInternal;
extern CSSyncTextConfigDefaultTypeInternal _CSSyncTextConfig_default_instance_;
class CSSyncWeaponState;
class CSSyncWeaponStateDefaultTypeInternal;
extern CSSyncWeaponStateDefaultTypeInternal _CSSyncWeaponState_default_instance_;
class CSTransform;
class CSTransformDefaultTypeInternal;
extern CSTransformDefaultTypeInternal _CSTransform_default_instance_;
class CSUpdateBulletData;
class CSUpdateBulletDataDefaultTypeInternal;
extern CSUpdateBulletDataDefaultTypeInternal _CSUpdateBulletData_default_instance_;
class CSUpgradePoolReward;
class CSUpgradePoolRewardDefaultTypeInternal;
extern CSUpgradePoolRewardDefaultTypeInternal _CSUpgradePoolReward_default_instance_;
class CSUpgradeRedEnvelope;
class CSUpgradeRedEnvelopeDefaultTypeInternal;
extern CSUpgradeRedEnvelopeDefaultTypeInternal _CSUpgradeRedEnvelope_default_instance_;
class CSUseMissile;
class CSUseMissileDefaultTypeInternal;
extern CSUseMissileDefaultTypeInternal _CSUseMissile_default_instance_;
class CSUseMissileBatch;
class CSUseMissileBatchDefaultTypeInternal;
extern CSUseMissileBatchDefaultTypeInternal _CSUseMissileBatch_default_instance_;
class CSUseRoulette;
class CSUseRouletteDefaultTypeInternal;
extern CSUseRouletteDefaultTypeInternal _CSUseRoulette_default_instance_;
class CSUseScratchCard;
class CSUseScratchCardDefaultTypeInternal;
extern CSUseScratchCardDefaultTypeInternal _CSUseScratchCard_default_instance_;
class CSVerifySeasonChange;
class CSVerifySeasonChangeDefaultTypeInternal;
extern CSVerifySeasonChangeDefaultTypeInternal _CSVerifySeasonChange_default_instance_;
class CSVideoRank;
class CSVideoRankDefaultTypeInternal;
extern CSVideoRankDefaultTypeInternal _CSVideoRank_default_instance_;
class CSWeaponEarnRecord;
class CSWeaponEarnRecordDefaultTypeInternal;
extern CSWeaponEarnRecordDefaultTypeInternal _CSWeaponEarnRecord_default_instance_;
class CSWeaponPieceInfo;
class CSWeaponPieceInfoDefaultTypeInternal;
extern CSWeaponPieceInfoDefaultTypeInternal _CSWeaponPieceInfo_default_instance_;
class ChestBrief;
class ChestBriefDefaultTypeInternal;
extern ChestBriefDefaultTypeInternal _ChestBrief_default_instance_;
class CommonPropInfo;
class CommonPropInfoDefaultTypeInternal;
extern CommonPropInfoDefaultTypeInternal _CommonPropInfo_default_instance_;
class CommonRedInfo;
class CommonRedInfoDefaultTypeInternal;
extern CommonRedInfoDefaultTypeInternal _CommonRedInfo_default_instance_;
class CommonReplayConfig;
class CommonReplayConfigDefaultTypeInternal;
extern CommonReplayConfigDefaultTypeInternal _CommonReplayConfig_default_instance_;
class ConnMonsterInfo;
class ConnMonsterInfoDefaultTypeInternal;
extern ConnMonsterInfoDefaultTypeInternal _ConnMonsterInfo_default_instance_;
class Decimal;
class DecimalDefaultTypeInternal;
extern DecimalDefaultTypeInternal _Decimal_default_instance_;
class Dice;
class DiceDefaultTypeInternal;
extern DiceDefaultTypeInternal _Dice_default_instance_;
class DiceConfig;
class DiceConfigDefaultTypeInternal;
extern DiceConfigDefaultTypeInternal _DiceConfig_default_instance_;
class DiceInfo;
class DiceInfoDefaultTypeInternal;
extern DiceInfoDefaultTypeInternal _DiceInfo_default_instance_;
class DiceJson;
class DiceJsonDefaultTypeInternal;
extern DiceJsonDefaultTypeInternal _DiceJson_default_instance_;
class DropBuff;
class DropBuffDefaultTypeInternal;
extern DropBuffDefaultTypeInternal _DropBuff_default_instance_;
class DropPoker;
class DropPokerDefaultTypeInternal;
extern DropPokerDefaultTypeInternal _DropPoker_default_instance_;
class EarnRecord;
class EarnRecordDefaultTypeInternal;
extern EarnRecordDefaultTypeInternal _EarnRecord_default_instance_;
class EffectInfo;
class EffectInfoDefaultTypeInternal;
extern EffectInfoDefaultTypeInternal _EffectInfo_default_instance_;
class ExtraGradeRewardInfo;
class ExtraGradeRewardInfoDefaultTypeInternal;
extern ExtraGradeRewardInfoDefaultTypeInternal _ExtraGradeRewardInfo_default_instance_;
class FakeTresureInfo;
class FakeTresureInfoDefaultTypeInternal;
extern FakeTresureInfoDefaultTypeInternal _FakeTresureInfo_default_instance_;
class FlameInfo;
class FlameInfoDefaultTypeInternal;
extern FlameInfoDefaultTypeInternal _FlameInfo_default_instance_;
class FormInfo;
class FormInfoDefaultTypeInternal;
extern FormInfoDefaultTypeInternal _FormInfo_default_instance_;
class FortuneConfig;
class FortuneConfigDefaultTypeInternal;
extern FortuneConfigDefaultTypeInternal _FortuneConfig_default_instance_;
class FortuneWheelInfo;
class FortuneWheelInfoDefaultTypeInternal;
extern FortuneWheelInfoDefaultTypeInternal _FortuneWheelInfo_default_instance_;
class FortuneWheelJson;
class FortuneWheelJsonDefaultTypeInternal;
extern FortuneWheelJsonDefaultTypeInternal _FortuneWheelJson_default_instance_;
class GiftInfo;
class GiftInfoDefaultTypeInternal;
extern GiftInfoDefaultTypeInternal _GiftInfo_default_instance_;
class GlobalReplayConfig;
class GlobalReplayConfigDefaultTypeInternal;
extern GlobalReplayConfigDefaultTypeInternal _GlobalReplayConfig_default_instance_;
class GlobalVideoInfo;
class GlobalVideoInfoDefaultTypeInternal;
extern GlobalVideoInfoDefaultTypeInternal _GlobalVideoInfo_default_instance_;
class GoldenToadJson;
class GoldenToadJsonDefaultTypeInternal;
extern GoldenToadJsonDefaultTypeInternal _GoldenToadJson_default_instance_;
class GradeRankConfig;
class GradeRankConfigDefaultTypeInternal;
extern GradeRankConfigDefaultTypeInternal _GradeRankConfig_default_instance_;
class GradeRankDetail;
class GradeRankDetailDefaultTypeInternal;
extern GradeRankDetailDefaultTypeInternal _GradeRankDetail_default_instance_;
class GradeRankInfo;
class GradeRankInfoDefaultTypeInternal;
extern GradeRankInfoDefaultTypeInternal _GradeRankInfo_default_instance_;
class GradeRewardDetail;
class GradeRewardDetailDefaultTypeInternal;
extern GradeRewardDetailDefaultTypeInternal _GradeRewardDetail_default_instance_;
class GradeRewardInfo;
class GradeRewardInfoDefaultTypeInternal;
extern GradeRewardInfoDefaultTypeInternal _GradeRewardInfo_default_instance_;
class GrantRankItem;
class GrantRankItemDefaultTypeInternal;
extern GrantRankItemDefaultTypeInternal _GrantRankItem_default_instance_;
class GrantRecord;
class GrantRecordDefaultTypeInternal;
extern GrantRecordDefaultTypeInternal _GrantRecord_default_instance_;
class GunInfo;
class GunInfoDefaultTypeInternal;
extern GunInfoDefaultTypeInternal _GunInfo_default_instance_;
class HitMode;
class HitModeDefaultTypeInternal;
extern HitModeDefaultTypeInternal _HitMode_default_instance_;
class InteractionItem;
class InteractionItemDefaultTypeInternal;
extern InteractionItemDefaultTypeInternal _InteractionItem_default_instance_;
class JumpHighArena;
class JumpHighArenaDefaultTypeInternal;
extern JumpHighArenaDefaultTypeInternal _JumpHighArena_default_instance_;
class LockInfo;
class LockInfoDefaultTypeInternal;
extern LockInfoDefaultTypeInternal _LockInfo_default_instance_;
class MatchRankInfo;
class MatchRankInfoDefaultTypeInternal;
extern MatchRankInfoDefaultTypeInternal _MatchRankInfo_default_instance_;
class MatchRewardItem;
class MatchRewardItemDefaultTypeInternal;
extern MatchRewardItemDefaultTypeInternal _MatchRewardItem_default_instance_;
class MatchSubInfo;
class MatchSubInfoDefaultTypeInternal;
extern MatchSubInfoDefaultTypeInternal _MatchSubInfo_default_instance_;
class MatchTask;
class MatchTaskDefaultTypeInternal;
extern MatchTaskDefaultTypeInternal _MatchTask_default_instance_;
class MissileFishListInfo;
class MissileFishListInfoDefaultTypeInternal;
extern MissileFishListInfoDefaultTypeInternal _MissileFishListInfo_default_instance_;
class MissileInfo;
class MissileInfoDefaultTypeInternal;
extern MissileInfoDefaultTypeInternal _MissileInfo_default_instance_;
class MonsterInfo;
class MonsterInfoDefaultTypeInternal;
extern MonsterInfoDefaultTypeInternal _MonsterInfo_default_instance_;
class MonsterPath;
class MonsterPathDefaultTypeInternal;
extern MonsterPathDefaultTypeInternal _MonsterPath_default_instance_;
class MyMatchReward;
class MyMatchRewardDefaultTypeInternal;
extern MyMatchRewardDefaultTypeInternal _MyMatchReward_default_instance_;
class MyRankInfo;
class MyRankInfoDefaultTypeInternal;
extern MyRankInfoDefaultTypeInternal _MyRankInfo_default_instance_;
class OpenChestReward;
class OpenChestRewardDefaultTypeInternal;
extern OpenChestRewardDefaultTypeInternal _OpenChestReward_default_instance_;
class OpenRankItem;
class OpenRankItemDefaultTypeInternal;
extern OpenRankItemDefaultTypeInternal _OpenRankItem_default_instance_;
class OpenRecord;
class OpenRecordDefaultTypeInternal;
extern OpenRecordDefaultTypeInternal _OpenRecord_default_instance_;
class OrderData;
class OrderDataDefaultTypeInternal;
extern OrderDataDefaultTypeInternal _OrderData_default_instance_;
class PackageMarquee;
class PackageMarqueeDefaultTypeInternal;
extern PackageMarqueeDefaultTypeInternal _PackageMarquee_default_instance_;
class PersonalPoolLevelInfo;
class PersonalPoolLevelInfoDefaultTypeInternal;
extern PersonalPoolLevelInfoDefaultTypeInternal _PersonalPoolLevelInfo_default_instance_;
class PersonalPoolLuckyInfo;
class PersonalPoolLuckyInfoDefaultTypeInternal;
extern PersonalPoolLuckyInfoDefaultTypeInternal _PersonalPoolLuckyInfo_default_instance_;
class PersonalPoolReward;
class PersonalPoolRewardDefaultTypeInternal;
extern PersonalPoolRewardDefaultTypeInternal _PersonalPoolReward_default_instance_;
class PersonalReplayConfig;
class PersonalReplayConfigDefaultTypeInternal;
extern PersonalReplayConfigDefaultTypeInternal _PersonalReplayConfig_default_instance_;
class PieceInfo;
class PieceInfoDefaultTypeInternal;
extern PieceInfoDefaultTypeInternal _PieceInfo_default_instance_;
class PiecesStackLimitInfo;
class PiecesStackLimitInfoDefaultTypeInternal;
extern PiecesStackLimitInfoDefaultTypeInternal _PiecesStackLimitInfo_default_instance_;
class PiggyInfo;
class PiggyInfoDefaultTypeInternal;
extern PiggyInfoDefaultTypeInternal _PiggyInfo_default_instance_;
class PiggyReward;
class PiggyRewardDefaultTypeInternal;
extern PiggyRewardDefaultTypeInternal _PiggyReward_default_instance_;
class PlaneInfo;
class PlaneInfoDefaultTypeInternal;
extern PlaneInfoDefaultTypeInternal _PlaneInfo_default_instance_;
class PlaneSpecEffect;
class PlaneSpecEffectDefaultTypeInternal;
extern PlaneSpecEffectDefaultTypeInternal _PlaneSpecEffect_default_instance_;
class PlayerInfo;
class PlayerInfoDefaultTypeInternal;
extern PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
class Poker;
class PokerDefaultTypeInternal;
extern PokerDefaultTypeInternal _Poker_default_instance_;
class PoolArenaLimit;
class PoolArenaLimitDefaultTypeInternal;
extern PoolArenaLimitDefaultTypeInternal _PoolArenaLimit_default_instance_;
class Pos;
class PosDefaultTypeInternal;
extern PosDefaultTypeInternal _Pos_default_instance_;
class PropsInfo;
class PropsInfoDefaultTypeInternal;
extern PropsInfoDefaultTypeInternal _PropsInfo_default_instance_;
class ProsInfo;
class ProsInfoDefaultTypeInternal;
extern ProsInfoDefaultTypeInternal _ProsInfo_default_instance_;
class PurchaseResult;
class PurchaseResultDefaultTypeInternal;
extern PurchaseResultDefaultTypeInternal _PurchaseResult_default_instance_;
class RankInfo;
class RankInfoDefaultTypeInternal;
extern RankInfoDefaultTypeInternal _RankInfo_default_instance_;
class RankReward;
class RankRewardDefaultTypeInternal;
extern RankRewardDefaultTypeInternal _RankReward_default_instance_;
class RankStatusInfo;
class RankStatusInfoDefaultTypeInternal;
extern RankStatusInfoDefaultTypeInternal _RankStatusInfo_default_instance_;
class RankWareConfig;
class RankWareConfigDefaultTypeInternal;
extern RankWareConfigDefaultTypeInternal _RankWareConfig_default_instance_;
class ReceiveReward;
class ReceiveRewardDefaultTypeInternal;
extern ReceiveRewardDefaultTypeInternal _ReceiveReward_default_instance_;
class RedInfo;
class RedInfoDefaultTypeInternal;
extern RedInfoDefaultTypeInternal _RedInfo_default_instance_;
class RedOpenInfo;
class RedOpenInfoDefaultTypeInternal;
extern RedOpenInfoDefaultTypeInternal _RedOpenInfo_default_instance_;
class RedRankPlayerInfo;
class RedRankPlayerInfoDefaultTypeInternal;
extern RedRankPlayerInfoDefaultTypeInternal _RedRankPlayerInfo_default_instance_;
class RedUpgradeInfo;
class RedUpgradeInfoDefaultTypeInternal;
extern RedUpgradeInfoDefaultTypeInternal _RedUpgradeInfo_default_instance_;
class ReplayConfig;
class ReplayConfigDefaultTypeInternal;
extern ReplayConfigDefaultTypeInternal _ReplayConfig_default_instance_;
class RoomInfo;
class RoomInfoDefaultTypeInternal;
extern RoomInfoDefaultTypeInternal _RoomInfo_default_instance_;
class Roulette;
class RouletteDefaultTypeInternal;
extern RouletteDefaultTypeInternal _Roulette_default_instance_;
class RouletteInfo;
class RouletteInfoDefaultTypeInternal;
extern RouletteInfoDefaultTypeInternal _RouletteInfo_default_instance_;
class SCActivityInfo;
class SCActivityInfoDefaultTypeInternal;
extern SCActivityInfoDefaultTypeInternal _SCActivityInfo_default_instance_;
class SCAddMissedBullet;
class SCAddMissedBulletDefaultTypeInternal;
extern SCAddMissedBulletDefaultTypeInternal _SCAddMissedBullet_default_instance_;
class SCBuyPlane;
class SCBuyPlaneDefaultTypeInternal;
extern SCBuyPlaneDefaultTypeInternal _SCBuyPlane_default_instance_;
class SCBuyWeapon;
class SCBuyWeaponDefaultTypeInternal;
extern SCBuyWeaponDefaultTypeInternal _SCBuyWeapon_default_instance_;
class SCBuyWings;
class SCBuyWingsDefaultTypeInternal;
extern SCBuyWingsDefaultTypeInternal _SCBuyWings_default_instance_;
class SCChangeTable;
class SCChangeTableDefaultTypeInternal;
extern SCChangeTableDefaultTypeInternal _SCChangeTable_default_instance_;
class SCChestConfig;
class SCChestConfigDefaultTypeInternal;
extern SCChestConfigDefaultTypeInternal _SCChestConfig_default_instance_;
class SCChestSetAutoSelect;
class SCChestSetAutoSelectDefaultTypeInternal;
extern SCChestSetAutoSelectDefaultTypeInternal _SCChestSetAutoSelect_default_instance_;
class SCChestSetEnable;
class SCChestSetEnableDefaultTypeInternal;
extern SCChestSetEnableDefaultTypeInternal _SCChestSetEnable_default_instance_;
class SCClickStatic;
class SCClickStaticDefaultTypeInternal;
extern SCClickStaticDefaultTypeInternal _SCClickStatic_default_instance_;
class SCCommonRedEnvelopeInfo;
class SCCommonRedEnvelopeInfoDefaultTypeInternal;
extern SCCommonRedEnvelopeInfoDefaultTypeInternal _SCCommonRedEnvelopeInfo_default_instance_;
class SCConfirmWeaponExist;
class SCConfirmWeaponExistDefaultTypeInternal;
extern SCConfirmWeaponExistDefaultTypeInternal _SCConfirmWeaponExist_default_instance_;
class SCExistUnReceiveRankReward;
class SCExistUnReceiveRankRewardDefaultTypeInternal;
extern SCExistUnReceiveRankRewardDefaultTypeInternal _SCExistUnReceiveRankReward_default_instance_;
class SCExplodeSettle;
class SCExplodeSettleDefaultTypeInternal;
extern SCExplodeSettleDefaultTypeInternal _SCExplodeSettle_default_instance_;
class SCExtraMul;
class SCExtraMulDefaultTypeInternal;
extern SCExtraMulDefaultTypeInternal _SCExtraMul_default_instance_;
class SCFallIntoBlackHole;
class SCFallIntoBlackHoleDefaultTypeInternal;
extern SCFallIntoBlackHoleDefaultTypeInternal _SCFallIntoBlackHole_default_instance_;
class SCGainNotify;
class SCGainNotifyDefaultTypeInternal;
extern SCGainNotifyDefaultTypeInternal _SCGainNotify_default_instance_;
class SCGainSettle;
class SCGainSettleDefaultTypeInternal;
extern SCGainSettleDefaultTypeInternal _SCGainSettle_default_instance_;
class SCGamePurchasePush;
class SCGamePurchasePushDefaultTypeInternal;
extern SCGamePurchasePushDefaultTypeInternal _SCGamePurchasePush_default_instance_;
class SCGetAnimations;
class SCGetAnimationsDefaultTypeInternal;
extern SCGetAnimationsDefaultTypeInternal _SCGetAnimations_default_instance_;
class SCGetGradeRankInfo;
class SCGetGradeRankInfoDefaultTypeInternal;
extern SCGetGradeRankInfoDefaultTypeInternal _SCGetGradeRankInfo_default_instance_;
class SCGetGradeRankList;
class SCGetGradeRankListDefaultTypeInternal;
extern SCGetGradeRankListDefaultTypeInternal _SCGetGradeRankList_default_instance_;
class SCGetGradeRewardInfo;
class SCGetGradeRewardInfoDefaultTypeInternal;
extern SCGetGradeRewardInfoDefaultTypeInternal _SCGetGradeRewardInfo_default_instance_;
class SCGetMatchTaskReward;
class SCGetMatchTaskRewardDefaultTypeInternal;
extern SCGetMatchTaskRewardDefaultTypeInternal _SCGetMatchTaskReward_default_instance_;
class SCGetPoolLuckyReward;
class SCGetPoolLuckyRewardDefaultTypeInternal;
extern SCGetPoolLuckyRewardDefaultTypeInternal _SCGetPoolLuckyReward_default_instance_;
class SCGetTableUserInfo;
class SCGetTableUserInfoDefaultTypeInternal;
extern SCGetTableUserInfoDefaultTypeInternal _SCGetTableUserInfo_default_instance_;
class SCGetTaskInfo;
class SCGetTaskInfoDefaultTypeInternal;
extern SCGetTaskInfoDefaultTypeInternal _SCGetTaskInfo_default_instance_;
class SCGetTaskReward;
class SCGetTaskRewardDefaultTypeInternal;
extern SCGetTaskRewardDefaultTypeInternal _SCGetTaskReward_default_instance_;
class SCGetVideo;
class SCGetVideoDefaultTypeInternal;
extern SCGetVideoDefaultTypeInternal _SCGetVideo_default_instance_;
class SCGiftExpireNotify;
class SCGiftExpireNotifyDefaultTypeInternal;
extern SCGiftExpireNotifyDefaultTypeInternal _SCGiftExpireNotify_default_instance_;
class SCGiftList;
class SCGiftListDefaultTypeInternal;
extern SCGiftListDefaultTypeInternal _SCGiftList_default_instance_;
class SCGrantCommonRedEnvelopeRank;
class SCGrantCommonRedEnvelopeRankDefaultTypeInternal;
extern SCGrantCommonRedEnvelopeRankDefaultTypeInternal _SCGrantCommonRedEnvelopeRank_default_instance_;
class SCGrantCommonRedEnvelopeRecord;
class SCGrantCommonRedEnvelopeRecordDefaultTypeInternal;
extern SCGrantCommonRedEnvelopeRecordDefaultTypeInternal _SCGrantCommonRedEnvelopeRecord_default_instance_;
class SCHit;
class SCHitDefaultTypeInternal;
extern SCHitDefaultTypeInternal _SCHit_default_instance_;
class SCInteraction;
class SCInteractionDefaultTypeInternal;
extern SCInteractionDefaultTypeInternal _SCInteraction_default_instance_;
class SCLock;
class SCLockDefaultTypeInternal;
extern SCLockDefaultTypeInternal _SCLock_default_instance_;
class SCLogin;
class SCLoginDefaultTypeInternal;
extern SCLoginDefaultTypeInternal _SCLogin_default_instance_;
class SCLogout;
class SCLogoutDefaultTypeInternal;
extern SCLogoutDefaultTypeInternal _SCLogout_default_instance_;
class SCMatchBrief;
class SCMatchBriefDefaultTypeInternal;
extern SCMatchBriefDefaultTypeInternal _SCMatchBrief_default_instance_;
class SCMatchDetail;
class SCMatchDetailDefaultTypeInternal;
extern SCMatchDetailDefaultTypeInternal _SCMatchDetail_default_instance_;
class SCMatchReward;
class SCMatchRewardDefaultTypeInternal;
extern SCMatchRewardDefaultTypeInternal _SCMatchReward_default_instance_;
class SCMatchRewardNotify;
class SCMatchRewardNotifyDefaultTypeInternal;
extern SCMatchRewardNotifyDefaultTypeInternal _SCMatchRewardNotify_default_instance_;
class SCModRatio;
class SCModRatioDefaultTypeInternal;
extern SCModRatioDefaultTypeInternal _SCModRatio_default_instance_;
class SCMonsterCall;
class SCMonsterCallDefaultTypeInternal;
extern SCMonsterCallDefaultTypeInternal _SCMonsterCall_default_instance_;
class SCMonsterDestory;
class SCMonsterDestoryDefaultTypeInternal;
extern SCMonsterDestoryDefaultTypeInternal _SCMonsterDestory_default_instance_;
class SCMonsterSpawn;
class SCMonsterSpawnDefaultTypeInternal;
extern SCMonsterSpawnDefaultTypeInternal _SCMonsterSpawn_default_instance_;
class SCNoticeHallProsChange;
class SCNoticeHallProsChangeDefaultTypeInternal;
extern SCNoticeHallProsChangeDefaultTypeInternal _SCNoticeHallProsChange_default_instance_;
class SCNoticeInfoChange;
class SCNoticeInfoChangeDefaultTypeInternal;
extern SCNoticeInfoChangeDefaultTypeInternal _SCNoticeInfoChange_default_instance_;
class SCNoticePropsOverdue;
class SCNoticePropsOverdueDefaultTypeInternal;
extern SCNoticePropsOverdueDefaultTypeInternal _SCNoticePropsOverdue_default_instance_;
class SCNoticeTimingMonster;
class SCNoticeTimingMonsterDefaultTypeInternal;
extern SCNoticeTimingMonsterDefaultTypeInternal _SCNoticeTimingMonster_default_instance_;
class SCOpenChest;
class SCOpenChestDefaultTypeInternal;
extern SCOpenChestDefaultTypeInternal _SCOpenChest_default_instance_;
class SCOpenCommonRedEnvelope;
class SCOpenCommonRedEnvelopeDefaultTypeInternal;
extern SCOpenCommonRedEnvelopeDefaultTypeInternal _SCOpenCommonRedEnvelope_default_instance_;
class SCOpenCommonRedEnvelopeRank;
class SCOpenCommonRedEnvelopeRankDefaultTypeInternal;
extern SCOpenCommonRedEnvelopeRankDefaultTypeInternal _SCOpenCommonRedEnvelopeRank_default_instance_;
class SCOpenCommonRedEnvelopeRecord;
class SCOpenCommonRedEnvelopeRecordDefaultTypeInternal;
extern SCOpenCommonRedEnvelopeRecordDefaultTypeInternal _SCOpenCommonRedEnvelopeRecord_default_instance_;
class SCOpenPiggyBank;
class SCOpenPiggyBankDefaultTypeInternal;
extern SCOpenPiggyBankDefaultTypeInternal _SCOpenPiggyBank_default_instance_;
class SCOpenRedEnvelope;
class SCOpenRedEnvelopeDefaultTypeInternal;
extern SCOpenRedEnvelopeDefaultTypeInternal _SCOpenRedEnvelope_default_instance_;
class SCPersonalPoolChangeNotify;
class SCPersonalPoolChangeNotifyDefaultTypeInternal;
extern SCPersonalPoolChangeNotifyDefaultTypeInternal _SCPersonalPoolChangeNotify_default_instance_;
class SCPersonalPoolInfo;
class SCPersonalPoolInfoDefaultTypeInternal;
extern SCPersonalPoolInfoDefaultTypeInternal _SCPersonalPoolInfo_default_instance_;
class SCPiggyBankChangeNotify;
class SCPiggyBankChangeNotifyDefaultTypeInternal;
extern SCPiggyBankChangeNotifyDefaultTypeInternal _SCPiggyBankChangeNotify_default_instance_;
class SCPiggyBankInfo;
class SCPiggyBankInfoDefaultTypeInternal;
extern SCPiggyBankInfoDefaultTypeInternal _SCPiggyBankInfo_default_instance_;
class SCPiggyBankOpenFinish;
class SCPiggyBankOpenFinishDefaultTypeInternal;
extern SCPiggyBankOpenFinishDefaultTypeInternal _SCPiggyBankOpenFinish_default_instance_;
class SCPlanePosSync;
class SCPlanePosSyncDefaultTypeInternal;
extern SCPlanePosSyncDefaultTypeInternal _SCPlanePosSync_default_instance_;
class SCPreHit;
class SCPreHitDefaultTypeInternal;
extern SCPreHitDefaultTypeInternal _SCPreHit_default_instance_;
class SCQueryPackageMarquee;
class SCQueryPackageMarqueeDefaultTypeInternal;
extern SCQueryPackageMarqueeDefaultTypeInternal _SCQueryPackageMarquee_default_instance_;
class SCQueryPackagePurchase;
class SCQueryPackagePurchaseDefaultTypeInternal;
extern SCQueryPackagePurchaseDefaultTypeInternal _SCQueryPackagePurchase_default_instance_;
class SCRankList;
class SCRankListDefaultTypeInternal;
extern SCRankListDefaultTypeInternal _SCRankList_default_instance_;
class SCRankSeasonStatus;
class SCRankSeasonStatusDefaultTypeInternal;
extern SCRankSeasonStatusDefaultTypeInternal _SCRankSeasonStatus_default_instance_;
class SCRankUpgrade;
class SCRankUpgradeDefaultTypeInternal;
extern SCRankUpgradeDefaultTypeInternal _SCRankUpgrade_default_instance_;
class SCReady;
class SCReadyDefaultTypeInternal;
extern SCReadyDefaultTypeInternal _SCReady_default_instance_;
class SCReceiveExtraGradeReward;
class SCReceiveExtraGradeRewardDefaultTypeInternal;
extern SCReceiveExtraGradeRewardDefaultTypeInternal _SCReceiveExtraGradeReward_default_instance_;
class SCReceiveGradeReward;
class SCReceiveGradeRewardDefaultTypeInternal;
extern SCReceiveGradeRewardDefaultTypeInternal _SCReceiveGradeReward_default_instance_;
class SCRedEnvelopeInfo;
class SCRedEnvelopeInfoDefaultTypeInternal;
extern SCRedEnvelopeInfoDefaultTypeInternal _SCRedEnvelopeInfo_default_instance_;
class SCRedEnvelopeOpStatusNotify;
class SCRedEnvelopeOpStatusNotifyDefaultTypeInternal;
extern SCRedEnvelopeOpStatusNotifyDefaultTypeInternal _SCRedEnvelopeOpStatusNotify_default_instance_;
class SCRedEnvelopePoint;
class SCRedEnvelopePointDefaultTypeInternal;
extern SCRedEnvelopePointDefaultTypeInternal _SCRedEnvelopePoint_default_instance_;
class SCRoomInfoChangeNotify;
class SCRoomInfoChangeNotifyDefaultTypeInternal;
extern SCRoomInfoChangeNotifyDefaultTypeInternal _SCRoomInfoChangeNotify_default_instance_;
class SCScratchCardList;
class SCScratchCardListDefaultTypeInternal;
extern SCScratchCardListDefaultTypeInternal _SCScratchCardList_default_instance_;
class SCSelectTitle;
class SCSelectTitleDefaultTypeInternal;
extern SCSelectTitleDefaultTypeInternal _SCSelectTitle_default_instance_;
class SCSelfVideoRecord;
class SCSelfVideoRecordDefaultTypeInternal;
extern SCSelfVideoRecordDefaultTypeInternal _SCSelfVideoRecord_default_instance_;
class SCSetPersonalPoolEnable;
class SCSetPersonalPoolEnableDefaultTypeInternal;
extern SCSetPersonalPoolEnableDefaultTypeInternal _SCSetPersonalPoolEnable_default_instance_;
class SCSetPlane;
class SCSetPlaneDefaultTypeInternal;
extern SCSetPlaneDefaultTypeInternal _SCSetPlane_default_instance_;
class SCSetWings;
class SCSetWingsDefaultTypeInternal;
extern SCSetWingsDefaultTypeInternal _SCSetWings_default_instance_;
class SCShot;
class SCShotDefaultTypeInternal;
extern SCShotDefaultTypeInternal _SCShot_default_instance_;
class SCStateEnd;
class SCStateEndDefaultTypeInternal;
extern SCStateEndDefaultTypeInternal _SCStateEnd_default_instance_;
class SCStateForceSettle;
class SCStateForceSettleDefaultTypeInternal;
extern SCStateForceSettleDefaultTypeInternal _SCStateForceSettle_default_instance_;
class SCSwitchBackGround;
class SCSwitchBackGroundDefaultTypeInternal;
extern SCSwitchBackGroundDefaultTypeInternal _SCSwitchBackGround_default_instance_;
class SCSyncAnimation;
class SCSyncAnimationDefaultTypeInternal;
extern SCSyncAnimationDefaultTypeInternal _SCSyncAnimation_default_instance_;
class SCSyncBlackHolePos;
class SCSyncBlackHolePosDefaultTypeInternal;
extern SCSyncBlackHolePosDefaultTypeInternal _SCSyncBlackHolePos_default_instance_;
class SCSyncConfigs;
class SCSyncConfigsDefaultTypeInternal;
extern SCSyncConfigsDefaultTypeInternal _SCSyncConfigs_default_instance_;
class SCSyncMonsterInfo;
class SCSyncMonsterInfoDefaultTypeInternal;
extern SCSyncMonsterInfoDefaultTypeInternal _SCSyncMonsterInfo_default_instance_;
class SCSyncPropsToHall;
class SCSyncPropsToHallDefaultTypeInternal;
extern SCSyncPropsToHallDefaultTypeInternal _SCSyncPropsToHall_default_instance_;
class SCSyncTextConfig;
class SCSyncTextConfigDefaultTypeInternal;
extern SCSyncTextConfigDefaultTypeInternal _SCSyncTextConfig_default_instance_;
class SCSyncTime;
class SCSyncTimeDefaultTypeInternal;
extern SCSyncTimeDefaultTypeInternal _SCSyncTime_default_instance_;
class SCSyncWeaponState;
class SCSyncWeaponStateDefaultTypeInternal;
extern SCSyncWeaponStateDefaultTypeInternal _SCSyncWeaponState_default_instance_;
class SCTitleActiveNotify;
class SCTitleActiveNotifyDefaultTypeInternal;
extern SCTitleActiveNotifyDefaultTypeInternal _SCTitleActiveNotify_default_instance_;
class SCTitleList;
class SCTitleListDefaultTypeInternal;
extern SCTitleListDefaultTypeInternal _SCTitleList_default_instance_;
class SCTransform;
class SCTransformDefaultTypeInternal;
extern SCTransformDefaultTypeInternal _SCTransform_default_instance_;
class SCUpdateBulletData;
class SCUpdateBulletDataDefaultTypeInternal;
extern SCUpdateBulletDataDefaultTypeInternal _SCUpdateBulletData_default_instance_;
class SCUpdateChestStatus;
class SCUpdateChestStatusDefaultTypeInternal;
extern SCUpdateChestStatusDefaultTypeInternal _SCUpdateChestStatus_default_instance_;
class SCUpgradePoolReward;
class SCUpgradePoolRewardDefaultTypeInternal;
extern SCUpgradePoolRewardDefaultTypeInternal _SCUpgradePoolReward_default_instance_;
class SCUpgradeRedEnvelope;
class SCUpgradeRedEnvelopeDefaultTypeInternal;
extern SCUpgradeRedEnvelopeDefaultTypeInternal _SCUpgradeRedEnvelope_default_instance_;
class SCUseMissile;
class SCUseMissileDefaultTypeInternal;
extern SCUseMissileDefaultTypeInternal _SCUseMissile_default_instance_;
class SCUseMissileBatch;
class SCUseMissileBatchDefaultTypeInternal;
extern SCUseMissileBatchDefaultTypeInternal _SCUseMissileBatch_default_instance_;
class SCUseRoulette;
class SCUseRouletteDefaultTypeInternal;
extern SCUseRouletteDefaultTypeInternal _SCUseRoulette_default_instance_;
class SCUseScratchCard;
class SCUseScratchCardDefaultTypeInternal;
extern SCUseScratchCardDefaultTypeInternal _SCUseScratchCard_default_instance_;
class SCUserEnterNotify;
class SCUserEnterNotifyDefaultTypeInternal;
extern SCUserEnterNotifyDefaultTypeInternal _SCUserEnterNotify_default_instance_;
class SCVerifySeasonChange;
class SCVerifySeasonChangeDefaultTypeInternal;
extern SCVerifySeasonChangeDefaultTypeInternal _SCVerifySeasonChange_default_instance_;
class SCVideoRank;
class SCVideoRankDefaultTypeInternal;
extern SCVideoRankDefaultTypeInternal _SCVideoRank_default_instance_;
class SCWaterDropInfo;
class SCWaterDropInfoDefaultTypeInternal;
extern SCWaterDropInfoDefaultTypeInternal _SCWaterDropInfo_default_instance_;
class SCWeaponEarnRecord;
class SCWeaponEarnRecordDefaultTypeInternal;
extern SCWeaponEarnRecordDefaultTypeInternal _SCWeaponEarnRecord_default_instance_;
class SCWeaponPieceInfo;
class SCWeaponPieceInfoDefaultTypeInternal;
extern SCWeaponPieceInfoDefaultTypeInternal _SCWeaponPieceInfo_default_instance_;
class SC_SceneInfo;
class SC_SceneInfoDefaultTypeInternal;
extern SC_SceneInfoDefaultTypeInternal _SC_SceneInfo_default_instance_;
class ScratchInfo;
class ScratchInfoDefaultTypeInternal;
extern ScratchInfoDefaultTypeInternal _ScratchInfo_default_instance_;
class SelfVideoInfo;
class SelfVideoInfoDefaultTypeInternal;
extern SelfVideoInfoDefaultTypeInternal _SelfVideoInfo_default_instance_;
class SettleInfo;
class SettleInfoDefaultTypeInternal;
extern SettleInfoDefaultTypeInternal _SettleInfo_default_instance_;
class SpecEffect;
class SpecEffectDefaultTypeInternal;
extern SpecEffectDefaultTypeInternal _SpecEffect_default_instance_;
class StateInfo;
class StateInfoDefaultTypeInternal;
extern StateInfoDefaultTypeInternal _StateInfo_default_instance_;
class TextInfo;
class TextInfoDefaultTypeInternal;
extern TextInfoDefaultTypeInternal _TextInfo_default_instance_;
class TimingMonster;
class TimingMonsterDefaultTypeInternal;
extern TimingMonsterDefaultTypeInternal _TimingMonster_default_instance_;
class TitleInfo;
class TitleInfoDefaultTypeInternal;
extern TitleInfoDefaultTypeInternal _TitleInfo_default_instance_;
class ToadInfo;
class ToadInfoDefaultTypeInternal;
extern ToadInfoDefaultTypeInternal _ToadInfo_default_instance_;
class TreasureInfo;
class TreasureInfoDefaultTypeInternal;
extern TreasureInfoDefaultTypeInternal _TreasureInfo_default_instance_;
class TriggerBullet;
class TriggerBulletDefaultTypeInternal;
extern TriggerBulletDefaultTypeInternal _TriggerBullet_default_instance_;
class VideoCommon;
class VideoCommonDefaultTypeInternal;
extern VideoCommonDefaultTypeInternal _VideoCommon_default_instance_;
class WareGivingInfo;
class WareGivingInfoDefaultTypeInternal;
extern WareGivingInfoDefaultTypeInternal _WareGivingInfo_default_instance_;
class WareInfo;
class WareInfoDefaultTypeInternal;
extern WareInfoDefaultTypeInternal _WareInfo_default_instance_;
class WeaponConfig;
class WeaponConfigDefaultTypeInternal;
extern WeaponConfigDefaultTypeInternal _WeaponConfig_default_instance_;
class WeaponInfo;
class WeaponInfoDefaultTypeInternal;
extern WeaponInfoDefaultTypeInternal _WeaponInfo_default_instance_;
class WeaponState;
class WeaponStateDefaultTypeInternal;
extern WeaponStateDefaultTypeInternal _WeaponState_default_instance_;
class WeaponUseCondition;
class WeaponUseConditionDefaultTypeInternal;
extern WeaponUseConditionDefaultTypeInternal _WeaponUseCondition_default_instance_;
class WingsInfo;
class WingsInfoDefaultTypeInternal;
extern WingsInfoDefaultTypeInternal _WingsInfo_default_instance_;
class WingsSpecEffect;
class WingsSpecEffectDefaultTypeInternal;
extern WingsSpecEffectDefaultTypeInternal _WingsSpecEffect_default_instance_;
}  // namespace PlaneWar
PROTOBUF_NAMESPACE_OPEN
template<> ::PlaneWar::Animation* Arena::CreateMaybeMessage<::PlaneWar::Animation>(Arena*);
template<> ::PlaneWar::ArenaPieceInfo* Arena::CreateMaybeMessage<::PlaneWar::ArenaPieceInfo>(Arena*);
template<> ::PlaneWar::BeeConfig* Arena::CreateMaybeMessage<::PlaneWar::BeeConfig>(Arena*);
template<> ::PlaneWar::BeeInfo* Arena::CreateMaybeMessage<::PlaneWar::BeeInfo>(Arena*);
template<> ::PlaneWar::BlackHoleInfo* Arena::CreateMaybeMessage<::PlaneWar::BlackHoleInfo>(Arena*);
template<> ::PlaneWar::BuffInfo* Arena::CreateMaybeMessage<::PlaneWar::BuffInfo>(Arena*);
template<> ::PlaneWar::CSBuyPlane* Arena::CreateMaybeMessage<::PlaneWar::CSBuyPlane>(Arena*);
template<> ::PlaneWar::CSBuyWeapon* Arena::CreateMaybeMessage<::PlaneWar::CSBuyWeapon>(Arena*);
template<> ::PlaneWar::CSBuyWings* Arena::CreateMaybeMessage<::PlaneWar::CSBuyWings>(Arena*);
template<> ::PlaneWar::CSChangeTable* Arena::CreateMaybeMessage<::PlaneWar::CSChangeTable>(Arena*);
template<> ::PlaneWar::CSChestSetAutoSelect* Arena::CreateMaybeMessage<::PlaneWar::CSChestSetAutoSelect>(Arena*);
template<> ::PlaneWar::CSChestSetEnable* Arena::CreateMaybeMessage<::PlaneWar::CSChestSetEnable>(Arena*);
template<> ::PlaneWar::CSClickStatic* Arena::CreateMaybeMessage<::PlaneWar::CSClickStatic>(Arena*);
template<> ::PlaneWar::CSCommonRedEnvelopeInfo* Arena::CreateMaybeMessage<::PlaneWar::CSCommonRedEnvelopeInfo>(Arena*);
template<> ::PlaneWar::CSConfirmWeaponExist* Arena::CreateMaybeMessage<::PlaneWar::CSConfirmWeaponExist>(Arena*);
template<> ::PlaneWar::CSDrawPersonalPool* Arena::CreateMaybeMessage<::PlaneWar::CSDrawPersonalPool>(Arena*);
template<> ::PlaneWar::CSExistUnReceiveRankReward* Arena::CreateMaybeMessage<::PlaneWar::CSExistUnReceiveRankReward>(Arena*);
template<> ::PlaneWar::CSExplodeSettle* Arena::CreateMaybeMessage<::PlaneWar::CSExplodeSettle>(Arena*);
template<> ::PlaneWar::CSExtraMul* Arena::CreateMaybeMessage<::PlaneWar::CSExtraMul>(Arena*);
template<> ::PlaneWar::CSFallIntoBlackHole* Arena::CreateMaybeMessage<::PlaneWar::CSFallIntoBlackHole>(Arena*);
template<> ::PlaneWar::CSGetGradeRankInfo* Arena::CreateMaybeMessage<::PlaneWar::CSGetGradeRankInfo>(Arena*);
template<> ::PlaneWar::CSGetGradeRankList* Arena::CreateMaybeMessage<::PlaneWar::CSGetGradeRankList>(Arena*);
template<> ::PlaneWar::CSGetGradeRewardInfo* Arena::CreateMaybeMessage<::PlaneWar::CSGetGradeRewardInfo>(Arena*);
template<> ::PlaneWar::CSGetMatchTaskReward* Arena::CreateMaybeMessage<::PlaneWar::CSGetMatchTaskReward>(Arena*);
template<> ::PlaneWar::CSGetPoolLuckyReward* Arena::CreateMaybeMessage<::PlaneWar::CSGetPoolLuckyReward>(Arena*);
template<> ::PlaneWar::CSGetTableUserInfo* Arena::CreateMaybeMessage<::PlaneWar::CSGetTableUserInfo>(Arena*);
template<> ::PlaneWar::CSGetTaskInfo* Arena::CreateMaybeMessage<::PlaneWar::CSGetTaskInfo>(Arena*);
template<> ::PlaneWar::CSGetTaskReward* Arena::CreateMaybeMessage<::PlaneWar::CSGetTaskReward>(Arena*);
template<> ::PlaneWar::CSGetVideo* Arena::CreateMaybeMessage<::PlaneWar::CSGetVideo>(Arena*);
template<> ::PlaneWar::CSGiftList* Arena::CreateMaybeMessage<::PlaneWar::CSGiftList>(Arena*);
template<> ::PlaneWar::CSGrantCommonRedEnvelopeRank* Arena::CreateMaybeMessage<::PlaneWar::CSGrantCommonRedEnvelopeRank>(Arena*);
template<> ::PlaneWar::CSGrantCommonRedEnvelopeRecord* Arena::CreateMaybeMessage<::PlaneWar::CSGrantCommonRedEnvelopeRecord>(Arena*);
template<> ::PlaneWar::CSHit* Arena::CreateMaybeMessage<::PlaneWar::CSHit>(Arena*);
template<> ::PlaneWar::CSInteraction* Arena::CreateMaybeMessage<::PlaneWar::CSInteraction>(Arena*);
template<> ::PlaneWar::CSLock* Arena::CreateMaybeMessage<::PlaneWar::CSLock>(Arena*);
template<> ::PlaneWar::CSLogin* Arena::CreateMaybeMessage<::PlaneWar::CSLogin>(Arena*);
template<> ::PlaneWar::CSLogout* Arena::CreateMaybeMessage<::PlaneWar::CSLogout>(Arena*);
template<> ::PlaneWar::CSMatchBrief* Arena::CreateMaybeMessage<::PlaneWar::CSMatchBrief>(Arena*);
template<> ::PlaneWar::CSMatchDetail* Arena::CreateMaybeMessage<::PlaneWar::CSMatchDetail>(Arena*);
template<> ::PlaneWar::CSMatchReward* Arena::CreateMaybeMessage<::PlaneWar::CSMatchReward>(Arena*);
template<> ::PlaneWar::CSModRatio* Arena::CreateMaybeMessage<::PlaneWar::CSModRatio>(Arena*);
template<> ::PlaneWar::CSMonsterCall* Arena::CreateMaybeMessage<::PlaneWar::CSMonsterCall>(Arena*);
template<> ::PlaneWar::CSMonsterDestory* Arena::CreateMaybeMessage<::PlaneWar::CSMonsterDestory>(Arena*);
template<> ::PlaneWar::CSOpenCommonRedEnvelope* Arena::CreateMaybeMessage<::PlaneWar::CSOpenCommonRedEnvelope>(Arena*);
template<> ::PlaneWar::CSOpenCommonRedEnvelopeRank* Arena::CreateMaybeMessage<::PlaneWar::CSOpenCommonRedEnvelopeRank>(Arena*);
template<> ::PlaneWar::CSOpenCommonRedEnvelopeRecord* Arena::CreateMaybeMessage<::PlaneWar::CSOpenCommonRedEnvelopeRecord>(Arena*);
template<> ::PlaneWar::CSOpenPiggyBank* Arena::CreateMaybeMessage<::PlaneWar::CSOpenPiggyBank>(Arena*);
template<> ::PlaneWar::CSOpenRedEnvelope* Arena::CreateMaybeMessage<::PlaneWar::CSOpenRedEnvelope>(Arena*);
template<> ::PlaneWar::CSPersonalPoolInfo* Arena::CreateMaybeMessage<::PlaneWar::CSPersonalPoolInfo>(Arena*);
template<> ::PlaneWar::CSPiggyBankInfo* Arena::CreateMaybeMessage<::PlaneWar::CSPiggyBankInfo>(Arena*);
template<> ::PlaneWar::CSPiggyBankOpenFinish* Arena::CreateMaybeMessage<::PlaneWar::CSPiggyBankOpenFinish>(Arena*);
template<> ::PlaneWar::CSPlanePosSync* Arena::CreateMaybeMessage<::PlaneWar::CSPlanePosSync>(Arena*);
template<> ::PlaneWar::CSPreHit* Arena::CreateMaybeMessage<::PlaneWar::CSPreHit>(Arena*);
template<> ::PlaneWar::CSQueryPackageMarquee* Arena::CreateMaybeMessage<::PlaneWar::CSQueryPackageMarquee>(Arena*);
template<> ::PlaneWar::CSQueryPackagePurchase* Arena::CreateMaybeMessage<::PlaneWar::CSQueryPackagePurchase>(Arena*);
template<> ::PlaneWar::CSRankList* Arena::CreateMaybeMessage<::PlaneWar::CSRankList>(Arena*);
template<> ::PlaneWar::CSRankSeasonStatus* Arena::CreateMaybeMessage<::PlaneWar::CSRankSeasonStatus>(Arena*);
template<> ::PlaneWar::CSReady* Arena::CreateMaybeMessage<::PlaneWar::CSReady>(Arena*);
template<> ::PlaneWar::CSReceiveExtraGradeReward* Arena::CreateMaybeMessage<::PlaneWar::CSReceiveExtraGradeReward>(Arena*);
template<> ::PlaneWar::CSReceiveGradeReward* Arena::CreateMaybeMessage<::PlaneWar::CSReceiveGradeReward>(Arena*);
template<> ::PlaneWar::CSRedEnvelopeInfo* Arena::CreateMaybeMessage<::PlaneWar::CSRedEnvelopeInfo>(Arena*);
template<> ::PlaneWar::CSRedEnvelopePoint* Arena::CreateMaybeMessage<::PlaneWar::CSRedEnvelopePoint>(Arena*);
template<> ::PlaneWar::CSScratchCardList* Arena::CreateMaybeMessage<::PlaneWar::CSScratchCardList>(Arena*);
template<> ::PlaneWar::CSSelectChestReward* Arena::CreateMaybeMessage<::PlaneWar::CSSelectChestReward>(Arena*);
template<> ::PlaneWar::CSSelectTitle* Arena::CreateMaybeMessage<::PlaneWar::CSSelectTitle>(Arena*);
template<> ::PlaneWar::CSSelfVideoRecord* Arena::CreateMaybeMessage<::PlaneWar::CSSelfVideoRecord>(Arena*);
template<> ::PlaneWar::CSSetPersonalPoolEnable* Arena::CreateMaybeMessage<::PlaneWar::CSSetPersonalPoolEnable>(Arena*);
template<> ::PlaneWar::CSSetPlane* Arena::CreateMaybeMessage<::PlaneWar::CSSetPlane>(Arena*);
template<> ::PlaneWar::CSSetWings* Arena::CreateMaybeMessage<::PlaneWar::CSSetWings>(Arena*);
template<> ::PlaneWar::CSShot* Arena::CreateMaybeMessage<::PlaneWar::CSShot>(Arena*);
template<> ::PlaneWar::CSStateForceSettle* Arena::CreateMaybeMessage<::PlaneWar::CSStateForceSettle>(Arena*);
template<> ::PlaneWar::CSSwitchBackGround* Arena::CreateMaybeMessage<::PlaneWar::CSSwitchBackGround>(Arena*);
template<> ::PlaneWar::CSSyncAnimation* Arena::CreateMaybeMessage<::PlaneWar::CSSyncAnimation>(Arena*);
template<> ::PlaneWar::CSSyncBlackHolePos* Arena::CreateMaybeMessage<::PlaneWar::CSSyncBlackHolePos>(Arena*);
template<> ::PlaneWar::CSSyncConfigs* Arena::CreateMaybeMessage<::PlaneWar::CSSyncConfigs>(Arena*);
template<> ::PlaneWar::CSSyncPropsToHall* Arena::CreateMaybeMessage<::PlaneWar::CSSyncPropsToHall>(Arena*);
template<> ::PlaneWar::CSSyncTextConfig* Arena::CreateMaybeMessage<::PlaneWar::CSSyncTextConfig>(Arena*);
template<> ::PlaneWar::CSSyncWeaponState* Arena::CreateMaybeMessage<::PlaneWar::CSSyncWeaponState>(Arena*);
template<> ::PlaneWar::CSTransform* Arena::CreateMaybeMessage<::PlaneWar::CSTransform>(Arena*);
template<> ::PlaneWar::CSUpdateBulletData* Arena::CreateMaybeMessage<::PlaneWar::CSUpdateBulletData>(Arena*);
template<> ::PlaneWar::CSUpgradePoolReward* Arena::CreateMaybeMessage<::PlaneWar::CSUpgradePoolReward>(Arena*);
template<> ::PlaneWar::CSUpgradeRedEnvelope* Arena::CreateMaybeMessage<::PlaneWar::CSUpgradeRedEnvelope>(Arena*);
template<> ::PlaneWar::CSUseMissile* Arena::CreateMaybeMessage<::PlaneWar::CSUseMissile>(Arena*);
template<> ::PlaneWar::CSUseMissileBatch* Arena::CreateMaybeMessage<::PlaneWar::CSUseMissileBatch>(Arena*);
template<> ::PlaneWar::CSUseRoulette* Arena::CreateMaybeMessage<::PlaneWar::CSUseRoulette>(Arena*);
template<> ::PlaneWar::CSUseScratchCard* Arena::CreateMaybeMessage<::PlaneWar::CSUseScratchCard>(Arena*);
template<> ::PlaneWar::CSVerifySeasonChange* Arena::CreateMaybeMessage<::PlaneWar::CSVerifySeasonChange>(Arena*);
template<> ::PlaneWar::CSVideoRank* Arena::CreateMaybeMessage<::PlaneWar::CSVideoRank>(Arena*);
template<> ::PlaneWar::CSWeaponEarnRecord* Arena::CreateMaybeMessage<::PlaneWar::CSWeaponEarnRecord>(Arena*);
template<> ::PlaneWar::CSWeaponPieceInfo* Arena::CreateMaybeMessage<::PlaneWar::CSWeaponPieceInfo>(Arena*);
template<> ::PlaneWar::ChestBrief* Arena::CreateMaybeMessage<::PlaneWar::ChestBrief>(Arena*);
template<> ::PlaneWar::CommonPropInfo* Arena::CreateMaybeMessage<::PlaneWar::CommonPropInfo>(Arena*);
template<> ::PlaneWar::CommonRedInfo* Arena::CreateMaybeMessage<::PlaneWar::CommonRedInfo>(Arena*);
template<> ::PlaneWar::CommonReplayConfig* Arena::CreateMaybeMessage<::PlaneWar::CommonReplayConfig>(Arena*);
template<> ::PlaneWar::ConnMonsterInfo* Arena::CreateMaybeMessage<::PlaneWar::ConnMonsterInfo>(Arena*);
template<> ::PlaneWar::Decimal* Arena::CreateMaybeMessage<::PlaneWar::Decimal>(Arena*);
template<> ::PlaneWar::Dice* Arena::CreateMaybeMessage<::PlaneWar::Dice>(Arena*);
template<> ::PlaneWar::DiceConfig* Arena::CreateMaybeMessage<::PlaneWar::DiceConfig>(Arena*);
template<> ::PlaneWar::DiceInfo* Arena::CreateMaybeMessage<::PlaneWar::DiceInfo>(Arena*);
template<> ::PlaneWar::DiceJson* Arena::CreateMaybeMessage<::PlaneWar::DiceJson>(Arena*);
template<> ::PlaneWar::DropBuff* Arena::CreateMaybeMessage<::PlaneWar::DropBuff>(Arena*);
template<> ::PlaneWar::DropPoker* Arena::CreateMaybeMessage<::PlaneWar::DropPoker>(Arena*);
template<> ::PlaneWar::EarnRecord* Arena::CreateMaybeMessage<::PlaneWar::EarnRecord>(Arena*);
template<> ::PlaneWar::EffectInfo* Arena::CreateMaybeMessage<::PlaneWar::EffectInfo>(Arena*);
template<> ::PlaneWar::ExtraGradeRewardInfo* Arena::CreateMaybeMessage<::PlaneWar::ExtraGradeRewardInfo>(Arena*);
template<> ::PlaneWar::FakeTresureInfo* Arena::CreateMaybeMessage<::PlaneWar::FakeTresureInfo>(Arena*);
template<> ::PlaneWar::FlameInfo* Arena::CreateMaybeMessage<::PlaneWar::FlameInfo>(Arena*);
template<> ::PlaneWar::FormInfo* Arena::CreateMaybeMessage<::PlaneWar::FormInfo>(Arena*);
template<> ::PlaneWar::FortuneConfig* Arena::CreateMaybeMessage<::PlaneWar::FortuneConfig>(Arena*);
template<> ::PlaneWar::FortuneWheelInfo* Arena::CreateMaybeMessage<::PlaneWar::FortuneWheelInfo>(Arena*);
template<> ::PlaneWar::FortuneWheelJson* Arena::CreateMaybeMessage<::PlaneWar::FortuneWheelJson>(Arena*);
template<> ::PlaneWar::GiftInfo* Arena::CreateMaybeMessage<::PlaneWar::GiftInfo>(Arena*);
template<> ::PlaneWar::GlobalReplayConfig* Arena::CreateMaybeMessage<::PlaneWar::GlobalReplayConfig>(Arena*);
template<> ::PlaneWar::GlobalVideoInfo* Arena::CreateMaybeMessage<::PlaneWar::GlobalVideoInfo>(Arena*);
template<> ::PlaneWar::GoldenToadJson* Arena::CreateMaybeMessage<::PlaneWar::GoldenToadJson>(Arena*);
template<> ::PlaneWar::GradeRankConfig* Arena::CreateMaybeMessage<::PlaneWar::GradeRankConfig>(Arena*);
template<> ::PlaneWar::GradeRankDetail* Arena::CreateMaybeMessage<::PlaneWar::GradeRankDetail>(Arena*);
template<> ::PlaneWar::GradeRankInfo* Arena::CreateMaybeMessage<::PlaneWar::GradeRankInfo>(Arena*);
template<> ::PlaneWar::GradeRewardDetail* Arena::CreateMaybeMessage<::PlaneWar::GradeRewardDetail>(Arena*);
template<> ::PlaneWar::GradeRewardInfo* Arena::CreateMaybeMessage<::PlaneWar::GradeRewardInfo>(Arena*);
template<> ::PlaneWar::GrantRankItem* Arena::CreateMaybeMessage<::PlaneWar::GrantRankItem>(Arena*);
template<> ::PlaneWar::GrantRecord* Arena::CreateMaybeMessage<::PlaneWar::GrantRecord>(Arena*);
template<> ::PlaneWar::GunInfo* Arena::CreateMaybeMessage<::PlaneWar::GunInfo>(Arena*);
template<> ::PlaneWar::HitMode* Arena::CreateMaybeMessage<::PlaneWar::HitMode>(Arena*);
template<> ::PlaneWar::InteractionItem* Arena::CreateMaybeMessage<::PlaneWar::InteractionItem>(Arena*);
template<> ::PlaneWar::JumpHighArena* Arena::CreateMaybeMessage<::PlaneWar::JumpHighArena>(Arena*);
template<> ::PlaneWar::LockInfo* Arena::CreateMaybeMessage<::PlaneWar::LockInfo>(Arena*);
template<> ::PlaneWar::MatchRankInfo* Arena::CreateMaybeMessage<::PlaneWar::MatchRankInfo>(Arena*);
template<> ::PlaneWar::MatchRewardItem* Arena::CreateMaybeMessage<::PlaneWar::MatchRewardItem>(Arena*);
template<> ::PlaneWar::MatchSubInfo* Arena::CreateMaybeMessage<::PlaneWar::MatchSubInfo>(Arena*);
template<> ::PlaneWar::MatchTask* Arena::CreateMaybeMessage<::PlaneWar::MatchTask>(Arena*);
template<> ::PlaneWar::MissileFishListInfo* Arena::CreateMaybeMessage<::PlaneWar::MissileFishListInfo>(Arena*);
template<> ::PlaneWar::MissileInfo* Arena::CreateMaybeMessage<::PlaneWar::MissileInfo>(Arena*);
template<> ::PlaneWar::MonsterInfo* Arena::CreateMaybeMessage<::PlaneWar::MonsterInfo>(Arena*);
template<> ::PlaneWar::MonsterPath* Arena::CreateMaybeMessage<::PlaneWar::MonsterPath>(Arena*);
template<> ::PlaneWar::MyMatchReward* Arena::CreateMaybeMessage<::PlaneWar::MyMatchReward>(Arena*);
template<> ::PlaneWar::MyRankInfo* Arena::CreateMaybeMessage<::PlaneWar::MyRankInfo>(Arena*);
template<> ::PlaneWar::OpenChestReward* Arena::CreateMaybeMessage<::PlaneWar::OpenChestReward>(Arena*);
template<> ::PlaneWar::OpenRankItem* Arena::CreateMaybeMessage<::PlaneWar::OpenRankItem>(Arena*);
template<> ::PlaneWar::OpenRecord* Arena::CreateMaybeMessage<::PlaneWar::OpenRecord>(Arena*);
template<> ::PlaneWar::OrderData* Arena::CreateMaybeMessage<::PlaneWar::OrderData>(Arena*);
template<> ::PlaneWar::PackageMarquee* Arena::CreateMaybeMessage<::PlaneWar::PackageMarquee>(Arena*);
template<> ::PlaneWar::PersonalPoolLevelInfo* Arena::CreateMaybeMessage<::PlaneWar::PersonalPoolLevelInfo>(Arena*);
template<> ::PlaneWar::PersonalPoolLuckyInfo* Arena::CreateMaybeMessage<::PlaneWar::PersonalPoolLuckyInfo>(Arena*);
template<> ::PlaneWar::PersonalPoolReward* Arena::CreateMaybeMessage<::PlaneWar::PersonalPoolReward>(Arena*);
template<> ::PlaneWar::PersonalReplayConfig* Arena::CreateMaybeMessage<::PlaneWar::PersonalReplayConfig>(Arena*);
template<> ::PlaneWar::PieceInfo* Arena::CreateMaybeMessage<::PlaneWar::PieceInfo>(Arena*);
template<> ::PlaneWar::PiecesStackLimitInfo* Arena::CreateMaybeMessage<::PlaneWar::PiecesStackLimitInfo>(Arena*);
template<> ::PlaneWar::PiggyInfo* Arena::CreateMaybeMessage<::PlaneWar::PiggyInfo>(Arena*);
template<> ::PlaneWar::PiggyReward* Arena::CreateMaybeMessage<::PlaneWar::PiggyReward>(Arena*);
template<> ::PlaneWar::PlaneInfo* Arena::CreateMaybeMessage<::PlaneWar::PlaneInfo>(Arena*);
template<> ::PlaneWar::PlaneSpecEffect* Arena::CreateMaybeMessage<::PlaneWar::PlaneSpecEffect>(Arena*);
template<> ::PlaneWar::PlayerInfo* Arena::CreateMaybeMessage<::PlaneWar::PlayerInfo>(Arena*);
template<> ::PlaneWar::Poker* Arena::CreateMaybeMessage<::PlaneWar::Poker>(Arena*);
template<> ::PlaneWar::PoolArenaLimit* Arena::CreateMaybeMessage<::PlaneWar::PoolArenaLimit>(Arena*);
template<> ::PlaneWar::Pos* Arena::CreateMaybeMessage<::PlaneWar::Pos>(Arena*);
template<> ::PlaneWar::PropsInfo* Arena::CreateMaybeMessage<::PlaneWar::PropsInfo>(Arena*);
template<> ::PlaneWar::ProsInfo* Arena::CreateMaybeMessage<::PlaneWar::ProsInfo>(Arena*);
template<> ::PlaneWar::PurchaseResult* Arena::CreateMaybeMessage<::PlaneWar::PurchaseResult>(Arena*);
template<> ::PlaneWar::RankInfo* Arena::CreateMaybeMessage<::PlaneWar::RankInfo>(Arena*);
template<> ::PlaneWar::RankReward* Arena::CreateMaybeMessage<::PlaneWar::RankReward>(Arena*);
template<> ::PlaneWar::RankStatusInfo* Arena::CreateMaybeMessage<::PlaneWar::RankStatusInfo>(Arena*);
template<> ::PlaneWar::RankWareConfig* Arena::CreateMaybeMessage<::PlaneWar::RankWareConfig>(Arena*);
template<> ::PlaneWar::ReceiveReward* Arena::CreateMaybeMessage<::PlaneWar::ReceiveReward>(Arena*);
template<> ::PlaneWar::RedInfo* Arena::CreateMaybeMessage<::PlaneWar::RedInfo>(Arena*);
template<> ::PlaneWar::RedOpenInfo* Arena::CreateMaybeMessage<::PlaneWar::RedOpenInfo>(Arena*);
template<> ::PlaneWar::RedRankPlayerInfo* Arena::CreateMaybeMessage<::PlaneWar::RedRankPlayerInfo>(Arena*);
template<> ::PlaneWar::RedUpgradeInfo* Arena::CreateMaybeMessage<::PlaneWar::RedUpgradeInfo>(Arena*);
template<> ::PlaneWar::ReplayConfig* Arena::CreateMaybeMessage<::PlaneWar::ReplayConfig>(Arena*);
template<> ::PlaneWar::RoomInfo* Arena::CreateMaybeMessage<::PlaneWar::RoomInfo>(Arena*);
template<> ::PlaneWar::Roulette* Arena::CreateMaybeMessage<::PlaneWar::Roulette>(Arena*);
template<> ::PlaneWar::RouletteInfo* Arena::CreateMaybeMessage<::PlaneWar::RouletteInfo>(Arena*);
template<> ::PlaneWar::SCActivityInfo* Arena::CreateMaybeMessage<::PlaneWar::SCActivityInfo>(Arena*);
template<> ::PlaneWar::SCAddMissedBullet* Arena::CreateMaybeMessage<::PlaneWar::SCAddMissedBullet>(Arena*);
template<> ::PlaneWar::SCBuyPlane* Arena::CreateMaybeMessage<::PlaneWar::SCBuyPlane>(Arena*);
template<> ::PlaneWar::SCBuyWeapon* Arena::CreateMaybeMessage<::PlaneWar::SCBuyWeapon>(Arena*);
template<> ::PlaneWar::SCBuyWings* Arena::CreateMaybeMessage<::PlaneWar::SCBuyWings>(Arena*);
template<> ::PlaneWar::SCChangeTable* Arena::CreateMaybeMessage<::PlaneWar::SCChangeTable>(Arena*);
template<> ::PlaneWar::SCChestConfig* Arena::CreateMaybeMessage<::PlaneWar::SCChestConfig>(Arena*);
template<> ::PlaneWar::SCChestSetAutoSelect* Arena::CreateMaybeMessage<::PlaneWar::SCChestSetAutoSelect>(Arena*);
template<> ::PlaneWar::SCChestSetEnable* Arena::CreateMaybeMessage<::PlaneWar::SCChestSetEnable>(Arena*);
template<> ::PlaneWar::SCClickStatic* Arena::CreateMaybeMessage<::PlaneWar::SCClickStatic>(Arena*);
template<> ::PlaneWar::SCCommonRedEnvelopeInfo* Arena::CreateMaybeMessage<::PlaneWar::SCCommonRedEnvelopeInfo>(Arena*);
template<> ::PlaneWar::SCConfirmWeaponExist* Arena::CreateMaybeMessage<::PlaneWar::SCConfirmWeaponExist>(Arena*);
template<> ::PlaneWar::SCExistUnReceiveRankReward* Arena::CreateMaybeMessage<::PlaneWar::SCExistUnReceiveRankReward>(Arena*);
template<> ::PlaneWar::SCExplodeSettle* Arena::CreateMaybeMessage<::PlaneWar::SCExplodeSettle>(Arena*);
template<> ::PlaneWar::SCExtraMul* Arena::CreateMaybeMessage<::PlaneWar::SCExtraMul>(Arena*);
template<> ::PlaneWar::SCFallIntoBlackHole* Arena::CreateMaybeMessage<::PlaneWar::SCFallIntoBlackHole>(Arena*);
template<> ::PlaneWar::SCGainNotify* Arena::CreateMaybeMessage<::PlaneWar::SCGainNotify>(Arena*);
template<> ::PlaneWar::SCGainSettle* Arena::CreateMaybeMessage<::PlaneWar::SCGainSettle>(Arena*);
template<> ::PlaneWar::SCGamePurchasePush* Arena::CreateMaybeMessage<::PlaneWar::SCGamePurchasePush>(Arena*);
template<> ::PlaneWar::SCGetAnimations* Arena::CreateMaybeMessage<::PlaneWar::SCGetAnimations>(Arena*);
template<> ::PlaneWar::SCGetGradeRankInfo* Arena::CreateMaybeMessage<::PlaneWar::SCGetGradeRankInfo>(Arena*);
template<> ::PlaneWar::SCGetGradeRankList* Arena::CreateMaybeMessage<::PlaneWar::SCGetGradeRankList>(Arena*);
template<> ::PlaneWar::SCGetGradeRewardInfo* Arena::CreateMaybeMessage<::PlaneWar::SCGetGradeRewardInfo>(Arena*);
template<> ::PlaneWar::SCGetMatchTaskReward* Arena::CreateMaybeMessage<::PlaneWar::SCGetMatchTaskReward>(Arena*);
template<> ::PlaneWar::SCGetPoolLuckyReward* Arena::CreateMaybeMessage<::PlaneWar::SCGetPoolLuckyReward>(Arena*);
template<> ::PlaneWar::SCGetTableUserInfo* Arena::CreateMaybeMessage<::PlaneWar::SCGetTableUserInfo>(Arena*);
template<> ::PlaneWar::SCGetTaskInfo* Arena::CreateMaybeMessage<::PlaneWar::SCGetTaskInfo>(Arena*);
template<> ::PlaneWar::SCGetTaskReward* Arena::CreateMaybeMessage<::PlaneWar::SCGetTaskReward>(Arena*);
template<> ::PlaneWar::SCGetVideo* Arena::CreateMaybeMessage<::PlaneWar::SCGetVideo>(Arena*);
template<> ::PlaneWar::SCGiftExpireNotify* Arena::CreateMaybeMessage<::PlaneWar::SCGiftExpireNotify>(Arena*);
template<> ::PlaneWar::SCGiftList* Arena::CreateMaybeMessage<::PlaneWar::SCGiftList>(Arena*);
template<> ::PlaneWar::SCGrantCommonRedEnvelopeRank* Arena::CreateMaybeMessage<::PlaneWar::SCGrantCommonRedEnvelopeRank>(Arena*);
template<> ::PlaneWar::SCGrantCommonRedEnvelopeRecord* Arena::CreateMaybeMessage<::PlaneWar::SCGrantCommonRedEnvelopeRecord>(Arena*);
template<> ::PlaneWar::SCHit* Arena::CreateMaybeMessage<::PlaneWar::SCHit>(Arena*);
template<> ::PlaneWar::SCInteraction* Arena::CreateMaybeMessage<::PlaneWar::SCInteraction>(Arena*);
template<> ::PlaneWar::SCLock* Arena::CreateMaybeMessage<::PlaneWar::SCLock>(Arena*);
template<> ::PlaneWar::SCLogin* Arena::CreateMaybeMessage<::PlaneWar::SCLogin>(Arena*);
template<> ::PlaneWar::SCLogout* Arena::CreateMaybeMessage<::PlaneWar::SCLogout>(Arena*);
template<> ::PlaneWar::SCMatchBrief* Arena::CreateMaybeMessage<::PlaneWar::SCMatchBrief>(Arena*);
template<> ::PlaneWar::SCMatchDetail* Arena::CreateMaybeMessage<::PlaneWar::SCMatchDetail>(Arena*);
template<> ::PlaneWar::SCMatchReward* Arena::CreateMaybeMessage<::PlaneWar::SCMatchReward>(Arena*);
template<> ::PlaneWar::SCMatchRewardNotify* Arena::CreateMaybeMessage<::PlaneWar::SCMatchRewardNotify>(Arena*);
template<> ::PlaneWar::SCModRatio* Arena::CreateMaybeMessage<::PlaneWar::SCModRatio>(Arena*);
template<> ::PlaneWar::SCMonsterCall* Arena::CreateMaybeMessage<::PlaneWar::SCMonsterCall>(Arena*);
template<> ::PlaneWar::SCMonsterDestory* Arena::CreateMaybeMessage<::PlaneWar::SCMonsterDestory>(Arena*);
template<> ::PlaneWar::SCMonsterSpawn* Arena::CreateMaybeMessage<::PlaneWar::SCMonsterSpawn>(Arena*);
template<> ::PlaneWar::SCNoticeHallProsChange* Arena::CreateMaybeMessage<::PlaneWar::SCNoticeHallProsChange>(Arena*);
template<> ::PlaneWar::SCNoticeInfoChange* Arena::CreateMaybeMessage<::PlaneWar::SCNoticeInfoChange>(Arena*);
template<> ::PlaneWar::SCNoticePropsOverdue* Arena::CreateMaybeMessage<::PlaneWar::SCNoticePropsOverdue>(Arena*);
template<> ::PlaneWar::SCNoticeTimingMonster* Arena::CreateMaybeMessage<::PlaneWar::SCNoticeTimingMonster>(Arena*);
template<> ::PlaneWar::SCOpenChest* Arena::CreateMaybeMessage<::PlaneWar::SCOpenChest>(Arena*);
template<> ::PlaneWar::SCOpenCommonRedEnvelope* Arena::CreateMaybeMessage<::PlaneWar::SCOpenCommonRedEnvelope>(Arena*);
template<> ::PlaneWar::SCOpenCommonRedEnvelopeRank* Arena::CreateMaybeMessage<::PlaneWar::SCOpenCommonRedEnvelopeRank>(Arena*);
template<> ::PlaneWar::SCOpenCommonRedEnvelopeRecord* Arena::CreateMaybeMessage<::PlaneWar::SCOpenCommonRedEnvelopeRecord>(Arena*);
template<> ::PlaneWar::SCOpenPiggyBank* Arena::CreateMaybeMessage<::PlaneWar::SCOpenPiggyBank>(Arena*);
template<> ::PlaneWar::SCOpenRedEnvelope* Arena::CreateMaybeMessage<::PlaneWar::SCOpenRedEnvelope>(Arena*);
template<> ::PlaneWar::SCPersonalPoolChangeNotify* Arena::CreateMaybeMessage<::PlaneWar::SCPersonalPoolChangeNotify>(Arena*);
template<> ::PlaneWar::SCPersonalPoolInfo* Arena::CreateMaybeMessage<::PlaneWar::SCPersonalPoolInfo>(Arena*);
template<> ::PlaneWar::SCPiggyBankChangeNotify* Arena::CreateMaybeMessage<::PlaneWar::SCPiggyBankChangeNotify>(Arena*);
template<> ::PlaneWar::SCPiggyBankInfo* Arena::CreateMaybeMessage<::PlaneWar::SCPiggyBankInfo>(Arena*);
template<> ::PlaneWar::SCPiggyBankOpenFinish* Arena::CreateMaybeMessage<::PlaneWar::SCPiggyBankOpenFinish>(Arena*);
template<> ::PlaneWar::SCPlanePosSync* Arena::CreateMaybeMessage<::PlaneWar::SCPlanePosSync>(Arena*);
template<> ::PlaneWar::SCPreHit* Arena::CreateMaybeMessage<::PlaneWar::SCPreHit>(Arena*);
template<> ::PlaneWar::SCQueryPackageMarquee* Arena::CreateMaybeMessage<::PlaneWar::SCQueryPackageMarquee>(Arena*);
template<> ::PlaneWar::SCQueryPackagePurchase* Arena::CreateMaybeMessage<::PlaneWar::SCQueryPackagePurchase>(Arena*);
template<> ::PlaneWar::SCRankList* Arena::CreateMaybeMessage<::PlaneWar::SCRankList>(Arena*);
template<> ::PlaneWar::SCRankSeasonStatus* Arena::CreateMaybeMessage<::PlaneWar::SCRankSeasonStatus>(Arena*);
template<> ::PlaneWar::SCRankUpgrade* Arena::CreateMaybeMessage<::PlaneWar::SCRankUpgrade>(Arena*);
template<> ::PlaneWar::SCReady* Arena::CreateMaybeMessage<::PlaneWar::SCReady>(Arena*);
template<> ::PlaneWar::SCReceiveExtraGradeReward* Arena::CreateMaybeMessage<::PlaneWar::SCReceiveExtraGradeReward>(Arena*);
template<> ::PlaneWar::SCReceiveGradeReward* Arena::CreateMaybeMessage<::PlaneWar::SCReceiveGradeReward>(Arena*);
template<> ::PlaneWar::SCRedEnvelopeInfo* Arena::CreateMaybeMessage<::PlaneWar::SCRedEnvelopeInfo>(Arena*);
template<> ::PlaneWar::SCRedEnvelopeOpStatusNotify* Arena::CreateMaybeMessage<::PlaneWar::SCRedEnvelopeOpStatusNotify>(Arena*);
template<> ::PlaneWar::SCRedEnvelopePoint* Arena::CreateMaybeMessage<::PlaneWar::SCRedEnvelopePoint>(Arena*);
template<> ::PlaneWar::SCRoomInfoChangeNotify* Arena::CreateMaybeMessage<::PlaneWar::SCRoomInfoChangeNotify>(Arena*);
template<> ::PlaneWar::SCScratchCardList* Arena::CreateMaybeMessage<::PlaneWar::SCScratchCardList>(Arena*);
template<> ::PlaneWar::SCSelectTitle* Arena::CreateMaybeMessage<::PlaneWar::SCSelectTitle>(Arena*);
template<> ::PlaneWar::SCSelfVideoRecord* Arena::CreateMaybeMessage<::PlaneWar::SCSelfVideoRecord>(Arena*);
template<> ::PlaneWar::SCSetPersonalPoolEnable* Arena::CreateMaybeMessage<::PlaneWar::SCSetPersonalPoolEnable>(Arena*);
template<> ::PlaneWar::SCSetPlane* Arena::CreateMaybeMessage<::PlaneWar::SCSetPlane>(Arena*);
template<> ::PlaneWar::SCSetWings* Arena::CreateMaybeMessage<::PlaneWar::SCSetWings>(Arena*);
template<> ::PlaneWar::SCShot* Arena::CreateMaybeMessage<::PlaneWar::SCShot>(Arena*);
template<> ::PlaneWar::SCStateEnd* Arena::CreateMaybeMessage<::PlaneWar::SCStateEnd>(Arena*);
template<> ::PlaneWar::SCStateForceSettle* Arena::CreateMaybeMessage<::PlaneWar::SCStateForceSettle>(Arena*);
template<> ::PlaneWar::SCSwitchBackGround* Arena::CreateMaybeMessage<::PlaneWar::SCSwitchBackGround>(Arena*);
template<> ::PlaneWar::SCSyncAnimation* Arena::CreateMaybeMessage<::PlaneWar::SCSyncAnimation>(Arena*);
template<> ::PlaneWar::SCSyncBlackHolePos* Arena::CreateMaybeMessage<::PlaneWar::SCSyncBlackHolePos>(Arena*);
template<> ::PlaneWar::SCSyncConfigs* Arena::CreateMaybeMessage<::PlaneWar::SCSyncConfigs>(Arena*);
template<> ::PlaneWar::SCSyncMonsterInfo* Arena::CreateMaybeMessage<::PlaneWar::SCSyncMonsterInfo>(Arena*);
template<> ::PlaneWar::SCSyncPropsToHall* Arena::CreateMaybeMessage<::PlaneWar::SCSyncPropsToHall>(Arena*);
template<> ::PlaneWar::SCSyncTextConfig* Arena::CreateMaybeMessage<::PlaneWar::SCSyncTextConfig>(Arena*);
template<> ::PlaneWar::SCSyncTime* Arena::CreateMaybeMessage<::PlaneWar::SCSyncTime>(Arena*);
template<> ::PlaneWar::SCSyncWeaponState* Arena::CreateMaybeMessage<::PlaneWar::SCSyncWeaponState>(Arena*);
template<> ::PlaneWar::SCTitleActiveNotify* Arena::CreateMaybeMessage<::PlaneWar::SCTitleActiveNotify>(Arena*);
template<> ::PlaneWar::SCTitleList* Arena::CreateMaybeMessage<::PlaneWar::SCTitleList>(Arena*);
template<> ::PlaneWar::SCTransform* Arena::CreateMaybeMessage<::PlaneWar::SCTransform>(Arena*);
template<> ::PlaneWar::SCUpdateBulletData* Arena::CreateMaybeMessage<::PlaneWar::SCUpdateBulletData>(Arena*);
template<> ::PlaneWar::SCUpdateChestStatus* Arena::CreateMaybeMessage<::PlaneWar::SCUpdateChestStatus>(Arena*);
template<> ::PlaneWar::SCUpgradePoolReward* Arena::CreateMaybeMessage<::PlaneWar::SCUpgradePoolReward>(Arena*);
template<> ::PlaneWar::SCUpgradeRedEnvelope* Arena::CreateMaybeMessage<::PlaneWar::SCUpgradeRedEnvelope>(Arena*);
template<> ::PlaneWar::SCUseMissile* Arena::CreateMaybeMessage<::PlaneWar::SCUseMissile>(Arena*);
template<> ::PlaneWar::SCUseMissileBatch* Arena::CreateMaybeMessage<::PlaneWar::SCUseMissileBatch>(Arena*);
template<> ::PlaneWar::SCUseRoulette* Arena::CreateMaybeMessage<::PlaneWar::SCUseRoulette>(Arena*);
template<> ::PlaneWar::SCUseScratchCard* Arena::CreateMaybeMessage<::PlaneWar::SCUseScratchCard>(Arena*);
template<> ::PlaneWar::SCUserEnterNotify* Arena::CreateMaybeMessage<::PlaneWar::SCUserEnterNotify>(Arena*);
template<> ::PlaneWar::SCVerifySeasonChange* Arena::CreateMaybeMessage<::PlaneWar::SCVerifySeasonChange>(Arena*);
template<> ::PlaneWar::SCVideoRank* Arena::CreateMaybeMessage<::PlaneWar::SCVideoRank>(Arena*);
template<> ::PlaneWar::SCWaterDropInfo* Arena::CreateMaybeMessage<::PlaneWar::SCWaterDropInfo>(Arena*);
template<> ::PlaneWar::SCWeaponEarnRecord* Arena::CreateMaybeMessage<::PlaneWar::SCWeaponEarnRecord>(Arena*);
template<> ::PlaneWar::SCWeaponPieceInfo* Arena::CreateMaybeMessage<::PlaneWar::SCWeaponPieceInfo>(Arena*);
template<> ::PlaneWar::SC_SceneInfo* Arena::CreateMaybeMessage<::PlaneWar::SC_SceneInfo>(Arena*);
template<> ::PlaneWar::ScratchInfo* Arena::CreateMaybeMessage<::PlaneWar::ScratchInfo>(Arena*);
template<> ::PlaneWar::SelfVideoInfo* Arena::CreateMaybeMessage<::PlaneWar::SelfVideoInfo>(Arena*);
template<> ::PlaneWar::SettleInfo* Arena::CreateMaybeMessage<::PlaneWar::SettleInfo>(Arena*);
template<> ::PlaneWar::SpecEffect* Arena::CreateMaybeMessage<::PlaneWar::SpecEffect>(Arena*);
template<> ::PlaneWar::StateInfo* Arena::CreateMaybeMessage<::PlaneWar::StateInfo>(Arena*);
template<> ::PlaneWar::TextInfo* Arena::CreateMaybeMessage<::PlaneWar::TextInfo>(Arena*);
template<> ::PlaneWar::TimingMonster* Arena::CreateMaybeMessage<::PlaneWar::TimingMonster>(Arena*);
template<> ::PlaneWar::TitleInfo* Arena::CreateMaybeMessage<::PlaneWar::TitleInfo>(Arena*);
template<> ::PlaneWar::ToadInfo* Arena::CreateMaybeMessage<::PlaneWar::ToadInfo>(Arena*);
template<> ::PlaneWar::TreasureInfo* Arena::CreateMaybeMessage<::PlaneWar::TreasureInfo>(Arena*);
template<> ::PlaneWar::TriggerBullet* Arena::CreateMaybeMessage<::PlaneWar::TriggerBullet>(Arena*);
template<> ::PlaneWar::VideoCommon* Arena::CreateMaybeMessage<::PlaneWar::VideoCommon>(Arena*);
template<> ::PlaneWar::WareGivingInfo* Arena::CreateMaybeMessage<::PlaneWar::WareGivingInfo>(Arena*);
template<> ::PlaneWar::WareInfo* Arena::CreateMaybeMessage<::PlaneWar::WareInfo>(Arena*);
template<> ::PlaneWar::WeaponConfig* Arena::CreateMaybeMessage<::PlaneWar::WeaponConfig>(Arena*);
template<> ::PlaneWar::WeaponInfo* Arena::CreateMaybeMessage<::PlaneWar::WeaponInfo>(Arena*);
template<> ::PlaneWar::WeaponState* Arena::CreateMaybeMessage<::PlaneWar::WeaponState>(Arena*);
template<> ::PlaneWar::WeaponUseCondition* Arena::CreateMaybeMessage<::PlaneWar::WeaponUseCondition>(Arena*);
template<> ::PlaneWar::WingsInfo* Arena::CreateMaybeMessage<::PlaneWar::WingsInfo>(Arena*);
template<> ::PlaneWar::WingsSpecEffect* Arena::CreateMaybeMessage<::PlaneWar::WingsSpecEffect>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PlaneWar {

enum EMsgIDSubGame : int {
  Login = 0,
  Logout = 2,
  Ready = 3,
  MonsterSpawn = 4,
  Shot = 5,
  Hit = 6,
  MonsterDestory = 7,
  Lock = 8,
  Transform = 9,
  PlanePosSync = 10,
  StateEnd = 11,
  ModRatio = 12,
  GainNotify = 13,
  GainSettle = 14,
  SetPlane = 15,
  UserEnterNotify = 16,
  SwitchBackGround = 17,
  SyncMonsterInfo = 18,
  ScratchCardList = 19,
  UseScratchCard = 20,
  ExplodeSettle = 21,
  FallIntoBlackHole = 22,
  SyncBlackHolePos = 23,
  Interaction = 24,
  ActivityInfo = 25,
  GetTaskReward = 26,
  GetTaskInfo = 27,
  NoticeInfoChange = 28,
  NoticeHallProsChange = 29,
  NoticeTimingMonster = 30,
  PiggyBankInfo = 31,
  OpenPiggyBank = 32,
  PiggyBankOpenFinish = 33,
  PiggyBankChangeNotify = 34,
  SetPersonalPoolEnable = 35,
  PersonalPoolInfo = 36,
  DrawPersonalPool = 37,
  PersonalPoolChangeNotify = 38,
  UseMissile = 39,
  MonsterCall = 40,
  ClickStatic = 41,
  RankList = 42,
  LastRankList = 43,
  TitleList = 44,
  SelectTitle = 45,
  TitleActiveNotify = 46,
  RoomInfoChangeNotify = 47,
  MatchBrief = 48,
  MatchDetail = 49,
  MatchReward = 50,
  MatchRewardNotify = 51,
  GiftList = 52,
  GiftExpireNotify = 53,
  GetMatchTaskReward = 54,
  WeaponPieceInfo = 55,
  BuyWeapon = 56,
  WeaponEarnRecord = 57,
  StateForceSettle = 58,
  AddMissedBullet = 59,
  UpdateBulletData = 60,
  UseMissileBatch = 61,
  SyncPropsToHall = 62,
  ChangeTable = 63,
  UpgradePoolReward = 64,
  GetPoolLuckyReward = 65,
  UseRoulette = 66,
  RedEnvelopePoint = 67,
  RedEnvelopeInfo = 68,
  OpenRedEnvelope = 69,
  UpgradeRedEnvelope = 70,
  CommonRedEnvelopeInfo = 71,
  OpenCommonRedEnvelope = 72,
  GrantCommonRedEnvelopeRank = 73,
  OpenCommonRedEnvelopeRank = 74,
  GrantCommonRedEnvelopeRecord = 75,
  OpenCommonRedEnvelopeRecord = 76,
  RedEnvelopeOpStatusNotify = 77,
  SyncWeaponState = 78,
  PreHit = 79,
  SyncAnimation = 80,
  GetAnimations = 81,
  SyncConfigs = 82,
  ConfirmWeaponExist = 83,
  GetVideo = 84,
  SelfVideoRecord = 85,
  VideoRank = 86,
  GetGradeRankInfo = 87,
  ReceiveGradeReward = 88,
  SyncTime = 89,
  RankUpgrade = 90,
  RankSeasonStatus = 91,
  NoticePropsOverdue = 92,
  QueryPackagePurchase = 93,
  SetWings = 94,
  GetTableUserInfo = 95,
  VerifySeasonChange = 96,
  ExistUnReceiveRankReward = 97,
  GetGradeRewardInfo = 98,
  GamePurchasePush = 99,
  QueryPackageMarquee = 100,
  GetGradeRankList = 101,
  ReceiveExtraGradeReward = 102,
  BuyPlane = 103,
  BuyWings = 104,
  UpdateChestStatus = 105,
  ChestConfig = 106,
  OpenChest = 107,
  SelectChestReward = 108,
  ChestSetAutoSelect = 109,
  ChestSetEnable = 110,
  WaterDropInfo = 120,
  SyncTextConfig = 121,
  FinishSpecial = 122,
  FinishRecoverScore = 123,
  MissileScore = 124,
  ExtraMul = 125,
  EMsgIDSubGame_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EMsgIDSubGame_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EMsgIDSubGame_IsValid(int value);
constexpr EMsgIDSubGame EMsgIDSubGame_MIN = Login;
constexpr EMsgIDSubGame EMsgIDSubGame_MAX = ExtraMul;
constexpr int EMsgIDSubGame_ARRAYSIZE = EMsgIDSubGame_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDSubGame_descriptor();
template<typename T>
inline const std::string& EMsgIDSubGame_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMsgIDSubGame>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMsgIDSubGame_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMsgIDSubGame_descriptor(), enum_t_value);
}
inline bool EMsgIDSubGame_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMsgIDSubGame* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMsgIDSubGame>(
    EMsgIDSubGame_descriptor(), name, value);
}
enum ErrorCode : int {
  Success = 0,
  Fail = 1000,
  EnterRoomFail = 1001,
  LoadBaseInfoFail = 1002,
  LoadVipInfoFail = 1003,
  LoadExtraInfoFail = 1004,
  CreatePlayerError = 1005,
  PlayerNotExist = 1006,
  TableNotExist = 1007,
  MoneyNotEnough = 1008,
  BulletError = 1009,
  MonsterNotExist = 1010,
  PlayerNotInTable = 1011,
  ScratchCardNotEnough = 1012,
  InteractionTypeNotExist = 1013,
  InteractionNotCooldown = 1014,
  InteractionTargetError = 1015,
  TokenVerifyFailed = 1016,
  TaskNotEnough = 1017,
  DiamondNotEnough = 1018,
  ConcurrentLogin = 1019,
  AlreadyLogin = 1020,
  ServerClosed = 1021,
  MissileNotEnough = 1400,
  PersonalPoolDisable = 1500,
  PersonalPoolNotEnough = 1501,
  PersonalPoolSaveError = 1502,
  PersonalPoolGetRewardError = 1503,
  NoTmpPoolReward = 1504,
  PoolUpgradeFail = 1505,
  PoolLuckyValueNotEnough = 1506,
  PiggyBankNotEnable = 1900,
  PiggyBankNoReward = 1901,
  PiggyBankRewardError = 1902,
  PiggyBankPackageError = 1903,
  CallNotEnough = 2000,
  CallSpecialMonsterFull = 2001,
  CallMonsterScreenLimit = 2002,
  CallCoolDown = 2003,
  CallExceedMax = 2004,
  RankTypeError = 2100,
  RankIndexError = 2101,
  TitleConfNotExist = 2200,
  TitleNotActive = 2201,
  NotInMatch = 2300,
  NoSuchTask = 2301,
  HaveGotTaskReward = 2302,
  NotAchieveTask = 2303,
  WeaponPieceNotEnough = 2400,
  GetWeaponRecordFail = 2401,
  WeaponConfNotExist = 2402,
  CantBuyWeapon = 2403,
  OpenChestFail = 2404,
  SelectChestRewardFail = 2405,
  RouletteNotEnough = 2500,
  RouletteConfNotExist = 2501,
  OpenRedEnvelopePointNotEnough = 2600,
  OpenRedEnvelopeIndexError = 2601,
  NoTmpRedEnvelopeReward = 2602,
  RedEnvelopeUpgradeNumNoEnough = 2603,
  GetCommonRedEnvelopeInfoFail = 2604,
  OpenCommonRedEnvelopeNumNotEnough = 2605,
  OpenCommonRedEnvelopeFail = 2606,
  CommonRedEnvelopeInvalid = 2607,
  GetRedEnvelopeGrantRankFail = 2608,
  GetRedEnvelopeOpenRankFail = 2609,
  GetRedEnvelopeGrantRecordFail = 2610,
  GetRedEnvelopeOpenRecordFail = 2611,
  VideoNotExist = 2700,
  VideoListLimit = 2701,
  GradeIsNotOpen = 2702,
  GetGradeInfoError = 2703,
  WingsNotObtained = 2704,
  UniqueIdError = 2705,
  AlreadyReceiveError = 2706,
  NotEnoughGiftBag = 2707,
  AlreadyHaveThisPropsErr = 2708,
  PropsIdErr = 2709,
  CanNotBuyPropsErr = 2710,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ErrorCode_IsValid(int value);
constexpr ErrorCode ErrorCode_MIN = Success;
constexpr ErrorCode ErrorCode_MAX = CanNotBuyPropsErr;
constexpr int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor();
template<typename T>
inline const std::string& ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrorCode_descriptor(), enum_t_value);
}
inline bool ErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
enum RedOpenStatus : int {
  RedOpenLock = 0,
  RedOpenUnLocked = 1,
  RedOpenNotActive = 2,
  RedOpenActive = 3,
  RedOpenStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RedOpenStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RedOpenStatus_IsValid(int value);
constexpr RedOpenStatus RedOpenStatus_MIN = RedOpenLock;
constexpr RedOpenStatus RedOpenStatus_MAX = RedOpenActive;
constexpr int RedOpenStatus_ARRAYSIZE = RedOpenStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RedOpenStatus_descriptor();
template<typename T>
inline const std::string& RedOpenStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RedOpenStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RedOpenStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RedOpenStatus_descriptor(), enum_t_value);
}
inline bool RedOpenStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RedOpenStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RedOpenStatus>(
    RedOpenStatus_descriptor(), name, value);
}
enum UpgradeRedResult : int {
  UpgradeAbandon = 0,
  UpgradeFail = 1,
  UpgradeSuccess = 2,
  UpgradeRedResult_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UpgradeRedResult_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UpgradeRedResult_IsValid(int value);
constexpr UpgradeRedResult UpgradeRedResult_MIN = UpgradeAbandon;
constexpr UpgradeRedResult UpgradeRedResult_MAX = UpgradeSuccess;
constexpr int UpgradeRedResult_ARRAYSIZE = UpgradeRedResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpgradeRedResult_descriptor();
template<typename T>
inline const std::string& UpgradeRedResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UpgradeRedResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UpgradeRedResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UpgradeRedResult_descriptor(), enum_t_value);
}
inline bool UpgradeRedResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UpgradeRedResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UpgradeRedResult>(
    UpgradeRedResult_descriptor(), name, value);
}
enum GrantRedStatus : int {
  RedOpened = 0,
  RedNoOpened = 1,
  RedNotShow = 2,
  RedCountDown = 3,
  RedExpired = 4,
  GrantRedStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GrantRedStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GrantRedStatus_IsValid(int value);
constexpr GrantRedStatus GrantRedStatus_MIN = RedOpened;
constexpr GrantRedStatus GrantRedStatus_MAX = RedExpired;
constexpr int GrantRedStatus_ARRAYSIZE = GrantRedStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GrantRedStatus_descriptor();
template<typename T>
inline const std::string& GrantRedStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GrantRedStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GrantRedStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GrantRedStatus_descriptor(), enum_t_value);
}
inline bool GrantRedStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GrantRedStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GrantRedStatus>(
    GrantRedStatus_descriptor(), name, value);
}
enum RedOpStatus : int {
  RedOpClose = 0,
  RedOpOpen = 1,
  RedOpUpgrade = 2,
  RedOpGrantReward = 3,
  RedOpOpenReward = 4,
  RedOpStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RedOpStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RedOpStatus_IsValid(int value);
constexpr RedOpStatus RedOpStatus_MIN = RedOpClose;
constexpr RedOpStatus RedOpStatus_MAX = RedOpOpenReward;
constexpr int RedOpStatus_ARRAYSIZE = RedOpStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RedOpStatus_descriptor();
template<typename T>
inline const std::string& RedOpStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RedOpStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RedOpStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RedOpStatus_descriptor(), enum_t_value);
}
inline bool RedOpStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RedOpStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RedOpStatus>(
    RedOpStatus_descriptor(), name, value);
}
enum ChestType : int {
  ChestTypePorcelain = 0,
  ChestTypeBronze = 1,
  ChestTypeSilver = 2,
  ChestTypeGold = 3,
  ChestType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ChestType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ChestType_IsValid(int value);
constexpr ChestType ChestType_MIN = ChestTypePorcelain;
constexpr ChestType ChestType_MAX = ChestTypeGold;
constexpr int ChestType_ARRAYSIZE = ChestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChestType_descriptor();
template<typename T>
inline const std::string& ChestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChestType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChestType_descriptor(), enum_t_value);
}
inline bool ChestType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChestType>(
    ChestType_descriptor(), name, value);
}
enum ChestAutoSelectOption : int {
  None = 0,
  RedPacketTicket = 1,
  Money = 2,
  ChestAutoSelectOption_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ChestAutoSelectOption_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ChestAutoSelectOption_IsValid(int value);
constexpr ChestAutoSelectOption ChestAutoSelectOption_MIN = None;
constexpr ChestAutoSelectOption ChestAutoSelectOption_MAX = Money;
constexpr int ChestAutoSelectOption_ARRAYSIZE = ChestAutoSelectOption_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChestAutoSelectOption_descriptor();
template<typename T>
inline const std::string& ChestAutoSelectOption_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChestAutoSelectOption>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChestAutoSelectOption_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChestAutoSelectOption_descriptor(), enum_t_value);
}
inline bool ChestAutoSelectOption_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChestAutoSelectOption* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChestAutoSelectOption>(
    ChestAutoSelectOption_descriptor(), name, value);
}
// ===================================================================

class MissileFishListInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.MissileFishListInfo) */ {
 public:
  inline MissileFishListInfo() : MissileFishListInfo(nullptr) {}
  virtual ~MissileFishListInfo();

  MissileFishListInfo(const MissileFishListInfo& from);
  MissileFishListInfo(MissileFishListInfo&& from) noexcept
    : MissileFishListInfo() {
    *this = ::std::move(from);
  }

  inline MissileFishListInfo& operator=(const MissileFishListInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissileFishListInfo& operator=(MissileFishListInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MissileFishListInfo& default_instance();

  static inline const MissileFishListInfo* internal_default_instance() {
    return reinterpret_cast<const MissileFishListInfo*>(
               &_MissileFishListInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MissileFishListInfo& a, MissileFishListInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MissileFishListInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MissileFishListInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MissileFishListInfo* New() const final {
    return CreateMaybeMessage<MissileFishListInfo>(nullptr);
  }

  MissileFishListInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MissileFishListInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MissileFishListInfo& from);
  void MergeFrom(const MissileFishListInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissileFishListInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.MissileFishListInfo";
  }
  protected:
  explicit MissileFishListInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFishListFieldNumber = 1,
  };
  // repeated int32 fish_list = 1;
  int fish_list_size() const;
  private:
  int _internal_fish_list_size() const;
  public:
  void clear_fish_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_fish_list() const;
  void _internal_add_fish_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_fish_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 fish_list(int index) const;
  void set_fish_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_fish_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      fish_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_fish_list();

  // @@protoc_insertion_point(class_scope:PlaneWar.MissileFishListInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > fish_list_;
  mutable std::atomic<int> _fish_list_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class Decimal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.Decimal) */ {
 public:
  inline Decimal() : Decimal(nullptr) {}
  virtual ~Decimal();

  Decimal(const Decimal& from);
  Decimal(Decimal&& from) noexcept
    : Decimal() {
    *this = ::std::move(from);
  }

  inline Decimal& operator=(const Decimal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Decimal& operator=(Decimal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Decimal& default_instance();

  static inline const Decimal* internal_default_instance() {
    return reinterpret_cast<const Decimal*>(
               &_Decimal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Decimal& a, Decimal& b) {
    a.Swap(&b);
  }
  inline void Swap(Decimal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Decimal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Decimal* New() const final {
    return CreateMaybeMessage<Decimal>(nullptr);
  }

  Decimal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Decimal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Decimal& from);
  void MergeFrom(const Decimal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Decimal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.Decimal";
  }
  protected:
  explicit Decimal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
    kDenomFieldNumber = 2,
  };
  // int32 num = 1;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 denom = 2;
  void clear_denom();
  ::PROTOBUF_NAMESPACE_ID::int32 denom() const;
  void set_denom(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_denom() const;
  void _internal_set_denom(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.Decimal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  ::PROTOBUF_NAMESPACE_ID::int32 denom_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SC_SceneInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SC_SceneInfo) */ {
 public:
  inline SC_SceneInfo() : SC_SceneInfo(nullptr) {}
  virtual ~SC_SceneInfo();

  SC_SceneInfo(const SC_SceneInfo& from);
  SC_SceneInfo(SC_SceneInfo&& from) noexcept
    : SC_SceneInfo() {
    *this = ::std::move(from);
  }

  inline SC_SceneInfo& operator=(const SC_SceneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_SceneInfo& operator=(SC_SceneInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_SceneInfo& default_instance();

  static inline const SC_SceneInfo* internal_default_instance() {
    return reinterpret_cast<const SC_SceneInfo*>(
               &_SC_SceneInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SC_SceneInfo& a, SC_SceneInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_SceneInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_SceneInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_SceneInfo* New() const final {
    return CreateMaybeMessage<SC_SceneInfo>(nullptr);
  }

  SC_SceneInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_SceneInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_SceneInfo& from);
  void MergeFrom(const SC_SceneInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_SceneInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SC_SceneInfo";
  }
  protected:
  explicit SC_SceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBetListFieldNumber = 1,
    kPlayerInfoFieldNumber = 2,
    kPiecePayFieldNumber = 4,
    kRoomInfoFieldNumber = 3,
  };
  // repeated int32 bet_list = 1;
  int bet_list_size() const;
  private:
  int _internal_bet_list_size() const;
  public:
  void clear_bet_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bet_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_bet_list() const;
  void _internal_add_bet_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_bet_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 bet_list(int index) const;
  void set_bet_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_bet_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      bet_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_bet_list();

  // repeated .PlaneWar.PlayerInfo player_info = 2;
  int player_info_size() const;
  private:
  int _internal_player_info_size() const;
  public:
  void clear_player_info();
  ::PlaneWar::PlayerInfo* mutable_player_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PlayerInfo >*
      mutable_player_info();
  private:
  const ::PlaneWar::PlayerInfo& _internal_player_info(int index) const;
  ::PlaneWar::PlayerInfo* _internal_add_player_info();
  public:
  const ::PlaneWar::PlayerInfo& player_info(int index) const;
  ::PlaneWar::PlayerInfo* add_player_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PlayerInfo >&
      player_info() const;

  // repeated int32 piece_pay = 4;
  int piece_pay_size() const;
  private:
  int _internal_piece_pay_size() const;
  public:
  void clear_piece_pay();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_piece_pay(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_piece_pay() const;
  void _internal_add_piece_pay(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_piece_pay();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 piece_pay(int index) const;
  void set_piece_pay(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_piece_pay(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      piece_pay() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_piece_pay();

  // .PlaneWar.RoomInfo roomInfo = 3;
  bool has_roominfo() const;
  private:
  bool _internal_has_roominfo() const;
  public:
  void clear_roominfo();
  const ::PlaneWar::RoomInfo& roominfo() const;
  ::PlaneWar::RoomInfo* release_roominfo();
  ::PlaneWar::RoomInfo* mutable_roominfo();
  void set_allocated_roominfo(::PlaneWar::RoomInfo* roominfo);
  private:
  const ::PlaneWar::RoomInfo& _internal_roominfo() const;
  ::PlaneWar::RoomInfo* _internal_mutable_roominfo();
  public:
  void unsafe_arena_set_allocated_roominfo(
      ::PlaneWar::RoomInfo* roominfo);
  ::PlaneWar::RoomInfo* unsafe_arena_release_roominfo();

  // @@protoc_insertion_point(class_scope:PlaneWar.SC_SceneInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > bet_list_;
  mutable std::atomic<int> _bet_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PlayerInfo > player_info_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > piece_pay_;
  mutable std::atomic<int> _piece_pay_cached_byte_size_;
  ::PlaneWar::RoomInfo* roominfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSLogin PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSLogin) */ {
 public:
  inline CSLogin() : CSLogin(nullptr) {}
  virtual ~CSLogin();

  CSLogin(const CSLogin& from);
  CSLogin(CSLogin&& from) noexcept
    : CSLogin() {
    *this = ::std::move(from);
  }

  inline CSLogin& operator=(const CSLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSLogin& operator=(CSLogin&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSLogin& default_instance();

  static inline const CSLogin* internal_default_instance() {
    return reinterpret_cast<const CSLogin*>(
               &_CSLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CSLogin& a, CSLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(CSLogin* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSLogin* New() const final {
    return CreateMaybeMessage<CSLogin>(nullptr);
  }

  CSLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSLogin& from);
  void MergeFrom(const CSLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSLogin";
  }
  protected:
  explicit CSLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // string token = 2;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int32 playerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCLogin PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCLogin) */ {
 public:
  inline SCLogin() : SCLogin(nullptr) {}
  virtual ~SCLogin();

  SCLogin(const SCLogin& from);
  SCLogin(SCLogin&& from) noexcept
    : SCLogin() {
    *this = ::std::move(from);
  }

  inline SCLogin& operator=(const SCLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCLogin& operator=(SCLogin&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCLogin& default_instance();

  static inline const SCLogin* internal_default_instance() {
    return reinterpret_cast<const SCLogin*>(
               &_SCLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SCLogin& a, SCLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(SCLogin* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCLogin* New() const final {
    return CreateMaybeMessage<SCLogin>(nullptr);
  }

  SCLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCLogin& from);
  void MergeFrom(const SCLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCLogin";
  }
  protected:
  explicit SCLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneIdFieldNumber = 1,
    kArenaIDFieldNumber = 2,
  };
  // int32 sceneId = 1;
  void clear_sceneid();
  ::PROTOBUF_NAMESPACE_ID::int32 sceneid() const;
  void set_sceneid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sceneid() const;
  void _internal_set_sceneid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 arenaID = 2;
  void clear_arenaid();
  ::PROTOBUF_NAMESPACE_ID::int32 arenaid() const;
  void set_arenaid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_arenaid() const;
  void _internal_set_arenaid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 sceneid_;
  ::PROTOBUF_NAMESPACE_ID::int32 arenaid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSLogout PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSLogout) */ {
 public:
  inline CSLogout() : CSLogout(nullptr) {}
  virtual ~CSLogout();

  CSLogout(const CSLogout& from);
  CSLogout(CSLogout&& from) noexcept
    : CSLogout() {
    *this = ::std::move(from);
  }

  inline CSLogout& operator=(const CSLogout& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSLogout& operator=(CSLogout&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSLogout& default_instance();

  static inline const CSLogout* internal_default_instance() {
    return reinterpret_cast<const CSLogout*>(
               &_CSLogout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CSLogout& a, CSLogout& b) {
    a.Swap(&b);
  }
  inline void Swap(CSLogout* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSLogout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSLogout* New() const final {
    return CreateMaybeMessage<CSLogout>(nullptr);
  }

  CSLogout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSLogout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSLogout& from);
  void MergeFrom(const CSLogout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSLogout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSLogout";
  }
  protected:
  explicit CSLogout(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.CSLogout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCLogout PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCLogout) */ {
 public:
  inline SCLogout() : SCLogout(nullptr) {}
  virtual ~SCLogout();

  SCLogout(const SCLogout& from);
  SCLogout(SCLogout&& from) noexcept
    : SCLogout() {
    *this = ::std::move(from);
  }

  inline SCLogout& operator=(const SCLogout& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCLogout& operator=(SCLogout&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCLogout& default_instance();

  static inline const SCLogout* internal_default_instance() {
    return reinterpret_cast<const SCLogout*>(
               &_SCLogout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SCLogout& a, SCLogout& b) {
    a.Swap(&b);
  }
  inline void Swap(SCLogout* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCLogout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCLogout* New() const final {
    return CreateMaybeMessage<SCLogout>(nullptr);
  }

  SCLogout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCLogout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCLogout& from);
  void MergeFrom(const SCLogout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCLogout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCLogout";
  }
  protected:
  explicit SCLogout(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogoutTypeFieldNumber = 1,
    kChairFieldNumber = 2,
  };
  // int32 logoutType = 1;
  void clear_logouttype();
  ::PROTOBUF_NAMESPACE_ID::int32 logouttype() const;
  void set_logouttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_logouttype() const;
  void _internal_set_logouttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 chair = 2;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCLogout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 logouttype_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CommonPropInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CommonPropInfo) */ {
 public:
  inline CommonPropInfo() : CommonPropInfo(nullptr) {}
  virtual ~CommonPropInfo();

  CommonPropInfo(const CommonPropInfo& from);
  CommonPropInfo(CommonPropInfo&& from) noexcept
    : CommonPropInfo() {
    *this = ::std::move(from);
  }

  inline CommonPropInfo& operator=(const CommonPropInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonPropInfo& operator=(CommonPropInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommonPropInfo& default_instance();

  static inline const CommonPropInfo* internal_default_instance() {
    return reinterpret_cast<const CommonPropInfo*>(
               &_CommonPropInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CommonPropInfo& a, CommonPropInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonPropInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonPropInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonPropInfo* New() const final {
    return CreateMaybeMessage<CommonPropInfo>(nullptr);
  }

  CommonPropInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonPropInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonPropInfo& from);
  void MergeFrom(const CommonPropInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonPropInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CommonPropInfo";
  }
  protected:
  explicit CommonPropInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropIDFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // int32 propID = 1;
  void clear_propid();
  ::PROTOBUF_NAMESPACE_ID::int32 propid() const;
  void set_propid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_propid() const;
  void _internal_set_propid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CommonPropInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 propid_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class Pos PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.Pos) */ {
 public:
  inline Pos() : Pos(nullptr) {}
  virtual ~Pos();

  Pos(const Pos& from);
  Pos(Pos&& from) noexcept
    : Pos() {
    *this = ::std::move(from);
  }

  inline Pos& operator=(const Pos& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pos& operator=(Pos&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pos& default_instance();

  static inline const Pos* internal_default_instance() {
    return reinterpret_cast<const Pos*>(
               &_Pos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Pos& a, Pos& b) {
    a.Swap(&b);
  }
  inline void Swap(Pos* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pos* New() const final {
    return CreateMaybeMessage<Pos>(nullptr);
  }

  Pos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pos& from);
  void MergeFrom(const Pos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.Pos";
  }
  protected:
  explicit Pos(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.Pos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class BuffInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.BuffInfo) */ {
 public:
  inline BuffInfo() : BuffInfo(nullptr) {}
  virtual ~BuffInfo();

  BuffInfo(const BuffInfo& from);
  BuffInfo(BuffInfo&& from) noexcept
    : BuffInfo() {
    *this = ::std::move(from);
  }

  inline BuffInfo& operator=(const BuffInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuffInfo& operator=(BuffInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuffInfo& default_instance();

  static inline const BuffInfo* internal_default_instance() {
    return reinterpret_cast<const BuffInfo*>(
               &_BuffInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BuffInfo& a, BuffInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BuffInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuffInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuffInfo* New() const final {
    return CreateMaybeMessage<BuffInfo>(nullptr);
  }

  BuffInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuffInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuffInfo& from);
  void MergeFrom(const BuffInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuffInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.BuffInfo";
  }
  protected:
  explicit BuffInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComposeFieldNumber = 5,
    kDescFieldNumber = 6,
    kBuffUIDFieldNumber = 1,
    kNumFieldNumber = 2,
    kRatioFieldNumber = 3,
    kIsCritFieldNumber = 4,
    kSpeedUpRatioFieldNumber = 7,
    kOriginUIDFieldNumber = 8,
  };
  // repeated int32 compose = 5;
  int compose_size() const;
  private:
  int _internal_compose_size() const;
  public:
  void clear_compose();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_compose(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_compose() const;
  void _internal_add_compose(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_compose();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 compose(int index) const;
  void set_compose(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_compose(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      compose() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_compose();

  // repeated int32 desc = 6;
  int desc_size() const;
  private:
  int _internal_desc_size() const;
  public:
  void clear_desc();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_desc(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_desc() const;
  void _internal_add_desc(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_desc();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 desc(int index) const;
  void set_desc(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_desc(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      desc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_desc();

  // int32 buffUID = 1;
  void clear_buffuid();
  ::PROTOBUF_NAMESPACE_ID::int32 buffuid() const;
  void set_buffuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buffuid() const;
  void _internal_set_buffuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 3;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isCrit = 4;
  void clear_iscrit();
  bool iscrit() const;
  void set_iscrit(bool value);
  private:
  bool _internal_iscrit() const;
  void _internal_set_iscrit(bool value);
  public:

  // int32 speedUpRatio = 7;
  void clear_speedupratio();
  ::PROTOBUF_NAMESPACE_ID::int32 speedupratio() const;
  void set_speedupratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speedupratio() const;
  void _internal_set_speedupratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 originUID = 8;
  void clear_originuid();
  ::PROTOBUF_NAMESPACE_ID::int32 originuid() const;
  void set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_originuid() const;
  void _internal_set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.BuffInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > compose_;
  mutable std::atomic<int> _compose_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > desc_;
  mutable std::atomic<int> _desc_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 buffuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  bool iscrit_;
  ::PROTOBUF_NAMESPACE_ID::int32 speedupratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 originuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class BlackHoleInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.BlackHoleInfo) */ {
 public:
  inline BlackHoleInfo() : BlackHoleInfo(nullptr) {}
  virtual ~BlackHoleInfo();

  BlackHoleInfo(const BlackHoleInfo& from);
  BlackHoleInfo(BlackHoleInfo&& from) noexcept
    : BlackHoleInfo() {
    *this = ::std::move(from);
  }

  inline BlackHoleInfo& operator=(const BlackHoleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlackHoleInfo& operator=(BlackHoleInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlackHoleInfo& default_instance();

  static inline const BlackHoleInfo* internal_default_instance() {
    return reinterpret_cast<const BlackHoleInfo*>(
               &_BlackHoleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BlackHoleInfo& a, BlackHoleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BlackHoleInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlackHoleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlackHoleInfo* New() const final {
    return CreateMaybeMessage<BlackHoleInfo>(nullptr);
  }

  BlackHoleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlackHoleInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlackHoleInfo& from);
  void MergeFrom(const BlackHoleInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlackHoleInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.BlackHoleInfo";
  }
  protected:
  explicit BlackHoleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonsterListFieldNumber = 6,
    kPosFieldNumber = 4,
    kUidFieldNumber = 1,
    kNumFieldNumber = 2,
    kRatioFieldNumber = 3,
    kIsCritFieldNumber = 5,
    kOriginUIDFieldNumber = 7,
  };
  // repeated int32 monsterList = 6;
  int monsterlist_size() const;
  private:
  int _internal_monsterlist_size() const;
  public:
  void clear_monsterlist();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_monsterlist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_monsterlist() const;
  void _internal_add_monsterlist(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_monsterlist();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 monsterlist(int index) const;
  void set_monsterlist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_monsterlist(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      monsterlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_monsterlist();

  // .PlaneWar.Pos pos = 4;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::PlaneWar::Pos& pos() const;
  ::PlaneWar::Pos* release_pos();
  ::PlaneWar::Pos* mutable_pos();
  void set_allocated_pos(::PlaneWar::Pos* pos);
  private:
  const ::PlaneWar::Pos& _internal_pos() const;
  ::PlaneWar::Pos* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::PlaneWar::Pos* pos);
  ::PlaneWar::Pos* unsafe_arena_release_pos();

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 3;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isCrit = 5;
  void clear_iscrit();
  bool iscrit() const;
  void set_iscrit(bool value);
  private:
  bool _internal_iscrit() const;
  void _internal_set_iscrit(bool value);
  public:

  // int32 originUID = 7;
  void clear_originuid();
  ::PROTOBUF_NAMESPACE_ID::int32 originuid() const;
  void set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_originuid() const;
  void _internal_set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.BlackHoleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > monsterlist_;
  mutable std::atomic<int> _monsterlist_cached_byte_size_;
  ::PlaneWar::Pos* pos_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  bool iscrit_;
  ::PROTOBUF_NAMESPACE_ID::int32 originuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class FormInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.FormInfo) */ {
 public:
  inline FormInfo() : FormInfo(nullptr) {}
  virtual ~FormInfo();

  FormInfo(const FormInfo& from);
  FormInfo(FormInfo&& from) noexcept
    : FormInfo() {
    *this = ::std::move(from);
  }

  inline FormInfo& operator=(const FormInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormInfo& operator=(FormInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FormInfo& default_instance();

  static inline const FormInfo* internal_default_instance() {
    return reinterpret_cast<const FormInfo*>(
               &_FormInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(FormInfo& a, FormInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FormInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FormInfo* New() const final {
    return CreateMaybeMessage<FormInfo>(nullptr);
  }

  FormInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FormInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FormInfo& from);
  void MergeFrom(const FormInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.FormInfo";
  }
  protected:
  explicit FormInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 2,
    kFormFieldNumber = 1,
  };
  // .PlaneWar.Pos pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::PlaneWar::Pos& pos() const;
  ::PlaneWar::Pos* release_pos();
  ::PlaneWar::Pos* mutable_pos();
  void set_allocated_pos(::PlaneWar::Pos* pos);
  private:
  const ::PlaneWar::Pos& _internal_pos() const;
  ::PlaneWar::Pos* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::PlaneWar::Pos* pos);
  ::PlaneWar::Pos* unsafe_arena_release_pos();

  // int32 form = 1;
  void clear_form();
  ::PROTOBUF_NAMESPACE_ID::int32 form() const;
  void set_form(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_form() const;
  void _internal_set_form(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.FormInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::Pos* pos_;
  ::PROTOBUF_NAMESPACE_ID::int32 form_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class LockInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.LockInfo) */ {
 public:
  inline LockInfo() : LockInfo(nullptr) {}
  virtual ~LockInfo();

  LockInfo(const LockInfo& from);
  LockInfo(LockInfo&& from) noexcept
    : LockInfo() {
    *this = ::std::move(from);
  }

  inline LockInfo& operator=(const LockInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LockInfo& operator=(LockInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LockInfo& default_instance();

  static inline const LockInfo* internal_default_instance() {
    return reinterpret_cast<const LockInfo*>(
               &_LockInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(LockInfo& a, LockInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LockInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LockInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LockInfo* New() const final {
    return CreateMaybeMessage<LockInfo>(nullptr);
  }

  LockInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LockInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LockInfo& from);
  void MergeFrom(const LockInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.LockInfo";
  }
  protected:
  explicit LockInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLockUIDFieldNumber = 1,
    kColliderIndexFieldNumber = 2,
  };
  // int32 lockUID = 1;
  void clear_lockuid();
  ::PROTOBUF_NAMESPACE_ID::int32 lockuid() const;
  void set_lockuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lockuid() const;
  void _internal_set_lockuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 colliderIndex = 2;
  void clear_colliderindex();
  ::PROTOBUF_NAMESPACE_ID::int32 colliderindex() const;
  void set_colliderindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_colliderindex() const;
  void _internal_set_colliderindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.LockInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 lockuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 colliderindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class HitMode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.HitMode) */ {
 public:
  inline HitMode() : HitMode(nullptr) {}
  virtual ~HitMode();

  HitMode(const HitMode& from);
  HitMode(HitMode&& from) noexcept
    : HitMode() {
    *this = ::std::move(from);
  }

  inline HitMode& operator=(const HitMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline HitMode& operator=(HitMode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HitMode& default_instance();

  static inline const HitMode* internal_default_instance() {
    return reinterpret_cast<const HitMode*>(
               &_HitMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(HitMode& a, HitMode& b) {
    a.Swap(&b);
  }
  inline void Swap(HitMode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HitMode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HitMode* New() const final {
    return CreateMaybeMessage<HitMode>(nullptr);
  }

  HitMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HitMode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HitMode& from);
  void MergeFrom(const HitMode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HitMode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.HitMode";
  }
  protected:
  explicit HitMode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHitTypeFieldNumber = 1,
    kHitDirectionFieldNumber = 2,
  };
  // int32 hitType = 1;
  void clear_hittype();
  ::PROTOBUF_NAMESPACE_ID::int32 hittype() const;
  void set_hittype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hittype() const;
  void _internal_set_hittype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hitDirection = 2;
  void clear_hitdirection();
  ::PROTOBUF_NAMESPACE_ID::int32 hitdirection() const;
  void set_hitdirection(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hitdirection() const;
  void _internal_set_hitdirection(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.HitMode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 hittype_;
  ::PROTOBUF_NAMESPACE_ID::int32 hitdirection_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class WeaponState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.WeaponState) */ {
 public:
  inline WeaponState() : WeaponState(nullptr) {}
  virtual ~WeaponState();

  WeaponState(const WeaponState& from);
  WeaponState(WeaponState&& from) noexcept
    : WeaponState() {
    *this = ::std::move(from);
  }

  inline WeaponState& operator=(const WeaponState& from) {
    CopyFrom(from);
    return *this;
  }
  inline WeaponState& operator=(WeaponState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WeaponState& default_instance();

  static inline const WeaponState* internal_default_instance() {
    return reinterpret_cast<const WeaponState*>(
               &_WeaponState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(WeaponState& a, WeaponState& b) {
    a.Swap(&b);
  }
  inline void Swap(WeaponState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WeaponState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WeaponState* New() const final {
    return CreateMaybeMessage<WeaponState>(nullptr);
  }

  WeaponState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WeaponState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WeaponState& from);
  void MergeFrom(const WeaponState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WeaponState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.WeaponState";
  }
  protected:
  explicit WeaponState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kStepFieldNumber = 1,
    kDurationFieldNumber = 3,
    kMoveModeFieldNumber = 4,
  };
  // .PlaneWar.Pos position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::PlaneWar::Pos& position() const;
  ::PlaneWar::Pos* release_position();
  ::PlaneWar::Pos* mutable_position();
  void set_allocated_position(::PlaneWar::Pos* position);
  private:
  const ::PlaneWar::Pos& _internal_position() const;
  ::PlaneWar::Pos* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::PlaneWar::Pos* position);
  ::PlaneWar::Pos* unsafe_arena_release_position();

  // int32 step = 1;
  void clear_step();
  ::PROTOBUF_NAMESPACE_ID::int32 step() const;
  void set_step(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_step() const;
  void _internal_set_step(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 duration = 3;
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 moveMode = 4;
  void clear_movemode();
  ::PROTOBUF_NAMESPACE_ID::int32 movemode() const;
  void set_movemode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_movemode() const;
  void _internal_set_movemode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.WeaponState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::Pos* position_;
  ::PROTOBUF_NAMESPACE_ID::int32 step_;
  ::PROTOBUF_NAMESPACE_ID::int32 duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 movemode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SettleInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SettleInfo) */ {
 public:
  inline SettleInfo() : SettleInfo(nullptr) {}
  virtual ~SettleInfo();

  SettleInfo(const SettleInfo& from);
  SettleInfo(SettleInfo&& from) noexcept
    : SettleInfo() {
    *this = ::std::move(from);
  }

  inline SettleInfo& operator=(const SettleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SettleInfo& operator=(SettleInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SettleInfo& default_instance();

  static inline const SettleInfo* internal_default_instance() {
    return reinterpret_cast<const SettleInfo*>(
               &_SettleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SettleInfo& a, SettleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SettleInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SettleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SettleInfo* New() const final {
    return CreateMaybeMessage<SettleInfo>(nullptr);
  }

  SettleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SettleInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SettleInfo& from);
  void MergeFrom(const SettleInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SettleInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SettleInfo";
  }
  protected:
  explicit SettleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginUIDFieldNumber = 1,
    kBulletTypeFieldNumber = 2,
    kRewardFieldNumber = 3,
    kWeaponIDFieldNumber = 4,
  };
  // int32 originUID = 1;
  void clear_originuid();
  ::PROTOBUF_NAMESPACE_ID::int32 originuid() const;
  void set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_originuid() const;
  void _internal_set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bulletType = 2;
  void clear_bullettype();
  ::PROTOBUF_NAMESPACE_ID::int32 bullettype() const;
  void set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bullettype() const;
  void _internal_set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reward = 3;
  void clear_reward();
  ::PROTOBUF_NAMESPACE_ID::int32 reward() const;
  void set_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reward() const;
  void _internal_set_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 weaponID = 4;
  void clear_weaponid();
  ::PROTOBUF_NAMESPACE_ID::int32 weaponid() const;
  void set_weaponid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_weaponid() const;
  void _internal_set_weaponid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SettleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 originuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 bullettype_;
  ::PROTOBUF_NAMESPACE_ID::int32 reward_;
  ::PROTOBUF_NAMESPACE_ID::int32 weaponid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class GunInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.GunInfo) */ {
 public:
  inline GunInfo() : GunInfo(nullptr) {}
  virtual ~GunInfo();

  GunInfo(const GunInfo& from);
  GunInfo(GunInfo&& from) noexcept
    : GunInfo() {
    *this = ::std::move(from);
  }

  inline GunInfo& operator=(const GunInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GunInfo& operator=(GunInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GunInfo& default_instance();

  static inline const GunInfo* internal_default_instance() {
    return reinterpret_cast<const GunInfo*>(
               &_GunInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GunInfo& a, GunInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GunInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GunInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GunInfo* New() const final {
    return CreateMaybeMessage<GunInfo>(nullptr);
  }

  GunInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GunInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GunInfo& from);
  void MergeFrom(const GunInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GunInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.GunInfo";
  }
  protected:
  explicit GunInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceUIDFieldNumber = 1,
    kOriginUIDFieldNumber = 2,
    kRatioFieldNumber = 3,
    kNumFieldNumber = 4,
  };
  // int32 sourceUID = 1;
  void clear_sourceuid();
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid() const;
  void set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sourceuid() const;
  void _internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 originUID = 2;
  void clear_originuid();
  ::PROTOBUF_NAMESPACE_ID::int32 originuid() const;
  void set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_originuid() const;
  void _internal_set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 3;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 4;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.GunInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 originuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class FlameInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.FlameInfo) */ {
 public:
  inline FlameInfo() : FlameInfo(nullptr) {}
  virtual ~FlameInfo();

  FlameInfo(const FlameInfo& from);
  FlameInfo(FlameInfo&& from) noexcept
    : FlameInfo() {
    *this = ::std::move(from);
  }

  inline FlameInfo& operator=(const FlameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlameInfo& operator=(FlameInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlameInfo& default_instance();

  static inline const FlameInfo* internal_default_instance() {
    return reinterpret_cast<const FlameInfo*>(
               &_FlameInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(FlameInfo& a, FlameInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FlameInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlameInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlameInfo* New() const final {
    return CreateMaybeMessage<FlameInfo>(nullptr);
  }

  FlameInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlameInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlameInfo& from);
  void MergeFrom(const FlameInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlameInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.FlameInfo";
  }
  protected:
  explicit FlameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceUIDListFieldNumber = 3,
    kOriginUIDFieldNumber = 1,
    kRatioFieldNumber = 2,
  };
  // repeated int32 sourceUIDList = 3;
  int sourceuidlist_size() const;
  private:
  int _internal_sourceuidlist_size() const;
  public:
  void clear_sourceuidlist();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sourceuidlist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_sourceuidlist() const;
  void _internal_add_sourceuidlist(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_sourceuidlist();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuidlist(int index) const;
  void set_sourceuidlist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_sourceuidlist(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      sourceuidlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_sourceuidlist();

  // int32 originUID = 1;
  void clear_originuid();
  ::PROTOBUF_NAMESPACE_ID::int32 originuid() const;
  void set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_originuid() const;
  void _internal_set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 2;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.FlameInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > sourceuidlist_;
  mutable std::atomic<int> _sourceuidlist_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 originuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class BeeInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.BeeInfo) */ {
 public:
  inline BeeInfo() : BeeInfo(nullptr) {}
  virtual ~BeeInfo();

  BeeInfo(const BeeInfo& from);
  BeeInfo(BeeInfo&& from) noexcept
    : BeeInfo() {
    *this = ::std::move(from);
  }

  inline BeeInfo& operator=(const BeeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BeeInfo& operator=(BeeInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BeeInfo& default_instance();

  static inline const BeeInfo* internal_default_instance() {
    return reinterpret_cast<const BeeInfo*>(
               &_BeeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(BeeInfo& a, BeeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BeeInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BeeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BeeInfo* New() const final {
    return CreateMaybeMessage<BeeInfo>(nullptr);
  }

  BeeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BeeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BeeInfo& from);
  void MergeFrom(const BeeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.BeeInfo";
  }
  protected:
  explicit BeeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRatioListFieldNumber = 1,
    kTotalRatioFieldNumber = 2,
  };
  // repeated int32 ratioList = 1;
  int ratiolist_size() const;
  private:
  int _internal_ratiolist_size() const;
  public:
  void clear_ratiolist();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratiolist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_ratiolist() const;
  void _internal_add_ratiolist(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_ratiolist();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 ratiolist(int index) const;
  void set_ratiolist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_ratiolist(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      ratiolist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_ratiolist();

  // int32 totalRatio = 2;
  void clear_totalratio();
  ::PROTOBUF_NAMESPACE_ID::int32 totalratio() const;
  void set_totalratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_totalratio() const;
  void _internal_set_totalratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.BeeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > ratiolist_;
  mutable std::atomic<int> _ratiolist_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 totalratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class WeaponInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.WeaponInfo) */ {
 public:
  inline WeaponInfo() : WeaponInfo(nullptr) {}
  virtual ~WeaponInfo();

  WeaponInfo(const WeaponInfo& from);
  WeaponInfo(WeaponInfo&& from) noexcept
    : WeaponInfo() {
    *this = ::std::move(from);
  }

  inline WeaponInfo& operator=(const WeaponInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WeaponInfo& operator=(WeaponInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WeaponInfo& default_instance();

  static inline const WeaponInfo* internal_default_instance() {
    return reinterpret_cast<const WeaponInfo*>(
               &_WeaponInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(WeaponInfo& a, WeaponInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(WeaponInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WeaponInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WeaponInfo* New() const final {
    return CreateMaybeMessage<WeaponInfo>(nullptr);
  }

  WeaponInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WeaponInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WeaponInfo& from);
  void MergeFrom(const WeaponInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WeaponInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.WeaponInfo";
  }
  protected:
  explicit WeaponInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeaponNameFieldNumber = 6,
    kWeaponStateFieldNumber = 8,
    kWeaponIDFieldNumber = 1,
    kSourceUIDFieldNumber = 2,
    kOriginUIDFieldNumber = 3,
    kRatioFieldNumber = 4,
    kNumFieldNumber = 5,
    kWeaponRatioFieldNumber = 7,
  };
  // string weaponName = 6;
  void clear_weaponname();
  const std::string& weaponname() const;
  void set_weaponname(const std::string& value);
  void set_weaponname(std::string&& value);
  void set_weaponname(const char* value);
  void set_weaponname(const char* value, size_t size);
  std::string* mutable_weaponname();
  std::string* release_weaponname();
  void set_allocated_weaponname(std::string* weaponname);
  private:
  const std::string& _internal_weaponname() const;
  void _internal_set_weaponname(const std::string& value);
  std::string* _internal_mutable_weaponname();
  public:

  // .PlaneWar.WeaponState weaponState = 8;
  bool has_weaponstate() const;
  private:
  bool _internal_has_weaponstate() const;
  public:
  void clear_weaponstate();
  const ::PlaneWar::WeaponState& weaponstate() const;
  ::PlaneWar::WeaponState* release_weaponstate();
  ::PlaneWar::WeaponState* mutable_weaponstate();
  void set_allocated_weaponstate(::PlaneWar::WeaponState* weaponstate);
  private:
  const ::PlaneWar::WeaponState& _internal_weaponstate() const;
  ::PlaneWar::WeaponState* _internal_mutable_weaponstate();
  public:
  void unsafe_arena_set_allocated_weaponstate(
      ::PlaneWar::WeaponState* weaponstate);
  ::PlaneWar::WeaponState* unsafe_arena_release_weaponstate();

  // int32 weaponID = 1;
  void clear_weaponid();
  ::PROTOBUF_NAMESPACE_ID::int32 weaponid() const;
  void set_weaponid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_weaponid() const;
  void _internal_set_weaponid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sourceUID = 2;
  void clear_sourceuid();
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid() const;
  void set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sourceuid() const;
  void _internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 originUID = 3;
  void clear_originuid();
  ::PROTOBUF_NAMESPACE_ID::int32 originuid() const;
  void set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_originuid() const;
  void _internal_set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 4;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 5;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 weaponRatio = 7;
  void clear_weaponratio();
  ::PROTOBUF_NAMESPACE_ID::int32 weaponratio() const;
  void set_weaponratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_weaponratio() const;
  void _internal_set_weaponratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.WeaponInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr weaponname_;
  ::PlaneWar::WeaponState* weaponstate_;
  ::PROTOBUF_NAMESPACE_ID::int32 weaponid_;
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 originuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  ::PROTOBUF_NAMESPACE_ID::int32 weaponratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SpecEffect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SpecEffect) */ {
 public:
  inline SpecEffect() : SpecEffect(nullptr) {}
  virtual ~SpecEffect();

  SpecEffect(const SpecEffect& from);
  SpecEffect(SpecEffect&& from) noexcept
    : SpecEffect() {
    *this = ::std::move(from);
  }

  inline SpecEffect& operator=(const SpecEffect& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpecEffect& operator=(SpecEffect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpecEffect& default_instance();

  static inline const SpecEffect* internal_default_instance() {
    return reinterpret_cast<const SpecEffect*>(
               &_SpecEffect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SpecEffect& a, SpecEffect& b) {
    a.Swap(&b);
  }
  inline void Swap(SpecEffect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpecEffect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpecEffect* New() const final {
    return CreateMaybeMessage<SpecEffect>(nullptr);
  }

  SpecEffect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpecEffect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpecEffect& from);
  void MergeFrom(const SpecEffect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpecEffect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SpecEffect";
  }
  protected:
  explicit SpecEffect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCostMoneyFieldNumber = 1,
    kEarnMoneyFieldNumber = 2,
    kViolenceFieldNumber = 3,
    kDurationFieldNumber = 4,
    kMaxDurationFieldNumber = 5,
    kSourceTypeFieldNumber = 6,
  };
  // int32 costMoney = 1;
  void clear_costmoney();
  ::PROTOBUF_NAMESPACE_ID::int32 costmoney() const;
  void set_costmoney(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_costmoney() const;
  void _internal_set_costmoney(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 earnMoney = 2;
  void clear_earnmoney();
  ::PROTOBUF_NAMESPACE_ID::int32 earnmoney() const;
  void set_earnmoney(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_earnmoney() const;
  void _internal_set_earnmoney(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float violence = 3;
  void clear_violence();
  float violence() const;
  void set_violence(float value);
  private:
  float _internal_violence() const;
  void _internal_set_violence(float value);
  public:

  // int32 duration = 4;
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxDuration = 5;
  void clear_maxduration();
  ::PROTOBUF_NAMESPACE_ID::int32 maxduration() const;
  void set_maxduration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxduration() const;
  void _internal_set_maxduration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sourceType = 6;
  void clear_sourcetype();
  ::PROTOBUF_NAMESPACE_ID::int32 sourcetype() const;
  void set_sourcetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sourcetype() const;
  void _internal_set_sourcetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SpecEffect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 costmoney_;
  ::PROTOBUF_NAMESPACE_ID::int32 earnmoney_;
  float violence_;
  ::PROTOBUF_NAMESPACE_ID::int32 duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxduration_;
  ::PROTOBUF_NAMESPACE_ID::int32 sourcetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class Dice PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.Dice) */ {
 public:
  inline Dice() : Dice(nullptr) {}
  virtual ~Dice();

  Dice(const Dice& from);
  Dice(Dice&& from) noexcept
    : Dice() {
    *this = ::std::move(from);
  }

  inline Dice& operator=(const Dice& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dice& operator=(Dice&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dice& default_instance();

  static inline const Dice* internal_default_instance() {
    return reinterpret_cast<const Dice*>(
               &_Dice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Dice& a, Dice& b) {
    a.Swap(&b);
  }
  inline void Swap(Dice* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dice* New() const final {
    return CreateMaybeMessage<Dice>(nullptr);
  }

  Dice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dice& from);
  void MergeFrom(const Dice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.Dice";
  }
  protected:
  explicit Dice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 3,
    kRatioFieldNumber = 1,
    kTpFieldNumber = 2,
  };
  // .PlaneWar.Pos pos = 3;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::PlaneWar::Pos& pos() const;
  ::PlaneWar::Pos* release_pos();
  ::PlaneWar::Pos* mutable_pos();
  void set_allocated_pos(::PlaneWar::Pos* pos);
  private:
  const ::PlaneWar::Pos& _internal_pos() const;
  ::PlaneWar::Pos* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::PlaneWar::Pos* pos);
  ::PlaneWar::Pos* unsafe_arena_release_pos();

  // int32 ratio = 1;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tp = 2;
  void clear_tp();
  ::PROTOBUF_NAMESPACE_ID::int32 tp() const;
  void set_tp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tp() const;
  void _internal_set_tp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.Dice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::Pos* pos_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 tp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class DiceInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.DiceInfo) */ {
 public:
  inline DiceInfo() : DiceInfo(nullptr) {}
  virtual ~DiceInfo();

  DiceInfo(const DiceInfo& from);
  DiceInfo(DiceInfo&& from) noexcept
    : DiceInfo() {
    *this = ::std::move(from);
  }

  inline DiceInfo& operator=(const DiceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiceInfo& operator=(DiceInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DiceInfo& default_instance();

  static inline const DiceInfo* internal_default_instance() {
    return reinterpret_cast<const DiceInfo*>(
               &_DiceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(DiceInfo& a, DiceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DiceInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiceInfo* New() const final {
    return CreateMaybeMessage<DiceInfo>(nullptr);
  }

  DiceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiceInfo& from);
  void MergeFrom(const DiceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.DiceInfo";
  }
  protected:
  explicit DiceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiceListFieldNumber = 3,
    kModeFieldNumber = 1,
    kMulFieldNumber = 2,
  };
  // repeated .PlaneWar.Dice diceList = 3;
  int dicelist_size() const;
  private:
  int _internal_dicelist_size() const;
  public:
  void clear_dicelist();
  ::PlaneWar::Dice* mutable_dicelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::Dice >*
      mutable_dicelist();
  private:
  const ::PlaneWar::Dice& _internal_dicelist(int index) const;
  ::PlaneWar::Dice* _internal_add_dicelist();
  public:
  const ::PlaneWar::Dice& dicelist(int index) const;
  ::PlaneWar::Dice* add_dicelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::Dice >&
      dicelist() const;

  // int32 mode = 1;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mul = 2;
  void clear_mul();
  ::PROTOBUF_NAMESPACE_ID::int32 mul() const;
  void set_mul(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mul() const;
  void _internal_set_mul(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.DiceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::Dice > dicelist_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 mul_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class StateInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.StateInfo) */ {
 public:
  inline StateInfo() : StateInfo(nullptr) {}
  virtual ~StateInfo();

  StateInfo(const StateInfo& from);
  StateInfo(StateInfo&& from) noexcept
    : StateInfo() {
    *this = ::std::move(from);
  }

  inline StateInfo& operator=(const StateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateInfo& operator=(StateInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StateInfo& default_instance();

  static inline const StateInfo* internal_default_instance() {
    return reinterpret_cast<const StateInfo*>(
               &_StateInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(StateInfo& a, StateInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(StateInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StateInfo* New() const final {
    return CreateMaybeMessage<StateInfo>(nullptr);
  }

  StateInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StateInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StateInfo& from);
  void MergeFrom(const StateInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.StateInfo";
  }
  protected:
  explicit StateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuffListFieldNumber = 2,
    kBlackHoleListFieldNumber = 3,
    kSettleListFieldNumber = 8,
    kFormInfoFieldNumber = 4,
    kLockInfoFieldNumber = 5,
    kWeaponInfoFieldNumber = 6,
    kPropWeaponInfoFieldNumber = 7,
    kGunInfoFieldNumber = 9,
    kFlameInfoFieldNumber = 10,
    kSpecEffectFieldNumber = 11,
    kIsBackFieldNumber = 1,
    kExtraMulFieldNumber = 12,
  };
  // repeated .PlaneWar.BuffInfo buffList = 2;
  int bufflist_size() const;
  private:
  int _internal_bufflist_size() const;
  public:
  void clear_bufflist();
  ::PlaneWar::BuffInfo* mutable_bufflist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::BuffInfo >*
      mutable_bufflist();
  private:
  const ::PlaneWar::BuffInfo& _internal_bufflist(int index) const;
  ::PlaneWar::BuffInfo* _internal_add_bufflist();
  public:
  const ::PlaneWar::BuffInfo& bufflist(int index) const;
  ::PlaneWar::BuffInfo* add_bufflist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::BuffInfo >&
      bufflist() const;

  // repeated .PlaneWar.BlackHoleInfo blackHoleList = 3;
  int blackholelist_size() const;
  private:
  int _internal_blackholelist_size() const;
  public:
  void clear_blackholelist();
  ::PlaneWar::BlackHoleInfo* mutable_blackholelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::BlackHoleInfo >*
      mutable_blackholelist();
  private:
  const ::PlaneWar::BlackHoleInfo& _internal_blackholelist(int index) const;
  ::PlaneWar::BlackHoleInfo* _internal_add_blackholelist();
  public:
  const ::PlaneWar::BlackHoleInfo& blackholelist(int index) const;
  ::PlaneWar::BlackHoleInfo* add_blackholelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::BlackHoleInfo >&
      blackholelist() const;

  // repeated .PlaneWar.SettleInfo settleList = 8;
  int settlelist_size() const;
  private:
  int _internal_settlelist_size() const;
  public:
  void clear_settlelist();
  ::PlaneWar::SettleInfo* mutable_settlelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::SettleInfo >*
      mutable_settlelist();
  private:
  const ::PlaneWar::SettleInfo& _internal_settlelist(int index) const;
  ::PlaneWar::SettleInfo* _internal_add_settlelist();
  public:
  const ::PlaneWar::SettleInfo& settlelist(int index) const;
  ::PlaneWar::SettleInfo* add_settlelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::SettleInfo >&
      settlelist() const;

  // .PlaneWar.FormInfo formInfo = 4;
  bool has_forminfo() const;
  private:
  bool _internal_has_forminfo() const;
  public:
  void clear_forminfo();
  const ::PlaneWar::FormInfo& forminfo() const;
  ::PlaneWar::FormInfo* release_forminfo();
  ::PlaneWar::FormInfo* mutable_forminfo();
  void set_allocated_forminfo(::PlaneWar::FormInfo* forminfo);
  private:
  const ::PlaneWar::FormInfo& _internal_forminfo() const;
  ::PlaneWar::FormInfo* _internal_mutable_forminfo();
  public:
  void unsafe_arena_set_allocated_forminfo(
      ::PlaneWar::FormInfo* forminfo);
  ::PlaneWar::FormInfo* unsafe_arena_release_forminfo();

  // .PlaneWar.LockInfo lockInfo = 5;
  bool has_lockinfo() const;
  private:
  bool _internal_has_lockinfo() const;
  public:
  void clear_lockinfo();
  const ::PlaneWar::LockInfo& lockinfo() const;
  ::PlaneWar::LockInfo* release_lockinfo();
  ::PlaneWar::LockInfo* mutable_lockinfo();
  void set_allocated_lockinfo(::PlaneWar::LockInfo* lockinfo);
  private:
  const ::PlaneWar::LockInfo& _internal_lockinfo() const;
  ::PlaneWar::LockInfo* _internal_mutable_lockinfo();
  public:
  void unsafe_arena_set_allocated_lockinfo(
      ::PlaneWar::LockInfo* lockinfo);
  ::PlaneWar::LockInfo* unsafe_arena_release_lockinfo();

  // .PlaneWar.WeaponInfo weaponInfo = 6;
  bool has_weaponinfo() const;
  private:
  bool _internal_has_weaponinfo() const;
  public:
  void clear_weaponinfo();
  const ::PlaneWar::WeaponInfo& weaponinfo() const;
  ::PlaneWar::WeaponInfo* release_weaponinfo();
  ::PlaneWar::WeaponInfo* mutable_weaponinfo();
  void set_allocated_weaponinfo(::PlaneWar::WeaponInfo* weaponinfo);
  private:
  const ::PlaneWar::WeaponInfo& _internal_weaponinfo() const;
  ::PlaneWar::WeaponInfo* _internal_mutable_weaponinfo();
  public:
  void unsafe_arena_set_allocated_weaponinfo(
      ::PlaneWar::WeaponInfo* weaponinfo);
  ::PlaneWar::WeaponInfo* unsafe_arena_release_weaponinfo();

  // .PlaneWar.WeaponInfo propWeaponInfo = 7;
  bool has_propweaponinfo() const;
  private:
  bool _internal_has_propweaponinfo() const;
  public:
  void clear_propweaponinfo();
  const ::PlaneWar::WeaponInfo& propweaponinfo() const;
  ::PlaneWar::WeaponInfo* release_propweaponinfo();
  ::PlaneWar::WeaponInfo* mutable_propweaponinfo();
  void set_allocated_propweaponinfo(::PlaneWar::WeaponInfo* propweaponinfo);
  private:
  const ::PlaneWar::WeaponInfo& _internal_propweaponinfo() const;
  ::PlaneWar::WeaponInfo* _internal_mutable_propweaponinfo();
  public:
  void unsafe_arena_set_allocated_propweaponinfo(
      ::PlaneWar::WeaponInfo* propweaponinfo);
  ::PlaneWar::WeaponInfo* unsafe_arena_release_propweaponinfo();

  // .PlaneWar.GunInfo gunInfo = 9;
  bool has_guninfo() const;
  private:
  bool _internal_has_guninfo() const;
  public:
  void clear_guninfo();
  const ::PlaneWar::GunInfo& guninfo() const;
  ::PlaneWar::GunInfo* release_guninfo();
  ::PlaneWar::GunInfo* mutable_guninfo();
  void set_allocated_guninfo(::PlaneWar::GunInfo* guninfo);
  private:
  const ::PlaneWar::GunInfo& _internal_guninfo() const;
  ::PlaneWar::GunInfo* _internal_mutable_guninfo();
  public:
  void unsafe_arena_set_allocated_guninfo(
      ::PlaneWar::GunInfo* guninfo);
  ::PlaneWar::GunInfo* unsafe_arena_release_guninfo();

  // .PlaneWar.FlameInfo flameInfo = 10;
  bool has_flameinfo() const;
  private:
  bool _internal_has_flameinfo() const;
  public:
  void clear_flameinfo();
  const ::PlaneWar::FlameInfo& flameinfo() const;
  ::PlaneWar::FlameInfo* release_flameinfo();
  ::PlaneWar::FlameInfo* mutable_flameinfo();
  void set_allocated_flameinfo(::PlaneWar::FlameInfo* flameinfo);
  private:
  const ::PlaneWar::FlameInfo& _internal_flameinfo() const;
  ::PlaneWar::FlameInfo* _internal_mutable_flameinfo();
  public:
  void unsafe_arena_set_allocated_flameinfo(
      ::PlaneWar::FlameInfo* flameinfo);
  ::PlaneWar::FlameInfo* unsafe_arena_release_flameinfo();

  // .PlaneWar.SpecEffect specEffect = 11;
  bool has_speceffect() const;
  private:
  bool _internal_has_speceffect() const;
  public:
  void clear_speceffect();
  const ::PlaneWar::SpecEffect& speceffect() const;
  ::PlaneWar::SpecEffect* release_speceffect();
  ::PlaneWar::SpecEffect* mutable_speceffect();
  void set_allocated_speceffect(::PlaneWar::SpecEffect* speceffect);
  private:
  const ::PlaneWar::SpecEffect& _internal_speceffect() const;
  ::PlaneWar::SpecEffect* _internal_mutable_speceffect();
  public:
  void unsafe_arena_set_allocated_speceffect(
      ::PlaneWar::SpecEffect* speceffect);
  ::PlaneWar::SpecEffect* unsafe_arena_release_speceffect();

  // bool isBack = 1;
  void clear_isback();
  bool isback() const;
  void set_isback(bool value);
  private:
  bool _internal_isback() const;
  void _internal_set_isback(bool value);
  public:

  // bool extra_mul = 12;
  void clear_extra_mul();
  bool extra_mul() const;
  void set_extra_mul(bool value);
  private:
  bool _internal_extra_mul() const;
  void _internal_set_extra_mul(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.StateInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::BuffInfo > bufflist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::BlackHoleInfo > blackholelist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::SettleInfo > settlelist_;
  ::PlaneWar::FormInfo* forminfo_;
  ::PlaneWar::LockInfo* lockinfo_;
  ::PlaneWar::WeaponInfo* weaponinfo_;
  ::PlaneWar::WeaponInfo* propweaponinfo_;
  ::PlaneWar::GunInfo* guninfo_;
  ::PlaneWar::FlameInfo* flameinfo_;
  ::PlaneWar::SpecEffect* speceffect_;
  bool isback_;
  bool extra_mul_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class MissileInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.MissileInfo) */ {
 public:
  inline MissileInfo() : MissileInfo(nullptr) {}
  virtual ~MissileInfo();

  MissileInfo(const MissileInfo& from);
  MissileInfo(MissileInfo&& from) noexcept
    : MissileInfo() {
    *this = ::std::move(from);
  }

  inline MissileInfo& operator=(const MissileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissileInfo& operator=(MissileInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MissileInfo& default_instance();

  static inline const MissileInfo* internal_default_instance() {
    return reinterpret_cast<const MissileInfo*>(
               &_MissileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(MissileInfo& a, MissileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MissileInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MissileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MissileInfo* New() const final {
    return CreateMaybeMessage<MissileInfo>(nullptr);
  }

  MissileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MissileInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MissileInfo& from);
  void MergeFrom(const MissileInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissileInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.MissileInfo";
  }
  protected:
  explicit MissileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.MissileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class PiggyInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.PiggyInfo) */ {
 public:
  inline PiggyInfo() : PiggyInfo(nullptr) {}
  virtual ~PiggyInfo();

  PiggyInfo(const PiggyInfo& from);
  PiggyInfo(PiggyInfo&& from) noexcept
    : PiggyInfo() {
    *this = ::std::move(from);
  }

  inline PiggyInfo& operator=(const PiggyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiggyInfo& operator=(PiggyInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PiggyInfo& default_instance();

  static inline const PiggyInfo* internal_default_instance() {
    return reinterpret_cast<const PiggyInfo*>(
               &_PiggyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(PiggyInfo& a, PiggyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PiggyInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiggyInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PiggyInfo* New() const final {
    return CreateMaybeMessage<PiggyInfo>(nullptr);
  }

  PiggyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PiggyInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PiggyInfo& from);
  void MergeFrom(const PiggyInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiggyInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.PiggyInfo";
  }
  protected:
  explicit PiggyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettleTimeFieldNumber = 4,
    kStatusFieldNumber = 1,
    kRewardValueFieldNumber = 2,
    kAccumulatingValueFieldNumber = 3,
    kSettleThresholdFieldNumber = 5,
    kMaxRewardFieldNumber = 6,
    kNextMaxRewardFieldNumber = 7,
  };
  // string settleTime = 4;
  void clear_settletime();
  const std::string& settletime() const;
  void set_settletime(const std::string& value);
  void set_settletime(std::string&& value);
  void set_settletime(const char* value);
  void set_settletime(const char* value, size_t size);
  std::string* mutable_settletime();
  std::string* release_settletime();
  void set_allocated_settletime(std::string* settletime);
  private:
  const std::string& _internal_settletime() const;
  void _internal_set_settletime(const std::string& value);
  std::string* _internal_mutable_settletime();
  public:

  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rewardValue = 2;
  void clear_rewardvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 rewardvalue() const;
  void set_rewardvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rewardvalue() const;
  void _internal_set_rewardvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 accumulatingValue = 3;
  void clear_accumulatingvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 accumulatingvalue() const;
  void set_accumulatingvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_accumulatingvalue() const;
  void _internal_set_accumulatingvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 settleThreshold = 5;
  void clear_settlethreshold();
  ::PROTOBUF_NAMESPACE_ID::int32 settlethreshold() const;
  void set_settlethreshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_settlethreshold() const;
  void _internal_set_settlethreshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxReward = 6;
  void clear_maxreward();
  ::PROTOBUF_NAMESPACE_ID::int32 maxreward() const;
  void set_maxreward(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxreward() const;
  void _internal_set_maxreward(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nextMaxReward = 7;
  void clear_nextmaxreward();
  ::PROTOBUF_NAMESPACE_ID::int32 nextmaxreward() const;
  void set_nextmaxreward(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nextmaxreward() const;
  void _internal_set_nextmaxreward(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.PiggyInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr settletime_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 rewardvalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 accumulatingvalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 settlethreshold_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxreward_;
  ::PROTOBUF_NAMESPACE_ID::int32 nextmaxreward_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class ArenaPieceInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.ArenaPieceInfo) */ {
 public:
  inline ArenaPieceInfo() : ArenaPieceInfo(nullptr) {}
  virtual ~ArenaPieceInfo();

  ArenaPieceInfo(const ArenaPieceInfo& from);
  ArenaPieceInfo(ArenaPieceInfo&& from) noexcept
    : ArenaPieceInfo() {
    *this = ::std::move(from);
  }

  inline ArenaPieceInfo& operator=(const ArenaPieceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArenaPieceInfo& operator=(ArenaPieceInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArenaPieceInfo& default_instance();

  static inline const ArenaPieceInfo* internal_default_instance() {
    return reinterpret_cast<const ArenaPieceInfo*>(
               &_ArenaPieceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ArenaPieceInfo& a, ArenaPieceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ArenaPieceInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArenaPieceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArenaPieceInfo* New() const final {
    return CreateMaybeMessage<ArenaPieceInfo>(nullptr);
  }

  ArenaPieceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArenaPieceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArenaPieceInfo& from);
  void MergeFrom(const ArenaPieceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArenaPieceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.ArenaPieceInfo";
  }
  protected:
  explicit ArenaPieceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArenaIDFieldNumber = 1,
    kHavePieceFieldNumber = 2,
    kNeedPieceFieldNumber = 3,
    kRatioFieldNumber = 4,
  };
  // int32 arenaID = 1;
  void clear_arenaid();
  ::PROTOBUF_NAMESPACE_ID::int32 arenaid() const;
  void set_arenaid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_arenaid() const;
  void _internal_set_arenaid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 havePiece = 2;
  void clear_havepiece();
  ::PROTOBUF_NAMESPACE_ID::int32 havepiece() const;
  void set_havepiece(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_havepiece() const;
  void _internal_set_havepiece(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 needPiece = 3;
  void clear_needpiece();
  ::PROTOBUF_NAMESPACE_ID::int32 needpiece() const;
  void set_needpiece(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_needpiece() const;
  void _internal_set_needpiece(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 4;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.ArenaPieceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 arenaid_;
  ::PROTOBUF_NAMESPACE_ID::int32 havepiece_;
  ::PROTOBUF_NAMESPACE_ID::int32 needpiece_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class PieceInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.PieceInfo) */ {
 public:
  inline PieceInfo() : PieceInfo(nullptr) {}
  virtual ~PieceInfo();

  PieceInfo(const PieceInfo& from);
  PieceInfo(PieceInfo&& from) noexcept
    : PieceInfo() {
    *this = ::std::move(from);
  }

  inline PieceInfo& operator=(const PieceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PieceInfo& operator=(PieceInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PieceInfo& default_instance();

  static inline const PieceInfo* internal_default_instance() {
    return reinterpret_cast<const PieceInfo*>(
               &_PieceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(PieceInfo& a, PieceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PieceInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PieceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PieceInfo* New() const final {
    return CreateMaybeMessage<PieceInfo>(nullptr);
  }

  PieceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PieceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PieceInfo& from);
  void MergeFrom(const PieceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PieceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.PieceInfo";
  }
  protected:
  explicit PieceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArenaInfoFieldNumber = 1,
    kHaveDiamondFieldNumber = 2,
    kNeedDiamondFieldNumber = 3,
    kPieceStackLimitFieldNumber = 4,
    kExchangePieceFieldNumber = 5,
  };
  // repeated .PlaneWar.ArenaPieceInfo arenaInfo = 1;
  int arenainfo_size() const;
  private:
  int _internal_arenainfo_size() const;
  public:
  void clear_arenainfo();
  ::PlaneWar::ArenaPieceInfo* mutable_arenainfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ArenaPieceInfo >*
      mutable_arenainfo();
  private:
  const ::PlaneWar::ArenaPieceInfo& _internal_arenainfo(int index) const;
  ::PlaneWar::ArenaPieceInfo* _internal_add_arenainfo();
  public:
  const ::PlaneWar::ArenaPieceInfo& arenainfo(int index) const;
  ::PlaneWar::ArenaPieceInfo* add_arenainfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ArenaPieceInfo >&
      arenainfo() const;

  // int32 haveDiamond = 2;
  void clear_havediamond();
  ::PROTOBUF_NAMESPACE_ID::int32 havediamond() const;
  void set_havediamond(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_havediamond() const;
  void _internal_set_havediamond(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 needDiamond = 3;
  void clear_needdiamond();
  ::PROTOBUF_NAMESPACE_ID::int32 needdiamond() const;
  void set_needdiamond(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_needdiamond() const;
  void _internal_set_needdiamond(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pieceStackLimit = 4;
  void clear_piecestacklimit();
  ::PROTOBUF_NAMESPACE_ID::int32 piecestacklimit() const;
  void set_piecestacklimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_piecestacklimit() const;
  void _internal_set_piecestacklimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 exchangePiece = 5;
  void clear_exchangepiece();
  ::PROTOBUF_NAMESPACE_ID::int32 exchangepiece() const;
  void set_exchangepiece(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_exchangepiece() const;
  void _internal_set_exchangepiece(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.PieceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ArenaPieceInfo > arenainfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 havediamond_;
  ::PROTOBUF_NAMESPACE_ID::int32 needdiamond_;
  ::PROTOBUF_NAMESPACE_ID::int32 piecestacklimit_;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangepiece_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class RouletteInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.RouletteInfo) */ {
 public:
  inline RouletteInfo() : RouletteInfo(nullptr) {}
  virtual ~RouletteInfo();

  RouletteInfo(const RouletteInfo& from);
  RouletteInfo(RouletteInfo&& from) noexcept
    : RouletteInfo() {
    *this = ::std::move(from);
  }

  inline RouletteInfo& operator=(const RouletteInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouletteInfo& operator=(RouletteInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouletteInfo& default_instance();

  static inline const RouletteInfo* internal_default_instance() {
    return reinterpret_cast<const RouletteInfo*>(
               &_RouletteInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(RouletteInfo& a, RouletteInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RouletteInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouletteInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouletteInfo* New() const final {
    return CreateMaybeMessage<RouletteInfo>(nullptr);
  }

  RouletteInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouletteInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouletteInfo& from);
  void MergeFrom(const RouletteInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouletteInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.RouletteInfo";
  }
  protected:
  explicit RouletteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.RouletteInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class EffectInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.EffectInfo) */ {
 public:
  inline EffectInfo() : EffectInfo(nullptr) {}
  virtual ~EffectInfo();

  EffectInfo(const EffectInfo& from);
  EffectInfo(EffectInfo&& from) noexcept
    : EffectInfo() {
    *this = ::std::move(from);
  }

  inline EffectInfo& operator=(const EffectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EffectInfo& operator=(EffectInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EffectInfo& default_instance();

  static inline const EffectInfo* internal_default_instance() {
    return reinterpret_cast<const EffectInfo*>(
               &_EffectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(EffectInfo& a, EffectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EffectInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EffectInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EffectInfo* New() const final {
    return CreateMaybeMessage<EffectInfo>(nullptr);
  }

  EffectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EffectInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EffectInfo& from);
  void MergeFrom(const EffectInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EffectInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.EffectInfo";
  }
  protected:
  explicit EffectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectIDFieldNumber = 1,
    kIsGlobalFieldNumber = 2,
  };
  // int32 effectID = 1;
  void clear_effectid();
  ::PROTOBUF_NAMESPACE_ID::int32 effectid() const;
  void set_effectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_effectid() const;
  void _internal_set_effectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isGlobal = 2;
  void clear_isglobal();
  bool isglobal() const;
  void set_isglobal(bool value);
  private:
  bool _internal_isglobal() const;
  void _internal_set_isglobal(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.EffectInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 effectid_;
  bool isglobal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class PlayerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.PlayerInfo) */ {
 public:
  inline PlayerInfo() : PlayerInfo(nullptr) {}
  virtual ~PlayerInfo();

  PlayerInfo(const PlayerInfo& from);
  PlayerInfo(PlayerInfo&& from) noexcept
    : PlayerInfo() {
    *this = ::std::move(from);
  }

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInfo& operator=(PlayerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerInfo& default_instance();

  static inline const PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerInfo*>(
               &_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(PlayerInfo& a, PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerInfo* New() const final {
    return CreateMaybeMessage<PlayerInfo>(nullptr);
  }

  PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerInfo& from);
  void MergeFrom(const PlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.PlayerInfo";
  }
  protected:
  explicit PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissileListFieldNumber = 15,
    kRouletteListFieldNumber = 21,
    kPlayerNameFieldNumber = 5,
    kIconFieldNumber = 20,
    kStateInfoFieldNumber = 8,
    kPiggyInfoFieldNumber = 14,
    kWeaponPieceInfoFieldNumber = 18,
    kEffectInfoFieldNumber = 23,
    kRedPacketFieldNumber = 27,
    kRatioFieldNumber = 1,
    kPlaneIDFieldNumber = 2,
    kScoreFieldNumber = 3,
    kChairFieldNumber = 4,
    kPlayerIDFieldNumber = 6,
    kVipFieldNumber = 7,
    kMemberDaysFieldNumber = 9,
    kLastVipLevelFieldNumber = 10,
    kScratchCardNumFieldNumber = 11,
    kTicketFieldNumber = 12,
    kCallNumFieldNumber = 16,
    kSelectedTitleFieldNumber = 17,
    kEffectIDFieldNumber = 19,
    kRatioUnLockFieldNumber = 13,
    kIsLastRankFieldNumber = 26,
    kWingsIdFieldNumber = 22,
    kCurrentRankFieldNumber = 24,
    kStarFieldNumber = 25,
  };
  // repeated .PlaneWar.MissileInfo missileList = 15;
  int missilelist_size() const;
  private:
  int _internal_missilelist_size() const;
  public:
  void clear_missilelist();
  ::PlaneWar::MissileInfo* mutable_missilelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MissileInfo >*
      mutable_missilelist();
  private:
  const ::PlaneWar::MissileInfo& _internal_missilelist(int index) const;
  ::PlaneWar::MissileInfo* _internal_add_missilelist();
  public:
  const ::PlaneWar::MissileInfo& missilelist(int index) const;
  ::PlaneWar::MissileInfo* add_missilelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MissileInfo >&
      missilelist() const;

  // repeated .PlaneWar.RouletteInfo rouletteList = 21;
  int roulettelist_size() const;
  private:
  int _internal_roulettelist_size() const;
  public:
  void clear_roulettelist();
  ::PlaneWar::RouletteInfo* mutable_roulettelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::RouletteInfo >*
      mutable_roulettelist();
  private:
  const ::PlaneWar::RouletteInfo& _internal_roulettelist(int index) const;
  ::PlaneWar::RouletteInfo* _internal_add_roulettelist();
  public:
  const ::PlaneWar::RouletteInfo& roulettelist(int index) const;
  ::PlaneWar::RouletteInfo* add_roulettelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::RouletteInfo >&
      roulettelist() const;

  // string playerName = 5;
  void clear_playername();
  const std::string& playername() const;
  void set_playername(const std::string& value);
  void set_playername(std::string&& value);
  void set_playername(const char* value);
  void set_playername(const char* value, size_t size);
  std::string* mutable_playername();
  std::string* release_playername();
  void set_allocated_playername(std::string* playername);
  private:
  const std::string& _internal_playername() const;
  void _internal_set_playername(const std::string& value);
  std::string* _internal_mutable_playername();
  public:

  // string icon = 20;
  void clear_icon();
  const std::string& icon() const;
  void set_icon(const std::string& value);
  void set_icon(std::string&& value);
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  std::string* mutable_icon();
  std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // .PlaneWar.StateInfo stateInfo = 8;
  bool has_stateinfo() const;
  private:
  bool _internal_has_stateinfo() const;
  public:
  void clear_stateinfo();
  const ::PlaneWar::StateInfo& stateinfo() const;
  ::PlaneWar::StateInfo* release_stateinfo();
  ::PlaneWar::StateInfo* mutable_stateinfo();
  void set_allocated_stateinfo(::PlaneWar::StateInfo* stateinfo);
  private:
  const ::PlaneWar::StateInfo& _internal_stateinfo() const;
  ::PlaneWar::StateInfo* _internal_mutable_stateinfo();
  public:
  void unsafe_arena_set_allocated_stateinfo(
      ::PlaneWar::StateInfo* stateinfo);
  ::PlaneWar::StateInfo* unsafe_arena_release_stateinfo();

  // .PlaneWar.PiggyInfo piggyInfo = 14;
  bool has_piggyinfo() const;
  private:
  bool _internal_has_piggyinfo() const;
  public:
  void clear_piggyinfo();
  const ::PlaneWar::PiggyInfo& piggyinfo() const;
  ::PlaneWar::PiggyInfo* release_piggyinfo();
  ::PlaneWar::PiggyInfo* mutable_piggyinfo();
  void set_allocated_piggyinfo(::PlaneWar::PiggyInfo* piggyinfo);
  private:
  const ::PlaneWar::PiggyInfo& _internal_piggyinfo() const;
  ::PlaneWar::PiggyInfo* _internal_mutable_piggyinfo();
  public:
  void unsafe_arena_set_allocated_piggyinfo(
      ::PlaneWar::PiggyInfo* piggyinfo);
  ::PlaneWar::PiggyInfo* unsafe_arena_release_piggyinfo();

  // .PlaneWar.PieceInfo weaponPieceInfo = 18;
  bool has_weaponpieceinfo() const;
  private:
  bool _internal_has_weaponpieceinfo() const;
  public:
  void clear_weaponpieceinfo();
  const ::PlaneWar::PieceInfo& weaponpieceinfo() const;
  ::PlaneWar::PieceInfo* release_weaponpieceinfo();
  ::PlaneWar::PieceInfo* mutable_weaponpieceinfo();
  void set_allocated_weaponpieceinfo(::PlaneWar::PieceInfo* weaponpieceinfo);
  private:
  const ::PlaneWar::PieceInfo& _internal_weaponpieceinfo() const;
  ::PlaneWar::PieceInfo* _internal_mutable_weaponpieceinfo();
  public:
  void unsafe_arena_set_allocated_weaponpieceinfo(
      ::PlaneWar::PieceInfo* weaponpieceinfo);
  ::PlaneWar::PieceInfo* unsafe_arena_release_weaponpieceinfo();

  // .PlaneWar.EffectInfo effectInfo = 23;
  bool has_effectinfo() const;
  private:
  bool _internal_has_effectinfo() const;
  public:
  void clear_effectinfo();
  const ::PlaneWar::EffectInfo& effectinfo() const;
  ::PlaneWar::EffectInfo* release_effectinfo();
  ::PlaneWar::EffectInfo* mutable_effectinfo();
  void set_allocated_effectinfo(::PlaneWar::EffectInfo* effectinfo);
  private:
  const ::PlaneWar::EffectInfo& _internal_effectinfo() const;
  ::PlaneWar::EffectInfo* _internal_mutable_effectinfo();
  public:
  void unsafe_arena_set_allocated_effectinfo(
      ::PlaneWar::EffectInfo* effectinfo);
  ::PlaneWar::EffectInfo* unsafe_arena_release_effectinfo();

  // .PlaneWar.Decimal redPacket = 27;
  bool has_redpacket() const;
  private:
  bool _internal_has_redpacket() const;
  public:
  void clear_redpacket();
  const ::PlaneWar::Decimal& redpacket() const;
  ::PlaneWar::Decimal* release_redpacket();
  ::PlaneWar::Decimal* mutable_redpacket();
  void set_allocated_redpacket(::PlaneWar::Decimal* redpacket);
  private:
  const ::PlaneWar::Decimal& _internal_redpacket() const;
  ::PlaneWar::Decimal* _internal_mutable_redpacket();
  public:
  void unsafe_arena_set_allocated_redpacket(
      ::PlaneWar::Decimal* redpacket);
  ::PlaneWar::Decimal* unsafe_arena_release_redpacket();

  // int32 ratio = 1;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 planeID = 2;
  void clear_planeid();
  ::PROTOBUF_NAMESPACE_ID::int32 planeid() const;
  void set_planeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_planeid() const;
  void _internal_set_planeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 score = 3;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int64 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 chair = 4;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 playerID = 6;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vip = 7;
  void clear_vip();
  ::PROTOBUF_NAMESPACE_ID::int32 vip() const;
  void set_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vip() const;
  void _internal_set_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 memberDays = 9;
  void clear_memberdays();
  ::PROTOBUF_NAMESPACE_ID::int32 memberdays() const;
  void set_memberdays(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_memberdays() const;
  void _internal_set_memberdays(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lastVipLevel = 10;
  void clear_lastviplevel();
  ::PROTOBUF_NAMESPACE_ID::int32 lastviplevel() const;
  void set_lastviplevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lastviplevel() const;
  void _internal_set_lastviplevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 scratchCardNum = 11;
  void clear_scratchcardnum();
  ::PROTOBUF_NAMESPACE_ID::int32 scratchcardnum() const;
  void set_scratchcardnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scratchcardnum() const;
  void _internal_set_scratchcardnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ticket = 12;
  void clear_ticket();
  ::PROTOBUF_NAMESPACE_ID::int32 ticket() const;
  void set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ticket() const;
  void _internal_set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 callNum = 16;
  void clear_callnum();
  ::PROTOBUF_NAMESPACE_ID::int32 callnum() const;
  void set_callnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_callnum() const;
  void _internal_set_callnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 selectedTitle = 17;
  void clear_selectedtitle();
  ::PROTOBUF_NAMESPACE_ID::int32 selectedtitle() const;
  void set_selectedtitle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_selectedtitle() const;
  void _internal_set_selectedtitle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 effectID = 19;
  void clear_effectid();
  ::PROTOBUF_NAMESPACE_ID::int32 effectid() const;
  void set_effectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_effectid() const;
  void _internal_set_effectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool ratioUnLock = 13;
  void clear_ratiounlock();
  bool ratiounlock() const;
  void set_ratiounlock(bool value);
  private:
  bool _internal_ratiounlock() const;
  void _internal_set_ratiounlock(bool value);
  public:

  // bool isLastRank = 26;
  void clear_islastrank();
  bool islastrank() const;
  void set_islastrank(bool value);
  private:
  bool _internal_islastrank() const;
  void _internal_set_islastrank(bool value);
  public:

  // int32 wingsId = 22;
  void clear_wingsid();
  ::PROTOBUF_NAMESPACE_ID::int32 wingsid() const;
  void set_wingsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wingsid() const;
  void _internal_set_wingsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 currentRank = 24;
  void clear_currentrank();
  ::PROTOBUF_NAMESPACE_ID::int32 currentrank() const;
  void set_currentrank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_currentrank() const;
  void _internal_set_currentrank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 star = 25;
  void clear_star();
  ::PROTOBUF_NAMESPACE_ID::int32 star() const;
  void set_star(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_star() const;
  void _internal_set_star(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.PlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MissileInfo > missilelist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::RouletteInfo > roulettelist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PlaneWar::StateInfo* stateinfo_;
  ::PlaneWar::PiggyInfo* piggyinfo_;
  ::PlaneWar::PieceInfo* weaponpieceinfo_;
  ::PlaneWar::EffectInfo* effectinfo_;
  ::PlaneWar::Decimal* redpacket_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 planeid_;
  ::PROTOBUF_NAMESPACE_ID::int64 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 vip_;
  ::PROTOBUF_NAMESPACE_ID::int32 memberdays_;
  ::PROTOBUF_NAMESPACE_ID::int32 lastviplevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 scratchcardnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 ticket_;
  ::PROTOBUF_NAMESPACE_ID::int32 callnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 selectedtitle_;
  ::PROTOBUF_NAMESPACE_ID::int32 effectid_;
  bool ratiounlock_;
  bool islastrank_;
  ::PROTOBUF_NAMESPACE_ID::int32 wingsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 currentrank_;
  ::PROTOBUF_NAMESPACE_ID::int32 star_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class PlaneSpecEffect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.PlaneSpecEffect) */ {
 public:
  inline PlaneSpecEffect() : PlaneSpecEffect(nullptr) {}
  virtual ~PlaneSpecEffect();

  PlaneSpecEffect(const PlaneSpecEffect& from);
  PlaneSpecEffect(PlaneSpecEffect&& from) noexcept
    : PlaneSpecEffect() {
    *this = ::std::move(from);
  }

  inline PlaneSpecEffect& operator=(const PlaneSpecEffect& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaneSpecEffect& operator=(PlaneSpecEffect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaneSpecEffect& default_instance();

  static inline const PlaneSpecEffect* internal_default_instance() {
    return reinterpret_cast<const PlaneSpecEffect*>(
               &_PlaneSpecEffect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(PlaneSpecEffect& a, PlaneSpecEffect& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaneSpecEffect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaneSpecEffect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaneSpecEffect* New() const final {
    return CreateMaybeMessage<PlaneSpecEffect>(nullptr);
  }

  PlaneSpecEffect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaneSpecEffect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaneSpecEffect& from);
  void MergeFrom(const PlaneSpecEffect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaneSpecEffect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.PlaneSpecEffect";
  }
  protected:
  explicit PlaneSpecEffect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRatioLimitFieldNumber = 1,
    kHitChangeRateFieldNumber = 2,
    kMoneyChangeRateFieldNumber = 3,
    kViolenceRateFieldNumber = 4,
    kSpeedRateFieldNumber = 5,
    kTypeFieldNumber = 6,
  };
  // int32 ratioLimit = 1;
  void clear_ratiolimit();
  ::PROTOBUF_NAMESPACE_ID::int32 ratiolimit() const;
  void set_ratiolimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratiolimit() const;
  void _internal_set_ratiolimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float hitChangeRate = 2;
  void clear_hitchangerate();
  float hitchangerate() const;
  void set_hitchangerate(float value);
  private:
  float _internal_hitchangerate() const;
  void _internal_set_hitchangerate(float value);
  public:

  // float moneyChangeRate = 3;
  void clear_moneychangerate();
  float moneychangerate() const;
  void set_moneychangerate(float value);
  private:
  float _internal_moneychangerate() const;
  void _internal_set_moneychangerate(float value);
  public:

  // float violenceRate = 4;
  void clear_violencerate();
  float violencerate() const;
  void set_violencerate(float value);
  private:
  float _internal_violencerate() const;
  void _internal_set_violencerate(float value);
  public:

  // float speedRate = 5;
  void clear_speedrate();
  float speedrate() const;
  void set_speedrate(float value);
  private:
  float _internal_speedrate() const;
  void _internal_set_speedrate(float value);
  public:

  // int32 type = 6;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.PlaneSpecEffect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratiolimit_;
  float hitchangerate_;
  float moneychangerate_;
  float violencerate_;
  float speedrate_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class WingsSpecEffect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.WingsSpecEffect) */ {
 public:
  inline WingsSpecEffect() : WingsSpecEffect(nullptr) {}
  virtual ~WingsSpecEffect();

  WingsSpecEffect(const WingsSpecEffect& from);
  WingsSpecEffect(WingsSpecEffect&& from) noexcept
    : WingsSpecEffect() {
    *this = ::std::move(from);
  }

  inline WingsSpecEffect& operator=(const WingsSpecEffect& from) {
    CopyFrom(from);
    return *this;
  }
  inline WingsSpecEffect& operator=(WingsSpecEffect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WingsSpecEffect& default_instance();

  static inline const WingsSpecEffect* internal_default_instance() {
    return reinterpret_cast<const WingsSpecEffect*>(
               &_WingsSpecEffect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(WingsSpecEffect& a, WingsSpecEffect& b) {
    a.Swap(&b);
  }
  inline void Swap(WingsSpecEffect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WingsSpecEffect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WingsSpecEffect* New() const final {
    return CreateMaybeMessage<WingsSpecEffect>(nullptr);
  }

  WingsSpecEffect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WingsSpecEffect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WingsSpecEffect& from);
  void MergeFrom(const WingsSpecEffect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WingsSpecEffect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.WingsSpecEffect";
  }
  protected:
  explicit WingsSpecEffect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedRateFieldNumber = 1,
    kRatioLimitFieldNumber = 2,
    kHitChangeRateFieldNumber = 3,
    kMoneyChangeRateFieldNumber = 4,
    kTypeFieldNumber = 5,
  };
  // float speedRate = 1;
  void clear_speedrate();
  float speedrate() const;
  void set_speedrate(float value);
  private:
  float _internal_speedrate() const;
  void _internal_set_speedrate(float value);
  public:

  // int32 ratioLimit = 2;
  void clear_ratiolimit();
  ::PROTOBUF_NAMESPACE_ID::int32 ratiolimit() const;
  void set_ratiolimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratiolimit() const;
  void _internal_set_ratiolimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float hitChangeRate = 3;
  void clear_hitchangerate();
  float hitchangerate() const;
  void set_hitchangerate(float value);
  private:
  float _internal_hitchangerate() const;
  void _internal_set_hitchangerate(float value);
  public:

  // float moneyChangeRate = 4;
  void clear_moneychangerate();
  float moneychangerate() const;
  void set_moneychangerate(float value);
  private:
  float _internal_moneychangerate() const;
  void _internal_set_moneychangerate(float value);
  public:

  // int32 type = 5;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.WingsSpecEffect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float speedrate_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratiolimit_;
  float hitchangerate_;
  float moneychangerate_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class PlaneInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.PlaneInfo) */ {
 public:
  inline PlaneInfo() : PlaneInfo(nullptr) {}
  virtual ~PlaneInfo();

  PlaneInfo(const PlaneInfo& from);
  PlaneInfo(PlaneInfo&& from) noexcept
    : PlaneInfo() {
    *this = ::std::move(from);
  }

  inline PlaneInfo& operator=(const PlaneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaneInfo& operator=(PlaneInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaneInfo& default_instance();

  static inline const PlaneInfo* internal_default_instance() {
    return reinterpret_cast<const PlaneInfo*>(
               &_PlaneInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(PlaneInfo& a, PlaneInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaneInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaneInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaneInfo* New() const final {
    return CreateMaybeMessage<PlaneInfo>(nullptr);
  }

  PlaneInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaneInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaneInfo& from);
  void MergeFrom(const PlaneInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaneInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.PlaneInfo";
  }
  protected:
  explicit PlaneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlaneSpecEffectFieldNumber = 8,
    kBuffFieldNumber = 12,
    kPlaneIDFieldNumber = 1,
    kVipLevelFieldNumber = 3,
    kIsVipFieldNumber = 2,
    kIsMemberFieldNumber = 4,
    kIsTaskLockFieldNumber = 5,
    kEnableFieldNumber = 7,
    kRequireActFieldNumber = 6,
    kTimestampFieldNumber = 9,
    kRankFlagFieldNumber = 10,
    kPriceFieldNumber = 11,
  };
  // .PlaneWar.PlaneSpecEffect planeSpecEffect = 8;
  bool has_planespeceffect() const;
  private:
  bool _internal_has_planespeceffect() const;
  public:
  void clear_planespeceffect();
  const ::PlaneWar::PlaneSpecEffect& planespeceffect() const;
  ::PlaneWar::PlaneSpecEffect* release_planespeceffect();
  ::PlaneWar::PlaneSpecEffect* mutable_planespeceffect();
  void set_allocated_planespeceffect(::PlaneWar::PlaneSpecEffect* planespeceffect);
  private:
  const ::PlaneWar::PlaneSpecEffect& _internal_planespeceffect() const;
  ::PlaneWar::PlaneSpecEffect* _internal_mutable_planespeceffect();
  public:
  void unsafe_arena_set_allocated_planespeceffect(
      ::PlaneWar::PlaneSpecEffect* planespeceffect);
  ::PlaneWar::PlaneSpecEffect* unsafe_arena_release_planespeceffect();

  // .PlaneWar.PlaneSpecEffect buff = 12;
  bool has_buff() const;
  private:
  bool _internal_has_buff() const;
  public:
  void clear_buff();
  const ::PlaneWar::PlaneSpecEffect& buff() const;
  ::PlaneWar::PlaneSpecEffect* release_buff();
  ::PlaneWar::PlaneSpecEffect* mutable_buff();
  void set_allocated_buff(::PlaneWar::PlaneSpecEffect* buff);
  private:
  const ::PlaneWar::PlaneSpecEffect& _internal_buff() const;
  ::PlaneWar::PlaneSpecEffect* _internal_mutable_buff();
  public:
  void unsafe_arena_set_allocated_buff(
      ::PlaneWar::PlaneSpecEffect* buff);
  ::PlaneWar::PlaneSpecEffect* unsafe_arena_release_buff();

  // int32 planeID = 1;
  void clear_planeid();
  ::PROTOBUF_NAMESPACE_ID::int32 planeid() const;
  void set_planeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_planeid() const;
  void _internal_set_planeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vipLevel = 3;
  void clear_viplevel();
  ::PROTOBUF_NAMESPACE_ID::int32 viplevel() const;
  void set_viplevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_viplevel() const;
  void _internal_set_viplevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isVip = 2;
  void clear_isvip();
  bool isvip() const;
  void set_isvip(bool value);
  private:
  bool _internal_isvip() const;
  void _internal_set_isvip(bool value);
  public:

  // bool isMember = 4;
  void clear_ismember();
  bool ismember() const;
  void set_ismember(bool value);
  private:
  bool _internal_ismember() const;
  void _internal_set_ismember(bool value);
  public:

  // bool isTaskLock = 5;
  void clear_istasklock();
  bool istasklock() const;
  void set_istasklock(bool value);
  private:
  bool _internal_istasklock() const;
  void _internal_set_istasklock(bool value);
  public:

  // bool enable = 7;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // int32 requireAct = 6;
  void clear_requireact();
  ::PROTOBUF_NAMESPACE_ID::int32 requireact() const;
  void set_requireact(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requireact() const;
  void _internal_set_requireact(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 timestamp = 9;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rankFlag = 10;
  void clear_rankflag();
  ::PROTOBUF_NAMESPACE_ID::int32 rankflag() const;
  void set_rankflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rankflag() const;
  void _internal_set_rankflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 price = 11;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.PlaneInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::PlaneSpecEffect* planespeceffect_;
  ::PlaneWar::PlaneSpecEffect* buff_;
  ::PROTOBUF_NAMESPACE_ID::int32 planeid_;
  ::PROTOBUF_NAMESPACE_ID::int32 viplevel_;
  bool isvip_;
  bool ismember_;
  bool istasklock_;
  bool enable_;
  ::PROTOBUF_NAMESPACE_ID::int32 requireact_;
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 rankflag_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class InteractionItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.InteractionItem) */ {
 public:
  inline InteractionItem() : InteractionItem(nullptr) {}
  virtual ~InteractionItem();

  InteractionItem(const InteractionItem& from);
  InteractionItem(InteractionItem&& from) noexcept
    : InteractionItem() {
    *this = ::std::move(from);
  }

  inline InteractionItem& operator=(const InteractionItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline InteractionItem& operator=(InteractionItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InteractionItem& default_instance();

  static inline const InteractionItem* internal_default_instance() {
    return reinterpret_cast<const InteractionItem*>(
               &_InteractionItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(InteractionItem& a, InteractionItem& b) {
    a.Swap(&b);
  }
  inline void Swap(InteractionItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InteractionItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InteractionItem* New() const final {
    return CreateMaybeMessage<InteractionItem>(nullptr);
  }

  InteractionItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InteractionItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InteractionItem& from);
  void MergeFrom(const InteractionItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InteractionItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.InteractionItem";
  }
  protected:
  explicit InteractionItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kCostFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cost = 2;
  void clear_cost();
  ::PROTOBUF_NAMESPACE_ID::int32 cost() const;
  void set_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cost() const;
  void _internal_set_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.InteractionItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 cost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class RankStatusInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.RankStatusInfo) */ {
 public:
  inline RankStatusInfo() : RankStatusInfo(nullptr) {}
  virtual ~RankStatusInfo();

  RankStatusInfo(const RankStatusInfo& from);
  RankStatusInfo(RankStatusInfo&& from) noexcept
    : RankStatusInfo() {
    *this = ::std::move(from);
  }

  inline RankStatusInfo& operator=(const RankStatusInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankStatusInfo& operator=(RankStatusInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankStatusInfo& default_instance();

  static inline const RankStatusInfo* internal_default_instance() {
    return reinterpret_cast<const RankStatusInfo*>(
               &_RankStatusInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(RankStatusInfo& a, RankStatusInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RankStatusInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RankStatusInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankStatusInfo* New() const final {
    return CreateMaybeMessage<RankStatusInfo>(nullptr);
  }

  RankStatusInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankStatusInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankStatusInfo& from);
  void MergeFrom(const RankStatusInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankStatusInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.RankStatusInfo";
  }
  protected:
  explicit RankStatusInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowTypeListFieldNumber = 2,
    kRankEnableFieldNumber = 1,
  };
  // repeated int32 allowTypeList = 2;
  int allowtypelist_size() const;
  private:
  int _internal_allowtypelist_size() const;
  public:
  void clear_allowtypelist();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_allowtypelist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_allowtypelist() const;
  void _internal_add_allowtypelist(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_allowtypelist();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 allowtypelist(int index) const;
  void set_allowtypelist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_allowtypelist(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      allowtypelist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_allowtypelist();

  // bool rankEnable = 1;
  void clear_rankenable();
  bool rankenable() const;
  void set_rankenable(bool value);
  private:
  bool _internal_rankenable() const;
  void _internal_set_rankenable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.RankStatusInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > allowtypelist_;
  mutable std::atomic<int> _allowtypelist_cached_byte_size_;
  bool rankenable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class WingsInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.WingsInfo) */ {
 public:
  inline WingsInfo() : WingsInfo(nullptr) {}
  virtual ~WingsInfo();

  WingsInfo(const WingsInfo& from);
  WingsInfo(WingsInfo&& from) noexcept
    : WingsInfo() {
    *this = ::std::move(from);
  }

  inline WingsInfo& operator=(const WingsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WingsInfo& operator=(WingsInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WingsInfo& default_instance();

  static inline const WingsInfo* internal_default_instance() {
    return reinterpret_cast<const WingsInfo*>(
               &_WingsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(WingsInfo& a, WingsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(WingsInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WingsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WingsInfo* New() const final {
    return CreateMaybeMessage<WingsInfo>(nullptr);
  }

  WingsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WingsInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WingsInfo& from);
  void MergeFrom(const WingsInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WingsInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.WingsInfo";
  }
  protected:
  explicit WingsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWingsSpecEffectFieldNumber = 4,
    kBuffFieldNumber = 7,
    kWingsIdFieldNumber = 1,
    kEnableFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kRankFlagFieldNumber = 5,
    kPriceFieldNumber = 6,
  };
  // .PlaneWar.WingsSpecEffect wingsSpecEffect = 4;
  bool has_wingsspeceffect() const;
  private:
  bool _internal_has_wingsspeceffect() const;
  public:
  void clear_wingsspeceffect();
  const ::PlaneWar::WingsSpecEffect& wingsspeceffect() const;
  ::PlaneWar::WingsSpecEffect* release_wingsspeceffect();
  ::PlaneWar::WingsSpecEffect* mutable_wingsspeceffect();
  void set_allocated_wingsspeceffect(::PlaneWar::WingsSpecEffect* wingsspeceffect);
  private:
  const ::PlaneWar::WingsSpecEffect& _internal_wingsspeceffect() const;
  ::PlaneWar::WingsSpecEffect* _internal_mutable_wingsspeceffect();
  public:
  void unsafe_arena_set_allocated_wingsspeceffect(
      ::PlaneWar::WingsSpecEffect* wingsspeceffect);
  ::PlaneWar::WingsSpecEffect* unsafe_arena_release_wingsspeceffect();

  // .PlaneWar.WingsSpecEffect buff = 7;
  bool has_buff() const;
  private:
  bool _internal_has_buff() const;
  public:
  void clear_buff();
  const ::PlaneWar::WingsSpecEffect& buff() const;
  ::PlaneWar::WingsSpecEffect* release_buff();
  ::PlaneWar::WingsSpecEffect* mutable_buff();
  void set_allocated_buff(::PlaneWar::WingsSpecEffect* buff);
  private:
  const ::PlaneWar::WingsSpecEffect& _internal_buff() const;
  ::PlaneWar::WingsSpecEffect* _internal_mutable_buff();
  public:
  void unsafe_arena_set_allocated_buff(
      ::PlaneWar::WingsSpecEffect* buff);
  ::PlaneWar::WingsSpecEffect* unsafe_arena_release_buff();

  // int32 wingsId = 1;
  void clear_wingsid();
  ::PROTOBUF_NAMESPACE_ID::int32 wingsid() const;
  void set_wingsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wingsid() const;
  void _internal_set_wingsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool enable = 2;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // int32 timestamp = 3;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rankFlag = 5;
  void clear_rankflag();
  ::PROTOBUF_NAMESPACE_ID::int32 rankflag() const;
  void set_rankflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rankflag() const;
  void _internal_set_rankflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 price = 6;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.WingsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::WingsSpecEffect* wingsspeceffect_;
  ::PlaneWar::WingsSpecEffect* buff_;
  ::PROTOBUF_NAMESPACE_ID::int32 wingsid_;
  bool enable_;
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 rankflag_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class RoomInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.RoomInfo) */ {
 public:
  inline RoomInfo() : RoomInfo(nullptr) {}
  virtual ~RoomInfo();

  RoomInfo(const RoomInfo& from);
  RoomInfo(RoomInfo&& from) noexcept
    : RoomInfo() {
    *this = ::std::move(from);
  }

  inline RoomInfo& operator=(const RoomInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomInfo& operator=(RoomInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomInfo& default_instance();

  static inline const RoomInfo* internal_default_instance() {
    return reinterpret_cast<const RoomInfo*>(
               &_RoomInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(RoomInfo& a, RoomInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomInfo* New() const final {
    return CreateMaybeMessage<RoomInfo>(nullptr);
  }

  RoomInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomInfo& from);
  void MergeFrom(const RoomInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.RoomInfo";
  }
  protected:
  explicit RoomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlaneListFieldNumber = 1,
    kInteractionListFieldNumber = 3,
    kRewardMonsterListFieldNumber = 6,
    kWingsListFieldNumber = 8,
    kRatioListFieldNumber = 9,
    kRankStatusFieldNumber = 7,
    kScratchCardEnableFieldNumber = 2,
    kPiggyBankEnableFieldNumber = 4,
    kPersonalPoolEnableFieldNumber = 5,
  };
  // repeated .PlaneWar.PlaneInfo planeList = 1;
  int planelist_size() const;
  private:
  int _internal_planelist_size() const;
  public:
  void clear_planelist();
  ::PlaneWar::PlaneInfo* mutable_planelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PlaneInfo >*
      mutable_planelist();
  private:
  const ::PlaneWar::PlaneInfo& _internal_planelist(int index) const;
  ::PlaneWar::PlaneInfo* _internal_add_planelist();
  public:
  const ::PlaneWar::PlaneInfo& planelist(int index) const;
  ::PlaneWar::PlaneInfo* add_planelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PlaneInfo >&
      planelist() const;

  // repeated .PlaneWar.InteractionItem interactionList = 3;
  int interactionlist_size() const;
  private:
  int _internal_interactionlist_size() const;
  public:
  void clear_interactionlist();
  ::PlaneWar::InteractionItem* mutable_interactionlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::InteractionItem >*
      mutable_interactionlist();
  private:
  const ::PlaneWar::InteractionItem& _internal_interactionlist(int index) const;
  ::PlaneWar::InteractionItem* _internal_add_interactionlist();
  public:
  const ::PlaneWar::InteractionItem& interactionlist(int index) const;
  ::PlaneWar::InteractionItem* add_interactionlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::InteractionItem >&
      interactionlist() const;

  // repeated int32 rewardMonsterList = 6;
  int rewardmonsterlist_size() const;
  private:
  int _internal_rewardmonsterlist_size() const;
  public:
  void clear_rewardmonsterlist();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rewardmonsterlist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_rewardmonsterlist() const;
  void _internal_add_rewardmonsterlist(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_rewardmonsterlist();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 rewardmonsterlist(int index) const;
  void set_rewardmonsterlist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_rewardmonsterlist(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      rewardmonsterlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_rewardmonsterlist();

  // repeated .PlaneWar.WingsInfo wingsList = 8;
  int wingslist_size() const;
  private:
  int _internal_wingslist_size() const;
  public:
  void clear_wingslist();
  ::PlaneWar::WingsInfo* mutable_wingslist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::WingsInfo >*
      mutable_wingslist();
  private:
  const ::PlaneWar::WingsInfo& _internal_wingslist(int index) const;
  ::PlaneWar::WingsInfo* _internal_add_wingslist();
  public:
  const ::PlaneWar::WingsInfo& wingslist(int index) const;
  ::PlaneWar::WingsInfo* add_wingslist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::WingsInfo >&
      wingslist() const;

  // repeated int32 ratioList = 9;
  int ratiolist_size() const;
  private:
  int _internal_ratiolist_size() const;
  public:
  void clear_ratiolist();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratiolist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_ratiolist() const;
  void _internal_add_ratiolist(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_ratiolist();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 ratiolist(int index) const;
  void set_ratiolist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_ratiolist(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      ratiolist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_ratiolist();

  // .PlaneWar.RankStatusInfo rankStatus = 7;
  bool has_rankstatus() const;
  private:
  bool _internal_has_rankstatus() const;
  public:
  void clear_rankstatus();
  const ::PlaneWar::RankStatusInfo& rankstatus() const;
  ::PlaneWar::RankStatusInfo* release_rankstatus();
  ::PlaneWar::RankStatusInfo* mutable_rankstatus();
  void set_allocated_rankstatus(::PlaneWar::RankStatusInfo* rankstatus);
  private:
  const ::PlaneWar::RankStatusInfo& _internal_rankstatus() const;
  ::PlaneWar::RankStatusInfo* _internal_mutable_rankstatus();
  public:
  void unsafe_arena_set_allocated_rankstatus(
      ::PlaneWar::RankStatusInfo* rankstatus);
  ::PlaneWar::RankStatusInfo* unsafe_arena_release_rankstatus();

  // bool scratchCardEnable = 2;
  void clear_scratchcardenable();
  bool scratchcardenable() const;
  void set_scratchcardenable(bool value);
  private:
  bool _internal_scratchcardenable() const;
  void _internal_set_scratchcardenable(bool value);
  public:

  // bool piggyBankEnable = 4;
  void clear_piggybankenable();
  bool piggybankenable() const;
  void set_piggybankenable(bool value);
  private:
  bool _internal_piggybankenable() const;
  void _internal_set_piggybankenable(bool value);
  public:

  // bool personalPoolEnable = 5;
  void clear_personalpoolenable();
  bool personalpoolenable() const;
  void set_personalpoolenable(bool value);
  private:
  bool _internal_personalpoolenable() const;
  void _internal_set_personalpoolenable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.RoomInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PlaneInfo > planelist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::InteractionItem > interactionlist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > rewardmonsterlist_;
  mutable std::atomic<int> _rewardmonsterlist_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::WingsInfo > wingslist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > ratiolist_;
  mutable std::atomic<int> _ratiolist_cached_byte_size_;
  ::PlaneWar::RankStatusInfo* rankstatus_;
  bool scratchcardenable_;
  bool piggybankenable_;
  bool personalpoolenable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSReady PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSReady) */ {
 public:
  inline CSReady() : CSReady(nullptr) {}
  virtual ~CSReady();

  CSReady(const CSReady& from);
  CSReady(CSReady&& from) noexcept
    : CSReady() {
    *this = ::std::move(from);
  }

  inline CSReady& operator=(const CSReady& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReady& operator=(CSReady&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSReady& default_instance();

  static inline const CSReady* internal_default_instance() {
    return reinterpret_cast<const CSReady*>(
               &_CSReady_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CSReady& a, CSReady& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReady* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReady* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSReady* New() const final {
    return CreateMaybeMessage<CSReady>(nullptr);
  }

  CSReady* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSReady>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSReady& from);
  void MergeFrom(const CSReady& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSReady* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSReady";
  }
  protected:
  explicit CSReady(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.CSReady)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCReady PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCReady) */ {
 public:
  inline SCReady() : SCReady(nullptr) {}
  virtual ~SCReady();

  SCReady(const SCReady& from);
  SCReady(SCReady&& from) noexcept
    : SCReady() {
    *this = ::std::move(from);
  }

  inline SCReady& operator=(const SCReady& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCReady& operator=(SCReady&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCReady& default_instance();

  static inline const SCReady* internal_default_instance() {
    return reinterpret_cast<const SCReady*>(
               &_SCReady_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(SCReady& a, SCReady& b) {
    a.Swap(&b);
  }
  inline void Swap(SCReady* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCReady* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCReady* New() const final {
    return CreateMaybeMessage<SCReady>(nullptr);
  }

  SCReady* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCReady>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCReady& from);
  void MergeFrom(const SCReady& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCReady* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCReady";
  }
  protected:
  explicit SCReady(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerListFieldNumber = 1,
    kRoomInfoFieldNumber = 2,
  };
  // repeated .PlaneWar.PlayerInfo playerList = 1;
  int playerlist_size() const;
  private:
  int _internal_playerlist_size() const;
  public:
  void clear_playerlist();
  ::PlaneWar::PlayerInfo* mutable_playerlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PlayerInfo >*
      mutable_playerlist();
  private:
  const ::PlaneWar::PlayerInfo& _internal_playerlist(int index) const;
  ::PlaneWar::PlayerInfo* _internal_add_playerlist();
  public:
  const ::PlaneWar::PlayerInfo& playerlist(int index) const;
  ::PlaneWar::PlayerInfo* add_playerlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PlayerInfo >&
      playerlist() const;

  // .PlaneWar.RoomInfo roomInfo = 2;
  bool has_roominfo() const;
  private:
  bool _internal_has_roominfo() const;
  public:
  void clear_roominfo();
  const ::PlaneWar::RoomInfo& roominfo() const;
  ::PlaneWar::RoomInfo* release_roominfo();
  ::PlaneWar::RoomInfo* mutable_roominfo();
  void set_allocated_roominfo(::PlaneWar::RoomInfo* roominfo);
  private:
  const ::PlaneWar::RoomInfo& _internal_roominfo() const;
  ::PlaneWar::RoomInfo* _internal_mutable_roominfo();
  public:
  void unsafe_arena_set_allocated_roominfo(
      ::PlaneWar::RoomInfo* roominfo);
  ::PlaneWar::RoomInfo* unsafe_arena_release_roominfo();

  // @@protoc_insertion_point(class_scope:PlaneWar.SCReady)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PlayerInfo > playerlist_;
  ::PlaneWar::RoomInfo* roominfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCUserEnterNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCUserEnterNotify) */ {
 public:
  inline SCUserEnterNotify() : SCUserEnterNotify(nullptr) {}
  virtual ~SCUserEnterNotify();

  SCUserEnterNotify(const SCUserEnterNotify& from);
  SCUserEnterNotify(SCUserEnterNotify&& from) noexcept
    : SCUserEnterNotify() {
    *this = ::std::move(from);
  }

  inline SCUserEnterNotify& operator=(const SCUserEnterNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUserEnterNotify& operator=(SCUserEnterNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUserEnterNotify& default_instance();

  static inline const SCUserEnterNotify* internal_default_instance() {
    return reinterpret_cast<const SCUserEnterNotify*>(
               &_SCUserEnterNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(SCUserEnterNotify& a, SCUserEnterNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUserEnterNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUserEnterNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUserEnterNotify* New() const final {
    return CreateMaybeMessage<SCUserEnterNotify>(nullptr);
  }

  SCUserEnterNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUserEnterNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUserEnterNotify& from);
  void MergeFrom(const SCUserEnterNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUserEnterNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCUserEnterNotify";
  }
  protected:
  explicit SCUserEnterNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
  };
  // .PlaneWar.PlayerInfo player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::PlaneWar::PlayerInfo& player() const;
  ::PlaneWar::PlayerInfo* release_player();
  ::PlaneWar::PlayerInfo* mutable_player();
  void set_allocated_player(::PlaneWar::PlayerInfo* player);
  private:
  const ::PlaneWar::PlayerInfo& _internal_player() const;
  ::PlaneWar::PlayerInfo* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::PlaneWar::PlayerInfo* player);
  ::PlaneWar::PlayerInfo* unsafe_arena_release_player();

  // @@protoc_insertion_point(class_scope:PlaneWar.SCUserEnterNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::PlayerInfo* player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class MonsterInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.MonsterInfo) */ {
 public:
  inline MonsterInfo() : MonsterInfo(nullptr) {}
  virtual ~MonsterInfo();

  MonsterInfo(const MonsterInfo& from);
  MonsterInfo(MonsterInfo&& from) noexcept
    : MonsterInfo() {
    *this = ::std::move(from);
  }

  inline MonsterInfo& operator=(const MonsterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonsterInfo& operator=(MonsterInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MonsterInfo& default_instance();

  static inline const MonsterInfo* internal_default_instance() {
    return reinterpret_cast<const MonsterInfo*>(
               &_MonsterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(MonsterInfo& a, MonsterInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MonsterInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonsterInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MonsterInfo* New() const final {
    return CreateMaybeMessage<MonsterInfo>(nullptr);
  }

  MonsterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MonsterInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MonsterInfo& from);
  void MergeFrom(const MonsterInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonsterInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.MonsterInfo";
  }
  protected:
  explicit MonsterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonsterTypeFieldNumber = 1,
    kMonsterUIDFieldNumber = 2,
    kIsConnectFieldNumber = 3,
  };
  // int32 monsterType = 1;
  void clear_monstertype();
  ::PROTOBUF_NAMESPACE_ID::int32 monstertype() const;
  void set_monstertype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_monstertype() const;
  void _internal_set_monstertype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 monsterUID = 2;
  void clear_monsteruid();
  ::PROTOBUF_NAMESPACE_ID::int32 monsteruid() const;
  void set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_monsteruid() const;
  void _internal_set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isConnect = 3;
  void clear_isconnect();
  bool isconnect() const;
  void set_isconnect(bool value);
  private:
  bool _internal_isconnect() const;
  void _internal_set_isconnect(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.MonsterInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 monstertype_;
  ::PROTOBUF_NAMESPACE_ID::int32 monsteruid_;
  bool isconnect_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCMonsterSpawn PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCMonsterSpawn) */ {
 public:
  inline SCMonsterSpawn() : SCMonsterSpawn(nullptr) {}
  virtual ~SCMonsterSpawn();

  SCMonsterSpawn(const SCMonsterSpawn& from);
  SCMonsterSpawn(SCMonsterSpawn&& from) noexcept
    : SCMonsterSpawn() {
    *this = ::std::move(from);
  }

  inline SCMonsterSpawn& operator=(const SCMonsterSpawn& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCMonsterSpawn& operator=(SCMonsterSpawn&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCMonsterSpawn& default_instance();

  static inline const SCMonsterSpawn* internal_default_instance() {
    return reinterpret_cast<const SCMonsterSpawn*>(
               &_SCMonsterSpawn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(SCMonsterSpawn& a, SCMonsterSpawn& b) {
    a.Swap(&b);
  }
  inline void Swap(SCMonsterSpawn* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCMonsterSpawn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCMonsterSpawn* New() const final {
    return CreateMaybeMessage<SCMonsterSpawn>(nullptr);
  }

  SCMonsterSpawn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCMonsterSpawn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCMonsterSpawn& from);
  void MergeFrom(const SCMonsterSpawn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCMonsterSpawn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCMonsterSpawn";
  }
  protected:
  explicit SCMonsterSpawn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonsterListFieldNumber = 2,
    kConfigIDFieldNumber = 1,
    kIsCallFieldNumber = 3,
  };
  // repeated .PlaneWar.MonsterInfo monsterList = 2;
  int monsterlist_size() const;
  private:
  int _internal_monsterlist_size() const;
  public:
  void clear_monsterlist();
  ::PlaneWar::MonsterInfo* mutable_monsterlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MonsterInfo >*
      mutable_monsterlist();
  private:
  const ::PlaneWar::MonsterInfo& _internal_monsterlist(int index) const;
  ::PlaneWar::MonsterInfo* _internal_add_monsterlist();
  public:
  const ::PlaneWar::MonsterInfo& monsterlist(int index) const;
  ::PlaneWar::MonsterInfo* add_monsterlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MonsterInfo >&
      monsterlist() const;

  // int32 configID = 1;
  void clear_configid();
  ::PROTOBUF_NAMESPACE_ID::int32 configid() const;
  void set_configid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_configid() const;
  void _internal_set_configid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isCall = 3;
  void clear_iscall();
  bool iscall() const;
  void set_iscall(bool value);
  private:
  bool _internal_iscall() const;
  void _internal_set_iscall(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCMonsterSpawn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MonsterInfo > monsterlist_;
  ::PROTOBUF_NAMESPACE_ID::int32 configid_;
  bool iscall_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSShot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSShot) */ {
 public:
  inline CSShot() : CSShot(nullptr) {}
  virtual ~CSShot();

  CSShot(const CSShot& from);
  CSShot(CSShot&& from) noexcept
    : CSShot() {
    *this = ::std::move(from);
  }

  inline CSShot& operator=(const CSShot& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSShot& operator=(CSShot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSShot& default_instance();

  static inline const CSShot* internal_default_instance() {
    return reinterpret_cast<const CSShot*>(
               &_CSShot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CSShot& a, CSShot& b) {
    a.Swap(&b);
  }
  inline void Swap(CSShot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSShot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSShot* New() const final {
    return CreateMaybeMessage<CSShot>(nullptr);
  }

  CSShot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSShot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSShot& from);
  void MergeFrom(const CSShot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSShot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSShot";
  }
  protected:
  explicit CSShot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAngleFieldNumber = 1,
    kRatioFieldNumber = 2,
    kBulletTypeFieldNumber = 3,
    kScatterFieldNumber = 4,
    kSourceUIDFieldNumber = 5,
  };
  // int32 angle = 1;
  void clear_angle();
  ::PROTOBUF_NAMESPACE_ID::int32 angle() const;
  void set_angle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_angle() const;
  void _internal_set_angle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 2;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bulletType = 3;
  void clear_bullettype();
  ::PROTOBUF_NAMESPACE_ID::int32 bullettype() const;
  void set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bullettype() const;
  void _internal_set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 scatter = 4;
  void clear_scatter();
  ::PROTOBUF_NAMESPACE_ID::int32 scatter() const;
  void set_scatter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scatter() const;
  void _internal_set_scatter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sourceUID = 5;
  void clear_sourceuid();
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid() const;
  void set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sourceuid() const;
  void _internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSShot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 angle_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 bullettype_;
  ::PROTOBUF_NAMESPACE_ID::int32 scatter_;
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCShot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCShot) */ {
 public:
  inline SCShot() : SCShot(nullptr) {}
  virtual ~SCShot();

  SCShot(const SCShot& from);
  SCShot(SCShot&& from) noexcept
    : SCShot() {
    *this = ::std::move(from);
  }

  inline SCShot& operator=(const SCShot& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCShot& operator=(SCShot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCShot& default_instance();

  static inline const SCShot* internal_default_instance() {
    return reinterpret_cast<const SCShot*>(
               &_SCShot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(SCShot& a, SCShot& b) {
    a.Swap(&b);
  }
  inline void Swap(SCShot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCShot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCShot* New() const final {
    return CreateMaybeMessage<SCShot>(nullptr);
  }

  SCShot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCShot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCShot& from);
  void MergeFrom(const SCShot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCShot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCShot";
  }
  protected:
  explicit SCShot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairFieldNumber = 1,
    kAngleFieldNumber = 2,
    kScoreFieldNumber = 3,
    kBulletTypeFieldNumber = 4,
    kScatterFieldNumber = 5,
  };
  // int32 chair = 1;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 angle = 2;
  void clear_angle();
  ::PROTOBUF_NAMESPACE_ID::int32 angle() const;
  void set_angle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_angle() const;
  void _internal_set_angle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 score = 3;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bulletType = 4;
  void clear_bullettype();
  ::PROTOBUF_NAMESPACE_ID::int32 bullettype() const;
  void set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bullettype() const;
  void _internal_set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 scatter = 5;
  void clear_scatter();
  ::PROTOBUF_NAMESPACE_ID::int32 scatter() const;
  void set_scatter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scatter() const;
  void _internal_set_scatter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCShot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  ::PROTOBUF_NAMESPACE_ID::int32 angle_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 bullettype_;
  ::PROTOBUF_NAMESPACE_ID::int32 scatter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSLock PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSLock) */ {
 public:
  inline CSLock() : CSLock(nullptr) {}
  virtual ~CSLock();

  CSLock(const CSLock& from);
  CSLock(CSLock&& from) noexcept
    : CSLock() {
    *this = ::std::move(from);
  }

  inline CSLock& operator=(const CSLock& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSLock& operator=(CSLock&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSLock& default_instance();

  static inline const CSLock* internal_default_instance() {
    return reinterpret_cast<const CSLock*>(
               &_CSLock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CSLock& a, CSLock& b) {
    a.Swap(&b);
  }
  inline void Swap(CSLock* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSLock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSLock* New() const final {
    return CreateMaybeMessage<CSLock>(nullptr);
  }

  CSLock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSLock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSLock& from);
  void MergeFrom(const CSLock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSLock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSLock";
  }
  protected:
  explicit CSLock(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonsterUIDFieldNumber = 1,
    kColliderIndexFieldNumber = 2,
  };
  // int32 monsterUID = 1;
  void clear_monsteruid();
  ::PROTOBUF_NAMESPACE_ID::int32 monsteruid() const;
  void set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_monsteruid() const;
  void _internal_set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 colliderIndex = 2;
  void clear_colliderindex();
  ::PROTOBUF_NAMESPACE_ID::int32 colliderindex() const;
  void set_colliderindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_colliderindex() const;
  void _internal_set_colliderindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSLock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 monsteruid_;
  ::PROTOBUF_NAMESPACE_ID::int32 colliderindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCLock PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCLock) */ {
 public:
  inline SCLock() : SCLock(nullptr) {}
  virtual ~SCLock();

  SCLock(const SCLock& from);
  SCLock(SCLock&& from) noexcept
    : SCLock() {
    *this = ::std::move(from);
  }

  inline SCLock& operator=(const SCLock& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCLock& operator=(SCLock&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCLock& default_instance();

  static inline const SCLock* internal_default_instance() {
    return reinterpret_cast<const SCLock*>(
               &_SCLock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(SCLock& a, SCLock& b) {
    a.Swap(&b);
  }
  inline void Swap(SCLock* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCLock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCLock* New() const final {
    return CreateMaybeMessage<SCLock>(nullptr);
  }

  SCLock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCLock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCLock& from);
  void MergeFrom(const SCLock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCLock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCLock";
  }
  protected:
  explicit SCLock(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairFieldNumber = 1,
    kMonsterUIDFieldNumber = 2,
    kColliderIndexFieldNumber = 3,
  };
  // int32 chair = 1;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 monsterUID = 2;
  void clear_monsteruid();
  ::PROTOBUF_NAMESPACE_ID::int32 monsteruid() const;
  void set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_monsteruid() const;
  void _internal_set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 colliderIndex = 3;
  void clear_colliderindex();
  ::PROTOBUF_NAMESPACE_ID::int32 colliderindex() const;
  void set_colliderindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_colliderindex() const;
  void _internal_set_colliderindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCLock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  ::PROTOBUF_NAMESPACE_ID::int32 monsteruid_;
  ::PROTOBUF_NAMESPACE_ID::int32 colliderindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class Poker PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.Poker) */ {
 public:
  inline Poker() : Poker(nullptr) {}
  virtual ~Poker();

  Poker(const Poker& from);
  Poker(Poker&& from) noexcept
    : Poker() {
    *this = ::std::move(from);
  }

  inline Poker& operator=(const Poker& from) {
    CopyFrom(from);
    return *this;
  }
  inline Poker& operator=(Poker&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Poker& default_instance();

  static inline const Poker* internal_default_instance() {
    return reinterpret_cast<const Poker*>(
               &_Poker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(Poker& a, Poker& b) {
    a.Swap(&b);
  }
  inline void Swap(Poker* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Poker* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Poker* New() const final {
    return CreateMaybeMessage<Poker>(nullptr);
  }

  Poker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Poker>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Poker& from);
  void MergeFrom(const Poker& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Poker* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.Poker";
  }
  protected:
  explicit Poker(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kMultipleFieldNumber = 2,
  };
  // int32 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 multiple = 2;
  void clear_multiple();
  ::PROTOBUF_NAMESPACE_ID::int32 multiple() const;
  void set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_multiple() const;
  void _internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.Poker)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  ::PROTOBUF_NAMESPACE_ID::int32 multiple_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class DropPoker PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.DropPoker) */ {
 public:
  inline DropPoker() : DropPoker(nullptr) {}
  virtual ~DropPoker();

  DropPoker(const DropPoker& from);
  DropPoker(DropPoker&& from) noexcept
    : DropPoker() {
    *this = ::std::move(from);
  }

  inline DropPoker& operator=(const DropPoker& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropPoker& operator=(DropPoker&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DropPoker& default_instance();

  static inline const DropPoker* internal_default_instance() {
    return reinterpret_cast<const DropPoker*>(
               &_DropPoker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(DropPoker& a, DropPoker& b) {
    a.Swap(&b);
  }
  inline void Swap(DropPoker* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropPoker* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DropPoker* New() const final {
    return CreateMaybeMessage<DropPoker>(nullptr);
  }

  DropPoker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DropPoker>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DropPoker& from);
  void MergeFrom(const DropPoker& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropPoker* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.DropPoker";
  }
  protected:
  explicit DropPoker(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPokerListFieldNumber = 1,
    kDiceFieldNumber = 2,
    kKindFieldNumber = 3,
    kKindMultipleFieldNumber = 4,
  };
  // repeated .PlaneWar.Poker pokerList = 1;
  int pokerlist_size() const;
  private:
  int _internal_pokerlist_size() const;
  public:
  void clear_pokerlist();
  ::PlaneWar::Poker* mutable_pokerlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::Poker >*
      mutable_pokerlist();
  private:
  const ::PlaneWar::Poker& _internal_pokerlist(int index) const;
  ::PlaneWar::Poker* _internal_add_pokerlist();
  public:
  const ::PlaneWar::Poker& pokerlist(int index) const;
  ::PlaneWar::Poker* add_pokerlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::Poker >&
      pokerlist() const;

  // int32 dice = 2;
  void clear_dice();
  ::PROTOBUF_NAMESPACE_ID::int32 dice() const;
  void set_dice(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dice() const;
  void _internal_set_dice(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 kind = 3;
  void clear_kind();
  ::PROTOBUF_NAMESPACE_ID::int32 kind() const;
  void set_kind(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_kind() const;
  void _internal_set_kind(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 kindMultiple = 4;
  void clear_kindmultiple();
  ::PROTOBUF_NAMESPACE_ID::int32 kindmultiple() const;
  void set_kindmultiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_kindmultiple() const;
  void _internal_set_kindmultiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.DropPoker)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::Poker > pokerlist_;
  ::PROTOBUF_NAMESPACE_ID::int32 dice_;
  ::PROTOBUF_NAMESPACE_ID::int32 kind_;
  ::PROTOBUF_NAMESPACE_ID::int32 kindmultiple_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class TriggerBullet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.TriggerBullet) */ {
 public:
  inline TriggerBullet() : TriggerBullet(nullptr) {}
  virtual ~TriggerBullet();

  TriggerBullet(const TriggerBullet& from);
  TriggerBullet(TriggerBullet&& from) noexcept
    : TriggerBullet() {
    *this = ::std::move(from);
  }

  inline TriggerBullet& operator=(const TriggerBullet& from) {
    CopyFrom(from);
    return *this;
  }
  inline TriggerBullet& operator=(TriggerBullet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TriggerBullet& default_instance();

  static inline const TriggerBullet* internal_default_instance() {
    return reinterpret_cast<const TriggerBullet*>(
               &_TriggerBullet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(TriggerBullet& a, TriggerBullet& b) {
    a.Swap(&b);
  }
  inline void Swap(TriggerBullet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TriggerBullet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TriggerBullet* New() const final {
    return CreateMaybeMessage<TriggerBullet>(nullptr);
  }

  TriggerBullet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TriggerBullet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TriggerBullet& from);
  void MergeFrom(const TriggerBullet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TriggerBullet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.TriggerBullet";
  }
  protected:
  explicit TriggerBullet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 4,
    kParams2FieldNumber = 5,
    kMonetaryFieldNumber = 12,
    kPosFieldNumber = 8,
    kBulletTypeFieldNumber = 1,
    kSubTypeFieldNumber = 2,
    kNumFieldNumber = 3,
    kSourceUIDFieldNumber = 6,
    kGenerationFieldNumber = 7,
    kDelayFieldNumber = 9,
    kRangeFieldNumber = 10,
    kSpeedFieldNumber = 11,
    kDestroyDelayFieldNumber = 13,
    kHitRatioFieldNumber = 14,
  };
  // repeated int32 params = 4;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_params(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_params() const;
  void _internal_add_params(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_params();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 params(int index) const;
  void set_params(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_params(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      params() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_params();

  // repeated int32 params2 = 5;
  int params2_size() const;
  private:
  int _internal_params2_size() const;
  public:
  void clear_params2();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_params2(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_params2() const;
  void _internal_add_params2(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_params2();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 params2(int index) const;
  void set_params2(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_params2(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      params2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_params2();

  // string monetary = 12;
  void clear_monetary();
  const std::string& monetary() const;
  void set_monetary(const std::string& value);
  void set_monetary(std::string&& value);
  void set_monetary(const char* value);
  void set_monetary(const char* value, size_t size);
  std::string* mutable_monetary();
  std::string* release_monetary();
  void set_allocated_monetary(std::string* monetary);
  private:
  const std::string& _internal_monetary() const;
  void _internal_set_monetary(const std::string& value);
  std::string* _internal_mutable_monetary();
  public:

  // .PlaneWar.Pos pos = 8;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::PlaneWar::Pos& pos() const;
  ::PlaneWar::Pos* release_pos();
  ::PlaneWar::Pos* mutable_pos();
  void set_allocated_pos(::PlaneWar::Pos* pos);
  private:
  const ::PlaneWar::Pos& _internal_pos() const;
  ::PlaneWar::Pos* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::PlaneWar::Pos* pos);
  ::PlaneWar::Pos* unsafe_arena_release_pos();

  // int32 bulletType = 1;
  void clear_bullettype();
  ::PROTOBUF_NAMESPACE_ID::int32 bullettype() const;
  void set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bullettype() const;
  void _internal_set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 subType = 2;
  void clear_subtype();
  ::PROTOBUF_NAMESPACE_ID::int32 subtype() const;
  void set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_subtype() const;
  void _internal_set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 3;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sourceUID = 6;
  void clear_sourceuid();
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid() const;
  void set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sourceuid() const;
  void _internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 generation = 7;
  void clear_generation();
  ::PROTOBUF_NAMESPACE_ID::int32 generation() const;
  void set_generation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_generation() const;
  void _internal_set_generation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float delay = 9;
  void clear_delay();
  float delay() const;
  void set_delay(float value);
  private:
  float _internal_delay() const;
  void _internal_set_delay(float value);
  public:

  // int32 range = 10;
  void clear_range();
  ::PROTOBUF_NAMESPACE_ID::int32 range() const;
  void set_range(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_range() const;
  void _internal_set_range(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float speed = 11;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // float destroyDelay = 13;
  void clear_destroydelay();
  float destroydelay() const;
  void set_destroydelay(float value);
  private:
  float _internal_destroydelay() const;
  void _internal_set_destroydelay(float value);
  public:

  // int32 hitRatio = 14;
  void clear_hitratio();
  ::PROTOBUF_NAMESPACE_ID::int32 hitratio() const;
  void set_hitratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hitratio() const;
  void _internal_set_hitratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.TriggerBullet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > params_;
  mutable std::atomic<int> _params_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > params2_;
  mutable std::atomic<int> _params2_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr monetary_;
  ::PlaneWar::Pos* pos_;
  ::PROTOBUF_NAMESPACE_ID::int32 bullettype_;
  ::PROTOBUF_NAMESPACE_ID::int32 subtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 generation_;
  float delay_;
  ::PROTOBUF_NAMESPACE_ID::int32 range_;
  float speed_;
  float destroydelay_;
  ::PROTOBUF_NAMESPACE_ID::int32 hitratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class Roulette PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.Roulette) */ {
 public:
  inline Roulette() : Roulette(nullptr) {}
  virtual ~Roulette();

  Roulette(const Roulette& from);
  Roulette(Roulette&& from) noexcept
    : Roulette() {
    *this = ::std::move(from);
  }

  inline Roulette& operator=(const Roulette& from) {
    CopyFrom(from);
    return *this;
  }
  inline Roulette& operator=(Roulette&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Roulette& default_instance();

  static inline const Roulette* internal_default_instance() {
    return reinterpret_cast<const Roulette*>(
               &_Roulette_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(Roulette& a, Roulette& b) {
    a.Swap(&b);
  }
  inline void Swap(Roulette* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Roulette* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Roulette* New() const final {
    return CreateMaybeMessage<Roulette>(nullptr);
  }

  Roulette* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Roulette>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Roulette& from);
  void MergeFrom(const Roulette& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Roulette* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.Roulette";
  }
  protected:
  explicit Roulette(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOuterRoundFieldNumber = 3,
    kInnerRoundFieldNumber = 4,
    kOuterIndexFieldNumber = 1,
    kInnerIndexFieldNumber = 2,
  };
  // repeated int32 outerRound = 3;
  int outerround_size() const;
  private:
  int _internal_outerround_size() const;
  public:
  void clear_outerround();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_outerround(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_outerround() const;
  void _internal_add_outerround(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_outerround();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 outerround(int index) const;
  void set_outerround(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_outerround(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      outerround() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_outerround();

  // repeated int32 innerRound = 4;
  int innerround_size() const;
  private:
  int _internal_innerround_size() const;
  public:
  void clear_innerround();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_innerround(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_innerround() const;
  void _internal_add_innerround(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_innerround();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 innerround(int index) const;
  void set_innerround(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_innerround(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      innerround() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_innerround();

  // int32 outerIndex = 1;
  void clear_outerindex();
  ::PROTOBUF_NAMESPACE_ID::int32 outerindex() const;
  void set_outerindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_outerindex() const;
  void _internal_set_outerindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 innerIndex = 2;
  void clear_innerindex();
  ::PROTOBUF_NAMESPACE_ID::int32 innerindex() const;
  void set_innerindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_innerindex() const;
  void _internal_set_innerindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.Roulette)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > outerround_;
  mutable std::atomic<int> _outerround_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > innerround_;
  mutable std::atomic<int> _innerround_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 outerindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 innerindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class DropBuff PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.DropBuff) */ {
 public:
  inline DropBuff() : DropBuff(nullptr) {}
  virtual ~DropBuff();

  DropBuff(const DropBuff& from);
  DropBuff(DropBuff&& from) noexcept
    : DropBuff() {
    *this = ::std::move(from);
  }

  inline DropBuff& operator=(const DropBuff& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropBuff& operator=(DropBuff&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DropBuff& default_instance();

  static inline const DropBuff* internal_default_instance() {
    return reinterpret_cast<const DropBuff*>(
               &_DropBuff_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(DropBuff& a, DropBuff& b) {
    a.Swap(&b);
  }
  inline void Swap(DropBuff* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropBuff* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DropBuff* New() const final {
    return CreateMaybeMessage<DropBuff>(nullptr);
  }

  DropBuff* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DropBuff>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DropBuff& from);
  void MergeFrom(const DropBuff& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropBuff* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.DropBuff";
  }
  protected:
  explicit DropBuff(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComposeFieldNumber = 3,
    kDescFieldNumber = 4,
    kBuffUIDFieldNumber = 1,
    kNumFieldNumber = 2,
    kSpeedUpRatioFieldNumber = 5,
  };
  // repeated int32 compose = 3;
  int compose_size() const;
  private:
  int _internal_compose_size() const;
  public:
  void clear_compose();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_compose(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_compose() const;
  void _internal_add_compose(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_compose();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 compose(int index) const;
  void set_compose(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_compose(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      compose() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_compose();

  // repeated int32 desc = 4;
  int desc_size() const;
  private:
  int _internal_desc_size() const;
  public:
  void clear_desc();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_desc(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_desc() const;
  void _internal_add_desc(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_desc();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 desc(int index) const;
  void set_desc(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_desc(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      desc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_desc();

  // int32 buffUID = 1;
  void clear_buffuid();
  ::PROTOBUF_NAMESPACE_ID::int32 buffuid() const;
  void set_buffuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buffuid() const;
  void _internal_set_buffuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 speedUpRatio = 5;
  void clear_speedupratio();
  ::PROTOBUF_NAMESPACE_ID::int32 speedupratio() const;
  void set_speedupratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speedupratio() const;
  void _internal_set_speedupratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.DropBuff)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > compose_;
  mutable std::atomic<int> _compose_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > desc_;
  mutable std::atomic<int> _desc_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 buffuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  ::PROTOBUF_NAMESPACE_ID::int32 speedupratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class FakeTresureInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.FakeTresureInfo) */ {
 public:
  inline FakeTresureInfo() : FakeTresureInfo(nullptr) {}
  virtual ~FakeTresureInfo();

  FakeTresureInfo(const FakeTresureInfo& from);
  FakeTresureInfo(FakeTresureInfo&& from) noexcept
    : FakeTresureInfo() {
    *this = ::std::move(from);
  }

  inline FakeTresureInfo& operator=(const FakeTresureInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FakeTresureInfo& operator=(FakeTresureInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FakeTresureInfo& default_instance();

  static inline const FakeTresureInfo* internal_default_instance() {
    return reinterpret_cast<const FakeTresureInfo*>(
               &_FakeTresureInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(FakeTresureInfo& a, FakeTresureInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FakeTresureInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FakeTresureInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FakeTresureInfo* New() const final {
    return CreateMaybeMessage<FakeTresureInfo>(nullptr);
  }

  FakeTresureInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FakeTresureInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FakeTresureInfo& from);
  void MergeFrom(const FakeTresureInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FakeTresureInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.FakeTresureInfo";
  }
  protected:
  explicit FakeTresureInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kPropIDFieldNumber = 2,
    kNumFieldNumber = 3,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 propID = 2;
  void clear_propid();
  ::PROTOBUF_NAMESPACE_ID::int32 propid() const;
  void set_propid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_propid() const;
  void _internal_set_propid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 3;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.FakeTresureInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 propid_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class TreasureInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.TreasureInfo) */ {
 public:
  inline TreasureInfo() : TreasureInfo(nullptr) {}
  virtual ~TreasureInfo();

  TreasureInfo(const TreasureInfo& from);
  TreasureInfo(TreasureInfo&& from) noexcept
    : TreasureInfo() {
    *this = ::std::move(from);
  }

  inline TreasureInfo& operator=(const TreasureInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TreasureInfo& operator=(TreasureInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TreasureInfo& default_instance();

  static inline const TreasureInfo* internal_default_instance() {
    return reinterpret_cast<const TreasureInfo*>(
               &_TreasureInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(TreasureInfo& a, TreasureInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TreasureInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TreasureInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TreasureInfo* New() const final {
    return CreateMaybeMessage<TreasureInfo>(nullptr);
  }

  TreasureInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TreasureInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TreasureInfo& from);
  void MergeFrom(const TreasureInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TreasureInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.TreasureInfo";
  }
  protected:
  explicit TreasureInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFakeInfoFieldNumber = 6,
    kShowTypeFieldNumber = 1,
    kTypeFieldNumber = 2,
    kPropIDFieldNumber = 3,
    kNumFieldNumber = 4,
    kFakeTypeFieldNumber = 5,
  };
  // .PlaneWar.FakeTresureInfo fakeInfo = 6;
  bool has_fakeinfo() const;
  private:
  bool _internal_has_fakeinfo() const;
  public:
  void clear_fakeinfo();
  const ::PlaneWar::FakeTresureInfo& fakeinfo() const;
  ::PlaneWar::FakeTresureInfo* release_fakeinfo();
  ::PlaneWar::FakeTresureInfo* mutable_fakeinfo();
  void set_allocated_fakeinfo(::PlaneWar::FakeTresureInfo* fakeinfo);
  private:
  const ::PlaneWar::FakeTresureInfo& _internal_fakeinfo() const;
  ::PlaneWar::FakeTresureInfo* _internal_mutable_fakeinfo();
  public:
  void unsafe_arena_set_allocated_fakeinfo(
      ::PlaneWar::FakeTresureInfo* fakeinfo);
  ::PlaneWar::FakeTresureInfo* unsafe_arena_release_fakeinfo();

  // int32 showType = 1;
  void clear_showtype();
  ::PROTOBUF_NAMESPACE_ID::int32 showtype() const;
  void set_showtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_showtype() const;
  void _internal_set_showtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 propID = 3;
  void clear_propid();
  ::PROTOBUF_NAMESPACE_ID::int32 propid() const;
  void set_propid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_propid() const;
  void _internal_set_propid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 4;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fakeType = 5;
  void clear_faketype();
  ::PROTOBUF_NAMESPACE_ID::int32 faketype() const;
  void set_faketype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_faketype() const;
  void _internal_set_faketype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.TreasureInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::FakeTresureInfo* fakeinfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 showtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 propid_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  ::PROTOBUF_NAMESPACE_ID::int32 faketype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class FortuneWheelInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.FortuneWheelInfo) */ {
 public:
  inline FortuneWheelInfo() : FortuneWheelInfo(nullptr) {}
  virtual ~FortuneWheelInfo();

  FortuneWheelInfo(const FortuneWheelInfo& from);
  FortuneWheelInfo(FortuneWheelInfo&& from) noexcept
    : FortuneWheelInfo() {
    *this = ::std::move(from);
  }

  inline FortuneWheelInfo& operator=(const FortuneWheelInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FortuneWheelInfo& operator=(FortuneWheelInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FortuneWheelInfo& default_instance();

  static inline const FortuneWheelInfo* internal_default_instance() {
    return reinterpret_cast<const FortuneWheelInfo*>(
               &_FortuneWheelInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(FortuneWheelInfo& a, FortuneWheelInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FortuneWheelInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FortuneWheelInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FortuneWheelInfo* New() const final {
    return CreateMaybeMessage<FortuneWheelInfo>(nullptr);
  }

  FortuneWheelInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FortuneWheelInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FortuneWheelInfo& from);
  void MergeFrom(const FortuneWheelInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FortuneWheelInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.FortuneWheelInfo";
  }
  protected:
  explicit FortuneWheelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStageFieldNumber = 1,
    kRatioFieldNumber = 2,
    kNextFieldNumber = 3,
    kColorFieldNumber = 4,
  };
  // int32 stage = 1;
  void clear_stage();
  ::PROTOBUF_NAMESPACE_ID::int32 stage() const;
  void set_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stage() const;
  void _internal_set_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 2;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool next = 3;
  void clear_next();
  bool next() const;
  void set_next(bool value);
  private:
  bool _internal_next() const;
  void _internal_set_next(bool value);
  public:

  // int32 color = 4;
  void clear_color();
  ::PROTOBUF_NAMESPACE_ID::int32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_color() const;
  void _internal_set_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.FortuneWheelInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 stage_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  bool next_;
  ::PROTOBUF_NAMESPACE_ID::int32 color_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class ToadInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.ToadInfo) */ {
 public:
  inline ToadInfo() : ToadInfo(nullptr) {}
  virtual ~ToadInfo();

  ToadInfo(const ToadInfo& from);
  ToadInfo(ToadInfo&& from) noexcept
    : ToadInfo() {
    *this = ::std::move(from);
  }

  inline ToadInfo& operator=(const ToadInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToadInfo& operator=(ToadInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ToadInfo& default_instance();

  static inline const ToadInfo* internal_default_instance() {
    return reinterpret_cast<const ToadInfo*>(
               &_ToadInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(ToadInfo& a, ToadInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ToadInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToadInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ToadInfo* New() const final {
    return CreateMaybeMessage<ToadInfo>(nullptr);
  }

  ToadInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ToadInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ToadInfo& from);
  void MergeFrom(const ToadInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToadInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.ToadInfo";
  }
  protected:
  explicit ToadInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRatioListFieldNumber = 1,
    kCriticalFieldNumber = 2,
  };
  // repeated int32 ratioList = 1;
  int ratiolist_size() const;
  private:
  int _internal_ratiolist_size() const;
  public:
  void clear_ratiolist();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratiolist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_ratiolist() const;
  void _internal_add_ratiolist(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_ratiolist();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 ratiolist(int index) const;
  void set_ratiolist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_ratiolist(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      ratiolist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_ratiolist();

  // int32 critical = 2;
  void clear_critical();
  ::PROTOBUF_NAMESPACE_ID::int32 critical() const;
  void set_critical(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_critical() const;
  void _internal_set_critical(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.ToadInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > ratiolist_;
  mutable std::atomic<int> _ratiolist_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 critical_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class FortuneConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.FortuneConfig) */ {
 public:
  inline FortuneConfig() : FortuneConfig(nullptr) {}
  virtual ~FortuneConfig();

  FortuneConfig(const FortuneConfig& from);
  FortuneConfig(FortuneConfig&& from) noexcept
    : FortuneConfig() {
    *this = ::std::move(from);
  }

  inline FortuneConfig& operator=(const FortuneConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline FortuneConfig& operator=(FortuneConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FortuneConfig& default_instance();

  static inline const FortuneConfig* internal_default_instance() {
    return reinterpret_cast<const FortuneConfig*>(
               &_FortuneConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(FortuneConfig& a, FortuneConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(FortuneConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FortuneConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FortuneConfig* New() const final {
    return CreateMaybeMessage<FortuneConfig>(nullptr);
  }

  FortuneConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FortuneConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FortuneConfig& from);
  void MergeFrom(const FortuneConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FortuneConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.FortuneConfig";
  }
  protected:
  explicit FortuneConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFortuneWheelInfoFieldNumber = 1,
  };
  // repeated .PlaneWar.FortuneWheelInfo fortuneWheelInfo = 1;
  int fortunewheelinfo_size() const;
  private:
  int _internal_fortunewheelinfo_size() const;
  public:
  void clear_fortunewheelinfo();
  ::PlaneWar::FortuneWheelInfo* mutable_fortunewheelinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::FortuneWheelInfo >*
      mutable_fortunewheelinfo();
  private:
  const ::PlaneWar::FortuneWheelInfo& _internal_fortunewheelinfo(int index) const;
  ::PlaneWar::FortuneWheelInfo* _internal_add_fortunewheelinfo();
  public:
  const ::PlaneWar::FortuneWheelInfo& fortunewheelinfo(int index) const;
  ::PlaneWar::FortuneWheelInfo* add_fortunewheelinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::FortuneWheelInfo >&
      fortunewheelinfo() const;

  // @@protoc_insertion_point(class_scope:PlaneWar.FortuneConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::FortuneWheelInfo > fortunewheelinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class BeeConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.BeeConfig) */ {
 public:
  inline BeeConfig() : BeeConfig(nullptr) {}
  virtual ~BeeConfig();

  BeeConfig(const BeeConfig& from);
  BeeConfig(BeeConfig&& from) noexcept
    : BeeConfig() {
    *this = ::std::move(from);
  }

  inline BeeConfig& operator=(const BeeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline BeeConfig& operator=(BeeConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BeeConfig& default_instance();

  static inline const BeeConfig* internal_default_instance() {
    return reinterpret_cast<const BeeConfig*>(
               &_BeeConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(BeeConfig& a, BeeConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(BeeConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BeeConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BeeConfig* New() const final {
    return CreateMaybeMessage<BeeConfig>(nullptr);
  }

  BeeConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BeeConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BeeConfig& from);
  void MergeFrom(const BeeConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeeConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.BeeConfig";
  }
  protected:
  explicit BeeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAListFieldNumber = 1,
    kBListFieldNumber = 2,
    kCListFieldNumber = 3,
  };
  // repeated int32 aList = 1;
  int alist_size() const;
  private:
  int _internal_alist_size() const;
  public:
  void clear_alist();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_alist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_alist() const;
  void _internal_add_alist(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_alist();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 alist(int index) const;
  void set_alist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_alist(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      alist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_alist();

  // repeated int32 bList = 2;
  int blist_size() const;
  private:
  int _internal_blist_size() const;
  public:
  void clear_blist();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_blist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_blist() const;
  void _internal_add_blist(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_blist();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 blist(int index) const;
  void set_blist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_blist(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      blist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_blist();

  // repeated int32 cList = 3;
  int clist_size() const;
  private:
  int _internal_clist_size() const;
  public:
  void clear_clist();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_clist() const;
  void _internal_add_clist(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_clist();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 clist(int index) const;
  void set_clist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_clist(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      clist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_clist();

  // @@protoc_insertion_point(class_scope:PlaneWar.BeeConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > alist_;
  mutable std::atomic<int> _alist_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > blist_;
  mutable std::atomic<int> _blist_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > clist_;
  mutable std::atomic<int> _clist_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CommonReplayConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CommonReplayConfig) */ {
 public:
  inline CommonReplayConfig() : CommonReplayConfig(nullptr) {}
  virtual ~CommonReplayConfig();

  CommonReplayConfig(const CommonReplayConfig& from);
  CommonReplayConfig(CommonReplayConfig&& from) noexcept
    : CommonReplayConfig() {
    *this = ::std::move(from);
  }

  inline CommonReplayConfig& operator=(const CommonReplayConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonReplayConfig& operator=(CommonReplayConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommonReplayConfig& default_instance();

  static inline const CommonReplayConfig* internal_default_instance() {
    return reinterpret_cast<const CommonReplayConfig*>(
               &_CommonReplayConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CommonReplayConfig& a, CommonReplayConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonReplayConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonReplayConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonReplayConfig* New() const final {
    return CreateMaybeMessage<CommonReplayConfig>(nullptr);
  }

  CommonReplayConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonReplayConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonReplayConfig& from);
  void MergeFrom(const CommonReplayConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonReplayConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CommonReplayConfig";
  }
  protected:
  explicit CommonReplayConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxLenFieldNumber = 1,
    kLimitRewardFieldNumber = 2,
    kLimitMulFieldNumber = 3,
  };
  // int32 maxLen = 1;
  void clear_maxlen();
  ::PROTOBUF_NAMESPACE_ID::int32 maxlen() const;
  void set_maxlen(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxlen() const;
  void _internal_set_maxlen(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 limitReward = 2;
  void clear_limitreward();
  ::PROTOBUF_NAMESPACE_ID::int32 limitreward() const;
  void set_limitreward(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limitreward() const;
  void _internal_set_limitreward(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 limitMul = 3;
  void clear_limitmul();
  ::PROTOBUF_NAMESPACE_ID::int32 limitmul() const;
  void set_limitmul(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limitmul() const;
  void _internal_set_limitmul(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CommonReplayConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxlen_;
  ::PROTOBUF_NAMESPACE_ID::int32 limitreward_;
  ::PROTOBUF_NAMESPACE_ID::int32 limitmul_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class GlobalReplayConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.GlobalReplayConfig) */ {
 public:
  inline GlobalReplayConfig() : GlobalReplayConfig(nullptr) {}
  virtual ~GlobalReplayConfig();

  GlobalReplayConfig(const GlobalReplayConfig& from);
  GlobalReplayConfig(GlobalReplayConfig&& from) noexcept
    : GlobalReplayConfig() {
    *this = ::std::move(from);
  }

  inline GlobalReplayConfig& operator=(const GlobalReplayConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalReplayConfig& operator=(GlobalReplayConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GlobalReplayConfig& default_instance();

  static inline const GlobalReplayConfig* internal_default_instance() {
    return reinterpret_cast<const GlobalReplayConfig*>(
               &_GlobalReplayConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(GlobalReplayConfig& a, GlobalReplayConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalReplayConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GlobalReplayConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalReplayConfig* New() const final {
    return CreateMaybeMessage<GlobalReplayConfig>(nullptr);
  }

  GlobalReplayConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalReplayConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GlobalReplayConfig& from);
  void MergeFrom(const GlobalReplayConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalReplayConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.GlobalReplayConfig";
  }
  protected:
  explicit GlobalReplayConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonReplayConfigFieldNumber = 1,
    kRefreshTimeFieldNumber = 2,
  };
  // .PlaneWar.CommonReplayConfig commonReplayConfig = 1;
  bool has_commonreplayconfig() const;
  private:
  bool _internal_has_commonreplayconfig() const;
  public:
  void clear_commonreplayconfig();
  const ::PlaneWar::CommonReplayConfig& commonreplayconfig() const;
  ::PlaneWar::CommonReplayConfig* release_commonreplayconfig();
  ::PlaneWar::CommonReplayConfig* mutable_commonreplayconfig();
  void set_allocated_commonreplayconfig(::PlaneWar::CommonReplayConfig* commonreplayconfig);
  private:
  const ::PlaneWar::CommonReplayConfig& _internal_commonreplayconfig() const;
  ::PlaneWar::CommonReplayConfig* _internal_mutable_commonreplayconfig();
  public:
  void unsafe_arena_set_allocated_commonreplayconfig(
      ::PlaneWar::CommonReplayConfig* commonreplayconfig);
  ::PlaneWar::CommonReplayConfig* unsafe_arena_release_commonreplayconfig();

  // int32 refreshTime = 2;
  void clear_refreshtime();
  ::PROTOBUF_NAMESPACE_ID::int32 refreshtime() const;
  void set_refreshtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_refreshtime() const;
  void _internal_set_refreshtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.GlobalReplayConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::CommonReplayConfig* commonreplayconfig_;
  ::PROTOBUF_NAMESPACE_ID::int32 refreshtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class PersonalReplayConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.PersonalReplayConfig) */ {
 public:
  inline PersonalReplayConfig() : PersonalReplayConfig(nullptr) {}
  virtual ~PersonalReplayConfig();

  PersonalReplayConfig(const PersonalReplayConfig& from);
  PersonalReplayConfig(PersonalReplayConfig&& from) noexcept
    : PersonalReplayConfig() {
    *this = ::std::move(from);
  }

  inline PersonalReplayConfig& operator=(const PersonalReplayConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersonalReplayConfig& operator=(PersonalReplayConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PersonalReplayConfig& default_instance();

  static inline const PersonalReplayConfig* internal_default_instance() {
    return reinterpret_cast<const PersonalReplayConfig*>(
               &_PersonalReplayConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(PersonalReplayConfig& a, PersonalReplayConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PersonalReplayConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PersonalReplayConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PersonalReplayConfig* New() const final {
    return CreateMaybeMessage<PersonalReplayConfig>(nullptr);
  }

  PersonalReplayConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PersonalReplayConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PersonalReplayConfig& from);
  void MergeFrom(const PersonalReplayConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PersonalReplayConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.PersonalReplayConfig";
  }
  protected:
  explicit PersonalReplayConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonReplayConfigFieldNumber = 1,
  };
  // .PlaneWar.CommonReplayConfig commonReplayConfig = 1;
  bool has_commonreplayconfig() const;
  private:
  bool _internal_has_commonreplayconfig() const;
  public:
  void clear_commonreplayconfig();
  const ::PlaneWar::CommonReplayConfig& commonreplayconfig() const;
  ::PlaneWar::CommonReplayConfig* release_commonreplayconfig();
  ::PlaneWar::CommonReplayConfig* mutable_commonreplayconfig();
  void set_allocated_commonreplayconfig(::PlaneWar::CommonReplayConfig* commonreplayconfig);
  private:
  const ::PlaneWar::CommonReplayConfig& _internal_commonreplayconfig() const;
  ::PlaneWar::CommonReplayConfig* _internal_mutable_commonreplayconfig();
  public:
  void unsafe_arena_set_allocated_commonreplayconfig(
      ::PlaneWar::CommonReplayConfig* commonreplayconfig);
  ::PlaneWar::CommonReplayConfig* unsafe_arena_release_commonreplayconfig();

  // @@protoc_insertion_point(class_scope:PlaneWar.PersonalReplayConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::CommonReplayConfig* commonreplayconfig_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class ReplayConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.ReplayConfig) */ {
 public:
  inline ReplayConfig() : ReplayConfig(nullptr) {}
  virtual ~ReplayConfig();

  ReplayConfig(const ReplayConfig& from);
  ReplayConfig(ReplayConfig&& from) noexcept
    : ReplayConfig() {
    *this = ::std::move(from);
  }

  inline ReplayConfig& operator=(const ReplayConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplayConfig& operator=(ReplayConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplayConfig& default_instance();

  static inline const ReplayConfig* internal_default_instance() {
    return reinterpret_cast<const ReplayConfig*>(
               &_ReplayConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(ReplayConfig& a, ReplayConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplayConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplayConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplayConfig* New() const final {
    return CreateMaybeMessage<ReplayConfig>(nullptr);
  }

  ReplayConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplayConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplayConfig& from);
  void MergeFrom(const ReplayConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplayConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.ReplayConfig";
  }
  protected:
  explicit ReplayConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGlobalReplayConfigFieldNumber = 1,
    kPersonalReplayConfigFieldNumber = 2,
    kOpenFieldNumber = 3,
  };
  // .PlaneWar.GlobalReplayConfig globalReplayConfig = 1;
  bool has_globalreplayconfig() const;
  private:
  bool _internal_has_globalreplayconfig() const;
  public:
  void clear_globalreplayconfig();
  const ::PlaneWar::GlobalReplayConfig& globalreplayconfig() const;
  ::PlaneWar::GlobalReplayConfig* release_globalreplayconfig();
  ::PlaneWar::GlobalReplayConfig* mutable_globalreplayconfig();
  void set_allocated_globalreplayconfig(::PlaneWar::GlobalReplayConfig* globalreplayconfig);
  private:
  const ::PlaneWar::GlobalReplayConfig& _internal_globalreplayconfig() const;
  ::PlaneWar::GlobalReplayConfig* _internal_mutable_globalreplayconfig();
  public:
  void unsafe_arena_set_allocated_globalreplayconfig(
      ::PlaneWar::GlobalReplayConfig* globalreplayconfig);
  ::PlaneWar::GlobalReplayConfig* unsafe_arena_release_globalreplayconfig();

  // .PlaneWar.PersonalReplayConfig personalReplayConfig = 2;
  bool has_personalreplayconfig() const;
  private:
  bool _internal_has_personalreplayconfig() const;
  public:
  void clear_personalreplayconfig();
  const ::PlaneWar::PersonalReplayConfig& personalreplayconfig() const;
  ::PlaneWar::PersonalReplayConfig* release_personalreplayconfig();
  ::PlaneWar::PersonalReplayConfig* mutable_personalreplayconfig();
  void set_allocated_personalreplayconfig(::PlaneWar::PersonalReplayConfig* personalreplayconfig);
  private:
  const ::PlaneWar::PersonalReplayConfig& _internal_personalreplayconfig() const;
  ::PlaneWar::PersonalReplayConfig* _internal_mutable_personalreplayconfig();
  public:
  void unsafe_arena_set_allocated_personalreplayconfig(
      ::PlaneWar::PersonalReplayConfig* personalreplayconfig);
  ::PlaneWar::PersonalReplayConfig* unsafe_arena_release_personalreplayconfig();

  // bool open = 3;
  void clear_open();
  bool open() const;
  void set_open(bool value);
  private:
  bool _internal_open() const;
  void _internal_set_open(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.ReplayConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::GlobalReplayConfig* globalreplayconfig_;
  ::PlaneWar::PersonalReplayConfig* personalreplayconfig_;
  bool open_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class ConnMonsterInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.ConnMonsterInfo) */ {
 public:
  inline ConnMonsterInfo() : ConnMonsterInfo(nullptr) {}
  virtual ~ConnMonsterInfo();

  ConnMonsterInfo(const ConnMonsterInfo& from);
  ConnMonsterInfo(ConnMonsterInfo&& from) noexcept
    : ConnMonsterInfo() {
    *this = ::std::move(from);
  }

  inline ConnMonsterInfo& operator=(const ConnMonsterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnMonsterInfo& operator=(ConnMonsterInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnMonsterInfo& default_instance();

  static inline const ConnMonsterInfo* internal_default_instance() {
    return reinterpret_cast<const ConnMonsterInfo*>(
               &_ConnMonsterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(ConnMonsterInfo& a, ConnMonsterInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnMonsterInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnMonsterInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnMonsterInfo* New() const final {
    return CreateMaybeMessage<ConnMonsterInfo>(nullptr);
  }

  ConnMonsterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnMonsterInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnMonsterInfo& from);
  void MergeFrom(const ConnMonsterInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnMonsterInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.ConnMonsterInfo";
  }
  protected:
  explicit ConnMonsterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnMonsterListFieldNumber = 4,
    kSourceUIDFieldNumber = 1,
    kOriginUIDFieldNumber = 2,
    kRatioFieldNumber = 3,
  };
  // repeated int32 connMonsterList = 4;
  int connmonsterlist_size() const;
  private:
  int _internal_connmonsterlist_size() const;
  public:
  void clear_connmonsterlist();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_connmonsterlist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_connmonsterlist() const;
  void _internal_add_connmonsterlist(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_connmonsterlist();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 connmonsterlist(int index) const;
  void set_connmonsterlist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_connmonsterlist(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      connmonsterlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_connmonsterlist();

  // int32 sourceUID = 1;
  void clear_sourceuid();
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid() const;
  void set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sourceuid() const;
  void _internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 originUID = 2;
  void clear_originuid();
  ::PROTOBUF_NAMESPACE_ID::int32 originuid() const;
  void set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_originuid() const;
  void _internal_set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 3;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.ConnMonsterInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > connmonsterlist_;
  mutable std::atomic<int> _connmonsterlist_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 originuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSHit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSHit) */ {
 public:
  inline CSHit() : CSHit(nullptr) {}
  virtual ~CSHit();

  CSHit(const CSHit& from);
  CSHit(CSHit&& from) noexcept
    : CSHit() {
    *this = ::std::move(from);
  }

  inline CSHit& operator=(const CSHit& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSHit& operator=(CSHit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSHit& default_instance();

  static inline const CSHit* internal_default_instance() {
    return reinterpret_cast<const CSHit*>(
               &_CSHit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(CSHit& a, CSHit& b) {
    a.Swap(&b);
  }
  inline void Swap(CSHit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSHit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSHit* New() const final {
    return CreateMaybeMessage<CSHit>(nullptr);
  }

  CSHit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSHit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSHit& from);
  void MergeFrom(const CSHit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSHit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSHit";
  }
  protected:
  explicit CSHit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonsterUIDFieldNumber = 1,
    kRatioFieldNumber = 2,
    kBulletTypeFieldNumber = 3,
    kSourceUIDFieldNumber = 4,
    kGenerationFieldNumber = 5,
    kDeductedMoneyFieldNumber = 6,
    kOriginUIDFieldNumber = 7,
    kIsEndFieldNumber = 8,
  };
  // int32 monsterUID = 1;
  void clear_monsteruid();
  ::PROTOBUF_NAMESPACE_ID::int32 monsteruid() const;
  void set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_monsteruid() const;
  void _internal_set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 2;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bulletType = 3;
  void clear_bullettype();
  ::PROTOBUF_NAMESPACE_ID::int32 bullettype() const;
  void set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bullettype() const;
  void _internal_set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sourceUID = 4;
  void clear_sourceuid();
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid() const;
  void set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sourceuid() const;
  void _internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 generation = 5;
  void clear_generation();
  ::PROTOBUF_NAMESPACE_ID::int32 generation() const;
  void set_generation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_generation() const;
  void _internal_set_generation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 deductedMoney = 6;
  void clear_deductedmoney();
  ::PROTOBUF_NAMESPACE_ID::int32 deductedmoney() const;
  void set_deductedmoney(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_deductedmoney() const;
  void _internal_set_deductedmoney(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 originUID = 7;
  void clear_originuid();
  ::PROTOBUF_NAMESPACE_ID::int32 originuid() const;
  void set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_originuid() const;
  void _internal_set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_end = 8;
  void clear_is_end();
  bool is_end() const;
  void set_is_end(bool value);
  private:
  bool _internal_is_end() const;
  void _internal_set_is_end(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSHit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 monsteruid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 bullettype_;
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 generation_;
  ::PROTOBUF_NAMESPACE_ID::int32 deductedmoney_;
  ::PROTOBUF_NAMESPACE_ID::int32 originuid_;
  bool is_end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCHit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCHit) */ {
 public:
  inline SCHit() : SCHit(nullptr) {}
  virtual ~SCHit();

  SCHit(const SCHit& from);
  SCHit(SCHit&& from) noexcept
    : SCHit() {
    *this = ::std::move(from);
  }

  inline SCHit& operator=(const SCHit& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCHit& operator=(SCHit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCHit& default_instance();

  static inline const SCHit* internal_default_instance() {
    return reinterpret_cast<const SCHit*>(
               &_SCHit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(SCHit& a, SCHit& b) {
    a.Swap(&b);
  }
  inline void Swap(SCHit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCHit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCHit* New() const final {
    return CreateMaybeMessage<SCHit>(nullptr);
  }

  SCHit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCHit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCHit& from);
  void MergeFrom(const SCHit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCHit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCHit";
  }
  protected:
  explicit SCHit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMultipleListFieldNumber = 9,
    kDropBuffListFieldNumber = 10,
    kTriggerBulletFieldNumber = 11,
    kTreasureListFieldNumber = 19,
    kFortuneWheelListFieldNumber = 23,
    kSpecEffectFieldNumber = 28,
    kDropPokerFieldNumber = 12,
    kRouletteFieldNumber = 13,
    kWeaponInfoFieldNumber = 21,
    kGunInfoFieldNumber = 22,
    kToadInfoFieldNumber = 24,
    kFlameInfoFieldNumber = 25,
    kBeeInfoFieldNumber = 26,
    kConnMonsterInfoFieldNumber = 27,
    kDiceInfoFieldNumber = 29,
    kChairFieldNumber = 2,
    kMonsterUIDFieldNumber = 3,
    kRatioFieldNumber = 4,
    kBulletTypeFieldNumber = 5,
    kScoreFieldNumber = 7,
    kEarnFieldNumber = 6,
    kBaseValueFieldNumber = 8,
    kStageFieldNumber = 14,
    kDropCardFieldNumber = 15,
    kIsCapturedFieldNumber = 1,
    kIsPropFieldNumber = 30,
    kOriginUIDFieldNumber = 16,
    kDropCallFieldNumber = 17,
    kDropWeaponPieceFieldNumber = 18,
    kWeaponIDFieldNumber = 20,
  };
  // repeated int32 multipleList = 9;
  int multiplelist_size() const;
  private:
  int _internal_multiplelist_size() const;
  public:
  void clear_multiplelist();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_multiplelist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_multiplelist() const;
  void _internal_add_multiplelist(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_multiplelist();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 multiplelist(int index) const;
  void set_multiplelist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_multiplelist(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      multiplelist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_multiplelist();

  // repeated .PlaneWar.BuffInfo dropBuffList = 10;
  int dropbufflist_size() const;
  private:
  int _internal_dropbufflist_size() const;
  public:
  void clear_dropbufflist();
  ::PlaneWar::BuffInfo* mutable_dropbufflist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::BuffInfo >*
      mutable_dropbufflist();
  private:
  const ::PlaneWar::BuffInfo& _internal_dropbufflist(int index) const;
  ::PlaneWar::BuffInfo* _internal_add_dropbufflist();
  public:
  const ::PlaneWar::BuffInfo& dropbufflist(int index) const;
  ::PlaneWar::BuffInfo* add_dropbufflist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::BuffInfo >&
      dropbufflist() const;

  // repeated .PlaneWar.TriggerBullet triggerBullet = 11;
  int triggerbullet_size() const;
  private:
  int _internal_triggerbullet_size() const;
  public:
  void clear_triggerbullet();
  ::PlaneWar::TriggerBullet* mutable_triggerbullet(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::TriggerBullet >*
      mutable_triggerbullet();
  private:
  const ::PlaneWar::TriggerBullet& _internal_triggerbullet(int index) const;
  ::PlaneWar::TriggerBullet* _internal_add_triggerbullet();
  public:
  const ::PlaneWar::TriggerBullet& triggerbullet(int index) const;
  ::PlaneWar::TriggerBullet* add_triggerbullet();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::TriggerBullet >&
      triggerbullet() const;

  // repeated .PlaneWar.TreasureInfo treasureList = 19;
  int treasurelist_size() const;
  private:
  int _internal_treasurelist_size() const;
  public:
  void clear_treasurelist();
  ::PlaneWar::TreasureInfo* mutable_treasurelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::TreasureInfo >*
      mutable_treasurelist();
  private:
  const ::PlaneWar::TreasureInfo& _internal_treasurelist(int index) const;
  ::PlaneWar::TreasureInfo* _internal_add_treasurelist();
  public:
  const ::PlaneWar::TreasureInfo& treasurelist(int index) const;
  ::PlaneWar::TreasureInfo* add_treasurelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::TreasureInfo >&
      treasurelist() const;

  // repeated .PlaneWar.FortuneWheelInfo fortuneWheelList = 23;
  int fortunewheellist_size() const;
  private:
  int _internal_fortunewheellist_size() const;
  public:
  void clear_fortunewheellist();
  ::PlaneWar::FortuneWheelInfo* mutable_fortunewheellist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::FortuneWheelInfo >*
      mutable_fortunewheellist();
  private:
  const ::PlaneWar::FortuneWheelInfo& _internal_fortunewheellist(int index) const;
  ::PlaneWar::FortuneWheelInfo* _internal_add_fortunewheellist();
  public:
  const ::PlaneWar::FortuneWheelInfo& fortunewheellist(int index) const;
  ::PlaneWar::FortuneWheelInfo* add_fortunewheellist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::FortuneWheelInfo >&
      fortunewheellist() const;

  // repeated .PlaneWar.SpecEffect specEffect = 28;
  int speceffect_size() const;
  private:
  int _internal_speceffect_size() const;
  public:
  void clear_speceffect();
  ::PlaneWar::SpecEffect* mutable_speceffect(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::SpecEffect >*
      mutable_speceffect();
  private:
  const ::PlaneWar::SpecEffect& _internal_speceffect(int index) const;
  ::PlaneWar::SpecEffect* _internal_add_speceffect();
  public:
  const ::PlaneWar::SpecEffect& speceffect(int index) const;
  ::PlaneWar::SpecEffect* add_speceffect();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::SpecEffect >&
      speceffect() const;

  // .PlaneWar.DropPoker dropPoker = 12;
  bool has_droppoker() const;
  private:
  bool _internal_has_droppoker() const;
  public:
  void clear_droppoker();
  const ::PlaneWar::DropPoker& droppoker() const;
  ::PlaneWar::DropPoker* release_droppoker();
  ::PlaneWar::DropPoker* mutable_droppoker();
  void set_allocated_droppoker(::PlaneWar::DropPoker* droppoker);
  private:
  const ::PlaneWar::DropPoker& _internal_droppoker() const;
  ::PlaneWar::DropPoker* _internal_mutable_droppoker();
  public:
  void unsafe_arena_set_allocated_droppoker(
      ::PlaneWar::DropPoker* droppoker);
  ::PlaneWar::DropPoker* unsafe_arena_release_droppoker();

  // .PlaneWar.Roulette roulette = 13;
  bool has_roulette() const;
  private:
  bool _internal_has_roulette() const;
  public:
  void clear_roulette();
  const ::PlaneWar::Roulette& roulette() const;
  ::PlaneWar::Roulette* release_roulette();
  ::PlaneWar::Roulette* mutable_roulette();
  void set_allocated_roulette(::PlaneWar::Roulette* roulette);
  private:
  const ::PlaneWar::Roulette& _internal_roulette() const;
  ::PlaneWar::Roulette* _internal_mutable_roulette();
  public:
  void unsafe_arena_set_allocated_roulette(
      ::PlaneWar::Roulette* roulette);
  ::PlaneWar::Roulette* unsafe_arena_release_roulette();

  // .PlaneWar.WeaponInfo weaponInfo = 21;
  bool has_weaponinfo() const;
  private:
  bool _internal_has_weaponinfo() const;
  public:
  void clear_weaponinfo();
  const ::PlaneWar::WeaponInfo& weaponinfo() const;
  ::PlaneWar::WeaponInfo* release_weaponinfo();
  ::PlaneWar::WeaponInfo* mutable_weaponinfo();
  void set_allocated_weaponinfo(::PlaneWar::WeaponInfo* weaponinfo);
  private:
  const ::PlaneWar::WeaponInfo& _internal_weaponinfo() const;
  ::PlaneWar::WeaponInfo* _internal_mutable_weaponinfo();
  public:
  void unsafe_arena_set_allocated_weaponinfo(
      ::PlaneWar::WeaponInfo* weaponinfo);
  ::PlaneWar::WeaponInfo* unsafe_arena_release_weaponinfo();

  // .PlaneWar.GunInfo gunInfo = 22;
  bool has_guninfo() const;
  private:
  bool _internal_has_guninfo() const;
  public:
  void clear_guninfo();
  const ::PlaneWar::GunInfo& guninfo() const;
  ::PlaneWar::GunInfo* release_guninfo();
  ::PlaneWar::GunInfo* mutable_guninfo();
  void set_allocated_guninfo(::PlaneWar::GunInfo* guninfo);
  private:
  const ::PlaneWar::GunInfo& _internal_guninfo() const;
  ::PlaneWar::GunInfo* _internal_mutable_guninfo();
  public:
  void unsafe_arena_set_allocated_guninfo(
      ::PlaneWar::GunInfo* guninfo);
  ::PlaneWar::GunInfo* unsafe_arena_release_guninfo();

  // .PlaneWar.ToadInfo toadInfo = 24;
  bool has_toadinfo() const;
  private:
  bool _internal_has_toadinfo() const;
  public:
  void clear_toadinfo();
  const ::PlaneWar::ToadInfo& toadinfo() const;
  ::PlaneWar::ToadInfo* release_toadinfo();
  ::PlaneWar::ToadInfo* mutable_toadinfo();
  void set_allocated_toadinfo(::PlaneWar::ToadInfo* toadinfo);
  private:
  const ::PlaneWar::ToadInfo& _internal_toadinfo() const;
  ::PlaneWar::ToadInfo* _internal_mutable_toadinfo();
  public:
  void unsafe_arena_set_allocated_toadinfo(
      ::PlaneWar::ToadInfo* toadinfo);
  ::PlaneWar::ToadInfo* unsafe_arena_release_toadinfo();

  // .PlaneWar.FlameInfo flameInfo = 25;
  bool has_flameinfo() const;
  private:
  bool _internal_has_flameinfo() const;
  public:
  void clear_flameinfo();
  const ::PlaneWar::FlameInfo& flameinfo() const;
  ::PlaneWar::FlameInfo* release_flameinfo();
  ::PlaneWar::FlameInfo* mutable_flameinfo();
  void set_allocated_flameinfo(::PlaneWar::FlameInfo* flameinfo);
  private:
  const ::PlaneWar::FlameInfo& _internal_flameinfo() const;
  ::PlaneWar::FlameInfo* _internal_mutable_flameinfo();
  public:
  void unsafe_arena_set_allocated_flameinfo(
      ::PlaneWar::FlameInfo* flameinfo);
  ::PlaneWar::FlameInfo* unsafe_arena_release_flameinfo();

  // .PlaneWar.BeeInfo beeInfo = 26;
  bool has_beeinfo() const;
  private:
  bool _internal_has_beeinfo() const;
  public:
  void clear_beeinfo();
  const ::PlaneWar::BeeInfo& beeinfo() const;
  ::PlaneWar::BeeInfo* release_beeinfo();
  ::PlaneWar::BeeInfo* mutable_beeinfo();
  void set_allocated_beeinfo(::PlaneWar::BeeInfo* beeinfo);
  private:
  const ::PlaneWar::BeeInfo& _internal_beeinfo() const;
  ::PlaneWar::BeeInfo* _internal_mutable_beeinfo();
  public:
  void unsafe_arena_set_allocated_beeinfo(
      ::PlaneWar::BeeInfo* beeinfo);
  ::PlaneWar::BeeInfo* unsafe_arena_release_beeinfo();

  // .PlaneWar.ConnMonsterInfo connMonsterInfo = 27;
  bool has_connmonsterinfo() const;
  private:
  bool _internal_has_connmonsterinfo() const;
  public:
  void clear_connmonsterinfo();
  const ::PlaneWar::ConnMonsterInfo& connmonsterinfo() const;
  ::PlaneWar::ConnMonsterInfo* release_connmonsterinfo();
  ::PlaneWar::ConnMonsterInfo* mutable_connmonsterinfo();
  void set_allocated_connmonsterinfo(::PlaneWar::ConnMonsterInfo* connmonsterinfo);
  private:
  const ::PlaneWar::ConnMonsterInfo& _internal_connmonsterinfo() const;
  ::PlaneWar::ConnMonsterInfo* _internal_mutable_connmonsterinfo();
  public:
  void unsafe_arena_set_allocated_connmonsterinfo(
      ::PlaneWar::ConnMonsterInfo* connmonsterinfo);
  ::PlaneWar::ConnMonsterInfo* unsafe_arena_release_connmonsterinfo();

  // .PlaneWar.DiceInfo diceInfo = 29;
  bool has_diceinfo() const;
  private:
  bool _internal_has_diceinfo() const;
  public:
  void clear_diceinfo();
  const ::PlaneWar::DiceInfo& diceinfo() const;
  ::PlaneWar::DiceInfo* release_diceinfo();
  ::PlaneWar::DiceInfo* mutable_diceinfo();
  void set_allocated_diceinfo(::PlaneWar::DiceInfo* diceinfo);
  private:
  const ::PlaneWar::DiceInfo& _internal_diceinfo() const;
  ::PlaneWar::DiceInfo* _internal_mutable_diceinfo();
  public:
  void unsafe_arena_set_allocated_diceinfo(
      ::PlaneWar::DiceInfo* diceinfo);
  ::PlaneWar::DiceInfo* unsafe_arena_release_diceinfo();

  // int32 chair = 2;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 monsterUID = 3;
  void clear_monsteruid();
  ::PROTOBUF_NAMESPACE_ID::int32 monsteruid() const;
  void set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_monsteruid() const;
  void _internal_set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 4;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bulletType = 5;
  void clear_bullettype();
  ::PROTOBUF_NAMESPACE_ID::int32 bullettype() const;
  void set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bullettype() const;
  void _internal_set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 score = 7;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int64 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 earn = 6;
  void clear_earn();
  ::PROTOBUF_NAMESPACE_ID::int32 earn() const;
  void set_earn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_earn() const;
  void _internal_set_earn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 baseValue = 8;
  void clear_basevalue();
  ::PROTOBUF_NAMESPACE_ID::int32 basevalue() const;
  void set_basevalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_basevalue() const;
  void _internal_set_basevalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 stage = 14;
  void clear_stage();
  ::PROTOBUF_NAMESPACE_ID::int32 stage() const;
  void set_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stage() const;
  void _internal_set_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dropCard = 15;
  void clear_dropcard();
  ::PROTOBUF_NAMESPACE_ID::int32 dropcard() const;
  void set_dropcard(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dropcard() const;
  void _internal_set_dropcard(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isCaptured = 1;
  void clear_iscaptured();
  bool iscaptured() const;
  void set_iscaptured(bool value);
  private:
  bool _internal_iscaptured() const;
  void _internal_set_iscaptured(bool value);
  public:

  // bool isProp = 30;
  void clear_isprop();
  bool isprop() const;
  void set_isprop(bool value);
  private:
  bool _internal_isprop() const;
  void _internal_set_isprop(bool value);
  public:

  // int32 originUID = 16;
  void clear_originuid();
  ::PROTOBUF_NAMESPACE_ID::int32 originuid() const;
  void set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_originuid() const;
  void _internal_set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dropCall = 17;
  void clear_dropcall();
  ::PROTOBUF_NAMESPACE_ID::int32 dropcall() const;
  void set_dropcall(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dropcall() const;
  void _internal_set_dropcall(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dropWeaponPiece = 18;
  void clear_dropweaponpiece();
  ::PROTOBUF_NAMESPACE_ID::int32 dropweaponpiece() const;
  void set_dropweaponpiece(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dropweaponpiece() const;
  void _internal_set_dropweaponpiece(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 weaponID = 20;
  void clear_weaponid();
  ::PROTOBUF_NAMESPACE_ID::int32 weaponid() const;
  void set_weaponid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_weaponid() const;
  void _internal_set_weaponid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCHit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > multiplelist_;
  mutable std::atomic<int> _multiplelist_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::BuffInfo > dropbufflist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::TriggerBullet > triggerbullet_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::TreasureInfo > treasurelist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::FortuneWheelInfo > fortunewheellist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::SpecEffect > speceffect_;
  ::PlaneWar::DropPoker* droppoker_;
  ::PlaneWar::Roulette* roulette_;
  ::PlaneWar::WeaponInfo* weaponinfo_;
  ::PlaneWar::GunInfo* guninfo_;
  ::PlaneWar::ToadInfo* toadinfo_;
  ::PlaneWar::FlameInfo* flameinfo_;
  ::PlaneWar::BeeInfo* beeinfo_;
  ::PlaneWar::ConnMonsterInfo* connmonsterinfo_;
  ::PlaneWar::DiceInfo* diceinfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  ::PROTOBUF_NAMESPACE_ID::int32 monsteruid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 bullettype_;
  ::PROTOBUF_NAMESPACE_ID::int64 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 earn_;
  ::PROTOBUF_NAMESPACE_ID::int32 basevalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 stage_;
  ::PROTOBUF_NAMESPACE_ID::int32 dropcard_;
  bool iscaptured_;
  bool isprop_;
  ::PROTOBUF_NAMESPACE_ID::int32 originuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 dropcall_;
  ::PROTOBUF_NAMESPACE_ID::int32 dropweaponpiece_;
  ::PROTOBUF_NAMESPACE_ID::int32 weaponid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSMonsterDestory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSMonsterDestory) */ {
 public:
  inline CSMonsterDestory() : CSMonsterDestory(nullptr) {}
  virtual ~CSMonsterDestory();

  CSMonsterDestory(const CSMonsterDestory& from);
  CSMonsterDestory(CSMonsterDestory&& from) noexcept
    : CSMonsterDestory() {
    *this = ::std::move(from);
  }

  inline CSMonsterDestory& operator=(const CSMonsterDestory& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSMonsterDestory& operator=(CSMonsterDestory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSMonsterDestory& default_instance();

  static inline const CSMonsterDestory* internal_default_instance() {
    return reinterpret_cast<const CSMonsterDestory*>(
               &_CSMonsterDestory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(CSMonsterDestory& a, CSMonsterDestory& b) {
    a.Swap(&b);
  }
  inline void Swap(CSMonsterDestory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSMonsterDestory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSMonsterDestory* New() const final {
    return CreateMaybeMessage<CSMonsterDestory>(nullptr);
  }

  CSMonsterDestory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSMonsterDestory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSMonsterDestory& from);
  void MergeFrom(const CSMonsterDestory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSMonsterDestory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSMonsterDestory";
  }
  protected:
  explicit CSMonsterDestory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonsterUIDFieldNumber = 1,
  };
  // int32 monsterUID = 1;
  void clear_monsteruid();
  ::PROTOBUF_NAMESPACE_ID::int32 monsteruid() const;
  void set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_monsteruid() const;
  void _internal_set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSMonsterDestory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 monsteruid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCMonsterDestory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCMonsterDestory) */ {
 public:
  inline SCMonsterDestory() : SCMonsterDestory(nullptr) {}
  virtual ~SCMonsterDestory();

  SCMonsterDestory(const SCMonsterDestory& from);
  SCMonsterDestory(SCMonsterDestory&& from) noexcept
    : SCMonsterDestory() {
    *this = ::std::move(from);
  }

  inline SCMonsterDestory& operator=(const SCMonsterDestory& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCMonsterDestory& operator=(SCMonsterDestory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCMonsterDestory& default_instance();

  static inline const SCMonsterDestory* internal_default_instance() {
    return reinterpret_cast<const SCMonsterDestory*>(
               &_SCMonsterDestory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(SCMonsterDestory& a, SCMonsterDestory& b) {
    a.Swap(&b);
  }
  inline void Swap(SCMonsterDestory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCMonsterDestory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCMonsterDestory* New() const final {
    return CreateMaybeMessage<SCMonsterDestory>(nullptr);
  }

  SCMonsterDestory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCMonsterDestory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCMonsterDestory& from);
  void MergeFrom(const SCMonsterDestory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCMonsterDestory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCMonsterDestory";
  }
  protected:
  explicit SCMonsterDestory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.SCMonsterDestory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSTransform PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSTransform) */ {
 public:
  inline CSTransform() : CSTransform(nullptr) {}
  virtual ~CSTransform();

  CSTransform(const CSTransform& from);
  CSTransform(CSTransform&& from) noexcept
    : CSTransform() {
    *this = ::std::move(from);
  }

  inline CSTransform& operator=(const CSTransform& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSTransform& operator=(CSTransform&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSTransform& default_instance();

  static inline const CSTransform* internal_default_instance() {
    return reinterpret_cast<const CSTransform*>(
               &_CSTransform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(CSTransform& a, CSTransform& b) {
    a.Swap(&b);
  }
  inline void Swap(CSTransform* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSTransform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSTransform* New() const final {
    return CreateMaybeMessage<CSTransform>(nullptr);
  }

  CSTransform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSTransform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSTransform& from);
  void MergeFrom(const CSTransform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSTransform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSTransform";
  }
  protected:
  explicit CSTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormFieldNumber = 1,
  };
  // int32 form = 1;
  void clear_form();
  ::PROTOBUF_NAMESPACE_ID::int32 form() const;
  void set_form(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_form() const;
  void _internal_set_form(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSTransform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 form_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCTransform PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCTransform) */ {
 public:
  inline SCTransform() : SCTransform(nullptr) {}
  virtual ~SCTransform();

  SCTransform(const SCTransform& from);
  SCTransform(SCTransform&& from) noexcept
    : SCTransform() {
    *this = ::std::move(from);
  }

  inline SCTransform& operator=(const SCTransform& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCTransform& operator=(SCTransform&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCTransform& default_instance();

  static inline const SCTransform* internal_default_instance() {
    return reinterpret_cast<const SCTransform*>(
               &_SCTransform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(SCTransform& a, SCTransform& b) {
    a.Swap(&b);
  }
  inline void Swap(SCTransform* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCTransform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCTransform* New() const final {
    return CreateMaybeMessage<SCTransform>(nullptr);
  }

  SCTransform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCTransform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCTransform& from);
  void MergeFrom(const SCTransform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCTransform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCTransform";
  }
  protected:
  explicit SCTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairFieldNumber = 1,
    kFormFieldNumber = 2,
  };
  // int32 chair = 1;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 form = 2;
  void clear_form();
  ::PROTOBUF_NAMESPACE_ID::int32 form() const;
  void set_form(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_form() const;
  void _internal_set_form(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCTransform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  ::PROTOBUF_NAMESPACE_ID::int32 form_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSPlanePosSync PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSPlanePosSync) */ {
 public:
  inline CSPlanePosSync() : CSPlanePosSync(nullptr) {}
  virtual ~CSPlanePosSync();

  CSPlanePosSync(const CSPlanePosSync& from);
  CSPlanePosSync(CSPlanePosSync&& from) noexcept
    : CSPlanePosSync() {
    *this = ::std::move(from);
  }

  inline CSPlanePosSync& operator=(const CSPlanePosSync& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSPlanePosSync& operator=(CSPlanePosSync&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSPlanePosSync& default_instance();

  static inline const CSPlanePosSync* internal_default_instance() {
    return reinterpret_cast<const CSPlanePosSync*>(
               &_CSPlanePosSync_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(CSPlanePosSync& a, CSPlanePosSync& b) {
    a.Swap(&b);
  }
  inline void Swap(CSPlanePosSync* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSPlanePosSync* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSPlanePosSync* New() const final {
    return CreateMaybeMessage<CSPlanePosSync>(nullptr);
  }

  CSPlanePosSync* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSPlanePosSync>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSPlanePosSync& from);
  void MergeFrom(const CSPlanePosSync& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSPlanePosSync* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSPlanePosSync";
  }
  protected:
  explicit CSPlanePosSync(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
  };
  // .PlaneWar.Pos pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::PlaneWar::Pos& pos() const;
  ::PlaneWar::Pos* release_pos();
  ::PlaneWar::Pos* mutable_pos();
  void set_allocated_pos(::PlaneWar::Pos* pos);
  private:
  const ::PlaneWar::Pos& _internal_pos() const;
  ::PlaneWar::Pos* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::PlaneWar::Pos* pos);
  ::PlaneWar::Pos* unsafe_arena_release_pos();

  // @@protoc_insertion_point(class_scope:PlaneWar.CSPlanePosSync)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::Pos* pos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCPlanePosSync PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCPlanePosSync) */ {
 public:
  inline SCPlanePosSync() : SCPlanePosSync(nullptr) {}
  virtual ~SCPlanePosSync();

  SCPlanePosSync(const SCPlanePosSync& from);
  SCPlanePosSync(SCPlanePosSync&& from) noexcept
    : SCPlanePosSync() {
    *this = ::std::move(from);
  }

  inline SCPlanePosSync& operator=(const SCPlanePosSync& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPlanePosSync& operator=(SCPlanePosSync&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPlanePosSync& default_instance();

  static inline const SCPlanePosSync* internal_default_instance() {
    return reinterpret_cast<const SCPlanePosSync*>(
               &_SCPlanePosSync_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(SCPlanePosSync& a, SCPlanePosSync& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPlanePosSync* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPlanePosSync* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPlanePosSync* New() const final {
    return CreateMaybeMessage<SCPlanePosSync>(nullptr);
  }

  SCPlanePosSync* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPlanePosSync>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPlanePosSync& from);
  void MergeFrom(const SCPlanePosSync& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPlanePosSync* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCPlanePosSync";
  }
  protected:
  explicit SCPlanePosSync(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 2,
    kChairFieldNumber = 1,
  };
  // .PlaneWar.Pos pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::PlaneWar::Pos& pos() const;
  ::PlaneWar::Pos* release_pos();
  ::PlaneWar::Pos* mutable_pos();
  void set_allocated_pos(::PlaneWar::Pos* pos);
  private:
  const ::PlaneWar::Pos& _internal_pos() const;
  ::PlaneWar::Pos* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::PlaneWar::Pos* pos);
  ::PlaneWar::Pos* unsafe_arena_release_pos();

  // int32 chair = 1;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCPlanePosSync)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::Pos* pos_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCStateEnd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCStateEnd) */ {
 public:
  inline SCStateEnd() : SCStateEnd(nullptr) {}
  virtual ~SCStateEnd();

  SCStateEnd(const SCStateEnd& from);
  SCStateEnd(SCStateEnd&& from) noexcept
    : SCStateEnd() {
    *this = ::std::move(from);
  }

  inline SCStateEnd& operator=(const SCStateEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCStateEnd& operator=(SCStateEnd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCStateEnd& default_instance();

  static inline const SCStateEnd* internal_default_instance() {
    return reinterpret_cast<const SCStateEnd*>(
               &_SCStateEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(SCStateEnd& a, SCStateEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(SCStateEnd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCStateEnd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCStateEnd* New() const final {
    return CreateMaybeMessage<SCStateEnd>(nullptr);
  }

  SCStateEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCStateEnd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCStateEnd& from);
  void MergeFrom(const SCStateEnd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCStateEnd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCStateEnd";
  }
  protected:
  explicit SCStateEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairFieldNumber = 1,
    kTypeFieldNumber = 2,
    kSourceUIDFieldNumber = 3,
  };
  // int32 chair = 1;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sourceUID = 3;
  void clear_sourceuid();
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid() const;
  void set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sourceuid() const;
  void _internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCStateEnd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSModRatio PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSModRatio) */ {
 public:
  inline CSModRatio() : CSModRatio(nullptr) {}
  virtual ~CSModRatio();

  CSModRatio(const CSModRatio& from);
  CSModRatio(CSModRatio&& from) noexcept
    : CSModRatio() {
    *this = ::std::move(from);
  }

  inline CSModRatio& operator=(const CSModRatio& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSModRatio& operator=(CSModRatio&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSModRatio& default_instance();

  static inline const CSModRatio* internal_default_instance() {
    return reinterpret_cast<const CSModRatio*>(
               &_CSModRatio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(CSModRatio& a, CSModRatio& b) {
    a.Swap(&b);
  }
  inline void Swap(CSModRatio* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSModRatio* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSModRatio* New() const final {
    return CreateMaybeMessage<CSModRatio>(nullptr);
  }

  CSModRatio* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSModRatio>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSModRatio& from);
  void MergeFrom(const CSModRatio& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSModRatio* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSModRatio";
  }
  protected:
  explicit CSModRatio(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModLevelFieldNumber = 1,
  };
  // int32 modLevel = 1;
  void clear_modlevel();
  ::PROTOBUF_NAMESPACE_ID::int32 modlevel() const;
  void set_modlevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_modlevel() const;
  void _internal_set_modlevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSModRatio)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 modlevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCModRatio PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCModRatio) */ {
 public:
  inline SCModRatio() : SCModRatio(nullptr) {}
  virtual ~SCModRatio();

  SCModRatio(const SCModRatio& from);
  SCModRatio(SCModRatio&& from) noexcept
    : SCModRatio() {
    *this = ::std::move(from);
  }

  inline SCModRatio& operator=(const SCModRatio& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCModRatio& operator=(SCModRatio&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCModRatio& default_instance();

  static inline const SCModRatio* internal_default_instance() {
    return reinterpret_cast<const SCModRatio*>(
               &_SCModRatio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(SCModRatio& a, SCModRatio& b) {
    a.Swap(&b);
  }
  inline void Swap(SCModRatio* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCModRatio* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCModRatio* New() const final {
    return CreateMaybeMessage<SCModRatio>(nullptr);
  }

  SCModRatio* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCModRatio>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCModRatio& from);
  void MergeFrom(const SCModRatio& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCModRatio* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCModRatio";
  }
  protected:
  explicit SCModRatio(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairFieldNumber = 1,
    kRatioFieldNumber = 2,
    kIsUnlockFieldNumber = 3,
  };
  // int32 chair = 1;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 2;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isUnlock = 3;
  void clear_isunlock();
  bool isunlock() const;
  void set_isunlock(bool value);
  private:
  bool _internal_isunlock() const;
  void _internal_set_isunlock(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCModRatio)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  bool isunlock_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCGainNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCGainNotify) */ {
 public:
  inline SCGainNotify() : SCGainNotify(nullptr) {}
  virtual ~SCGainNotify();

  SCGainNotify(const SCGainNotify& from);
  SCGainNotify(SCGainNotify&& from) noexcept
    : SCGainNotify() {
    *this = ::std::move(from);
  }

  inline SCGainNotify& operator=(const SCGainNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGainNotify& operator=(SCGainNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGainNotify& default_instance();

  static inline const SCGainNotify* internal_default_instance() {
    return reinterpret_cast<const SCGainNotify*>(
               &_SCGainNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(SCGainNotify& a, SCGainNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGainNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGainNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGainNotify* New() const final {
    return CreateMaybeMessage<SCGainNotify>(nullptr);
  }

  SCGainNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGainNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGainNotify& from);
  void MergeFrom(const SCGainNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGainNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCGainNotify";
  }
  protected:
  explicit SCGainNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurRedPacketFieldNumber = 8,
    kSourceFieldNumber = 1,
    kCurMoneyFieldNumber = 2,
    kGainFieldNumber = 3,
    kCurTicketFieldNumber = 4,
    kChangeTicketFieldNumber = 5,
    kChangeDiamondFieldNumber = 6,
    kCurDiamondFieldNumber = 7,
  };
  // .PlaneWar.Decimal curRedPacket = 8;
  bool has_curredpacket() const;
  private:
  bool _internal_has_curredpacket() const;
  public:
  void clear_curredpacket();
  const ::PlaneWar::Decimal& curredpacket() const;
  ::PlaneWar::Decimal* release_curredpacket();
  ::PlaneWar::Decimal* mutable_curredpacket();
  void set_allocated_curredpacket(::PlaneWar::Decimal* curredpacket);
  private:
  const ::PlaneWar::Decimal& _internal_curredpacket() const;
  ::PlaneWar::Decimal* _internal_mutable_curredpacket();
  public:
  void unsafe_arena_set_allocated_curredpacket(
      ::PlaneWar::Decimal* curredpacket);
  ::PlaneWar::Decimal* unsafe_arena_release_curredpacket();

  // int32 source = 1;
  void clear_source();
  ::PROTOBUF_NAMESPACE_ID::int32 source() const;
  void set_source(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_source() const;
  void _internal_set_source(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 curMoney = 2;
  void clear_curmoney();
  ::PROTOBUF_NAMESPACE_ID::int32 curmoney() const;
  void set_curmoney(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curmoney() const;
  void _internal_set_curmoney(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gain = 3;
  void clear_gain();
  ::PROTOBUF_NAMESPACE_ID::int32 gain() const;
  void set_gain(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gain() const;
  void _internal_set_gain(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 curTicket = 4;
  void clear_curticket();
  ::PROTOBUF_NAMESPACE_ID::int32 curticket() const;
  void set_curticket(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curticket() const;
  void _internal_set_curticket(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 changeTicket = 5;
  void clear_changeticket();
  ::PROTOBUF_NAMESPACE_ID::int32 changeticket() const;
  void set_changeticket(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_changeticket() const;
  void _internal_set_changeticket(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 changeDiamond = 6;
  void clear_changediamond();
  ::PROTOBUF_NAMESPACE_ID::int32 changediamond() const;
  void set_changediamond(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_changediamond() const;
  void _internal_set_changediamond(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 curDiamond = 7;
  void clear_curdiamond();
  ::PROTOBUF_NAMESPACE_ID::int32 curdiamond() const;
  void set_curdiamond(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curdiamond() const;
  void _internal_set_curdiamond(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCGainNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::Decimal* curredpacket_;
  ::PROTOBUF_NAMESPACE_ID::int32 source_;
  ::PROTOBUF_NAMESPACE_ID::int32 curmoney_;
  ::PROTOBUF_NAMESPACE_ID::int32 gain_;
  ::PROTOBUF_NAMESPACE_ID::int32 curticket_;
  ::PROTOBUF_NAMESPACE_ID::int32 changeticket_;
  ::PROTOBUF_NAMESPACE_ID::int32 changediamond_;
  ::PROTOBUF_NAMESPACE_ID::int32 curdiamond_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCGainSettle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCGainSettle) */ {
 public:
  inline SCGainSettle() : SCGainSettle(nullptr) {}
  virtual ~SCGainSettle();

  SCGainSettle(const SCGainSettle& from);
  SCGainSettle(SCGainSettle&& from) noexcept
    : SCGainSettle() {
    *this = ::std::move(from);
  }

  inline SCGainSettle& operator=(const SCGainSettle& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGainSettle& operator=(SCGainSettle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGainSettle& default_instance();

  static inline const SCGainSettle* internal_default_instance() {
    return reinterpret_cast<const SCGainSettle*>(
               &_SCGainSettle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(SCGainSettle& a, SCGainSettle& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGainSettle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGainSettle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGainSettle* New() const final {
    return CreateMaybeMessage<SCGainSettle>(nullptr);
  }

  SCGainSettle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGainSettle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGainSettle& from);
  void MergeFrom(const SCGainSettle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGainSettle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCGainSettle";
  }
  protected:
  explicit SCGainSettle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairFieldNumber = 1,
    kOriginUIDFieldNumber = 2,
    kRatioFieldNumber = 3,
    kSourceUIDFieldNumber = 4,
  };
  // int32 chair = 1;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 originUID = 2;
  void clear_originuid();
  ::PROTOBUF_NAMESPACE_ID::int32 originuid() const;
  void set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_originuid() const;
  void _internal_set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 3;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sourceUID = 4;
  void clear_sourceuid();
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid() const;
  void set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sourceuid() const;
  void _internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCGainSettle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  ::PROTOBUF_NAMESPACE_ID::int32 originuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSSetPlane PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSSetPlane) */ {
 public:
  inline CSSetPlane() : CSSetPlane(nullptr) {}
  virtual ~CSSetPlane();

  CSSetPlane(const CSSetPlane& from);
  CSSetPlane(CSSetPlane&& from) noexcept
    : CSSetPlane() {
    *this = ::std::move(from);
  }

  inline CSSetPlane& operator=(const CSSetPlane& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSetPlane& operator=(CSSetPlane&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSetPlane& default_instance();

  static inline const CSSetPlane* internal_default_instance() {
    return reinterpret_cast<const CSSetPlane*>(
               &_CSSetPlane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(CSSetPlane& a, CSSetPlane& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSetPlane* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSetPlane* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSetPlane* New() const final {
    return CreateMaybeMessage<CSSetPlane>(nullptr);
  }

  CSSetPlane* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSetPlane>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSetPlane& from);
  void MergeFrom(const CSSetPlane& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSetPlane* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSSetPlane";
  }
  protected:
  explicit CSSetPlane(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlaneIDFieldNumber = 1,
  };
  // int32 planeID = 1;
  void clear_planeid();
  ::PROTOBUF_NAMESPACE_ID::int32 planeid() const;
  void set_planeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_planeid() const;
  void _internal_set_planeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSSetPlane)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 planeid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCSetPlane PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCSetPlane) */ {
 public:
  inline SCSetPlane() : SCSetPlane(nullptr) {}
  virtual ~SCSetPlane();

  SCSetPlane(const SCSetPlane& from);
  SCSetPlane(SCSetPlane&& from) noexcept
    : SCSetPlane() {
    *this = ::std::move(from);
  }

  inline SCSetPlane& operator=(const SCSetPlane& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSetPlane& operator=(SCSetPlane&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSetPlane& default_instance();

  static inline const SCSetPlane* internal_default_instance() {
    return reinterpret_cast<const SCSetPlane*>(
               &_SCSetPlane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(SCSetPlane& a, SCSetPlane& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSetPlane* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSetPlane* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSetPlane* New() const final {
    return CreateMaybeMessage<SCSetPlane>(nullptr);
  }

  SCSetPlane* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSetPlane>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSetPlane& from);
  void MergeFrom(const SCSetPlane& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSetPlane* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCSetPlane";
  }
  protected:
  explicit SCSetPlane(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairFieldNumber = 1,
    kPlaneIDFieldNumber = 2,
  };
  // int32 chair = 1;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 planeID = 2;
  void clear_planeid();
  ::PROTOBUF_NAMESPACE_ID::int32 planeid() const;
  void set_planeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_planeid() const;
  void _internal_set_planeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCSetPlane)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  ::PROTOBUF_NAMESPACE_ID::int32 planeid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSSwitchBackGround PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSSwitchBackGround) */ {
 public:
  inline CSSwitchBackGround() : CSSwitchBackGround(nullptr) {}
  virtual ~CSSwitchBackGround();

  CSSwitchBackGround(const CSSwitchBackGround& from);
  CSSwitchBackGround(CSSwitchBackGround&& from) noexcept
    : CSSwitchBackGround() {
    *this = ::std::move(from);
  }

  inline CSSwitchBackGround& operator=(const CSSwitchBackGround& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSwitchBackGround& operator=(CSSwitchBackGround&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSwitchBackGround& default_instance();

  static inline const CSSwitchBackGround* internal_default_instance() {
    return reinterpret_cast<const CSSwitchBackGround*>(
               &_CSSwitchBackGround_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(CSSwitchBackGround& a, CSSwitchBackGround& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSwitchBackGround* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSwitchBackGround* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSwitchBackGround* New() const final {
    return CreateMaybeMessage<CSSwitchBackGround>(nullptr);
  }

  CSSwitchBackGround* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSwitchBackGround>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSwitchBackGround& from);
  void MergeFrom(const CSSwitchBackGround& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSwitchBackGround* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSSwitchBackGround";
  }
  protected:
  explicit CSSwitchBackGround(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.CSSwitchBackGround)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCSwitchBackGround PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCSwitchBackGround) */ {
 public:
  inline SCSwitchBackGround() : SCSwitchBackGround(nullptr) {}
  virtual ~SCSwitchBackGround();

  SCSwitchBackGround(const SCSwitchBackGround& from);
  SCSwitchBackGround(SCSwitchBackGround&& from) noexcept
    : SCSwitchBackGround() {
    *this = ::std::move(from);
  }

  inline SCSwitchBackGround& operator=(const SCSwitchBackGround& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSwitchBackGround& operator=(SCSwitchBackGround&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSwitchBackGround& default_instance();

  static inline const SCSwitchBackGround* internal_default_instance() {
    return reinterpret_cast<const SCSwitchBackGround*>(
               &_SCSwitchBackGround_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(SCSwitchBackGround& a, SCSwitchBackGround& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSwitchBackGround* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSwitchBackGround* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSwitchBackGround* New() const final {
    return CreateMaybeMessage<SCSwitchBackGround>(nullptr);
  }

  SCSwitchBackGround* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSwitchBackGround>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSwitchBackGround& from);
  void MergeFrom(const SCSwitchBackGround& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSwitchBackGround* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCSwitchBackGround";
  }
  protected:
  explicit SCSwitchBackGround(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairFieldNumber = 1,
  };
  // int32 chair = 1;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCSwitchBackGround)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class MonsterPath PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.MonsterPath) */ {
 public:
  inline MonsterPath() : MonsterPath(nullptr) {}
  virtual ~MonsterPath();

  MonsterPath(const MonsterPath& from);
  MonsterPath(MonsterPath&& from) noexcept
    : MonsterPath() {
    *this = ::std::move(from);
  }

  inline MonsterPath& operator=(const MonsterPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonsterPath& operator=(MonsterPath&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MonsterPath& default_instance();

  static inline const MonsterPath* internal_default_instance() {
    return reinterpret_cast<const MonsterPath*>(
               &_MonsterPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(MonsterPath& a, MonsterPath& b) {
    a.Swap(&b);
  }
  inline void Swap(MonsterPath* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonsterPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MonsterPath* New() const final {
    return CreateMaybeMessage<MonsterPath>(nullptr);
  }

  MonsterPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MonsterPath>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MonsterPath& from);
  void MergeFrom(const MonsterPath& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonsterPath* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.MonsterPath";
  }
  protected:
  explicit MonsterPath(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonsterFieldNumber = 1,
    kConfigIDFieldNumber = 2,
    kStepIndexFieldNumber = 3,
    kRoadIndexFieldNumber = 4,
    kMoveTFieldNumber = 5,
    kDotIndexFieldNumber = 6,
    kDelayFieldNumber = 7,
    kStageFieldNumber = 8,
  };
  // .PlaneWar.MonsterInfo monster = 1;
  bool has_monster() const;
  private:
  bool _internal_has_monster() const;
  public:
  void clear_monster();
  const ::PlaneWar::MonsterInfo& monster() const;
  ::PlaneWar::MonsterInfo* release_monster();
  ::PlaneWar::MonsterInfo* mutable_monster();
  void set_allocated_monster(::PlaneWar::MonsterInfo* monster);
  private:
  const ::PlaneWar::MonsterInfo& _internal_monster() const;
  ::PlaneWar::MonsterInfo* _internal_mutable_monster();
  public:
  void unsafe_arena_set_allocated_monster(
      ::PlaneWar::MonsterInfo* monster);
  ::PlaneWar::MonsterInfo* unsafe_arena_release_monster();

  // int32 configID = 2;
  void clear_configid();
  ::PROTOBUF_NAMESPACE_ID::int32 configid() const;
  void set_configid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_configid() const;
  void _internal_set_configid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 stepIndex = 3;
  void clear_stepindex();
  ::PROTOBUF_NAMESPACE_ID::int32 stepindex() const;
  void set_stepindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stepindex() const;
  void _internal_set_stepindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 roadIndex = 4;
  void clear_roadindex();
  ::PROTOBUF_NAMESPACE_ID::int32 roadindex() const;
  void set_roadindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roadindex() const;
  void _internal_set_roadindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float moveT = 5;
  void clear_movet();
  float movet() const;
  void set_movet(float value);
  private:
  float _internal_movet() const;
  void _internal_set_movet(float value);
  public:

  // int32 dotIndex = 6;
  void clear_dotindex();
  ::PROTOBUF_NAMESPACE_ID::int32 dotindex() const;
  void set_dotindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dotindex() const;
  void _internal_set_dotindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float delay = 7;
  void clear_delay();
  float delay() const;
  void set_delay(float value);
  private:
  float _internal_delay() const;
  void _internal_set_delay(float value);
  public:

  // int32 stage = 8;
  void clear_stage();
  ::PROTOBUF_NAMESPACE_ID::int32 stage() const;
  void set_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stage() const;
  void _internal_set_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.MonsterPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::MonsterInfo* monster_;
  ::PROTOBUF_NAMESPACE_ID::int32 configid_;
  ::PROTOBUF_NAMESPACE_ID::int32 stepindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 roadindex_;
  float movet_;
  ::PROTOBUF_NAMESPACE_ID::int32 dotindex_;
  float delay_;
  ::PROTOBUF_NAMESPACE_ID::int32 stage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCSyncMonsterInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCSyncMonsterInfo) */ {
 public:
  inline SCSyncMonsterInfo() : SCSyncMonsterInfo(nullptr) {}
  virtual ~SCSyncMonsterInfo();

  SCSyncMonsterInfo(const SCSyncMonsterInfo& from);
  SCSyncMonsterInfo(SCSyncMonsterInfo&& from) noexcept
    : SCSyncMonsterInfo() {
    *this = ::std::move(from);
  }

  inline SCSyncMonsterInfo& operator=(const SCSyncMonsterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSyncMonsterInfo& operator=(SCSyncMonsterInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSyncMonsterInfo& default_instance();

  static inline const SCSyncMonsterInfo* internal_default_instance() {
    return reinterpret_cast<const SCSyncMonsterInfo*>(
               &_SCSyncMonsterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(SCSyncMonsterInfo& a, SCSyncMonsterInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSyncMonsterInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSyncMonsterInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSyncMonsterInfo* New() const final {
    return CreateMaybeMessage<SCSyncMonsterInfo>(nullptr);
  }

  SCSyncMonsterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSyncMonsterInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSyncMonsterInfo& from);
  void MergeFrom(const SCSyncMonsterInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSyncMonsterInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCSyncMonsterInfo";
  }
  protected:
  explicit SCSyncMonsterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreatedPathListFieldNumber = 1,
  };
  // repeated .PlaneWar.MonsterPath createdPathList = 1;
  int createdpathlist_size() const;
  private:
  int _internal_createdpathlist_size() const;
  public:
  void clear_createdpathlist();
  ::PlaneWar::MonsterPath* mutable_createdpathlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MonsterPath >*
      mutable_createdpathlist();
  private:
  const ::PlaneWar::MonsterPath& _internal_createdpathlist(int index) const;
  ::PlaneWar::MonsterPath* _internal_add_createdpathlist();
  public:
  const ::PlaneWar::MonsterPath& createdpathlist(int index) const;
  ::PlaneWar::MonsterPath* add_createdpathlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MonsterPath >&
      createdpathlist() const;

  // @@protoc_insertion_point(class_scope:PlaneWar.SCSyncMonsterInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MonsterPath > createdpathlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class ScratchInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.ScratchInfo) */ {
 public:
  inline ScratchInfo() : ScratchInfo(nullptr) {}
  virtual ~ScratchInfo();

  ScratchInfo(const ScratchInfo& from);
  ScratchInfo(ScratchInfo&& from) noexcept
    : ScratchInfo() {
    *this = ::std::move(from);
  }

  inline ScratchInfo& operator=(const ScratchInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScratchInfo& operator=(ScratchInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScratchInfo& default_instance();

  static inline const ScratchInfo* internal_default_instance() {
    return reinterpret_cast<const ScratchInfo*>(
               &_ScratchInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(ScratchInfo& a, ScratchInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ScratchInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScratchInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScratchInfo* New() const final {
    return CreateMaybeMessage<ScratchInfo>(nullptr);
  }

  ScratchInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScratchInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScratchInfo& from);
  void MergeFrom(const ScratchInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScratchInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.ScratchInfo";
  }
  protected:
  explicit ScratchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kMultipleFieldNumber = 2,
  };
  // int32 base = 1;
  void clear_base();
  ::PROTOBUF_NAMESPACE_ID::int32 base() const;
  void set_base(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_base() const;
  void _internal_set_base(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 multiple = 2;
  void clear_multiple();
  ::PROTOBUF_NAMESPACE_ID::int32 multiple() const;
  void set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_multiple() const;
  void _internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.ScratchInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 base_;
  ::PROTOBUF_NAMESPACE_ID::int32 multiple_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSScratchCardList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSScratchCardList) */ {
 public:
  inline CSScratchCardList() : CSScratchCardList(nullptr) {}
  virtual ~CSScratchCardList();

  CSScratchCardList(const CSScratchCardList& from);
  CSScratchCardList(CSScratchCardList&& from) noexcept
    : CSScratchCardList() {
    *this = ::std::move(from);
  }

  inline CSScratchCardList& operator=(const CSScratchCardList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSScratchCardList& operator=(CSScratchCardList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSScratchCardList& default_instance();

  static inline const CSScratchCardList* internal_default_instance() {
    return reinterpret_cast<const CSScratchCardList*>(
               &_CSScratchCardList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(CSScratchCardList& a, CSScratchCardList& b) {
    a.Swap(&b);
  }
  inline void Swap(CSScratchCardList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSScratchCardList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSScratchCardList* New() const final {
    return CreateMaybeMessage<CSScratchCardList>(nullptr);
  }

  CSScratchCardList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSScratchCardList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSScratchCardList& from);
  void MergeFrom(const CSScratchCardList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSScratchCardList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSScratchCardList";
  }
  protected:
  explicit CSScratchCardList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.CSScratchCardList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCScratchCardList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCScratchCardList) */ {
 public:
  inline SCScratchCardList() : SCScratchCardList(nullptr) {}
  virtual ~SCScratchCardList();

  SCScratchCardList(const SCScratchCardList& from);
  SCScratchCardList(SCScratchCardList&& from) noexcept
    : SCScratchCardList() {
    *this = ::std::move(from);
  }

  inline SCScratchCardList& operator=(const SCScratchCardList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCScratchCardList& operator=(SCScratchCardList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCScratchCardList& default_instance();

  static inline const SCScratchCardList* internal_default_instance() {
    return reinterpret_cast<const SCScratchCardList*>(
               &_SCScratchCardList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(SCScratchCardList& a, SCScratchCardList& b) {
    a.Swap(&b);
  }
  inline void Swap(SCScratchCardList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCScratchCardList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCScratchCardList* New() const final {
    return CreateMaybeMessage<SCScratchCardList>(nullptr);
  }

  SCScratchCardList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCScratchCardList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCScratchCardList& from);
  void MergeFrom(const SCScratchCardList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCScratchCardList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCScratchCardList";
  }
  protected:
  explicit SCScratchCardList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstCardFieldNumber = 2,
    kNumFieldNumber = 1,
  };
  // .PlaneWar.ScratchInfo firstCard = 2;
  bool has_firstcard() const;
  private:
  bool _internal_has_firstcard() const;
  public:
  void clear_firstcard();
  const ::PlaneWar::ScratchInfo& firstcard() const;
  ::PlaneWar::ScratchInfo* release_firstcard();
  ::PlaneWar::ScratchInfo* mutable_firstcard();
  void set_allocated_firstcard(::PlaneWar::ScratchInfo* firstcard);
  private:
  const ::PlaneWar::ScratchInfo& _internal_firstcard() const;
  ::PlaneWar::ScratchInfo* _internal_mutable_firstcard();
  public:
  void unsafe_arena_set_allocated_firstcard(
      ::PlaneWar::ScratchInfo* firstcard);
  ::PlaneWar::ScratchInfo* unsafe_arena_release_firstcard();

  // int32 num = 1;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCScratchCardList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::ScratchInfo* firstcard_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSUseScratchCard PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSUseScratchCard) */ {
 public:
  inline CSUseScratchCard() : CSUseScratchCard(nullptr) {}
  virtual ~CSUseScratchCard();

  CSUseScratchCard(const CSUseScratchCard& from);
  CSUseScratchCard(CSUseScratchCard&& from) noexcept
    : CSUseScratchCard() {
    *this = ::std::move(from);
  }

  inline CSUseScratchCard& operator=(const CSUseScratchCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSUseScratchCard& operator=(CSUseScratchCard&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSUseScratchCard& default_instance();

  static inline const CSUseScratchCard* internal_default_instance() {
    return reinterpret_cast<const CSUseScratchCard*>(
               &_CSUseScratchCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(CSUseScratchCard& a, CSUseScratchCard& b) {
    a.Swap(&b);
  }
  inline void Swap(CSUseScratchCard* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSUseScratchCard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSUseScratchCard* New() const final {
    return CreateMaybeMessage<CSUseScratchCard>(nullptr);
  }

  CSUseScratchCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSUseScratchCard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSUseScratchCard& from);
  void MergeFrom(const CSUseScratchCard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSUseScratchCard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSUseScratchCard";
  }
  protected:
  explicit CSUseScratchCard(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
  };
  // int32 num = 1;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSUseScratchCard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCUseScratchCard PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCUseScratchCard) */ {
 public:
  inline SCUseScratchCard() : SCUseScratchCard(nullptr) {}
  virtual ~SCUseScratchCard();

  SCUseScratchCard(const SCUseScratchCard& from);
  SCUseScratchCard(SCUseScratchCard&& from) noexcept
    : SCUseScratchCard() {
    *this = ::std::move(from);
  }

  inline SCUseScratchCard& operator=(const SCUseScratchCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUseScratchCard& operator=(SCUseScratchCard&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUseScratchCard& default_instance();

  static inline const SCUseScratchCard* internal_default_instance() {
    return reinterpret_cast<const SCUseScratchCard*>(
               &_SCUseScratchCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(SCUseScratchCard& a, SCUseScratchCard& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUseScratchCard* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUseScratchCard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUseScratchCard* New() const final {
    return CreateMaybeMessage<SCUseScratchCard>(nullptr);
  }

  SCUseScratchCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUseScratchCard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUseScratchCard& from);
  void MergeFrom(const SCUseScratchCard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUseScratchCard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCUseScratchCard";
  }
  protected:
  explicit SCUseScratchCard(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardListFieldNumber = 2,
    kChairFieldNumber = 1,
    kTotalFieldNumber = 3,
    kRemainFieldNumber = 4,
    kCurMoneyFieldNumber = 5,
  };
  // repeated .PlaneWar.ScratchInfo cardList = 2;
  int cardlist_size() const;
  private:
  int _internal_cardlist_size() const;
  public:
  void clear_cardlist();
  ::PlaneWar::ScratchInfo* mutable_cardlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ScratchInfo >*
      mutable_cardlist();
  private:
  const ::PlaneWar::ScratchInfo& _internal_cardlist(int index) const;
  ::PlaneWar::ScratchInfo* _internal_add_cardlist();
  public:
  const ::PlaneWar::ScratchInfo& cardlist(int index) const;
  ::PlaneWar::ScratchInfo* add_cardlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ScratchInfo >&
      cardlist() const;

  // int32 chair = 1;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total = 3;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 remain = 4;
  void clear_remain();
  ::PROTOBUF_NAMESPACE_ID::int32 remain() const;
  void set_remain(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_remain() const;
  void _internal_set_remain(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 curMoney = 5;
  void clear_curmoney();
  ::PROTOBUF_NAMESPACE_ID::int32 curmoney() const;
  void set_curmoney(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curmoney() const;
  void _internal_set_curmoney(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCUseScratchCard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ScratchInfo > cardlist_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_;
  ::PROTOBUF_NAMESPACE_ID::int32 remain_;
  ::PROTOBUF_NAMESPACE_ID::int32 curmoney_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSExplodeSettle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSExplodeSettle) */ {
 public:
  inline CSExplodeSettle() : CSExplodeSettle(nullptr) {}
  virtual ~CSExplodeSettle();

  CSExplodeSettle(const CSExplodeSettle& from);
  CSExplodeSettle(CSExplodeSettle&& from) noexcept
    : CSExplodeSettle() {
    *this = ::std::move(from);
  }

  inline CSExplodeSettle& operator=(const CSExplodeSettle& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSExplodeSettle& operator=(CSExplodeSettle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSExplodeSettle& default_instance();

  static inline const CSExplodeSettle* internal_default_instance() {
    return reinterpret_cast<const CSExplodeSettle*>(
               &_CSExplodeSettle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(CSExplodeSettle& a, CSExplodeSettle& b) {
    a.Swap(&b);
  }
  inline void Swap(CSExplodeSettle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSExplodeSettle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSExplodeSettle* New() const final {
    return CreateMaybeMessage<CSExplodeSettle>(nullptr);
  }

  CSExplodeSettle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSExplodeSettle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSExplodeSettle& from);
  void MergeFrom(const CSExplodeSettle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSExplodeSettle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSExplodeSettle";
  }
  protected:
  explicit CSExplodeSettle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceUIDFieldNumber = 1,
  };
  // int32 sourceUID = 1;
  void clear_sourceuid();
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid() const;
  void set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sourceuid() const;
  void _internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSExplodeSettle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCExplodeSettle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCExplodeSettle) */ {
 public:
  inline SCExplodeSettle() : SCExplodeSettle(nullptr) {}
  virtual ~SCExplodeSettle();

  SCExplodeSettle(const SCExplodeSettle& from);
  SCExplodeSettle(SCExplodeSettle&& from) noexcept
    : SCExplodeSettle() {
    *this = ::std::move(from);
  }

  inline SCExplodeSettle& operator=(const SCExplodeSettle& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCExplodeSettle& operator=(SCExplodeSettle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCExplodeSettle& default_instance();

  static inline const SCExplodeSettle* internal_default_instance() {
    return reinterpret_cast<const SCExplodeSettle*>(
               &_SCExplodeSettle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(SCExplodeSettle& a, SCExplodeSettle& b) {
    a.Swap(&b);
  }
  inline void Swap(SCExplodeSettle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCExplodeSettle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCExplodeSettle* New() const final {
    return CreateMaybeMessage<SCExplodeSettle>(nullptr);
  }

  SCExplodeSettle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCExplodeSettle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCExplodeSettle& from);
  void MergeFrom(const SCExplodeSettle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCExplodeSettle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCExplodeSettle";
  }
  protected:
  explicit SCExplodeSettle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairFieldNumber = 1,
    kSourceUIDFieldNumber = 2,
    kOriginUIDFieldNumber = 3,
    kRemainFieldNumber = 4,
  };
  // int32 chair = 1;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sourceUID = 2;
  void clear_sourceuid();
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid() const;
  void set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sourceuid() const;
  void _internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 originUID = 3;
  void clear_originuid();
  ::PROTOBUF_NAMESPACE_ID::int32 originuid() const;
  void set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_originuid() const;
  void _internal_set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 remain = 4;
  void clear_remain();
  ::PROTOBUF_NAMESPACE_ID::int32 remain() const;
  void set_remain(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_remain() const;
  void _internal_set_remain(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCExplodeSettle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 originuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 remain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSFallIntoBlackHole PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSFallIntoBlackHole) */ {
 public:
  inline CSFallIntoBlackHole() : CSFallIntoBlackHole(nullptr) {}
  virtual ~CSFallIntoBlackHole();

  CSFallIntoBlackHole(const CSFallIntoBlackHole& from);
  CSFallIntoBlackHole(CSFallIntoBlackHole&& from) noexcept
    : CSFallIntoBlackHole() {
    *this = ::std::move(from);
  }

  inline CSFallIntoBlackHole& operator=(const CSFallIntoBlackHole& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSFallIntoBlackHole& operator=(CSFallIntoBlackHole&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSFallIntoBlackHole& default_instance();

  static inline const CSFallIntoBlackHole* internal_default_instance() {
    return reinterpret_cast<const CSFallIntoBlackHole*>(
               &_CSFallIntoBlackHole_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(CSFallIntoBlackHole& a, CSFallIntoBlackHole& b) {
    a.Swap(&b);
  }
  inline void Swap(CSFallIntoBlackHole* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSFallIntoBlackHole* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSFallIntoBlackHole* New() const final {
    return CreateMaybeMessage<CSFallIntoBlackHole>(nullptr);
  }

  CSFallIntoBlackHole* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSFallIntoBlackHole>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSFallIntoBlackHole& from);
  void MergeFrom(const CSFallIntoBlackHole& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSFallIntoBlackHole* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSFallIntoBlackHole";
  }
  protected:
  explicit CSFallIntoBlackHole(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonsterUIDFieldNumber = 1,
    kSourceUIDFieldNumber = 2,
  };
  // int32 monsterUID = 1;
  void clear_monsteruid();
  ::PROTOBUF_NAMESPACE_ID::int32 monsteruid() const;
  void set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_monsteruid() const;
  void _internal_set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sourceUID = 2;
  void clear_sourceuid();
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid() const;
  void set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sourceuid() const;
  void _internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSFallIntoBlackHole)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 monsteruid_;
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCFallIntoBlackHole PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCFallIntoBlackHole) */ {
 public:
  inline SCFallIntoBlackHole() : SCFallIntoBlackHole(nullptr) {}
  virtual ~SCFallIntoBlackHole();

  SCFallIntoBlackHole(const SCFallIntoBlackHole& from);
  SCFallIntoBlackHole(SCFallIntoBlackHole&& from) noexcept
    : SCFallIntoBlackHole() {
    *this = ::std::move(from);
  }

  inline SCFallIntoBlackHole& operator=(const SCFallIntoBlackHole& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCFallIntoBlackHole& operator=(SCFallIntoBlackHole&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCFallIntoBlackHole& default_instance();

  static inline const SCFallIntoBlackHole* internal_default_instance() {
    return reinterpret_cast<const SCFallIntoBlackHole*>(
               &_SCFallIntoBlackHole_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(SCFallIntoBlackHole& a, SCFallIntoBlackHole& b) {
    a.Swap(&b);
  }
  inline void Swap(SCFallIntoBlackHole* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCFallIntoBlackHole* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCFallIntoBlackHole* New() const final {
    return CreateMaybeMessage<SCFallIntoBlackHole>(nullptr);
  }

  SCFallIntoBlackHole* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCFallIntoBlackHole>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCFallIntoBlackHole& from);
  void MergeFrom(const SCFallIntoBlackHole& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCFallIntoBlackHole* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCFallIntoBlackHole";
  }
  protected:
  explicit SCFallIntoBlackHole(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairFieldNumber = 1,
    kMonsterUIDFieldNumber = 2,
    kSourceUIDFieldNumber = 3,
  };
  // int32 chair = 1;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 monsterUID = 2;
  void clear_monsteruid();
  ::PROTOBUF_NAMESPACE_ID::int32 monsteruid() const;
  void set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_monsteruid() const;
  void _internal_set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sourceUID = 3;
  void clear_sourceuid();
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid() const;
  void set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sourceuid() const;
  void _internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCFallIntoBlackHole)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  ::PROTOBUF_NAMESPACE_ID::int32 monsteruid_;
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSSyncBlackHolePos PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSSyncBlackHolePos) */ {
 public:
  inline CSSyncBlackHolePos() : CSSyncBlackHolePos(nullptr) {}
  virtual ~CSSyncBlackHolePos();

  CSSyncBlackHolePos(const CSSyncBlackHolePos& from);
  CSSyncBlackHolePos(CSSyncBlackHolePos&& from) noexcept
    : CSSyncBlackHolePos() {
    *this = ::std::move(from);
  }

  inline CSSyncBlackHolePos& operator=(const CSSyncBlackHolePos& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSyncBlackHolePos& operator=(CSSyncBlackHolePos&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSyncBlackHolePos& default_instance();

  static inline const CSSyncBlackHolePos* internal_default_instance() {
    return reinterpret_cast<const CSSyncBlackHolePos*>(
               &_CSSyncBlackHolePos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(CSSyncBlackHolePos& a, CSSyncBlackHolePos& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSyncBlackHolePos* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSyncBlackHolePos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSyncBlackHolePos* New() const final {
    return CreateMaybeMessage<CSSyncBlackHolePos>(nullptr);
  }

  CSSyncBlackHolePos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSyncBlackHolePos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSyncBlackHolePos& from);
  void MergeFrom(const CSSyncBlackHolePos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSyncBlackHolePos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSSyncBlackHolePos";
  }
  protected:
  explicit CSSyncBlackHolePos(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 2,
    kSourceUIDFieldNumber = 1,
  };
  // .PlaneWar.Pos pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::PlaneWar::Pos& pos() const;
  ::PlaneWar::Pos* release_pos();
  ::PlaneWar::Pos* mutable_pos();
  void set_allocated_pos(::PlaneWar::Pos* pos);
  private:
  const ::PlaneWar::Pos& _internal_pos() const;
  ::PlaneWar::Pos* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::PlaneWar::Pos* pos);
  ::PlaneWar::Pos* unsafe_arena_release_pos();

  // int32 sourceUID = 1;
  void clear_sourceuid();
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid() const;
  void set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sourceuid() const;
  void _internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSSyncBlackHolePos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::Pos* pos_;
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCSyncBlackHolePos PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCSyncBlackHolePos) */ {
 public:
  inline SCSyncBlackHolePos() : SCSyncBlackHolePos(nullptr) {}
  virtual ~SCSyncBlackHolePos();

  SCSyncBlackHolePos(const SCSyncBlackHolePos& from);
  SCSyncBlackHolePos(SCSyncBlackHolePos&& from) noexcept
    : SCSyncBlackHolePos() {
    *this = ::std::move(from);
  }

  inline SCSyncBlackHolePos& operator=(const SCSyncBlackHolePos& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSyncBlackHolePos& operator=(SCSyncBlackHolePos&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSyncBlackHolePos& default_instance();

  static inline const SCSyncBlackHolePos* internal_default_instance() {
    return reinterpret_cast<const SCSyncBlackHolePos*>(
               &_SCSyncBlackHolePos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(SCSyncBlackHolePos& a, SCSyncBlackHolePos& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSyncBlackHolePos* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSyncBlackHolePos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSyncBlackHolePos* New() const final {
    return CreateMaybeMessage<SCSyncBlackHolePos>(nullptr);
  }

  SCSyncBlackHolePos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSyncBlackHolePos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSyncBlackHolePos& from);
  void MergeFrom(const SCSyncBlackHolePos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSyncBlackHolePos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCSyncBlackHolePos";
  }
  protected:
  explicit SCSyncBlackHolePos(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 3,
    kChairFieldNumber = 1,
    kSourceUIDFieldNumber = 2,
  };
  // .PlaneWar.Pos pos = 3;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::PlaneWar::Pos& pos() const;
  ::PlaneWar::Pos* release_pos();
  ::PlaneWar::Pos* mutable_pos();
  void set_allocated_pos(::PlaneWar::Pos* pos);
  private:
  const ::PlaneWar::Pos& _internal_pos() const;
  ::PlaneWar::Pos* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::PlaneWar::Pos* pos);
  ::PlaneWar::Pos* unsafe_arena_release_pos();

  // int32 chair = 1;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sourceUID = 2;
  void clear_sourceuid();
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid() const;
  void set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sourceuid() const;
  void _internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCSyncBlackHolePos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::Pos* pos_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSInteraction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSInteraction) */ {
 public:
  inline CSInteraction() : CSInteraction(nullptr) {}
  virtual ~CSInteraction();

  CSInteraction(const CSInteraction& from);
  CSInteraction(CSInteraction&& from) noexcept
    : CSInteraction() {
    *this = ::std::move(from);
  }

  inline CSInteraction& operator=(const CSInteraction& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSInteraction& operator=(CSInteraction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSInteraction& default_instance();

  static inline const CSInteraction* internal_default_instance() {
    return reinterpret_cast<const CSInteraction*>(
               &_CSInteraction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(CSInteraction& a, CSInteraction& b) {
    a.Swap(&b);
  }
  inline void Swap(CSInteraction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSInteraction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSInteraction* New() const final {
    return CreateMaybeMessage<CSInteraction>(nullptr);
  }

  CSInteraction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSInteraction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSInteraction& from);
  void MergeFrom(const CSInteraction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSInteraction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSInteraction";
  }
  protected:
  explicit CSInteraction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetChairFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // int32 targetChair = 1;
  void clear_targetchair();
  ::PROTOBUF_NAMESPACE_ID::int32 targetchair() const;
  void set_targetchair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_targetchair() const;
  void _internal_set_targetchair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSInteraction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 targetchair_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCInteraction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCInteraction) */ {
 public:
  inline SCInteraction() : SCInteraction(nullptr) {}
  virtual ~SCInteraction();

  SCInteraction(const SCInteraction& from);
  SCInteraction(SCInteraction&& from) noexcept
    : SCInteraction() {
    *this = ::std::move(from);
  }

  inline SCInteraction& operator=(const SCInteraction& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCInteraction& operator=(SCInteraction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCInteraction& default_instance();

  static inline const SCInteraction* internal_default_instance() {
    return reinterpret_cast<const SCInteraction*>(
               &_SCInteraction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(SCInteraction& a, SCInteraction& b) {
    a.Swap(&b);
  }
  inline void Swap(SCInteraction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCInteraction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCInteraction* New() const final {
    return CreateMaybeMessage<SCInteraction>(nullptr);
  }

  SCInteraction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCInteraction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCInteraction& from);
  void MergeFrom(const SCInteraction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCInteraction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCInteraction";
  }
  protected:
  explicit SCInteraction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceChairFieldNumber = 1,
    kTargetChairFieldNumber = 2,
    kTypeFieldNumber = 3,
    kCooldownFieldNumber = 4,
    kCurMoneyFieldNumber = 5,
  };
  // int32 sourceChair = 1;
  void clear_sourcechair();
  ::PROTOBUF_NAMESPACE_ID::int32 sourcechair() const;
  void set_sourcechair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sourcechair() const;
  void _internal_set_sourcechair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 targetChair = 2;
  void clear_targetchair();
  ::PROTOBUF_NAMESPACE_ID::int32 targetchair() const;
  void set_targetchair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_targetchair() const;
  void _internal_set_targetchair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cooldown = 4;
  void clear_cooldown();
  ::PROTOBUF_NAMESPACE_ID::int32 cooldown() const;
  void set_cooldown(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cooldown() const;
  void _internal_set_cooldown(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 curMoney = 5;
  void clear_curmoney();
  ::PROTOBUF_NAMESPACE_ID::int64 curmoney() const;
  void set_curmoney(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_curmoney() const;
  void _internal_set_curmoney(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCInteraction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 sourcechair_;
  ::PROTOBUF_NAMESPACE_ID::int32 targetchair_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 cooldown_;
  ::PROTOBUF_NAMESPACE_ID::int64 curmoney_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class JumpHighArena PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.JumpHighArena) */ {
 public:
  inline JumpHighArena() : JumpHighArena(nullptr) {}
  virtual ~JumpHighArena();

  JumpHighArena(const JumpHighArena& from);
  JumpHighArena(JumpHighArena&& from) noexcept
    : JumpHighArena() {
    *this = ::std::move(from);
  }

  inline JumpHighArena& operator=(const JumpHighArena& from) {
    CopyFrom(from);
    return *this;
  }
  inline JumpHighArena& operator=(JumpHighArena&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JumpHighArena& default_instance();

  static inline const JumpHighArena* internal_default_instance() {
    return reinterpret_cast<const JumpHighArena*>(
               &_JumpHighArena_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(JumpHighArena& a, JumpHighArena& b) {
    a.Swap(&b);
  }
  inline void Swap(JumpHighArena* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JumpHighArena* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JumpHighArena* New() const final {
    return CreateMaybeMessage<JumpHighArena>(nullptr);
  }

  JumpHighArena* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JumpHighArena>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JumpHighArena& from);
  void MergeFrom(const JumpHighArena& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JumpHighArena* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.JumpHighArena";
  }
  protected:
  explicit JumpHighArena(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonsterIdFieldNumber = 6,
    kTipsFieldNumber = 5,
    kIsOpenFieldNumber = 1,
    kVipFieldNumber = 2,
    kCoinFieldNumber = 3,
    kGameTimeFieldNumber = 4,
  };
  // repeated int32 monsterId = 6;
  int monsterid_size() const;
  private:
  int _internal_monsterid_size() const;
  public:
  void clear_monsterid();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_monsterid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_monsterid() const;
  void _internal_add_monsterid(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_monsterid();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 monsterid(int index) const;
  void set_monsterid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_monsterid(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      monsterid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_monsterid();

  // string tips = 5;
  void clear_tips();
  const std::string& tips() const;
  void set_tips(const std::string& value);
  void set_tips(std::string&& value);
  void set_tips(const char* value);
  void set_tips(const char* value, size_t size);
  std::string* mutable_tips();
  std::string* release_tips();
  void set_allocated_tips(std::string* tips);
  private:
  const std::string& _internal_tips() const;
  void _internal_set_tips(const std::string& value);
  std::string* _internal_mutable_tips();
  public:

  // bool isOpen = 1;
  void clear_isopen();
  bool isopen() const;
  void set_isopen(bool value);
  private:
  bool _internal_isopen() const;
  void _internal_set_isopen(bool value);
  public:

  // int32 vip = 2;
  void clear_vip();
  ::PROTOBUF_NAMESPACE_ID::int32 vip() const;
  void set_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vip() const;
  void _internal_set_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 coin = 3;
  void clear_coin();
  ::PROTOBUF_NAMESPACE_ID::int32 coin() const;
  void set_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_coin() const;
  void _internal_set_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gameTime = 4;
  void clear_gametime();
  ::PROTOBUF_NAMESPACE_ID::int32 gametime() const;
  void set_gametime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gametime() const;
  void _internal_set_gametime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.JumpHighArena)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > monsterid_;
  mutable std::atomic<int> _monsterid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tips_;
  bool isopen_;
  ::PROTOBUF_NAMESPACE_ID::int32 vip_;
  ::PROTOBUF_NAMESPACE_ID::int32 coin_;
  ::PROTOBUF_NAMESPACE_ID::int32 gametime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class PoolArenaLimit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.PoolArenaLimit) */ {
 public:
  inline PoolArenaLimit() : PoolArenaLimit(nullptr) {}
  virtual ~PoolArenaLimit();

  PoolArenaLimit(const PoolArenaLimit& from);
  PoolArenaLimit(PoolArenaLimit&& from) noexcept
    : PoolArenaLimit() {
    *this = ::std::move(from);
  }

  inline PoolArenaLimit& operator=(const PoolArenaLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoolArenaLimit& operator=(PoolArenaLimit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoolArenaLimit& default_instance();

  static inline const PoolArenaLimit* internal_default_instance() {
    return reinterpret_cast<const PoolArenaLimit*>(
               &_PoolArenaLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(PoolArenaLimit& a, PoolArenaLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(PoolArenaLimit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoolArenaLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoolArenaLimit* New() const final {
    return CreateMaybeMessage<PoolArenaLimit>(nullptr);
  }

  PoolArenaLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoolArenaLimit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoolArenaLimit& from);
  void MergeFrom(const PoolArenaLimit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoolArenaLimit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.PoolArenaLimit";
  }
  protected:
  explicit PoolArenaLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
    kArenaFieldNumber = 2,
  };
  // int32 level = 1;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 arena = 2;
  void clear_arena();
  ::PROTOBUF_NAMESPACE_ID::int32 arena() const;
  void set_arena(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_arena() const;
  void _internal_set_arena(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.PoolArenaLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 arena_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCActivityInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCActivityInfo) */ {
 public:
  inline SCActivityInfo() : SCActivityInfo(nullptr) {}
  virtual ~SCActivityInfo();

  SCActivityInfo(const SCActivityInfo& from);
  SCActivityInfo(SCActivityInfo&& from) noexcept
    : SCActivityInfo() {
    *this = ::std::move(from);
  }

  inline SCActivityInfo& operator=(const SCActivityInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCActivityInfo& operator=(SCActivityInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCActivityInfo& default_instance();

  static inline const SCActivityInfo* internal_default_instance() {
    return reinterpret_cast<const SCActivityInfo*>(
               &_SCActivityInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(SCActivityInfo& a, SCActivityInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCActivityInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCActivityInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCActivityInfo* New() const final {
    return CreateMaybeMessage<SCActivityInfo>(nullptr);
  }

  SCActivityInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCActivityInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCActivityInfo& from);
  void MergeFrom(const SCActivityInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCActivityInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCActivityInfo";
  }
  protected:
  explicit SCActivityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoolLimitFieldNumber = 3,
    kJumpFieldNumber = 1,
    kLimitFieldNumber = 2,
  };
  // repeated .PlaneWar.PoolArenaLimit poolLimit = 3;
  int poollimit_size() const;
  private:
  int _internal_poollimit_size() const;
  public:
  void clear_poollimit();
  ::PlaneWar::PoolArenaLimit* mutable_poollimit(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PoolArenaLimit >*
      mutable_poollimit();
  private:
  const ::PlaneWar::PoolArenaLimit& _internal_poollimit(int index) const;
  ::PlaneWar::PoolArenaLimit* _internal_add_poollimit();
  public:
  const ::PlaneWar::PoolArenaLimit& poollimit(int index) const;
  ::PlaneWar::PoolArenaLimit* add_poollimit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PoolArenaLimit >&
      poollimit() const;

  // .PlaneWar.JumpHighArena jump = 1;
  bool has_jump() const;
  private:
  bool _internal_has_jump() const;
  public:
  void clear_jump();
  const ::PlaneWar::JumpHighArena& jump() const;
  ::PlaneWar::JumpHighArena* release_jump();
  ::PlaneWar::JumpHighArena* mutable_jump();
  void set_allocated_jump(::PlaneWar::JumpHighArena* jump);
  private:
  const ::PlaneWar::JumpHighArena& _internal_jump() const;
  ::PlaneWar::JumpHighArena* _internal_mutable_jump();
  public:
  void unsafe_arena_set_allocated_jump(
      ::PlaneWar::JumpHighArena* jump);
  ::PlaneWar::JumpHighArena* unsafe_arena_release_jump();

  // int32 limit = 2;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCActivityInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PoolArenaLimit > poollimit_;
  ::PlaneWar::JumpHighArena* jump_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSGetTaskReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSGetTaskReward) */ {
 public:
  inline CSGetTaskReward() : CSGetTaskReward(nullptr) {}
  virtual ~CSGetTaskReward();

  CSGetTaskReward(const CSGetTaskReward& from);
  CSGetTaskReward(CSGetTaskReward&& from) noexcept
    : CSGetTaskReward() {
    *this = ::std::move(from);
  }

  inline CSGetTaskReward& operator=(const CSGetTaskReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGetTaskReward& operator=(CSGetTaskReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSGetTaskReward& default_instance();

  static inline const CSGetTaskReward* internal_default_instance() {
    return reinterpret_cast<const CSGetTaskReward*>(
               &_CSGetTaskReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(CSGetTaskReward& a, CSGetTaskReward& b) {
    a.Swap(&b);
  }
  inline void Swap(CSGetTaskReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGetTaskReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSGetTaskReward* New() const final {
    return CreateMaybeMessage<CSGetTaskReward>(nullptr);
  }

  CSGetTaskReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSGetTaskReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSGetTaskReward& from);
  void MergeFrom(const CSGetTaskReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSGetTaskReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSGetTaskReward";
  }
  protected:
  explicit CSGetTaskReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.CSGetTaskReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCGetTaskReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCGetTaskReward) */ {
 public:
  inline SCGetTaskReward() : SCGetTaskReward(nullptr) {}
  virtual ~SCGetTaskReward();

  SCGetTaskReward(const SCGetTaskReward& from);
  SCGetTaskReward(SCGetTaskReward&& from) noexcept
    : SCGetTaskReward() {
    *this = ::std::move(from);
  }

  inline SCGetTaskReward& operator=(const SCGetTaskReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGetTaskReward& operator=(SCGetTaskReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGetTaskReward& default_instance();

  static inline const SCGetTaskReward* internal_default_instance() {
    return reinterpret_cast<const SCGetTaskReward*>(
               &_SCGetTaskReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(SCGetTaskReward& a, SCGetTaskReward& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGetTaskReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGetTaskReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGetTaskReward* New() const final {
    return CreateMaybeMessage<SCGetTaskReward>(nullptr);
  }

  SCGetTaskReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGetTaskReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGetTaskReward& from);
  void MergeFrom(const SCGetTaskReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGetTaskReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCGetTaskReward";
  }
  protected:
  explicit SCGetTaskReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGunRatioFieldNumber = 1,
    kAwardFieldNumber = 2,
    kTicketFieldNumber = 3,
  };
  // int32 gunRatio = 1;
  void clear_gunratio();
  ::PROTOBUF_NAMESPACE_ID::int32 gunratio() const;
  void set_gunratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gunratio() const;
  void _internal_set_gunratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 award = 2;
  void clear_award();
  ::PROTOBUF_NAMESPACE_ID::int32 award() const;
  void set_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_award() const;
  void _internal_set_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ticket = 3;
  void clear_ticket();
  ::PROTOBUF_NAMESPACE_ID::int32 ticket() const;
  void set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ticket() const;
  void _internal_set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCGetTaskReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 gunratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 award_;
  ::PROTOBUF_NAMESPACE_ID::int32 ticket_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSGetTaskInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSGetTaskInfo) */ {
 public:
  inline CSGetTaskInfo() : CSGetTaskInfo(nullptr) {}
  virtual ~CSGetTaskInfo();

  CSGetTaskInfo(const CSGetTaskInfo& from);
  CSGetTaskInfo(CSGetTaskInfo&& from) noexcept
    : CSGetTaskInfo() {
    *this = ::std::move(from);
  }

  inline CSGetTaskInfo& operator=(const CSGetTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGetTaskInfo& operator=(CSGetTaskInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSGetTaskInfo& default_instance();

  static inline const CSGetTaskInfo* internal_default_instance() {
    return reinterpret_cast<const CSGetTaskInfo*>(
               &_CSGetTaskInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(CSGetTaskInfo& a, CSGetTaskInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSGetTaskInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGetTaskInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSGetTaskInfo* New() const final {
    return CreateMaybeMessage<CSGetTaskInfo>(nullptr);
  }

  CSGetTaskInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSGetTaskInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSGetTaskInfo& from);
  void MergeFrom(const CSGetTaskInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSGetTaskInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSGetTaskInfo";
  }
  protected:
  explicit CSGetTaskInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.CSGetTaskInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCGetTaskInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCGetTaskInfo) */ {
 public:
  inline SCGetTaskInfo() : SCGetTaskInfo(nullptr) {}
  virtual ~SCGetTaskInfo();

  SCGetTaskInfo(const SCGetTaskInfo& from);
  SCGetTaskInfo(SCGetTaskInfo&& from) noexcept
    : SCGetTaskInfo() {
    *this = ::std::move(from);
  }

  inline SCGetTaskInfo& operator=(const SCGetTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGetTaskInfo& operator=(SCGetTaskInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGetTaskInfo& default_instance();

  static inline const SCGetTaskInfo* internal_default_instance() {
    return reinterpret_cast<const SCGetTaskInfo*>(
               &_SCGetTaskInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(SCGetTaskInfo& a, SCGetTaskInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGetTaskInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGetTaskInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGetTaskInfo* New() const final {
    return CreateMaybeMessage<SCGetTaskInfo>(nullptr);
  }

  SCGetTaskInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGetTaskInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGetTaskInfo& from);
  void MergeFrom(const SCGetTaskInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGetTaskInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCGetTaskInfo";
  }
  protected:
  explicit SCGetTaskInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGunRatioFieldNumber = 1,
    kCurNumFieldNumber = 2,
    kTotalNumFieldNumber = 3,
    kVipLevelFieldNumber = 4,
    kIsUnlockFieldNumber = 5,
    kAwardFieldNumber = 6,
    kIsVipUnlockFieldNumber = 7,
    kTicketFieldNumber = 8,
  };
  // int32 gunRatio = 1;
  void clear_gunratio();
  ::PROTOBUF_NAMESPACE_ID::int32 gunratio() const;
  void set_gunratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gunratio() const;
  void _internal_set_gunratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 curNum = 2;
  void clear_curnum();
  ::PROTOBUF_NAMESPACE_ID::int32 curnum() const;
  void set_curnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curnum() const;
  void _internal_set_curnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 totalNum = 3;
  void clear_totalnum();
  ::PROTOBUF_NAMESPACE_ID::int32 totalnum() const;
  void set_totalnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_totalnum() const;
  void _internal_set_totalnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vipLevel = 4;
  void clear_viplevel();
  ::PROTOBUF_NAMESPACE_ID::int32 viplevel() const;
  void set_viplevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_viplevel() const;
  void _internal_set_viplevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 isUnlock = 5;
  void clear_isunlock();
  ::PROTOBUF_NAMESPACE_ID::int32 isunlock() const;
  void set_isunlock(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_isunlock() const;
  void _internal_set_isunlock(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 award = 6;
  void clear_award();
  ::PROTOBUF_NAMESPACE_ID::int32 award() const;
  void set_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_award() const;
  void _internal_set_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isVipUnlock = 7;
  void clear_isvipunlock();
  bool isvipunlock() const;
  void set_isvipunlock(bool value);
  private:
  bool _internal_isvipunlock() const;
  void _internal_set_isvipunlock(bool value);
  public:

  // int32 ticket = 8;
  void clear_ticket();
  ::PROTOBUF_NAMESPACE_ID::int32 ticket() const;
  void set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ticket() const;
  void _internal_set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCGetTaskInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 gunratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 curnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 totalnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 viplevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 isunlock_;
  ::PROTOBUF_NAMESPACE_ID::int32 award_;
  bool isvipunlock_;
  ::PROTOBUF_NAMESPACE_ID::int32 ticket_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCNoticeInfoChange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCNoticeInfoChange) */ {
 public:
  inline SCNoticeInfoChange() : SCNoticeInfoChange(nullptr) {}
  virtual ~SCNoticeInfoChange();

  SCNoticeInfoChange(const SCNoticeInfoChange& from);
  SCNoticeInfoChange(SCNoticeInfoChange&& from) noexcept
    : SCNoticeInfoChange() {
    *this = ::std::move(from);
  }

  inline SCNoticeInfoChange& operator=(const SCNoticeInfoChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCNoticeInfoChange& operator=(SCNoticeInfoChange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCNoticeInfoChange& default_instance();

  static inline const SCNoticeInfoChange* internal_default_instance() {
    return reinterpret_cast<const SCNoticeInfoChange*>(
               &_SCNoticeInfoChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(SCNoticeInfoChange& a, SCNoticeInfoChange& b) {
    a.Swap(&b);
  }
  inline void Swap(SCNoticeInfoChange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCNoticeInfoChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCNoticeInfoChange* New() const final {
    return CreateMaybeMessage<SCNoticeInfoChange>(nullptr);
  }

  SCNoticeInfoChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCNoticeInfoChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCNoticeInfoChange& from);
  void MergeFrom(const SCNoticeInfoChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCNoticeInfoChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCNoticeInfoChange";
  }
  protected:
  explicit SCNoticeInfoChange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissileListFieldNumber = 2,
    kIsCompleteTaskFieldNumber = 1,
    kCallNumFieldNumber = 3,
  };
  // repeated .PlaneWar.MissileInfo missileList = 2;
  int missilelist_size() const;
  private:
  int _internal_missilelist_size() const;
  public:
  void clear_missilelist();
  ::PlaneWar::MissileInfo* mutable_missilelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MissileInfo >*
      mutable_missilelist();
  private:
  const ::PlaneWar::MissileInfo& _internal_missilelist(int index) const;
  ::PlaneWar::MissileInfo* _internal_add_missilelist();
  public:
  const ::PlaneWar::MissileInfo& missilelist(int index) const;
  ::PlaneWar::MissileInfo* add_missilelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MissileInfo >&
      missilelist() const;

  // bool isCompleteTask = 1;
  void clear_iscompletetask();
  bool iscompletetask() const;
  void set_iscompletetask(bool value);
  private:
  bool _internal_iscompletetask() const;
  void _internal_set_iscompletetask(bool value);
  public:

  // int32 callNum = 3;
  void clear_callnum();
  ::PROTOBUF_NAMESPACE_ID::int32 callnum() const;
  void set_callnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_callnum() const;
  void _internal_set_callnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCNoticeInfoChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MissileInfo > missilelist_;
  bool iscompletetask_;
  ::PROTOBUF_NAMESPACE_ID::int32 callnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class ProsInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.ProsInfo) */ {
 public:
  inline ProsInfo() : ProsInfo(nullptr) {}
  virtual ~ProsInfo();

  ProsInfo(const ProsInfo& from);
  ProsInfo(ProsInfo&& from) noexcept
    : ProsInfo() {
    *this = ::std::move(from);
  }

  inline ProsInfo& operator=(const ProsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProsInfo& operator=(ProsInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProsInfo& default_instance();

  static inline const ProsInfo* internal_default_instance() {
    return reinterpret_cast<const ProsInfo*>(
               &_ProsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(ProsInfo& a, ProsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProsInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProsInfo* New() const final {
    return CreateMaybeMessage<ProsInfo>(nullptr);
  }

  ProsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProsInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProsInfo& from);
  void MergeFrom(const ProsInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProsInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.ProsInfo";
  }
  protected:
  explicit ProsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kChangeFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 change = 2;
  void clear_change();
  ::PROTOBUF_NAMESPACE_ID::int32 change() const;
  void set_change(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_change() const;
  void _internal_set_change(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 value = 3;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.ProsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 change_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCNoticeHallProsChange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCNoticeHallProsChange) */ {
 public:
  inline SCNoticeHallProsChange() : SCNoticeHallProsChange(nullptr) {}
  virtual ~SCNoticeHallProsChange();

  SCNoticeHallProsChange(const SCNoticeHallProsChange& from);
  SCNoticeHallProsChange(SCNoticeHallProsChange&& from) noexcept
    : SCNoticeHallProsChange() {
    *this = ::std::move(from);
  }

  inline SCNoticeHallProsChange& operator=(const SCNoticeHallProsChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCNoticeHallProsChange& operator=(SCNoticeHallProsChange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCNoticeHallProsChange& default_instance();

  static inline const SCNoticeHallProsChange* internal_default_instance() {
    return reinterpret_cast<const SCNoticeHallProsChange*>(
               &_SCNoticeHallProsChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(SCNoticeHallProsChange& a, SCNoticeHallProsChange& b) {
    a.Swap(&b);
  }
  inline void Swap(SCNoticeHallProsChange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCNoticeHallProsChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCNoticeHallProsChange* New() const final {
    return CreateMaybeMessage<SCNoticeHallProsChange>(nullptr);
  }

  SCNoticeHallProsChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCNoticeHallProsChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCNoticeHallProsChange& from);
  void MergeFrom(const SCNoticeHallProsChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCNoticeHallProsChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCNoticeHallProsChange";
  }
  protected:
  explicit SCNoticeHallProsChange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProsListFieldNumber = 2,
    kChairFieldNumber = 1,
  };
  // repeated .PlaneWar.ProsInfo prosList = 2;
  int proslist_size() const;
  private:
  int _internal_proslist_size() const;
  public:
  void clear_proslist();
  ::PlaneWar::ProsInfo* mutable_proslist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ProsInfo >*
      mutable_proslist();
  private:
  const ::PlaneWar::ProsInfo& _internal_proslist(int index) const;
  ::PlaneWar::ProsInfo* _internal_add_proslist();
  public:
  const ::PlaneWar::ProsInfo& proslist(int index) const;
  ::PlaneWar::ProsInfo* add_proslist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ProsInfo >&
      proslist() const;

  // int32 chair = 1;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCNoticeHallProsChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ProsInfo > proslist_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class TimingMonster PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.TimingMonster) */ {
 public:
  inline TimingMonster() : TimingMonster(nullptr) {}
  virtual ~TimingMonster();

  TimingMonster(const TimingMonster& from);
  TimingMonster(TimingMonster&& from) noexcept
    : TimingMonster() {
    *this = ::std::move(from);
  }

  inline TimingMonster& operator=(const TimingMonster& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimingMonster& operator=(TimingMonster&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimingMonster& default_instance();

  static inline const TimingMonster* internal_default_instance() {
    return reinterpret_cast<const TimingMonster*>(
               &_TimingMonster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(TimingMonster& a, TimingMonster& b) {
    a.Swap(&b);
  }
  inline void Swap(TimingMonster* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimingMonster* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimingMonster* New() const final {
    return CreateMaybeMessage<TimingMonster>(nullptr);
  }

  TimingMonster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimingMonster>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimingMonster& from);
  void MergeFrom(const TimingMonster& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimingMonster* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.TimingMonster";
  }
  protected:
  explicit TimingMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // int32 sec = 1;
  void clear_sec();
  ::PROTOBUF_NAMESPACE_ID::int32 sec() const;
  void set_sec(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sec() const;
  void _internal_set_sec(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.TimingMonster)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 sec_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCNoticeTimingMonster PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCNoticeTimingMonster) */ {
 public:
  inline SCNoticeTimingMonster() : SCNoticeTimingMonster(nullptr) {}
  virtual ~SCNoticeTimingMonster();

  SCNoticeTimingMonster(const SCNoticeTimingMonster& from);
  SCNoticeTimingMonster(SCNoticeTimingMonster&& from) noexcept
    : SCNoticeTimingMonster() {
    *this = ::std::move(from);
  }

  inline SCNoticeTimingMonster& operator=(const SCNoticeTimingMonster& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCNoticeTimingMonster& operator=(SCNoticeTimingMonster&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCNoticeTimingMonster& default_instance();

  static inline const SCNoticeTimingMonster* internal_default_instance() {
    return reinterpret_cast<const SCNoticeTimingMonster*>(
               &_SCNoticeTimingMonster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(SCNoticeTimingMonster& a, SCNoticeTimingMonster& b) {
    a.Swap(&b);
  }
  inline void Swap(SCNoticeTimingMonster* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCNoticeTimingMonster* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCNoticeTimingMonster* New() const final {
    return CreateMaybeMessage<SCNoticeTimingMonster>(nullptr);
  }

  SCNoticeTimingMonster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCNoticeTimingMonster>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCNoticeTimingMonster& from);
  void MergeFrom(const SCNoticeTimingMonster& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCNoticeTimingMonster* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCNoticeTimingMonster";
  }
  protected:
  explicit SCNoticeTimingMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonsterListFieldNumber = 1,
  };
  // repeated .PlaneWar.TimingMonster monster_list = 1;
  int monster_list_size() const;
  private:
  int _internal_monster_list_size() const;
  public:
  void clear_monster_list();
  ::PlaneWar::TimingMonster* mutable_monster_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::TimingMonster >*
      mutable_monster_list();
  private:
  const ::PlaneWar::TimingMonster& _internal_monster_list(int index) const;
  ::PlaneWar::TimingMonster* _internal_add_monster_list();
  public:
  const ::PlaneWar::TimingMonster& monster_list(int index) const;
  ::PlaneWar::TimingMonster* add_monster_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::TimingMonster >&
      monster_list() const;

  // @@protoc_insertion_point(class_scope:PlaneWar.SCNoticeTimingMonster)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::TimingMonster > monster_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSPiggyBankInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSPiggyBankInfo) */ {
 public:
  inline CSPiggyBankInfo() : CSPiggyBankInfo(nullptr) {}
  virtual ~CSPiggyBankInfo();

  CSPiggyBankInfo(const CSPiggyBankInfo& from);
  CSPiggyBankInfo(CSPiggyBankInfo&& from) noexcept
    : CSPiggyBankInfo() {
    *this = ::std::move(from);
  }

  inline CSPiggyBankInfo& operator=(const CSPiggyBankInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSPiggyBankInfo& operator=(CSPiggyBankInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSPiggyBankInfo& default_instance();

  static inline const CSPiggyBankInfo* internal_default_instance() {
    return reinterpret_cast<const CSPiggyBankInfo*>(
               &_CSPiggyBankInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(CSPiggyBankInfo& a, CSPiggyBankInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSPiggyBankInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSPiggyBankInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSPiggyBankInfo* New() const final {
    return CreateMaybeMessage<CSPiggyBankInfo>(nullptr);
  }

  CSPiggyBankInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSPiggyBankInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSPiggyBankInfo& from);
  void MergeFrom(const CSPiggyBankInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSPiggyBankInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSPiggyBankInfo";
  }
  protected:
  explicit CSPiggyBankInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsOpenFieldNumber = 1,
  };
  // bool isOpen = 1;
  void clear_isopen();
  bool isopen() const;
  void set_isopen(bool value);
  private:
  bool _internal_isopen() const;
  void _internal_set_isopen(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSPiggyBankInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool isopen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCPiggyBankInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCPiggyBankInfo) */ {
 public:
  inline SCPiggyBankInfo() : SCPiggyBankInfo(nullptr) {}
  virtual ~SCPiggyBankInfo();

  SCPiggyBankInfo(const SCPiggyBankInfo& from);
  SCPiggyBankInfo(SCPiggyBankInfo&& from) noexcept
    : SCPiggyBankInfo() {
    *this = ::std::move(from);
  }

  inline SCPiggyBankInfo& operator=(const SCPiggyBankInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPiggyBankInfo& operator=(SCPiggyBankInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPiggyBankInfo& default_instance();

  static inline const SCPiggyBankInfo* internal_default_instance() {
    return reinterpret_cast<const SCPiggyBankInfo*>(
               &_SCPiggyBankInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(SCPiggyBankInfo& a, SCPiggyBankInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPiggyBankInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPiggyBankInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPiggyBankInfo* New() const final {
    return CreateMaybeMessage<SCPiggyBankInfo>(nullptr);
  }

  SCPiggyBankInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPiggyBankInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPiggyBankInfo& from);
  void MergeFrom(const SCPiggyBankInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPiggyBankInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCPiggyBankInfo";
  }
  protected:
  explicit SCPiggyBankInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPiggyInfoFieldNumber = 3,
    kChairFieldNumber = 1,
    kIsOpenFieldNumber = 2,
  };
  // .PlaneWar.PiggyInfo piggyInfo = 3;
  bool has_piggyinfo() const;
  private:
  bool _internal_has_piggyinfo() const;
  public:
  void clear_piggyinfo();
  const ::PlaneWar::PiggyInfo& piggyinfo() const;
  ::PlaneWar::PiggyInfo* release_piggyinfo();
  ::PlaneWar::PiggyInfo* mutable_piggyinfo();
  void set_allocated_piggyinfo(::PlaneWar::PiggyInfo* piggyinfo);
  private:
  const ::PlaneWar::PiggyInfo& _internal_piggyinfo() const;
  ::PlaneWar::PiggyInfo* _internal_mutable_piggyinfo();
  public:
  void unsafe_arena_set_allocated_piggyinfo(
      ::PlaneWar::PiggyInfo* piggyinfo);
  ::PlaneWar::PiggyInfo* unsafe_arena_release_piggyinfo();

  // int32 chair = 1;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isOpen = 2;
  void clear_isopen();
  bool isopen() const;
  void set_isopen(bool value);
  private:
  bool _internal_isopen() const;
  void _internal_set_isopen(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCPiggyBankInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::PiggyInfo* piggyinfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  bool isopen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class PiggyReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.PiggyReward) */ {
 public:
  inline PiggyReward() : PiggyReward(nullptr) {}
  virtual ~PiggyReward();

  PiggyReward(const PiggyReward& from);
  PiggyReward(PiggyReward&& from) noexcept
    : PiggyReward() {
    *this = ::std::move(from);
  }

  inline PiggyReward& operator=(const PiggyReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiggyReward& operator=(PiggyReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PiggyReward& default_instance();

  static inline const PiggyReward* internal_default_instance() {
    return reinterpret_cast<const PiggyReward*>(
               &_PiggyReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(PiggyReward& a, PiggyReward& b) {
    a.Swap(&b);
  }
  inline void Swap(PiggyReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiggyReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PiggyReward* New() const final {
    return CreateMaybeMessage<PiggyReward>(nullptr);
  }

  PiggyReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PiggyReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PiggyReward& from);
  void MergeFrom(const PiggyReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiggyReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.PiggyReward";
  }
  protected:
  explicit PiggyReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kRewardFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reward = 2;
  void clear_reward();
  ::PROTOBUF_NAMESPACE_ID::int32 reward() const;
  void set_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reward() const;
  void _internal_set_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.PiggyReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 reward_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSOpenPiggyBank PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSOpenPiggyBank) */ {
 public:
  inline CSOpenPiggyBank() : CSOpenPiggyBank(nullptr) {}
  virtual ~CSOpenPiggyBank();

  CSOpenPiggyBank(const CSOpenPiggyBank& from);
  CSOpenPiggyBank(CSOpenPiggyBank&& from) noexcept
    : CSOpenPiggyBank() {
    *this = ::std::move(from);
  }

  inline CSOpenPiggyBank& operator=(const CSOpenPiggyBank& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOpenPiggyBank& operator=(CSOpenPiggyBank&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSOpenPiggyBank& default_instance();

  static inline const CSOpenPiggyBank* internal_default_instance() {
    return reinterpret_cast<const CSOpenPiggyBank*>(
               &_CSOpenPiggyBank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(CSOpenPiggyBank& a, CSOpenPiggyBank& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOpenPiggyBank* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOpenPiggyBank* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSOpenPiggyBank* New() const final {
    return CreateMaybeMessage<CSOpenPiggyBank>(nullptr);
  }

  CSOpenPiggyBank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSOpenPiggyBank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSOpenPiggyBank& from);
  void MergeFrom(const CSOpenPiggyBank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOpenPiggyBank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSOpenPiggyBank";
  }
  protected:
  explicit CSOpenPiggyBank(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.CSOpenPiggyBank)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCOpenPiggyBank PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCOpenPiggyBank) */ {
 public:
  inline SCOpenPiggyBank() : SCOpenPiggyBank(nullptr) {}
  virtual ~SCOpenPiggyBank();

  SCOpenPiggyBank(const SCOpenPiggyBank& from);
  SCOpenPiggyBank(SCOpenPiggyBank&& from) noexcept
    : SCOpenPiggyBank() {
    *this = ::std::move(from);
  }

  inline SCOpenPiggyBank& operator=(const SCOpenPiggyBank& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCOpenPiggyBank& operator=(SCOpenPiggyBank&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCOpenPiggyBank& default_instance();

  static inline const SCOpenPiggyBank* internal_default_instance() {
    return reinterpret_cast<const SCOpenPiggyBank*>(
               &_SCOpenPiggyBank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(SCOpenPiggyBank& a, SCOpenPiggyBank& b) {
    a.Swap(&b);
  }
  inline void Swap(SCOpenPiggyBank* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCOpenPiggyBank* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCOpenPiggyBank* New() const final {
    return CreateMaybeMessage<SCOpenPiggyBank>(nullptr);
  }

  SCOpenPiggyBank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCOpenPiggyBank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCOpenPiggyBank& from);
  void MergeFrom(const SCOpenPiggyBank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCOpenPiggyBank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCOpenPiggyBank";
  }
  protected:
  explicit SCOpenPiggyBank(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardListFieldNumber = 2,
    kChairFieldNumber = 1,
    kCurMoneyFieldNumber = 3,
  };
  // repeated .PlaneWar.PiggyReward rewardList = 2;
  int rewardlist_size() const;
  private:
  int _internal_rewardlist_size() const;
  public:
  void clear_rewardlist();
  ::PlaneWar::PiggyReward* mutable_rewardlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PiggyReward >*
      mutable_rewardlist();
  private:
  const ::PlaneWar::PiggyReward& _internal_rewardlist(int index) const;
  ::PlaneWar::PiggyReward* _internal_add_rewardlist();
  public:
  const ::PlaneWar::PiggyReward& rewardlist(int index) const;
  ::PlaneWar::PiggyReward* add_rewardlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PiggyReward >&
      rewardlist() const;

  // int32 chair = 1;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 curMoney = 3;
  void clear_curmoney();
  ::PROTOBUF_NAMESPACE_ID::int32 curmoney() const;
  void set_curmoney(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curmoney() const;
  void _internal_set_curmoney(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCOpenPiggyBank)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PiggyReward > rewardlist_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  ::PROTOBUF_NAMESPACE_ID::int32 curmoney_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSPiggyBankOpenFinish PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSPiggyBankOpenFinish) */ {
 public:
  inline CSPiggyBankOpenFinish() : CSPiggyBankOpenFinish(nullptr) {}
  virtual ~CSPiggyBankOpenFinish();

  CSPiggyBankOpenFinish(const CSPiggyBankOpenFinish& from);
  CSPiggyBankOpenFinish(CSPiggyBankOpenFinish&& from) noexcept
    : CSPiggyBankOpenFinish() {
    *this = ::std::move(from);
  }

  inline CSPiggyBankOpenFinish& operator=(const CSPiggyBankOpenFinish& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSPiggyBankOpenFinish& operator=(CSPiggyBankOpenFinish&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSPiggyBankOpenFinish& default_instance();

  static inline const CSPiggyBankOpenFinish* internal_default_instance() {
    return reinterpret_cast<const CSPiggyBankOpenFinish*>(
               &_CSPiggyBankOpenFinish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(CSPiggyBankOpenFinish& a, CSPiggyBankOpenFinish& b) {
    a.Swap(&b);
  }
  inline void Swap(CSPiggyBankOpenFinish* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSPiggyBankOpenFinish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSPiggyBankOpenFinish* New() const final {
    return CreateMaybeMessage<CSPiggyBankOpenFinish>(nullptr);
  }

  CSPiggyBankOpenFinish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSPiggyBankOpenFinish>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSPiggyBankOpenFinish& from);
  void MergeFrom(const CSPiggyBankOpenFinish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSPiggyBankOpenFinish* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSPiggyBankOpenFinish";
  }
  protected:
  explicit CSPiggyBankOpenFinish(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.CSPiggyBankOpenFinish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCPiggyBankOpenFinish PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCPiggyBankOpenFinish) */ {
 public:
  inline SCPiggyBankOpenFinish() : SCPiggyBankOpenFinish(nullptr) {}
  virtual ~SCPiggyBankOpenFinish();

  SCPiggyBankOpenFinish(const SCPiggyBankOpenFinish& from);
  SCPiggyBankOpenFinish(SCPiggyBankOpenFinish&& from) noexcept
    : SCPiggyBankOpenFinish() {
    *this = ::std::move(from);
  }

  inline SCPiggyBankOpenFinish& operator=(const SCPiggyBankOpenFinish& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPiggyBankOpenFinish& operator=(SCPiggyBankOpenFinish&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPiggyBankOpenFinish& default_instance();

  static inline const SCPiggyBankOpenFinish* internal_default_instance() {
    return reinterpret_cast<const SCPiggyBankOpenFinish*>(
               &_SCPiggyBankOpenFinish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(SCPiggyBankOpenFinish& a, SCPiggyBankOpenFinish& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPiggyBankOpenFinish* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPiggyBankOpenFinish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPiggyBankOpenFinish* New() const final {
    return CreateMaybeMessage<SCPiggyBankOpenFinish>(nullptr);
  }

  SCPiggyBankOpenFinish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPiggyBankOpenFinish>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPiggyBankOpenFinish& from);
  void MergeFrom(const SCPiggyBankOpenFinish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPiggyBankOpenFinish* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCPiggyBankOpenFinish";
  }
  protected:
  explicit SCPiggyBankOpenFinish(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairFieldNumber = 1,
  };
  // int32 chair = 1;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCPiggyBankOpenFinish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCPiggyBankChangeNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCPiggyBankChangeNotify) */ {
 public:
  inline SCPiggyBankChangeNotify() : SCPiggyBankChangeNotify(nullptr) {}
  virtual ~SCPiggyBankChangeNotify();

  SCPiggyBankChangeNotify(const SCPiggyBankChangeNotify& from);
  SCPiggyBankChangeNotify(SCPiggyBankChangeNotify&& from) noexcept
    : SCPiggyBankChangeNotify() {
    *this = ::std::move(from);
  }

  inline SCPiggyBankChangeNotify& operator=(const SCPiggyBankChangeNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPiggyBankChangeNotify& operator=(SCPiggyBankChangeNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPiggyBankChangeNotify& default_instance();

  static inline const SCPiggyBankChangeNotify* internal_default_instance() {
    return reinterpret_cast<const SCPiggyBankChangeNotify*>(
               &_SCPiggyBankChangeNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(SCPiggyBankChangeNotify& a, SCPiggyBankChangeNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPiggyBankChangeNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPiggyBankChangeNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPiggyBankChangeNotify* New() const final {
    return CreateMaybeMessage<SCPiggyBankChangeNotify>(nullptr);
  }

  SCPiggyBankChangeNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPiggyBankChangeNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPiggyBankChangeNotify& from);
  void MergeFrom(const SCPiggyBankChangeNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPiggyBankChangeNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCPiggyBankChangeNotify";
  }
  protected:
  explicit SCPiggyBankChangeNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPiggyInfoFieldNumber = 1,
  };
  // .PlaneWar.PiggyInfo piggyInfo = 1;
  bool has_piggyinfo() const;
  private:
  bool _internal_has_piggyinfo() const;
  public:
  void clear_piggyinfo();
  const ::PlaneWar::PiggyInfo& piggyinfo() const;
  ::PlaneWar::PiggyInfo* release_piggyinfo();
  ::PlaneWar::PiggyInfo* mutable_piggyinfo();
  void set_allocated_piggyinfo(::PlaneWar::PiggyInfo* piggyinfo);
  private:
  const ::PlaneWar::PiggyInfo& _internal_piggyinfo() const;
  ::PlaneWar::PiggyInfo* _internal_mutable_piggyinfo();
  public:
  void unsafe_arena_set_allocated_piggyinfo(
      ::PlaneWar::PiggyInfo* piggyinfo);
  ::PlaneWar::PiggyInfo* unsafe_arena_release_piggyinfo();

  // @@protoc_insertion_point(class_scope:PlaneWar.SCPiggyBankChangeNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::PiggyInfo* piggyinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSSetPersonalPoolEnable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSSetPersonalPoolEnable) */ {
 public:
  inline CSSetPersonalPoolEnable() : CSSetPersonalPoolEnable(nullptr) {}
  virtual ~CSSetPersonalPoolEnable();

  CSSetPersonalPoolEnable(const CSSetPersonalPoolEnable& from);
  CSSetPersonalPoolEnable(CSSetPersonalPoolEnable&& from) noexcept
    : CSSetPersonalPoolEnable() {
    *this = ::std::move(from);
  }

  inline CSSetPersonalPoolEnable& operator=(const CSSetPersonalPoolEnable& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSetPersonalPoolEnable& operator=(CSSetPersonalPoolEnable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSetPersonalPoolEnable& default_instance();

  static inline const CSSetPersonalPoolEnable* internal_default_instance() {
    return reinterpret_cast<const CSSetPersonalPoolEnable*>(
               &_CSSetPersonalPoolEnable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(CSSetPersonalPoolEnable& a, CSSetPersonalPoolEnable& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSetPersonalPoolEnable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSetPersonalPoolEnable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSetPersonalPoolEnable* New() const final {
    return CreateMaybeMessage<CSSetPersonalPoolEnable>(nullptr);
  }

  CSSetPersonalPoolEnable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSetPersonalPoolEnable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSetPersonalPoolEnable& from);
  void MergeFrom(const CSSetPersonalPoolEnable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSetPersonalPoolEnable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSSetPersonalPoolEnable";
  }
  protected:
  explicit CSSetPersonalPoolEnable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableFieldNumber = 1,
  };
  // bool enable = 1;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSSetPersonalPoolEnable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCSetPersonalPoolEnable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCSetPersonalPoolEnable) */ {
 public:
  inline SCSetPersonalPoolEnable() : SCSetPersonalPoolEnable(nullptr) {}
  virtual ~SCSetPersonalPoolEnable();

  SCSetPersonalPoolEnable(const SCSetPersonalPoolEnable& from);
  SCSetPersonalPoolEnable(SCSetPersonalPoolEnable&& from) noexcept
    : SCSetPersonalPoolEnable() {
    *this = ::std::move(from);
  }

  inline SCSetPersonalPoolEnable& operator=(const SCSetPersonalPoolEnable& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSetPersonalPoolEnable& operator=(SCSetPersonalPoolEnable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSetPersonalPoolEnable& default_instance();

  static inline const SCSetPersonalPoolEnable* internal_default_instance() {
    return reinterpret_cast<const SCSetPersonalPoolEnable*>(
               &_SCSetPersonalPoolEnable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(SCSetPersonalPoolEnable& a, SCSetPersonalPoolEnable& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSetPersonalPoolEnable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSetPersonalPoolEnable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSetPersonalPoolEnable* New() const final {
    return CreateMaybeMessage<SCSetPersonalPoolEnable>(nullptr);
  }

  SCSetPersonalPoolEnable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSetPersonalPoolEnable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSetPersonalPoolEnable& from);
  void MergeFrom(const SCSetPersonalPoolEnable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSetPersonalPoolEnable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCSetPersonalPoolEnable";
  }
  protected:
  explicit SCSetPersonalPoolEnable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableFieldNumber = 1,
  };
  // bool enable = 1;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCSetPersonalPoolEnable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSPersonalPoolInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSPersonalPoolInfo) */ {
 public:
  inline CSPersonalPoolInfo() : CSPersonalPoolInfo(nullptr) {}
  virtual ~CSPersonalPoolInfo();

  CSPersonalPoolInfo(const CSPersonalPoolInfo& from);
  CSPersonalPoolInfo(CSPersonalPoolInfo&& from) noexcept
    : CSPersonalPoolInfo() {
    *this = ::std::move(from);
  }

  inline CSPersonalPoolInfo& operator=(const CSPersonalPoolInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSPersonalPoolInfo& operator=(CSPersonalPoolInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSPersonalPoolInfo& default_instance();

  static inline const CSPersonalPoolInfo* internal_default_instance() {
    return reinterpret_cast<const CSPersonalPoolInfo*>(
               &_CSPersonalPoolInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(CSPersonalPoolInfo& a, CSPersonalPoolInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSPersonalPoolInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSPersonalPoolInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSPersonalPoolInfo* New() const final {
    return CreateMaybeMessage<CSPersonalPoolInfo>(nullptr);
  }

  CSPersonalPoolInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSPersonalPoolInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSPersonalPoolInfo& from);
  void MergeFrom(const CSPersonalPoolInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSPersonalPoolInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSPersonalPoolInfo";
  }
  protected:
  explicit CSPersonalPoolInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsOpenFieldNumber = 1,
  };
  // bool isOpen = 1;
  void clear_isopen();
  bool isopen() const;
  void set_isopen(bool value);
  private:
  bool _internal_isopen() const;
  void _internal_set_isopen(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSPersonalPoolInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool isopen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class PersonalPoolReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.PersonalPoolReward) */ {
 public:
  inline PersonalPoolReward() : PersonalPoolReward(nullptr) {}
  virtual ~PersonalPoolReward();

  PersonalPoolReward(const PersonalPoolReward& from);
  PersonalPoolReward(PersonalPoolReward&& from) noexcept
    : PersonalPoolReward() {
    *this = ::std::move(from);
  }

  inline PersonalPoolReward& operator=(const PersonalPoolReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersonalPoolReward& operator=(PersonalPoolReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PersonalPoolReward& default_instance();

  static inline const PersonalPoolReward* internal_default_instance() {
    return reinterpret_cast<const PersonalPoolReward*>(
               &_PersonalPoolReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(PersonalPoolReward& a, PersonalPoolReward& b) {
    a.Swap(&b);
  }
  inline void Swap(PersonalPoolReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PersonalPoolReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PersonalPoolReward* New() const final {
    return CreateMaybeMessage<PersonalPoolReward>(nullptr);
  }

  PersonalPoolReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PersonalPoolReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PersonalPoolReward& from);
  void MergeFrom(const PersonalPoolReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PersonalPoolReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.PersonalPoolReward";
  }
  protected:
  explicit PersonalPoolReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIDFieldNumber = 4,
    kNameFieldNumber = 5,
    kTypeFieldNumber = 1,
    kIdFieldNumber = 2,
    kNumFieldNumber = 3,
  };
  // string clientID = 4;
  void clear_clientid();
  const std::string& clientid() const;
  void set_clientid(const std::string& value);
  void set_clientid(std::string&& value);
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  std::string* mutable_clientid();
  std::string* release_clientid();
  void set_allocated_clientid(std::string* clientid);
  private:
  const std::string& _internal_clientid() const;
  void _internal_set_clientid(const std::string& value);
  std::string* _internal_mutable_clientid();
  public:

  // string name = 5;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 3;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.PersonalPoolReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class PersonalPoolLevelInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.PersonalPoolLevelInfo) */ {
 public:
  inline PersonalPoolLevelInfo() : PersonalPoolLevelInfo(nullptr) {}
  virtual ~PersonalPoolLevelInfo();

  PersonalPoolLevelInfo(const PersonalPoolLevelInfo& from);
  PersonalPoolLevelInfo(PersonalPoolLevelInfo&& from) noexcept
    : PersonalPoolLevelInfo() {
    *this = ::std::move(from);
  }

  inline PersonalPoolLevelInfo& operator=(const PersonalPoolLevelInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersonalPoolLevelInfo& operator=(PersonalPoolLevelInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PersonalPoolLevelInfo& default_instance();

  static inline const PersonalPoolLevelInfo* internal_default_instance() {
    return reinterpret_cast<const PersonalPoolLevelInfo*>(
               &_PersonalPoolLevelInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(PersonalPoolLevelInfo& a, PersonalPoolLevelInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PersonalPoolLevelInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PersonalPoolLevelInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PersonalPoolLevelInfo* New() const final {
    return CreateMaybeMessage<PersonalPoolLevelInfo>(nullptr);
  }

  PersonalPoolLevelInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PersonalPoolLevelInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PersonalPoolLevelInfo& from);
  void MergeFrom(const PersonalPoolLevelInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PersonalPoolLevelInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.PersonalPoolLevelInfo";
  }
  protected:
  explicit PersonalPoolLevelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardListFieldNumber = 3,
    kLevelFieldNumber = 1,
    kTargetValueFieldNumber = 2,
    kRewardFieldNumber = 4,
  };
  // repeated .PlaneWar.PersonalPoolReward rewardList = 3;
  int rewardlist_size() const;
  private:
  int _internal_rewardlist_size() const;
  public:
  void clear_rewardlist();
  ::PlaneWar::PersonalPoolReward* mutable_rewardlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PersonalPoolReward >*
      mutable_rewardlist();
  private:
  const ::PlaneWar::PersonalPoolReward& _internal_rewardlist(int index) const;
  ::PlaneWar::PersonalPoolReward* _internal_add_rewardlist();
  public:
  const ::PlaneWar::PersonalPoolReward& rewardlist(int index) const;
  ::PlaneWar::PersonalPoolReward* add_rewardlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PersonalPoolReward >&
      rewardlist() const;

  // int32 level = 1;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 targetValue = 2;
  void clear_targetvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 targetvalue() const;
  void set_targetvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_targetvalue() const;
  void _internal_set_targetvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool reward = 4;
  void clear_reward();
  bool reward() const;
  void set_reward(bool value);
  private:
  bool _internal_reward() const;
  void _internal_set_reward(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.PersonalPoolLevelInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PersonalPoolReward > rewardlist_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 targetvalue_;
  bool reward_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class PersonalPoolLuckyInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.PersonalPoolLuckyInfo) */ {
 public:
  inline PersonalPoolLuckyInfo() : PersonalPoolLuckyInfo(nullptr) {}
  virtual ~PersonalPoolLuckyInfo();

  PersonalPoolLuckyInfo(const PersonalPoolLuckyInfo& from);
  PersonalPoolLuckyInfo(PersonalPoolLuckyInfo&& from) noexcept
    : PersonalPoolLuckyInfo() {
    *this = ::std::move(from);
  }

  inline PersonalPoolLuckyInfo& operator=(const PersonalPoolLuckyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersonalPoolLuckyInfo& operator=(PersonalPoolLuckyInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PersonalPoolLuckyInfo& default_instance();

  static inline const PersonalPoolLuckyInfo* internal_default_instance() {
    return reinterpret_cast<const PersonalPoolLuckyInfo*>(
               &_PersonalPoolLuckyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(PersonalPoolLuckyInfo& a, PersonalPoolLuckyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PersonalPoolLuckyInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PersonalPoolLuckyInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PersonalPoolLuckyInfo* New() const final {
    return CreateMaybeMessage<PersonalPoolLuckyInfo>(nullptr);
  }

  PersonalPoolLuckyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PersonalPoolLuckyInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PersonalPoolLuckyInfo& from);
  void MergeFrom(const PersonalPoolLuckyInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PersonalPoolLuckyInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.PersonalPoolLuckyInfo";
  }
  protected:
  explicit PersonalPoolLuckyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalFieldNumber = 1,
    kCostFieldNumber = 2,
  };
  // int32 total = 1;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cost = 2;
  void clear_cost();
  ::PROTOBUF_NAMESPACE_ID::int32 cost() const;
  void set_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cost() const;
  void _internal_set_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.PersonalPoolLuckyInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_;
  ::PROTOBUF_NAMESPACE_ID::int32 cost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCPersonalPoolInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCPersonalPoolInfo) */ {
 public:
  inline SCPersonalPoolInfo() : SCPersonalPoolInfo(nullptr) {}
  virtual ~SCPersonalPoolInfo();

  SCPersonalPoolInfo(const SCPersonalPoolInfo& from);
  SCPersonalPoolInfo(SCPersonalPoolInfo&& from) noexcept
    : SCPersonalPoolInfo() {
    *this = ::std::move(from);
  }

  inline SCPersonalPoolInfo& operator=(const SCPersonalPoolInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPersonalPoolInfo& operator=(SCPersonalPoolInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPersonalPoolInfo& default_instance();

  static inline const SCPersonalPoolInfo* internal_default_instance() {
    return reinterpret_cast<const SCPersonalPoolInfo*>(
               &_SCPersonalPoolInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(SCPersonalPoolInfo& a, SCPersonalPoolInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPersonalPoolInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPersonalPoolInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPersonalPoolInfo* New() const final {
    return CreateMaybeMessage<SCPersonalPoolInfo>(nullptr);
  }

  SCPersonalPoolInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPersonalPoolInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPersonalPoolInfo& from);
  void MergeFrom(const SCPersonalPoolInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPersonalPoolInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCPersonalPoolInfo";
  }
  protected:
  explicit SCPersonalPoolInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelListFieldNumber = 7,
    kLuckyInfoFieldNumber = 8,
    kChairFieldNumber = 1,
    kIsOpenFieldNumber = 2,
    kEnableFieldNumber = 3,
    kPoolValueFieldNumber = 4,
    kMaxValueFieldNumber = 5,
    kCurLevelFieldNumber = 6,
  };
  // repeated .PlaneWar.PersonalPoolLevelInfo levelList = 7;
  int levellist_size() const;
  private:
  int _internal_levellist_size() const;
  public:
  void clear_levellist();
  ::PlaneWar::PersonalPoolLevelInfo* mutable_levellist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PersonalPoolLevelInfo >*
      mutable_levellist();
  private:
  const ::PlaneWar::PersonalPoolLevelInfo& _internal_levellist(int index) const;
  ::PlaneWar::PersonalPoolLevelInfo* _internal_add_levellist();
  public:
  const ::PlaneWar::PersonalPoolLevelInfo& levellist(int index) const;
  ::PlaneWar::PersonalPoolLevelInfo* add_levellist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PersonalPoolLevelInfo >&
      levellist() const;

  // .PlaneWar.PersonalPoolLuckyInfo luckyInfo = 8;
  bool has_luckyinfo() const;
  private:
  bool _internal_has_luckyinfo() const;
  public:
  void clear_luckyinfo();
  const ::PlaneWar::PersonalPoolLuckyInfo& luckyinfo() const;
  ::PlaneWar::PersonalPoolLuckyInfo* release_luckyinfo();
  ::PlaneWar::PersonalPoolLuckyInfo* mutable_luckyinfo();
  void set_allocated_luckyinfo(::PlaneWar::PersonalPoolLuckyInfo* luckyinfo);
  private:
  const ::PlaneWar::PersonalPoolLuckyInfo& _internal_luckyinfo() const;
  ::PlaneWar::PersonalPoolLuckyInfo* _internal_mutable_luckyinfo();
  public:
  void unsafe_arena_set_allocated_luckyinfo(
      ::PlaneWar::PersonalPoolLuckyInfo* luckyinfo);
  ::PlaneWar::PersonalPoolLuckyInfo* unsafe_arena_release_luckyinfo();

  // int32 chair = 1;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isOpen = 2;
  void clear_isopen();
  bool isopen() const;
  void set_isopen(bool value);
  private:
  bool _internal_isopen() const;
  void _internal_set_isopen(bool value);
  public:

  // bool enable = 3;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // int32 poolValue = 4;
  void clear_poolvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 poolvalue() const;
  void set_poolvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_poolvalue() const;
  void _internal_set_poolvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxValue = 5;
  void clear_maxvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 maxvalue() const;
  void set_maxvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxvalue() const;
  void _internal_set_maxvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 curLevel = 6;
  void clear_curlevel();
  ::PROTOBUF_NAMESPACE_ID::int32 curlevel() const;
  void set_curlevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curlevel() const;
  void _internal_set_curlevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCPersonalPoolInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PersonalPoolLevelInfo > levellist_;
  ::PlaneWar::PersonalPoolLuckyInfo* luckyinfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  bool isopen_;
  bool enable_;
  ::PROTOBUF_NAMESPACE_ID::int32 poolvalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxvalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 curlevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSDrawPersonalPool PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSDrawPersonalPool) */ {
 public:
  inline CSDrawPersonalPool() : CSDrawPersonalPool(nullptr) {}
  virtual ~CSDrawPersonalPool();

  CSDrawPersonalPool(const CSDrawPersonalPool& from);
  CSDrawPersonalPool(CSDrawPersonalPool&& from) noexcept
    : CSDrawPersonalPool() {
    *this = ::std::move(from);
  }

  inline CSDrawPersonalPool& operator=(const CSDrawPersonalPool& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDrawPersonalPool& operator=(CSDrawPersonalPool&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSDrawPersonalPool& default_instance();

  static inline const CSDrawPersonalPool* internal_default_instance() {
    return reinterpret_cast<const CSDrawPersonalPool*>(
               &_CSDrawPersonalPool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(CSDrawPersonalPool& a, CSDrawPersonalPool& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDrawPersonalPool* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDrawPersonalPool* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSDrawPersonalPool* New() const final {
    return CreateMaybeMessage<CSDrawPersonalPool>(nullptr);
  }

  CSDrawPersonalPool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSDrawPersonalPool>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSDrawPersonalPool& from);
  void MergeFrom(const CSDrawPersonalPool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDrawPersonalPool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSDrawPersonalPool";
  }
  protected:
  explicit CSDrawPersonalPool(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardFieldNumber = 2,
    kMissRewardFieldNumber = 3,
    kChairFieldNumber = 1,
    kUpgradeCostFieldNumber = 5,
    kCurMoneyFieldNumber = 4,
  };
  // .PlaneWar.PersonalPoolReward reward = 2;
  bool has_reward() const;
  private:
  bool _internal_has_reward() const;
  public:
  void clear_reward();
  const ::PlaneWar::PersonalPoolReward& reward() const;
  ::PlaneWar::PersonalPoolReward* release_reward();
  ::PlaneWar::PersonalPoolReward* mutable_reward();
  void set_allocated_reward(::PlaneWar::PersonalPoolReward* reward);
  private:
  const ::PlaneWar::PersonalPoolReward& _internal_reward() const;
  ::PlaneWar::PersonalPoolReward* _internal_mutable_reward();
  public:
  void unsafe_arena_set_allocated_reward(
      ::PlaneWar::PersonalPoolReward* reward);
  ::PlaneWar::PersonalPoolReward* unsafe_arena_release_reward();

  // .PlaneWar.PersonalPoolReward missReward = 3;
  bool has_missreward() const;
  private:
  bool _internal_has_missreward() const;
  public:
  void clear_missreward();
  const ::PlaneWar::PersonalPoolReward& missreward() const;
  ::PlaneWar::PersonalPoolReward* release_missreward();
  ::PlaneWar::PersonalPoolReward* mutable_missreward();
  void set_allocated_missreward(::PlaneWar::PersonalPoolReward* missreward);
  private:
  const ::PlaneWar::PersonalPoolReward& _internal_missreward() const;
  ::PlaneWar::PersonalPoolReward* _internal_mutable_missreward();
  public:
  void unsafe_arena_set_allocated_missreward(
      ::PlaneWar::PersonalPoolReward* missreward);
  ::PlaneWar::PersonalPoolReward* unsafe_arena_release_missreward();

  // int32 chair = 1;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 upgradeCost = 5;
  void clear_upgradecost();
  ::PROTOBUF_NAMESPACE_ID::int32 upgradecost() const;
  void set_upgradecost(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_upgradecost() const;
  void _internal_set_upgradecost(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 curMoney = 4;
  void clear_curmoney();
  ::PROTOBUF_NAMESPACE_ID::int64 curmoney() const;
  void set_curmoney(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_curmoney() const;
  void _internal_set_curmoney(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSDrawPersonalPool)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::PersonalPoolReward* reward_;
  ::PlaneWar::PersonalPoolReward* missreward_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  ::PROTOBUF_NAMESPACE_ID::int32 upgradecost_;
  ::PROTOBUF_NAMESPACE_ID::int64 curmoney_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSUpgradePoolReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSUpgradePoolReward) */ {
 public:
  inline CSUpgradePoolReward() : CSUpgradePoolReward(nullptr) {}
  virtual ~CSUpgradePoolReward();

  CSUpgradePoolReward(const CSUpgradePoolReward& from);
  CSUpgradePoolReward(CSUpgradePoolReward&& from) noexcept
    : CSUpgradePoolReward() {
    *this = ::std::move(from);
  }

  inline CSUpgradePoolReward& operator=(const CSUpgradePoolReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSUpgradePoolReward& operator=(CSUpgradePoolReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSUpgradePoolReward& default_instance();

  static inline const CSUpgradePoolReward* internal_default_instance() {
    return reinterpret_cast<const CSUpgradePoolReward*>(
               &_CSUpgradePoolReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(CSUpgradePoolReward& a, CSUpgradePoolReward& b) {
    a.Swap(&b);
  }
  inline void Swap(CSUpgradePoolReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSUpgradePoolReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSUpgradePoolReward* New() const final {
    return CreateMaybeMessage<CSUpgradePoolReward>(nullptr);
  }

  CSUpgradePoolReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSUpgradePoolReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSUpgradePoolReward& from);
  void MergeFrom(const CSUpgradePoolReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSUpgradePoolReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSUpgradePoolReward";
  }
  protected:
  explicit CSUpgradePoolReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsUpgradeFieldNumber = 1,
  };
  // bool isUpgrade = 1;
  void clear_isupgrade();
  bool isupgrade() const;
  void set_isupgrade(bool value);
  private:
  bool _internal_isupgrade() const;
  void _internal_set_isupgrade(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSUpgradePoolReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool isupgrade_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCUpgradePoolReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCUpgradePoolReward) */ {
 public:
  inline SCUpgradePoolReward() : SCUpgradePoolReward(nullptr) {}
  virtual ~SCUpgradePoolReward();

  SCUpgradePoolReward(const SCUpgradePoolReward& from);
  SCUpgradePoolReward(SCUpgradePoolReward&& from) noexcept
    : SCUpgradePoolReward() {
    *this = ::std::move(from);
  }

  inline SCUpgradePoolReward& operator=(const SCUpgradePoolReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUpgradePoolReward& operator=(SCUpgradePoolReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUpgradePoolReward& default_instance();

  static inline const SCUpgradePoolReward* internal_default_instance() {
    return reinterpret_cast<const SCUpgradePoolReward*>(
               &_SCUpgradePoolReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(SCUpgradePoolReward& a, SCUpgradePoolReward& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUpgradePoolReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUpgradePoolReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUpgradePoolReward* New() const final {
    return CreateMaybeMessage<SCUpgradePoolReward>(nullptr);
  }

  SCUpgradePoolReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUpgradePoolReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUpgradePoolReward& from);
  void MergeFrom(const SCUpgradePoolReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUpgradePoolReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCUpgradePoolReward";
  }
  protected:
  explicit SCUpgradePoolReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseRewardFieldNumber = 4,
    kExtraRewardFieldNumber = 5,
    kChairFieldNumber = 1,
    kResultFieldNumber = 2,
    kCurMoneyFieldNumber = 3,
    kAddLuckyValueFieldNumber = 6,
  };
  // .PlaneWar.PersonalPoolReward baseReward = 4;
  bool has_basereward() const;
  private:
  bool _internal_has_basereward() const;
  public:
  void clear_basereward();
  const ::PlaneWar::PersonalPoolReward& basereward() const;
  ::PlaneWar::PersonalPoolReward* release_basereward();
  ::PlaneWar::PersonalPoolReward* mutable_basereward();
  void set_allocated_basereward(::PlaneWar::PersonalPoolReward* basereward);
  private:
  const ::PlaneWar::PersonalPoolReward& _internal_basereward() const;
  ::PlaneWar::PersonalPoolReward* _internal_mutable_basereward();
  public:
  void unsafe_arena_set_allocated_basereward(
      ::PlaneWar::PersonalPoolReward* basereward);
  ::PlaneWar::PersonalPoolReward* unsafe_arena_release_basereward();

  // .PlaneWar.PersonalPoolReward extraReward = 5;
  bool has_extrareward() const;
  private:
  bool _internal_has_extrareward() const;
  public:
  void clear_extrareward();
  const ::PlaneWar::PersonalPoolReward& extrareward() const;
  ::PlaneWar::PersonalPoolReward* release_extrareward();
  ::PlaneWar::PersonalPoolReward* mutable_extrareward();
  void set_allocated_extrareward(::PlaneWar::PersonalPoolReward* extrareward);
  private:
  const ::PlaneWar::PersonalPoolReward& _internal_extrareward() const;
  ::PlaneWar::PersonalPoolReward* _internal_mutable_extrareward();
  public:
  void unsafe_arena_set_allocated_extrareward(
      ::PlaneWar::PersonalPoolReward* extrareward);
  ::PlaneWar::PersonalPoolReward* unsafe_arena_release_extrareward();

  // int32 chair = 1;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 result = 2;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 curMoney = 3;
  void clear_curmoney();
  ::PROTOBUF_NAMESPACE_ID::int64 curmoney() const;
  void set_curmoney(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_curmoney() const;
  void _internal_set_curmoney(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 addLuckyValue = 6;
  void clear_addluckyvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 addluckyvalue() const;
  void set_addluckyvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_addluckyvalue() const;
  void _internal_set_addluckyvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCUpgradePoolReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::PersonalPoolReward* basereward_;
  ::PlaneWar::PersonalPoolReward* extrareward_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  ::PROTOBUF_NAMESPACE_ID::int64 curmoney_;
  ::PROTOBUF_NAMESPACE_ID::int32 addluckyvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSGetPoolLuckyReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSGetPoolLuckyReward) */ {
 public:
  inline CSGetPoolLuckyReward() : CSGetPoolLuckyReward(nullptr) {}
  virtual ~CSGetPoolLuckyReward();

  CSGetPoolLuckyReward(const CSGetPoolLuckyReward& from);
  CSGetPoolLuckyReward(CSGetPoolLuckyReward&& from) noexcept
    : CSGetPoolLuckyReward() {
    *this = ::std::move(from);
  }

  inline CSGetPoolLuckyReward& operator=(const CSGetPoolLuckyReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGetPoolLuckyReward& operator=(CSGetPoolLuckyReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSGetPoolLuckyReward& default_instance();

  static inline const CSGetPoolLuckyReward* internal_default_instance() {
    return reinterpret_cast<const CSGetPoolLuckyReward*>(
               &_CSGetPoolLuckyReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(CSGetPoolLuckyReward& a, CSGetPoolLuckyReward& b) {
    a.Swap(&b);
  }
  inline void Swap(CSGetPoolLuckyReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGetPoolLuckyReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSGetPoolLuckyReward* New() const final {
    return CreateMaybeMessage<CSGetPoolLuckyReward>(nullptr);
  }

  CSGetPoolLuckyReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSGetPoolLuckyReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSGetPoolLuckyReward& from);
  void MergeFrom(const CSGetPoolLuckyReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSGetPoolLuckyReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSGetPoolLuckyReward";
  }
  protected:
  explicit CSGetPoolLuckyReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.CSGetPoolLuckyReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCGetPoolLuckyReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCGetPoolLuckyReward) */ {
 public:
  inline SCGetPoolLuckyReward() : SCGetPoolLuckyReward(nullptr) {}
  virtual ~SCGetPoolLuckyReward();

  SCGetPoolLuckyReward(const SCGetPoolLuckyReward& from);
  SCGetPoolLuckyReward(SCGetPoolLuckyReward&& from) noexcept
    : SCGetPoolLuckyReward() {
    *this = ::std::move(from);
  }

  inline SCGetPoolLuckyReward& operator=(const SCGetPoolLuckyReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGetPoolLuckyReward& operator=(SCGetPoolLuckyReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGetPoolLuckyReward& default_instance();

  static inline const SCGetPoolLuckyReward* internal_default_instance() {
    return reinterpret_cast<const SCGetPoolLuckyReward*>(
               &_SCGetPoolLuckyReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(SCGetPoolLuckyReward& a, SCGetPoolLuckyReward& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGetPoolLuckyReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGetPoolLuckyReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGetPoolLuckyReward* New() const final {
    return CreateMaybeMessage<SCGetPoolLuckyReward>(nullptr);
  }

  SCGetPoolLuckyReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGetPoolLuckyReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGetPoolLuckyReward& from);
  void MergeFrom(const SCGetPoolLuckyReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGetPoolLuckyReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCGetPoolLuckyReward";
  }
  protected:
  explicit SCGetPoolLuckyReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardListFieldNumber = 4,
    kCurMoneyFieldNumber = 2,
    kChairFieldNumber = 1,
    kCostFieldNumber = 3,
  };
  // repeated .PlaneWar.CommonPropInfo rewardList = 4;
  int rewardlist_size() const;
  private:
  int _internal_rewardlist_size() const;
  public:
  void clear_rewardlist();
  ::PlaneWar::CommonPropInfo* mutable_rewardlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::CommonPropInfo >*
      mutable_rewardlist();
  private:
  const ::PlaneWar::CommonPropInfo& _internal_rewardlist(int index) const;
  ::PlaneWar::CommonPropInfo* _internal_add_rewardlist();
  public:
  const ::PlaneWar::CommonPropInfo& rewardlist(int index) const;
  ::PlaneWar::CommonPropInfo* add_rewardlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::CommonPropInfo >&
      rewardlist() const;

  // int64 curMoney = 2;
  void clear_curmoney();
  ::PROTOBUF_NAMESPACE_ID::int64 curmoney() const;
  void set_curmoney(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_curmoney() const;
  void _internal_set_curmoney(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 chair = 1;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cost = 3;
  void clear_cost();
  ::PROTOBUF_NAMESPACE_ID::int32 cost() const;
  void set_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cost() const;
  void _internal_set_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCGetPoolLuckyReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::CommonPropInfo > rewardlist_;
  ::PROTOBUF_NAMESPACE_ID::int64 curmoney_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  ::PROTOBUF_NAMESPACE_ID::int32 cost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCPersonalPoolChangeNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCPersonalPoolChangeNotify) */ {
 public:
  inline SCPersonalPoolChangeNotify() : SCPersonalPoolChangeNotify(nullptr) {}
  virtual ~SCPersonalPoolChangeNotify();

  SCPersonalPoolChangeNotify(const SCPersonalPoolChangeNotify& from);
  SCPersonalPoolChangeNotify(SCPersonalPoolChangeNotify&& from) noexcept
    : SCPersonalPoolChangeNotify() {
    *this = ::std::move(from);
  }

  inline SCPersonalPoolChangeNotify& operator=(const SCPersonalPoolChangeNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPersonalPoolChangeNotify& operator=(SCPersonalPoolChangeNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPersonalPoolChangeNotify& default_instance();

  static inline const SCPersonalPoolChangeNotify* internal_default_instance() {
    return reinterpret_cast<const SCPersonalPoolChangeNotify*>(
               &_SCPersonalPoolChangeNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(SCPersonalPoolChangeNotify& a, SCPersonalPoolChangeNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPersonalPoolChangeNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPersonalPoolChangeNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPersonalPoolChangeNotify* New() const final {
    return CreateMaybeMessage<SCPersonalPoolChangeNotify>(nullptr);
  }

  SCPersonalPoolChangeNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPersonalPoolChangeNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPersonalPoolChangeNotify& from);
  void MergeFrom(const SCPersonalPoolChangeNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPersonalPoolChangeNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCPersonalPoolChangeNotify";
  }
  protected:
  explicit SCPersonalPoolChangeNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableFieldNumber = 1,
    kCurValueFieldNumber = 2,
    kCurLevelFieldNumber = 3,
    kMaxValueFieldNumber = 4,
    kTargetValueFieldNumber = 5,
  };
  // bool enable = 1;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // int32 curValue = 2;
  void clear_curvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 curvalue() const;
  void set_curvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curvalue() const;
  void _internal_set_curvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 curLevel = 3;
  void clear_curlevel();
  ::PROTOBUF_NAMESPACE_ID::int32 curlevel() const;
  void set_curlevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curlevel() const;
  void _internal_set_curlevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxValue = 4;
  void clear_maxvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 maxvalue() const;
  void set_maxvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxvalue() const;
  void _internal_set_maxvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 targetValue = 5;
  void clear_targetvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 targetvalue() const;
  void set_targetvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_targetvalue() const;
  void _internal_set_targetvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCPersonalPoolChangeNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool enable_;
  ::PROTOBUF_NAMESPACE_ID::int32 curvalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 curlevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxvalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 targetvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSUseMissile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSUseMissile) */ {
 public:
  inline CSUseMissile() : CSUseMissile(nullptr) {}
  virtual ~CSUseMissile();

  CSUseMissile(const CSUseMissile& from);
  CSUseMissile(CSUseMissile&& from) noexcept
    : CSUseMissile() {
    *this = ::std::move(from);
  }

  inline CSUseMissile& operator=(const CSUseMissile& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSUseMissile& operator=(CSUseMissile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSUseMissile& default_instance();

  static inline const CSUseMissile* internal_default_instance() {
    return reinterpret_cast<const CSUseMissile*>(
               &_CSUseMissile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(CSUseMissile& a, CSUseMissile& b) {
    a.Swap(&b);
  }
  inline void Swap(CSUseMissile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSUseMissile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSUseMissile* New() const final {
    return CreateMaybeMessage<CSUseMissile>(nullptr);
  }

  CSUseMissile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSUseMissile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSUseMissile& from);
  void MergeFrom(const CSUseMissile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSUseMissile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSUseMissile";
  }
  protected:
  explicit CSUseMissile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSUseMissile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCUseMissile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCUseMissile) */ {
 public:
  inline SCUseMissile() : SCUseMissile(nullptr) {}
  virtual ~SCUseMissile();

  SCUseMissile(const SCUseMissile& from);
  SCUseMissile(SCUseMissile&& from) noexcept
    : SCUseMissile() {
    *this = ::std::move(from);
  }

  inline SCUseMissile& operator=(const SCUseMissile& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUseMissile& operator=(SCUseMissile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUseMissile& default_instance();

  static inline const SCUseMissile* internal_default_instance() {
    return reinterpret_cast<const SCUseMissile*>(
               &_SCUseMissile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(SCUseMissile& a, SCUseMissile& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUseMissile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUseMissile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUseMissile* New() const final {
    return CreateMaybeMessage<SCUseMissile>(nullptr);
  }

  SCUseMissile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUseMissile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUseMissile& from);
  void MergeFrom(const SCUseMissile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUseMissile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCUseMissile";
  }
  protected:
  explicit SCUseMissile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairFieldNumber = 1,
    kIdFieldNumber = 2,
    kRewardFieldNumber = 3,
    kRemainNumFieldNumber = 4,
    kCurMoneyFieldNumber = 5,
  };
  // int32 chair = 1;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reward = 3;
  void clear_reward();
  ::PROTOBUF_NAMESPACE_ID::int32 reward() const;
  void set_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reward() const;
  void _internal_set_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 remainNum = 4;
  void clear_remainnum();
  ::PROTOBUF_NAMESPACE_ID::int32 remainnum() const;
  void set_remainnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_remainnum() const;
  void _internal_set_remainnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 curMoney = 5;
  void clear_curmoney();
  ::PROTOBUF_NAMESPACE_ID::int64 curmoney() const;
  void set_curmoney(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_curmoney() const;
  void _internal_set_curmoney(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCUseMissile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 reward_;
  ::PROTOBUF_NAMESPACE_ID::int32 remainnum_;
  ::PROTOBUF_NAMESPACE_ID::int64 curmoney_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSMonsterCall PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSMonsterCall) */ {
 public:
  inline CSMonsterCall() : CSMonsterCall(nullptr) {}
  virtual ~CSMonsterCall();

  CSMonsterCall(const CSMonsterCall& from);
  CSMonsterCall(CSMonsterCall&& from) noexcept
    : CSMonsterCall() {
    *this = ::std::move(from);
  }

  inline CSMonsterCall& operator=(const CSMonsterCall& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSMonsterCall& operator=(CSMonsterCall&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSMonsterCall& default_instance();

  static inline const CSMonsterCall* internal_default_instance() {
    return reinterpret_cast<const CSMonsterCall*>(
               &_CSMonsterCall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(CSMonsterCall& a, CSMonsterCall& b) {
    a.Swap(&b);
  }
  inline void Swap(CSMonsterCall* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSMonsterCall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSMonsterCall* New() const final {
    return CreateMaybeMessage<CSMonsterCall>(nullptr);
  }

  CSMonsterCall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSMonsterCall>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSMonsterCall& from);
  void MergeFrom(const CSMonsterCall& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSMonsterCall* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSMonsterCall";
  }
  protected:
  explicit CSMonsterCall(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.CSMonsterCall)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCMonsterCall PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCMonsterCall) */ {
 public:
  inline SCMonsterCall() : SCMonsterCall(nullptr) {}
  virtual ~SCMonsterCall();

  SCMonsterCall(const SCMonsterCall& from);
  SCMonsterCall(SCMonsterCall&& from) noexcept
    : SCMonsterCall() {
    *this = ::std::move(from);
  }

  inline SCMonsterCall& operator=(const SCMonsterCall& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCMonsterCall& operator=(SCMonsterCall&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCMonsterCall& default_instance();

  static inline const SCMonsterCall* internal_default_instance() {
    return reinterpret_cast<const SCMonsterCall*>(
               &_SCMonsterCall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(SCMonsterCall& a, SCMonsterCall& b) {
    a.Swap(&b);
  }
  inline void Swap(SCMonsterCall* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCMonsterCall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCMonsterCall* New() const final {
    return CreateMaybeMessage<SCMonsterCall>(nullptr);
  }

  SCMonsterCall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCMonsterCall>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCMonsterCall& from);
  void MergeFrom(const SCMonsterCall& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCMonsterCall* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCMonsterCall";
  }
  protected:
  explicit SCMonsterCall(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairFieldNumber = 1,
    kCountFieldNumber = 2,
    kCodeFieldNumber = 3,
  };
  // int32 chair = 1;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 code = 3;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCMonsterCall)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSClickStatic PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSClickStatic) */ {
 public:
  inline CSClickStatic() : CSClickStatic(nullptr) {}
  virtual ~CSClickStatic();

  CSClickStatic(const CSClickStatic& from);
  CSClickStatic(CSClickStatic&& from) noexcept
    : CSClickStatic() {
    *this = ::std::move(from);
  }

  inline CSClickStatic& operator=(const CSClickStatic& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSClickStatic& operator=(CSClickStatic&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSClickStatic& default_instance();

  static inline const CSClickStatic* internal_default_instance() {
    return reinterpret_cast<const CSClickStatic*>(
               &_CSClickStatic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(CSClickStatic& a, CSClickStatic& b) {
    a.Swap(&b);
  }
  inline void Swap(CSClickStatic* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSClickStatic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSClickStatic* New() const final {
    return CreateMaybeMessage<CSClickStatic>(nullptr);
  }

  CSClickStatic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSClickStatic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSClickStatic& from);
  void MergeFrom(const CSClickStatic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSClickStatic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSClickStatic";
  }
  protected:
  explicit CSClickStatic(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSClickStatic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCClickStatic PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCClickStatic) */ {
 public:
  inline SCClickStatic() : SCClickStatic(nullptr) {}
  virtual ~SCClickStatic();

  SCClickStatic(const SCClickStatic& from);
  SCClickStatic(SCClickStatic&& from) noexcept
    : SCClickStatic() {
    *this = ::std::move(from);
  }

  inline SCClickStatic& operator=(const SCClickStatic& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCClickStatic& operator=(SCClickStatic&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCClickStatic& default_instance();

  static inline const SCClickStatic* internal_default_instance() {
    return reinterpret_cast<const SCClickStatic*>(
               &_SCClickStatic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(SCClickStatic& a, SCClickStatic& b) {
    a.Swap(&b);
  }
  inline void Swap(SCClickStatic* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCClickStatic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCClickStatic* New() const final {
    return CreateMaybeMessage<SCClickStatic>(nullptr);
  }

  SCClickStatic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCClickStatic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCClickStatic& from);
  void MergeFrom(const SCClickStatic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCClickStatic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCClickStatic";
  }
  protected:
  explicit SCClickStatic(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.SCClickStatic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class RankInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.RankInfo) */ {
 public:
  inline RankInfo() : RankInfo(nullptr) {}
  virtual ~RankInfo();

  RankInfo(const RankInfo& from);
  RankInfo(RankInfo&& from) noexcept
    : RankInfo() {
    *this = ::std::move(from);
  }

  inline RankInfo& operator=(const RankInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankInfo& operator=(RankInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankInfo& default_instance();

  static inline const RankInfo* internal_default_instance() {
    return reinterpret_cast<const RankInfo*>(
               &_RankInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(RankInfo& a, RankInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RankInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RankInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankInfo* New() const final {
    return CreateMaybeMessage<RankInfo>(nullptr);
  }

  RankInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankInfo& from);
  void MergeFrom(const RankInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.RankInfo";
  }
  protected:
  explicit RankInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickFieldNumber = 3,
    kIconFieldNumber = 4,
    kPlayerIdFieldNumber = 1,
    kPointFieldNumber = 2,
  };
  // string nick = 3;
  void clear_nick();
  const std::string& nick() const;
  void set_nick(const std::string& value);
  void set_nick(std::string&& value);
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  std::string* mutable_nick();
  std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // string icon = 4;
  void clear_icon();
  const std::string& icon() const;
  void set_icon(const std::string& value);
  void set_icon(std::string&& value);
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  std::string* mutable_icon();
  std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // int32 playerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 point = 2;
  void clear_point();
  ::PROTOBUF_NAMESPACE_ID::int32 point() const;
  void set_point(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_point() const;
  void _internal_set_point(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.RankInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class MyRankInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.MyRankInfo) */ {
 public:
  inline MyRankInfo() : MyRankInfo(nullptr) {}
  virtual ~MyRankInfo();

  MyRankInfo(const MyRankInfo& from);
  MyRankInfo(MyRankInfo&& from) noexcept
    : MyRankInfo() {
    *this = ::std::move(from);
  }

  inline MyRankInfo& operator=(const MyRankInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MyRankInfo& operator=(MyRankInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MyRankInfo& default_instance();

  static inline const MyRankInfo* internal_default_instance() {
    return reinterpret_cast<const MyRankInfo*>(
               &_MyRankInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  friend void swap(MyRankInfo& a, MyRankInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MyRankInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MyRankInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MyRankInfo* New() const final {
    return CreateMaybeMessage<MyRankInfo>(nullptr);
  }

  MyRankInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MyRankInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MyRankInfo& from);
  void MergeFrom(const MyRankInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MyRankInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.MyRankInfo";
  }
  protected:
  explicit MyRankInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickFieldNumber = 3,
    kIconFieldNumber = 4,
    kRankFieldNumber = 1,
    kPointFieldNumber = 2,
  };
  // string nick = 3;
  void clear_nick();
  const std::string& nick() const;
  void set_nick(const std::string& value);
  void set_nick(std::string&& value);
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  std::string* mutable_nick();
  std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // string icon = 4;
  void clear_icon();
  const std::string& icon() const;
  void set_icon(const std::string& value);
  void set_icon(std::string&& value);
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  std::string* mutable_icon();
  std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // int32 rank = 1;
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::int32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 point = 2;
  void clear_point();
  ::PROTOBUF_NAMESPACE_ID::int32 point() const;
  void set_point(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_point() const;
  void _internal_set_point(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.MyRankInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::int32 rank_;
  ::PROTOBUF_NAMESPACE_ID::int32 point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSRankList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSRankList) */ {
 public:
  inline CSRankList() : CSRankList(nullptr) {}
  virtual ~CSRankList();

  CSRankList(const CSRankList& from);
  CSRankList(CSRankList&& from) noexcept
    : CSRankList() {
    *this = ::std::move(from);
  }

  inline CSRankList& operator=(const CSRankList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRankList& operator=(CSRankList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSRankList& default_instance();

  static inline const CSRankList* internal_default_instance() {
    return reinterpret_cast<const CSRankList*>(
               &_CSRankList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  friend void swap(CSRankList& a, CSRankList& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRankList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRankList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSRankList* New() const final {
    return CreateMaybeMessage<CSRankList>(nullptr);
  }

  CSRankList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSRankList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSRankList& from);
  void MergeFrom(const CSRankList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRankList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSRankList";
  }
  protected:
  explicit CSRankList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSRankList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCRankList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCRankList) */ {
 public:
  inline SCRankList() : SCRankList(nullptr) {}
  virtual ~SCRankList();

  SCRankList(const SCRankList& from);
  SCRankList(SCRankList&& from) noexcept
    : SCRankList() {
    *this = ::std::move(from);
  }

  inline SCRankList& operator=(const SCRankList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCRankList& operator=(SCRankList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCRankList& default_instance();

  static inline const SCRankList* internal_default_instance() {
    return reinterpret_cast<const SCRankList*>(
               &_SCRankList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  friend void swap(SCRankList& a, SCRankList& b) {
    a.Swap(&b);
  }
  inline void Swap(SCRankList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCRankList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCRankList* New() const final {
    return CreateMaybeMessage<SCRankList>(nullptr);
  }

  SCRankList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCRankList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCRankList& from);
  void MergeFrom(const SCRankList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCRankList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCRankList";
  }
  protected:
  explicit SCRankList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRankFieldNumber = 2,
    kMyRankFieldNumber = 3,
    kLastTopFieldNumber = 4,
    kTypeFieldNumber = 1,
  };
  // .PlaneWar.RankInfo rank = 2;
  bool has_rank() const;
  private:
  bool _internal_has_rank() const;
  public:
  void clear_rank();
  const ::PlaneWar::RankInfo& rank() const;
  ::PlaneWar::RankInfo* release_rank();
  ::PlaneWar::RankInfo* mutable_rank();
  void set_allocated_rank(::PlaneWar::RankInfo* rank);
  private:
  const ::PlaneWar::RankInfo& _internal_rank() const;
  ::PlaneWar::RankInfo* _internal_mutable_rank();
  public:
  void unsafe_arena_set_allocated_rank(
      ::PlaneWar::RankInfo* rank);
  ::PlaneWar::RankInfo* unsafe_arena_release_rank();

  // .PlaneWar.MyRankInfo myRank = 3;
  bool has_myrank() const;
  private:
  bool _internal_has_myrank() const;
  public:
  void clear_myrank();
  const ::PlaneWar::MyRankInfo& myrank() const;
  ::PlaneWar::MyRankInfo* release_myrank();
  ::PlaneWar::MyRankInfo* mutable_myrank();
  void set_allocated_myrank(::PlaneWar::MyRankInfo* myrank);
  private:
  const ::PlaneWar::MyRankInfo& _internal_myrank() const;
  ::PlaneWar::MyRankInfo* _internal_mutable_myrank();
  public:
  void unsafe_arena_set_allocated_myrank(
      ::PlaneWar::MyRankInfo* myrank);
  ::PlaneWar::MyRankInfo* unsafe_arena_release_myrank();

  // .PlaneWar.RankInfo lastTop = 4;
  bool has_lasttop() const;
  private:
  bool _internal_has_lasttop() const;
  public:
  void clear_lasttop();
  const ::PlaneWar::RankInfo& lasttop() const;
  ::PlaneWar::RankInfo* release_lasttop();
  ::PlaneWar::RankInfo* mutable_lasttop();
  void set_allocated_lasttop(::PlaneWar::RankInfo* lasttop);
  private:
  const ::PlaneWar::RankInfo& _internal_lasttop() const;
  ::PlaneWar::RankInfo* _internal_mutable_lasttop();
  public:
  void unsafe_arena_set_allocated_lasttop(
      ::PlaneWar::RankInfo* lasttop);
  ::PlaneWar::RankInfo* unsafe_arena_release_lasttop();

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCRankList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::RankInfo* rank_;
  ::PlaneWar::MyRankInfo* myrank_;
  ::PlaneWar::RankInfo* lasttop_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class TitleInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.TitleInfo) */ {
 public:
  inline TitleInfo() : TitleInfo(nullptr) {}
  virtual ~TitleInfo();

  TitleInfo(const TitleInfo& from);
  TitleInfo(TitleInfo&& from) noexcept
    : TitleInfo() {
    *this = ::std::move(from);
  }

  inline TitleInfo& operator=(const TitleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TitleInfo& operator=(TitleInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TitleInfo& default_instance();

  static inline const TitleInfo* internal_default_instance() {
    return reinterpret_cast<const TitleInfo*>(
               &_TitleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  friend void swap(TitleInfo& a, TitleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TitleInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TitleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TitleInfo* New() const final {
    return CreateMaybeMessage<TitleInfo>(nullptr);
  }

  TitleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TitleInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TitleInfo& from);
  void MergeFrom(const TitleInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TitleInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.TitleInfo";
  }
  protected:
  explicit TitleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kIdFieldNumber = 1,
    kStatusFieldNumber = 2,
    kEndTimeFieldNumber = 4,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 2;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 endTime = 4;
  void clear_endtime();
  ::PROTOBUF_NAMESPACE_ID::int32 endtime() const;
  void set_endtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_endtime() const;
  void _internal_set_endtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.TitleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 endtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCTitleList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCTitleList) */ {
 public:
  inline SCTitleList() : SCTitleList(nullptr) {}
  virtual ~SCTitleList();

  SCTitleList(const SCTitleList& from);
  SCTitleList(SCTitleList&& from) noexcept
    : SCTitleList() {
    *this = ::std::move(from);
  }

  inline SCTitleList& operator=(const SCTitleList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCTitleList& operator=(SCTitleList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCTitleList& default_instance();

  static inline const SCTitleList* internal_default_instance() {
    return reinterpret_cast<const SCTitleList*>(
               &_SCTitleList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  friend void swap(SCTitleList& a, SCTitleList& b) {
    a.Swap(&b);
  }
  inline void Swap(SCTitleList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCTitleList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCTitleList* New() const final {
    return CreateMaybeMessage<SCTitleList>(nullptr);
  }

  SCTitleList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCTitleList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCTitleList& from);
  void MergeFrom(const SCTitleList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCTitleList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCTitleList";
  }
  protected:
  explicit SCTitleList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleListFieldNumber = 1,
    kSelectedTitleIdFieldNumber = 2,
  };
  // repeated .PlaneWar.TitleInfo titleList = 1;
  int titlelist_size() const;
  private:
  int _internal_titlelist_size() const;
  public:
  void clear_titlelist();
  ::PlaneWar::TitleInfo* mutable_titlelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::TitleInfo >*
      mutable_titlelist();
  private:
  const ::PlaneWar::TitleInfo& _internal_titlelist(int index) const;
  ::PlaneWar::TitleInfo* _internal_add_titlelist();
  public:
  const ::PlaneWar::TitleInfo& titlelist(int index) const;
  ::PlaneWar::TitleInfo* add_titlelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::TitleInfo >&
      titlelist() const;

  // int32 selectedTitleId = 2;
  void clear_selectedtitleid();
  ::PROTOBUF_NAMESPACE_ID::int32 selectedtitleid() const;
  void set_selectedtitleid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_selectedtitleid() const;
  void _internal_set_selectedtitleid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCTitleList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::TitleInfo > titlelist_;
  ::PROTOBUF_NAMESPACE_ID::int32 selectedtitleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSSelectTitle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSSelectTitle) */ {
 public:
  inline CSSelectTitle() : CSSelectTitle(nullptr) {}
  virtual ~CSSelectTitle();

  CSSelectTitle(const CSSelectTitle& from);
  CSSelectTitle(CSSelectTitle&& from) noexcept
    : CSSelectTitle() {
    *this = ::std::move(from);
  }

  inline CSSelectTitle& operator=(const CSSelectTitle& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSelectTitle& operator=(CSSelectTitle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSelectTitle& default_instance();

  static inline const CSSelectTitle* internal_default_instance() {
    return reinterpret_cast<const CSSelectTitle*>(
               &_CSSelectTitle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  friend void swap(CSSelectTitle& a, CSSelectTitle& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSelectTitle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSelectTitle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSelectTitle* New() const final {
    return CreateMaybeMessage<CSSelectTitle>(nullptr);
  }

  CSSelectTitle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSelectTitle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSelectTitle& from);
  void MergeFrom(const CSSelectTitle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSelectTitle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSSelectTitle";
  }
  protected:
  explicit CSSelectTitle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSSelectTitle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCSelectTitle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCSelectTitle) */ {
 public:
  inline SCSelectTitle() : SCSelectTitle(nullptr) {}
  virtual ~SCSelectTitle();

  SCSelectTitle(const SCSelectTitle& from);
  SCSelectTitle(SCSelectTitle&& from) noexcept
    : SCSelectTitle() {
    *this = ::std::move(from);
  }

  inline SCSelectTitle& operator=(const SCSelectTitle& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSelectTitle& operator=(SCSelectTitle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSelectTitle& default_instance();

  static inline const SCSelectTitle* internal_default_instance() {
    return reinterpret_cast<const SCSelectTitle*>(
               &_SCSelectTitle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  friend void swap(SCSelectTitle& a, SCSelectTitle& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSelectTitle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSelectTitle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSelectTitle* New() const final {
    return CreateMaybeMessage<SCSelectTitle>(nullptr);
  }

  SCSelectTitle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSelectTitle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSelectTitle& from);
  void MergeFrom(const SCSelectTitle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSelectTitle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCSelectTitle";
  }
  protected:
  explicit SCSelectTitle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kChairFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 chair = 2;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCSelectTitle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCTitleActiveNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCTitleActiveNotify) */ {
 public:
  inline SCTitleActiveNotify() : SCTitleActiveNotify(nullptr) {}
  virtual ~SCTitleActiveNotify();

  SCTitleActiveNotify(const SCTitleActiveNotify& from);
  SCTitleActiveNotify(SCTitleActiveNotify&& from) noexcept
    : SCTitleActiveNotify() {
    *this = ::std::move(from);
  }

  inline SCTitleActiveNotify& operator=(const SCTitleActiveNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCTitleActiveNotify& operator=(SCTitleActiveNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCTitleActiveNotify& default_instance();

  static inline const SCTitleActiveNotify* internal_default_instance() {
    return reinterpret_cast<const SCTitleActiveNotify*>(
               &_SCTitleActiveNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  friend void swap(SCTitleActiveNotify& a, SCTitleActiveNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(SCTitleActiveNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCTitleActiveNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCTitleActiveNotify* New() const final {
    return CreateMaybeMessage<SCTitleActiveNotify>(nullptr);
  }

  SCTitleActiveNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCTitleActiveNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCTitleActiveNotify& from);
  void MergeFrom(const SCTitleActiveNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCTitleActiveNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCTitleActiveNotify";
  }
  protected:
  explicit SCTitleActiveNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCTitleActiveNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCRoomInfoChangeNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCRoomInfoChangeNotify) */ {
 public:
  inline SCRoomInfoChangeNotify() : SCRoomInfoChangeNotify(nullptr) {}
  virtual ~SCRoomInfoChangeNotify();

  SCRoomInfoChangeNotify(const SCRoomInfoChangeNotify& from);
  SCRoomInfoChangeNotify(SCRoomInfoChangeNotify&& from) noexcept
    : SCRoomInfoChangeNotify() {
    *this = ::std::move(from);
  }

  inline SCRoomInfoChangeNotify& operator=(const SCRoomInfoChangeNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCRoomInfoChangeNotify& operator=(SCRoomInfoChangeNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCRoomInfoChangeNotify& default_instance();

  static inline const SCRoomInfoChangeNotify* internal_default_instance() {
    return reinterpret_cast<const SCRoomInfoChangeNotify*>(
               &_SCRoomInfoChangeNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  friend void swap(SCRoomInfoChangeNotify& a, SCRoomInfoChangeNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(SCRoomInfoChangeNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCRoomInfoChangeNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCRoomInfoChangeNotify* New() const final {
    return CreateMaybeMessage<SCRoomInfoChangeNotify>(nullptr);
  }

  SCRoomInfoChangeNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCRoomInfoChangeNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCRoomInfoChangeNotify& from);
  void MergeFrom(const SCRoomInfoChangeNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCRoomInfoChangeNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCRoomInfoChangeNotify";
  }
  protected:
  explicit SCRoomInfoChangeNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomInfoFieldNumber = 1,
  };
  // .PlaneWar.RoomInfo roomInfo = 1;
  bool has_roominfo() const;
  private:
  bool _internal_has_roominfo() const;
  public:
  void clear_roominfo();
  const ::PlaneWar::RoomInfo& roominfo() const;
  ::PlaneWar::RoomInfo* release_roominfo();
  ::PlaneWar::RoomInfo* mutable_roominfo();
  void set_allocated_roominfo(::PlaneWar::RoomInfo* roominfo);
  private:
  const ::PlaneWar::RoomInfo& _internal_roominfo() const;
  ::PlaneWar::RoomInfo* _internal_mutable_roominfo();
  public:
  void unsafe_arena_set_allocated_roominfo(
      ::PlaneWar::RoomInfo* roominfo);
  ::PlaneWar::RoomInfo* unsafe_arena_release_roominfo();

  // @@protoc_insertion_point(class_scope:PlaneWar.SCRoomInfoChangeNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::RoomInfo* roominfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSMatchBrief PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSMatchBrief) */ {
 public:
  inline CSMatchBrief() : CSMatchBrief(nullptr) {}
  virtual ~CSMatchBrief();

  CSMatchBrief(const CSMatchBrief& from);
  CSMatchBrief(CSMatchBrief&& from) noexcept
    : CSMatchBrief() {
    *this = ::std::move(from);
  }

  inline CSMatchBrief& operator=(const CSMatchBrief& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSMatchBrief& operator=(CSMatchBrief&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSMatchBrief& default_instance();

  static inline const CSMatchBrief* internal_default_instance() {
    return reinterpret_cast<const CSMatchBrief*>(
               &_CSMatchBrief_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  friend void swap(CSMatchBrief& a, CSMatchBrief& b) {
    a.Swap(&b);
  }
  inline void Swap(CSMatchBrief* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSMatchBrief* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSMatchBrief* New() const final {
    return CreateMaybeMessage<CSMatchBrief>(nullptr);
  }

  CSMatchBrief* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSMatchBrief>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSMatchBrief& from);
  void MergeFrom(const CSMatchBrief& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSMatchBrief* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSMatchBrief";
  }
  protected:
  explicit CSMatchBrief(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.CSMatchBrief)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCMatchBrief PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCMatchBrief) */ {
 public:
  inline SCMatchBrief() : SCMatchBrief(nullptr) {}
  virtual ~SCMatchBrief();

  SCMatchBrief(const SCMatchBrief& from);
  SCMatchBrief(SCMatchBrief&& from) noexcept
    : SCMatchBrief() {
    *this = ::std::move(from);
  }

  inline SCMatchBrief& operator=(const SCMatchBrief& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCMatchBrief& operator=(SCMatchBrief&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCMatchBrief& default_instance();

  static inline const SCMatchBrief* internal_default_instance() {
    return reinterpret_cast<const SCMatchBrief*>(
               &_SCMatchBrief_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  friend void swap(SCMatchBrief& a, SCMatchBrief& b) {
    a.Swap(&b);
  }
  inline void Swap(SCMatchBrief* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCMatchBrief* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCMatchBrief* New() const final {
    return CreateMaybeMessage<SCMatchBrief>(nullptr);
  }

  SCMatchBrief* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCMatchBrief>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCMatchBrief& from);
  void MergeFrom(const SCMatchBrief& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCMatchBrief* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCMatchBrief";
  }
  protected:
  explicit SCMatchBrief(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchNameFieldNumber = 3,
    kStatusFieldNumber = 1,
    kMatchTypeFieldNumber = 2,
    kCountDownFieldNumber = 4,
    kTotalNumFieldNumber = 5,
    kRewardNumFieldNumber = 6,
    kMyRankFieldNumber = 7,
    kMyPointFieldNumber = 8,
    kNextRankPointFieldNumber = 9,
  };
  // string matchName = 3;
  void clear_matchname();
  const std::string& matchname() const;
  void set_matchname(const std::string& value);
  void set_matchname(std::string&& value);
  void set_matchname(const char* value);
  void set_matchname(const char* value, size_t size);
  std::string* mutable_matchname();
  std::string* release_matchname();
  void set_allocated_matchname(std::string* matchname);
  private:
  const std::string& _internal_matchname() const;
  void _internal_set_matchname(const std::string& value);
  std::string* _internal_mutable_matchname();
  public:

  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 matchType = 2;
  void clear_matchtype();
  ::PROTOBUF_NAMESPACE_ID::int32 matchtype() const;
  void set_matchtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_matchtype() const;
  void _internal_set_matchtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 countDown = 4;
  void clear_countdown();
  ::PROTOBUF_NAMESPACE_ID::int32 countdown() const;
  void set_countdown(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_countdown() const;
  void _internal_set_countdown(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 totalNum = 5;
  void clear_totalnum();
  ::PROTOBUF_NAMESPACE_ID::int32 totalnum() const;
  void set_totalnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_totalnum() const;
  void _internal_set_totalnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rewardNum = 6;
  void clear_rewardnum();
  ::PROTOBUF_NAMESPACE_ID::int32 rewardnum() const;
  void set_rewardnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rewardnum() const;
  void _internal_set_rewardnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 myRank = 7;
  void clear_myrank();
  ::PROTOBUF_NAMESPACE_ID::int32 myrank() const;
  void set_myrank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_myrank() const;
  void _internal_set_myrank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 myPoint = 8;
  void clear_mypoint();
  ::PROTOBUF_NAMESPACE_ID::int32 mypoint() const;
  void set_mypoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mypoint() const;
  void _internal_set_mypoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nextRankPoint = 9;
  void clear_nextrankpoint();
  ::PROTOBUF_NAMESPACE_ID::int32 nextrankpoint() const;
  void set_nextrankpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nextrankpoint() const;
  void _internal_set_nextrankpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCMatchBrief)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matchname_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 matchtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 countdown_;
  ::PROTOBUF_NAMESPACE_ID::int32 totalnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 rewardnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 myrank_;
  ::PROTOBUF_NAMESPACE_ID::int32 mypoint_;
  ::PROTOBUF_NAMESPACE_ID::int32 nextrankpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSMatchDetail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSMatchDetail) */ {
 public:
  inline CSMatchDetail() : CSMatchDetail(nullptr) {}
  virtual ~CSMatchDetail();

  CSMatchDetail(const CSMatchDetail& from);
  CSMatchDetail(CSMatchDetail&& from) noexcept
    : CSMatchDetail() {
    *this = ::std::move(from);
  }

  inline CSMatchDetail& operator=(const CSMatchDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSMatchDetail& operator=(CSMatchDetail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSMatchDetail& default_instance();

  static inline const CSMatchDetail* internal_default_instance() {
    return reinterpret_cast<const CSMatchDetail*>(
               &_CSMatchDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    146;

  friend void swap(CSMatchDetail& a, CSMatchDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(CSMatchDetail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSMatchDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSMatchDetail* New() const final {
    return CreateMaybeMessage<CSMatchDetail>(nullptr);
  }

  CSMatchDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSMatchDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSMatchDetail& from);
  void MergeFrom(const CSMatchDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSMatchDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSMatchDetail";
  }
  protected:
  explicit CSMatchDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.CSMatchDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class MatchSubInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.MatchSubInfo) */ {
 public:
  inline MatchSubInfo() : MatchSubInfo(nullptr) {}
  virtual ~MatchSubInfo();

  MatchSubInfo(const MatchSubInfo& from);
  MatchSubInfo(MatchSubInfo&& from) noexcept
    : MatchSubInfo() {
    *this = ::std::move(from);
  }

  inline MatchSubInfo& operator=(const MatchSubInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchSubInfo& operator=(MatchSubInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatchSubInfo& default_instance();

  static inline const MatchSubInfo* internal_default_instance() {
    return reinterpret_cast<const MatchSubInfo*>(
               &_MatchSubInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    147;

  friend void swap(MatchSubInfo& a, MatchSubInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchSubInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchSubInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchSubInfo* New() const final {
    return CreateMaybeMessage<MatchSubInfo>(nullptr);
  }

  MatchSubInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchSubInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatchSubInfo& from);
  void MergeFrom(const MatchSubInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchSubInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.MatchSubInfo";
  }
  protected:
  explicit MatchSubInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubMatchNameFieldNumber = 2,
    kInMatchFieldNumber = 1,
    kJackpotFieldNumber = 3,
    kTotalNumFieldNumber = 4,
  };
  // string subMatchName = 2;
  void clear_submatchname();
  const std::string& submatchname() const;
  void set_submatchname(const std::string& value);
  void set_submatchname(std::string&& value);
  void set_submatchname(const char* value);
  void set_submatchname(const char* value, size_t size);
  std::string* mutable_submatchname();
  std::string* release_submatchname();
  void set_allocated_submatchname(std::string* submatchname);
  private:
  const std::string& _internal_submatchname() const;
  void _internal_set_submatchname(const std::string& value);
  std::string* _internal_mutable_submatchname();
  public:

  // bool inMatch = 1;
  void clear_inmatch();
  bool inmatch() const;
  void set_inmatch(bool value);
  private:
  bool _internal_inmatch() const;
  void _internal_set_inmatch(bool value);
  public:

  // int32 jackpot = 3;
  void clear_jackpot();
  ::PROTOBUF_NAMESPACE_ID::int32 jackpot() const;
  void set_jackpot(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_jackpot() const;
  void _internal_set_jackpot(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 totalNum = 4;
  void clear_totalnum();
  ::PROTOBUF_NAMESPACE_ID::int32 totalnum() const;
  void set_totalnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_totalnum() const;
  void _internal_set_totalnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.MatchSubInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr submatchname_;
  bool inmatch_;
  ::PROTOBUF_NAMESPACE_ID::int32 jackpot_;
  ::PROTOBUF_NAMESPACE_ID::int32 totalnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class MatchRewardItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.MatchRewardItem) */ {
 public:
  inline MatchRewardItem() : MatchRewardItem(nullptr) {}
  virtual ~MatchRewardItem();

  MatchRewardItem(const MatchRewardItem& from);
  MatchRewardItem(MatchRewardItem&& from) noexcept
    : MatchRewardItem() {
    *this = ::std::move(from);
  }

  inline MatchRewardItem& operator=(const MatchRewardItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchRewardItem& operator=(MatchRewardItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatchRewardItem& default_instance();

  static inline const MatchRewardItem* internal_default_instance() {
    return reinterpret_cast<const MatchRewardItem*>(
               &_MatchRewardItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    148;

  friend void swap(MatchRewardItem& a, MatchRewardItem& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchRewardItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchRewardItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchRewardItem* New() const final {
    return CreateMaybeMessage<MatchRewardItem>(nullptr);
  }

  MatchRewardItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchRewardItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatchRewardItem& from);
  void MergeFrom(const MatchRewardItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchRewardItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.MatchRewardItem";
  }
  protected:
  explicit MatchRewardItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.MatchRewardItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class MatchRankInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.MatchRankInfo) */ {
 public:
  inline MatchRankInfo() : MatchRankInfo(nullptr) {}
  virtual ~MatchRankInfo();

  MatchRankInfo(const MatchRankInfo& from);
  MatchRankInfo(MatchRankInfo&& from) noexcept
    : MatchRankInfo() {
    *this = ::std::move(from);
  }

  inline MatchRankInfo& operator=(const MatchRankInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchRankInfo& operator=(MatchRankInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatchRankInfo& default_instance();

  static inline const MatchRankInfo* internal_default_instance() {
    return reinterpret_cast<const MatchRankInfo*>(
               &_MatchRankInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    149;

  friend void swap(MatchRankInfo& a, MatchRankInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchRankInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchRankInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchRankInfo* New() const final {
    return CreateMaybeMessage<MatchRankInfo>(nullptr);
  }

  MatchRankInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchRankInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatchRankInfo& from);
  void MergeFrom(const MatchRankInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchRankInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.MatchRankInfo";
  }
  protected:
  explicit MatchRankInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickFieldNumber = 3,
    kIconFieldNumber = 4,
    kRewardListFieldNumber = 8,
    kPlayerIdFieldNumber = 1,
    kPointFieldNumber = 2,
    kRankFieldNumber = 5,
    kPointBonusFieldNumber = 6,
    kMoneyBonusFieldNumber = 7,
  };
  // string nick = 3;
  void clear_nick();
  const std::string& nick() const;
  void set_nick(const std::string& value);
  void set_nick(std::string&& value);
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  std::string* mutable_nick();
  std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // string icon = 4;
  void clear_icon();
  const std::string& icon() const;
  void set_icon(const std::string& value);
  void set_icon(std::string&& value);
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  std::string* mutable_icon();
  std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // .PlaneWar.MatchRewardItem rewardList = 8;
  bool has_rewardlist() const;
  private:
  bool _internal_has_rewardlist() const;
  public:
  void clear_rewardlist();
  const ::PlaneWar::MatchRewardItem& rewardlist() const;
  ::PlaneWar::MatchRewardItem* release_rewardlist();
  ::PlaneWar::MatchRewardItem* mutable_rewardlist();
  void set_allocated_rewardlist(::PlaneWar::MatchRewardItem* rewardlist);
  private:
  const ::PlaneWar::MatchRewardItem& _internal_rewardlist() const;
  ::PlaneWar::MatchRewardItem* _internal_mutable_rewardlist();
  public:
  void unsafe_arena_set_allocated_rewardlist(
      ::PlaneWar::MatchRewardItem* rewardlist);
  ::PlaneWar::MatchRewardItem* unsafe_arena_release_rewardlist();

  // int32 playerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 point = 2;
  void clear_point();
  ::PROTOBUF_NAMESPACE_ID::int32 point() const;
  void set_point(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_point() const;
  void _internal_set_point(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rank = 5;
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::int32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pointBonus = 6;
  void clear_pointbonus();
  ::PROTOBUF_NAMESPACE_ID::int32 pointbonus() const;
  void set_pointbonus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pointbonus() const;
  void _internal_set_pointbonus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 moneyBonus = 7;
  void clear_moneybonus();
  ::PROTOBUF_NAMESPACE_ID::int32 moneybonus() const;
  void set_moneybonus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_moneybonus() const;
  void _internal_set_moneybonus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.MatchRankInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PlaneWar::MatchRewardItem* rewardlist_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 point_;
  ::PROTOBUF_NAMESPACE_ID::int32 rank_;
  ::PROTOBUF_NAMESPACE_ID::int32 pointbonus_;
  ::PROTOBUF_NAMESPACE_ID::int32 moneybonus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class MatchTask PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.MatchTask) */ {
 public:
  inline MatchTask() : MatchTask(nullptr) {}
  virtual ~MatchTask();

  MatchTask(const MatchTask& from);
  MatchTask(MatchTask&& from) noexcept
    : MatchTask() {
    *this = ::std::move(from);
  }

  inline MatchTask& operator=(const MatchTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchTask& operator=(MatchTask&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatchTask& default_instance();

  static inline const MatchTask* internal_default_instance() {
    return reinterpret_cast<const MatchTask*>(
               &_MatchTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    150;

  friend void swap(MatchTask& a, MatchTask& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchTask* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchTask* New() const final {
    return CreateMaybeMessage<MatchTask>(nullptr);
  }

  MatchTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchTask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatchTask& from);
  void MergeFrom(const MatchTask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchTask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.MatchTask";
  }
  protected:
  explicit MatchTask(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kTargetFieldNumber = 2,
    kRewardFieldNumber = 3,
  };
  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 target = 2;
  void clear_target();
  ::PROTOBUF_NAMESPACE_ID::int32 target() const;
  void set_target(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_target() const;
  void _internal_set_target(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reward = 3;
  void clear_reward();
  ::PROTOBUF_NAMESPACE_ID::int32 reward() const;
  void set_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reward() const;
  void _internal_set_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.MatchTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_;
  ::PROTOBUF_NAMESPACE_ID::int32 reward_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCMatchDetail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCMatchDetail) */ {
 public:
  inline SCMatchDetail() : SCMatchDetail(nullptr) {}
  virtual ~SCMatchDetail();

  SCMatchDetail(const SCMatchDetail& from);
  SCMatchDetail(SCMatchDetail&& from) noexcept
    : SCMatchDetail() {
    *this = ::std::move(from);
  }

  inline SCMatchDetail& operator=(const SCMatchDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCMatchDetail& operator=(SCMatchDetail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCMatchDetail& default_instance();

  static inline const SCMatchDetail* internal_default_instance() {
    return reinterpret_cast<const SCMatchDetail*>(
               &_SCMatchDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    151;

  friend void swap(SCMatchDetail& a, SCMatchDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(SCMatchDetail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCMatchDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCMatchDetail* New() const final {
    return CreateMaybeMessage<SCMatchDetail>(nullptr);
  }

  SCMatchDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCMatchDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCMatchDetail& from);
  void MergeFrom(const SCMatchDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCMatchDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCMatchDetail";
  }
  protected:
  explicit SCMatchDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubInfoListFieldNumber = 1,
    kRankListFieldNumber = 2,
    kTipListFieldNumber = 4,
    kLuckyStageFieldNumber = 5,
    kTaskListFieldNumber = 6,
    kMyRankFieldNumber = 3,
  };
  // repeated .PlaneWar.MatchSubInfo subInfoList = 1;
  int subinfolist_size() const;
  private:
  int _internal_subinfolist_size() const;
  public:
  void clear_subinfolist();
  ::PlaneWar::MatchSubInfo* mutable_subinfolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MatchSubInfo >*
      mutable_subinfolist();
  private:
  const ::PlaneWar::MatchSubInfo& _internal_subinfolist(int index) const;
  ::PlaneWar::MatchSubInfo* _internal_add_subinfolist();
  public:
  const ::PlaneWar::MatchSubInfo& subinfolist(int index) const;
  ::PlaneWar::MatchSubInfo* add_subinfolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MatchSubInfo >&
      subinfolist() const;

  // repeated .PlaneWar.MatchRankInfo rankList = 2;
  int ranklist_size() const;
  private:
  int _internal_ranklist_size() const;
  public:
  void clear_ranklist();
  ::PlaneWar::MatchRankInfo* mutable_ranklist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MatchRankInfo >*
      mutable_ranklist();
  private:
  const ::PlaneWar::MatchRankInfo& _internal_ranklist(int index) const;
  ::PlaneWar::MatchRankInfo* _internal_add_ranklist();
  public:
  const ::PlaneWar::MatchRankInfo& ranklist(int index) const;
  ::PlaneWar::MatchRankInfo* add_ranklist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MatchRankInfo >&
      ranklist() const;

  // repeated int32 tipList = 4;
  int tiplist_size() const;
  private:
  int _internal_tiplist_size() const;
  public:
  void clear_tiplist();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tiplist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_tiplist() const;
  void _internal_add_tiplist(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_tiplist();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 tiplist(int index) const;
  void set_tiplist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_tiplist(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      tiplist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_tiplist();

  // repeated int32 luckyStage = 5;
  int luckystage_size() const;
  private:
  int _internal_luckystage_size() const;
  public:
  void clear_luckystage();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_luckystage(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_luckystage() const;
  void _internal_add_luckystage(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_luckystage();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 luckystage(int index) const;
  void set_luckystage(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_luckystage(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      luckystage() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_luckystage();

  // repeated .PlaneWar.MatchTask taskList = 6;
  int tasklist_size() const;
  private:
  int _internal_tasklist_size() const;
  public:
  void clear_tasklist();
  ::PlaneWar::MatchTask* mutable_tasklist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MatchTask >*
      mutable_tasklist();
  private:
  const ::PlaneWar::MatchTask& _internal_tasklist(int index) const;
  ::PlaneWar::MatchTask* _internal_add_tasklist();
  public:
  const ::PlaneWar::MatchTask& tasklist(int index) const;
  ::PlaneWar::MatchTask* add_tasklist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MatchTask >&
      tasklist() const;

  // .PlaneWar.MatchRankInfo myRank = 3;
  bool has_myrank() const;
  private:
  bool _internal_has_myrank() const;
  public:
  void clear_myrank();
  const ::PlaneWar::MatchRankInfo& myrank() const;
  ::PlaneWar::MatchRankInfo* release_myrank();
  ::PlaneWar::MatchRankInfo* mutable_myrank();
  void set_allocated_myrank(::PlaneWar::MatchRankInfo* myrank);
  private:
  const ::PlaneWar::MatchRankInfo& _internal_myrank() const;
  ::PlaneWar::MatchRankInfo* _internal_mutable_myrank();
  public:
  void unsafe_arena_set_allocated_myrank(
      ::PlaneWar::MatchRankInfo* myrank);
  ::PlaneWar::MatchRankInfo* unsafe_arena_release_myrank();

  // @@protoc_insertion_point(class_scope:PlaneWar.SCMatchDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MatchSubInfo > subinfolist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MatchRankInfo > ranklist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > tiplist_;
  mutable std::atomic<int> _tiplist_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > luckystage_;
  mutable std::atomic<int> _luckystage_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MatchTask > tasklist_;
  ::PlaneWar::MatchRankInfo* myrank_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSMatchReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSMatchReward) */ {
 public:
  inline CSMatchReward() : CSMatchReward(nullptr) {}
  virtual ~CSMatchReward();

  CSMatchReward(const CSMatchReward& from);
  CSMatchReward(CSMatchReward&& from) noexcept
    : CSMatchReward() {
    *this = ::std::move(from);
  }

  inline CSMatchReward& operator=(const CSMatchReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSMatchReward& operator=(CSMatchReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSMatchReward& default_instance();

  static inline const CSMatchReward* internal_default_instance() {
    return reinterpret_cast<const CSMatchReward*>(
               &_CSMatchReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    152;

  friend void swap(CSMatchReward& a, CSMatchReward& b) {
    a.Swap(&b);
  }
  inline void Swap(CSMatchReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSMatchReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSMatchReward* New() const final {
    return CreateMaybeMessage<CSMatchReward>(nullptr);
  }

  CSMatchReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSMatchReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSMatchReward& from);
  void MergeFrom(const CSMatchReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSMatchReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSMatchReward";
  }
  protected:
  explicit CSMatchReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.CSMatchReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class RankReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.RankReward) */ {
 public:
  inline RankReward() : RankReward(nullptr) {}
  virtual ~RankReward();

  RankReward(const RankReward& from);
  RankReward(RankReward&& from) noexcept
    : RankReward() {
    *this = ::std::move(from);
  }

  inline RankReward& operator=(const RankReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankReward& operator=(RankReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankReward& default_instance();

  static inline const RankReward* internal_default_instance() {
    return reinterpret_cast<const RankReward*>(
               &_RankReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    153;

  friend void swap(RankReward& a, RankReward& b) {
    a.Swap(&b);
  }
  inline void Swap(RankReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RankReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankReward* New() const final {
    return CreateMaybeMessage<RankReward>(nullptr);
  }

  RankReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankReward& from);
  void MergeFrom(const RankReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.RankReward";
  }
  protected:
  explicit RankReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardListFieldNumber = 3,
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
  };
  // .PlaneWar.MatchRewardItem rewardList = 3;
  bool has_rewardlist() const;
  private:
  bool _internal_has_rewardlist() const;
  public:
  void clear_rewardlist();
  const ::PlaneWar::MatchRewardItem& rewardlist() const;
  ::PlaneWar::MatchRewardItem* release_rewardlist();
  ::PlaneWar::MatchRewardItem* mutable_rewardlist();
  void set_allocated_rewardlist(::PlaneWar::MatchRewardItem* rewardlist);
  private:
  const ::PlaneWar::MatchRewardItem& _internal_rewardlist() const;
  ::PlaneWar::MatchRewardItem* _internal_mutable_rewardlist();
  public:
  void unsafe_arena_set_allocated_rewardlist(
      ::PlaneWar::MatchRewardItem* rewardlist);
  ::PlaneWar::MatchRewardItem* unsafe_arena_release_rewardlist();

  // int32 from = 1;
  void clear_from();
  ::PROTOBUF_NAMESPACE_ID::int32 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from() const;
  void _internal_set_from(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 to = 2;
  void clear_to();
  ::PROTOBUF_NAMESPACE_ID::int32 to() const;
  void set_to(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to() const;
  void _internal_set_to(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.RankReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::MatchRewardItem* rewardlist_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCMatchReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCMatchReward) */ {
 public:
  inline SCMatchReward() : SCMatchReward(nullptr) {}
  virtual ~SCMatchReward();

  SCMatchReward(const SCMatchReward& from);
  SCMatchReward(SCMatchReward&& from) noexcept
    : SCMatchReward() {
    *this = ::std::move(from);
  }

  inline SCMatchReward& operator=(const SCMatchReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCMatchReward& operator=(SCMatchReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCMatchReward& default_instance();

  static inline const SCMatchReward* internal_default_instance() {
    return reinterpret_cast<const SCMatchReward*>(
               &_SCMatchReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    154;

  friend void swap(SCMatchReward& a, SCMatchReward& b) {
    a.Swap(&b);
  }
  inline void Swap(SCMatchReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCMatchReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCMatchReward* New() const final {
    return CreateMaybeMessage<SCMatchReward>(nullptr);
  }

  SCMatchReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCMatchReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCMatchReward& from);
  void MergeFrom(const SCMatchReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCMatchReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCMatchReward";
  }
  protected:
  explicit SCMatchReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRankRewardListFieldNumber = 1,
    kLuckyRewardFieldNumber = 2,
  };
  // repeated .PlaneWar.RankReward rankRewardList = 1;
  int rankrewardlist_size() const;
  private:
  int _internal_rankrewardlist_size() const;
  public:
  void clear_rankrewardlist();
  ::PlaneWar::RankReward* mutable_rankrewardlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::RankReward >*
      mutable_rankrewardlist();
  private:
  const ::PlaneWar::RankReward& _internal_rankrewardlist(int index) const;
  ::PlaneWar::RankReward* _internal_add_rankrewardlist();
  public:
  const ::PlaneWar::RankReward& rankrewardlist(int index) const;
  ::PlaneWar::RankReward* add_rankrewardlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::RankReward >&
      rankrewardlist() const;

  // repeated int32 luckyReward = 2;
  int luckyreward_size() const;
  private:
  int _internal_luckyreward_size() const;
  public:
  void clear_luckyreward();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_luckyreward(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_luckyreward() const;
  void _internal_add_luckyreward(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_luckyreward();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 luckyreward(int index) const;
  void set_luckyreward(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_luckyreward(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      luckyreward() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_luckyreward();

  // @@protoc_insertion_point(class_scope:PlaneWar.SCMatchReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::RankReward > rankrewardlist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > luckyreward_;
  mutable std::atomic<int> _luckyreward_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class MyMatchReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.MyMatchReward) */ {
 public:
  inline MyMatchReward() : MyMatchReward(nullptr) {}
  virtual ~MyMatchReward();

  MyMatchReward(const MyMatchReward& from);
  MyMatchReward(MyMatchReward&& from) noexcept
    : MyMatchReward() {
    *this = ::std::move(from);
  }

  inline MyMatchReward& operator=(const MyMatchReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline MyMatchReward& operator=(MyMatchReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MyMatchReward& default_instance();

  static inline const MyMatchReward* internal_default_instance() {
    return reinterpret_cast<const MyMatchReward*>(
               &_MyMatchReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    155;

  friend void swap(MyMatchReward& a, MyMatchReward& b) {
    a.Swap(&b);
  }
  inline void Swap(MyMatchReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MyMatchReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MyMatchReward* New() const final {
    return CreateMaybeMessage<MyMatchReward>(nullptr);
  }

  MyMatchReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MyMatchReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MyMatchReward& from);
  void MergeFrom(const MyMatchReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MyMatchReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.MyMatchReward";
  }
  protected:
  explicit MyMatchReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMyRewardFieldNumber = 2,
    kRankFieldNumber = 1,
    kBonusFieldNumber = 3,
    kLuckyRewardFieldNumber = 4,
  };
  // repeated .PlaneWar.MatchRewardItem myReward = 2;
  int myreward_size() const;
  private:
  int _internal_myreward_size() const;
  public:
  void clear_myreward();
  ::PlaneWar::MatchRewardItem* mutable_myreward(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MatchRewardItem >*
      mutable_myreward();
  private:
  const ::PlaneWar::MatchRewardItem& _internal_myreward(int index) const;
  ::PlaneWar::MatchRewardItem* _internal_add_myreward();
  public:
  const ::PlaneWar::MatchRewardItem& myreward(int index) const;
  ::PlaneWar::MatchRewardItem* add_myreward();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MatchRewardItem >&
      myreward() const;

  // int32 rank = 1;
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::int32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bonus = 3;
  void clear_bonus();
  ::PROTOBUF_NAMESPACE_ID::int32 bonus() const;
  void set_bonus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bonus() const;
  void _internal_set_bonus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 luckyReward = 4;
  void clear_luckyreward();
  ::PROTOBUF_NAMESPACE_ID::int32 luckyreward() const;
  void set_luckyreward(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_luckyreward() const;
  void _internal_set_luckyreward(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.MyMatchReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MatchRewardItem > myreward_;
  ::PROTOBUF_NAMESPACE_ID::int32 rank_;
  ::PROTOBUF_NAMESPACE_ID::int32 bonus_;
  ::PROTOBUF_NAMESPACE_ID::int32 luckyreward_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCMatchRewardNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCMatchRewardNotify) */ {
 public:
  inline SCMatchRewardNotify() : SCMatchRewardNotify(nullptr) {}
  virtual ~SCMatchRewardNotify();

  SCMatchRewardNotify(const SCMatchRewardNotify& from);
  SCMatchRewardNotify(SCMatchRewardNotify&& from) noexcept
    : SCMatchRewardNotify() {
    *this = ::std::move(from);
  }

  inline SCMatchRewardNotify& operator=(const SCMatchRewardNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCMatchRewardNotify& operator=(SCMatchRewardNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCMatchRewardNotify& default_instance();

  static inline const SCMatchRewardNotify* internal_default_instance() {
    return reinterpret_cast<const SCMatchRewardNotify*>(
               &_SCMatchRewardNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    156;

  friend void swap(SCMatchRewardNotify& a, SCMatchRewardNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(SCMatchRewardNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCMatchRewardNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCMatchRewardNotify* New() const final {
    return CreateMaybeMessage<SCMatchRewardNotify>(nullptr);
  }

  SCMatchRewardNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCMatchRewardNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCMatchRewardNotify& from);
  void MergeFrom(const SCMatchRewardNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCMatchRewardNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCMatchRewardNotify";
  }
  protected:
  explicit SCMatchRewardNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardListFieldNumber = 1,
    kMyRewardFieldNumber = 2,
  };
  // .PlaneWar.MatchRankInfo rewardList = 1;
  bool has_rewardlist() const;
  private:
  bool _internal_has_rewardlist() const;
  public:
  void clear_rewardlist();
  const ::PlaneWar::MatchRankInfo& rewardlist() const;
  ::PlaneWar::MatchRankInfo* release_rewardlist();
  ::PlaneWar::MatchRankInfo* mutable_rewardlist();
  void set_allocated_rewardlist(::PlaneWar::MatchRankInfo* rewardlist);
  private:
  const ::PlaneWar::MatchRankInfo& _internal_rewardlist() const;
  ::PlaneWar::MatchRankInfo* _internal_mutable_rewardlist();
  public:
  void unsafe_arena_set_allocated_rewardlist(
      ::PlaneWar::MatchRankInfo* rewardlist);
  ::PlaneWar::MatchRankInfo* unsafe_arena_release_rewardlist();

  // .PlaneWar.MyMatchReward myReward = 2;
  bool has_myreward() const;
  private:
  bool _internal_has_myreward() const;
  public:
  void clear_myreward();
  const ::PlaneWar::MyMatchReward& myreward() const;
  ::PlaneWar::MyMatchReward* release_myreward();
  ::PlaneWar::MyMatchReward* mutable_myreward();
  void set_allocated_myreward(::PlaneWar::MyMatchReward* myreward);
  private:
  const ::PlaneWar::MyMatchReward& _internal_myreward() const;
  ::PlaneWar::MyMatchReward* _internal_mutable_myreward();
  public:
  void unsafe_arena_set_allocated_myreward(
      ::PlaneWar::MyMatchReward* myreward);
  ::PlaneWar::MyMatchReward* unsafe_arena_release_myreward();

  // @@protoc_insertion_point(class_scope:PlaneWar.SCMatchRewardNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::MatchRankInfo* rewardlist_;
  ::PlaneWar::MyMatchReward* myreward_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSGiftList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSGiftList) */ {
 public:
  inline CSGiftList() : CSGiftList(nullptr) {}
  virtual ~CSGiftList();

  CSGiftList(const CSGiftList& from);
  CSGiftList(CSGiftList&& from) noexcept
    : CSGiftList() {
    *this = ::std::move(from);
  }

  inline CSGiftList& operator=(const CSGiftList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGiftList& operator=(CSGiftList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSGiftList& default_instance();

  static inline const CSGiftList* internal_default_instance() {
    return reinterpret_cast<const CSGiftList*>(
               &_CSGiftList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    157;

  friend void swap(CSGiftList& a, CSGiftList& b) {
    a.Swap(&b);
  }
  inline void Swap(CSGiftList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGiftList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSGiftList* New() const final {
    return CreateMaybeMessage<CSGiftList>(nullptr);
  }

  CSGiftList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSGiftList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSGiftList& from);
  void MergeFrom(const CSGiftList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSGiftList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSGiftList";
  }
  protected:
  explicit CSGiftList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.CSGiftList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class GiftInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.GiftInfo) */ {
 public:
  inline GiftInfo() : GiftInfo(nullptr) {}
  virtual ~GiftInfo();

  GiftInfo(const GiftInfo& from);
  GiftInfo(GiftInfo&& from) noexcept
    : GiftInfo() {
    *this = ::std::move(from);
  }

  inline GiftInfo& operator=(const GiftInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GiftInfo& operator=(GiftInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GiftInfo& default_instance();

  static inline const GiftInfo* internal_default_instance() {
    return reinterpret_cast<const GiftInfo*>(
               &_GiftInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    158;

  friend void swap(GiftInfo& a, GiftInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GiftInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GiftInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GiftInfo* New() const final {
    return CreateMaybeMessage<GiftInfo>(nullptr);
  }

  GiftInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GiftInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GiftInfo& from);
  void MergeFrom(const GiftInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GiftInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.GiftInfo";
  }
  protected:
  explicit GiftInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPointBonusFieldNumber = 2,
    kMoneyBonusFieldNumber = 3,
    kCanBuyFieldNumber = 4,
    kBuyCountDownFieldNumber = 5,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pointBonus = 2;
  void clear_pointbonus();
  ::PROTOBUF_NAMESPACE_ID::int32 pointbonus() const;
  void set_pointbonus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pointbonus() const;
  void _internal_set_pointbonus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 moneyBonus = 3;
  void clear_moneybonus();
  ::PROTOBUF_NAMESPACE_ID::int32 moneybonus() const;
  void set_moneybonus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_moneybonus() const;
  void _internal_set_moneybonus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool canBuy = 4;
  void clear_canbuy();
  bool canbuy() const;
  void set_canbuy(bool value);
  private:
  bool _internal_canbuy() const;
  void _internal_set_canbuy(bool value);
  public:

  // int32 buyCountDown = 5;
  void clear_buycountdown();
  ::PROTOBUF_NAMESPACE_ID::int32 buycountdown() const;
  void set_buycountdown(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buycountdown() const;
  void _internal_set_buycountdown(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.GiftInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 pointbonus_;
  ::PROTOBUF_NAMESPACE_ID::int32 moneybonus_;
  bool canbuy_;
  ::PROTOBUF_NAMESPACE_ID::int32 buycountdown_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCGiftList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCGiftList) */ {
 public:
  inline SCGiftList() : SCGiftList(nullptr) {}
  virtual ~SCGiftList();

  SCGiftList(const SCGiftList& from);
  SCGiftList(SCGiftList&& from) noexcept
    : SCGiftList() {
    *this = ::std::move(from);
  }

  inline SCGiftList& operator=(const SCGiftList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGiftList& operator=(SCGiftList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGiftList& default_instance();

  static inline const SCGiftList* internal_default_instance() {
    return reinterpret_cast<const SCGiftList*>(
               &_SCGiftList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    159;

  friend void swap(SCGiftList& a, SCGiftList& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGiftList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGiftList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGiftList* New() const final {
    return CreateMaybeMessage<SCGiftList>(nullptr);
  }

  SCGiftList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGiftList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGiftList& from);
  void MergeFrom(const SCGiftList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGiftList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCGiftList";
  }
  protected:
  explicit SCGiftList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGiftListFieldNumber = 1,
  };
  // repeated .PlaneWar.GiftInfo giftList = 1;
  int giftlist_size() const;
  private:
  int _internal_giftlist_size() const;
  public:
  void clear_giftlist();
  ::PlaneWar::GiftInfo* mutable_giftlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GiftInfo >*
      mutable_giftlist();
  private:
  const ::PlaneWar::GiftInfo& _internal_giftlist(int index) const;
  ::PlaneWar::GiftInfo* _internal_add_giftlist();
  public:
  const ::PlaneWar::GiftInfo& giftlist(int index) const;
  ::PlaneWar::GiftInfo* add_giftlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GiftInfo >&
      giftlist() const;

  // @@protoc_insertion_point(class_scope:PlaneWar.SCGiftList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GiftInfo > giftlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCGiftExpireNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCGiftExpireNotify) */ {
 public:
  inline SCGiftExpireNotify() : SCGiftExpireNotify(nullptr) {}
  virtual ~SCGiftExpireNotify();

  SCGiftExpireNotify(const SCGiftExpireNotify& from);
  SCGiftExpireNotify(SCGiftExpireNotify&& from) noexcept
    : SCGiftExpireNotify() {
    *this = ::std::move(from);
  }

  inline SCGiftExpireNotify& operator=(const SCGiftExpireNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGiftExpireNotify& operator=(SCGiftExpireNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGiftExpireNotify& default_instance();

  static inline const SCGiftExpireNotify* internal_default_instance() {
    return reinterpret_cast<const SCGiftExpireNotify*>(
               &_SCGiftExpireNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    160;

  friend void swap(SCGiftExpireNotify& a, SCGiftExpireNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGiftExpireNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGiftExpireNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGiftExpireNotify* New() const final {
    return CreateMaybeMessage<SCGiftExpireNotify>(nullptr);
  }

  SCGiftExpireNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGiftExpireNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGiftExpireNotify& from);
  void MergeFrom(const SCGiftExpireNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGiftExpireNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCGiftExpireNotify";
  }
  protected:
  explicit SCGiftExpireNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kGiftIDFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 giftID = 1;
  void clear_giftid();
  ::PROTOBUF_NAMESPACE_ID::int32 giftid() const;
  void set_giftid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_giftid() const;
  void _internal_set_giftid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCGiftExpireNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 giftid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSGetMatchTaskReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSGetMatchTaskReward) */ {
 public:
  inline CSGetMatchTaskReward() : CSGetMatchTaskReward(nullptr) {}
  virtual ~CSGetMatchTaskReward();

  CSGetMatchTaskReward(const CSGetMatchTaskReward& from);
  CSGetMatchTaskReward(CSGetMatchTaskReward&& from) noexcept
    : CSGetMatchTaskReward() {
    *this = ::std::move(from);
  }

  inline CSGetMatchTaskReward& operator=(const CSGetMatchTaskReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGetMatchTaskReward& operator=(CSGetMatchTaskReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSGetMatchTaskReward& default_instance();

  static inline const CSGetMatchTaskReward* internal_default_instance() {
    return reinterpret_cast<const CSGetMatchTaskReward*>(
               &_CSGetMatchTaskReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    161;

  friend void swap(CSGetMatchTaskReward& a, CSGetMatchTaskReward& b) {
    a.Swap(&b);
  }
  inline void Swap(CSGetMatchTaskReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGetMatchTaskReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSGetMatchTaskReward* New() const final {
    return CreateMaybeMessage<CSGetMatchTaskReward>(nullptr);
  }

  CSGetMatchTaskReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSGetMatchTaskReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSGetMatchTaskReward& from);
  void MergeFrom(const CSGetMatchTaskReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSGetMatchTaskReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSGetMatchTaskReward";
  }
  protected:
  explicit CSGetMatchTaskReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // int32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSGetMatchTaskReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCGetMatchTaskReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCGetMatchTaskReward) */ {
 public:
  inline SCGetMatchTaskReward() : SCGetMatchTaskReward(nullptr) {}
  virtual ~SCGetMatchTaskReward();

  SCGetMatchTaskReward(const SCGetMatchTaskReward& from);
  SCGetMatchTaskReward(SCGetMatchTaskReward&& from) noexcept
    : SCGetMatchTaskReward() {
    *this = ::std::move(from);
  }

  inline SCGetMatchTaskReward& operator=(const SCGetMatchTaskReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGetMatchTaskReward& operator=(SCGetMatchTaskReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGetMatchTaskReward& default_instance();

  static inline const SCGetMatchTaskReward* internal_default_instance() {
    return reinterpret_cast<const SCGetMatchTaskReward*>(
               &_SCGetMatchTaskReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    162;

  friend void swap(SCGetMatchTaskReward& a, SCGetMatchTaskReward& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGetMatchTaskReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGetMatchTaskReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGetMatchTaskReward* New() const final {
    return CreateMaybeMessage<SCGetMatchTaskReward>(nullptr);
  }

  SCGetMatchTaskReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGetMatchTaskReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGetMatchTaskReward& from);
  void MergeFrom(const SCGetMatchTaskReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGetMatchTaskReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCGetMatchTaskReward";
  }
  protected:
  explicit SCGetMatchTaskReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kRewardFieldNumber = 2,
  };
  // int32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reward = 2;
  void clear_reward();
  ::PROTOBUF_NAMESPACE_ID::int32 reward() const;
  void set_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reward() const;
  void _internal_set_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCGetMatchTaskReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 reward_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class WeaponUseCondition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.WeaponUseCondition) */ {
 public:
  inline WeaponUseCondition() : WeaponUseCondition(nullptr) {}
  virtual ~WeaponUseCondition();

  WeaponUseCondition(const WeaponUseCondition& from);
  WeaponUseCondition(WeaponUseCondition&& from) noexcept
    : WeaponUseCondition() {
    *this = ::std::move(from);
  }

  inline WeaponUseCondition& operator=(const WeaponUseCondition& from) {
    CopyFrom(from);
    return *this;
  }
  inline WeaponUseCondition& operator=(WeaponUseCondition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WeaponUseCondition& default_instance();

  static inline const WeaponUseCondition* internal_default_instance() {
    return reinterpret_cast<const WeaponUseCondition*>(
               &_WeaponUseCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    163;

  friend void swap(WeaponUseCondition& a, WeaponUseCondition& b) {
    a.Swap(&b);
  }
  inline void Swap(WeaponUseCondition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WeaponUseCondition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WeaponUseCondition* New() const final {
    return CreateMaybeMessage<WeaponUseCondition>(nullptr);
  }

  WeaponUseCondition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WeaponUseCondition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WeaponUseCondition& from);
  void MergeFrom(const WeaponUseCondition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WeaponUseCondition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.WeaponUseCondition";
  }
  protected:
  explicit WeaponUseCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVipLevelFieldNumber = 1,
  };
  // int32 vipLevel = 1;
  void clear_viplevel();
  ::PROTOBUF_NAMESPACE_ID::int32 viplevel() const;
  void set_viplevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_viplevel() const;
  void _internal_set_viplevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.WeaponUseCondition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 viplevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class WeaponConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.WeaponConfig) */ {
 public:
  inline WeaponConfig() : WeaponConfig(nullptr) {}
  virtual ~WeaponConfig();

  WeaponConfig(const WeaponConfig& from);
  WeaponConfig(WeaponConfig&& from) noexcept
    : WeaponConfig() {
    *this = ::std::move(from);
  }

  inline WeaponConfig& operator=(const WeaponConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline WeaponConfig& operator=(WeaponConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WeaponConfig& default_instance();

  static inline const WeaponConfig* internal_default_instance() {
    return reinterpret_cast<const WeaponConfig*>(
               &_WeaponConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    164;

  friend void swap(WeaponConfig& a, WeaponConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(WeaponConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WeaponConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WeaponConfig* New() const final {
    return CreateMaybeMessage<WeaponConfig>(nullptr);
  }

  WeaponConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WeaponConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WeaponConfig& from);
  void MergeFrom(const WeaponConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WeaponConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.WeaponConfig";
  }
  protected:
  explicit WeaponConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kConditionFieldNumber = 3,
    kWeaponIDFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .PlaneWar.WeaponUseCondition condition = 3;
  bool has_condition() const;
  private:
  bool _internal_has_condition() const;
  public:
  void clear_condition();
  const ::PlaneWar::WeaponUseCondition& condition() const;
  ::PlaneWar::WeaponUseCondition* release_condition();
  ::PlaneWar::WeaponUseCondition* mutable_condition();
  void set_allocated_condition(::PlaneWar::WeaponUseCondition* condition);
  private:
  const ::PlaneWar::WeaponUseCondition& _internal_condition() const;
  ::PlaneWar::WeaponUseCondition* _internal_mutable_condition();
  public:
  void unsafe_arena_set_allocated_condition(
      ::PlaneWar::WeaponUseCondition* condition);
  ::PlaneWar::WeaponUseCondition* unsafe_arena_release_condition();

  // int32 weaponID = 1;
  void clear_weaponid();
  ::PROTOBUF_NAMESPACE_ID::int32 weaponid() const;
  void set_weaponid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_weaponid() const;
  void _internal_set_weaponid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.WeaponConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PlaneWar::WeaponUseCondition* condition_;
  ::PROTOBUF_NAMESPACE_ID::int32 weaponid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSWeaponPieceInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSWeaponPieceInfo) */ {
 public:
  inline CSWeaponPieceInfo() : CSWeaponPieceInfo(nullptr) {}
  virtual ~CSWeaponPieceInfo();

  CSWeaponPieceInfo(const CSWeaponPieceInfo& from);
  CSWeaponPieceInfo(CSWeaponPieceInfo&& from) noexcept
    : CSWeaponPieceInfo() {
    *this = ::std::move(from);
  }

  inline CSWeaponPieceInfo& operator=(const CSWeaponPieceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSWeaponPieceInfo& operator=(CSWeaponPieceInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSWeaponPieceInfo& default_instance();

  static inline const CSWeaponPieceInfo* internal_default_instance() {
    return reinterpret_cast<const CSWeaponPieceInfo*>(
               &_CSWeaponPieceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    165;

  friend void swap(CSWeaponPieceInfo& a, CSWeaponPieceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSWeaponPieceInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSWeaponPieceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSWeaponPieceInfo* New() const final {
    return CreateMaybeMessage<CSWeaponPieceInfo>(nullptr);
  }

  CSWeaponPieceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSWeaponPieceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSWeaponPieceInfo& from);
  void MergeFrom(const CSWeaponPieceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSWeaponPieceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSWeaponPieceInfo";
  }
  protected:
  explicit CSWeaponPieceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsBrowsingFieldNumber = 1,
  };
  // bool isBrowsing = 1;
  void clear_isbrowsing();
  bool isbrowsing() const;
  void set_isbrowsing(bool value);
  private:
  bool _internal_isbrowsing() const;
  void _internal_set_isbrowsing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSWeaponPieceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool isbrowsing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class PiecesStackLimitInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.PiecesStackLimitInfo) */ {
 public:
  inline PiecesStackLimitInfo() : PiecesStackLimitInfo(nullptr) {}
  virtual ~PiecesStackLimitInfo();

  PiecesStackLimitInfo(const PiecesStackLimitInfo& from);
  PiecesStackLimitInfo(PiecesStackLimitInfo&& from) noexcept
    : PiecesStackLimitInfo() {
    *this = ::std::move(from);
  }

  inline PiecesStackLimitInfo& operator=(const PiecesStackLimitInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiecesStackLimitInfo& operator=(PiecesStackLimitInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PiecesStackLimitInfo& default_instance();

  static inline const PiecesStackLimitInfo* internal_default_instance() {
    return reinterpret_cast<const PiecesStackLimitInfo*>(
               &_PiecesStackLimitInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    166;

  friend void swap(PiecesStackLimitInfo& a, PiecesStackLimitInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PiecesStackLimitInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiecesStackLimitInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PiecesStackLimitInfo* New() const final {
    return CreateMaybeMessage<PiecesStackLimitInfo>(nullptr);
  }

  PiecesStackLimitInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PiecesStackLimitInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PiecesStackLimitInfo& from);
  void MergeFrom(const PiecesStackLimitInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiecesStackLimitInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.PiecesStackLimitInfo";
  }
  protected:
  explicit PiecesStackLimitInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromVipLevelFieldNumber = 1,
    kToVipLevelFieldNumber = 2,
    kStackNumFieldNumber = 3,
  };
  // int32 fromVipLevel = 1;
  void clear_fromviplevel();
  ::PROTOBUF_NAMESPACE_ID::int32 fromviplevel() const;
  void set_fromviplevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fromviplevel() const;
  void _internal_set_fromviplevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 toVipLevel = 2;
  void clear_toviplevel();
  ::PROTOBUF_NAMESPACE_ID::int32 toviplevel() const;
  void set_toviplevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_toviplevel() const;
  void _internal_set_toviplevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 stackNum = 3;
  void clear_stacknum();
  ::PROTOBUF_NAMESPACE_ID::int32 stacknum() const;
  void set_stacknum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stacknum() const;
  void _internal_set_stacknum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.PiecesStackLimitInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 fromviplevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 toviplevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 stacknum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCWeaponPieceInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCWeaponPieceInfo) */ {
 public:
  inline SCWeaponPieceInfo() : SCWeaponPieceInfo(nullptr) {}
  virtual ~SCWeaponPieceInfo();

  SCWeaponPieceInfo(const SCWeaponPieceInfo& from);
  SCWeaponPieceInfo(SCWeaponPieceInfo&& from) noexcept
    : SCWeaponPieceInfo() {
    *this = ::std::move(from);
  }

  inline SCWeaponPieceInfo& operator=(const SCWeaponPieceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCWeaponPieceInfo& operator=(SCWeaponPieceInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCWeaponPieceInfo& default_instance();

  static inline const SCWeaponPieceInfo* internal_default_instance() {
    return reinterpret_cast<const SCWeaponPieceInfo*>(
               &_SCWeaponPieceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    167;

  friend void swap(SCWeaponPieceInfo& a, SCWeaponPieceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCWeaponPieceInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCWeaponPieceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCWeaponPieceInfo* New() const final {
    return CreateMaybeMessage<SCWeaponPieceInfo>(nullptr);
  }

  SCWeaponPieceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCWeaponPieceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCWeaponPieceInfo& from);
  void MergeFrom(const SCWeaponPieceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCWeaponPieceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCWeaponPieceInfo";
  }
  protected:
  explicit SCWeaponPieceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigListFieldNumber = 4,
    kStackLimitListFieldNumber = 5,
    kPieceInfoFieldNumber = 3,
    kIsBrowsingFieldNumber = 1,
    kChairFieldNumber = 2,
  };
  // repeated .PlaneWar.WeaponConfig configList = 4;
  int configlist_size() const;
  private:
  int _internal_configlist_size() const;
  public:
  void clear_configlist();
  ::PlaneWar::WeaponConfig* mutable_configlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::WeaponConfig >*
      mutable_configlist();
  private:
  const ::PlaneWar::WeaponConfig& _internal_configlist(int index) const;
  ::PlaneWar::WeaponConfig* _internal_add_configlist();
  public:
  const ::PlaneWar::WeaponConfig& configlist(int index) const;
  ::PlaneWar::WeaponConfig* add_configlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::WeaponConfig >&
      configlist() const;

  // repeated .PlaneWar.PiecesStackLimitInfo stackLimitList = 5;
  int stacklimitlist_size() const;
  private:
  int _internal_stacklimitlist_size() const;
  public:
  void clear_stacklimitlist();
  ::PlaneWar::PiecesStackLimitInfo* mutable_stacklimitlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PiecesStackLimitInfo >*
      mutable_stacklimitlist();
  private:
  const ::PlaneWar::PiecesStackLimitInfo& _internal_stacklimitlist(int index) const;
  ::PlaneWar::PiecesStackLimitInfo* _internal_add_stacklimitlist();
  public:
  const ::PlaneWar::PiecesStackLimitInfo& stacklimitlist(int index) const;
  ::PlaneWar::PiecesStackLimitInfo* add_stacklimitlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PiecesStackLimitInfo >&
      stacklimitlist() const;

  // .PlaneWar.PieceInfo pieceInfo = 3;
  bool has_pieceinfo() const;
  private:
  bool _internal_has_pieceinfo() const;
  public:
  void clear_pieceinfo();
  const ::PlaneWar::PieceInfo& pieceinfo() const;
  ::PlaneWar::PieceInfo* release_pieceinfo();
  ::PlaneWar::PieceInfo* mutable_pieceinfo();
  void set_allocated_pieceinfo(::PlaneWar::PieceInfo* pieceinfo);
  private:
  const ::PlaneWar::PieceInfo& _internal_pieceinfo() const;
  ::PlaneWar::PieceInfo* _internal_mutable_pieceinfo();
  public:
  void unsafe_arena_set_allocated_pieceinfo(
      ::PlaneWar::PieceInfo* pieceinfo);
  ::PlaneWar::PieceInfo* unsafe_arena_release_pieceinfo();

  // bool isBrowsing = 1;
  void clear_isbrowsing();
  bool isbrowsing() const;
  void set_isbrowsing(bool value);
  private:
  bool _internal_isbrowsing() const;
  void _internal_set_isbrowsing(bool value);
  public:

  // int32 chair = 2;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCWeaponPieceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::WeaponConfig > configlist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PiecesStackLimitInfo > stacklimitlist_;
  ::PlaneWar::PieceInfo* pieceinfo_;
  bool isbrowsing_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSBuyWeapon PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSBuyWeapon) */ {
 public:
  inline CSBuyWeapon() : CSBuyWeapon(nullptr) {}
  virtual ~CSBuyWeapon();

  CSBuyWeapon(const CSBuyWeapon& from);
  CSBuyWeapon(CSBuyWeapon&& from) noexcept
    : CSBuyWeapon() {
    *this = ::std::move(from);
  }

  inline CSBuyWeapon& operator=(const CSBuyWeapon& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSBuyWeapon& operator=(CSBuyWeapon&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSBuyWeapon& default_instance();

  static inline const CSBuyWeapon* internal_default_instance() {
    return reinterpret_cast<const CSBuyWeapon*>(
               &_CSBuyWeapon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    168;

  friend void swap(CSBuyWeapon& a, CSBuyWeapon& b) {
    a.Swap(&b);
  }
  inline void Swap(CSBuyWeapon* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSBuyWeapon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSBuyWeapon* New() const final {
    return CreateMaybeMessage<CSBuyWeapon>(nullptr);
  }

  CSBuyWeapon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSBuyWeapon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSBuyWeapon& from);
  void MergeFrom(const CSBuyWeapon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSBuyWeapon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSBuyWeapon";
  }
  protected:
  explicit CSBuyWeapon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.CSBuyWeapon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCBuyWeapon PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCBuyWeapon) */ {
 public:
  inline SCBuyWeapon() : SCBuyWeapon(nullptr) {}
  virtual ~SCBuyWeapon();

  SCBuyWeapon(const SCBuyWeapon& from);
  SCBuyWeapon(SCBuyWeapon&& from) noexcept
    : SCBuyWeapon() {
    *this = ::std::move(from);
  }

  inline SCBuyWeapon& operator=(const SCBuyWeapon& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCBuyWeapon& operator=(SCBuyWeapon&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCBuyWeapon& default_instance();

  static inline const SCBuyWeapon* internal_default_instance() {
    return reinterpret_cast<const SCBuyWeapon*>(
               &_SCBuyWeapon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    169;

  friend void swap(SCBuyWeapon& a, SCBuyWeapon& b) {
    a.Swap(&b);
  }
  inline void Swap(SCBuyWeapon* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCBuyWeapon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCBuyWeapon* New() const final {
    return CreateMaybeMessage<SCBuyWeapon>(nullptr);
  }

  SCBuyWeapon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCBuyWeapon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCBuyWeapon& from);
  void MergeFrom(const SCBuyWeapon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCBuyWeapon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCBuyWeapon";
  }
  protected:
  explicit SCBuyWeapon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeaponInfoFieldNumber = 3,
    kPieceInfoFieldNumber = 4,
    kConditionFieldNumber = 5,
    kChairFieldNumber = 1,
    kWeaponIDFieldNumber = 2,
  };
  // .PlaneWar.WeaponInfo weaponInfo = 3;
  bool has_weaponinfo() const;
  private:
  bool _internal_has_weaponinfo() const;
  public:
  void clear_weaponinfo();
  const ::PlaneWar::WeaponInfo& weaponinfo() const;
  ::PlaneWar::WeaponInfo* release_weaponinfo();
  ::PlaneWar::WeaponInfo* mutable_weaponinfo();
  void set_allocated_weaponinfo(::PlaneWar::WeaponInfo* weaponinfo);
  private:
  const ::PlaneWar::WeaponInfo& _internal_weaponinfo() const;
  ::PlaneWar::WeaponInfo* _internal_mutable_weaponinfo();
  public:
  void unsafe_arena_set_allocated_weaponinfo(
      ::PlaneWar::WeaponInfo* weaponinfo);
  ::PlaneWar::WeaponInfo* unsafe_arena_release_weaponinfo();

  // .PlaneWar.PieceInfo pieceInfo = 4;
  bool has_pieceinfo() const;
  private:
  bool _internal_has_pieceinfo() const;
  public:
  void clear_pieceinfo();
  const ::PlaneWar::PieceInfo& pieceinfo() const;
  ::PlaneWar::PieceInfo* release_pieceinfo();
  ::PlaneWar::PieceInfo* mutable_pieceinfo();
  void set_allocated_pieceinfo(::PlaneWar::PieceInfo* pieceinfo);
  private:
  const ::PlaneWar::PieceInfo& _internal_pieceinfo() const;
  ::PlaneWar::PieceInfo* _internal_mutable_pieceinfo();
  public:
  void unsafe_arena_set_allocated_pieceinfo(
      ::PlaneWar::PieceInfo* pieceinfo);
  ::PlaneWar::PieceInfo* unsafe_arena_release_pieceinfo();

  // .PlaneWar.WeaponUseCondition condition = 5;
  bool has_condition() const;
  private:
  bool _internal_has_condition() const;
  public:
  void clear_condition();
  const ::PlaneWar::WeaponUseCondition& condition() const;
  ::PlaneWar::WeaponUseCondition* release_condition();
  ::PlaneWar::WeaponUseCondition* mutable_condition();
  void set_allocated_condition(::PlaneWar::WeaponUseCondition* condition);
  private:
  const ::PlaneWar::WeaponUseCondition& _internal_condition() const;
  ::PlaneWar::WeaponUseCondition* _internal_mutable_condition();
  public:
  void unsafe_arena_set_allocated_condition(
      ::PlaneWar::WeaponUseCondition* condition);
  ::PlaneWar::WeaponUseCondition* unsafe_arena_release_condition();

  // int32 chair = 1;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 weaponID = 2;
  void clear_weaponid();
  ::PROTOBUF_NAMESPACE_ID::int32 weaponid() const;
  void set_weaponid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_weaponid() const;
  void _internal_set_weaponid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCBuyWeapon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::WeaponInfo* weaponinfo_;
  ::PlaneWar::PieceInfo* pieceinfo_;
  ::PlaneWar::WeaponUseCondition* condition_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  ::PROTOBUF_NAMESPACE_ID::int32 weaponid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class EarnRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.EarnRecord) */ {
 public:
  inline EarnRecord() : EarnRecord(nullptr) {}
  virtual ~EarnRecord();

  EarnRecord(const EarnRecord& from);
  EarnRecord(EarnRecord&& from) noexcept
    : EarnRecord() {
    *this = ::std::move(from);
  }

  inline EarnRecord& operator=(const EarnRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline EarnRecord& operator=(EarnRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EarnRecord& default_instance();

  static inline const EarnRecord* internal_default_instance() {
    return reinterpret_cast<const EarnRecord*>(
               &_EarnRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    170;

  friend void swap(EarnRecord& a, EarnRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(EarnRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EarnRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EarnRecord* New() const final {
    return CreateMaybeMessage<EarnRecord>(nullptr);
  }

  EarnRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EarnRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EarnRecord& from);
  void MergeFrom(const EarnRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EarnRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.EarnRecord";
  }
  protected:
  explicit EarnRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickFieldNumber = 2,
    kIconFieldNumber = 3,
    kWeaponNameFieldNumber = 5,
    kPlayerIDFieldNumber = 1,
    kVipLevelFieldNumber = 4,
    kTimeFieldNumber = 6,
    kEarnFieldNumber = 7,
  };
  // string nick = 2;
  void clear_nick();
  const std::string& nick() const;
  void set_nick(const std::string& value);
  void set_nick(std::string&& value);
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  std::string* mutable_nick();
  std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // string icon = 3;
  void clear_icon();
  const std::string& icon() const;
  void set_icon(const std::string& value);
  void set_icon(std::string&& value);
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  std::string* mutable_icon();
  std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // string weaponName = 5;
  void clear_weaponname();
  const std::string& weaponname() const;
  void set_weaponname(const std::string& value);
  void set_weaponname(std::string&& value);
  void set_weaponname(const char* value);
  void set_weaponname(const char* value, size_t size);
  std::string* mutable_weaponname();
  std::string* release_weaponname();
  void set_allocated_weaponname(std::string* weaponname);
  private:
  const std::string& _internal_weaponname() const;
  void _internal_set_weaponname(const std::string& value);
  std::string* _internal_mutable_weaponname();
  public:

  // int32 playerID = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vipLevel = 4;
  void clear_viplevel();
  ::PROTOBUF_NAMESPACE_ID::int32 viplevel() const;
  void set_viplevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_viplevel() const;
  void _internal_set_viplevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time = 6;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 earn = 7;
  void clear_earn();
  ::PROTOBUF_NAMESPACE_ID::int32 earn() const;
  void set_earn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_earn() const;
  void _internal_set_earn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.EarnRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr weaponname_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 viplevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 earn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSWeaponEarnRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSWeaponEarnRecord) */ {
 public:
  inline CSWeaponEarnRecord() : CSWeaponEarnRecord(nullptr) {}
  virtual ~CSWeaponEarnRecord();

  CSWeaponEarnRecord(const CSWeaponEarnRecord& from);
  CSWeaponEarnRecord(CSWeaponEarnRecord&& from) noexcept
    : CSWeaponEarnRecord() {
    *this = ::std::move(from);
  }

  inline CSWeaponEarnRecord& operator=(const CSWeaponEarnRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSWeaponEarnRecord& operator=(CSWeaponEarnRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSWeaponEarnRecord& default_instance();

  static inline const CSWeaponEarnRecord* internal_default_instance() {
    return reinterpret_cast<const CSWeaponEarnRecord*>(
               &_CSWeaponEarnRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    171;

  friend void swap(CSWeaponEarnRecord& a, CSWeaponEarnRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(CSWeaponEarnRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSWeaponEarnRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSWeaponEarnRecord* New() const final {
    return CreateMaybeMessage<CSWeaponEarnRecord>(nullptr);
  }

  CSWeaponEarnRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSWeaponEarnRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSWeaponEarnRecord& from);
  void MergeFrom(const CSWeaponEarnRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSWeaponEarnRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSWeaponEarnRecord";
  }
  protected:
  explicit CSWeaponEarnRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageFieldNumber = 1,
  };
  // int32 page = 1;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::int32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSWeaponEarnRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCWeaponEarnRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCWeaponEarnRecord) */ {
 public:
  inline SCWeaponEarnRecord() : SCWeaponEarnRecord(nullptr) {}
  virtual ~SCWeaponEarnRecord();

  SCWeaponEarnRecord(const SCWeaponEarnRecord& from);
  SCWeaponEarnRecord(SCWeaponEarnRecord&& from) noexcept
    : SCWeaponEarnRecord() {
    *this = ::std::move(from);
  }

  inline SCWeaponEarnRecord& operator=(const SCWeaponEarnRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCWeaponEarnRecord& operator=(SCWeaponEarnRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCWeaponEarnRecord& default_instance();

  static inline const SCWeaponEarnRecord* internal_default_instance() {
    return reinterpret_cast<const SCWeaponEarnRecord*>(
               &_SCWeaponEarnRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    172;

  friend void swap(SCWeaponEarnRecord& a, SCWeaponEarnRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(SCWeaponEarnRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCWeaponEarnRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCWeaponEarnRecord* New() const final {
    return CreateMaybeMessage<SCWeaponEarnRecord>(nullptr);
  }

  SCWeaponEarnRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCWeaponEarnRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCWeaponEarnRecord& from);
  void MergeFrom(const SCWeaponEarnRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCWeaponEarnRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCWeaponEarnRecord";
  }
  protected:
  explicit SCWeaponEarnRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordListFieldNumber = 1,
    kPageFieldNumber = 2,
  };
  // repeated .PlaneWar.EarnRecord recordList = 1;
  int recordlist_size() const;
  private:
  int _internal_recordlist_size() const;
  public:
  void clear_recordlist();
  ::PlaneWar::EarnRecord* mutable_recordlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::EarnRecord >*
      mutable_recordlist();
  private:
  const ::PlaneWar::EarnRecord& _internal_recordlist(int index) const;
  ::PlaneWar::EarnRecord* _internal_add_recordlist();
  public:
  const ::PlaneWar::EarnRecord& recordlist(int index) const;
  ::PlaneWar::EarnRecord* add_recordlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::EarnRecord >&
      recordlist() const;

  // int32 page = 2;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::int32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCWeaponEarnRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::EarnRecord > recordlist_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSStateForceSettle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSStateForceSettle) */ {
 public:
  inline CSStateForceSettle() : CSStateForceSettle(nullptr) {}
  virtual ~CSStateForceSettle();

  CSStateForceSettle(const CSStateForceSettle& from);
  CSStateForceSettle(CSStateForceSettle&& from) noexcept
    : CSStateForceSettle() {
    *this = ::std::move(from);
  }

  inline CSStateForceSettle& operator=(const CSStateForceSettle& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSStateForceSettle& operator=(CSStateForceSettle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSStateForceSettle& default_instance();

  static inline const CSStateForceSettle* internal_default_instance() {
    return reinterpret_cast<const CSStateForceSettle*>(
               &_CSStateForceSettle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    173;

  friend void swap(CSStateForceSettle& a, CSStateForceSettle& b) {
    a.Swap(&b);
  }
  inline void Swap(CSStateForceSettle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSStateForceSettle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSStateForceSettle* New() const final {
    return CreateMaybeMessage<CSStateForceSettle>(nullptr);
  }

  CSStateForceSettle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSStateForceSettle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSStateForceSettle& from);
  void MergeFrom(const CSStateForceSettle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSStateForceSettle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSStateForceSettle";
  }
  protected:
  explicit CSStateForceSettle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceUIDFieldNumber = 1,
  };
  // int32 sourceUID = 1;
  void clear_sourceuid();
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid() const;
  void set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sourceuid() const;
  void _internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSStateForceSettle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCStateForceSettle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCStateForceSettle) */ {
 public:
  inline SCStateForceSettle() : SCStateForceSettle(nullptr) {}
  virtual ~SCStateForceSettle();

  SCStateForceSettle(const SCStateForceSettle& from);
  SCStateForceSettle(SCStateForceSettle&& from) noexcept
    : SCStateForceSettle() {
    *this = ::std::move(from);
  }

  inline SCStateForceSettle& operator=(const SCStateForceSettle& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCStateForceSettle& operator=(SCStateForceSettle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCStateForceSettle& default_instance();

  static inline const SCStateForceSettle* internal_default_instance() {
    return reinterpret_cast<const SCStateForceSettle*>(
               &_SCStateForceSettle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    174;

  friend void swap(SCStateForceSettle& a, SCStateForceSettle& b) {
    a.Swap(&b);
  }
  inline void Swap(SCStateForceSettle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCStateForceSettle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCStateForceSettle* New() const final {
    return CreateMaybeMessage<SCStateForceSettle>(nullptr);
  }

  SCStateForceSettle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCStateForceSettle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCStateForceSettle& from);
  void MergeFrom(const SCStateForceSettle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCStateForceSettle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCStateForceSettle";
  }
  protected:
  explicit SCStateForceSettle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairFieldNumber = 1,
    kSourceUIDFieldNumber = 2,
    kOriginUIDFieldNumber = 3,
    kRemainFieldNumber = 4,
  };
  // int32 chair = 1;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sourceUID = 2;
  void clear_sourceuid();
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid() const;
  void set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sourceuid() const;
  void _internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 originUID = 3;
  void clear_originuid();
  ::PROTOBUF_NAMESPACE_ID::int32 originuid() const;
  void set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_originuid() const;
  void _internal_set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 remain = 4;
  void clear_remain();
  ::PROTOBUF_NAMESPACE_ID::int32 remain() const;
  void set_remain(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_remain() const;
  void _internal_set_remain(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCStateForceSettle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 originuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 remain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCAddMissedBullet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCAddMissedBullet) */ {
 public:
  inline SCAddMissedBullet() : SCAddMissedBullet(nullptr) {}
  virtual ~SCAddMissedBullet();

  SCAddMissedBullet(const SCAddMissedBullet& from);
  SCAddMissedBullet(SCAddMissedBullet&& from) noexcept
    : SCAddMissedBullet() {
    *this = ::std::move(from);
  }

  inline SCAddMissedBullet& operator=(const SCAddMissedBullet& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCAddMissedBullet& operator=(SCAddMissedBullet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCAddMissedBullet& default_instance();

  static inline const SCAddMissedBullet* internal_default_instance() {
    return reinterpret_cast<const SCAddMissedBullet*>(
               &_SCAddMissedBullet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    175;

  friend void swap(SCAddMissedBullet& a, SCAddMissedBullet& b) {
    a.Swap(&b);
  }
  inline void Swap(SCAddMissedBullet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCAddMissedBullet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCAddMissedBullet* New() const final {
    return CreateMaybeMessage<SCAddMissedBullet>(nullptr);
  }

  SCAddMissedBullet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCAddMissedBullet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCAddMissedBullet& from);
  void MergeFrom(const SCAddMissedBullet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCAddMissedBullet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCAddMissedBullet";
  }
  protected:
  explicit SCAddMissedBullet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairFieldNumber = 1,
    kBulletTypeFieldNumber = 2,
    kSourceUIDFieldNumber = 3,
    kAddNumFieldNumber = 4,
  };
  // int32 chair = 1;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bulletType = 2;
  void clear_bullettype();
  ::PROTOBUF_NAMESPACE_ID::int32 bullettype() const;
  void set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bullettype() const;
  void _internal_set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sourceUID = 3;
  void clear_sourceuid();
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid() const;
  void set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sourceuid() const;
  void _internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 addNum = 4;
  void clear_addnum();
  ::PROTOBUF_NAMESPACE_ID::int32 addnum() const;
  void set_addnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_addnum() const;
  void _internal_set_addnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCAddMissedBullet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  ::PROTOBUF_NAMESPACE_ID::int32 bullettype_;
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 addnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSUpdateBulletData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSUpdateBulletData) */ {
 public:
  inline CSUpdateBulletData() : CSUpdateBulletData(nullptr) {}
  virtual ~CSUpdateBulletData();

  CSUpdateBulletData(const CSUpdateBulletData& from);
  CSUpdateBulletData(CSUpdateBulletData&& from) noexcept
    : CSUpdateBulletData() {
    *this = ::std::move(from);
  }

  inline CSUpdateBulletData& operator=(const CSUpdateBulletData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSUpdateBulletData& operator=(CSUpdateBulletData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSUpdateBulletData& default_instance();

  static inline const CSUpdateBulletData* internal_default_instance() {
    return reinterpret_cast<const CSUpdateBulletData*>(
               &_CSUpdateBulletData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    176;

  friend void swap(CSUpdateBulletData& a, CSUpdateBulletData& b) {
    a.Swap(&b);
  }
  inline void Swap(CSUpdateBulletData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSUpdateBulletData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSUpdateBulletData* New() const final {
    return CreateMaybeMessage<CSUpdateBulletData>(nullptr);
  }

  CSUpdateBulletData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSUpdateBulletData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSUpdateBulletData& from);
  void MergeFrom(const CSUpdateBulletData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSUpdateBulletData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSUpdateBulletData";
  }
  protected:
  explicit CSUpdateBulletData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAngleFieldNumber = 1,
    kBulletTypeFieldNumber = 2,
    kSourceUIDFieldNumber = 3,
    kConfIDFieldNumber = 4,
    kIsShootingFieldNumber = 5,
  };
  // float angle = 1;
  void clear_angle();
  float angle() const;
  void set_angle(float value);
  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);
  public:

  // int32 bulletType = 2;
  void clear_bullettype();
  ::PROTOBUF_NAMESPACE_ID::int32 bullettype() const;
  void set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bullettype() const;
  void _internal_set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sourceUID = 3;
  void clear_sourceuid();
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid() const;
  void set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sourceuid() const;
  void _internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 confID = 4;
  void clear_confid();
  ::PROTOBUF_NAMESPACE_ID::int32 confid() const;
  void set_confid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_confid() const;
  void _internal_set_confid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isShooting = 5;
  void clear_isshooting();
  bool isshooting() const;
  void set_isshooting(bool value);
  private:
  bool _internal_isshooting() const;
  void _internal_set_isshooting(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSUpdateBulletData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float angle_;
  ::PROTOBUF_NAMESPACE_ID::int32 bullettype_;
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 confid_;
  bool isshooting_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCUpdateBulletData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCUpdateBulletData) */ {
 public:
  inline SCUpdateBulletData() : SCUpdateBulletData(nullptr) {}
  virtual ~SCUpdateBulletData();

  SCUpdateBulletData(const SCUpdateBulletData& from);
  SCUpdateBulletData(SCUpdateBulletData&& from) noexcept
    : SCUpdateBulletData() {
    *this = ::std::move(from);
  }

  inline SCUpdateBulletData& operator=(const SCUpdateBulletData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUpdateBulletData& operator=(SCUpdateBulletData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUpdateBulletData& default_instance();

  static inline const SCUpdateBulletData* internal_default_instance() {
    return reinterpret_cast<const SCUpdateBulletData*>(
               &_SCUpdateBulletData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    177;

  friend void swap(SCUpdateBulletData& a, SCUpdateBulletData& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUpdateBulletData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUpdateBulletData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUpdateBulletData* New() const final {
    return CreateMaybeMessage<SCUpdateBulletData>(nullptr);
  }

  SCUpdateBulletData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUpdateBulletData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUpdateBulletData& from);
  void MergeFrom(const SCUpdateBulletData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUpdateBulletData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCUpdateBulletData";
  }
  protected:
  explicit SCUpdateBulletData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairFieldNumber = 1,
    kAngleFieldNumber = 2,
    kBulletTypeFieldNumber = 3,
    kSourceUIDFieldNumber = 4,
    kConfIDFieldNumber = 5,
    kIsShootingFieldNumber = 6,
  };
  // int32 chair = 1;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float angle = 2;
  void clear_angle();
  float angle() const;
  void set_angle(float value);
  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);
  public:

  // int32 bulletType = 3;
  void clear_bullettype();
  ::PROTOBUF_NAMESPACE_ID::int32 bullettype() const;
  void set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bullettype() const;
  void _internal_set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sourceUID = 4;
  void clear_sourceuid();
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid() const;
  void set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sourceuid() const;
  void _internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 confID = 5;
  void clear_confid();
  ::PROTOBUF_NAMESPACE_ID::int32 confid() const;
  void set_confid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_confid() const;
  void _internal_set_confid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isShooting = 6;
  void clear_isshooting();
  bool isshooting() const;
  void set_isshooting(bool value);
  private:
  bool _internal_isshooting() const;
  void _internal_set_isshooting(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCUpdateBulletData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  float angle_;
  ::PROTOBUF_NAMESPACE_ID::int32 bullettype_;
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 confid_;
  bool isshooting_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSUseMissileBatch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSUseMissileBatch) */ {
 public:
  inline CSUseMissileBatch() : CSUseMissileBatch(nullptr) {}
  virtual ~CSUseMissileBatch();

  CSUseMissileBatch(const CSUseMissileBatch& from);
  CSUseMissileBatch(CSUseMissileBatch&& from) noexcept
    : CSUseMissileBatch() {
    *this = ::std::move(from);
  }

  inline CSUseMissileBatch& operator=(const CSUseMissileBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSUseMissileBatch& operator=(CSUseMissileBatch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSUseMissileBatch& default_instance();

  static inline const CSUseMissileBatch* internal_default_instance() {
    return reinterpret_cast<const CSUseMissileBatch*>(
               &_CSUseMissileBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    178;

  friend void swap(CSUseMissileBatch& a, CSUseMissileBatch& b) {
    a.Swap(&b);
  }
  inline void Swap(CSUseMissileBatch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSUseMissileBatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSUseMissileBatch* New() const final {
    return CreateMaybeMessage<CSUseMissileBatch>(nullptr);
  }

  CSUseMissileBatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSUseMissileBatch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSUseMissileBatch& from);
  void MergeFrom(const CSUseMissileBatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSUseMissileBatch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSUseMissileBatch";
  }
  protected:
  explicit CSUseMissileBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.CSUseMissileBatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCUseMissileBatch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCUseMissileBatch) */ {
 public:
  inline SCUseMissileBatch() : SCUseMissileBatch(nullptr) {}
  virtual ~SCUseMissileBatch();

  SCUseMissileBatch(const SCUseMissileBatch& from);
  SCUseMissileBatch(SCUseMissileBatch&& from) noexcept
    : SCUseMissileBatch() {
    *this = ::std::move(from);
  }

  inline SCUseMissileBatch& operator=(const SCUseMissileBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUseMissileBatch& operator=(SCUseMissileBatch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUseMissileBatch& default_instance();

  static inline const SCUseMissileBatch* internal_default_instance() {
    return reinterpret_cast<const SCUseMissileBatch*>(
               &_SCUseMissileBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    179;

  friend void swap(SCUseMissileBatch& a, SCUseMissileBatch& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUseMissileBatch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUseMissileBatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUseMissileBatch* New() const final {
    return CreateMaybeMessage<SCUseMissileBatch>(nullptr);
  }

  SCUseMissileBatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUseMissileBatch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUseMissileBatch& from);
  void MergeFrom(const SCUseMissileBatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUseMissileBatch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCUseMissileBatch";
  }
  protected:
  explicit SCUseMissileBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemainMissileFieldNumber = 4,
    kChairFieldNumber = 1,
    kTotalRewardFieldNumber = 2,
    kCurMoneyFieldNumber = 3,
  };
  // repeated .PlaneWar.MissileInfo remainMissile = 4;
  int remainmissile_size() const;
  private:
  int _internal_remainmissile_size() const;
  public:
  void clear_remainmissile();
  ::PlaneWar::MissileInfo* mutable_remainmissile(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MissileInfo >*
      mutable_remainmissile();
  private:
  const ::PlaneWar::MissileInfo& _internal_remainmissile(int index) const;
  ::PlaneWar::MissileInfo* _internal_add_remainmissile();
  public:
  const ::PlaneWar::MissileInfo& remainmissile(int index) const;
  ::PlaneWar::MissileInfo* add_remainmissile();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MissileInfo >&
      remainmissile() const;

  // int32 chair = 1;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 totalReward = 2;
  void clear_totalreward();
  ::PROTOBUF_NAMESPACE_ID::int32 totalreward() const;
  void set_totalreward(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_totalreward() const;
  void _internal_set_totalreward(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 curMoney = 3;
  void clear_curmoney();
  ::PROTOBUF_NAMESPACE_ID::int64 curmoney() const;
  void set_curmoney(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_curmoney() const;
  void _internal_set_curmoney(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCUseMissileBatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MissileInfo > remainmissile_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  ::PROTOBUF_NAMESPACE_ID::int32 totalreward_;
  ::PROTOBUF_NAMESPACE_ID::int64 curmoney_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSSyncPropsToHall PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSSyncPropsToHall) */ {
 public:
  inline CSSyncPropsToHall() : CSSyncPropsToHall(nullptr) {}
  virtual ~CSSyncPropsToHall();

  CSSyncPropsToHall(const CSSyncPropsToHall& from);
  CSSyncPropsToHall(CSSyncPropsToHall&& from) noexcept
    : CSSyncPropsToHall() {
    *this = ::std::move(from);
  }

  inline CSSyncPropsToHall& operator=(const CSSyncPropsToHall& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSyncPropsToHall& operator=(CSSyncPropsToHall&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSyncPropsToHall& default_instance();

  static inline const CSSyncPropsToHall* internal_default_instance() {
    return reinterpret_cast<const CSSyncPropsToHall*>(
               &_CSSyncPropsToHall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    180;

  friend void swap(CSSyncPropsToHall& a, CSSyncPropsToHall& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSyncPropsToHall* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSyncPropsToHall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSyncPropsToHall* New() const final {
    return CreateMaybeMessage<CSSyncPropsToHall>(nullptr);
  }

  CSSyncPropsToHall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSyncPropsToHall>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSyncPropsToHall& from);
  void MergeFrom(const CSSyncPropsToHall& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSyncPropsToHall* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSSyncPropsToHall";
  }
  protected:
  explicit CSSyncPropsToHall(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.CSSyncPropsToHall)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCSyncPropsToHall PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCSyncPropsToHall) */ {
 public:
  inline SCSyncPropsToHall() : SCSyncPropsToHall(nullptr) {}
  virtual ~SCSyncPropsToHall();

  SCSyncPropsToHall(const SCSyncPropsToHall& from);
  SCSyncPropsToHall(SCSyncPropsToHall&& from) noexcept
    : SCSyncPropsToHall() {
    *this = ::std::move(from);
  }

  inline SCSyncPropsToHall& operator=(const SCSyncPropsToHall& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSyncPropsToHall& operator=(SCSyncPropsToHall&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSyncPropsToHall& default_instance();

  static inline const SCSyncPropsToHall* internal_default_instance() {
    return reinterpret_cast<const SCSyncPropsToHall*>(
               &_SCSyncPropsToHall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    181;

  friend void swap(SCSyncPropsToHall& a, SCSyncPropsToHall& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSyncPropsToHall* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSyncPropsToHall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSyncPropsToHall* New() const final {
    return CreateMaybeMessage<SCSyncPropsToHall>(nullptr);
  }

  SCSyncPropsToHall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSyncPropsToHall>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSyncPropsToHall& from);
  void MergeFrom(const SCSyncPropsToHall& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSyncPropsToHall* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCSyncPropsToHall";
  }
  protected:
  explicit SCSyncPropsToHall(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.SCSyncPropsToHall)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSChangeTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSChangeTable) */ {
 public:
  inline CSChangeTable() : CSChangeTable(nullptr) {}
  virtual ~CSChangeTable();

  CSChangeTable(const CSChangeTable& from);
  CSChangeTable(CSChangeTable&& from) noexcept
    : CSChangeTable() {
    *this = ::std::move(from);
  }

  inline CSChangeTable& operator=(const CSChangeTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSChangeTable& operator=(CSChangeTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSChangeTable& default_instance();

  static inline const CSChangeTable* internal_default_instance() {
    return reinterpret_cast<const CSChangeTable*>(
               &_CSChangeTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    182;

  friend void swap(CSChangeTable& a, CSChangeTable& b) {
    a.Swap(&b);
  }
  inline void Swap(CSChangeTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSChangeTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSChangeTable* New() const final {
    return CreateMaybeMessage<CSChangeTable>(nullptr);
  }

  CSChangeTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSChangeTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSChangeTable& from);
  void MergeFrom(const CSChangeTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSChangeTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSChangeTable";
  }
  protected:
  explicit CSChangeTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.CSChangeTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCChangeTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCChangeTable) */ {
 public:
  inline SCChangeTable() : SCChangeTable(nullptr) {}
  virtual ~SCChangeTable();

  SCChangeTable(const SCChangeTable& from);
  SCChangeTable(SCChangeTable&& from) noexcept
    : SCChangeTable() {
    *this = ::std::move(from);
  }

  inline SCChangeTable& operator=(const SCChangeTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCChangeTable& operator=(SCChangeTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCChangeTable& default_instance();

  static inline const SCChangeTable* internal_default_instance() {
    return reinterpret_cast<const SCChangeTable*>(
               &_SCChangeTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    183;

  friend void swap(SCChangeTable& a, SCChangeTable& b) {
    a.Swap(&b);
  }
  inline void Swap(SCChangeTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCChangeTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCChangeTable* New() const final {
    return CreateMaybeMessage<SCChangeTable>(nullptr);
  }

  SCChangeTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCChangeTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCChangeTable& from);
  void MergeFrom(const SCChangeTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCChangeTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCChangeTable";
  }
  protected:
  explicit SCChangeTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.SCChangeTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSUseRoulette PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSUseRoulette) */ {
 public:
  inline CSUseRoulette() : CSUseRoulette(nullptr) {}
  virtual ~CSUseRoulette();

  CSUseRoulette(const CSUseRoulette& from);
  CSUseRoulette(CSUseRoulette&& from) noexcept
    : CSUseRoulette() {
    *this = ::std::move(from);
  }

  inline CSUseRoulette& operator=(const CSUseRoulette& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSUseRoulette& operator=(CSUseRoulette&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSUseRoulette& default_instance();

  static inline const CSUseRoulette* internal_default_instance() {
    return reinterpret_cast<const CSUseRoulette*>(
               &_CSUseRoulette_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    184;

  friend void swap(CSUseRoulette& a, CSUseRoulette& b) {
    a.Swap(&b);
  }
  inline void Swap(CSUseRoulette* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSUseRoulette* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSUseRoulette* New() const final {
    return CreateMaybeMessage<CSUseRoulette>(nullptr);
  }

  CSUseRoulette* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSUseRoulette>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSUseRoulette& from);
  void MergeFrom(const CSUseRoulette& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSUseRoulette* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSUseRoulette";
  }
  protected:
  explicit CSUseRoulette(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
  };
  // int32 iD = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSUseRoulette)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCUseRoulette PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCUseRoulette) */ {
 public:
  inline SCUseRoulette() : SCUseRoulette(nullptr) {}
  virtual ~SCUseRoulette();

  SCUseRoulette(const SCUseRoulette& from);
  SCUseRoulette(SCUseRoulette&& from) noexcept
    : SCUseRoulette() {
    *this = ::std::move(from);
  }

  inline SCUseRoulette& operator=(const SCUseRoulette& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUseRoulette& operator=(SCUseRoulette&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUseRoulette& default_instance();

  static inline const SCUseRoulette* internal_default_instance() {
    return reinterpret_cast<const SCUseRoulette*>(
               &_SCUseRoulette_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    185;

  friend void swap(SCUseRoulette& a, SCUseRoulette& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUseRoulette* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUseRoulette* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUseRoulette* New() const final {
    return CreateMaybeMessage<SCUseRoulette>(nullptr);
  }

  SCUseRoulette* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUseRoulette>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUseRoulette& from);
  void MergeFrom(const SCUseRoulette& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUseRoulette* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCUseRoulette";
  }
  protected:
  explicit SCUseRoulette(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouletteFieldNumber = 5,
    kChairFieldNumber = 1,
    kIdFieldNumber = 2,
    kCostNumFieldNumber = 3,
    kRatioFieldNumber = 4,
    kCurMoneyFieldNumber = 7,
    kRewardFieldNumber = 6,
  };
  // .PlaneWar.Roulette roulette = 5;
  bool has_roulette() const;
  private:
  bool _internal_has_roulette() const;
  public:
  void clear_roulette();
  const ::PlaneWar::Roulette& roulette() const;
  ::PlaneWar::Roulette* release_roulette();
  ::PlaneWar::Roulette* mutable_roulette();
  void set_allocated_roulette(::PlaneWar::Roulette* roulette);
  private:
  const ::PlaneWar::Roulette& _internal_roulette() const;
  ::PlaneWar::Roulette* _internal_mutable_roulette();
  public:
  void unsafe_arena_set_allocated_roulette(
      ::PlaneWar::Roulette* roulette);
  ::PlaneWar::Roulette* unsafe_arena_release_roulette();

  // int32 chair = 1;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 costNum = 3;
  void clear_costnum();
  ::PROTOBUF_NAMESPACE_ID::int32 costnum() const;
  void set_costnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_costnum() const;
  void _internal_set_costnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 4;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 curMoney = 7;
  void clear_curmoney();
  ::PROTOBUF_NAMESPACE_ID::int64 curmoney() const;
  void set_curmoney(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_curmoney() const;
  void _internal_set_curmoney(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 reward = 6;
  void clear_reward();
  ::PROTOBUF_NAMESPACE_ID::int32 reward() const;
  void set_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reward() const;
  void _internal_set_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCUseRoulette)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::Roulette* roulette_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 costnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  ::PROTOBUF_NAMESPACE_ID::int64 curmoney_;
  ::PROTOBUF_NAMESPACE_ID::int32 reward_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSRedEnvelopePoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSRedEnvelopePoint) */ {
 public:
  inline CSRedEnvelopePoint() : CSRedEnvelopePoint(nullptr) {}
  virtual ~CSRedEnvelopePoint();

  CSRedEnvelopePoint(const CSRedEnvelopePoint& from);
  CSRedEnvelopePoint(CSRedEnvelopePoint&& from) noexcept
    : CSRedEnvelopePoint() {
    *this = ::std::move(from);
  }

  inline CSRedEnvelopePoint& operator=(const CSRedEnvelopePoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRedEnvelopePoint& operator=(CSRedEnvelopePoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSRedEnvelopePoint& default_instance();

  static inline const CSRedEnvelopePoint* internal_default_instance() {
    return reinterpret_cast<const CSRedEnvelopePoint*>(
               &_CSRedEnvelopePoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    186;

  friend void swap(CSRedEnvelopePoint& a, CSRedEnvelopePoint& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRedEnvelopePoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRedEnvelopePoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSRedEnvelopePoint* New() const final {
    return CreateMaybeMessage<CSRedEnvelopePoint>(nullptr);
  }

  CSRedEnvelopePoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSRedEnvelopePoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSRedEnvelopePoint& from);
  void MergeFrom(const CSRedEnvelopePoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRedEnvelopePoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSRedEnvelopePoint";
  }
  protected:
  explicit CSRedEnvelopePoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.CSRedEnvelopePoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class RedOpenInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.RedOpenInfo) */ {
 public:
  inline RedOpenInfo() : RedOpenInfo(nullptr) {}
  virtual ~RedOpenInfo();

  RedOpenInfo(const RedOpenInfo& from);
  RedOpenInfo(RedOpenInfo&& from) noexcept
    : RedOpenInfo() {
    *this = ::std::move(from);
  }

  inline RedOpenInfo& operator=(const RedOpenInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedOpenInfo& operator=(RedOpenInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RedOpenInfo& default_instance();

  static inline const RedOpenInfo* internal_default_instance() {
    return reinterpret_cast<const RedOpenInfo*>(
               &_RedOpenInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    187;

  friend void swap(RedOpenInfo& a, RedOpenInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RedOpenInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RedOpenInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RedOpenInfo* New() const final {
    return CreateMaybeMessage<RedOpenInfo>(nullptr);
  }

  RedOpenInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RedOpenInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RedOpenInfo& from);
  void MergeFrom(const RedOpenInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedOpenInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.RedOpenInfo";
  }
  protected:
  explicit RedOpenInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kUnLockVipLevelFieldNumber = 2,
  };
  // .PlaneWar.RedOpenStatus status = 1;
  void clear_status();
  ::PlaneWar::RedOpenStatus status() const;
  void set_status(::PlaneWar::RedOpenStatus value);
  private:
  ::PlaneWar::RedOpenStatus _internal_status() const;
  void _internal_set_status(::PlaneWar::RedOpenStatus value);
  public:

  // int32 unLockVipLevel = 2;
  void clear_unlockviplevel();
  ::PROTOBUF_NAMESPACE_ID::int32 unlockviplevel() const;
  void set_unlockviplevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_unlockviplevel() const;
  void _internal_set_unlockviplevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.RedOpenInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::int32 unlockviplevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCRedEnvelopePoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCRedEnvelopePoint) */ {
 public:
  inline SCRedEnvelopePoint() : SCRedEnvelopePoint(nullptr) {}
  virtual ~SCRedEnvelopePoint();

  SCRedEnvelopePoint(const SCRedEnvelopePoint& from);
  SCRedEnvelopePoint(SCRedEnvelopePoint&& from) noexcept
    : SCRedEnvelopePoint() {
    *this = ::std::move(from);
  }

  inline SCRedEnvelopePoint& operator=(const SCRedEnvelopePoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCRedEnvelopePoint& operator=(SCRedEnvelopePoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCRedEnvelopePoint& default_instance();

  static inline const SCRedEnvelopePoint* internal_default_instance() {
    return reinterpret_cast<const SCRedEnvelopePoint*>(
               &_SCRedEnvelopePoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    188;

  friend void swap(SCRedEnvelopePoint& a, SCRedEnvelopePoint& b) {
    a.Swap(&b);
  }
  inline void Swap(SCRedEnvelopePoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCRedEnvelopePoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCRedEnvelopePoint* New() const final {
    return CreateMaybeMessage<SCRedEnvelopePoint>(nullptr);
  }

  SCRedEnvelopePoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCRedEnvelopePoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCRedEnvelopePoint& from);
  void MergeFrom(const SCRedEnvelopePoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCRedEnvelopePoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCRedEnvelopePoint";
  }
  protected:
  explicit SCRedEnvelopePoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedOpenListFieldNumber = 4,
    kCurPointFieldNumber = 1,
    kMaxPointFieldNumber = 2,
    kCostPointFieldNumber = 3,
  };
  // repeated .PlaneWar.RedOpenInfo redOpenList = 4;
  int redopenlist_size() const;
  private:
  int _internal_redopenlist_size() const;
  public:
  void clear_redopenlist();
  ::PlaneWar::RedOpenInfo* mutable_redopenlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::RedOpenInfo >*
      mutable_redopenlist();
  private:
  const ::PlaneWar::RedOpenInfo& _internal_redopenlist(int index) const;
  ::PlaneWar::RedOpenInfo* _internal_add_redopenlist();
  public:
  const ::PlaneWar::RedOpenInfo& redopenlist(int index) const;
  ::PlaneWar::RedOpenInfo* add_redopenlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::RedOpenInfo >&
      redopenlist() const;

  // int32 curPoint = 1;
  void clear_curpoint();
  ::PROTOBUF_NAMESPACE_ID::int32 curpoint() const;
  void set_curpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curpoint() const;
  void _internal_set_curpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxPoint = 2;
  void clear_maxpoint();
  ::PROTOBUF_NAMESPACE_ID::int32 maxpoint() const;
  void set_maxpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxpoint() const;
  void _internal_set_maxpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 costPoint = 3;
  void clear_costpoint();
  ::PROTOBUF_NAMESPACE_ID::int32 costpoint() const;
  void set_costpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_costpoint() const;
  void _internal_set_costpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCRedEnvelopePoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::RedOpenInfo > redopenlist_;
  ::PROTOBUF_NAMESPACE_ID::int32 curpoint_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxpoint_;
  ::PROTOBUF_NAMESPACE_ID::int32 costpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSRedEnvelopeInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSRedEnvelopeInfo) */ {
 public:
  inline CSRedEnvelopeInfo() : CSRedEnvelopeInfo(nullptr) {}
  virtual ~CSRedEnvelopeInfo();

  CSRedEnvelopeInfo(const CSRedEnvelopeInfo& from);
  CSRedEnvelopeInfo(CSRedEnvelopeInfo&& from) noexcept
    : CSRedEnvelopeInfo() {
    *this = ::std::move(from);
  }

  inline CSRedEnvelopeInfo& operator=(const CSRedEnvelopeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRedEnvelopeInfo& operator=(CSRedEnvelopeInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSRedEnvelopeInfo& default_instance();

  static inline const CSRedEnvelopeInfo* internal_default_instance() {
    return reinterpret_cast<const CSRedEnvelopeInfo*>(
               &_CSRedEnvelopeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    189;

  friend void swap(CSRedEnvelopeInfo& a, CSRedEnvelopeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRedEnvelopeInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRedEnvelopeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSRedEnvelopeInfo* New() const final {
    return CreateMaybeMessage<CSRedEnvelopeInfo>(nullptr);
  }

  CSRedEnvelopeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSRedEnvelopeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSRedEnvelopeInfo& from);
  void MergeFrom(const CSRedEnvelopeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRedEnvelopeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSRedEnvelopeInfo";
  }
  protected:
  explicit CSRedEnvelopeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsOpenFieldNumber = 1,
  };
  // bool isOpen = 1;
  void clear_isopen();
  bool isopen() const;
  void set_isopen(bool value);
  private:
  bool _internal_isopen() const;
  void _internal_set_isopen(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSRedEnvelopeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool isopen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class RedInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.RedInfo) */ {
 public:
  inline RedInfo() : RedInfo(nullptr) {}
  virtual ~RedInfo();

  RedInfo(const RedInfo& from);
  RedInfo(RedInfo&& from) noexcept
    : RedInfo() {
    *this = ::std::move(from);
  }

  inline RedInfo& operator=(const RedInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedInfo& operator=(RedInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RedInfo& default_instance();

  static inline const RedInfo* internal_default_instance() {
    return reinterpret_cast<const RedInfo*>(
               &_RedInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    190;

  friend void swap(RedInfo& a, RedInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RedInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RedInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RedInfo* New() const final {
    return CreateMaybeMessage<RedInfo>(nullptr);
  }

  RedInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RedInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RedInfo& from);
  void MergeFrom(const RedInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.RedInfo";
  }
  protected:
  explicit RedInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCostFieldNumber = 1,
  };
  // int32 cost = 1;
  void clear_cost();
  ::PROTOBUF_NAMESPACE_ID::int32 cost() const;
  void set_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cost() const;
  void _internal_set_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.RedInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 cost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCRedEnvelopeInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCRedEnvelopeInfo) */ {
 public:
  inline SCRedEnvelopeInfo() : SCRedEnvelopeInfo(nullptr) {}
  virtual ~SCRedEnvelopeInfo();

  SCRedEnvelopeInfo(const SCRedEnvelopeInfo& from);
  SCRedEnvelopeInfo(SCRedEnvelopeInfo&& from) noexcept
    : SCRedEnvelopeInfo() {
    *this = ::std::move(from);
  }

  inline SCRedEnvelopeInfo& operator=(const SCRedEnvelopeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCRedEnvelopeInfo& operator=(SCRedEnvelopeInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCRedEnvelopeInfo& default_instance();

  static inline const SCRedEnvelopeInfo* internal_default_instance() {
    return reinterpret_cast<const SCRedEnvelopeInfo*>(
               &_SCRedEnvelopeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    191;

  friend void swap(SCRedEnvelopeInfo& a, SCRedEnvelopeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCRedEnvelopeInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCRedEnvelopeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCRedEnvelopeInfo* New() const final {
    return CreateMaybeMessage<SCRedEnvelopeInfo>(nullptr);
  }

  SCRedEnvelopeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCRedEnvelopeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCRedEnvelopeInfo& from);
  void MergeFrom(const SCRedEnvelopeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCRedEnvelopeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCRedEnvelopeInfo";
  }
  protected:
  explicit SCRedEnvelopeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedListFieldNumber = 1,
  };
  // repeated .PlaneWar.RedInfo redList = 1;
  int redlist_size() const;
  private:
  int _internal_redlist_size() const;
  public:
  void clear_redlist();
  ::PlaneWar::RedInfo* mutable_redlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::RedInfo >*
      mutable_redlist();
  private:
  const ::PlaneWar::RedInfo& _internal_redlist(int index) const;
  ::PlaneWar::RedInfo* _internal_add_redlist();
  public:
  const ::PlaneWar::RedInfo& redlist(int index) const;
  ::PlaneWar::RedInfo* add_redlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::RedInfo >&
      redlist() const;

  // @@protoc_insertion_point(class_scope:PlaneWar.SCRedEnvelopeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::RedInfo > redlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSOpenRedEnvelope PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSOpenRedEnvelope) */ {
 public:
  inline CSOpenRedEnvelope() : CSOpenRedEnvelope(nullptr) {}
  virtual ~CSOpenRedEnvelope();

  CSOpenRedEnvelope(const CSOpenRedEnvelope& from);
  CSOpenRedEnvelope(CSOpenRedEnvelope&& from) noexcept
    : CSOpenRedEnvelope() {
    *this = ::std::move(from);
  }

  inline CSOpenRedEnvelope& operator=(const CSOpenRedEnvelope& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOpenRedEnvelope& operator=(CSOpenRedEnvelope&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSOpenRedEnvelope& default_instance();

  static inline const CSOpenRedEnvelope* internal_default_instance() {
    return reinterpret_cast<const CSOpenRedEnvelope*>(
               &_CSOpenRedEnvelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    192;

  friend void swap(CSOpenRedEnvelope& a, CSOpenRedEnvelope& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOpenRedEnvelope* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOpenRedEnvelope* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSOpenRedEnvelope* New() const final {
    return CreateMaybeMessage<CSOpenRedEnvelope>(nullptr);
  }

  CSOpenRedEnvelope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSOpenRedEnvelope>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSOpenRedEnvelope& from);
  void MergeFrom(const CSOpenRedEnvelope& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOpenRedEnvelope* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSOpenRedEnvelope";
  }
  protected:
  explicit CSOpenRedEnvelope(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // int32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSOpenRedEnvelope)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class RedUpgradeInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.RedUpgradeInfo) */ {
 public:
  inline RedUpgradeInfo() : RedUpgradeInfo(nullptr) {}
  virtual ~RedUpgradeInfo();

  RedUpgradeInfo(const RedUpgradeInfo& from);
  RedUpgradeInfo(RedUpgradeInfo&& from) noexcept
    : RedUpgradeInfo() {
    *this = ::std::move(from);
  }

  inline RedUpgradeInfo& operator=(const RedUpgradeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedUpgradeInfo& operator=(RedUpgradeInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RedUpgradeInfo& default_instance();

  static inline const RedUpgradeInfo* internal_default_instance() {
    return reinterpret_cast<const RedUpgradeInfo*>(
               &_RedUpgradeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    193;

  friend void swap(RedUpgradeInfo& a, RedUpgradeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RedUpgradeInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RedUpgradeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RedUpgradeInfo* New() const final {
    return CreateMaybeMessage<RedUpgradeInfo>(nullptr);
  }

  RedUpgradeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RedUpgradeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RedUpgradeInfo& from);
  void MergeFrom(const RedUpgradeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedUpgradeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.RedUpgradeInfo";
  }
  protected:
  explicit RedUpgradeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeastRewardFieldNumber = 1,
    kMayAddRewardFieldNumber = 2,
    kMaxUpgradeNumFieldNumber = 3,
    kRemainUpgradeNumFieldNumber = 4,
  };
  // int32 leastReward = 1;
  void clear_leastreward();
  ::PROTOBUF_NAMESPACE_ID::int32 leastreward() const;
  void set_leastreward(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_leastreward() const;
  void _internal_set_leastreward(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mayAddReward = 2;
  void clear_mayaddreward();
  ::PROTOBUF_NAMESPACE_ID::int32 mayaddreward() const;
  void set_mayaddreward(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mayaddreward() const;
  void _internal_set_mayaddreward(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxUpgradeNum = 3;
  void clear_maxupgradenum();
  ::PROTOBUF_NAMESPACE_ID::int32 maxupgradenum() const;
  void set_maxupgradenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxupgradenum() const;
  void _internal_set_maxupgradenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 remainUpgradeNum = 4;
  void clear_remainupgradenum();
  ::PROTOBUF_NAMESPACE_ID::int32 remainupgradenum() const;
  void set_remainupgradenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_remainupgradenum() const;
  void _internal_set_remainupgradenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.RedUpgradeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 leastreward_;
  ::PROTOBUF_NAMESPACE_ID::int32 mayaddreward_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxupgradenum_;
  ::PROTOBUF_NAMESPACE_ID::int32 remainupgradenum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCOpenRedEnvelope PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCOpenRedEnvelope) */ {
 public:
  inline SCOpenRedEnvelope() : SCOpenRedEnvelope(nullptr) {}
  virtual ~SCOpenRedEnvelope();

  SCOpenRedEnvelope(const SCOpenRedEnvelope& from);
  SCOpenRedEnvelope(SCOpenRedEnvelope&& from) noexcept
    : SCOpenRedEnvelope() {
    *this = ::std::move(from);
  }

  inline SCOpenRedEnvelope& operator=(const SCOpenRedEnvelope& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCOpenRedEnvelope& operator=(SCOpenRedEnvelope&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCOpenRedEnvelope& default_instance();

  static inline const SCOpenRedEnvelope* internal_default_instance() {
    return reinterpret_cast<const SCOpenRedEnvelope*>(
               &_SCOpenRedEnvelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    194;

  friend void swap(SCOpenRedEnvelope& a, SCOpenRedEnvelope& b) {
    a.Swap(&b);
  }
  inline void Swap(SCOpenRedEnvelope* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCOpenRedEnvelope* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCOpenRedEnvelope* New() const final {
    return CreateMaybeMessage<SCOpenRedEnvelope>(nullptr);
  }

  SCOpenRedEnvelope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCOpenRedEnvelope>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCOpenRedEnvelope& from);
  void MergeFrom(const SCOpenRedEnvelope& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCOpenRedEnvelope* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCOpenRedEnvelope";
  }
  protected:
  explicit SCOpenRedEnvelope(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpgradeInfoFieldNumber = 3,
    kRawRewardFieldNumber = 1,
    kGrantThresholdFieldNumber = 2,
  };
  // .PlaneWar.RedUpgradeInfo upgradeInfo = 3;
  bool has_upgradeinfo() const;
  private:
  bool _internal_has_upgradeinfo() const;
  public:
  void clear_upgradeinfo();
  const ::PlaneWar::RedUpgradeInfo& upgradeinfo() const;
  ::PlaneWar::RedUpgradeInfo* release_upgradeinfo();
  ::PlaneWar::RedUpgradeInfo* mutable_upgradeinfo();
  void set_allocated_upgradeinfo(::PlaneWar::RedUpgradeInfo* upgradeinfo);
  private:
  const ::PlaneWar::RedUpgradeInfo& _internal_upgradeinfo() const;
  ::PlaneWar::RedUpgradeInfo* _internal_mutable_upgradeinfo();
  public:
  void unsafe_arena_set_allocated_upgradeinfo(
      ::PlaneWar::RedUpgradeInfo* upgradeinfo);
  ::PlaneWar::RedUpgradeInfo* unsafe_arena_release_upgradeinfo();

  // int32 rawReward = 1;
  void clear_rawreward();
  ::PROTOBUF_NAMESPACE_ID::int32 rawreward() const;
  void set_rawreward(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rawreward() const;
  void _internal_set_rawreward(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 grantThreshold = 2;
  void clear_grantthreshold();
  ::PROTOBUF_NAMESPACE_ID::int32 grantthreshold() const;
  void set_grantthreshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grantthreshold() const;
  void _internal_set_grantthreshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCOpenRedEnvelope)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::RedUpgradeInfo* upgradeinfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 rawreward_;
  ::PROTOBUF_NAMESPACE_ID::int32 grantthreshold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSUpgradeRedEnvelope PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSUpgradeRedEnvelope) */ {
 public:
  inline CSUpgradeRedEnvelope() : CSUpgradeRedEnvelope(nullptr) {}
  virtual ~CSUpgradeRedEnvelope();

  CSUpgradeRedEnvelope(const CSUpgradeRedEnvelope& from);
  CSUpgradeRedEnvelope(CSUpgradeRedEnvelope&& from) noexcept
    : CSUpgradeRedEnvelope() {
    *this = ::std::move(from);
  }

  inline CSUpgradeRedEnvelope& operator=(const CSUpgradeRedEnvelope& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSUpgradeRedEnvelope& operator=(CSUpgradeRedEnvelope&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSUpgradeRedEnvelope& default_instance();

  static inline const CSUpgradeRedEnvelope* internal_default_instance() {
    return reinterpret_cast<const CSUpgradeRedEnvelope*>(
               &_CSUpgradeRedEnvelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    195;

  friend void swap(CSUpgradeRedEnvelope& a, CSUpgradeRedEnvelope& b) {
    a.Swap(&b);
  }
  inline void Swap(CSUpgradeRedEnvelope* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSUpgradeRedEnvelope* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSUpgradeRedEnvelope* New() const final {
    return CreateMaybeMessage<CSUpgradeRedEnvelope>(nullptr);
  }

  CSUpgradeRedEnvelope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSUpgradeRedEnvelope>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSUpgradeRedEnvelope& from);
  void MergeFrom(const CSUpgradeRedEnvelope& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSUpgradeRedEnvelope* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSUpgradeRedEnvelope";
  }
  protected:
  explicit CSUpgradeRedEnvelope(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsUpgradeFieldNumber = 1,
  };
  // bool isUpgrade = 1;
  void clear_isupgrade();
  bool isupgrade() const;
  void set_isupgrade(bool value);
  private:
  bool _internal_isupgrade() const;
  void _internal_set_isupgrade(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSUpgradeRedEnvelope)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool isupgrade_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCUpgradeRedEnvelope PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCUpgradeRedEnvelope) */ {
 public:
  inline SCUpgradeRedEnvelope() : SCUpgradeRedEnvelope(nullptr) {}
  virtual ~SCUpgradeRedEnvelope();

  SCUpgradeRedEnvelope(const SCUpgradeRedEnvelope& from);
  SCUpgradeRedEnvelope(SCUpgradeRedEnvelope&& from) noexcept
    : SCUpgradeRedEnvelope() {
    *this = ::std::move(from);
  }

  inline SCUpgradeRedEnvelope& operator=(const SCUpgradeRedEnvelope& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUpgradeRedEnvelope& operator=(SCUpgradeRedEnvelope&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUpgradeRedEnvelope& default_instance();

  static inline const SCUpgradeRedEnvelope* internal_default_instance() {
    return reinterpret_cast<const SCUpgradeRedEnvelope*>(
               &_SCUpgradeRedEnvelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    196;

  friend void swap(SCUpgradeRedEnvelope& a, SCUpgradeRedEnvelope& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUpgradeRedEnvelope* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUpgradeRedEnvelope* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUpgradeRedEnvelope* New() const final {
    return CreateMaybeMessage<SCUpgradeRedEnvelope>(nullptr);
  }

  SCUpgradeRedEnvelope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUpgradeRedEnvelope>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUpgradeRedEnvelope& from);
  void MergeFrom(const SCUpgradeRedEnvelope& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUpgradeRedEnvelope* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCUpgradeRedEnvelope";
  }
  protected:
  explicit SCUpgradeRedEnvelope(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpgradeInfoFieldNumber = 5,
    kResultFieldNumber = 1,
    kCurRewardFieldNumber = 2,
    kGrantThresholdFieldNumber = 3,
    kAddRewardFieldNumber = 4,
  };
  // .PlaneWar.RedUpgradeInfo upgradeInfo = 5;
  bool has_upgradeinfo() const;
  private:
  bool _internal_has_upgradeinfo() const;
  public:
  void clear_upgradeinfo();
  const ::PlaneWar::RedUpgradeInfo& upgradeinfo() const;
  ::PlaneWar::RedUpgradeInfo* release_upgradeinfo();
  ::PlaneWar::RedUpgradeInfo* mutable_upgradeinfo();
  void set_allocated_upgradeinfo(::PlaneWar::RedUpgradeInfo* upgradeinfo);
  private:
  const ::PlaneWar::RedUpgradeInfo& _internal_upgradeinfo() const;
  ::PlaneWar::RedUpgradeInfo* _internal_mutable_upgradeinfo();
  public:
  void unsafe_arena_set_allocated_upgradeinfo(
      ::PlaneWar::RedUpgradeInfo* upgradeinfo);
  ::PlaneWar::RedUpgradeInfo* unsafe_arena_release_upgradeinfo();

  // .PlaneWar.UpgradeRedResult result = 1;
  void clear_result();
  ::PlaneWar::UpgradeRedResult result() const;
  void set_result(::PlaneWar::UpgradeRedResult value);
  private:
  ::PlaneWar::UpgradeRedResult _internal_result() const;
  void _internal_set_result(::PlaneWar::UpgradeRedResult value);
  public:

  // int32 curReward = 2;
  void clear_curreward();
  ::PROTOBUF_NAMESPACE_ID::int32 curreward() const;
  void set_curreward(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curreward() const;
  void _internal_set_curreward(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 grantThreshold = 3;
  void clear_grantthreshold();
  ::PROTOBUF_NAMESPACE_ID::int32 grantthreshold() const;
  void set_grantthreshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grantthreshold() const;
  void _internal_set_grantthreshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 addReward = 4;
  void clear_addreward();
  ::PROTOBUF_NAMESPACE_ID::int32 addreward() const;
  void set_addreward(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_addreward() const;
  void _internal_set_addreward(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCUpgradeRedEnvelope)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::RedUpgradeInfo* upgradeinfo_;
  int result_;
  ::PROTOBUF_NAMESPACE_ID::int32 curreward_;
  ::PROTOBUF_NAMESPACE_ID::int32 grantthreshold_;
  ::PROTOBUF_NAMESPACE_ID::int32 addreward_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSCommonRedEnvelopeInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSCommonRedEnvelopeInfo) */ {
 public:
  inline CSCommonRedEnvelopeInfo() : CSCommonRedEnvelopeInfo(nullptr) {}
  virtual ~CSCommonRedEnvelopeInfo();

  CSCommonRedEnvelopeInfo(const CSCommonRedEnvelopeInfo& from);
  CSCommonRedEnvelopeInfo(CSCommonRedEnvelopeInfo&& from) noexcept
    : CSCommonRedEnvelopeInfo() {
    *this = ::std::move(from);
  }

  inline CSCommonRedEnvelopeInfo& operator=(const CSCommonRedEnvelopeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSCommonRedEnvelopeInfo& operator=(CSCommonRedEnvelopeInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSCommonRedEnvelopeInfo& default_instance();

  static inline const CSCommonRedEnvelopeInfo* internal_default_instance() {
    return reinterpret_cast<const CSCommonRedEnvelopeInfo*>(
               &_CSCommonRedEnvelopeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    197;

  friend void swap(CSCommonRedEnvelopeInfo& a, CSCommonRedEnvelopeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSCommonRedEnvelopeInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSCommonRedEnvelopeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSCommonRedEnvelopeInfo* New() const final {
    return CreateMaybeMessage<CSCommonRedEnvelopeInfo>(nullptr);
  }

  CSCommonRedEnvelopeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSCommonRedEnvelopeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSCommonRedEnvelopeInfo& from);
  void MergeFrom(const CSCommonRedEnvelopeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSCommonRedEnvelopeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSCommonRedEnvelopeInfo";
  }
  protected:
  explicit CSCommonRedEnvelopeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsOpenFieldNumber = 1,
  };
  // bool isOpen = 1;
  void clear_isopen();
  bool isopen() const;
  void set_isopen(bool value);
  private:
  bool _internal_isopen() const;
  void _internal_set_isopen(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSCommonRedEnvelopeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool isopen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CommonRedInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CommonRedInfo) */ {
 public:
  inline CommonRedInfo() : CommonRedInfo(nullptr) {}
  virtual ~CommonRedInfo();

  CommonRedInfo(const CommonRedInfo& from);
  CommonRedInfo(CommonRedInfo&& from) noexcept
    : CommonRedInfo() {
    *this = ::std::move(from);
  }

  inline CommonRedInfo& operator=(const CommonRedInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonRedInfo& operator=(CommonRedInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommonRedInfo& default_instance();

  static inline const CommonRedInfo* internal_default_instance() {
    return reinterpret_cast<const CommonRedInfo*>(
               &_CommonRedInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    198;

  friend void swap(CommonRedInfo& a, CommonRedInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonRedInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonRedInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonRedInfo* New() const final {
    return CreateMaybeMessage<CommonRedInfo>(nullptr);
  }

  CommonRedInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonRedInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonRedInfo& from);
  void MergeFrom(const CommonRedInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonRedInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CommonRedInfo";
  }
  protected:
  explicit CommonRedInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSourcePlayerNickFieldNumber = 4,
    kRewardFieldNumber = 2,
    kExpireFieldNumber = 3,
    kTryOpenNumFieldNumber = 5,
    kCostFieldNumber = 6,
    kIsSelfGrantFieldNumber = 7,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string sourcePlayerNick = 4;
  void clear_sourceplayernick();
  const std::string& sourceplayernick() const;
  void set_sourceplayernick(const std::string& value);
  void set_sourceplayernick(std::string&& value);
  void set_sourceplayernick(const char* value);
  void set_sourceplayernick(const char* value, size_t size);
  std::string* mutable_sourceplayernick();
  std::string* release_sourceplayernick();
  void set_allocated_sourceplayernick(std::string* sourceplayernick);
  private:
  const std::string& _internal_sourceplayernick() const;
  void _internal_set_sourceplayernick(const std::string& value);
  std::string* _internal_mutable_sourceplayernick();
  public:

  // int32 reward = 2;
  void clear_reward();
  ::PROTOBUF_NAMESPACE_ID::int32 reward() const;
  void set_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reward() const;
  void _internal_set_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 expire = 3;
  void clear_expire();
  ::PROTOBUF_NAMESPACE_ID::int32 expire() const;
  void set_expire(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_expire() const;
  void _internal_set_expire(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tryOpenNum = 5;
  void clear_tryopennum();
  ::PROTOBUF_NAMESPACE_ID::int32 tryopennum() const;
  void set_tryopennum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tryopennum() const;
  void _internal_set_tryopennum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cost = 6;
  void clear_cost();
  ::PROTOBUF_NAMESPACE_ID::int32 cost() const;
  void set_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cost() const;
  void _internal_set_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isSelfGrant = 7;
  void clear_isselfgrant();
  bool isselfgrant() const;
  void set_isselfgrant(bool value);
  private:
  bool _internal_isselfgrant() const;
  void _internal_set_isselfgrant(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CommonRedInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourceplayernick_;
  ::PROTOBUF_NAMESPACE_ID::int32 reward_;
  ::PROTOBUF_NAMESPACE_ID::int32 expire_;
  ::PROTOBUF_NAMESPACE_ID::int32 tryopennum_;
  ::PROTOBUF_NAMESPACE_ID::int32 cost_;
  bool isselfgrant_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCCommonRedEnvelopeInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCCommonRedEnvelopeInfo) */ {
 public:
  inline SCCommonRedEnvelopeInfo() : SCCommonRedEnvelopeInfo(nullptr) {}
  virtual ~SCCommonRedEnvelopeInfo();

  SCCommonRedEnvelopeInfo(const SCCommonRedEnvelopeInfo& from);
  SCCommonRedEnvelopeInfo(SCCommonRedEnvelopeInfo&& from) noexcept
    : SCCommonRedEnvelopeInfo() {
    *this = ::std::move(from);
  }

  inline SCCommonRedEnvelopeInfo& operator=(const SCCommonRedEnvelopeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCCommonRedEnvelopeInfo& operator=(SCCommonRedEnvelopeInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCCommonRedEnvelopeInfo& default_instance();

  static inline const SCCommonRedEnvelopeInfo* internal_default_instance() {
    return reinterpret_cast<const SCCommonRedEnvelopeInfo*>(
               &_SCCommonRedEnvelopeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    199;

  friend void swap(SCCommonRedEnvelopeInfo& a, SCCommonRedEnvelopeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCCommonRedEnvelopeInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCCommonRedEnvelopeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCCommonRedEnvelopeInfo* New() const final {
    return CreateMaybeMessage<SCCommonRedEnvelopeInfo>(nullptr);
  }

  SCCommonRedEnvelopeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCCommonRedEnvelopeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCCommonRedEnvelopeInfo& from);
  void MergeFrom(const SCCommonRedEnvelopeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCCommonRedEnvelopeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCCommonRedEnvelopeInfo";
  }
  protected:
  explicit SCCommonRedEnvelopeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedListFieldNumber = 1,
    kGrantThresholdFieldNumber = 2,
    kMaxShowNumFieldNumber = 3,
    kMaxOpenNumFieldNumber = 4,
    kRemainOpenNumFieldNumber = 5,
  };
  // repeated .PlaneWar.CommonRedInfo redList = 1;
  int redlist_size() const;
  private:
  int _internal_redlist_size() const;
  public:
  void clear_redlist();
  ::PlaneWar::CommonRedInfo* mutable_redlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::CommonRedInfo >*
      mutable_redlist();
  private:
  const ::PlaneWar::CommonRedInfo& _internal_redlist(int index) const;
  ::PlaneWar::CommonRedInfo* _internal_add_redlist();
  public:
  const ::PlaneWar::CommonRedInfo& redlist(int index) const;
  ::PlaneWar::CommonRedInfo* add_redlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::CommonRedInfo >&
      redlist() const;

  // int32 grantThreshold = 2;
  void clear_grantthreshold();
  ::PROTOBUF_NAMESPACE_ID::int32 grantthreshold() const;
  void set_grantthreshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grantthreshold() const;
  void _internal_set_grantthreshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxShowNum = 3;
  void clear_maxshownum();
  ::PROTOBUF_NAMESPACE_ID::int32 maxshownum() const;
  void set_maxshownum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxshownum() const;
  void _internal_set_maxshownum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxOpenNum = 4;
  void clear_maxopennum();
  ::PROTOBUF_NAMESPACE_ID::int32 maxopennum() const;
  void set_maxopennum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxopennum() const;
  void _internal_set_maxopennum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 remainOpenNum = 5;
  void clear_remainopennum();
  ::PROTOBUF_NAMESPACE_ID::int32 remainopennum() const;
  void set_remainopennum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_remainopennum() const;
  void _internal_set_remainopennum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCCommonRedEnvelopeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::CommonRedInfo > redlist_;
  ::PROTOBUF_NAMESPACE_ID::int32 grantthreshold_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxshownum_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxopennum_;
  ::PROTOBUF_NAMESPACE_ID::int32 remainopennum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSOpenCommonRedEnvelope PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSOpenCommonRedEnvelope) */ {
 public:
  inline CSOpenCommonRedEnvelope() : CSOpenCommonRedEnvelope(nullptr) {}
  virtual ~CSOpenCommonRedEnvelope();

  CSOpenCommonRedEnvelope(const CSOpenCommonRedEnvelope& from);
  CSOpenCommonRedEnvelope(CSOpenCommonRedEnvelope&& from) noexcept
    : CSOpenCommonRedEnvelope() {
    *this = ::std::move(from);
  }

  inline CSOpenCommonRedEnvelope& operator=(const CSOpenCommonRedEnvelope& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOpenCommonRedEnvelope& operator=(CSOpenCommonRedEnvelope&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSOpenCommonRedEnvelope& default_instance();

  static inline const CSOpenCommonRedEnvelope* internal_default_instance() {
    return reinterpret_cast<const CSOpenCommonRedEnvelope*>(
               &_CSOpenCommonRedEnvelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    200;

  friend void swap(CSOpenCommonRedEnvelope& a, CSOpenCommonRedEnvelope& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOpenCommonRedEnvelope* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOpenCommonRedEnvelope* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSOpenCommonRedEnvelope* New() const final {
    return CreateMaybeMessage<CSOpenCommonRedEnvelope>(nullptr);
  }

  CSOpenCommonRedEnvelope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSOpenCommonRedEnvelope>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSOpenCommonRedEnvelope& from);
  void MergeFrom(const CSOpenCommonRedEnvelope& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOpenCommonRedEnvelope* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSOpenCommonRedEnvelope";
  }
  protected:
  explicit CSOpenCommonRedEnvelope(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSOpenCommonRedEnvelope)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCOpenCommonRedEnvelope PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCOpenCommonRedEnvelope) */ {
 public:
  inline SCOpenCommonRedEnvelope() : SCOpenCommonRedEnvelope(nullptr) {}
  virtual ~SCOpenCommonRedEnvelope();

  SCOpenCommonRedEnvelope(const SCOpenCommonRedEnvelope& from);
  SCOpenCommonRedEnvelope(SCOpenCommonRedEnvelope&& from) noexcept
    : SCOpenCommonRedEnvelope() {
    *this = ::std::move(from);
  }

  inline SCOpenCommonRedEnvelope& operator=(const SCOpenCommonRedEnvelope& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCOpenCommonRedEnvelope& operator=(SCOpenCommonRedEnvelope&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCOpenCommonRedEnvelope& default_instance();

  static inline const SCOpenCommonRedEnvelope* internal_default_instance() {
    return reinterpret_cast<const SCOpenCommonRedEnvelope*>(
               &_SCOpenCommonRedEnvelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    201;

  friend void swap(SCOpenCommonRedEnvelope& a, SCOpenCommonRedEnvelope& b) {
    a.Swap(&b);
  }
  inline void Swap(SCOpenCommonRedEnvelope* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCOpenCommonRedEnvelope* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCOpenCommonRedEnvelope* New() const final {
    return CreateMaybeMessage<SCOpenCommonRedEnvelope>(nullptr);
  }

  SCOpenCommonRedEnvelope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCOpenCommonRedEnvelope>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCOpenCommonRedEnvelope& from);
  void MergeFrom(const SCOpenCommonRedEnvelope& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCOpenCommonRedEnvelope* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCOpenCommonRedEnvelope";
  }
  protected:
  explicit SCOpenCommonRedEnvelope(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kResultFieldNumber = 2,
    kRemainOpenNumFieldNumber = 3,
    kRewardFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bool result = 2;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // int32 remainOpenNum = 3;
  void clear_remainopennum();
  ::PROTOBUF_NAMESPACE_ID::int32 remainopennum() const;
  void set_remainopennum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_remainopennum() const;
  void _internal_set_remainopennum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reward = 4;
  void clear_reward();
  ::PROTOBUF_NAMESPACE_ID::int32 reward() const;
  void set_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reward() const;
  void _internal_set_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCOpenCommonRedEnvelope)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  bool result_;
  ::PROTOBUF_NAMESPACE_ID::int32 remainopennum_;
  ::PROTOBUF_NAMESPACE_ID::int32 reward_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class RedRankPlayerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.RedRankPlayerInfo) */ {
 public:
  inline RedRankPlayerInfo() : RedRankPlayerInfo(nullptr) {}
  virtual ~RedRankPlayerInfo();

  RedRankPlayerInfo(const RedRankPlayerInfo& from);
  RedRankPlayerInfo(RedRankPlayerInfo&& from) noexcept
    : RedRankPlayerInfo() {
    *this = ::std::move(from);
  }

  inline RedRankPlayerInfo& operator=(const RedRankPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedRankPlayerInfo& operator=(RedRankPlayerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RedRankPlayerInfo& default_instance();

  static inline const RedRankPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const RedRankPlayerInfo*>(
               &_RedRankPlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    202;

  friend void swap(RedRankPlayerInfo& a, RedRankPlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RedRankPlayerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RedRankPlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RedRankPlayerInfo* New() const final {
    return CreateMaybeMessage<RedRankPlayerInfo>(nullptr);
  }

  RedRankPlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RedRankPlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RedRankPlayerInfo& from);
  void MergeFrom(const RedRankPlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedRankPlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.RedRankPlayerInfo";
  }
  protected:
  explicit RedRankPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickFieldNumber = 2,
    kIconFieldNumber = 3,
    kPlayerIDFieldNumber = 1,
    kVipLevelFieldNumber = 4,
  };
  // string nick = 2;
  void clear_nick();
  const std::string& nick() const;
  void set_nick(const std::string& value);
  void set_nick(std::string&& value);
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  std::string* mutable_nick();
  std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // string icon = 3;
  void clear_icon();
  const std::string& icon() const;
  void set_icon(const std::string& value);
  void set_icon(std::string&& value);
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  std::string* mutable_icon();
  std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // int32 playerID = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vipLevel = 4;
  void clear_viplevel();
  ::PROTOBUF_NAMESPACE_ID::int32 viplevel() const;
  void set_viplevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_viplevel() const;
  void _internal_set_viplevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.RedRankPlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 viplevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSGrantCommonRedEnvelopeRank PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSGrantCommonRedEnvelopeRank) */ {
 public:
  inline CSGrantCommonRedEnvelopeRank() : CSGrantCommonRedEnvelopeRank(nullptr) {}
  virtual ~CSGrantCommonRedEnvelopeRank();

  CSGrantCommonRedEnvelopeRank(const CSGrantCommonRedEnvelopeRank& from);
  CSGrantCommonRedEnvelopeRank(CSGrantCommonRedEnvelopeRank&& from) noexcept
    : CSGrantCommonRedEnvelopeRank() {
    *this = ::std::move(from);
  }

  inline CSGrantCommonRedEnvelopeRank& operator=(const CSGrantCommonRedEnvelopeRank& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGrantCommonRedEnvelopeRank& operator=(CSGrantCommonRedEnvelopeRank&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSGrantCommonRedEnvelopeRank& default_instance();

  static inline const CSGrantCommonRedEnvelopeRank* internal_default_instance() {
    return reinterpret_cast<const CSGrantCommonRedEnvelopeRank*>(
               &_CSGrantCommonRedEnvelopeRank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    203;

  friend void swap(CSGrantCommonRedEnvelopeRank& a, CSGrantCommonRedEnvelopeRank& b) {
    a.Swap(&b);
  }
  inline void Swap(CSGrantCommonRedEnvelopeRank* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGrantCommonRedEnvelopeRank* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSGrantCommonRedEnvelopeRank* New() const final {
    return CreateMaybeMessage<CSGrantCommonRedEnvelopeRank>(nullptr);
  }

  CSGrantCommonRedEnvelopeRank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSGrantCommonRedEnvelopeRank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSGrantCommonRedEnvelopeRank& from);
  void MergeFrom(const CSGrantCommonRedEnvelopeRank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSGrantCommonRedEnvelopeRank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSGrantCommonRedEnvelopeRank";
  }
  protected:
  explicit CSGrantCommonRedEnvelopeRank(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
  };
  // int32 from = 1;
  void clear_from();
  ::PROTOBUF_NAMESPACE_ID::int32 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from() const;
  void _internal_set_from(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 to = 2;
  void clear_to();
  ::PROTOBUF_NAMESPACE_ID::int32 to() const;
  void set_to(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to() const;
  void _internal_set_to(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSGrantCommonRedEnvelopeRank)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class GrantRankItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.GrantRankItem) */ {
 public:
  inline GrantRankItem() : GrantRankItem(nullptr) {}
  virtual ~GrantRankItem();

  GrantRankItem(const GrantRankItem& from);
  GrantRankItem(GrantRankItem&& from) noexcept
    : GrantRankItem() {
    *this = ::std::move(from);
  }

  inline GrantRankItem& operator=(const GrantRankItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline GrantRankItem& operator=(GrantRankItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GrantRankItem& default_instance();

  static inline const GrantRankItem* internal_default_instance() {
    return reinterpret_cast<const GrantRankItem*>(
               &_GrantRankItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    204;

  friend void swap(GrantRankItem& a, GrantRankItem& b) {
    a.Swap(&b);
  }
  inline void Swap(GrantRankItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GrantRankItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GrantRankItem* New() const final {
    return CreateMaybeMessage<GrantRankItem>(nullptr);
  }

  GrantRankItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GrantRankItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GrantRankItem& from);
  void MergeFrom(const GrantRankItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GrantRankItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.GrantRankItem";
  }
  protected:
  explicit GrantRankItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInfoFieldNumber = 2,
    kRankFieldNumber = 1,
    kUpgradeNumFieldNumber = 3,
    kRewardFieldNumber = 4,
  };
  // .PlaneWar.RedRankPlayerInfo playerInfo = 2;
  bool has_playerinfo() const;
  private:
  bool _internal_has_playerinfo() const;
  public:
  void clear_playerinfo();
  const ::PlaneWar::RedRankPlayerInfo& playerinfo() const;
  ::PlaneWar::RedRankPlayerInfo* release_playerinfo();
  ::PlaneWar::RedRankPlayerInfo* mutable_playerinfo();
  void set_allocated_playerinfo(::PlaneWar::RedRankPlayerInfo* playerinfo);
  private:
  const ::PlaneWar::RedRankPlayerInfo& _internal_playerinfo() const;
  ::PlaneWar::RedRankPlayerInfo* _internal_mutable_playerinfo();
  public:
  void unsafe_arena_set_allocated_playerinfo(
      ::PlaneWar::RedRankPlayerInfo* playerinfo);
  ::PlaneWar::RedRankPlayerInfo* unsafe_arena_release_playerinfo();

  // int32 rank = 1;
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::int32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 upgradeNum = 3;
  void clear_upgradenum();
  ::PROTOBUF_NAMESPACE_ID::int32 upgradenum() const;
  void set_upgradenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_upgradenum() const;
  void _internal_set_upgradenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reward = 4;
  void clear_reward();
  ::PROTOBUF_NAMESPACE_ID::int32 reward() const;
  void set_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reward() const;
  void _internal_set_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.GrantRankItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::RedRankPlayerInfo* playerinfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 rank_;
  ::PROTOBUF_NAMESPACE_ID::int32 upgradenum_;
  ::PROTOBUF_NAMESPACE_ID::int32 reward_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCGrantCommonRedEnvelopeRank PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCGrantCommonRedEnvelopeRank) */ {
 public:
  inline SCGrantCommonRedEnvelopeRank() : SCGrantCommonRedEnvelopeRank(nullptr) {}
  virtual ~SCGrantCommonRedEnvelopeRank();

  SCGrantCommonRedEnvelopeRank(const SCGrantCommonRedEnvelopeRank& from);
  SCGrantCommonRedEnvelopeRank(SCGrantCommonRedEnvelopeRank&& from) noexcept
    : SCGrantCommonRedEnvelopeRank() {
    *this = ::std::move(from);
  }

  inline SCGrantCommonRedEnvelopeRank& operator=(const SCGrantCommonRedEnvelopeRank& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGrantCommonRedEnvelopeRank& operator=(SCGrantCommonRedEnvelopeRank&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGrantCommonRedEnvelopeRank& default_instance();

  static inline const SCGrantCommonRedEnvelopeRank* internal_default_instance() {
    return reinterpret_cast<const SCGrantCommonRedEnvelopeRank*>(
               &_SCGrantCommonRedEnvelopeRank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    205;

  friend void swap(SCGrantCommonRedEnvelopeRank& a, SCGrantCommonRedEnvelopeRank& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGrantCommonRedEnvelopeRank* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGrantCommonRedEnvelopeRank* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGrantCommonRedEnvelopeRank* New() const final {
    return CreateMaybeMessage<SCGrantCommonRedEnvelopeRank>(nullptr);
  }

  SCGrantCommonRedEnvelopeRank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGrantCommonRedEnvelopeRank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGrantCommonRedEnvelopeRank& from);
  void MergeFrom(const SCGrantCommonRedEnvelopeRank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGrantCommonRedEnvelopeRank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCGrantCommonRedEnvelopeRank";
  }
  protected:
  explicit SCGrantCommonRedEnvelopeRank(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRankListFieldNumber = 1,
    kSelfRankFieldNumber = 2,
  };
  // repeated .PlaneWar.GrantRankItem rankList = 1;
  int ranklist_size() const;
  private:
  int _internal_ranklist_size() const;
  public:
  void clear_ranklist();
  ::PlaneWar::GrantRankItem* mutable_ranklist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GrantRankItem >*
      mutable_ranklist();
  private:
  const ::PlaneWar::GrantRankItem& _internal_ranklist(int index) const;
  ::PlaneWar::GrantRankItem* _internal_add_ranklist();
  public:
  const ::PlaneWar::GrantRankItem& ranklist(int index) const;
  ::PlaneWar::GrantRankItem* add_ranklist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GrantRankItem >&
      ranklist() const;

  // .PlaneWar.GrantRankItem selfRank = 2;
  bool has_selfrank() const;
  private:
  bool _internal_has_selfrank() const;
  public:
  void clear_selfrank();
  const ::PlaneWar::GrantRankItem& selfrank() const;
  ::PlaneWar::GrantRankItem* release_selfrank();
  ::PlaneWar::GrantRankItem* mutable_selfrank();
  void set_allocated_selfrank(::PlaneWar::GrantRankItem* selfrank);
  private:
  const ::PlaneWar::GrantRankItem& _internal_selfrank() const;
  ::PlaneWar::GrantRankItem* _internal_mutable_selfrank();
  public:
  void unsafe_arena_set_allocated_selfrank(
      ::PlaneWar::GrantRankItem* selfrank);
  ::PlaneWar::GrantRankItem* unsafe_arena_release_selfrank();

  // @@protoc_insertion_point(class_scope:PlaneWar.SCGrantCommonRedEnvelopeRank)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GrantRankItem > ranklist_;
  ::PlaneWar::GrantRankItem* selfrank_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSOpenCommonRedEnvelopeRank PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSOpenCommonRedEnvelopeRank) */ {
 public:
  inline CSOpenCommonRedEnvelopeRank() : CSOpenCommonRedEnvelopeRank(nullptr) {}
  virtual ~CSOpenCommonRedEnvelopeRank();

  CSOpenCommonRedEnvelopeRank(const CSOpenCommonRedEnvelopeRank& from);
  CSOpenCommonRedEnvelopeRank(CSOpenCommonRedEnvelopeRank&& from) noexcept
    : CSOpenCommonRedEnvelopeRank() {
    *this = ::std::move(from);
  }

  inline CSOpenCommonRedEnvelopeRank& operator=(const CSOpenCommonRedEnvelopeRank& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOpenCommonRedEnvelopeRank& operator=(CSOpenCommonRedEnvelopeRank&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSOpenCommonRedEnvelopeRank& default_instance();

  static inline const CSOpenCommonRedEnvelopeRank* internal_default_instance() {
    return reinterpret_cast<const CSOpenCommonRedEnvelopeRank*>(
               &_CSOpenCommonRedEnvelopeRank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    206;

  friend void swap(CSOpenCommonRedEnvelopeRank& a, CSOpenCommonRedEnvelopeRank& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOpenCommonRedEnvelopeRank* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOpenCommonRedEnvelopeRank* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSOpenCommonRedEnvelopeRank* New() const final {
    return CreateMaybeMessage<CSOpenCommonRedEnvelopeRank>(nullptr);
  }

  CSOpenCommonRedEnvelopeRank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSOpenCommonRedEnvelopeRank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSOpenCommonRedEnvelopeRank& from);
  void MergeFrom(const CSOpenCommonRedEnvelopeRank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOpenCommonRedEnvelopeRank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSOpenCommonRedEnvelopeRank";
  }
  protected:
  explicit CSOpenCommonRedEnvelopeRank(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
  };
  // int32 from = 1;
  void clear_from();
  ::PROTOBUF_NAMESPACE_ID::int32 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from() const;
  void _internal_set_from(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 to = 2;
  void clear_to();
  ::PROTOBUF_NAMESPACE_ID::int32 to() const;
  void set_to(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to() const;
  void _internal_set_to(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSOpenCommonRedEnvelopeRank)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class OpenRankItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.OpenRankItem) */ {
 public:
  inline OpenRankItem() : OpenRankItem(nullptr) {}
  virtual ~OpenRankItem();

  OpenRankItem(const OpenRankItem& from);
  OpenRankItem(OpenRankItem&& from) noexcept
    : OpenRankItem() {
    *this = ::std::move(from);
  }

  inline OpenRankItem& operator=(const OpenRankItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenRankItem& operator=(OpenRankItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpenRankItem& default_instance();

  static inline const OpenRankItem* internal_default_instance() {
    return reinterpret_cast<const OpenRankItem*>(
               &_OpenRankItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    207;

  friend void swap(OpenRankItem& a, OpenRankItem& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenRankItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenRankItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpenRankItem* New() const final {
    return CreateMaybeMessage<OpenRankItem>(nullptr);
  }

  OpenRankItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpenRankItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpenRankItem& from);
  void MergeFrom(const OpenRankItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenRankItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.OpenRankItem";
  }
  protected:
  explicit OpenRankItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInfoFieldNumber = 2,
    kRankFieldNumber = 1,
    kTotalRewardFieldNumber = 3,
    kOpenNumFieldNumber = 4,
  };
  // .PlaneWar.RedRankPlayerInfo playerInfo = 2;
  bool has_playerinfo() const;
  private:
  bool _internal_has_playerinfo() const;
  public:
  void clear_playerinfo();
  const ::PlaneWar::RedRankPlayerInfo& playerinfo() const;
  ::PlaneWar::RedRankPlayerInfo* release_playerinfo();
  ::PlaneWar::RedRankPlayerInfo* mutable_playerinfo();
  void set_allocated_playerinfo(::PlaneWar::RedRankPlayerInfo* playerinfo);
  private:
  const ::PlaneWar::RedRankPlayerInfo& _internal_playerinfo() const;
  ::PlaneWar::RedRankPlayerInfo* _internal_mutable_playerinfo();
  public:
  void unsafe_arena_set_allocated_playerinfo(
      ::PlaneWar::RedRankPlayerInfo* playerinfo);
  ::PlaneWar::RedRankPlayerInfo* unsafe_arena_release_playerinfo();

  // int32 rank = 1;
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::int32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 totalReward = 3;
  void clear_totalreward();
  ::PROTOBUF_NAMESPACE_ID::int32 totalreward() const;
  void set_totalreward(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_totalreward() const;
  void _internal_set_totalreward(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 openNum = 4;
  void clear_opennum();
  ::PROTOBUF_NAMESPACE_ID::int32 opennum() const;
  void set_opennum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_opennum() const;
  void _internal_set_opennum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.OpenRankItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::RedRankPlayerInfo* playerinfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 rank_;
  ::PROTOBUF_NAMESPACE_ID::int32 totalreward_;
  ::PROTOBUF_NAMESPACE_ID::int32 opennum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCOpenCommonRedEnvelopeRank PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCOpenCommonRedEnvelopeRank) */ {
 public:
  inline SCOpenCommonRedEnvelopeRank() : SCOpenCommonRedEnvelopeRank(nullptr) {}
  virtual ~SCOpenCommonRedEnvelopeRank();

  SCOpenCommonRedEnvelopeRank(const SCOpenCommonRedEnvelopeRank& from);
  SCOpenCommonRedEnvelopeRank(SCOpenCommonRedEnvelopeRank&& from) noexcept
    : SCOpenCommonRedEnvelopeRank() {
    *this = ::std::move(from);
  }

  inline SCOpenCommonRedEnvelopeRank& operator=(const SCOpenCommonRedEnvelopeRank& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCOpenCommonRedEnvelopeRank& operator=(SCOpenCommonRedEnvelopeRank&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCOpenCommonRedEnvelopeRank& default_instance();

  static inline const SCOpenCommonRedEnvelopeRank* internal_default_instance() {
    return reinterpret_cast<const SCOpenCommonRedEnvelopeRank*>(
               &_SCOpenCommonRedEnvelopeRank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    208;

  friend void swap(SCOpenCommonRedEnvelopeRank& a, SCOpenCommonRedEnvelopeRank& b) {
    a.Swap(&b);
  }
  inline void Swap(SCOpenCommonRedEnvelopeRank* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCOpenCommonRedEnvelopeRank* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCOpenCommonRedEnvelopeRank* New() const final {
    return CreateMaybeMessage<SCOpenCommonRedEnvelopeRank>(nullptr);
  }

  SCOpenCommonRedEnvelopeRank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCOpenCommonRedEnvelopeRank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCOpenCommonRedEnvelopeRank& from);
  void MergeFrom(const SCOpenCommonRedEnvelopeRank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCOpenCommonRedEnvelopeRank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCOpenCommonRedEnvelopeRank";
  }
  protected:
  explicit SCOpenCommonRedEnvelopeRank(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRankListFieldNumber = 1,
    kSelfRankFieldNumber = 2,
  };
  // repeated .PlaneWar.OpenRankItem rankList = 1;
  int ranklist_size() const;
  private:
  int _internal_ranklist_size() const;
  public:
  void clear_ranklist();
  ::PlaneWar::OpenRankItem* mutable_ranklist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::OpenRankItem >*
      mutable_ranklist();
  private:
  const ::PlaneWar::OpenRankItem& _internal_ranklist(int index) const;
  ::PlaneWar::OpenRankItem* _internal_add_ranklist();
  public:
  const ::PlaneWar::OpenRankItem& ranklist(int index) const;
  ::PlaneWar::OpenRankItem* add_ranklist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::OpenRankItem >&
      ranklist() const;

  // .PlaneWar.OpenRankItem selfRank = 2;
  bool has_selfrank() const;
  private:
  bool _internal_has_selfrank() const;
  public:
  void clear_selfrank();
  const ::PlaneWar::OpenRankItem& selfrank() const;
  ::PlaneWar::OpenRankItem* release_selfrank();
  ::PlaneWar::OpenRankItem* mutable_selfrank();
  void set_allocated_selfrank(::PlaneWar::OpenRankItem* selfrank);
  private:
  const ::PlaneWar::OpenRankItem& _internal_selfrank() const;
  ::PlaneWar::OpenRankItem* _internal_mutable_selfrank();
  public:
  void unsafe_arena_set_allocated_selfrank(
      ::PlaneWar::OpenRankItem* selfrank);
  ::PlaneWar::OpenRankItem* unsafe_arena_release_selfrank();

  // @@protoc_insertion_point(class_scope:PlaneWar.SCOpenCommonRedEnvelopeRank)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::OpenRankItem > ranklist_;
  ::PlaneWar::OpenRankItem* selfrank_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSGrantCommonRedEnvelopeRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSGrantCommonRedEnvelopeRecord) */ {
 public:
  inline CSGrantCommonRedEnvelopeRecord() : CSGrantCommonRedEnvelopeRecord(nullptr) {}
  virtual ~CSGrantCommonRedEnvelopeRecord();

  CSGrantCommonRedEnvelopeRecord(const CSGrantCommonRedEnvelopeRecord& from);
  CSGrantCommonRedEnvelopeRecord(CSGrantCommonRedEnvelopeRecord&& from) noexcept
    : CSGrantCommonRedEnvelopeRecord() {
    *this = ::std::move(from);
  }

  inline CSGrantCommonRedEnvelopeRecord& operator=(const CSGrantCommonRedEnvelopeRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGrantCommonRedEnvelopeRecord& operator=(CSGrantCommonRedEnvelopeRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSGrantCommonRedEnvelopeRecord& default_instance();

  static inline const CSGrantCommonRedEnvelopeRecord* internal_default_instance() {
    return reinterpret_cast<const CSGrantCommonRedEnvelopeRecord*>(
               &_CSGrantCommonRedEnvelopeRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    209;

  friend void swap(CSGrantCommonRedEnvelopeRecord& a, CSGrantCommonRedEnvelopeRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(CSGrantCommonRedEnvelopeRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGrantCommonRedEnvelopeRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSGrantCommonRedEnvelopeRecord* New() const final {
    return CreateMaybeMessage<CSGrantCommonRedEnvelopeRecord>(nullptr);
  }

  CSGrantCommonRedEnvelopeRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSGrantCommonRedEnvelopeRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSGrantCommonRedEnvelopeRecord& from);
  void MergeFrom(const CSGrantCommonRedEnvelopeRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSGrantCommonRedEnvelopeRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSGrantCommonRedEnvelopeRecord";
  }
  protected:
  explicit CSGrantCommonRedEnvelopeRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.CSGrantCommonRedEnvelopeRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class GrantRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.GrantRecord) */ {
 public:
  inline GrantRecord() : GrantRecord(nullptr) {}
  virtual ~GrantRecord();

  GrantRecord(const GrantRecord& from);
  GrantRecord(GrantRecord&& from) noexcept
    : GrantRecord() {
    *this = ::std::move(from);
  }

  inline GrantRecord& operator=(const GrantRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline GrantRecord& operator=(GrantRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GrantRecord& default_instance();

  static inline const GrantRecord* internal_default_instance() {
    return reinterpret_cast<const GrantRecord*>(
               &_GrantRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    210;

  friend void swap(GrantRecord& a, GrantRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(GrantRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GrantRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GrantRecord* New() const final {
    return CreateMaybeMessage<GrantRecord>(nullptr);
  }

  GrantRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GrantRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GrantRecord& from);
  void MergeFrom(const GrantRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GrantRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.GrantRecord";
  }
  protected:
  explicit GrantRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenPlayerNickFieldNumber = 5,
    kGrantTimeFieldNumber = 1,
    kExpireTimeFieldNumber = 2,
    kRewardFieldNumber = 3,
    kStatusFieldNumber = 4,
  };
  // string openPlayerNick = 5;
  void clear_openplayernick();
  const std::string& openplayernick() const;
  void set_openplayernick(const std::string& value);
  void set_openplayernick(std::string&& value);
  void set_openplayernick(const char* value);
  void set_openplayernick(const char* value, size_t size);
  std::string* mutable_openplayernick();
  std::string* release_openplayernick();
  void set_allocated_openplayernick(std::string* openplayernick);
  private:
  const std::string& _internal_openplayernick() const;
  void _internal_set_openplayernick(const std::string& value);
  std::string* _internal_mutable_openplayernick();
  public:

  // int32 grantTime = 1;
  void clear_granttime();
  ::PROTOBUF_NAMESPACE_ID::int32 granttime() const;
  void set_granttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_granttime() const;
  void _internal_set_granttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 expireTime = 2;
  void clear_expiretime();
  ::PROTOBUF_NAMESPACE_ID::int32 expiretime() const;
  void set_expiretime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_expiretime() const;
  void _internal_set_expiretime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reward = 3;
  void clear_reward();
  ::PROTOBUF_NAMESPACE_ID::int32 reward() const;
  void set_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reward() const;
  void _internal_set_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .PlaneWar.GrantRedStatus status = 4;
  void clear_status();
  ::PlaneWar::GrantRedStatus status() const;
  void set_status(::PlaneWar::GrantRedStatus value);
  private:
  ::PlaneWar::GrantRedStatus _internal_status() const;
  void _internal_set_status(::PlaneWar::GrantRedStatus value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.GrantRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr openplayernick_;
  ::PROTOBUF_NAMESPACE_ID::int32 granttime_;
  ::PROTOBUF_NAMESPACE_ID::int32 expiretime_;
  ::PROTOBUF_NAMESPACE_ID::int32 reward_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCGrantCommonRedEnvelopeRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCGrantCommonRedEnvelopeRecord) */ {
 public:
  inline SCGrantCommonRedEnvelopeRecord() : SCGrantCommonRedEnvelopeRecord(nullptr) {}
  virtual ~SCGrantCommonRedEnvelopeRecord();

  SCGrantCommonRedEnvelopeRecord(const SCGrantCommonRedEnvelopeRecord& from);
  SCGrantCommonRedEnvelopeRecord(SCGrantCommonRedEnvelopeRecord&& from) noexcept
    : SCGrantCommonRedEnvelopeRecord() {
    *this = ::std::move(from);
  }

  inline SCGrantCommonRedEnvelopeRecord& operator=(const SCGrantCommonRedEnvelopeRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGrantCommonRedEnvelopeRecord& operator=(SCGrantCommonRedEnvelopeRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGrantCommonRedEnvelopeRecord& default_instance();

  static inline const SCGrantCommonRedEnvelopeRecord* internal_default_instance() {
    return reinterpret_cast<const SCGrantCommonRedEnvelopeRecord*>(
               &_SCGrantCommonRedEnvelopeRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    211;

  friend void swap(SCGrantCommonRedEnvelopeRecord& a, SCGrantCommonRedEnvelopeRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGrantCommonRedEnvelopeRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGrantCommonRedEnvelopeRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGrantCommonRedEnvelopeRecord* New() const final {
    return CreateMaybeMessage<SCGrantCommonRedEnvelopeRecord>(nullptr);
  }

  SCGrantCommonRedEnvelopeRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGrantCommonRedEnvelopeRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGrantCommonRedEnvelopeRecord& from);
  void MergeFrom(const SCGrantCommonRedEnvelopeRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGrantCommonRedEnvelopeRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCGrantCommonRedEnvelopeRecord";
  }
  protected:
  explicit SCGrantCommonRedEnvelopeRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordListFieldNumber = 1,
  };
  // repeated .PlaneWar.GrantRecord recordList = 1;
  int recordlist_size() const;
  private:
  int _internal_recordlist_size() const;
  public:
  void clear_recordlist();
  ::PlaneWar::GrantRecord* mutable_recordlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GrantRecord >*
      mutable_recordlist();
  private:
  const ::PlaneWar::GrantRecord& _internal_recordlist(int index) const;
  ::PlaneWar::GrantRecord* _internal_add_recordlist();
  public:
  const ::PlaneWar::GrantRecord& recordlist(int index) const;
  ::PlaneWar::GrantRecord* add_recordlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GrantRecord >&
      recordlist() const;

  // @@protoc_insertion_point(class_scope:PlaneWar.SCGrantCommonRedEnvelopeRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GrantRecord > recordlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSOpenCommonRedEnvelopeRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSOpenCommonRedEnvelopeRecord) */ {
 public:
  inline CSOpenCommonRedEnvelopeRecord() : CSOpenCommonRedEnvelopeRecord(nullptr) {}
  virtual ~CSOpenCommonRedEnvelopeRecord();

  CSOpenCommonRedEnvelopeRecord(const CSOpenCommonRedEnvelopeRecord& from);
  CSOpenCommonRedEnvelopeRecord(CSOpenCommonRedEnvelopeRecord&& from) noexcept
    : CSOpenCommonRedEnvelopeRecord() {
    *this = ::std::move(from);
  }

  inline CSOpenCommonRedEnvelopeRecord& operator=(const CSOpenCommonRedEnvelopeRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOpenCommonRedEnvelopeRecord& operator=(CSOpenCommonRedEnvelopeRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSOpenCommonRedEnvelopeRecord& default_instance();

  static inline const CSOpenCommonRedEnvelopeRecord* internal_default_instance() {
    return reinterpret_cast<const CSOpenCommonRedEnvelopeRecord*>(
               &_CSOpenCommonRedEnvelopeRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    212;

  friend void swap(CSOpenCommonRedEnvelopeRecord& a, CSOpenCommonRedEnvelopeRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOpenCommonRedEnvelopeRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOpenCommonRedEnvelopeRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSOpenCommonRedEnvelopeRecord* New() const final {
    return CreateMaybeMessage<CSOpenCommonRedEnvelopeRecord>(nullptr);
  }

  CSOpenCommonRedEnvelopeRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSOpenCommonRedEnvelopeRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSOpenCommonRedEnvelopeRecord& from);
  void MergeFrom(const CSOpenCommonRedEnvelopeRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOpenCommonRedEnvelopeRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSOpenCommonRedEnvelopeRecord";
  }
  protected:
  explicit CSOpenCommonRedEnvelopeRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.CSOpenCommonRedEnvelopeRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class OpenRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.OpenRecord) */ {
 public:
  inline OpenRecord() : OpenRecord(nullptr) {}
  virtual ~OpenRecord();

  OpenRecord(const OpenRecord& from);
  OpenRecord(OpenRecord&& from) noexcept
    : OpenRecord() {
    *this = ::std::move(from);
  }

  inline OpenRecord& operator=(const OpenRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenRecord& operator=(OpenRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpenRecord& default_instance();

  static inline const OpenRecord* internal_default_instance() {
    return reinterpret_cast<const OpenRecord*>(
               &_OpenRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    213;

  friend void swap(OpenRecord& a, OpenRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpenRecord* New() const final {
    return CreateMaybeMessage<OpenRecord>(nullptr);
  }

  OpenRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpenRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpenRecord& from);
  void MergeFrom(const OpenRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.OpenRecord";
  }
  protected:
  explicit OpenRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourcePlayerNickFieldNumber = 1,
    kRewardFieldNumber = 2,
    kOpenTimeFieldNumber = 3,
  };
  // string sourcePlayerNick = 1;
  void clear_sourceplayernick();
  const std::string& sourceplayernick() const;
  void set_sourceplayernick(const std::string& value);
  void set_sourceplayernick(std::string&& value);
  void set_sourceplayernick(const char* value);
  void set_sourceplayernick(const char* value, size_t size);
  std::string* mutable_sourceplayernick();
  std::string* release_sourceplayernick();
  void set_allocated_sourceplayernick(std::string* sourceplayernick);
  private:
  const std::string& _internal_sourceplayernick() const;
  void _internal_set_sourceplayernick(const std::string& value);
  std::string* _internal_mutable_sourceplayernick();
  public:

  // int32 reward = 2;
  void clear_reward();
  ::PROTOBUF_NAMESPACE_ID::int32 reward() const;
  void set_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reward() const;
  void _internal_set_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 openTime = 3;
  void clear_opentime();
  ::PROTOBUF_NAMESPACE_ID::int32 opentime() const;
  void set_opentime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_opentime() const;
  void _internal_set_opentime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.OpenRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourceplayernick_;
  ::PROTOBUF_NAMESPACE_ID::int32 reward_;
  ::PROTOBUF_NAMESPACE_ID::int32 opentime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCOpenCommonRedEnvelopeRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCOpenCommonRedEnvelopeRecord) */ {
 public:
  inline SCOpenCommonRedEnvelopeRecord() : SCOpenCommonRedEnvelopeRecord(nullptr) {}
  virtual ~SCOpenCommonRedEnvelopeRecord();

  SCOpenCommonRedEnvelopeRecord(const SCOpenCommonRedEnvelopeRecord& from);
  SCOpenCommonRedEnvelopeRecord(SCOpenCommonRedEnvelopeRecord&& from) noexcept
    : SCOpenCommonRedEnvelopeRecord() {
    *this = ::std::move(from);
  }

  inline SCOpenCommonRedEnvelopeRecord& operator=(const SCOpenCommonRedEnvelopeRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCOpenCommonRedEnvelopeRecord& operator=(SCOpenCommonRedEnvelopeRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCOpenCommonRedEnvelopeRecord& default_instance();

  static inline const SCOpenCommonRedEnvelopeRecord* internal_default_instance() {
    return reinterpret_cast<const SCOpenCommonRedEnvelopeRecord*>(
               &_SCOpenCommonRedEnvelopeRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    214;

  friend void swap(SCOpenCommonRedEnvelopeRecord& a, SCOpenCommonRedEnvelopeRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(SCOpenCommonRedEnvelopeRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCOpenCommonRedEnvelopeRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCOpenCommonRedEnvelopeRecord* New() const final {
    return CreateMaybeMessage<SCOpenCommonRedEnvelopeRecord>(nullptr);
  }

  SCOpenCommonRedEnvelopeRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCOpenCommonRedEnvelopeRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCOpenCommonRedEnvelopeRecord& from);
  void MergeFrom(const SCOpenCommonRedEnvelopeRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCOpenCommonRedEnvelopeRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCOpenCommonRedEnvelopeRecord";
  }
  protected:
  explicit SCOpenCommonRedEnvelopeRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordListFieldNumber = 1,
    kShowRecordNumFieldNumber = 2,
  };
  // repeated .PlaneWar.OpenRecord recordList = 1;
  int recordlist_size() const;
  private:
  int _internal_recordlist_size() const;
  public:
  void clear_recordlist();
  ::PlaneWar::OpenRecord* mutable_recordlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::OpenRecord >*
      mutable_recordlist();
  private:
  const ::PlaneWar::OpenRecord& _internal_recordlist(int index) const;
  ::PlaneWar::OpenRecord* _internal_add_recordlist();
  public:
  const ::PlaneWar::OpenRecord& recordlist(int index) const;
  ::PlaneWar::OpenRecord* add_recordlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::OpenRecord >&
      recordlist() const;

  // int32 showRecordNum = 2;
  void clear_showrecordnum();
  ::PROTOBUF_NAMESPACE_ID::int32 showrecordnum() const;
  void set_showrecordnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_showrecordnum() const;
  void _internal_set_showrecordnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCOpenCommonRedEnvelopeRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::OpenRecord > recordlist_;
  ::PROTOBUF_NAMESPACE_ID::int32 showrecordnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCRedEnvelopeOpStatusNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCRedEnvelopeOpStatusNotify) */ {
 public:
  inline SCRedEnvelopeOpStatusNotify() : SCRedEnvelopeOpStatusNotify(nullptr) {}
  virtual ~SCRedEnvelopeOpStatusNotify();

  SCRedEnvelopeOpStatusNotify(const SCRedEnvelopeOpStatusNotify& from);
  SCRedEnvelopeOpStatusNotify(SCRedEnvelopeOpStatusNotify&& from) noexcept
    : SCRedEnvelopeOpStatusNotify() {
    *this = ::std::move(from);
  }

  inline SCRedEnvelopeOpStatusNotify& operator=(const SCRedEnvelopeOpStatusNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCRedEnvelopeOpStatusNotify& operator=(SCRedEnvelopeOpStatusNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCRedEnvelopeOpStatusNotify& default_instance();

  static inline const SCRedEnvelopeOpStatusNotify* internal_default_instance() {
    return reinterpret_cast<const SCRedEnvelopeOpStatusNotify*>(
               &_SCRedEnvelopeOpStatusNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    215;

  friend void swap(SCRedEnvelopeOpStatusNotify& a, SCRedEnvelopeOpStatusNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(SCRedEnvelopeOpStatusNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCRedEnvelopeOpStatusNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCRedEnvelopeOpStatusNotify* New() const final {
    return CreateMaybeMessage<SCRedEnvelopeOpStatusNotify>(nullptr);
  }

  SCRedEnvelopeOpStatusNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCRedEnvelopeOpStatusNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCRedEnvelopeOpStatusNotify& from);
  void MergeFrom(const SCRedEnvelopeOpStatusNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCRedEnvelopeOpStatusNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCRedEnvelopeOpStatusNotify";
  }
  protected:
  explicit SCRedEnvelopeOpStatusNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpgradeInfoFieldNumber = 4,
    kChairFieldNumber = 1,
    kStatusFieldNumber = 2,
    kCurMoneyFieldNumber = 3,
    kRewardFieldNumber = 5,
  };
  // .PlaneWar.RedUpgradeInfo upgradeInfo = 4;
  bool has_upgradeinfo() const;
  private:
  bool _internal_has_upgradeinfo() const;
  public:
  void clear_upgradeinfo();
  const ::PlaneWar::RedUpgradeInfo& upgradeinfo() const;
  ::PlaneWar::RedUpgradeInfo* release_upgradeinfo();
  ::PlaneWar::RedUpgradeInfo* mutable_upgradeinfo();
  void set_allocated_upgradeinfo(::PlaneWar::RedUpgradeInfo* upgradeinfo);
  private:
  const ::PlaneWar::RedUpgradeInfo& _internal_upgradeinfo() const;
  ::PlaneWar::RedUpgradeInfo* _internal_mutable_upgradeinfo();
  public:
  void unsafe_arena_set_allocated_upgradeinfo(
      ::PlaneWar::RedUpgradeInfo* upgradeinfo);
  ::PlaneWar::RedUpgradeInfo* unsafe_arena_release_upgradeinfo();

  // int32 chair = 1;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .PlaneWar.RedOpStatus status = 2;
  void clear_status();
  ::PlaneWar::RedOpStatus status() const;
  void set_status(::PlaneWar::RedOpStatus value);
  private:
  ::PlaneWar::RedOpStatus _internal_status() const;
  void _internal_set_status(::PlaneWar::RedOpStatus value);
  public:

  // int64 curMoney = 3;
  void clear_curmoney();
  ::PROTOBUF_NAMESPACE_ID::int64 curmoney() const;
  void set_curmoney(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_curmoney() const;
  void _internal_set_curmoney(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 reward = 5;
  void clear_reward();
  ::PROTOBUF_NAMESPACE_ID::int32 reward() const;
  void set_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reward() const;
  void _internal_set_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCRedEnvelopeOpStatusNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::RedUpgradeInfo* upgradeinfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::int64 curmoney_;
  ::PROTOBUF_NAMESPACE_ID::int32 reward_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSSyncWeaponState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSSyncWeaponState) */ {
 public:
  inline CSSyncWeaponState() : CSSyncWeaponState(nullptr) {}
  virtual ~CSSyncWeaponState();

  CSSyncWeaponState(const CSSyncWeaponState& from);
  CSSyncWeaponState(CSSyncWeaponState&& from) noexcept
    : CSSyncWeaponState() {
    *this = ::std::move(from);
  }

  inline CSSyncWeaponState& operator=(const CSSyncWeaponState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSyncWeaponState& operator=(CSSyncWeaponState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSyncWeaponState& default_instance();

  static inline const CSSyncWeaponState* internal_default_instance() {
    return reinterpret_cast<const CSSyncWeaponState*>(
               &_CSSyncWeaponState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    216;

  friend void swap(CSSyncWeaponState& a, CSSyncWeaponState& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSyncWeaponState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSyncWeaponState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSyncWeaponState* New() const final {
    return CreateMaybeMessage<CSSyncWeaponState>(nullptr);
  }

  CSSyncWeaponState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSyncWeaponState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSyncWeaponState& from);
  void MergeFrom(const CSSyncWeaponState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSyncWeaponState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSSyncWeaponState";
  }
  protected:
  explicit CSSyncWeaponState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeaponStateFieldNumber = 4,
    kWeaponIdFieldNumber = 1,
    kChairIdFieldNumber = 2,
    kWeaponUIDFieldNumber = 3,
  };
  // .PlaneWar.WeaponState weaponState = 4;
  bool has_weaponstate() const;
  private:
  bool _internal_has_weaponstate() const;
  public:
  void clear_weaponstate();
  const ::PlaneWar::WeaponState& weaponstate() const;
  ::PlaneWar::WeaponState* release_weaponstate();
  ::PlaneWar::WeaponState* mutable_weaponstate();
  void set_allocated_weaponstate(::PlaneWar::WeaponState* weaponstate);
  private:
  const ::PlaneWar::WeaponState& _internal_weaponstate() const;
  ::PlaneWar::WeaponState* _internal_mutable_weaponstate();
  public:
  void unsafe_arena_set_allocated_weaponstate(
      ::PlaneWar::WeaponState* weaponstate);
  ::PlaneWar::WeaponState* unsafe_arena_release_weaponstate();

  // int32 weaponId = 1;
  void clear_weaponid();
  ::PROTOBUF_NAMESPACE_ID::int32 weaponid() const;
  void set_weaponid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_weaponid() const;
  void _internal_set_weaponid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 chairId = 2;
  void clear_chairid();
  ::PROTOBUF_NAMESPACE_ID::int32 chairid() const;
  void set_chairid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chairid() const;
  void _internal_set_chairid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 weaponUID = 3;
  void clear_weaponuid();
  ::PROTOBUF_NAMESPACE_ID::int32 weaponuid() const;
  void set_weaponuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_weaponuid() const;
  void _internal_set_weaponuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSSyncWeaponState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::WeaponState* weaponstate_;
  ::PROTOBUF_NAMESPACE_ID::int32 weaponid_;
  ::PROTOBUF_NAMESPACE_ID::int32 chairid_;
  ::PROTOBUF_NAMESPACE_ID::int32 weaponuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCSyncWeaponState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCSyncWeaponState) */ {
 public:
  inline SCSyncWeaponState() : SCSyncWeaponState(nullptr) {}
  virtual ~SCSyncWeaponState();

  SCSyncWeaponState(const SCSyncWeaponState& from);
  SCSyncWeaponState(SCSyncWeaponState&& from) noexcept
    : SCSyncWeaponState() {
    *this = ::std::move(from);
  }

  inline SCSyncWeaponState& operator=(const SCSyncWeaponState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSyncWeaponState& operator=(SCSyncWeaponState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSyncWeaponState& default_instance();

  static inline const SCSyncWeaponState* internal_default_instance() {
    return reinterpret_cast<const SCSyncWeaponState*>(
               &_SCSyncWeaponState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    217;

  friend void swap(SCSyncWeaponState& a, SCSyncWeaponState& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSyncWeaponState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSyncWeaponState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSyncWeaponState* New() const final {
    return CreateMaybeMessage<SCSyncWeaponState>(nullptr);
  }

  SCSyncWeaponState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSyncWeaponState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSyncWeaponState& from);
  void MergeFrom(const SCSyncWeaponState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSyncWeaponState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCSyncWeaponState";
  }
  protected:
  explicit SCSyncWeaponState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.SCSyncWeaponState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSPreHit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSPreHit) */ {
 public:
  inline CSPreHit() : CSPreHit(nullptr) {}
  virtual ~CSPreHit();

  CSPreHit(const CSPreHit& from);
  CSPreHit(CSPreHit&& from) noexcept
    : CSPreHit() {
    *this = ::std::move(from);
  }

  inline CSPreHit& operator=(const CSPreHit& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSPreHit& operator=(CSPreHit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSPreHit& default_instance();

  static inline const CSPreHit* internal_default_instance() {
    return reinterpret_cast<const CSPreHit*>(
               &_CSPreHit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    218;

  friend void swap(CSPreHit& a, CSPreHit& b) {
    a.Swap(&b);
  }
  inline void Swap(CSPreHit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSPreHit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSPreHit* New() const final {
    return CreateMaybeMessage<CSPreHit>(nullptr);
  }

  CSPreHit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSPreHit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSPreHit& from);
  void MergeFrom(const CSPreHit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSPreHit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSPreHit";
  }
  protected:
  explicit CSPreHit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRatioFieldNumber = 1,
    kBulletTypeFieldNumber = 2,
    kSourceUIDFieldNumber = 3,
  };
  // int32 ratio = 1;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bulletType = 2;
  void clear_bullettype();
  ::PROTOBUF_NAMESPACE_ID::int32 bullettype() const;
  void set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bullettype() const;
  void _internal_set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sourceUID = 3;
  void clear_sourceuid();
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid() const;
  void set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sourceuid() const;
  void _internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSPreHit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 bullettype_;
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCPreHit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCPreHit) */ {
 public:
  inline SCPreHit() : SCPreHit(nullptr) {}
  virtual ~SCPreHit();

  SCPreHit(const SCPreHit& from);
  SCPreHit(SCPreHit&& from) noexcept
    : SCPreHit() {
    *this = ::std::move(from);
  }

  inline SCPreHit& operator=(const SCPreHit& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPreHit& operator=(SCPreHit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPreHit& default_instance();

  static inline const SCPreHit* internal_default_instance() {
    return reinterpret_cast<const SCPreHit*>(
               &_SCPreHit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    219;

  friend void swap(SCPreHit& a, SCPreHit& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPreHit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPreHit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPreHit* New() const final {
    return CreateMaybeMessage<SCPreHit>(nullptr);
  }

  SCPreHit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPreHit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPreHit& from);
  void MergeFrom(const SCPreHit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPreHit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCPreHit";
  }
  protected:
  explicit SCPreHit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHitModeFieldNumber = 2,
    kWeaponUIDFieldNumber = 1,
  };
  // .PlaneWar.HitMode hitMode = 2;
  bool has_hitmode() const;
  private:
  bool _internal_has_hitmode() const;
  public:
  void clear_hitmode();
  const ::PlaneWar::HitMode& hitmode() const;
  ::PlaneWar::HitMode* release_hitmode();
  ::PlaneWar::HitMode* mutable_hitmode();
  void set_allocated_hitmode(::PlaneWar::HitMode* hitmode);
  private:
  const ::PlaneWar::HitMode& _internal_hitmode() const;
  ::PlaneWar::HitMode* _internal_mutable_hitmode();
  public:
  void unsafe_arena_set_allocated_hitmode(
      ::PlaneWar::HitMode* hitmode);
  ::PlaneWar::HitMode* unsafe_arena_release_hitmode();

  // int32 weaponUID = 1;
  void clear_weaponuid();
  ::PROTOBUF_NAMESPACE_ID::int32 weaponuid() const;
  void set_weaponuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_weaponuid() const;
  void _internal_set_weaponuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCPreHit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::HitMode* hitmode_;
  ::PROTOBUF_NAMESPACE_ID::int32 weaponuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class Animation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.Animation) */ {
 public:
  inline Animation() : Animation(nullptr) {}
  virtual ~Animation();

  Animation(const Animation& from);
  Animation(Animation&& from) noexcept
    : Animation() {
    *this = ::std::move(from);
  }

  inline Animation& operator=(const Animation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Animation& operator=(Animation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Animation& default_instance();

  static inline const Animation* internal_default_instance() {
    return reinterpret_cast<const Animation*>(
               &_Animation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    220;

  friend void swap(Animation& a, Animation& b) {
    a.Swap(&b);
  }
  inline void Swap(Animation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Animation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Animation* New() const final {
    return CreateMaybeMessage<Animation>(nullptr);
  }

  Animation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Animation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Animation& from);
  void MergeFrom(const Animation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Animation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.Animation";
  }
  protected:
  explicit Animation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMultipleListFieldNumber = 8,
    kAnimationMsgFieldNumber = 2,
    kFortuneJsonFieldNumber = 10,
    kGoldenToadJsonFieldNumber = 11,
    kDiceJsonFieldNumber = 12,
    kAnimationIDFieldNumber = 1,
    kChairFieldNumber = 3,
    kMonsterUIDFieldNumber = 4,
    kBulletTypeFieldNumber = 5,
    kEarnFieldNumber = 6,
    kOriginUIDFieldNumber = 7,
    kRatioFieldNumber = 9,
  };
  // repeated int32 multipleList = 8;
  int multiplelist_size() const;
  private:
  int _internal_multiplelist_size() const;
  public:
  void clear_multiplelist();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_multiplelist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_multiplelist() const;
  void _internal_add_multiplelist(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_multiplelist();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 multiplelist(int index) const;
  void set_multiplelist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_multiplelist(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      multiplelist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_multiplelist();

  // string animationMsg = 2;
  void clear_animationmsg();
  const std::string& animationmsg() const;
  void set_animationmsg(const std::string& value);
  void set_animationmsg(std::string&& value);
  void set_animationmsg(const char* value);
  void set_animationmsg(const char* value, size_t size);
  std::string* mutable_animationmsg();
  std::string* release_animationmsg();
  void set_allocated_animationmsg(std::string* animationmsg);
  private:
  const std::string& _internal_animationmsg() const;
  void _internal_set_animationmsg(const std::string& value);
  std::string* _internal_mutable_animationmsg();
  public:

  // .PlaneWar.FortuneWheelJson fortuneJson = 10;
  bool has_fortunejson() const;
  private:
  bool _internal_has_fortunejson() const;
  public:
  void clear_fortunejson();
  const ::PlaneWar::FortuneWheelJson& fortunejson() const;
  ::PlaneWar::FortuneWheelJson* release_fortunejson();
  ::PlaneWar::FortuneWheelJson* mutable_fortunejson();
  void set_allocated_fortunejson(::PlaneWar::FortuneWheelJson* fortunejson);
  private:
  const ::PlaneWar::FortuneWheelJson& _internal_fortunejson() const;
  ::PlaneWar::FortuneWheelJson* _internal_mutable_fortunejson();
  public:
  void unsafe_arena_set_allocated_fortunejson(
      ::PlaneWar::FortuneWheelJson* fortunejson);
  ::PlaneWar::FortuneWheelJson* unsafe_arena_release_fortunejson();

  // .PlaneWar.GoldenToadJson goldenToadJson = 11;
  bool has_goldentoadjson() const;
  private:
  bool _internal_has_goldentoadjson() const;
  public:
  void clear_goldentoadjson();
  const ::PlaneWar::GoldenToadJson& goldentoadjson() const;
  ::PlaneWar::GoldenToadJson* release_goldentoadjson();
  ::PlaneWar::GoldenToadJson* mutable_goldentoadjson();
  void set_allocated_goldentoadjson(::PlaneWar::GoldenToadJson* goldentoadjson);
  private:
  const ::PlaneWar::GoldenToadJson& _internal_goldentoadjson() const;
  ::PlaneWar::GoldenToadJson* _internal_mutable_goldentoadjson();
  public:
  void unsafe_arena_set_allocated_goldentoadjson(
      ::PlaneWar::GoldenToadJson* goldentoadjson);
  ::PlaneWar::GoldenToadJson* unsafe_arena_release_goldentoadjson();

  // .PlaneWar.DiceJson diceJson = 12;
  bool has_dicejson() const;
  private:
  bool _internal_has_dicejson() const;
  public:
  void clear_dicejson();
  const ::PlaneWar::DiceJson& dicejson() const;
  ::PlaneWar::DiceJson* release_dicejson();
  ::PlaneWar::DiceJson* mutable_dicejson();
  void set_allocated_dicejson(::PlaneWar::DiceJson* dicejson);
  private:
  const ::PlaneWar::DiceJson& _internal_dicejson() const;
  ::PlaneWar::DiceJson* _internal_mutable_dicejson();
  public:
  void unsafe_arena_set_allocated_dicejson(
      ::PlaneWar::DiceJson* dicejson);
  ::PlaneWar::DiceJson* unsafe_arena_release_dicejson();

  // int32 animationID = 1;
  void clear_animationid();
  ::PROTOBUF_NAMESPACE_ID::int32 animationid() const;
  void set_animationid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_animationid() const;
  void _internal_set_animationid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 chair = 3;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 monsterUID = 4;
  void clear_monsteruid();
  ::PROTOBUF_NAMESPACE_ID::int32 monsteruid() const;
  void set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_monsteruid() const;
  void _internal_set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bulletType = 5;
  void clear_bullettype();
  ::PROTOBUF_NAMESPACE_ID::int32 bullettype() const;
  void set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bullettype() const;
  void _internal_set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 earn = 6;
  void clear_earn();
  ::PROTOBUF_NAMESPACE_ID::int32 earn() const;
  void set_earn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_earn() const;
  void _internal_set_earn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 originUID = 7;
  void clear_originuid();
  ::PROTOBUF_NAMESPACE_ID::int32 originuid() const;
  void set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_originuid() const;
  void _internal_set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 9;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.Animation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > multiplelist_;
  mutable std::atomic<int> _multiplelist_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr animationmsg_;
  ::PlaneWar::FortuneWheelJson* fortunejson_;
  ::PlaneWar::GoldenToadJson* goldentoadjson_;
  ::PlaneWar::DiceJson* dicejson_;
  ::PROTOBUF_NAMESPACE_ID::int32 animationid_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  ::PROTOBUF_NAMESPACE_ID::int32 monsteruid_;
  ::PROTOBUF_NAMESPACE_ID::int32 bullettype_;
  ::PROTOBUF_NAMESPACE_ID::int32 earn_;
  ::PROTOBUF_NAMESPACE_ID::int32 originuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class DiceJson PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.DiceJson) */ {
 public:
  inline DiceJson() : DiceJson(nullptr) {}
  virtual ~DiceJson();

  DiceJson(const DiceJson& from);
  DiceJson(DiceJson&& from) noexcept
    : DiceJson() {
    *this = ::std::move(from);
  }

  inline DiceJson& operator=(const DiceJson& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiceJson& operator=(DiceJson&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DiceJson& default_instance();

  static inline const DiceJson* internal_default_instance() {
    return reinterpret_cast<const DiceJson*>(
               &_DiceJson_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    221;

  friend void swap(DiceJson& a, DiceJson& b) {
    a.Swap(&b);
  }
  inline void Swap(DiceJson* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiceJson* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiceJson* New() const final {
    return CreateMaybeMessage<DiceJson>(nullptr);
  }

  DiceJson* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiceJson>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiceJson& from);
  void MergeFrom(const DiceJson& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiceJson* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.DiceJson";
  }
  protected:
  explicit DiceJson(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiceFieldNumber = 2,
    kMulListFieldNumber = 3,
    kMulPosListFieldNumber = 4,
    kStepFieldNumber = 1,
  };
  // repeated .PlaneWar.Dice dice = 2;
  int dice_size() const;
  private:
  int _internal_dice_size() const;
  public:
  void clear_dice();
  ::PlaneWar::Dice* mutable_dice(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::Dice >*
      mutable_dice();
  private:
  const ::PlaneWar::Dice& _internal_dice(int index) const;
  ::PlaneWar::Dice* _internal_add_dice();
  public:
  const ::PlaneWar::Dice& dice(int index) const;
  ::PlaneWar::Dice* add_dice();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::Dice >&
      dice() const;

  // repeated .PlaneWar.Dice mulList = 3;
  int mullist_size() const;
  private:
  int _internal_mullist_size() const;
  public:
  void clear_mullist();
  ::PlaneWar::Dice* mutable_mullist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::Dice >*
      mutable_mullist();
  private:
  const ::PlaneWar::Dice& _internal_mullist(int index) const;
  ::PlaneWar::Dice* _internal_add_mullist();
  public:
  const ::PlaneWar::Dice& mullist(int index) const;
  ::PlaneWar::Dice* add_mullist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::Dice >&
      mullist() const;

  // repeated .PlaneWar.Pos mulPosList = 4;
  int mulposlist_size() const;
  private:
  int _internal_mulposlist_size() const;
  public:
  void clear_mulposlist();
  ::PlaneWar::Pos* mutable_mulposlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::Pos >*
      mutable_mulposlist();
  private:
  const ::PlaneWar::Pos& _internal_mulposlist(int index) const;
  ::PlaneWar::Pos* _internal_add_mulposlist();
  public:
  const ::PlaneWar::Pos& mulposlist(int index) const;
  ::PlaneWar::Pos* add_mulposlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::Pos >&
      mulposlist() const;

  // int32 step = 1;
  void clear_step();
  ::PROTOBUF_NAMESPACE_ID::int32 step() const;
  void set_step(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_step() const;
  void _internal_set_step(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.DiceJson)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::Dice > dice_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::Dice > mullist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::Pos > mulposlist_;
  ::PROTOBUF_NAMESPACE_ID::int32 step_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class FortuneWheelJson PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.FortuneWheelJson) */ {
 public:
  inline FortuneWheelJson() : FortuneWheelJson(nullptr) {}
  virtual ~FortuneWheelJson();

  FortuneWheelJson(const FortuneWheelJson& from);
  FortuneWheelJson(FortuneWheelJson&& from) noexcept
    : FortuneWheelJson() {
    *this = ::std::move(from);
  }

  inline FortuneWheelJson& operator=(const FortuneWheelJson& from) {
    CopyFrom(from);
    return *this;
  }
  inline FortuneWheelJson& operator=(FortuneWheelJson&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FortuneWheelJson& default_instance();

  static inline const FortuneWheelJson* internal_default_instance() {
    return reinterpret_cast<const FortuneWheelJson*>(
               &_FortuneWheelJson_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    222;

  friend void swap(FortuneWheelJson& a, FortuneWheelJson& b) {
    a.Swap(&b);
  }
  inline void Swap(FortuneWheelJson* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FortuneWheelJson* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FortuneWheelJson* New() const final {
    return CreateMaybeMessage<FortuneWheelJson>(nullptr);
  }

  FortuneWheelJson* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FortuneWheelJson>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FortuneWheelJson& from);
  void MergeFrom(const FortuneWheelJson& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FortuneWheelJson* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.FortuneWheelJson";
  }
  protected:
  explicit FortuneWheelJson(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kSiteFieldNumber = 2,
  };
  // repeated .PlaneWar.FortuneWheelInfo result = 1;
  int result_size() const;
  private:
  int _internal_result_size() const;
  public:
  void clear_result();
  ::PlaneWar::FortuneWheelInfo* mutable_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::FortuneWheelInfo >*
      mutable_result();
  private:
  const ::PlaneWar::FortuneWheelInfo& _internal_result(int index) const;
  ::PlaneWar::FortuneWheelInfo* _internal_add_result();
  public:
  const ::PlaneWar::FortuneWheelInfo& result(int index) const;
  ::PlaneWar::FortuneWheelInfo* add_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::FortuneWheelInfo >&
      result() const;

  // int32 site = 2;
  void clear_site();
  ::PROTOBUF_NAMESPACE_ID::int32 site() const;
  void set_site(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_site() const;
  void _internal_set_site(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.FortuneWheelJson)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::FortuneWheelInfo > result_;
  ::PROTOBUF_NAMESPACE_ID::int32 site_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class GoldenToadJson PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.GoldenToadJson) */ {
 public:
  inline GoldenToadJson() : GoldenToadJson(nullptr) {}
  virtual ~GoldenToadJson();

  GoldenToadJson(const GoldenToadJson& from);
  GoldenToadJson(GoldenToadJson&& from) noexcept
    : GoldenToadJson() {
    *this = ::std::move(from);
  }

  inline GoldenToadJson& operator=(const GoldenToadJson& from) {
    CopyFrom(from);
    return *this;
  }
  inline GoldenToadJson& operator=(GoldenToadJson&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GoldenToadJson& default_instance();

  static inline const GoldenToadJson* internal_default_instance() {
    return reinterpret_cast<const GoldenToadJson*>(
               &_GoldenToadJson_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    223;

  friend void swap(GoldenToadJson& a, GoldenToadJson& b) {
    a.Swap(&b);
  }
  inline void Swap(GoldenToadJson* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GoldenToadJson* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GoldenToadJson* New() const final {
    return CreateMaybeMessage<GoldenToadJson>(nullptr);
  }

  GoldenToadJson* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GoldenToadJson>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GoldenToadJson& from);
  void MergeFrom(const GoldenToadJson& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GoldenToadJson* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.GoldenToadJson";
  }
  protected:
  explicit GoldenToadJson(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderListFieldNumber = 1,
    kTotalRatioFieldNumber = 2,
    kRatioFieldNumber = 3,
    kStepFieldNumber = 4,
  };
  // repeated .PlaneWar.OrderData orderList = 1;
  int orderlist_size() const;
  private:
  int _internal_orderlist_size() const;
  public:
  void clear_orderlist();
  ::PlaneWar::OrderData* mutable_orderlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::OrderData >*
      mutable_orderlist();
  private:
  const ::PlaneWar::OrderData& _internal_orderlist(int index) const;
  ::PlaneWar::OrderData* _internal_add_orderlist();
  public:
  const ::PlaneWar::OrderData& orderlist(int index) const;
  ::PlaneWar::OrderData* add_orderlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::OrderData >&
      orderlist() const;

  // int32 totalRatio = 2;
  void clear_totalratio();
  ::PROTOBUF_NAMESPACE_ID::int32 totalratio() const;
  void set_totalratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_totalratio() const;
  void _internal_set_totalratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 3;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 step = 4;
  void clear_step();
  ::PROTOBUF_NAMESPACE_ID::int32 step() const;
  void set_step(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_step() const;
  void _internal_set_step(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.GoldenToadJson)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::OrderData > orderlist_;
  ::PROTOBUF_NAMESPACE_ID::int32 totalratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 step_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class OrderData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.OrderData) */ {
 public:
  inline OrderData() : OrderData(nullptr) {}
  virtual ~OrderData();

  OrderData(const OrderData& from);
  OrderData(OrderData&& from) noexcept
    : OrderData() {
    *this = ::std::move(from);
  }

  inline OrderData& operator=(const OrderData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderData& operator=(OrderData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderData& default_instance();

  static inline const OrderData* internal_default_instance() {
    return reinterpret_cast<const OrderData*>(
               &_OrderData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    224;

  friend void swap(OrderData& a, OrderData& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderData* New() const final {
    return CreateMaybeMessage<OrderData>(nullptr);
  }

  OrderData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderData& from);
  void MergeFrom(const OrderData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.OrderData";
  }
  protected:
  explicit OrderData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kRatioFieldNumber = 2,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 2;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.OrderData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSSyncAnimation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSSyncAnimation) */ {
 public:
  inline CSSyncAnimation() : CSSyncAnimation(nullptr) {}
  virtual ~CSSyncAnimation();

  CSSyncAnimation(const CSSyncAnimation& from);
  CSSyncAnimation(CSSyncAnimation&& from) noexcept
    : CSSyncAnimation() {
    *this = ::std::move(from);
  }

  inline CSSyncAnimation& operator=(const CSSyncAnimation& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSyncAnimation& operator=(CSSyncAnimation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSyncAnimation& default_instance();

  static inline const CSSyncAnimation* internal_default_instance() {
    return reinterpret_cast<const CSSyncAnimation*>(
               &_CSSyncAnimation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    225;

  friend void swap(CSSyncAnimation& a, CSSyncAnimation& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSyncAnimation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSyncAnimation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSyncAnimation* New() const final {
    return CreateMaybeMessage<CSSyncAnimation>(nullptr);
  }

  CSSyncAnimation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSyncAnimation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSyncAnimation& from);
  void MergeFrom(const CSSyncAnimation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSyncAnimation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSSyncAnimation";
  }
  protected:
  explicit CSSyncAnimation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnimationFieldNumber = 1,
    kIsCompleteFieldNumber = 2,
  };
  // .PlaneWar.Animation animation = 1;
  bool has_animation() const;
  private:
  bool _internal_has_animation() const;
  public:
  void clear_animation();
  const ::PlaneWar::Animation& animation() const;
  ::PlaneWar::Animation* release_animation();
  ::PlaneWar::Animation* mutable_animation();
  void set_allocated_animation(::PlaneWar::Animation* animation);
  private:
  const ::PlaneWar::Animation& _internal_animation() const;
  ::PlaneWar::Animation* _internal_mutable_animation();
  public:
  void unsafe_arena_set_allocated_animation(
      ::PlaneWar::Animation* animation);
  ::PlaneWar::Animation* unsafe_arena_release_animation();

  // bool isComplete = 2;
  void clear_iscomplete();
  bool iscomplete() const;
  void set_iscomplete(bool value);
  private:
  bool _internal_iscomplete() const;
  void _internal_set_iscomplete(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSSyncAnimation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::Animation* animation_;
  bool iscomplete_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCSyncAnimation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCSyncAnimation) */ {
 public:
  inline SCSyncAnimation() : SCSyncAnimation(nullptr) {}
  virtual ~SCSyncAnimation();

  SCSyncAnimation(const SCSyncAnimation& from);
  SCSyncAnimation(SCSyncAnimation&& from) noexcept
    : SCSyncAnimation() {
    *this = ::std::move(from);
  }

  inline SCSyncAnimation& operator=(const SCSyncAnimation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSyncAnimation& operator=(SCSyncAnimation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSyncAnimation& default_instance();

  static inline const SCSyncAnimation* internal_default_instance() {
    return reinterpret_cast<const SCSyncAnimation*>(
               &_SCSyncAnimation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    226;

  friend void swap(SCSyncAnimation& a, SCSyncAnimation& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSyncAnimation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSyncAnimation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSyncAnimation* New() const final {
    return CreateMaybeMessage<SCSyncAnimation>(nullptr);
  }

  SCSyncAnimation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSyncAnimation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSyncAnimation& from);
  void MergeFrom(const SCSyncAnimation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSyncAnimation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCSyncAnimation";
  }
  protected:
  explicit SCSyncAnimation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnimationFieldNumber = 1,
    kIsCompleteFieldNumber = 2,
  };
  // .PlaneWar.Animation animation = 1;
  bool has_animation() const;
  private:
  bool _internal_has_animation() const;
  public:
  void clear_animation();
  const ::PlaneWar::Animation& animation() const;
  ::PlaneWar::Animation* release_animation();
  ::PlaneWar::Animation* mutable_animation();
  void set_allocated_animation(::PlaneWar::Animation* animation);
  private:
  const ::PlaneWar::Animation& _internal_animation() const;
  ::PlaneWar::Animation* _internal_mutable_animation();
  public:
  void unsafe_arena_set_allocated_animation(
      ::PlaneWar::Animation* animation);
  ::PlaneWar::Animation* unsafe_arena_release_animation();

  // bool isComplete = 2;
  void clear_iscomplete();
  bool iscomplete() const;
  void set_iscomplete(bool value);
  private:
  bool _internal_iscomplete() const;
  void _internal_set_iscomplete(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCSyncAnimation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::Animation* animation_;
  bool iscomplete_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCGetAnimations PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCGetAnimations) */ {
 public:
  inline SCGetAnimations() : SCGetAnimations(nullptr) {}
  virtual ~SCGetAnimations();

  SCGetAnimations(const SCGetAnimations& from);
  SCGetAnimations(SCGetAnimations&& from) noexcept
    : SCGetAnimations() {
    *this = ::std::move(from);
  }

  inline SCGetAnimations& operator=(const SCGetAnimations& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGetAnimations& operator=(SCGetAnimations&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGetAnimations& default_instance();

  static inline const SCGetAnimations* internal_default_instance() {
    return reinterpret_cast<const SCGetAnimations*>(
               &_SCGetAnimations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    227;

  friend void swap(SCGetAnimations& a, SCGetAnimations& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGetAnimations* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGetAnimations* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGetAnimations* New() const final {
    return CreateMaybeMessage<SCGetAnimations>(nullptr);
  }

  SCGetAnimations* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGetAnimations>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGetAnimations& from);
  void MergeFrom(const SCGetAnimations& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGetAnimations* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCGetAnimations";
  }
  protected:
  explicit SCGetAnimations(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnimationsFieldNumber = 1,
  };
  // repeated .PlaneWar.Animation animations = 1;
  int animations_size() const;
  private:
  int _internal_animations_size() const;
  public:
  void clear_animations();
  ::PlaneWar::Animation* mutable_animations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::Animation >*
      mutable_animations();
  private:
  const ::PlaneWar::Animation& _internal_animations(int index) const;
  ::PlaneWar::Animation* _internal_add_animations();
  public:
  const ::PlaneWar::Animation& animations(int index) const;
  ::PlaneWar::Animation* add_animations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::Animation >&
      animations() const;

  // @@protoc_insertion_point(class_scope:PlaneWar.SCGetAnimations)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::Animation > animations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class GradeRankDetail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.GradeRankDetail) */ {
 public:
  inline GradeRankDetail() : GradeRankDetail(nullptr) {}
  virtual ~GradeRankDetail();

  GradeRankDetail(const GradeRankDetail& from);
  GradeRankDetail(GradeRankDetail&& from) noexcept
    : GradeRankDetail() {
    *this = ::std::move(from);
  }

  inline GradeRankDetail& operator=(const GradeRankDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline GradeRankDetail& operator=(GradeRankDetail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GradeRankDetail& default_instance();

  static inline const GradeRankDetail* internal_default_instance() {
    return reinterpret_cast<const GradeRankDetail*>(
               &_GradeRankDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    228;

  friend void swap(GradeRankDetail& a, GradeRankDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(GradeRankDetail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GradeRankDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GradeRankDetail* New() const final {
    return CreateMaybeMessage<GradeRankDetail>(nullptr);
  }

  GradeRankDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GradeRankDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GradeRankDetail& from);
  void MergeFrom(const GradeRankDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GradeRankDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.GradeRankDetail";
  }
  protected:
  explicit GradeRankDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRankNameFieldNumber = 2,
    kRankIndexFieldNumber = 1,
  };
  // string rankName = 2;
  void clear_rankname();
  const std::string& rankname() const;
  void set_rankname(const std::string& value);
  void set_rankname(std::string&& value);
  void set_rankname(const char* value);
  void set_rankname(const char* value, size_t size);
  std::string* mutable_rankname();
  std::string* release_rankname();
  void set_allocated_rankname(std::string* rankname);
  private:
  const std::string& _internal_rankname() const;
  void _internal_set_rankname(const std::string& value);
  std::string* _internal_mutable_rankname();
  public:

  // int32 rankIndex = 1;
  void clear_rankindex();
  ::PROTOBUF_NAMESPACE_ID::int32 rankindex() const;
  void set_rankindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rankindex() const;
  void _internal_set_rankindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.GradeRankDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rankname_;
  ::PROTOBUF_NAMESPACE_ID::int32 rankindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class GradeRankConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.GradeRankConfig) */ {
 public:
  inline GradeRankConfig() : GradeRankConfig(nullptr) {}
  virtual ~GradeRankConfig();

  GradeRankConfig(const GradeRankConfig& from);
  GradeRankConfig(GradeRankConfig&& from) noexcept
    : GradeRankConfig() {
    *this = ::std::move(from);
  }

  inline GradeRankConfig& operator=(const GradeRankConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline GradeRankConfig& operator=(GradeRankConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GradeRankConfig& default_instance();

  static inline const GradeRankConfig* internal_default_instance() {
    return reinterpret_cast<const GradeRankConfig*>(
               &_GradeRankConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    229;

  friend void swap(GradeRankConfig& a, GradeRankConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(GradeRankConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GradeRankConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GradeRankConfig* New() const final {
    return CreateMaybeMessage<GradeRankConfig>(nullptr);
  }

  GradeRankConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GradeRankConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GradeRankConfig& from);
  void MergeFrom(const GradeRankConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GradeRankConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.GradeRankConfig";
  }
  protected:
  explicit GradeRankConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGradeRankDetailFieldNumber = 1,
    kRankListLenFieldNumber = 2,
  };
  // repeated .PlaneWar.GradeRankDetail gradeRankDetail = 1;
  int graderankdetail_size() const;
  private:
  int _internal_graderankdetail_size() const;
  public:
  void clear_graderankdetail();
  ::PlaneWar::GradeRankDetail* mutable_graderankdetail(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GradeRankDetail >*
      mutable_graderankdetail();
  private:
  const ::PlaneWar::GradeRankDetail& _internal_graderankdetail(int index) const;
  ::PlaneWar::GradeRankDetail* _internal_add_graderankdetail();
  public:
  const ::PlaneWar::GradeRankDetail& graderankdetail(int index) const;
  ::PlaneWar::GradeRankDetail* add_graderankdetail();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GradeRankDetail >&
      graderankdetail() const;

  // int32 rankListLen = 2;
  void clear_ranklistlen();
  ::PROTOBUF_NAMESPACE_ID::int32 ranklistlen() const;
  void set_ranklistlen(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ranklistlen() const;
  void _internal_set_ranklistlen(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.GradeRankConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GradeRankDetail > graderankdetail_;
  ::PROTOBUF_NAMESPACE_ID::int32 ranklistlen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class WareGivingInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.WareGivingInfo) */ {
 public:
  inline WareGivingInfo() : WareGivingInfo(nullptr) {}
  virtual ~WareGivingInfo();

  WareGivingInfo(const WareGivingInfo& from);
  WareGivingInfo(WareGivingInfo&& from) noexcept
    : WareGivingInfo() {
    *this = ::std::move(from);
  }

  inline WareGivingInfo& operator=(const WareGivingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WareGivingInfo& operator=(WareGivingInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WareGivingInfo& default_instance();

  static inline const WareGivingInfo* internal_default_instance() {
    return reinterpret_cast<const WareGivingInfo*>(
               &_WareGivingInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    230;

  friend void swap(WareGivingInfo& a, WareGivingInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(WareGivingInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WareGivingInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WareGivingInfo* New() const final {
    return CreateMaybeMessage<WareGivingInfo>(nullptr);
  }

  WareGivingInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WareGivingInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WareGivingInfo& from);
  void MergeFrom(const WareGivingInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WareGivingInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.WareGivingInfo";
  }
  protected:
  explicit WareGivingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropNameFieldNumber = 2,
    kPropIdFieldNumber = 1,
    kRatioFieldNumber = 3,
    kNoRepeatFieldNumber = 4,
  };
  // string propName = 2;
  void clear_propname();
  const std::string& propname() const;
  void set_propname(const std::string& value);
  void set_propname(std::string&& value);
  void set_propname(const char* value);
  void set_propname(const char* value, size_t size);
  std::string* mutable_propname();
  std::string* release_propname();
  void set_allocated_propname(std::string* propname);
  private:
  const std::string& _internal_propname() const;
  void _internal_set_propname(const std::string& value);
  std::string* _internal_mutable_propname();
  public:

  // int32 propId = 1;
  void clear_propid();
  ::PROTOBUF_NAMESPACE_ID::int32 propid() const;
  void set_propid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_propid() const;
  void _internal_set_propid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float ratio = 3;
  void clear_ratio();
  float ratio() const;
  void set_ratio(float value);
  private:
  float _internal_ratio() const;
  void _internal_set_ratio(float value);
  public:

  // bool noRepeat = 4;
  void clear_norepeat();
  bool norepeat() const;
  void set_norepeat(bool value);
  private:
  bool _internal_norepeat() const;
  void _internal_set_norepeat(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.WareGivingInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr propname_;
  ::PROTOBUF_NAMESPACE_ID::int32 propid_;
  float ratio_;
  bool norepeat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class WareInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.WareInfo) */ {
 public:
  inline WareInfo() : WareInfo(nullptr) {}
  virtual ~WareInfo();

  WareInfo(const WareInfo& from);
  WareInfo(WareInfo&& from) noexcept
    : WareInfo() {
    *this = ::std::move(from);
  }

  inline WareInfo& operator=(const WareInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WareInfo& operator=(WareInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WareInfo& default_instance();

  static inline const WareInfo* internal_default_instance() {
    return reinterpret_cast<const WareInfo*>(
               &_WareInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    231;

  friend void swap(WareInfo& a, WareInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(WareInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WareInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WareInfo* New() const final {
    return CreateMaybeMessage<WareInfo>(nullptr);
  }

  WareInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WareInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WareInfo& from);
  void MergeFrom(const WareInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WareInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.WareInfo";
  }
  protected:
  explicit WareInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWareGivingInfoListFieldNumber = 2,
    kWareGivingProInfoListFieldNumber = 6,
    kWareIdFieldNumber = 1,
    kMinMoneyFieldNumber = 3,
    kMaxMoneyFieldNumber = 4,
    kPriceFieldNumber = 5,
  };
  // repeated .PlaneWar.WareGivingInfo wareGivingInfoList = 2;
  int waregivinginfolist_size() const;
  private:
  int _internal_waregivinginfolist_size() const;
  public:
  void clear_waregivinginfolist();
  ::PlaneWar::WareGivingInfo* mutable_waregivinginfolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::WareGivingInfo >*
      mutable_waregivinginfolist();
  private:
  const ::PlaneWar::WareGivingInfo& _internal_waregivinginfolist(int index) const;
  ::PlaneWar::WareGivingInfo* _internal_add_waregivinginfolist();
  public:
  const ::PlaneWar::WareGivingInfo& waregivinginfolist(int index) const;
  ::PlaneWar::WareGivingInfo* add_waregivinginfolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::WareGivingInfo >&
      waregivinginfolist() const;

  // repeated .PlaneWar.WareGivingInfo wareGivingProInfoList = 6;
  int waregivingproinfolist_size() const;
  private:
  int _internal_waregivingproinfolist_size() const;
  public:
  void clear_waregivingproinfolist();
  ::PlaneWar::WareGivingInfo* mutable_waregivingproinfolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::WareGivingInfo >*
      mutable_waregivingproinfolist();
  private:
  const ::PlaneWar::WareGivingInfo& _internal_waregivingproinfolist(int index) const;
  ::PlaneWar::WareGivingInfo* _internal_add_waregivingproinfolist();
  public:
  const ::PlaneWar::WareGivingInfo& waregivingproinfolist(int index) const;
  ::PlaneWar::WareGivingInfo* add_waregivingproinfolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::WareGivingInfo >&
      waregivingproinfolist() const;

  // string wareId = 1;
  void clear_wareid();
  const std::string& wareid() const;
  void set_wareid(const std::string& value);
  void set_wareid(std::string&& value);
  void set_wareid(const char* value);
  void set_wareid(const char* value, size_t size);
  std::string* mutable_wareid();
  std::string* release_wareid();
  void set_allocated_wareid(std::string* wareid);
  private:
  const std::string& _internal_wareid() const;
  void _internal_set_wareid(const std::string& value);
  std::string* _internal_mutable_wareid();
  public:

  // int32 minMoney = 3;
  void clear_minmoney();
  ::PROTOBUF_NAMESPACE_ID::int32 minmoney() const;
  void set_minmoney(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minmoney() const;
  void _internal_set_minmoney(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxMoney = 4;
  void clear_maxmoney();
  ::PROTOBUF_NAMESPACE_ID::int32 maxmoney() const;
  void set_maxmoney(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxmoney() const;
  void _internal_set_maxmoney(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 price = 5;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.WareInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::WareGivingInfo > waregivinginfolist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::WareGivingInfo > waregivingproinfolist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wareid_;
  ::PROTOBUF_NAMESPACE_ID::int32 minmoney_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxmoney_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class ExtraGradeRewardInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.ExtraGradeRewardInfo) */ {
 public:
  inline ExtraGradeRewardInfo() : ExtraGradeRewardInfo(nullptr) {}
  virtual ~ExtraGradeRewardInfo();

  ExtraGradeRewardInfo(const ExtraGradeRewardInfo& from);
  ExtraGradeRewardInfo(ExtraGradeRewardInfo&& from) noexcept
    : ExtraGradeRewardInfo() {
    *this = ::std::move(from);
  }

  inline ExtraGradeRewardInfo& operator=(const ExtraGradeRewardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtraGradeRewardInfo& operator=(ExtraGradeRewardInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExtraGradeRewardInfo& default_instance();

  static inline const ExtraGradeRewardInfo* internal_default_instance() {
    return reinterpret_cast<const ExtraGradeRewardInfo*>(
               &_ExtraGradeRewardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    232;

  friend void swap(ExtraGradeRewardInfo& a, ExtraGradeRewardInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtraGradeRewardInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtraGradeRewardInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExtraGradeRewardInfo* New() const final {
    return CreateMaybeMessage<ExtraGradeRewardInfo>(nullptr);
  }

  ExtraGradeRewardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExtraGradeRewardInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExtraGradeRewardInfo& from);
  void MergeFrom(const ExtraGradeRewardInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtraGradeRewardInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.ExtraGradeRewardInfo";
  }
  protected:
  explicit ExtraGradeRewardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kDescFieldNumber = 2,
    kExtraExpFieldNumber = 3,
  };
  // string title = 1;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string desc = 2;
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // float extraExp = 3;
  void clear_extraexp();
  float extraexp() const;
  void set_extraexp(float value);
  private:
  float _internal_extraexp() const;
  void _internal_set_extraexp(float value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.ExtraGradeRewardInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  float extraexp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class RankWareConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.RankWareConfig) */ {
 public:
  inline RankWareConfig() : RankWareConfig(nullptr) {}
  virtual ~RankWareConfig();

  RankWareConfig(const RankWareConfig& from);
  RankWareConfig(RankWareConfig&& from) noexcept
    : RankWareConfig() {
    *this = ::std::move(from);
  }

  inline RankWareConfig& operator=(const RankWareConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankWareConfig& operator=(RankWareConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankWareConfig& default_instance();

  static inline const RankWareConfig* internal_default_instance() {
    return reinterpret_cast<const RankWareConfig*>(
               &_RankWareConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    233;

  friend void swap(RankWareConfig& a, RankWareConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RankWareConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RankWareConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankWareConfig* New() const final {
    return CreateMaybeMessage<RankWareConfig>(nullptr);
  }

  RankWareConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankWareConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankWareConfig& from);
  void MergeFrom(const RankWareConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankWareConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.RankWareConfig";
  }
  protected:
  explicit RankWareConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWareDescListFieldNumber = 4,
    kGradeDescListFieldNumber = 5,
    kCommWareInfoFieldNumber = 1,
    kAdvanceWareInfoFieldNumber = 2,
    kExtraGradeRewardInfoFieldNumber = 3,
  };
  // repeated int32 wareDescList = 4;
  int waredesclist_size() const;
  private:
  int _internal_waredesclist_size() const;
  public:
  void clear_waredesclist();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_waredesclist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_waredesclist() const;
  void _internal_add_waredesclist(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_waredesclist();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 waredesclist(int index) const;
  void set_waredesclist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_waredesclist(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      waredesclist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_waredesclist();

  // repeated int32 gradeDescList = 5;
  int gradedesclist_size() const;
  private:
  int _internal_gradedesclist_size() const;
  public:
  void clear_gradedesclist();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gradedesclist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_gradedesclist() const;
  void _internal_add_gradedesclist(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_gradedesclist();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 gradedesclist(int index) const;
  void set_gradedesclist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_gradedesclist(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      gradedesclist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_gradedesclist();

  // .PlaneWar.WareInfo commWareInfo = 1;
  bool has_commwareinfo() const;
  private:
  bool _internal_has_commwareinfo() const;
  public:
  void clear_commwareinfo();
  const ::PlaneWar::WareInfo& commwareinfo() const;
  ::PlaneWar::WareInfo* release_commwareinfo();
  ::PlaneWar::WareInfo* mutable_commwareinfo();
  void set_allocated_commwareinfo(::PlaneWar::WareInfo* commwareinfo);
  private:
  const ::PlaneWar::WareInfo& _internal_commwareinfo() const;
  ::PlaneWar::WareInfo* _internal_mutable_commwareinfo();
  public:
  void unsafe_arena_set_allocated_commwareinfo(
      ::PlaneWar::WareInfo* commwareinfo);
  ::PlaneWar::WareInfo* unsafe_arena_release_commwareinfo();

  // .PlaneWar.WareInfo advanceWareInfo = 2;
  bool has_advancewareinfo() const;
  private:
  bool _internal_has_advancewareinfo() const;
  public:
  void clear_advancewareinfo();
  const ::PlaneWar::WareInfo& advancewareinfo() const;
  ::PlaneWar::WareInfo* release_advancewareinfo();
  ::PlaneWar::WareInfo* mutable_advancewareinfo();
  void set_allocated_advancewareinfo(::PlaneWar::WareInfo* advancewareinfo);
  private:
  const ::PlaneWar::WareInfo& _internal_advancewareinfo() const;
  ::PlaneWar::WareInfo* _internal_mutable_advancewareinfo();
  public:
  void unsafe_arena_set_allocated_advancewareinfo(
      ::PlaneWar::WareInfo* advancewareinfo);
  ::PlaneWar::WareInfo* unsafe_arena_release_advancewareinfo();

  // .PlaneWar.ExtraGradeRewardInfo extraGradeRewardInfo = 3;
  bool has_extragraderewardinfo() const;
  private:
  bool _internal_has_extragraderewardinfo() const;
  public:
  void clear_extragraderewardinfo();
  const ::PlaneWar::ExtraGradeRewardInfo& extragraderewardinfo() const;
  ::PlaneWar::ExtraGradeRewardInfo* release_extragraderewardinfo();
  ::PlaneWar::ExtraGradeRewardInfo* mutable_extragraderewardinfo();
  void set_allocated_extragraderewardinfo(::PlaneWar::ExtraGradeRewardInfo* extragraderewardinfo);
  private:
  const ::PlaneWar::ExtraGradeRewardInfo& _internal_extragraderewardinfo() const;
  ::PlaneWar::ExtraGradeRewardInfo* _internal_mutable_extragraderewardinfo();
  public:
  void unsafe_arena_set_allocated_extragraderewardinfo(
      ::PlaneWar::ExtraGradeRewardInfo* extragraderewardinfo);
  ::PlaneWar::ExtraGradeRewardInfo* unsafe_arena_release_extragraderewardinfo();

  // @@protoc_insertion_point(class_scope:PlaneWar.RankWareConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > waredesclist_;
  mutable std::atomic<int> _waredesclist_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > gradedesclist_;
  mutable std::atomic<int> _gradedesclist_cached_byte_size_;
  ::PlaneWar::WareInfo* commwareinfo_;
  ::PlaneWar::WareInfo* advancewareinfo_;
  ::PlaneWar::ExtraGradeRewardInfo* extragraderewardinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class DiceConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.DiceConfig) */ {
 public:
  inline DiceConfig() : DiceConfig(nullptr) {}
  virtual ~DiceConfig();

  DiceConfig(const DiceConfig& from);
  DiceConfig(DiceConfig&& from) noexcept
    : DiceConfig() {
    *this = ::std::move(from);
  }

  inline DiceConfig& operator=(const DiceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiceConfig& operator=(DiceConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DiceConfig& default_instance();

  static inline const DiceConfig* internal_default_instance() {
    return reinterpret_cast<const DiceConfig*>(
               &_DiceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    234;

  friend void swap(DiceConfig& a, DiceConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DiceConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiceConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiceConfig* New() const final {
    return CreateMaybeMessage<DiceConfig>(nullptr);
  }

  DiceConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiceConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiceConfig& from);
  void MergeFrom(const DiceConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiceConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.DiceConfig";
  }
  protected:
  explicit DiceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRatioListFieldNumber = 1,
    kMaxMulFieldNumber = 2,
  };
  // repeated int32 ratioList = 1;
  int ratiolist_size() const;
  private:
  int _internal_ratiolist_size() const;
  public:
  void clear_ratiolist();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratiolist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_ratiolist() const;
  void _internal_add_ratiolist(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_ratiolist();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 ratiolist(int index) const;
  void set_ratiolist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_ratiolist(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      ratiolist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_ratiolist();

  // int32 maxMul = 2;
  void clear_maxmul();
  ::PROTOBUF_NAMESPACE_ID::int32 maxmul() const;
  void set_maxmul(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxmul() const;
  void _internal_set_maxmul(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.DiceConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > ratiolist_;
  mutable std::atomic<int> _ratiolist_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxmul_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSSyncConfigs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSSyncConfigs) */ {
 public:
  inline CSSyncConfigs() : CSSyncConfigs(nullptr) {}
  virtual ~CSSyncConfigs();

  CSSyncConfigs(const CSSyncConfigs& from);
  CSSyncConfigs(CSSyncConfigs&& from) noexcept
    : CSSyncConfigs() {
    *this = ::std::move(from);
  }

  inline CSSyncConfigs& operator=(const CSSyncConfigs& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSyncConfigs& operator=(CSSyncConfigs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSyncConfigs& default_instance();

  static inline const CSSyncConfigs* internal_default_instance() {
    return reinterpret_cast<const CSSyncConfigs*>(
               &_CSSyncConfigs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    235;

  friend void swap(CSSyncConfigs& a, CSSyncConfigs& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSyncConfigs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSyncConfigs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSyncConfigs* New() const final {
    return CreateMaybeMessage<CSSyncConfigs>(nullptr);
  }

  CSSyncConfigs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSyncConfigs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSyncConfigs& from);
  void MergeFrom(const CSSyncConfigs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSyncConfigs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSSyncConfigs";
  }
  protected:
  explicit CSSyncConfigs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.CSSyncConfigs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCSyncConfigs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCSyncConfigs) */ {
 public:
  inline SCSyncConfigs() : SCSyncConfigs(nullptr) {}
  virtual ~SCSyncConfigs();

  SCSyncConfigs(const SCSyncConfigs& from);
  SCSyncConfigs(SCSyncConfigs&& from) noexcept
    : SCSyncConfigs() {
    *this = ::std::move(from);
  }

  inline SCSyncConfigs& operator=(const SCSyncConfigs& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSyncConfigs& operator=(SCSyncConfigs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSyncConfigs& default_instance();

  static inline const SCSyncConfigs* internal_default_instance() {
    return reinterpret_cast<const SCSyncConfigs*>(
               &_SCSyncConfigs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    236;

  friend void swap(SCSyncConfigs& a, SCSyncConfigs& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSyncConfigs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSyncConfigs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSyncConfigs* New() const final {
    return CreateMaybeMessage<SCSyncConfigs>(nullptr);
  }

  SCSyncConfigs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSyncConfigs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSyncConfigs& from);
  void MergeFrom(const SCSyncConfigs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSyncConfigs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCSyncConfigs";
  }
  protected:
  explicit SCSyncConfigs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFortuneConfigFieldNumber = 1,
    kBeeConfigFieldNumber = 2,
    kReplayConfigFieldNumber = 3,
    kGradeRankConfigFieldNumber = 4,
    kWareConfigFieldNumber = 5,
    kDiceConfigFieldNumber = 6,
  };
  // repeated .PlaneWar.FortuneConfig fortuneConfig = 1;
  int fortuneconfig_size() const;
  private:
  int _internal_fortuneconfig_size() const;
  public:
  void clear_fortuneconfig();
  ::PlaneWar::FortuneConfig* mutable_fortuneconfig(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::FortuneConfig >*
      mutable_fortuneconfig();
  private:
  const ::PlaneWar::FortuneConfig& _internal_fortuneconfig(int index) const;
  ::PlaneWar::FortuneConfig* _internal_add_fortuneconfig();
  public:
  const ::PlaneWar::FortuneConfig& fortuneconfig(int index) const;
  ::PlaneWar::FortuneConfig* add_fortuneconfig();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::FortuneConfig >&
      fortuneconfig() const;

  // .PlaneWar.BeeConfig beeConfig = 2;
  bool has_beeconfig() const;
  private:
  bool _internal_has_beeconfig() const;
  public:
  void clear_beeconfig();
  const ::PlaneWar::BeeConfig& beeconfig() const;
  ::PlaneWar::BeeConfig* release_beeconfig();
  ::PlaneWar::BeeConfig* mutable_beeconfig();
  void set_allocated_beeconfig(::PlaneWar::BeeConfig* beeconfig);
  private:
  const ::PlaneWar::BeeConfig& _internal_beeconfig() const;
  ::PlaneWar::BeeConfig* _internal_mutable_beeconfig();
  public:
  void unsafe_arena_set_allocated_beeconfig(
      ::PlaneWar::BeeConfig* beeconfig);
  ::PlaneWar::BeeConfig* unsafe_arena_release_beeconfig();

  // .PlaneWar.ReplayConfig replayConfig = 3;
  bool has_replayconfig() const;
  private:
  bool _internal_has_replayconfig() const;
  public:
  void clear_replayconfig();
  const ::PlaneWar::ReplayConfig& replayconfig() const;
  ::PlaneWar::ReplayConfig* release_replayconfig();
  ::PlaneWar::ReplayConfig* mutable_replayconfig();
  void set_allocated_replayconfig(::PlaneWar::ReplayConfig* replayconfig);
  private:
  const ::PlaneWar::ReplayConfig& _internal_replayconfig() const;
  ::PlaneWar::ReplayConfig* _internal_mutable_replayconfig();
  public:
  void unsafe_arena_set_allocated_replayconfig(
      ::PlaneWar::ReplayConfig* replayconfig);
  ::PlaneWar::ReplayConfig* unsafe_arena_release_replayconfig();

  // .PlaneWar.GradeRankConfig gradeRankConfig = 4;
  bool has_graderankconfig() const;
  private:
  bool _internal_has_graderankconfig() const;
  public:
  void clear_graderankconfig();
  const ::PlaneWar::GradeRankConfig& graderankconfig() const;
  ::PlaneWar::GradeRankConfig* release_graderankconfig();
  ::PlaneWar::GradeRankConfig* mutable_graderankconfig();
  void set_allocated_graderankconfig(::PlaneWar::GradeRankConfig* graderankconfig);
  private:
  const ::PlaneWar::GradeRankConfig& _internal_graderankconfig() const;
  ::PlaneWar::GradeRankConfig* _internal_mutable_graderankconfig();
  public:
  void unsafe_arena_set_allocated_graderankconfig(
      ::PlaneWar::GradeRankConfig* graderankconfig);
  ::PlaneWar::GradeRankConfig* unsafe_arena_release_graderankconfig();

  // .PlaneWar.RankWareConfig wareConfig = 5;
  bool has_wareconfig() const;
  private:
  bool _internal_has_wareconfig() const;
  public:
  void clear_wareconfig();
  const ::PlaneWar::RankWareConfig& wareconfig() const;
  ::PlaneWar::RankWareConfig* release_wareconfig();
  ::PlaneWar::RankWareConfig* mutable_wareconfig();
  void set_allocated_wareconfig(::PlaneWar::RankWareConfig* wareconfig);
  private:
  const ::PlaneWar::RankWareConfig& _internal_wareconfig() const;
  ::PlaneWar::RankWareConfig* _internal_mutable_wareconfig();
  public:
  void unsafe_arena_set_allocated_wareconfig(
      ::PlaneWar::RankWareConfig* wareconfig);
  ::PlaneWar::RankWareConfig* unsafe_arena_release_wareconfig();

  // .PlaneWar.DiceConfig diceConfig = 6;
  bool has_diceconfig() const;
  private:
  bool _internal_has_diceconfig() const;
  public:
  void clear_diceconfig();
  const ::PlaneWar::DiceConfig& diceconfig() const;
  ::PlaneWar::DiceConfig* release_diceconfig();
  ::PlaneWar::DiceConfig* mutable_diceconfig();
  void set_allocated_diceconfig(::PlaneWar::DiceConfig* diceconfig);
  private:
  const ::PlaneWar::DiceConfig& _internal_diceconfig() const;
  ::PlaneWar::DiceConfig* _internal_mutable_diceconfig();
  public:
  void unsafe_arena_set_allocated_diceconfig(
      ::PlaneWar::DiceConfig* diceconfig);
  ::PlaneWar::DiceConfig* unsafe_arena_release_diceconfig();

  // @@protoc_insertion_point(class_scope:PlaneWar.SCSyncConfigs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::FortuneConfig > fortuneconfig_;
  ::PlaneWar::BeeConfig* beeconfig_;
  ::PlaneWar::ReplayConfig* replayconfig_;
  ::PlaneWar::GradeRankConfig* graderankconfig_;
  ::PlaneWar::RankWareConfig* wareconfig_;
  ::PlaneWar::DiceConfig* diceconfig_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSConfirmWeaponExist PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSConfirmWeaponExist) */ {
 public:
  inline CSConfirmWeaponExist() : CSConfirmWeaponExist(nullptr) {}
  virtual ~CSConfirmWeaponExist();

  CSConfirmWeaponExist(const CSConfirmWeaponExist& from);
  CSConfirmWeaponExist(CSConfirmWeaponExist&& from) noexcept
    : CSConfirmWeaponExist() {
    *this = ::std::move(from);
  }

  inline CSConfirmWeaponExist& operator=(const CSConfirmWeaponExist& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSConfirmWeaponExist& operator=(CSConfirmWeaponExist&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSConfirmWeaponExist& default_instance();

  static inline const CSConfirmWeaponExist* internal_default_instance() {
    return reinterpret_cast<const CSConfirmWeaponExist*>(
               &_CSConfirmWeaponExist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    237;

  friend void swap(CSConfirmWeaponExist& a, CSConfirmWeaponExist& b) {
    a.Swap(&b);
  }
  inline void Swap(CSConfirmWeaponExist* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSConfirmWeaponExist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSConfirmWeaponExist* New() const final {
    return CreateMaybeMessage<CSConfirmWeaponExist>(nullptr);
  }

  CSConfirmWeaponExist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSConfirmWeaponExist>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSConfirmWeaponExist& from);
  void MergeFrom(const CSConfirmWeaponExist& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSConfirmWeaponExist* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSConfirmWeaponExist";
  }
  protected:
  explicit CSConfirmWeaponExist(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceUIDFieldNumber = 1,
  };
  // int32 sourceUID = 1;
  void clear_sourceuid();
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid() const;
  void set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sourceuid() const;
  void _internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSConfirmWeaponExist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 sourceuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCConfirmWeaponExist PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCConfirmWeaponExist) */ {
 public:
  inline SCConfirmWeaponExist() : SCConfirmWeaponExist(nullptr) {}
  virtual ~SCConfirmWeaponExist();

  SCConfirmWeaponExist(const SCConfirmWeaponExist& from);
  SCConfirmWeaponExist(SCConfirmWeaponExist&& from) noexcept
    : SCConfirmWeaponExist() {
    *this = ::std::move(from);
  }

  inline SCConfirmWeaponExist& operator=(const SCConfirmWeaponExist& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCConfirmWeaponExist& operator=(SCConfirmWeaponExist&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCConfirmWeaponExist& default_instance();

  static inline const SCConfirmWeaponExist* internal_default_instance() {
    return reinterpret_cast<const SCConfirmWeaponExist*>(
               &_SCConfirmWeaponExist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    238;

  friend void swap(SCConfirmWeaponExist& a, SCConfirmWeaponExist& b) {
    a.Swap(&b);
  }
  inline void Swap(SCConfirmWeaponExist* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCConfirmWeaponExist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCConfirmWeaponExist* New() const final {
    return CreateMaybeMessage<SCConfirmWeaponExist>(nullptr);
  }

  SCConfirmWeaponExist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCConfirmWeaponExist>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCConfirmWeaponExist& from);
  void MergeFrom(const SCConfirmWeaponExist& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCConfirmWeaponExist* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCConfirmWeaponExist";
  }
  protected:
  explicit SCConfirmWeaponExist(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExistFieldNumber = 1,
  };
  // bool exist = 1;
  void clear_exist();
  bool exist() const;
  void set_exist(bool value);
  private:
  bool _internal_exist() const;
  void _internal_set_exist(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCConfirmWeaponExist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool exist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSGetVideo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSGetVideo) */ {
 public:
  inline CSGetVideo() : CSGetVideo(nullptr) {}
  virtual ~CSGetVideo();

  CSGetVideo(const CSGetVideo& from);
  CSGetVideo(CSGetVideo&& from) noexcept
    : CSGetVideo() {
    *this = ::std::move(from);
  }

  inline CSGetVideo& operator=(const CSGetVideo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGetVideo& operator=(CSGetVideo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSGetVideo& default_instance();

  static inline const CSGetVideo* internal_default_instance() {
    return reinterpret_cast<const CSGetVideo*>(
               &_CSGetVideo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    239;

  friend void swap(CSGetVideo& a, CSGetVideo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSGetVideo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGetVideo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSGetVideo* New() const final {
    return CreateMaybeMessage<CSGetVideo>(nullptr);
  }

  CSGetVideo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSGetVideo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSGetVideo& from);
  void MergeFrom(const CSGetVideo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSGetVideo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSGetVideo";
  }
  protected:
  explicit CSGetVideo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVideoIdFieldNumber = 1,
    kVideoTypeFieldNumber = 2,
  };
  // string videoId = 1;
  void clear_videoid();
  const std::string& videoid() const;
  void set_videoid(const std::string& value);
  void set_videoid(std::string&& value);
  void set_videoid(const char* value);
  void set_videoid(const char* value, size_t size);
  std::string* mutable_videoid();
  std::string* release_videoid();
  void set_allocated_videoid(std::string* videoid);
  private:
  const std::string& _internal_videoid() const;
  void _internal_set_videoid(const std::string& value);
  std::string* _internal_mutable_videoid();
  public:

  // int32 videoType = 2;
  void clear_videotype();
  ::PROTOBUF_NAMESPACE_ID::int32 videotype() const;
  void set_videotype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_videotype() const;
  void _internal_set_videotype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSGetVideo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr videoid_;
  ::PROTOBUF_NAMESPACE_ID::int32 videotype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCGetVideo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCGetVideo) */ {
 public:
  inline SCGetVideo() : SCGetVideo(nullptr) {}
  virtual ~SCGetVideo();

  SCGetVideo(const SCGetVideo& from);
  SCGetVideo(SCGetVideo&& from) noexcept
    : SCGetVideo() {
    *this = ::std::move(from);
  }

  inline SCGetVideo& operator=(const SCGetVideo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGetVideo& operator=(SCGetVideo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGetVideo& default_instance();

  static inline const SCGetVideo* internal_default_instance() {
    return reinterpret_cast<const SCGetVideo*>(
               &_SCGetVideo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    240;

  friend void swap(SCGetVideo& a, SCGetVideo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGetVideo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGetVideo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGetVideo* New() const final {
    return CreateMaybeMessage<SCGetVideo>(nullptr);
  }

  SCGetVideo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGetVideo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGetVideo& from);
  void MergeFrom(const SCGetVideo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGetVideo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCGetVideo";
  }
  protected:
  explicit SCGetVideo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreatedPathListFieldNumber = 1,
    kTimestampFieldNumber = 3,
    kRewardTypeFieldNumber = 2,
    kRewardFieldNumber = 4,
    kMoneyFieldNumber = 6,
    kChairFieldNumber = 5,
    kRatioFieldNumber = 7,
    kGunTypeFieldNumber = 8,
    kArenaFieldNumber = 9,
    kWeaponIdFieldNumber = 10,
  };
  // repeated .PlaneWar.MonsterPath createdPathList = 1;
  int createdpathlist_size() const;
  private:
  int _internal_createdpathlist_size() const;
  public:
  void clear_createdpathlist();
  ::PlaneWar::MonsterPath* mutable_createdpathlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MonsterPath >*
      mutable_createdpathlist();
  private:
  const ::PlaneWar::MonsterPath& _internal_createdpathlist(int index) const;
  ::PlaneWar::MonsterPath* _internal_add_createdpathlist();
  public:
  const ::PlaneWar::MonsterPath& createdpathlist(int index) const;
  ::PlaneWar::MonsterPath* add_createdpathlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MonsterPath >&
      createdpathlist() const;

  // int64 timestamp = 3;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 rewardType = 2;
  void clear_rewardtype();
  ::PROTOBUF_NAMESPACE_ID::int32 rewardtype() const;
  void set_rewardtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rewardtype() const;
  void _internal_set_rewardtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reward = 4;
  void clear_reward();
  ::PROTOBUF_NAMESPACE_ID::int32 reward() const;
  void set_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reward() const;
  void _internal_set_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 money = 6;
  void clear_money();
  ::PROTOBUF_NAMESPACE_ID::int64 money() const;
  void set_money(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_money() const;
  void _internal_set_money(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 chair = 5;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 7;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gunType = 8;
  void clear_guntype();
  ::PROTOBUF_NAMESPACE_ID::int32 guntype() const;
  void set_guntype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_guntype() const;
  void _internal_set_guntype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 arena = 9;
  void clear_arena();
  ::PROTOBUF_NAMESPACE_ID::int32 arena() const;
  void set_arena(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_arena() const;
  void _internal_set_arena(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 weaponId = 10;
  void clear_weaponid();
  ::PROTOBUF_NAMESPACE_ID::int32 weaponid() const;
  void set_weaponid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_weaponid() const;
  void _internal_set_weaponid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCGetVideo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MonsterPath > createdpathlist_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 rewardtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 reward_;
  ::PROTOBUF_NAMESPACE_ID::int64 money_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 guntype_;
  ::PROTOBUF_NAMESPACE_ID::int32 arena_;
  ::PROTOBUF_NAMESPACE_ID::int32 weaponid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class VideoCommon PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.VideoCommon) */ {
 public:
  inline VideoCommon() : VideoCommon(nullptr) {}
  virtual ~VideoCommon();

  VideoCommon(const VideoCommon& from);
  VideoCommon(VideoCommon&& from) noexcept
    : VideoCommon() {
    *this = ::std::move(from);
  }

  inline VideoCommon& operator=(const VideoCommon& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoCommon& operator=(VideoCommon&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VideoCommon& default_instance();

  static inline const VideoCommon* internal_default_instance() {
    return reinterpret_cast<const VideoCommon*>(
               &_VideoCommon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    241;

  friend void swap(VideoCommon& a, VideoCommon& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoCommon* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoCommon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VideoCommon* New() const final {
    return CreateMaybeMessage<VideoCommon>(nullptr);
  }

  VideoCommon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VideoCommon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VideoCommon& from);
  void MergeFrom(const VideoCommon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoCommon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.VideoCommon";
  }
  protected:
  explicit VideoCommon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVideoIdFieldNumber = 4,
    kRewardFieldNumber = 1,
    kRewardTypeFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kUnreadFieldNumber = 5,
    kWeaponIdFieldNumber = 6,
    kArenaIdFieldNumber = 7,
  };
  // string videoId = 4;
  void clear_videoid();
  const std::string& videoid() const;
  void set_videoid(const std::string& value);
  void set_videoid(std::string&& value);
  void set_videoid(const char* value);
  void set_videoid(const char* value, size_t size);
  std::string* mutable_videoid();
  std::string* release_videoid();
  void set_allocated_videoid(std::string* videoid);
  private:
  const std::string& _internal_videoid() const;
  void _internal_set_videoid(const std::string& value);
  std::string* _internal_mutable_videoid();
  public:

  // int32 reward = 1;
  void clear_reward();
  ::PROTOBUF_NAMESPACE_ID::int32 reward() const;
  void set_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reward() const;
  void _internal_set_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rewardType = 2;
  void clear_rewardtype();
  ::PROTOBUF_NAMESPACE_ID::int32 rewardtype() const;
  void set_rewardtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rewardtype() const;
  void _internal_set_rewardtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 timestamp = 3;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool unread = 5;
  void clear_unread();
  bool unread() const;
  void set_unread(bool value);
  private:
  bool _internal_unread() const;
  void _internal_set_unread(bool value);
  public:

  // int32 weaponId = 6;
  void clear_weaponid();
  ::PROTOBUF_NAMESPACE_ID::int32 weaponid() const;
  void set_weaponid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_weaponid() const;
  void _internal_set_weaponid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 arenaId = 7;
  void clear_arenaid();
  ::PROTOBUF_NAMESPACE_ID::int32 arenaid() const;
  void set_arenaid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_arenaid() const;
  void _internal_set_arenaid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.VideoCommon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr videoid_;
  ::PROTOBUF_NAMESPACE_ID::int32 reward_;
  ::PROTOBUF_NAMESPACE_ID::int32 rewardtype_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  bool unread_;
  ::PROTOBUF_NAMESPACE_ID::int32 weaponid_;
  ::PROTOBUF_NAMESPACE_ID::int32 arenaid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class GlobalVideoInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.GlobalVideoInfo) */ {
 public:
  inline GlobalVideoInfo() : GlobalVideoInfo(nullptr) {}
  virtual ~GlobalVideoInfo();

  GlobalVideoInfo(const GlobalVideoInfo& from);
  GlobalVideoInfo(GlobalVideoInfo&& from) noexcept
    : GlobalVideoInfo() {
    *this = ::std::move(from);
  }

  inline GlobalVideoInfo& operator=(const GlobalVideoInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalVideoInfo& operator=(GlobalVideoInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GlobalVideoInfo& default_instance();

  static inline const GlobalVideoInfo* internal_default_instance() {
    return reinterpret_cast<const GlobalVideoInfo*>(
               &_GlobalVideoInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    242;

  friend void swap(GlobalVideoInfo& a, GlobalVideoInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalVideoInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GlobalVideoInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalVideoInfo* New() const final {
    return CreateMaybeMessage<GlobalVideoInfo>(nullptr);
  }

  GlobalVideoInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalVideoInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GlobalVideoInfo& from);
  void MergeFrom(const GlobalVideoInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalVideoInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.GlobalVideoInfo";
  }
  protected:
  explicit GlobalVideoInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNiceNameFieldNumber = 1,
    kCommonFieldNumber = 3,
    kSelfFieldNumber = 2,
  };
  // string niceName = 1;
  void clear_nicename();
  const std::string& nicename() const;
  void set_nicename(const std::string& value);
  void set_nicename(std::string&& value);
  void set_nicename(const char* value);
  void set_nicename(const char* value, size_t size);
  std::string* mutable_nicename();
  std::string* release_nicename();
  void set_allocated_nicename(std::string* nicename);
  private:
  const std::string& _internal_nicename() const;
  void _internal_set_nicename(const std::string& value);
  std::string* _internal_mutable_nicename();
  public:

  // .PlaneWar.VideoCommon common = 3;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::PlaneWar::VideoCommon& common() const;
  ::PlaneWar::VideoCommon* release_common();
  ::PlaneWar::VideoCommon* mutable_common();
  void set_allocated_common(::PlaneWar::VideoCommon* common);
  private:
  const ::PlaneWar::VideoCommon& _internal_common() const;
  ::PlaneWar::VideoCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::PlaneWar::VideoCommon* common);
  ::PlaneWar::VideoCommon* unsafe_arena_release_common();

  // bool self = 2;
  void clear_self();
  bool self() const;
  void set_self(bool value);
  private:
  bool _internal_self() const;
  void _internal_set_self(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.GlobalVideoInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nicename_;
  ::PlaneWar::VideoCommon* common_;
  bool self_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SelfVideoInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SelfVideoInfo) */ {
 public:
  inline SelfVideoInfo() : SelfVideoInfo(nullptr) {}
  virtual ~SelfVideoInfo();

  SelfVideoInfo(const SelfVideoInfo& from);
  SelfVideoInfo(SelfVideoInfo&& from) noexcept
    : SelfVideoInfo() {
    *this = ::std::move(from);
  }

  inline SelfVideoInfo& operator=(const SelfVideoInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelfVideoInfo& operator=(SelfVideoInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SelfVideoInfo& default_instance();

  static inline const SelfVideoInfo* internal_default_instance() {
    return reinterpret_cast<const SelfVideoInfo*>(
               &_SelfVideoInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    243;

  friend void swap(SelfVideoInfo& a, SelfVideoInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SelfVideoInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelfVideoInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelfVideoInfo* New() const final {
    return CreateMaybeMessage<SelfVideoInfo>(nullptr);
  }

  SelfVideoInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelfVideoInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SelfVideoInfo& from);
  void MergeFrom(const SelfVideoInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelfVideoInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SelfVideoInfo";
  }
  protected:
  explicit SelfVideoInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 2,
    kRatioFieldNumber = 1,
  };
  // .PlaneWar.VideoCommon common = 2;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::PlaneWar::VideoCommon& common() const;
  ::PlaneWar::VideoCommon* release_common();
  ::PlaneWar::VideoCommon* mutable_common();
  void set_allocated_common(::PlaneWar::VideoCommon* common);
  private:
  const ::PlaneWar::VideoCommon& _internal_common() const;
  ::PlaneWar::VideoCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::PlaneWar::VideoCommon* common);
  ::PlaneWar::VideoCommon* unsafe_arena_release_common();

  // int32 ratio = 1;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SelfVideoInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::VideoCommon* common_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSSelfVideoRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSSelfVideoRecord) */ {
 public:
  inline CSSelfVideoRecord() : CSSelfVideoRecord(nullptr) {}
  virtual ~CSSelfVideoRecord();

  CSSelfVideoRecord(const CSSelfVideoRecord& from);
  CSSelfVideoRecord(CSSelfVideoRecord&& from) noexcept
    : CSSelfVideoRecord() {
    *this = ::std::move(from);
  }

  inline CSSelfVideoRecord& operator=(const CSSelfVideoRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSelfVideoRecord& operator=(CSSelfVideoRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSelfVideoRecord& default_instance();

  static inline const CSSelfVideoRecord* internal_default_instance() {
    return reinterpret_cast<const CSSelfVideoRecord*>(
               &_CSSelfVideoRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    244;

  friend void swap(CSSelfVideoRecord& a, CSSelfVideoRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSelfVideoRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSelfVideoRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSelfVideoRecord* New() const final {
    return CreateMaybeMessage<CSSelfVideoRecord>(nullptr);
  }

  CSSelfVideoRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSelfVideoRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSelfVideoRecord& from);
  void MergeFrom(const CSSelfVideoRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSelfVideoRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSSelfVideoRecord";
  }
  protected:
  explicit CSSelfVideoRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
  };
  // int32 from = 1;
  void clear_from();
  ::PROTOBUF_NAMESPACE_ID::int32 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from() const;
  void _internal_set_from(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 to = 2;
  void clear_to();
  ::PROTOBUF_NAMESPACE_ID::int32 to() const;
  void set_to(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to() const;
  void _internal_set_to(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSSelfVideoRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCSelfVideoRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCSelfVideoRecord) */ {
 public:
  inline SCSelfVideoRecord() : SCSelfVideoRecord(nullptr) {}
  virtual ~SCSelfVideoRecord();

  SCSelfVideoRecord(const SCSelfVideoRecord& from);
  SCSelfVideoRecord(SCSelfVideoRecord&& from) noexcept
    : SCSelfVideoRecord() {
    *this = ::std::move(from);
  }

  inline SCSelfVideoRecord& operator=(const SCSelfVideoRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSelfVideoRecord& operator=(SCSelfVideoRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSelfVideoRecord& default_instance();

  static inline const SCSelfVideoRecord* internal_default_instance() {
    return reinterpret_cast<const SCSelfVideoRecord*>(
               &_SCSelfVideoRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    245;

  friend void swap(SCSelfVideoRecord& a, SCSelfVideoRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSelfVideoRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSelfVideoRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSelfVideoRecord* New() const final {
    return CreateMaybeMessage<SCSelfVideoRecord>(nullptr);
  }

  SCSelfVideoRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSelfVideoRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSelfVideoRecord& from);
  void MergeFrom(const SCSelfVideoRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSelfVideoRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCSelfVideoRecord";
  }
  protected:
  explicit SCSelfVideoRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVideoListFieldNumber = 1,
    kRefreshTimeFieldNumber = 2,
  };
  // repeated .PlaneWar.SelfVideoInfo videoList = 1;
  int videolist_size() const;
  private:
  int _internal_videolist_size() const;
  public:
  void clear_videolist();
  ::PlaneWar::SelfVideoInfo* mutable_videolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::SelfVideoInfo >*
      mutable_videolist();
  private:
  const ::PlaneWar::SelfVideoInfo& _internal_videolist(int index) const;
  ::PlaneWar::SelfVideoInfo* _internal_add_videolist();
  public:
  const ::PlaneWar::SelfVideoInfo& videolist(int index) const;
  ::PlaneWar::SelfVideoInfo* add_videolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::SelfVideoInfo >&
      videolist() const;

  // int32 refreshTime = 2;
  void clear_refreshtime();
  ::PROTOBUF_NAMESPACE_ID::int32 refreshtime() const;
  void set_refreshtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_refreshtime() const;
  void _internal_set_refreshtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCSelfVideoRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::SelfVideoInfo > videolist_;
  ::PROTOBUF_NAMESPACE_ID::int32 refreshtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSVideoRank PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSVideoRank) */ {
 public:
  inline CSVideoRank() : CSVideoRank(nullptr) {}
  virtual ~CSVideoRank();

  CSVideoRank(const CSVideoRank& from);
  CSVideoRank(CSVideoRank&& from) noexcept
    : CSVideoRank() {
    *this = ::std::move(from);
  }

  inline CSVideoRank& operator=(const CSVideoRank& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVideoRank& operator=(CSVideoRank&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVideoRank& default_instance();

  static inline const CSVideoRank* internal_default_instance() {
    return reinterpret_cast<const CSVideoRank*>(
               &_CSVideoRank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    246;

  friend void swap(CSVideoRank& a, CSVideoRank& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVideoRank* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVideoRank* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVideoRank* New() const final {
    return CreateMaybeMessage<CSVideoRank>(nullptr);
  }

  CSVideoRank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVideoRank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVideoRank& from);
  void MergeFrom(const CSVideoRank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVideoRank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSVideoRank";
  }
  protected:
  explicit CSVideoRank(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
  };
  // int32 from = 1;
  void clear_from();
  ::PROTOBUF_NAMESPACE_ID::int32 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from() const;
  void _internal_set_from(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 to = 2;
  void clear_to();
  ::PROTOBUF_NAMESPACE_ID::int32 to() const;
  void set_to(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to() const;
  void _internal_set_to(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSVideoRank)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCVideoRank PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCVideoRank) */ {
 public:
  inline SCVideoRank() : SCVideoRank(nullptr) {}
  virtual ~SCVideoRank();

  SCVideoRank(const SCVideoRank& from);
  SCVideoRank(SCVideoRank&& from) noexcept
    : SCVideoRank() {
    *this = ::std::move(from);
  }

  inline SCVideoRank& operator=(const SCVideoRank& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCVideoRank& operator=(SCVideoRank&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCVideoRank& default_instance();

  static inline const SCVideoRank* internal_default_instance() {
    return reinterpret_cast<const SCVideoRank*>(
               &_SCVideoRank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    247;

  friend void swap(SCVideoRank& a, SCVideoRank& b) {
    a.Swap(&b);
  }
  inline void Swap(SCVideoRank* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCVideoRank* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCVideoRank* New() const final {
    return CreateMaybeMessage<SCVideoRank>(nullptr);
  }

  SCVideoRank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCVideoRank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCVideoRank& from);
  void MergeFrom(const SCVideoRank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCVideoRank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCVideoRank";
  }
  protected:
  explicit SCVideoRank(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVideoListFieldNumber = 1,
    kRefreshTimeFieldNumber = 2,
  };
  // repeated .PlaneWar.GlobalVideoInfo videoList = 1;
  int videolist_size() const;
  private:
  int _internal_videolist_size() const;
  public:
  void clear_videolist();
  ::PlaneWar::GlobalVideoInfo* mutable_videolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GlobalVideoInfo >*
      mutable_videolist();
  private:
  const ::PlaneWar::GlobalVideoInfo& _internal_videolist(int index) const;
  ::PlaneWar::GlobalVideoInfo* _internal_add_videolist();
  public:
  const ::PlaneWar::GlobalVideoInfo& videolist(int index) const;
  ::PlaneWar::GlobalVideoInfo* add_videolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GlobalVideoInfo >&
      videolist() const;

  // int32 refreshTime = 2;
  void clear_refreshtime();
  ::PROTOBUF_NAMESPACE_ID::int32 refreshtime() const;
  void set_refreshtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_refreshtime() const;
  void _internal_set_refreshtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCVideoRank)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GlobalVideoInfo > videolist_;
  ::PROTOBUF_NAMESPACE_ID::int32 refreshtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class ReceiveReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.ReceiveReward) */ {
 public:
  inline ReceiveReward() : ReceiveReward(nullptr) {}
  virtual ~ReceiveReward();

  ReceiveReward(const ReceiveReward& from);
  ReceiveReward(ReceiveReward&& from) noexcept
    : ReceiveReward() {
    *this = ::std::move(from);
  }

  inline ReceiveReward& operator=(const ReceiveReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReceiveReward& operator=(ReceiveReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReceiveReward& default_instance();

  static inline const ReceiveReward* internal_default_instance() {
    return reinterpret_cast<const ReceiveReward*>(
               &_ReceiveReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    248;

  friend void swap(ReceiveReward& a, ReceiveReward& b) {
    a.Swap(&b);
  }
  inline void Swap(ReceiveReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReceiveReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReceiveReward* New() const final {
    return CreateMaybeMessage<ReceiveReward>(nullptr);
  }

  ReceiveReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReceiveReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReceiveReward& from);
  void MergeFrom(const ReceiveReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReceiveReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.ReceiveReward";
  }
  protected:
  explicit ReceiveReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescFieldNumber = 8,
    kTitleFieldNumber = 10,
    kPropIdFieldNumber = 1,
    kNumFieldNumber = 2,
    kMinNumFieldNumber = 4,
    kAdvanceFieldNumber = 3,
    kBoxFieldNumber = 6,
    kMaxNumFieldNumber = 5,
    kUniqueIdFieldNumber = 7,
    kTimeLimitFieldNumber = 9,
    kPropTypeFieldNumber = 11,
    kSpecialFieldNumber = 12,
  };
  // string desc = 8;
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // string title = 10;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // int32 propId = 1;
  void clear_propid();
  ::PROTOBUF_NAMESPACE_ID::int32 propid() const;
  void set_propid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_propid() const;
  void _internal_set_propid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 minNum = 4;
  void clear_minnum();
  ::PROTOBUF_NAMESPACE_ID::int32 minnum() const;
  void set_minnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minnum() const;
  void _internal_set_minnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool advance = 3;
  void clear_advance();
  bool advance() const;
  void set_advance(bool value);
  private:
  bool _internal_advance() const;
  void _internal_set_advance(bool value);
  public:

  // bool box = 6;
  void clear_box();
  bool box() const;
  void set_box(bool value);
  private:
  bool _internal_box() const;
  void _internal_set_box(bool value);
  public:

  // int32 maxNum = 5;
  void clear_maxnum();
  ::PROTOBUF_NAMESPACE_ID::int32 maxnum() const;
  void set_maxnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxnum() const;
  void _internal_set_maxnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uniqueId = 7;
  void clear_uniqueid();
  ::PROTOBUF_NAMESPACE_ID::int32 uniqueid() const;
  void set_uniqueid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uniqueid() const;
  void _internal_set_uniqueid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 timeLimit = 9;
  void clear_timelimit();
  ::PROTOBUF_NAMESPACE_ID::int32 timelimit() const;
  void set_timelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timelimit() const;
  void _internal_set_timelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 propType = 11;
  void clear_proptype();
  ::PROTOBUF_NAMESPACE_ID::int32 proptype() const;
  void set_proptype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_proptype() const;
  void _internal_set_proptype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 special = 12;
  void clear_special();
  ::PROTOBUF_NAMESPACE_ID::int32 special() const;
  void set_special(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_special() const;
  void _internal_set_special(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.ReceiveReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::int32 propid_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  ::PROTOBUF_NAMESPACE_ID::int32 minnum_;
  bool advance_;
  bool box_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 uniqueid_;
  ::PROTOBUF_NAMESPACE_ID::int32 timelimit_;
  ::PROTOBUF_NAMESPACE_ID::int32 proptype_;
  ::PROTOBUF_NAMESPACE_ID::int32 special_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSReceiveGradeReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSReceiveGradeReward) */ {
 public:
  inline CSReceiveGradeReward() : CSReceiveGradeReward(nullptr) {}
  virtual ~CSReceiveGradeReward();

  CSReceiveGradeReward(const CSReceiveGradeReward& from);
  CSReceiveGradeReward(CSReceiveGradeReward&& from) noexcept
    : CSReceiveGradeReward() {
    *this = ::std::move(from);
  }

  inline CSReceiveGradeReward& operator=(const CSReceiveGradeReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReceiveGradeReward& operator=(CSReceiveGradeReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSReceiveGradeReward& default_instance();

  static inline const CSReceiveGradeReward* internal_default_instance() {
    return reinterpret_cast<const CSReceiveGradeReward*>(
               &_CSReceiveGradeReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    249;

  friend void swap(CSReceiveGradeReward& a, CSReceiveGradeReward& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReceiveGradeReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReceiveGradeReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSReceiveGradeReward* New() const final {
    return CreateMaybeMessage<CSReceiveGradeReward>(nullptr);
  }

  CSReceiveGradeReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSReceiveGradeReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSReceiveGradeReward& from);
  void MergeFrom(const CSReceiveGradeReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSReceiveGradeReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSReceiveGradeReward";
  }
  protected:
  explicit CSReceiveGradeReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.CSReceiveGradeReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCReceiveGradeReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCReceiveGradeReward) */ {
 public:
  inline SCReceiveGradeReward() : SCReceiveGradeReward(nullptr) {}
  virtual ~SCReceiveGradeReward();

  SCReceiveGradeReward(const SCReceiveGradeReward& from);
  SCReceiveGradeReward(SCReceiveGradeReward&& from) noexcept
    : SCReceiveGradeReward() {
    *this = ::std::move(from);
  }

  inline SCReceiveGradeReward& operator=(const SCReceiveGradeReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCReceiveGradeReward& operator=(SCReceiveGradeReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCReceiveGradeReward& default_instance();

  static inline const SCReceiveGradeReward* internal_default_instance() {
    return reinterpret_cast<const SCReceiveGradeReward*>(
               &_SCReceiveGradeReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    250;

  friend void swap(SCReceiveGradeReward& a, SCReceiveGradeReward& b) {
    a.Swap(&b);
  }
  inline void Swap(SCReceiveGradeReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCReceiveGradeReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCReceiveGradeReward* New() const final {
    return CreateMaybeMessage<SCReceiveGradeReward>(nullptr);
  }

  SCReceiveGradeReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCReceiveGradeReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCReceiveGradeReward& from);
  void MergeFrom(const SCReceiveGradeReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCReceiveGradeReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCReceiveGradeReward";
  }
  protected:
  explicit SCReceiveGradeReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceiveRewardListFieldNumber = 1,
    kUnReceiveRewardListFieldNumber = 2,
    kSeasonEndFieldNumber = 3,
  };
  // repeated .PlaneWar.ReceiveReward receiveRewardList = 1;
  int receiverewardlist_size() const;
  private:
  int _internal_receiverewardlist_size() const;
  public:
  void clear_receiverewardlist();
  ::PlaneWar::ReceiveReward* mutable_receiverewardlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ReceiveReward >*
      mutable_receiverewardlist();
  private:
  const ::PlaneWar::ReceiveReward& _internal_receiverewardlist(int index) const;
  ::PlaneWar::ReceiveReward* _internal_add_receiverewardlist();
  public:
  const ::PlaneWar::ReceiveReward& receiverewardlist(int index) const;
  ::PlaneWar::ReceiveReward* add_receiverewardlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ReceiveReward >&
      receiverewardlist() const;

  // repeated .PlaneWar.ReceiveReward unReceiveRewardList = 2;
  int unreceiverewardlist_size() const;
  private:
  int _internal_unreceiverewardlist_size() const;
  public:
  void clear_unreceiverewardlist();
  ::PlaneWar::ReceiveReward* mutable_unreceiverewardlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ReceiveReward >*
      mutable_unreceiverewardlist();
  private:
  const ::PlaneWar::ReceiveReward& _internal_unreceiverewardlist(int index) const;
  ::PlaneWar::ReceiveReward* _internal_add_unreceiverewardlist();
  public:
  const ::PlaneWar::ReceiveReward& unreceiverewardlist(int index) const;
  ::PlaneWar::ReceiveReward* add_unreceiverewardlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ReceiveReward >&
      unreceiverewardlist() const;

  // bool seasonEnd = 3;
  void clear_seasonend();
  bool seasonend() const;
  void set_seasonend(bool value);
  private:
  bool _internal_seasonend() const;
  void _internal_set_seasonend(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCReceiveGradeReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ReceiveReward > receiverewardlist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ReceiveReward > unreceiverewardlist_;
  bool seasonend_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class GradeRewardDetail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.GradeRewardDetail) */ {
 public:
  inline GradeRewardDetail() : GradeRewardDetail(nullptr) {}
  virtual ~GradeRewardDetail();

  GradeRewardDetail(const GradeRewardDetail& from);
  GradeRewardDetail(GradeRewardDetail&& from) noexcept
    : GradeRewardDetail() {
    *this = ::std::move(from);
  }

  inline GradeRewardDetail& operator=(const GradeRewardDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline GradeRewardDetail& operator=(GradeRewardDetail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GradeRewardDetail& default_instance();

  static inline const GradeRewardDetail* internal_default_instance() {
    return reinterpret_cast<const GradeRewardDetail*>(
               &_GradeRewardDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    251;

  friend void swap(GradeRewardDetail& a, GradeRewardDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(GradeRewardDetail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GradeRewardDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GradeRewardDetail* New() const final {
    return CreateMaybeMessage<GradeRewardDetail>(nullptr);
  }

  GradeRewardDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GradeRewardDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GradeRewardDetail& from);
  void MergeFrom(const GradeRewardDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GradeRewardDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.GradeRewardDetail";
  }
  protected:
  explicit GradeRewardDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardInfoFieldNumber = 1,
    kReachFieldNumber = 2,
    kReceiveFieldNumber = 3,
  };
  // .PlaneWar.ReceiveReward rewardInfo = 1;
  bool has_rewardinfo() const;
  private:
  bool _internal_has_rewardinfo() const;
  public:
  void clear_rewardinfo();
  const ::PlaneWar::ReceiveReward& rewardinfo() const;
  ::PlaneWar::ReceiveReward* release_rewardinfo();
  ::PlaneWar::ReceiveReward* mutable_rewardinfo();
  void set_allocated_rewardinfo(::PlaneWar::ReceiveReward* rewardinfo);
  private:
  const ::PlaneWar::ReceiveReward& _internal_rewardinfo() const;
  ::PlaneWar::ReceiveReward* _internal_mutable_rewardinfo();
  public:
  void unsafe_arena_set_allocated_rewardinfo(
      ::PlaneWar::ReceiveReward* rewardinfo);
  ::PlaneWar::ReceiveReward* unsafe_arena_release_rewardinfo();

  // bool reach = 2;
  void clear_reach();
  bool reach() const;
  void set_reach(bool value);
  private:
  bool _internal_reach() const;
  void _internal_set_reach(bool value);
  public:

  // bool receive = 3;
  void clear_receive();
  bool receive() const;
  void set_receive(bool value);
  private:
  bool _internal_receive() const;
  void _internal_set_receive(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.GradeRewardDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::ReceiveReward* rewardinfo_;
  bool reach_;
  bool receive_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class GradeRewardInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.GradeRewardInfo) */ {
 public:
  inline GradeRewardInfo() : GradeRewardInfo(nullptr) {}
  virtual ~GradeRewardInfo();

  GradeRewardInfo(const GradeRewardInfo& from);
  GradeRewardInfo(GradeRewardInfo&& from) noexcept
    : GradeRewardInfo() {
    *this = ::std::move(from);
  }

  inline GradeRewardInfo& operator=(const GradeRewardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GradeRewardInfo& operator=(GradeRewardInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GradeRewardInfo& default_instance();

  static inline const GradeRewardInfo* internal_default_instance() {
    return reinterpret_cast<const GradeRewardInfo*>(
               &_GradeRewardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    252;

  friend void swap(GradeRewardInfo& a, GradeRewardInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GradeRewardInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GradeRewardInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GradeRewardInfo* New() const final {
    return CreateMaybeMessage<GradeRewardInfo>(nullptr);
  }

  GradeRewardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GradeRewardInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GradeRewardInfo& from);
  void MergeFrom(const GradeRewardInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GradeRewardInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.GradeRewardInfo";
  }
  protected:
  explicit GradeRewardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommRewardListFieldNumber = 2,
    kAdvanceRewardListFieldNumber = 3,
    kRankNameFieldNumber = 1,
    kFirstFieldNumber = 4,
  };
  // repeated .PlaneWar.GradeRewardDetail commRewardList = 2;
  int commrewardlist_size() const;
  private:
  int _internal_commrewardlist_size() const;
  public:
  void clear_commrewardlist();
  ::PlaneWar::GradeRewardDetail* mutable_commrewardlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GradeRewardDetail >*
      mutable_commrewardlist();
  private:
  const ::PlaneWar::GradeRewardDetail& _internal_commrewardlist(int index) const;
  ::PlaneWar::GradeRewardDetail* _internal_add_commrewardlist();
  public:
  const ::PlaneWar::GradeRewardDetail& commrewardlist(int index) const;
  ::PlaneWar::GradeRewardDetail* add_commrewardlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GradeRewardDetail >&
      commrewardlist() const;

  // repeated .PlaneWar.GradeRewardDetail advanceRewardList = 3;
  int advancerewardlist_size() const;
  private:
  int _internal_advancerewardlist_size() const;
  public:
  void clear_advancerewardlist();
  ::PlaneWar::GradeRewardDetail* mutable_advancerewardlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GradeRewardDetail >*
      mutable_advancerewardlist();
  private:
  const ::PlaneWar::GradeRewardDetail& _internal_advancerewardlist(int index) const;
  ::PlaneWar::GradeRewardDetail* _internal_add_advancerewardlist();
  public:
  const ::PlaneWar::GradeRewardDetail& advancerewardlist(int index) const;
  ::PlaneWar::GradeRewardDetail* add_advancerewardlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GradeRewardDetail >&
      advancerewardlist() const;

  // string rankName = 1;
  void clear_rankname();
  const std::string& rankname() const;
  void set_rankname(const std::string& value);
  void set_rankname(std::string&& value);
  void set_rankname(const char* value);
  void set_rankname(const char* value, size_t size);
  std::string* mutable_rankname();
  std::string* release_rankname();
  void set_allocated_rankname(std::string* rankname);
  private:
  const std::string& _internal_rankname() const;
  void _internal_set_rankname(const std::string& value);
  std::string* _internal_mutable_rankname();
  public:

  // bool first = 4;
  void clear_first();
  bool first() const;
  void set_first(bool value);
  private:
  bool _internal_first() const;
  void _internal_set_first(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.GradeRewardInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GradeRewardDetail > commrewardlist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GradeRewardDetail > advancerewardlist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rankname_;
  bool first_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class GradeRankInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.GradeRankInfo) */ {
 public:
  inline GradeRankInfo() : GradeRankInfo(nullptr) {}
  virtual ~GradeRankInfo();

  GradeRankInfo(const GradeRankInfo& from);
  GradeRankInfo(GradeRankInfo&& from) noexcept
    : GradeRankInfo() {
    *this = ::std::move(from);
  }

  inline GradeRankInfo& operator=(const GradeRankInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GradeRankInfo& operator=(GradeRankInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GradeRankInfo& default_instance();

  static inline const GradeRankInfo* internal_default_instance() {
    return reinterpret_cast<const GradeRankInfo*>(
               &_GradeRankInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    253;

  friend void swap(GradeRankInfo& a, GradeRankInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GradeRankInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GradeRankInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GradeRankInfo* New() const final {
    return CreateMaybeMessage<GradeRankInfo>(nullptr);
  }

  GradeRankInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GradeRankInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GradeRankInfo& from);
  void MergeFrom(const GradeRankInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GradeRankInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.GradeRankInfo";
  }
  protected:
  explicit GradeRankInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRankNameFieldNumber = 3,
    kHistoryRankNameFieldNumber = 5,
    kPlayerNameFieldNumber = 10,
    kCurrentRankFieldNumber = 1,
    kStarFieldNumber = 2,
    kHistoryRankFieldNumber = 4,
    kKingTagFieldNumber = 6,
    kCurrentExpFieldNumber = 7,
    kNextExpFieldNumber = 8,
    kExtraExpFieldNumber = 9,
    kAvailableGiftFieldNumber = 11,
    kIsLastFieldNumber = 12,
    kIsSelfFieldNumber = 13,
  };
  // string rankName = 3;
  void clear_rankname();
  const std::string& rankname() const;
  void set_rankname(const std::string& value);
  void set_rankname(std::string&& value);
  void set_rankname(const char* value);
  void set_rankname(const char* value, size_t size);
  std::string* mutable_rankname();
  std::string* release_rankname();
  void set_allocated_rankname(std::string* rankname);
  private:
  const std::string& _internal_rankname() const;
  void _internal_set_rankname(const std::string& value);
  std::string* _internal_mutable_rankname();
  public:

  // string historyRankName = 5;
  void clear_historyrankname();
  const std::string& historyrankname() const;
  void set_historyrankname(const std::string& value);
  void set_historyrankname(std::string&& value);
  void set_historyrankname(const char* value);
  void set_historyrankname(const char* value, size_t size);
  std::string* mutable_historyrankname();
  std::string* release_historyrankname();
  void set_allocated_historyrankname(std::string* historyrankname);
  private:
  const std::string& _internal_historyrankname() const;
  void _internal_set_historyrankname(const std::string& value);
  std::string* _internal_mutable_historyrankname();
  public:

  // string playerName = 10;
  void clear_playername();
  const std::string& playername() const;
  void set_playername(const std::string& value);
  void set_playername(std::string&& value);
  void set_playername(const char* value);
  void set_playername(const char* value, size_t size);
  std::string* mutable_playername();
  std::string* release_playername();
  void set_allocated_playername(std::string* playername);
  private:
  const std::string& _internal_playername() const;
  void _internal_set_playername(const std::string& value);
  std::string* _internal_mutable_playername();
  public:

  // int32 currentRank = 1;
  void clear_currentrank();
  ::PROTOBUF_NAMESPACE_ID::int32 currentrank() const;
  void set_currentrank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_currentrank() const;
  void _internal_set_currentrank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 star = 2;
  void clear_star();
  ::PROTOBUF_NAMESPACE_ID::int32 star() const;
  void set_star(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_star() const;
  void _internal_set_star(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 historyRank = 4;
  void clear_historyrank();
  ::PROTOBUF_NAMESPACE_ID::int32 historyrank() const;
  void set_historyrank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_historyrank() const;
  void _internal_set_historyrank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 kingTag = 6;
  void clear_kingtag();
  ::PROTOBUF_NAMESPACE_ID::int32 kingtag() const;
  void set_kingtag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_kingtag() const;
  void _internal_set_kingtag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float currentExp = 7;
  void clear_currentexp();
  float currentexp() const;
  void set_currentexp(float value);
  private:
  float _internal_currentexp() const;
  void _internal_set_currentexp(float value);
  public:

  // float nextExp = 8;
  void clear_nextexp();
  float nextexp() const;
  void set_nextexp(float value);
  private:
  float _internal_nextexp() const;
  void _internal_set_nextexp(float value);
  public:

  // float extraExp = 9;
  void clear_extraexp();
  float extraexp() const;
  void set_extraexp(float value);
  private:
  float _internal_extraexp() const;
  void _internal_set_extraexp(float value);
  public:

  // int32 availableGift = 11;
  void clear_availablegift();
  ::PROTOBUF_NAMESPACE_ID::int32 availablegift() const;
  void set_availablegift(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_availablegift() const;
  void _internal_set_availablegift(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isLast = 12;
  void clear_islast();
  bool islast() const;
  void set_islast(bool value);
  private:
  bool _internal_islast() const;
  void _internal_set_islast(bool value);
  public:

  // bool isSelf = 13;
  void clear_isself();
  bool isself() const;
  void set_isself(bool value);
  private:
  bool _internal_isself() const;
  void _internal_set_isself(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.GradeRankInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rankname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr historyrankname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playername_;
  ::PROTOBUF_NAMESPACE_ID::int32 currentrank_;
  ::PROTOBUF_NAMESPACE_ID::int32 star_;
  ::PROTOBUF_NAMESPACE_ID::int32 historyrank_;
  ::PROTOBUF_NAMESPACE_ID::int32 kingtag_;
  float currentexp_;
  float nextexp_;
  float extraexp_;
  ::PROTOBUF_NAMESPACE_ID::int32 availablegift_;
  bool islast_;
  bool isself_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSGetTableUserInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSGetTableUserInfo) */ {
 public:
  inline CSGetTableUserInfo() : CSGetTableUserInfo(nullptr) {}
  virtual ~CSGetTableUserInfo();

  CSGetTableUserInfo(const CSGetTableUserInfo& from);
  CSGetTableUserInfo(CSGetTableUserInfo&& from) noexcept
    : CSGetTableUserInfo() {
    *this = ::std::move(from);
  }

  inline CSGetTableUserInfo& operator=(const CSGetTableUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGetTableUserInfo& operator=(CSGetTableUserInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSGetTableUserInfo& default_instance();

  static inline const CSGetTableUserInfo* internal_default_instance() {
    return reinterpret_cast<const CSGetTableUserInfo*>(
               &_CSGetTableUserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    254;

  friend void swap(CSGetTableUserInfo& a, CSGetTableUserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSGetTableUserInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGetTableUserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSGetTableUserInfo* New() const final {
    return CreateMaybeMessage<CSGetTableUserInfo>(nullptr);
  }

  CSGetTableUserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSGetTableUserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSGetTableUserInfo& from);
  void MergeFrom(const CSGetTableUserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSGetTableUserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSGetTableUserInfo";
  }
  protected:
  explicit CSGetTableUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdFieldNumber = 1,
  };
  // int32 chairId = 1;
  void clear_chairid();
  ::PROTOBUF_NAMESPACE_ID::int32 chairid() const;
  void set_chairid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chairid() const;
  void _internal_set_chairid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSGetTableUserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chairid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCGetTableUserInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCGetTableUserInfo) */ {
 public:
  inline SCGetTableUserInfo() : SCGetTableUserInfo(nullptr) {}
  virtual ~SCGetTableUserInfo();

  SCGetTableUserInfo(const SCGetTableUserInfo& from);
  SCGetTableUserInfo(SCGetTableUserInfo&& from) noexcept
    : SCGetTableUserInfo() {
    *this = ::std::move(from);
  }

  inline SCGetTableUserInfo& operator=(const SCGetTableUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGetTableUserInfo& operator=(SCGetTableUserInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGetTableUserInfo& default_instance();

  static inline const SCGetTableUserInfo* internal_default_instance() {
    return reinterpret_cast<const SCGetTableUserInfo*>(
               &_SCGetTableUserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    255;

  friend void swap(SCGetTableUserInfo& a, SCGetTableUserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGetTableUserInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGetTableUserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGetTableUserInfo* New() const final {
    return CreateMaybeMessage<SCGetTableUserInfo>(nullptr);
  }

  SCGetTableUserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGetTableUserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGetTableUserInfo& from);
  void MergeFrom(const SCGetTableUserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGetTableUserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCGetTableUserInfo";
  }
  protected:
  explicit SCGetTableUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInfoFieldNumber = 1,
    kGradeRankInfoFieldNumber = 2,
  };
  // .PlaneWar.PlayerInfo playerInfo = 1;
  bool has_playerinfo() const;
  private:
  bool _internal_has_playerinfo() const;
  public:
  void clear_playerinfo();
  const ::PlaneWar::PlayerInfo& playerinfo() const;
  ::PlaneWar::PlayerInfo* release_playerinfo();
  ::PlaneWar::PlayerInfo* mutable_playerinfo();
  void set_allocated_playerinfo(::PlaneWar::PlayerInfo* playerinfo);
  private:
  const ::PlaneWar::PlayerInfo& _internal_playerinfo() const;
  ::PlaneWar::PlayerInfo* _internal_mutable_playerinfo();
  public:
  void unsafe_arena_set_allocated_playerinfo(
      ::PlaneWar::PlayerInfo* playerinfo);
  ::PlaneWar::PlayerInfo* unsafe_arena_release_playerinfo();

  // .PlaneWar.GradeRankInfo gradeRankInfo = 2;
  bool has_graderankinfo() const;
  private:
  bool _internal_has_graderankinfo() const;
  public:
  void clear_graderankinfo();
  const ::PlaneWar::GradeRankInfo& graderankinfo() const;
  ::PlaneWar::GradeRankInfo* release_graderankinfo();
  ::PlaneWar::GradeRankInfo* mutable_graderankinfo();
  void set_allocated_graderankinfo(::PlaneWar::GradeRankInfo* graderankinfo);
  private:
  const ::PlaneWar::GradeRankInfo& _internal_graderankinfo() const;
  ::PlaneWar::GradeRankInfo* _internal_mutable_graderankinfo();
  public:
  void unsafe_arena_set_allocated_graderankinfo(
      ::PlaneWar::GradeRankInfo* graderankinfo);
  ::PlaneWar::GradeRankInfo* unsafe_arena_release_graderankinfo();

  // @@protoc_insertion_point(class_scope:PlaneWar.SCGetTableUserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::PlayerInfo* playerinfo_;
  ::PlaneWar::GradeRankInfo* graderankinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSGetGradeRewardInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSGetGradeRewardInfo) */ {
 public:
  inline CSGetGradeRewardInfo() : CSGetGradeRewardInfo(nullptr) {}
  virtual ~CSGetGradeRewardInfo();

  CSGetGradeRewardInfo(const CSGetGradeRewardInfo& from);
  CSGetGradeRewardInfo(CSGetGradeRewardInfo&& from) noexcept
    : CSGetGradeRewardInfo() {
    *this = ::std::move(from);
  }

  inline CSGetGradeRewardInfo& operator=(const CSGetGradeRewardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGetGradeRewardInfo& operator=(CSGetGradeRewardInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSGetGradeRewardInfo& default_instance();

  static inline const CSGetGradeRewardInfo* internal_default_instance() {
    return reinterpret_cast<const CSGetGradeRewardInfo*>(
               &_CSGetGradeRewardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    256;

  friend void swap(CSGetGradeRewardInfo& a, CSGetGradeRewardInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSGetGradeRewardInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGetGradeRewardInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSGetGradeRewardInfo* New() const final {
    return CreateMaybeMessage<CSGetGradeRewardInfo>(nullptr);
  }

  CSGetGradeRewardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSGetGradeRewardInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSGetGradeRewardInfo& from);
  void MergeFrom(const CSGetGradeRewardInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSGetGradeRewardInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSGetGradeRewardInfo";
  }
  protected:
  explicit CSGetGradeRewardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartIdxFieldNumber = 1,
    kEndIdxFieldNumber = 2,
  };
  // int32 startIdx = 1;
  void clear_startidx();
  ::PROTOBUF_NAMESPACE_ID::int32 startidx() const;
  void set_startidx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_startidx() const;
  void _internal_set_startidx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 endIdx = 2;
  void clear_endidx();
  ::PROTOBUF_NAMESPACE_ID::int32 endidx() const;
  void set_endidx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_endidx() const;
  void _internal_set_endidx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSGetGradeRewardInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 startidx_;
  ::PROTOBUF_NAMESPACE_ID::int32 endidx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCGetGradeRewardInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCGetGradeRewardInfo) */ {
 public:
  inline SCGetGradeRewardInfo() : SCGetGradeRewardInfo(nullptr) {}
  virtual ~SCGetGradeRewardInfo();

  SCGetGradeRewardInfo(const SCGetGradeRewardInfo& from);
  SCGetGradeRewardInfo(SCGetGradeRewardInfo&& from) noexcept
    : SCGetGradeRewardInfo() {
    *this = ::std::move(from);
  }

  inline SCGetGradeRewardInfo& operator=(const SCGetGradeRewardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGetGradeRewardInfo& operator=(SCGetGradeRewardInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGetGradeRewardInfo& default_instance();

  static inline const SCGetGradeRewardInfo* internal_default_instance() {
    return reinterpret_cast<const SCGetGradeRewardInfo*>(
               &_SCGetGradeRewardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    257;

  friend void swap(SCGetGradeRewardInfo& a, SCGetGradeRewardInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGetGradeRewardInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGetGradeRewardInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGetGradeRewardInfo* New() const final {
    return CreateMaybeMessage<SCGetGradeRewardInfo>(nullptr);
  }

  SCGetGradeRewardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGetGradeRewardInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGetGradeRewardInfo& from);
  void MergeFrom(const SCGetGradeRewardInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGetGradeRewardInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCGetGradeRewardInfo";
  }
  protected:
  explicit SCGetGradeRewardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGradeRewardInfoListFieldNumber = 1,
  };
  // repeated .PlaneWar.GradeRewardInfo gradeRewardInfoList = 1;
  int graderewardinfolist_size() const;
  private:
  int _internal_graderewardinfolist_size() const;
  public:
  void clear_graderewardinfolist();
  ::PlaneWar::GradeRewardInfo* mutable_graderewardinfolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GradeRewardInfo >*
      mutable_graderewardinfolist();
  private:
  const ::PlaneWar::GradeRewardInfo& _internal_graderewardinfolist(int index) const;
  ::PlaneWar::GradeRewardInfo* _internal_add_graderewardinfolist();
  public:
  const ::PlaneWar::GradeRewardInfo& graderewardinfolist(int index) const;
  ::PlaneWar::GradeRewardInfo* add_graderewardinfolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GradeRewardInfo >&
      graderewardinfolist() const;

  // @@protoc_insertion_point(class_scope:PlaneWar.SCGetGradeRewardInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GradeRewardInfo > graderewardinfolist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSGetGradeRankInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSGetGradeRankInfo) */ {
 public:
  inline CSGetGradeRankInfo() : CSGetGradeRankInfo(nullptr) {}
  virtual ~CSGetGradeRankInfo();

  CSGetGradeRankInfo(const CSGetGradeRankInfo& from);
  CSGetGradeRankInfo(CSGetGradeRankInfo&& from) noexcept
    : CSGetGradeRankInfo() {
    *this = ::std::move(from);
  }

  inline CSGetGradeRankInfo& operator=(const CSGetGradeRankInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGetGradeRankInfo& operator=(CSGetGradeRankInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSGetGradeRankInfo& default_instance();

  static inline const CSGetGradeRankInfo* internal_default_instance() {
    return reinterpret_cast<const CSGetGradeRankInfo*>(
               &_CSGetGradeRankInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    258;

  friend void swap(CSGetGradeRankInfo& a, CSGetGradeRankInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSGetGradeRankInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGetGradeRankInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSGetGradeRankInfo* New() const final {
    return CreateMaybeMessage<CSGetGradeRankInfo>(nullptr);
  }

  CSGetGradeRankInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSGetGradeRankInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSGetGradeRankInfo& from);
  void MergeFrom(const CSGetGradeRankInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSGetGradeRankInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSGetGradeRankInfo";
  }
  protected:
  explicit CSGetGradeRankInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.CSGetGradeRankInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCGetGradeRankInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCGetGradeRankInfo) */ {
 public:
  inline SCGetGradeRankInfo() : SCGetGradeRankInfo(nullptr) {}
  virtual ~SCGetGradeRankInfo();

  SCGetGradeRankInfo(const SCGetGradeRankInfo& from);
  SCGetGradeRankInfo(SCGetGradeRankInfo&& from) noexcept
    : SCGetGradeRankInfo() {
    *this = ::std::move(from);
  }

  inline SCGetGradeRankInfo& operator=(const SCGetGradeRankInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGetGradeRankInfo& operator=(SCGetGradeRankInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGetGradeRankInfo& default_instance();

  static inline const SCGetGradeRankInfo* internal_default_instance() {
    return reinterpret_cast<const SCGetGradeRankInfo*>(
               &_SCGetGradeRankInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    259;

  friend void swap(SCGetGradeRankInfo& a, SCGetGradeRankInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGetGradeRankInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGetGradeRankInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGetGradeRankInfo* New() const final {
    return CreateMaybeMessage<SCGetGradeRankInfo>(nullptr);
  }

  SCGetGradeRankInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGetGradeRankInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGetGradeRankInfo& from);
  void MergeFrom(const SCGetGradeRankInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGetGradeRankInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCGetGradeRankInfo";
  }
  protected:
  explicit SCGetGradeRankInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGradeRankInfoFieldNumber = 1,
  };
  // .PlaneWar.GradeRankInfo gradeRankInfo = 1;
  bool has_graderankinfo() const;
  private:
  bool _internal_has_graderankinfo() const;
  public:
  void clear_graderankinfo();
  const ::PlaneWar::GradeRankInfo& graderankinfo() const;
  ::PlaneWar::GradeRankInfo* release_graderankinfo();
  ::PlaneWar::GradeRankInfo* mutable_graderankinfo();
  void set_allocated_graderankinfo(::PlaneWar::GradeRankInfo* graderankinfo);
  private:
  const ::PlaneWar::GradeRankInfo& _internal_graderankinfo() const;
  ::PlaneWar::GradeRankInfo* _internal_mutable_graderankinfo();
  public:
  void unsafe_arena_set_allocated_graderankinfo(
      ::PlaneWar::GradeRankInfo* graderankinfo);
  ::PlaneWar::GradeRankInfo* unsafe_arena_release_graderankinfo();

  // @@protoc_insertion_point(class_scope:PlaneWar.SCGetGradeRankInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::GradeRankInfo* graderankinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCRankUpgrade PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCRankUpgrade) */ {
 public:
  inline SCRankUpgrade() : SCRankUpgrade(nullptr) {}
  virtual ~SCRankUpgrade();

  SCRankUpgrade(const SCRankUpgrade& from);
  SCRankUpgrade(SCRankUpgrade&& from) noexcept
    : SCRankUpgrade() {
    *this = ::std::move(from);
  }

  inline SCRankUpgrade& operator=(const SCRankUpgrade& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCRankUpgrade& operator=(SCRankUpgrade&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCRankUpgrade& default_instance();

  static inline const SCRankUpgrade* internal_default_instance() {
    return reinterpret_cast<const SCRankUpgrade*>(
               &_SCRankUpgrade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    260;

  friend void swap(SCRankUpgrade& a, SCRankUpgrade& b) {
    a.Swap(&b);
  }
  inline void Swap(SCRankUpgrade* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCRankUpgrade* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCRankUpgrade* New() const final {
    return CreateMaybeMessage<SCRankUpgrade>(nullptr);
  }

  SCRankUpgrade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCRankUpgrade>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCRankUpgrade& from);
  void MergeFrom(const SCRankUpgrade& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCRankUpgrade* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCRankUpgrade";
  }
  protected:
  explicit SCRankUpgrade(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGradeRankInfoFieldNumber = 1,
    kAdvanceFieldNumber = 2,
    kChairFieldNumber = 3,
  };
  // .PlaneWar.GradeRankInfo gradeRankInfo = 1;
  bool has_graderankinfo() const;
  private:
  bool _internal_has_graderankinfo() const;
  public:
  void clear_graderankinfo();
  const ::PlaneWar::GradeRankInfo& graderankinfo() const;
  ::PlaneWar::GradeRankInfo* release_graderankinfo();
  ::PlaneWar::GradeRankInfo* mutable_graderankinfo();
  void set_allocated_graderankinfo(::PlaneWar::GradeRankInfo* graderankinfo);
  private:
  const ::PlaneWar::GradeRankInfo& _internal_graderankinfo() const;
  ::PlaneWar::GradeRankInfo* _internal_mutable_graderankinfo();
  public:
  void unsafe_arena_set_allocated_graderankinfo(
      ::PlaneWar::GradeRankInfo* graderankinfo);
  ::PlaneWar::GradeRankInfo* unsafe_arena_release_graderankinfo();

  // bool advance = 2;
  void clear_advance();
  bool advance() const;
  void set_advance(bool value);
  private:
  bool _internal_advance() const;
  void _internal_set_advance(bool value);
  public:

  // int32 chair = 3;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCRankUpgrade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::GradeRankInfo* graderankinfo_;
  bool advance_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSRankSeasonStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSRankSeasonStatus) */ {
 public:
  inline CSRankSeasonStatus() : CSRankSeasonStatus(nullptr) {}
  virtual ~CSRankSeasonStatus();

  CSRankSeasonStatus(const CSRankSeasonStatus& from);
  CSRankSeasonStatus(CSRankSeasonStatus&& from) noexcept
    : CSRankSeasonStatus() {
    *this = ::std::move(from);
  }

  inline CSRankSeasonStatus& operator=(const CSRankSeasonStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRankSeasonStatus& operator=(CSRankSeasonStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSRankSeasonStatus& default_instance();

  static inline const CSRankSeasonStatus* internal_default_instance() {
    return reinterpret_cast<const CSRankSeasonStatus*>(
               &_CSRankSeasonStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    261;

  friend void swap(CSRankSeasonStatus& a, CSRankSeasonStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRankSeasonStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRankSeasonStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSRankSeasonStatus* New() const final {
    return CreateMaybeMessage<CSRankSeasonStatus>(nullptr);
  }

  CSRankSeasonStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSRankSeasonStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSRankSeasonStatus& from);
  void MergeFrom(const CSRankSeasonStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRankSeasonStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSRankSeasonStatus";
  }
  protected:
  explicit CSRankSeasonStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.CSRankSeasonStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCRankSeasonStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCRankSeasonStatus) */ {
 public:
  inline SCRankSeasonStatus() : SCRankSeasonStatus(nullptr) {}
  virtual ~SCRankSeasonStatus();

  SCRankSeasonStatus(const SCRankSeasonStatus& from);
  SCRankSeasonStatus(SCRankSeasonStatus&& from) noexcept
    : SCRankSeasonStatus() {
    *this = ::std::move(from);
  }

  inline SCRankSeasonStatus& operator=(const SCRankSeasonStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCRankSeasonStatus& operator=(SCRankSeasonStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCRankSeasonStatus& default_instance();

  static inline const SCRankSeasonStatus* internal_default_instance() {
    return reinterpret_cast<const SCRankSeasonStatus*>(
               &_SCRankSeasonStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    262;

  friend void swap(SCRankSeasonStatus& a, SCRankSeasonStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SCRankSeasonStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCRankSeasonStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCRankSeasonStatus* New() const final {
    return CreateMaybeMessage<SCRankSeasonStatus>(nullptr);
  }

  SCRankSeasonStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCRankSeasonStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCRankSeasonStatus& from);
  void MergeFrom(const SCRankSeasonStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCRankSeasonStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCRankSeasonStatus";
  }
  protected:
  explicit SCRankSeasonStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeasonNameFieldNumber = 4,
    kEnableFieldNumber = 1,
    kStartTimeFieldNumber = 2,
    kEndTimeFieldNumber = 3,
    kSeasonFieldNumber = 5,
  };
  // string seasonName = 4;
  void clear_seasonname();
  const std::string& seasonname() const;
  void set_seasonname(const std::string& value);
  void set_seasonname(std::string&& value);
  void set_seasonname(const char* value);
  void set_seasonname(const char* value, size_t size);
  std::string* mutable_seasonname();
  std::string* release_seasonname();
  void set_allocated_seasonname(std::string* seasonname);
  private:
  const std::string& _internal_seasonname() const;
  void _internal_set_seasonname(const std::string& value);
  std::string* _internal_mutable_seasonname();
  public:

  // bool enable = 1;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // int32 startTime = 2;
  void clear_starttime();
  ::PROTOBUF_NAMESPACE_ID::int32 starttime() const;
  void set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_starttime() const;
  void _internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 endTime = 3;
  void clear_endtime();
  ::PROTOBUF_NAMESPACE_ID::int32 endtime() const;
  void set_endtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_endtime() const;
  void _internal_set_endtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 season = 5;
  void clear_season();
  ::PROTOBUF_NAMESPACE_ID::int32 season() const;
  void set_season(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_season() const;
  void _internal_set_season(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCRankSeasonStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seasonname_;
  bool enable_;
  ::PROTOBUF_NAMESPACE_ID::int32 starttime_;
  ::PROTOBUF_NAMESPACE_ID::int32 endtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 season_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCSyncTime PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCSyncTime) */ {
 public:
  inline SCSyncTime() : SCSyncTime(nullptr) {}
  virtual ~SCSyncTime();

  SCSyncTime(const SCSyncTime& from);
  SCSyncTime(SCSyncTime&& from) noexcept
    : SCSyncTime() {
    *this = ::std::move(from);
  }

  inline SCSyncTime& operator=(const SCSyncTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSyncTime& operator=(SCSyncTime&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSyncTime& default_instance();

  static inline const SCSyncTime* internal_default_instance() {
    return reinterpret_cast<const SCSyncTime*>(
               &_SCSyncTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    263;

  friend void swap(SCSyncTime& a, SCSyncTime& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSyncTime* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSyncTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSyncTime* New() const final {
    return CreateMaybeMessage<SCSyncTime>(nullptr);
  }

  SCSyncTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSyncTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSyncTime& from);
  void MergeFrom(const SCSyncTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSyncTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCSyncTime";
  }
  protected:
  explicit SCSyncTime(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // int32 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCSyncTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCNoticePropsOverdue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCNoticePropsOverdue) */ {
 public:
  inline SCNoticePropsOverdue() : SCNoticePropsOverdue(nullptr) {}
  virtual ~SCNoticePropsOverdue();

  SCNoticePropsOverdue(const SCNoticePropsOverdue& from);
  SCNoticePropsOverdue(SCNoticePropsOverdue&& from) noexcept
    : SCNoticePropsOverdue() {
    *this = ::std::move(from);
  }

  inline SCNoticePropsOverdue& operator=(const SCNoticePropsOverdue& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCNoticePropsOverdue& operator=(SCNoticePropsOverdue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCNoticePropsOverdue& default_instance();

  static inline const SCNoticePropsOverdue* internal_default_instance() {
    return reinterpret_cast<const SCNoticePropsOverdue*>(
               &_SCNoticePropsOverdue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    264;

  friend void swap(SCNoticePropsOverdue& a, SCNoticePropsOverdue& b) {
    a.Swap(&b);
  }
  inline void Swap(SCNoticePropsOverdue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCNoticePropsOverdue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCNoticePropsOverdue* New() const final {
    return CreateMaybeMessage<SCNoticePropsOverdue>(nullptr);
  }

  SCNoticePropsOverdue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCNoticePropsOverdue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCNoticePropsOverdue& from);
  void MergeFrom(const SCNoticePropsOverdue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCNoticePropsOverdue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCNoticePropsOverdue";
  }
  protected:
  explicit SCNoticePropsOverdue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropIdFieldNumber = 1,
  };
  // int32 propId = 1;
  void clear_propid();
  ::PROTOBUF_NAMESPACE_ID::int32 propid() const;
  void set_propid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_propid() const;
  void _internal_set_propid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCNoticePropsOverdue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 propid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class PurchaseResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.PurchaseResult) */ {
 public:
  inline PurchaseResult() : PurchaseResult(nullptr) {}
  virtual ~PurchaseResult();

  PurchaseResult(const PurchaseResult& from);
  PurchaseResult(PurchaseResult&& from) noexcept
    : PurchaseResult() {
    *this = ::std::move(from);
  }

  inline PurchaseResult& operator=(const PurchaseResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PurchaseResult& operator=(PurchaseResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PurchaseResult& default_instance();

  static inline const PurchaseResult* internal_default_instance() {
    return reinterpret_cast<const PurchaseResult*>(
               &_PurchaseResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    265;

  friend void swap(PurchaseResult& a, PurchaseResult& b) {
    a.Swap(&b);
  }
  inline void Swap(PurchaseResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PurchaseResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PurchaseResult* New() const final {
    return CreateMaybeMessage<PurchaseResult>(nullptr);
  }

  PurchaseResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PurchaseResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PurchaseResult& from);
  void MergeFrom(const PurchaseResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PurchaseResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.PurchaseResult";
  }
  protected:
  explicit PurchaseResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWareIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string wareId = 1;
  void clear_wareid();
  const std::string& wareid() const;
  void set_wareid(const std::string& value);
  void set_wareid(std::string&& value);
  void set_wareid(const char* value);
  void set_wareid(const char* value, size_t size);
  std::string* mutable_wareid();
  std::string* release_wareid();
  void set_allocated_wareid(std::string* wareid);
  private:
  const std::string& _internal_wareid() const;
  void _internal_set_wareid(const std::string& value);
  std::string* _internal_mutable_wareid();
  public:

  // bool status = 2;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.PurchaseResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wareid_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSQueryPackagePurchase PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSQueryPackagePurchase) */ {
 public:
  inline CSQueryPackagePurchase() : CSQueryPackagePurchase(nullptr) {}
  virtual ~CSQueryPackagePurchase();

  CSQueryPackagePurchase(const CSQueryPackagePurchase& from);
  CSQueryPackagePurchase(CSQueryPackagePurchase&& from) noexcept
    : CSQueryPackagePurchase() {
    *this = ::std::move(from);
  }

  inline CSQueryPackagePurchase& operator=(const CSQueryPackagePurchase& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSQueryPackagePurchase& operator=(CSQueryPackagePurchase&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSQueryPackagePurchase& default_instance();

  static inline const CSQueryPackagePurchase* internal_default_instance() {
    return reinterpret_cast<const CSQueryPackagePurchase*>(
               &_CSQueryPackagePurchase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    266;

  friend void swap(CSQueryPackagePurchase& a, CSQueryPackagePurchase& b) {
    a.Swap(&b);
  }
  inline void Swap(CSQueryPackagePurchase* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSQueryPackagePurchase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSQueryPackagePurchase* New() const final {
    return CreateMaybeMessage<CSQueryPackagePurchase>(nullptr);
  }

  CSQueryPackagePurchase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSQueryPackagePurchase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSQueryPackagePurchase& from);
  void MergeFrom(const CSQueryPackagePurchase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSQueryPackagePurchase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSQueryPackagePurchase";
  }
  protected:
  explicit CSQueryPackagePurchase(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWareIdListFieldNumber = 1,
  };
  // repeated int32 wareIdList = 1;
  int wareidlist_size() const;
  private:
  int _internal_wareidlist_size() const;
  public:
  void clear_wareidlist();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wareidlist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_wareidlist() const;
  void _internal_add_wareidlist(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_wareidlist();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 wareidlist(int index) const;
  void set_wareidlist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_wareidlist(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      wareidlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_wareidlist();

  // @@protoc_insertion_point(class_scope:PlaneWar.CSQueryPackagePurchase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > wareidlist_;
  mutable std::atomic<int> _wareidlist_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCQueryPackagePurchase PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCQueryPackagePurchase) */ {
 public:
  inline SCQueryPackagePurchase() : SCQueryPackagePurchase(nullptr) {}
  virtual ~SCQueryPackagePurchase();

  SCQueryPackagePurchase(const SCQueryPackagePurchase& from);
  SCQueryPackagePurchase(SCQueryPackagePurchase&& from) noexcept
    : SCQueryPackagePurchase() {
    *this = ::std::move(from);
  }

  inline SCQueryPackagePurchase& operator=(const SCQueryPackagePurchase& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCQueryPackagePurchase& operator=(SCQueryPackagePurchase&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCQueryPackagePurchase& default_instance();

  static inline const SCQueryPackagePurchase* internal_default_instance() {
    return reinterpret_cast<const SCQueryPackagePurchase*>(
               &_SCQueryPackagePurchase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    267;

  friend void swap(SCQueryPackagePurchase& a, SCQueryPackagePurchase& b) {
    a.Swap(&b);
  }
  inline void Swap(SCQueryPackagePurchase* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCQueryPackagePurchase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCQueryPackagePurchase* New() const final {
    return CreateMaybeMessage<SCQueryPackagePurchase>(nullptr);
  }

  SCQueryPackagePurchase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCQueryPackagePurchase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCQueryPackagePurchase& from);
  void MergeFrom(const SCQueryPackagePurchase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCQueryPackagePurchase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCQueryPackagePurchase";
  }
  protected:
  explicit SCQueryPackagePurchase(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPurchaseResListFieldNumber = 1,
  };
  // repeated .PlaneWar.PurchaseResult purchaseResList = 1;
  int purchasereslist_size() const;
  private:
  int _internal_purchasereslist_size() const;
  public:
  void clear_purchasereslist();
  ::PlaneWar::PurchaseResult* mutable_purchasereslist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PurchaseResult >*
      mutable_purchasereslist();
  private:
  const ::PlaneWar::PurchaseResult& _internal_purchasereslist(int index) const;
  ::PlaneWar::PurchaseResult* _internal_add_purchasereslist();
  public:
  const ::PlaneWar::PurchaseResult& purchasereslist(int index) const;
  ::PlaneWar::PurchaseResult* add_purchasereslist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PurchaseResult >&
      purchasereslist() const;

  // @@protoc_insertion_point(class_scope:PlaneWar.SCQueryPackagePurchase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PurchaseResult > purchasereslist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class PropsInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.PropsInfo) */ {
 public:
  inline PropsInfo() : PropsInfo(nullptr) {}
  virtual ~PropsInfo();

  PropsInfo(const PropsInfo& from);
  PropsInfo(PropsInfo&& from) noexcept
    : PropsInfo() {
    *this = ::std::move(from);
  }

  inline PropsInfo& operator=(const PropsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropsInfo& operator=(PropsInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PropsInfo& default_instance();

  static inline const PropsInfo* internal_default_instance() {
    return reinterpret_cast<const PropsInfo*>(
               &_PropsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    268;

  friend void swap(PropsInfo& a, PropsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PropsInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PropsInfo* New() const final {
    return CreateMaybeMessage<PropsInfo>(nullptr);
  }

  PropsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PropsInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PropsInfo& from);
  void MergeFrom(const PropsInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropsInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.PropsInfo";
  }
  protected:
  explicit PropsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropIdFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // int32 propId = 1;
  void clear_propid();
  ::PROTOBUF_NAMESPACE_ID::int32 propid() const;
  void set_propid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_propid() const;
  void _internal_set_propid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.PropsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 propid_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCGamePurchasePush PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCGamePurchasePush) */ {
 public:
  inline SCGamePurchasePush() : SCGamePurchasePush(nullptr) {}
  virtual ~SCGamePurchasePush();

  SCGamePurchasePush(const SCGamePurchasePush& from);
  SCGamePurchasePush(SCGamePurchasePush&& from) noexcept
    : SCGamePurchasePush() {
    *this = ::std::move(from);
  }

  inline SCGamePurchasePush& operator=(const SCGamePurchasePush& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGamePurchasePush& operator=(SCGamePurchasePush&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGamePurchasePush& default_instance();

  static inline const SCGamePurchasePush* internal_default_instance() {
    return reinterpret_cast<const SCGamePurchasePush*>(
               &_SCGamePurchasePush_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    269;

  friend void swap(SCGamePurchasePush& a, SCGamePurchasePush& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGamePurchasePush* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGamePurchasePush* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGamePurchasePush* New() const final {
    return CreateMaybeMessage<SCGamePurchasePush>(nullptr);
  }

  SCGamePurchasePush* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGamePurchasePush>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGamePurchasePush& from);
  void MergeFrom(const SCGamePurchasePush& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGamePurchasePush* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCGamePurchasePush";
  }
  protected:
  explicit SCGamePurchasePush(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropsListFieldNumber = 1,
  };
  // repeated .PlaneWar.PropsInfo propsList = 1;
  int propslist_size() const;
  private:
  int _internal_propslist_size() const;
  public:
  void clear_propslist();
  ::PlaneWar::PropsInfo* mutable_propslist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PropsInfo >*
      mutable_propslist();
  private:
  const ::PlaneWar::PropsInfo& _internal_propslist(int index) const;
  ::PlaneWar::PropsInfo* _internal_add_propslist();
  public:
  const ::PlaneWar::PropsInfo& propslist(int index) const;
  ::PlaneWar::PropsInfo* add_propslist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PropsInfo >&
      propslist() const;

  // @@protoc_insertion_point(class_scope:PlaneWar.SCGamePurchasePush)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PropsInfo > propslist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class PackageMarquee PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.PackageMarquee) */ {
 public:
  inline PackageMarquee() : PackageMarquee(nullptr) {}
  virtual ~PackageMarquee();

  PackageMarquee(const PackageMarquee& from);
  PackageMarquee(PackageMarquee&& from) noexcept
    : PackageMarquee() {
    *this = ::std::move(from);
  }

  inline PackageMarquee& operator=(const PackageMarquee& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackageMarquee& operator=(PackageMarquee&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PackageMarquee& default_instance();

  static inline const PackageMarquee* internal_default_instance() {
    return reinterpret_cast<const PackageMarquee*>(
               &_PackageMarquee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    270;

  friend void swap(PackageMarquee& a, PackageMarquee& b) {
    a.Swap(&b);
  }
  inline void Swap(PackageMarquee* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PackageMarquee* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PackageMarquee* New() const final {
    return CreateMaybeMessage<PackageMarquee>(nullptr);
  }

  PackageMarquee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PackageMarquee>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PackageMarquee& from);
  void MergeFrom(const PackageMarquee& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PackageMarquee* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.PackageMarquee";
  }
  protected:
  explicit PackageMarquee(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 1,
    kWareIdFieldNumber = 2,
    kPropsFieldNumber = 3,
  };
  // string nickname = 1;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string wareId = 2;
  void clear_wareid();
  const std::string& wareid() const;
  void set_wareid(const std::string& value);
  void set_wareid(std::string&& value);
  void set_wareid(const char* value);
  void set_wareid(const char* value, size_t size);
  std::string* mutable_wareid();
  std::string* release_wareid();
  void set_allocated_wareid(std::string* wareid);
  private:
  const std::string& _internal_wareid() const;
  void _internal_set_wareid(const std::string& value);
  std::string* _internal_mutable_wareid();
  public:

  // .PlaneWar.PropsInfo props = 3;
  bool has_props() const;
  private:
  bool _internal_has_props() const;
  public:
  void clear_props();
  const ::PlaneWar::PropsInfo& props() const;
  ::PlaneWar::PropsInfo* release_props();
  ::PlaneWar::PropsInfo* mutable_props();
  void set_allocated_props(::PlaneWar::PropsInfo* props);
  private:
  const ::PlaneWar::PropsInfo& _internal_props() const;
  ::PlaneWar::PropsInfo* _internal_mutable_props();
  public:
  void unsafe_arena_set_allocated_props(
      ::PlaneWar::PropsInfo* props);
  ::PlaneWar::PropsInfo* unsafe_arena_release_props();

  // @@protoc_insertion_point(class_scope:PlaneWar.PackageMarquee)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wareid_;
  ::PlaneWar::PropsInfo* props_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSQueryPackageMarquee PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSQueryPackageMarquee) */ {
 public:
  inline CSQueryPackageMarquee() : CSQueryPackageMarquee(nullptr) {}
  virtual ~CSQueryPackageMarquee();

  CSQueryPackageMarquee(const CSQueryPackageMarquee& from);
  CSQueryPackageMarquee(CSQueryPackageMarquee&& from) noexcept
    : CSQueryPackageMarquee() {
    *this = ::std::move(from);
  }

  inline CSQueryPackageMarquee& operator=(const CSQueryPackageMarquee& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSQueryPackageMarquee& operator=(CSQueryPackageMarquee&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSQueryPackageMarquee& default_instance();

  static inline const CSQueryPackageMarquee* internal_default_instance() {
    return reinterpret_cast<const CSQueryPackageMarquee*>(
               &_CSQueryPackageMarquee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    271;

  friend void swap(CSQueryPackageMarquee& a, CSQueryPackageMarquee& b) {
    a.Swap(&b);
  }
  inline void Swap(CSQueryPackageMarquee* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSQueryPackageMarquee* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSQueryPackageMarquee* New() const final {
    return CreateMaybeMessage<CSQueryPackageMarquee>(nullptr);
  }

  CSQueryPackageMarquee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSQueryPackageMarquee>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSQueryPackageMarquee& from);
  void MergeFrom(const CSQueryPackageMarquee& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSQueryPackageMarquee* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSQueryPackageMarquee";
  }
  protected:
  explicit CSQueryPackageMarquee(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.CSQueryPackageMarquee)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCQueryPackageMarquee PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCQueryPackageMarquee) */ {
 public:
  inline SCQueryPackageMarquee() : SCQueryPackageMarquee(nullptr) {}
  virtual ~SCQueryPackageMarquee();

  SCQueryPackageMarquee(const SCQueryPackageMarquee& from);
  SCQueryPackageMarquee(SCQueryPackageMarquee&& from) noexcept
    : SCQueryPackageMarquee() {
    *this = ::std::move(from);
  }

  inline SCQueryPackageMarquee& operator=(const SCQueryPackageMarquee& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCQueryPackageMarquee& operator=(SCQueryPackageMarquee&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCQueryPackageMarquee& default_instance();

  static inline const SCQueryPackageMarquee* internal_default_instance() {
    return reinterpret_cast<const SCQueryPackageMarquee*>(
               &_SCQueryPackageMarquee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    272;

  friend void swap(SCQueryPackageMarquee& a, SCQueryPackageMarquee& b) {
    a.Swap(&b);
  }
  inline void Swap(SCQueryPackageMarquee* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCQueryPackageMarquee* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCQueryPackageMarquee* New() const final {
    return CreateMaybeMessage<SCQueryPackageMarquee>(nullptr);
  }

  SCQueryPackageMarquee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCQueryPackageMarquee>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCQueryPackageMarquee& from);
  void MergeFrom(const SCQueryPackageMarquee& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCQueryPackageMarquee* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCQueryPackageMarquee";
  }
  protected:
  explicit SCQueryPackageMarquee(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageMarqueeListFieldNumber = 2,
    kMarqueeModelFieldNumber = 1,
  };
  // repeated .PlaneWar.PackageMarquee packageMarqueeList = 2;
  int packagemarqueelist_size() const;
  private:
  int _internal_packagemarqueelist_size() const;
  public:
  void clear_packagemarqueelist();
  ::PlaneWar::PackageMarquee* mutable_packagemarqueelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PackageMarquee >*
      mutable_packagemarqueelist();
  private:
  const ::PlaneWar::PackageMarquee& _internal_packagemarqueelist(int index) const;
  ::PlaneWar::PackageMarquee* _internal_add_packagemarqueelist();
  public:
  const ::PlaneWar::PackageMarquee& packagemarqueelist(int index) const;
  ::PlaneWar::PackageMarquee* add_packagemarqueelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PackageMarquee >&
      packagemarqueelist() const;

  // string marqueeModel = 1;
  void clear_marqueemodel();
  const std::string& marqueemodel() const;
  void set_marqueemodel(const std::string& value);
  void set_marqueemodel(std::string&& value);
  void set_marqueemodel(const char* value);
  void set_marqueemodel(const char* value, size_t size);
  std::string* mutable_marqueemodel();
  std::string* release_marqueemodel();
  void set_allocated_marqueemodel(std::string* marqueemodel);
  private:
  const std::string& _internal_marqueemodel() const;
  void _internal_set_marqueemodel(const std::string& value);
  std::string* _internal_mutable_marqueemodel();
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCQueryPackageMarquee)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PackageMarquee > packagemarqueelist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marqueemodel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSSetWings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSSetWings) */ {
 public:
  inline CSSetWings() : CSSetWings(nullptr) {}
  virtual ~CSSetWings();

  CSSetWings(const CSSetWings& from);
  CSSetWings(CSSetWings&& from) noexcept
    : CSSetWings() {
    *this = ::std::move(from);
  }

  inline CSSetWings& operator=(const CSSetWings& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSetWings& operator=(CSSetWings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSetWings& default_instance();

  static inline const CSSetWings* internal_default_instance() {
    return reinterpret_cast<const CSSetWings*>(
               &_CSSetWings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    273;

  friend void swap(CSSetWings& a, CSSetWings& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSetWings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSetWings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSetWings* New() const final {
    return CreateMaybeMessage<CSSetWings>(nullptr);
  }

  CSSetWings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSetWings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSetWings& from);
  void MergeFrom(const CSSetWings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSetWings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSSetWings";
  }
  protected:
  explicit CSSetWings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWingIdFieldNumber = 1,
  };
  // int32 wingId = 1;
  void clear_wingid();
  ::PROTOBUF_NAMESPACE_ID::int32 wingid() const;
  void set_wingid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wingid() const;
  void _internal_set_wingid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSSetWings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 wingid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCSetWings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCSetWings) */ {
 public:
  inline SCSetWings() : SCSetWings(nullptr) {}
  virtual ~SCSetWings();

  SCSetWings(const SCSetWings& from);
  SCSetWings(SCSetWings&& from) noexcept
    : SCSetWings() {
    *this = ::std::move(from);
  }

  inline SCSetWings& operator=(const SCSetWings& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSetWings& operator=(SCSetWings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSetWings& default_instance();

  static inline const SCSetWings* internal_default_instance() {
    return reinterpret_cast<const SCSetWings*>(
               &_SCSetWings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    274;

  friend void swap(SCSetWings& a, SCSetWings& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSetWings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSetWings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSetWings* New() const final {
    return CreateMaybeMessage<SCSetWings>(nullptr);
  }

  SCSetWings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSetWings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSetWings& from);
  void MergeFrom(const SCSetWings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSetWings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCSetWings";
  }
  protected:
  explicit SCSetWings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairFieldNumber = 1,
    kWingIdFieldNumber = 2,
  };
  // int32 chair = 1;
  void clear_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 chair() const;
  void set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair() const;
  void _internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 wingId = 2;
  void clear_wingid();
  ::PROTOBUF_NAMESPACE_ID::int32 wingid() const;
  void set_wingid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wingid() const;
  void _internal_set_wingid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCSetWings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_;
  ::PROTOBUF_NAMESPACE_ID::int32 wingid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSVerifySeasonChange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSVerifySeasonChange) */ {
 public:
  inline CSVerifySeasonChange() : CSVerifySeasonChange(nullptr) {}
  virtual ~CSVerifySeasonChange();

  CSVerifySeasonChange(const CSVerifySeasonChange& from);
  CSVerifySeasonChange(CSVerifySeasonChange&& from) noexcept
    : CSVerifySeasonChange() {
    *this = ::std::move(from);
  }

  inline CSVerifySeasonChange& operator=(const CSVerifySeasonChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVerifySeasonChange& operator=(CSVerifySeasonChange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVerifySeasonChange& default_instance();

  static inline const CSVerifySeasonChange* internal_default_instance() {
    return reinterpret_cast<const CSVerifySeasonChange*>(
               &_CSVerifySeasonChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    275;

  friend void swap(CSVerifySeasonChange& a, CSVerifySeasonChange& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVerifySeasonChange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVerifySeasonChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVerifySeasonChange* New() const final {
    return CreateMaybeMessage<CSVerifySeasonChange>(nullptr);
  }

  CSVerifySeasonChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVerifySeasonChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVerifySeasonChange& from);
  void MergeFrom(const CSVerifySeasonChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVerifySeasonChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSVerifySeasonChange";
  }
  protected:
  explicit CSVerifySeasonChange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.CSVerifySeasonChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCVerifySeasonChange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCVerifySeasonChange) */ {
 public:
  inline SCVerifySeasonChange() : SCVerifySeasonChange(nullptr) {}
  virtual ~SCVerifySeasonChange();

  SCVerifySeasonChange(const SCVerifySeasonChange& from);
  SCVerifySeasonChange(SCVerifySeasonChange&& from) noexcept
    : SCVerifySeasonChange() {
    *this = ::std::move(from);
  }

  inline SCVerifySeasonChange& operator=(const SCVerifySeasonChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCVerifySeasonChange& operator=(SCVerifySeasonChange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCVerifySeasonChange& default_instance();

  static inline const SCVerifySeasonChange* internal_default_instance() {
    return reinterpret_cast<const SCVerifySeasonChange*>(
               &_SCVerifySeasonChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    276;

  friend void swap(SCVerifySeasonChange& a, SCVerifySeasonChange& b) {
    a.Swap(&b);
  }
  inline void Swap(SCVerifySeasonChange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCVerifySeasonChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCVerifySeasonChange* New() const final {
    return CreateMaybeMessage<SCVerifySeasonChange>(nullptr);
  }

  SCVerifySeasonChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCVerifySeasonChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCVerifySeasonChange& from);
  void MergeFrom(const SCVerifySeasonChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCVerifySeasonChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCVerifySeasonChange";
  }
  protected:
  explicit SCVerifySeasonChange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeforeGradeRankInfoFieldNumber = 2,
    kCurrentGradeRankInfoFieldNumber = 3,
    kChangeFieldNumber = 1,
    kBeforeSeasonFieldNumber = 4,
    kCurrentSeasonFieldNumber = 5,
  };
  // .PlaneWar.GradeRankInfo beforeGradeRankInfo = 2;
  bool has_beforegraderankinfo() const;
  private:
  bool _internal_has_beforegraderankinfo() const;
  public:
  void clear_beforegraderankinfo();
  const ::PlaneWar::GradeRankInfo& beforegraderankinfo() const;
  ::PlaneWar::GradeRankInfo* release_beforegraderankinfo();
  ::PlaneWar::GradeRankInfo* mutable_beforegraderankinfo();
  void set_allocated_beforegraderankinfo(::PlaneWar::GradeRankInfo* beforegraderankinfo);
  private:
  const ::PlaneWar::GradeRankInfo& _internal_beforegraderankinfo() const;
  ::PlaneWar::GradeRankInfo* _internal_mutable_beforegraderankinfo();
  public:
  void unsafe_arena_set_allocated_beforegraderankinfo(
      ::PlaneWar::GradeRankInfo* beforegraderankinfo);
  ::PlaneWar::GradeRankInfo* unsafe_arena_release_beforegraderankinfo();

  // .PlaneWar.GradeRankInfo currentGradeRankInfo = 3;
  bool has_currentgraderankinfo() const;
  private:
  bool _internal_has_currentgraderankinfo() const;
  public:
  void clear_currentgraderankinfo();
  const ::PlaneWar::GradeRankInfo& currentgraderankinfo() const;
  ::PlaneWar::GradeRankInfo* release_currentgraderankinfo();
  ::PlaneWar::GradeRankInfo* mutable_currentgraderankinfo();
  void set_allocated_currentgraderankinfo(::PlaneWar::GradeRankInfo* currentgraderankinfo);
  private:
  const ::PlaneWar::GradeRankInfo& _internal_currentgraderankinfo() const;
  ::PlaneWar::GradeRankInfo* _internal_mutable_currentgraderankinfo();
  public:
  void unsafe_arena_set_allocated_currentgraderankinfo(
      ::PlaneWar::GradeRankInfo* currentgraderankinfo);
  ::PlaneWar::GradeRankInfo* unsafe_arena_release_currentgraderankinfo();

  // bool change = 1;
  void clear_change();
  bool change() const;
  void set_change(bool value);
  private:
  bool _internal_change() const;
  void _internal_set_change(bool value);
  public:

  // int32 beforeSeason = 4;
  void clear_beforeseason();
  ::PROTOBUF_NAMESPACE_ID::int32 beforeseason() const;
  void set_beforeseason(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_beforeseason() const;
  void _internal_set_beforeseason(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 currentSeason = 5;
  void clear_currentseason();
  ::PROTOBUF_NAMESPACE_ID::int32 currentseason() const;
  void set_currentseason(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_currentseason() const;
  void _internal_set_currentseason(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCVerifySeasonChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::GradeRankInfo* beforegraderankinfo_;
  ::PlaneWar::GradeRankInfo* currentgraderankinfo_;
  bool change_;
  ::PROTOBUF_NAMESPACE_ID::int32 beforeseason_;
  ::PROTOBUF_NAMESPACE_ID::int32 currentseason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSExistUnReceiveRankReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSExistUnReceiveRankReward) */ {
 public:
  inline CSExistUnReceiveRankReward() : CSExistUnReceiveRankReward(nullptr) {}
  virtual ~CSExistUnReceiveRankReward();

  CSExistUnReceiveRankReward(const CSExistUnReceiveRankReward& from);
  CSExistUnReceiveRankReward(CSExistUnReceiveRankReward&& from) noexcept
    : CSExistUnReceiveRankReward() {
    *this = ::std::move(from);
  }

  inline CSExistUnReceiveRankReward& operator=(const CSExistUnReceiveRankReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSExistUnReceiveRankReward& operator=(CSExistUnReceiveRankReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSExistUnReceiveRankReward& default_instance();

  static inline const CSExistUnReceiveRankReward* internal_default_instance() {
    return reinterpret_cast<const CSExistUnReceiveRankReward*>(
               &_CSExistUnReceiveRankReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    277;

  friend void swap(CSExistUnReceiveRankReward& a, CSExistUnReceiveRankReward& b) {
    a.Swap(&b);
  }
  inline void Swap(CSExistUnReceiveRankReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSExistUnReceiveRankReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSExistUnReceiveRankReward* New() const final {
    return CreateMaybeMessage<CSExistUnReceiveRankReward>(nullptr);
  }

  CSExistUnReceiveRankReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSExistUnReceiveRankReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSExistUnReceiveRankReward& from);
  void MergeFrom(const CSExistUnReceiveRankReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSExistUnReceiveRankReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSExistUnReceiveRankReward";
  }
  protected:
  explicit CSExistUnReceiveRankReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlaneWar.CSExistUnReceiveRankReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCExistUnReceiveRankReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCExistUnReceiveRankReward) */ {
 public:
  inline SCExistUnReceiveRankReward() : SCExistUnReceiveRankReward(nullptr) {}
  virtual ~SCExistUnReceiveRankReward();

  SCExistUnReceiveRankReward(const SCExistUnReceiveRankReward& from);
  SCExistUnReceiveRankReward(SCExistUnReceiveRankReward&& from) noexcept
    : SCExistUnReceiveRankReward() {
    *this = ::std::move(from);
  }

  inline SCExistUnReceiveRankReward& operator=(const SCExistUnReceiveRankReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCExistUnReceiveRankReward& operator=(SCExistUnReceiveRankReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCExistUnReceiveRankReward& default_instance();

  static inline const SCExistUnReceiveRankReward* internal_default_instance() {
    return reinterpret_cast<const SCExistUnReceiveRankReward*>(
               &_SCExistUnReceiveRankReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    278;

  friend void swap(SCExistUnReceiveRankReward& a, SCExistUnReceiveRankReward& b) {
    a.Swap(&b);
  }
  inline void Swap(SCExistUnReceiveRankReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCExistUnReceiveRankReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCExistUnReceiveRankReward* New() const final {
    return CreateMaybeMessage<SCExistUnReceiveRankReward>(nullptr);
  }

  SCExistUnReceiveRankReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCExistUnReceiveRankReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCExistUnReceiveRankReward& from);
  void MergeFrom(const SCExistUnReceiveRankReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCExistUnReceiveRankReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCExistUnReceiveRankReward";
  }
  protected:
  explicit SCExistUnReceiveRankReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExistFieldNumber = 1,
  };
  // bool exist = 1;
  void clear_exist();
  bool exist() const;
  void set_exist(bool value);
  private:
  bool _internal_exist() const;
  void _internal_set_exist(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCExistUnReceiveRankReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool exist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSReceiveExtraGradeReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSReceiveExtraGradeReward) */ {
 public:
  inline CSReceiveExtraGradeReward() : CSReceiveExtraGradeReward(nullptr) {}
  virtual ~CSReceiveExtraGradeReward();

  CSReceiveExtraGradeReward(const CSReceiveExtraGradeReward& from);
  CSReceiveExtraGradeReward(CSReceiveExtraGradeReward&& from) noexcept
    : CSReceiveExtraGradeReward() {
    *this = ::std::move(from);
  }

  inline CSReceiveExtraGradeReward& operator=(const CSReceiveExtraGradeReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReceiveExtraGradeReward& operator=(CSReceiveExtraGradeReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSReceiveExtraGradeReward& default_instance();

  static inline const CSReceiveExtraGradeReward* internal_default_instance() {
    return reinterpret_cast<const CSReceiveExtraGradeReward*>(
               &_CSReceiveExtraGradeReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    279;

  friend void swap(CSReceiveExtraGradeReward& a, CSReceiveExtraGradeReward& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReceiveExtraGradeReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReceiveExtraGradeReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSReceiveExtraGradeReward* New() const final {
    return CreateMaybeMessage<CSReceiveExtraGradeReward>(nullptr);
  }

  CSReceiveExtraGradeReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSReceiveExtraGradeReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSReceiveExtraGradeReward& from);
  void MergeFrom(const CSReceiveExtraGradeReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSReceiveExtraGradeReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSReceiveExtraGradeReward";
  }
  protected:
  explicit CSReceiveExtraGradeReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
  };
  // int32 num = 1;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSReceiveExtraGradeReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCReceiveExtraGradeReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCReceiveExtraGradeReward) */ {
 public:
  inline SCReceiveExtraGradeReward() : SCReceiveExtraGradeReward(nullptr) {}
  virtual ~SCReceiveExtraGradeReward();

  SCReceiveExtraGradeReward(const SCReceiveExtraGradeReward& from);
  SCReceiveExtraGradeReward(SCReceiveExtraGradeReward&& from) noexcept
    : SCReceiveExtraGradeReward() {
    *this = ::std::move(from);
  }

  inline SCReceiveExtraGradeReward& operator=(const SCReceiveExtraGradeReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCReceiveExtraGradeReward& operator=(SCReceiveExtraGradeReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCReceiveExtraGradeReward& default_instance();

  static inline const SCReceiveExtraGradeReward* internal_default_instance() {
    return reinterpret_cast<const SCReceiveExtraGradeReward*>(
               &_SCReceiveExtraGradeReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    280;

  friend void swap(SCReceiveExtraGradeReward& a, SCReceiveExtraGradeReward& b) {
    a.Swap(&b);
  }
  inline void Swap(SCReceiveExtraGradeReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCReceiveExtraGradeReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCReceiveExtraGradeReward* New() const final {
    return CreateMaybeMessage<SCReceiveExtraGradeReward>(nullptr);
  }

  SCReceiveExtraGradeReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCReceiveExtraGradeReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCReceiveExtraGradeReward& from);
  void MergeFrom(const SCReceiveExtraGradeReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCReceiveExtraGradeReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCReceiveExtraGradeReward";
  }
  protected:
  explicit SCReceiveExtraGradeReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceiveRewardListFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // repeated .PlaneWar.ReceiveReward receiveRewardList = 1;
  int receiverewardlist_size() const;
  private:
  int _internal_receiverewardlist_size() const;
  public:
  void clear_receiverewardlist();
  ::PlaneWar::ReceiveReward* mutable_receiverewardlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ReceiveReward >*
      mutable_receiverewardlist();
  private:
  const ::PlaneWar::ReceiveReward& _internal_receiverewardlist(int index) const;
  ::PlaneWar::ReceiveReward* _internal_add_receiverewardlist();
  public:
  const ::PlaneWar::ReceiveReward& receiverewardlist(int index) const;
  ::PlaneWar::ReceiveReward* add_receiverewardlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ReceiveReward >&
      receiverewardlist() const;

  // int32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCReceiveExtraGradeReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ReceiveReward > receiverewardlist_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSGetGradeRankList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSGetGradeRankList) */ {
 public:
  inline CSGetGradeRankList() : CSGetGradeRankList(nullptr) {}
  virtual ~CSGetGradeRankList();

  CSGetGradeRankList(const CSGetGradeRankList& from);
  CSGetGradeRankList(CSGetGradeRankList&& from) noexcept
    : CSGetGradeRankList() {
    *this = ::std::move(from);
  }

  inline CSGetGradeRankList& operator=(const CSGetGradeRankList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGetGradeRankList& operator=(CSGetGradeRankList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSGetGradeRankList& default_instance();

  static inline const CSGetGradeRankList* internal_default_instance() {
    return reinterpret_cast<const CSGetGradeRankList*>(
               &_CSGetGradeRankList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    281;

  friend void swap(CSGetGradeRankList& a, CSGetGradeRankList& b) {
    a.Swap(&b);
  }
  inline void Swap(CSGetGradeRankList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGetGradeRankList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSGetGradeRankList* New() const final {
    return CreateMaybeMessage<CSGetGradeRankList>(nullptr);
  }

  CSGetGradeRankList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSGetGradeRankList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSGetGradeRankList& from);
  void MergeFrom(const CSGetGradeRankList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSGetGradeRankList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSGetGradeRankList";
  }
  protected:
  explicit CSGetGradeRankList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kSeasonFieldNumber = 3,
  };
  // int32 from = 1;
  void clear_from();
  ::PROTOBUF_NAMESPACE_ID::int32 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from() const;
  void _internal_set_from(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 to = 2;
  void clear_to();
  ::PROTOBUF_NAMESPACE_ID::int32 to() const;
  void set_to(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to() const;
  void _internal_set_to(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 season = 3;
  void clear_season();
  ::PROTOBUF_NAMESPACE_ID::int32 season() const;
  void set_season(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_season() const;
  void _internal_set_season(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSGetGradeRankList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_;
  ::PROTOBUF_NAMESPACE_ID::int32 season_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCGetGradeRankList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCGetGradeRankList) */ {
 public:
  inline SCGetGradeRankList() : SCGetGradeRankList(nullptr) {}
  virtual ~SCGetGradeRankList();

  SCGetGradeRankList(const SCGetGradeRankList& from);
  SCGetGradeRankList(SCGetGradeRankList&& from) noexcept
    : SCGetGradeRankList() {
    *this = ::std::move(from);
  }

  inline SCGetGradeRankList& operator=(const SCGetGradeRankList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGetGradeRankList& operator=(SCGetGradeRankList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGetGradeRankList& default_instance();

  static inline const SCGetGradeRankList* internal_default_instance() {
    return reinterpret_cast<const SCGetGradeRankList*>(
               &_SCGetGradeRankList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    282;

  friend void swap(SCGetGradeRankList& a, SCGetGradeRankList& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGetGradeRankList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGetGradeRankList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGetGradeRankList* New() const final {
    return CreateMaybeMessage<SCGetGradeRankList>(nullptr);
  }

  SCGetGradeRankList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGetGradeRankList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGetGradeRankList& from);
  void MergeFrom(const SCGetGradeRankList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGetGradeRankList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCGetGradeRankList";
  }
  protected:
  explicit SCGetGradeRankList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGradeRankListFieldNumber = 1,
    kSelfRankInfoFieldNumber = 2,
    kOrdFieldNumber = 3,
  };
  // repeated .PlaneWar.GradeRankInfo gradeRankList = 1;
  int graderanklist_size() const;
  private:
  int _internal_graderanklist_size() const;
  public:
  void clear_graderanklist();
  ::PlaneWar::GradeRankInfo* mutable_graderanklist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GradeRankInfo >*
      mutable_graderanklist();
  private:
  const ::PlaneWar::GradeRankInfo& _internal_graderanklist(int index) const;
  ::PlaneWar::GradeRankInfo* _internal_add_graderanklist();
  public:
  const ::PlaneWar::GradeRankInfo& graderanklist(int index) const;
  ::PlaneWar::GradeRankInfo* add_graderanklist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GradeRankInfo >&
      graderanklist() const;

  // .PlaneWar.GradeRankInfo selfRankInfo = 2;
  bool has_selfrankinfo() const;
  private:
  bool _internal_has_selfrankinfo() const;
  public:
  void clear_selfrankinfo();
  const ::PlaneWar::GradeRankInfo& selfrankinfo() const;
  ::PlaneWar::GradeRankInfo* release_selfrankinfo();
  ::PlaneWar::GradeRankInfo* mutable_selfrankinfo();
  void set_allocated_selfrankinfo(::PlaneWar::GradeRankInfo* selfrankinfo);
  private:
  const ::PlaneWar::GradeRankInfo& _internal_selfrankinfo() const;
  ::PlaneWar::GradeRankInfo* _internal_mutable_selfrankinfo();
  public:
  void unsafe_arena_set_allocated_selfrankinfo(
      ::PlaneWar::GradeRankInfo* selfrankinfo);
  ::PlaneWar::GradeRankInfo* unsafe_arena_release_selfrankinfo();

  // int32 ord = 3;
  void clear_ord();
  ::PROTOBUF_NAMESPACE_ID::int32 ord() const;
  void set_ord(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ord() const;
  void _internal_set_ord(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCGetGradeRankList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GradeRankInfo > graderanklist_;
  ::PlaneWar::GradeRankInfo* selfrankinfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 ord_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSBuyPlane PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSBuyPlane) */ {
 public:
  inline CSBuyPlane() : CSBuyPlane(nullptr) {}
  virtual ~CSBuyPlane();

  CSBuyPlane(const CSBuyPlane& from);
  CSBuyPlane(CSBuyPlane&& from) noexcept
    : CSBuyPlane() {
    *this = ::std::move(from);
  }

  inline CSBuyPlane& operator=(const CSBuyPlane& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSBuyPlane& operator=(CSBuyPlane&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSBuyPlane& default_instance();

  static inline const CSBuyPlane* internal_default_instance() {
    return reinterpret_cast<const CSBuyPlane*>(
               &_CSBuyPlane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    283;

  friend void swap(CSBuyPlane& a, CSBuyPlane& b) {
    a.Swap(&b);
  }
  inline void Swap(CSBuyPlane* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSBuyPlane* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSBuyPlane* New() const final {
    return CreateMaybeMessage<CSBuyPlane>(nullptr);
  }

  CSBuyPlane* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSBuyPlane>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSBuyPlane& from);
  void MergeFrom(const CSBuyPlane& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSBuyPlane* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSBuyPlane";
  }
  protected:
  explicit CSBuyPlane(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlaneIdFieldNumber = 1,
  };
  // int32 plane_id = 1;
  void clear_plane_id();
  ::PROTOBUF_NAMESPACE_ID::int32 plane_id() const;
  void set_plane_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_plane_id() const;
  void _internal_set_plane_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSBuyPlane)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 plane_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCBuyPlane PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCBuyPlane) */ {
 public:
  inline SCBuyPlane() : SCBuyPlane(nullptr) {}
  virtual ~SCBuyPlane();

  SCBuyPlane(const SCBuyPlane& from);
  SCBuyPlane(SCBuyPlane&& from) noexcept
    : SCBuyPlane() {
    *this = ::std::move(from);
  }

  inline SCBuyPlane& operator=(const SCBuyPlane& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCBuyPlane& operator=(SCBuyPlane&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCBuyPlane& default_instance();

  static inline const SCBuyPlane* internal_default_instance() {
    return reinterpret_cast<const SCBuyPlane*>(
               &_SCBuyPlane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    284;

  friend void swap(SCBuyPlane& a, SCBuyPlane& b) {
    a.Swap(&b);
  }
  inline void Swap(SCBuyPlane* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCBuyPlane* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCBuyPlane* New() const final {
    return CreateMaybeMessage<SCBuyPlane>(nullptr);
  }

  SCBuyPlane* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCBuyPlane>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCBuyPlane& from);
  void MergeFrom(const SCBuyPlane& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCBuyPlane* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCBuyPlane";
  }
  protected:
  explicit SCBuyPlane(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlaneIdFieldNumber = 1,
  };
  // int32 plane_id = 1;
  void clear_plane_id();
  ::PROTOBUF_NAMESPACE_ID::int32 plane_id() const;
  void set_plane_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_plane_id() const;
  void _internal_set_plane_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCBuyPlane)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 plane_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSBuyWings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSBuyWings) */ {
 public:
  inline CSBuyWings() : CSBuyWings(nullptr) {}
  virtual ~CSBuyWings();

  CSBuyWings(const CSBuyWings& from);
  CSBuyWings(CSBuyWings&& from) noexcept
    : CSBuyWings() {
    *this = ::std::move(from);
  }

  inline CSBuyWings& operator=(const CSBuyWings& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSBuyWings& operator=(CSBuyWings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSBuyWings& default_instance();

  static inline const CSBuyWings* internal_default_instance() {
    return reinterpret_cast<const CSBuyWings*>(
               &_CSBuyWings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    285;

  friend void swap(CSBuyWings& a, CSBuyWings& b) {
    a.Swap(&b);
  }
  inline void Swap(CSBuyWings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSBuyWings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSBuyWings* New() const final {
    return CreateMaybeMessage<CSBuyWings>(nullptr);
  }

  CSBuyWings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSBuyWings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSBuyWings& from);
  void MergeFrom(const CSBuyWings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSBuyWings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSBuyWings";
  }
  protected:
  explicit CSBuyWings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWingsIdFieldNumber = 1,
  };
  // int32 wings_id = 1;
  void clear_wings_id();
  ::PROTOBUF_NAMESPACE_ID::int32 wings_id() const;
  void set_wings_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wings_id() const;
  void _internal_set_wings_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSBuyWings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 wings_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCBuyWings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCBuyWings) */ {
 public:
  inline SCBuyWings() : SCBuyWings(nullptr) {}
  virtual ~SCBuyWings();

  SCBuyWings(const SCBuyWings& from);
  SCBuyWings(SCBuyWings&& from) noexcept
    : SCBuyWings() {
    *this = ::std::move(from);
  }

  inline SCBuyWings& operator=(const SCBuyWings& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCBuyWings& operator=(SCBuyWings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCBuyWings& default_instance();

  static inline const SCBuyWings* internal_default_instance() {
    return reinterpret_cast<const SCBuyWings*>(
               &_SCBuyWings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    286;

  friend void swap(SCBuyWings& a, SCBuyWings& b) {
    a.Swap(&b);
  }
  inline void Swap(SCBuyWings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCBuyWings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCBuyWings* New() const final {
    return CreateMaybeMessage<SCBuyWings>(nullptr);
  }

  SCBuyWings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCBuyWings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCBuyWings& from);
  void MergeFrom(const SCBuyWings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCBuyWings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCBuyWings";
  }
  protected:
  explicit SCBuyWings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWingsIdFieldNumber = 1,
  };
  // int32 wings_id = 1;
  void clear_wings_id();
  ::PROTOBUF_NAMESPACE_ID::int32 wings_id() const;
  void set_wings_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wings_id() const;
  void _internal_set_wings_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCBuyWings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 wings_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class OpenChestReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.OpenChestReward) */ {
 public:
  inline OpenChestReward() : OpenChestReward(nullptr) {}
  virtual ~OpenChestReward();

  OpenChestReward(const OpenChestReward& from);
  OpenChestReward(OpenChestReward&& from) noexcept
    : OpenChestReward() {
    *this = ::std::move(from);
  }

  inline OpenChestReward& operator=(const OpenChestReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenChestReward& operator=(OpenChestReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpenChestReward& default_instance();

  static inline const OpenChestReward* internal_default_instance() {
    return reinterpret_cast<const OpenChestReward*>(
               &_OpenChestReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    287;

  friend void swap(OpenChestReward& a, OpenChestReward& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenChestReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenChestReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpenChestReward* New() const final {
    return CreateMaybeMessage<OpenChestReward>(nullptr);
  }

  OpenChestReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpenChestReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpenChestReward& from);
  void MergeFrom(const OpenChestReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenChestReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.OpenChestReward";
  }
  protected:
  explicit OpenChestReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // .PlaneWar.Decimal num = 2;
  bool has_num() const;
  private:
  bool _internal_has_num() const;
  public:
  void clear_num();
  const ::PlaneWar::Decimal& num() const;
  ::PlaneWar::Decimal* release_num();
  ::PlaneWar::Decimal* mutable_num();
  void set_allocated_num(::PlaneWar::Decimal* num);
  private:
  const ::PlaneWar::Decimal& _internal_num() const;
  ::PlaneWar::Decimal* _internal_mutable_num();
  public:
  void unsafe_arena_set_allocated_num(
      ::PlaneWar::Decimal* num);
  ::PlaneWar::Decimal* unsafe_arena_release_num();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.OpenChestReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::Decimal* num_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCUpdateChestStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCUpdateChestStatus) */ {
 public:
  inline SCUpdateChestStatus() : SCUpdateChestStatus(nullptr) {}
  virtual ~SCUpdateChestStatus();

  SCUpdateChestStatus(const SCUpdateChestStatus& from);
  SCUpdateChestStatus(SCUpdateChestStatus&& from) noexcept
    : SCUpdateChestStatus() {
    *this = ::std::move(from);
  }

  inline SCUpdateChestStatus& operator=(const SCUpdateChestStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUpdateChestStatus& operator=(SCUpdateChestStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUpdateChestStatus& default_instance();

  static inline const SCUpdateChestStatus* internal_default_instance() {
    return reinterpret_cast<const SCUpdateChestStatus*>(
               &_SCUpdateChestStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    288;

  friend void swap(SCUpdateChestStatus& a, SCUpdateChestStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUpdateChestStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUpdateChestStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUpdateChestStatus* New() const final {
    return CreateMaybeMessage<SCUpdateChestStatus>(nullptr);
  }

  SCUpdateChestStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUpdateChestStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUpdateChestStatus& from);
  void MergeFrom(const SCUpdateChestStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUpdateChestStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCUpdateChestStatus";
  }
  protected:
  explicit SCUpdateChestStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChestTypeFieldNumber = 2,
    kTotalProgressFieldNumber = 3,
    kIsActiveFieldNumber = 1,
    kGuideFieldNumber = 5,
    kRemainProgressFieldNumber = 4,
    kAvailableRewardFieldNumber = 6,
  };
  // .PlaneWar.ChestType chest_type = 2;
  void clear_chest_type();
  ::PlaneWar::ChestType chest_type() const;
  void set_chest_type(::PlaneWar::ChestType value);
  private:
  ::PlaneWar::ChestType _internal_chest_type() const;
  void _internal_set_chest_type(::PlaneWar::ChestType value);
  public:

  // int32 total_progress = 3;
  void clear_total_progress();
  ::PROTOBUF_NAMESPACE_ID::int32 total_progress() const;
  void set_total_progress(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_progress() const;
  void _internal_set_total_progress(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_active = 1;
  void clear_is_active();
  bool is_active() const;
  void set_is_active(bool value);
  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);
  public:

  // bool guide = 5;
  void clear_guide();
  bool guide() const;
  void set_guide(bool value);
  private:
  bool _internal_guide() const;
  void _internal_set_guide(bool value);
  public:

  // int32 remain_progress = 4;
  void clear_remain_progress();
  ::PROTOBUF_NAMESPACE_ID::int32 remain_progress() const;
  void set_remain_progress(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_remain_progress() const;
  void _internal_set_remain_progress(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 available_reward = 6;
  void clear_available_reward();
  ::PROTOBUF_NAMESPACE_ID::int32 available_reward() const;
  void set_available_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_available_reward() const;
  void _internal_set_available_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCUpdateChestStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int chest_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_progress_;
  bool is_active_;
  bool guide_;
  ::PROTOBUF_NAMESPACE_ID::int32 remain_progress_;
  ::PROTOBUF_NAMESPACE_ID::int32 available_reward_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class ChestBrief PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.ChestBrief) */ {
 public:
  inline ChestBrief() : ChestBrief(nullptr) {}
  virtual ~ChestBrief();

  ChestBrief(const ChestBrief& from);
  ChestBrief(ChestBrief&& from) noexcept
    : ChestBrief() {
    *this = ::std::move(from);
  }

  inline ChestBrief& operator=(const ChestBrief& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChestBrief& operator=(ChestBrief&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChestBrief& default_instance();

  static inline const ChestBrief* internal_default_instance() {
    return reinterpret_cast<const ChestBrief*>(
               &_ChestBrief_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    289;

  friend void swap(ChestBrief& a, ChestBrief& b) {
    a.Swap(&b);
  }
  inline void Swap(ChestBrief* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChestBrief* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChestBrief* New() const final {
    return CreateMaybeMessage<ChestBrief>(nullptr);
  }

  ChestBrief* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChestBrief>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChestBrief& from);
  void MergeFrom(const ChestBrief& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChestBrief* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.ChestBrief";
  }
  protected:
  explicit ChestBrief(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardFieldNumber = 2,
    kChestTypeFieldNumber = 1,
  };
  // repeated .PlaneWar.OpenChestReward reward = 2;
  int reward_size() const;
  private:
  int _internal_reward_size() const;
  public:
  void clear_reward();
  ::PlaneWar::OpenChestReward* mutable_reward(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::OpenChestReward >*
      mutable_reward();
  private:
  const ::PlaneWar::OpenChestReward& _internal_reward(int index) const;
  ::PlaneWar::OpenChestReward* _internal_add_reward();
  public:
  const ::PlaneWar::OpenChestReward& reward(int index) const;
  ::PlaneWar::OpenChestReward* add_reward();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::OpenChestReward >&
      reward() const;

  // .PlaneWar.ChestType chest_type = 1;
  void clear_chest_type();
  ::PlaneWar::ChestType chest_type() const;
  void set_chest_type(::PlaneWar::ChestType value);
  private:
  ::PlaneWar::ChestType _internal_chest_type() const;
  void _internal_set_chest_type(::PlaneWar::ChestType value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.ChestBrief)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::OpenChestReward > reward_;
  int chest_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCChestConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCChestConfig) */ {
 public:
  inline SCChestConfig() : SCChestConfig(nullptr) {}
  virtual ~SCChestConfig();

  SCChestConfig(const SCChestConfig& from);
  SCChestConfig(SCChestConfig&& from) noexcept
    : SCChestConfig() {
    *this = ::std::move(from);
  }

  inline SCChestConfig& operator=(const SCChestConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCChestConfig& operator=(SCChestConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCChestConfig& default_instance();

  static inline const SCChestConfig* internal_default_instance() {
    return reinterpret_cast<const SCChestConfig*>(
               &_SCChestConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    290;

  friend void swap(SCChestConfig& a, SCChestConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SCChestConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCChestConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCChestConfig* New() const final {
    return CreateMaybeMessage<SCChestConfig>(nullptr);
  }

  SCChestConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCChestConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCChestConfig& from);
  void MergeFrom(const SCChestConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCChestConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCChestConfig";
  }
  protected:
  explicit SCChestConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChestBriefListFieldNumber = 2,
    kEndTimeFieldNumber = 1,
    kMinRatioFieldNumber = 3,
    kAutoOptionFieldNumber = 5,
    kAutoOpenFieldNumber = 4,
    kIsEnableFieldNumber = 6,
  };
  // repeated .PlaneWar.ChestBrief chest_brief_list = 2;
  int chest_brief_list_size() const;
  private:
  int _internal_chest_brief_list_size() const;
  public:
  void clear_chest_brief_list();
  ::PlaneWar::ChestBrief* mutable_chest_brief_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ChestBrief >*
      mutable_chest_brief_list();
  private:
  const ::PlaneWar::ChestBrief& _internal_chest_brief_list(int index) const;
  ::PlaneWar::ChestBrief* _internal_add_chest_brief_list();
  public:
  const ::PlaneWar::ChestBrief& chest_brief_list(int index) const;
  ::PlaneWar::ChestBrief* add_chest_brief_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ChestBrief >&
      chest_brief_list() const;

  // int32 end_time = 1;
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::int32 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 min_ratio = 3;
  void clear_min_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 min_ratio() const;
  void set_min_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_ratio() const;
  void _internal_set_min_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .PlaneWar.ChestAutoSelectOption auto_option = 5;
  void clear_auto_option();
  ::PlaneWar::ChestAutoSelectOption auto_option() const;
  void set_auto_option(::PlaneWar::ChestAutoSelectOption value);
  private:
  ::PlaneWar::ChestAutoSelectOption _internal_auto_option() const;
  void _internal_set_auto_option(::PlaneWar::ChestAutoSelectOption value);
  public:

  // bool auto_open = 4;
  void clear_auto_open();
  bool auto_open() const;
  void set_auto_open(bool value);
  private:
  bool _internal_auto_open() const;
  void _internal_set_auto_open(bool value);
  public:

  // bool is_enable = 6;
  void clear_is_enable();
  bool is_enable() const;
  void set_is_enable(bool value);
  private:
  bool _internal_is_enable() const;
  void _internal_set_is_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCChestConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ChestBrief > chest_brief_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_ratio_;
  int auto_option_;
  bool auto_open_;
  bool is_enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCOpenChest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCOpenChest) */ {
 public:
  inline SCOpenChest() : SCOpenChest(nullptr) {}
  virtual ~SCOpenChest();

  SCOpenChest(const SCOpenChest& from);
  SCOpenChest(SCOpenChest&& from) noexcept
    : SCOpenChest() {
    *this = ::std::move(from);
  }

  inline SCOpenChest& operator=(const SCOpenChest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCOpenChest& operator=(SCOpenChest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCOpenChest& default_instance();

  static inline const SCOpenChest* internal_default_instance() {
    return reinterpret_cast<const SCOpenChest*>(
               &_SCOpenChest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    291;

  friend void swap(SCOpenChest& a, SCOpenChest& b) {
    a.Swap(&b);
  }
  inline void Swap(SCOpenChest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCOpenChest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCOpenChest* New() const final {
    return CreateMaybeMessage<SCOpenChest>(nullptr);
  }

  SCOpenChest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCOpenChest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCOpenChest& from);
  void MergeFrom(const SCOpenChest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCOpenChest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCOpenChest";
  }
  protected:
  explicit SCOpenChest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardListFieldNumber = 1,
    kAutoOptionFieldNumber = 2,
  };
  // repeated .PlaneWar.OpenChestReward reward_list = 1;
  int reward_list_size() const;
  private:
  int _internal_reward_list_size() const;
  public:
  void clear_reward_list();
  ::PlaneWar::OpenChestReward* mutable_reward_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::OpenChestReward >*
      mutable_reward_list();
  private:
  const ::PlaneWar::OpenChestReward& _internal_reward_list(int index) const;
  ::PlaneWar::OpenChestReward* _internal_add_reward_list();
  public:
  const ::PlaneWar::OpenChestReward& reward_list(int index) const;
  ::PlaneWar::OpenChestReward* add_reward_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::OpenChestReward >&
      reward_list() const;

  // .PlaneWar.ChestAutoSelectOption auto_option = 2;
  void clear_auto_option();
  ::PlaneWar::ChestAutoSelectOption auto_option() const;
  void set_auto_option(::PlaneWar::ChestAutoSelectOption value);
  private:
  ::PlaneWar::ChestAutoSelectOption _internal_auto_option() const;
  void _internal_set_auto_option(::PlaneWar::ChestAutoSelectOption value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCOpenChest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::OpenChestReward > reward_list_;
  int auto_option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSSelectChestReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSSelectChestReward) */ {
 public:
  inline CSSelectChestReward() : CSSelectChestReward(nullptr) {}
  virtual ~CSSelectChestReward();

  CSSelectChestReward(const CSSelectChestReward& from);
  CSSelectChestReward(CSSelectChestReward&& from) noexcept
    : CSSelectChestReward() {
    *this = ::std::move(from);
  }

  inline CSSelectChestReward& operator=(const CSSelectChestReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSelectChestReward& operator=(CSSelectChestReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSelectChestReward& default_instance();

  static inline const CSSelectChestReward* internal_default_instance() {
    return reinterpret_cast<const CSSelectChestReward*>(
               &_CSSelectChestReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    292;

  friend void swap(CSSelectChestReward& a, CSSelectChestReward& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSelectChestReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSelectChestReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSelectChestReward* New() const final {
    return CreateMaybeMessage<CSSelectChestReward>(nullptr);
  }

  CSSelectChestReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSelectChestReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSelectChestReward& from);
  void MergeFrom(const CSSelectChestReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSelectChestReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSSelectChestReward";
  }
  protected:
  explicit CSSelectChestReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardFieldNumber = 2,
    kSelectIndexFieldNumber = 1,
  };
  // .PlaneWar.OpenChestReward reward = 2;
  bool has_reward() const;
  private:
  bool _internal_has_reward() const;
  public:
  void clear_reward();
  const ::PlaneWar::OpenChestReward& reward() const;
  ::PlaneWar::OpenChestReward* release_reward();
  ::PlaneWar::OpenChestReward* mutable_reward();
  void set_allocated_reward(::PlaneWar::OpenChestReward* reward);
  private:
  const ::PlaneWar::OpenChestReward& _internal_reward() const;
  ::PlaneWar::OpenChestReward* _internal_mutable_reward();
  public:
  void unsafe_arena_set_allocated_reward(
      ::PlaneWar::OpenChestReward* reward);
  ::PlaneWar::OpenChestReward* unsafe_arena_release_reward();

  // int32 select_index = 1;
  void clear_select_index();
  ::PROTOBUF_NAMESPACE_ID::int32 select_index() const;
  void set_select_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_select_index() const;
  void _internal_set_select_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSSelectChestReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlaneWar::OpenChestReward* reward_;
  ::PROTOBUF_NAMESPACE_ID::int32 select_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSChestSetAutoSelect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSChestSetAutoSelect) */ {
 public:
  inline CSChestSetAutoSelect() : CSChestSetAutoSelect(nullptr) {}
  virtual ~CSChestSetAutoSelect();

  CSChestSetAutoSelect(const CSChestSetAutoSelect& from);
  CSChestSetAutoSelect(CSChestSetAutoSelect&& from) noexcept
    : CSChestSetAutoSelect() {
    *this = ::std::move(from);
  }

  inline CSChestSetAutoSelect& operator=(const CSChestSetAutoSelect& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSChestSetAutoSelect& operator=(CSChestSetAutoSelect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSChestSetAutoSelect& default_instance();

  static inline const CSChestSetAutoSelect* internal_default_instance() {
    return reinterpret_cast<const CSChestSetAutoSelect*>(
               &_CSChestSetAutoSelect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    293;

  friend void swap(CSChestSetAutoSelect& a, CSChestSetAutoSelect& b) {
    a.Swap(&b);
  }
  inline void Swap(CSChestSetAutoSelect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSChestSetAutoSelect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSChestSetAutoSelect* New() const final {
    return CreateMaybeMessage<CSChestSetAutoSelect>(nullptr);
  }

  CSChestSetAutoSelect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSChestSetAutoSelect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSChestSetAutoSelect& from);
  void MergeFrom(const CSChestSetAutoSelect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSChestSetAutoSelect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSChestSetAutoSelect";
  }
  protected:
  explicit CSChestSetAutoSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAutoOptionFieldNumber = 1,
    kAutoOpenFieldNumber = 2,
  };
  // .PlaneWar.ChestAutoSelectOption auto_option = 1;
  void clear_auto_option();
  ::PlaneWar::ChestAutoSelectOption auto_option() const;
  void set_auto_option(::PlaneWar::ChestAutoSelectOption value);
  private:
  ::PlaneWar::ChestAutoSelectOption _internal_auto_option() const;
  void _internal_set_auto_option(::PlaneWar::ChestAutoSelectOption value);
  public:

  // bool auto_open = 2;
  void clear_auto_open();
  bool auto_open() const;
  void set_auto_open(bool value);
  private:
  bool _internal_auto_open() const;
  void _internal_set_auto_open(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSChestSetAutoSelect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int auto_option_;
  bool auto_open_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCChestSetAutoSelect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCChestSetAutoSelect) */ {
 public:
  inline SCChestSetAutoSelect() : SCChestSetAutoSelect(nullptr) {}
  virtual ~SCChestSetAutoSelect();

  SCChestSetAutoSelect(const SCChestSetAutoSelect& from);
  SCChestSetAutoSelect(SCChestSetAutoSelect&& from) noexcept
    : SCChestSetAutoSelect() {
    *this = ::std::move(from);
  }

  inline SCChestSetAutoSelect& operator=(const SCChestSetAutoSelect& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCChestSetAutoSelect& operator=(SCChestSetAutoSelect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCChestSetAutoSelect& default_instance();

  static inline const SCChestSetAutoSelect* internal_default_instance() {
    return reinterpret_cast<const SCChestSetAutoSelect*>(
               &_SCChestSetAutoSelect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    294;

  friend void swap(SCChestSetAutoSelect& a, SCChestSetAutoSelect& b) {
    a.Swap(&b);
  }
  inline void Swap(SCChestSetAutoSelect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCChestSetAutoSelect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCChestSetAutoSelect* New() const final {
    return CreateMaybeMessage<SCChestSetAutoSelect>(nullptr);
  }

  SCChestSetAutoSelect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCChestSetAutoSelect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCChestSetAutoSelect& from);
  void MergeFrom(const SCChestSetAutoSelect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCChestSetAutoSelect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCChestSetAutoSelect";
  }
  protected:
  explicit SCChestSetAutoSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAutoOptionFieldNumber = 1,
    kAutoOpenFieldNumber = 2,
  };
  // .PlaneWar.ChestAutoSelectOption auto_option = 1;
  void clear_auto_option();
  ::PlaneWar::ChestAutoSelectOption auto_option() const;
  void set_auto_option(::PlaneWar::ChestAutoSelectOption value);
  private:
  ::PlaneWar::ChestAutoSelectOption _internal_auto_option() const;
  void _internal_set_auto_option(::PlaneWar::ChestAutoSelectOption value);
  public:

  // bool auto_open = 2;
  void clear_auto_open();
  bool auto_open() const;
  void set_auto_open(bool value);
  private:
  bool _internal_auto_open() const;
  void _internal_set_auto_open(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCChestSetAutoSelect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int auto_option_;
  bool auto_open_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSChestSetEnable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSChestSetEnable) */ {
 public:
  inline CSChestSetEnable() : CSChestSetEnable(nullptr) {}
  virtual ~CSChestSetEnable();

  CSChestSetEnable(const CSChestSetEnable& from);
  CSChestSetEnable(CSChestSetEnable&& from) noexcept
    : CSChestSetEnable() {
    *this = ::std::move(from);
  }

  inline CSChestSetEnable& operator=(const CSChestSetEnable& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSChestSetEnable& operator=(CSChestSetEnable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSChestSetEnable& default_instance();

  static inline const CSChestSetEnable* internal_default_instance() {
    return reinterpret_cast<const CSChestSetEnable*>(
               &_CSChestSetEnable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    295;

  friend void swap(CSChestSetEnable& a, CSChestSetEnable& b) {
    a.Swap(&b);
  }
  inline void Swap(CSChestSetEnable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSChestSetEnable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSChestSetEnable* New() const final {
    return CreateMaybeMessage<CSChestSetEnable>(nullptr);
  }

  CSChestSetEnable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSChestSetEnable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSChestSetEnable& from);
  void MergeFrom(const CSChestSetEnable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSChestSetEnable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSChestSetEnable";
  }
  protected:
  explicit CSChestSetEnable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsEnableFieldNumber = 1,
  };
  // bool is_enable = 1;
  void clear_is_enable();
  bool is_enable() const;
  void set_is_enable(bool value);
  private:
  bool _internal_is_enable() const;
  void _internal_set_is_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSChestSetEnable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCChestSetEnable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCChestSetEnable) */ {
 public:
  inline SCChestSetEnable() : SCChestSetEnable(nullptr) {}
  virtual ~SCChestSetEnable();

  SCChestSetEnable(const SCChestSetEnable& from);
  SCChestSetEnable(SCChestSetEnable&& from) noexcept
    : SCChestSetEnable() {
    *this = ::std::move(from);
  }

  inline SCChestSetEnable& operator=(const SCChestSetEnable& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCChestSetEnable& operator=(SCChestSetEnable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCChestSetEnable& default_instance();

  static inline const SCChestSetEnable* internal_default_instance() {
    return reinterpret_cast<const SCChestSetEnable*>(
               &_SCChestSetEnable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    296;

  friend void swap(SCChestSetEnable& a, SCChestSetEnable& b) {
    a.Swap(&b);
  }
  inline void Swap(SCChestSetEnable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCChestSetEnable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCChestSetEnable* New() const final {
    return CreateMaybeMessage<SCChestSetEnable>(nullptr);
  }

  SCChestSetEnable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCChestSetEnable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCChestSetEnable& from);
  void MergeFrom(const SCChestSetEnable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCChestSetEnable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCChestSetEnable";
  }
  protected:
  explicit SCChestSetEnable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsEnableFieldNumber = 1,
  };
  // bool is_enable = 1;
  void clear_is_enable();
  bool is_enable() const;
  void set_is_enable(bool value);
  private:
  bool _internal_is_enable() const;
  void _internal_set_is_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCChestSetEnable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCWaterDropInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCWaterDropInfo) */ {
 public:
  inline SCWaterDropInfo() : SCWaterDropInfo(nullptr) {}
  virtual ~SCWaterDropInfo();

  SCWaterDropInfo(const SCWaterDropInfo& from);
  SCWaterDropInfo(SCWaterDropInfo&& from) noexcept
    : SCWaterDropInfo() {
    *this = ::std::move(from);
  }

  inline SCWaterDropInfo& operator=(const SCWaterDropInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCWaterDropInfo& operator=(SCWaterDropInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCWaterDropInfo& default_instance();

  static inline const SCWaterDropInfo* internal_default_instance() {
    return reinterpret_cast<const SCWaterDropInfo*>(
               &_SCWaterDropInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    297;

  friend void swap(SCWaterDropInfo& a, SCWaterDropInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCWaterDropInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCWaterDropInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCWaterDropInfo* New() const final {
    return CreateMaybeMessage<SCWaterDropInfo>(nullptr);
  }

  SCWaterDropInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCWaterDropInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCWaterDropInfo& from);
  void MergeFrom(const SCWaterDropInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCWaterDropInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCWaterDropInfo";
  }
  protected:
  explicit SCWaterDropInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableFieldNumber = 1,
    kDropCountFieldNumber = 2,
    kFragmentCountFieldNumber = 3,
  };
  // bool enable = 1;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // int32 dropCount = 2;
  void clear_dropcount();
  ::PROTOBUF_NAMESPACE_ID::int32 dropcount() const;
  void set_dropcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dropcount() const;
  void _internal_set_dropcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fragmentCount = 3;
  void clear_fragmentcount();
  ::PROTOBUF_NAMESPACE_ID::int32 fragmentcount() const;
  void set_fragmentcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fragmentcount() const;
  void _internal_set_fragmentcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCWaterDropInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool enable_;
  ::PROTOBUF_NAMESPACE_ID::int32 dropcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 fragmentcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class TextInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.TextInfo) */ {
 public:
  inline TextInfo() : TextInfo(nullptr) {}
  virtual ~TextInfo();

  TextInfo(const TextInfo& from);
  TextInfo(TextInfo&& from) noexcept
    : TextInfo() {
    *this = ::std::move(from);
  }

  inline TextInfo& operator=(const TextInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextInfo& operator=(TextInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TextInfo& default_instance();

  static inline const TextInfo* internal_default_instance() {
    return reinterpret_cast<const TextInfo*>(
               &_TextInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    298;

  friend void swap(TextInfo& a, TextInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TextInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextInfo* New() const final {
    return CreateMaybeMessage<TextInfo>(nullptr);
  }

  TextInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TextInfo& from);
  void MergeFrom(const TextInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.TextInfo";
  }
  protected:
  explicit TextInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // string text = 2;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // int32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.TextInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSSyncTextConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSSyncTextConfig) */ {
 public:
  inline CSSyncTextConfig() : CSSyncTextConfig(nullptr) {}
  virtual ~CSSyncTextConfig();

  CSSyncTextConfig(const CSSyncTextConfig& from);
  CSSyncTextConfig(CSSyncTextConfig&& from) noexcept
    : CSSyncTextConfig() {
    *this = ::std::move(from);
  }

  inline CSSyncTextConfig& operator=(const CSSyncTextConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSyncTextConfig& operator=(CSSyncTextConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSyncTextConfig& default_instance();

  static inline const CSSyncTextConfig* internal_default_instance() {
    return reinterpret_cast<const CSSyncTextConfig*>(
               &_CSSyncTextConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    299;

  friend void swap(CSSyncTextConfig& a, CSSyncTextConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSyncTextConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSyncTextConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSyncTextConfig* New() const final {
    return CreateMaybeMessage<CSSyncTextConfig>(nullptr);
  }

  CSSyncTextConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSyncTextConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSyncTextConfig& from);
  void MergeFrom(const CSSyncTextConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSyncTextConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSSyncTextConfig";
  }
  protected:
  explicit CSSyncTextConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartIdxFieldNumber = 1,
    kEndIdxFieldNumber = 2,
  };
  // int32 startIdx = 1;
  void clear_startidx();
  ::PROTOBUF_NAMESPACE_ID::int32 startidx() const;
  void set_startidx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_startidx() const;
  void _internal_set_startidx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 endIdx = 2;
  void clear_endidx();
  ::PROTOBUF_NAMESPACE_ID::int32 endidx() const;
  void set_endidx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_endidx() const;
  void _internal_set_endidx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSSyncTextConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 startidx_;
  ::PROTOBUF_NAMESPACE_ID::int32 endidx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCSyncTextConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCSyncTextConfig) */ {
 public:
  inline SCSyncTextConfig() : SCSyncTextConfig(nullptr) {}
  virtual ~SCSyncTextConfig();

  SCSyncTextConfig(const SCSyncTextConfig& from);
  SCSyncTextConfig(SCSyncTextConfig&& from) noexcept
    : SCSyncTextConfig() {
    *this = ::std::move(from);
  }

  inline SCSyncTextConfig& operator=(const SCSyncTextConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSyncTextConfig& operator=(SCSyncTextConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSyncTextConfig& default_instance();

  static inline const SCSyncTextConfig* internal_default_instance() {
    return reinterpret_cast<const SCSyncTextConfig*>(
               &_SCSyncTextConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    300;

  friend void swap(SCSyncTextConfig& a, SCSyncTextConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSyncTextConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSyncTextConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSyncTextConfig* New() const final {
    return CreateMaybeMessage<SCSyncTextConfig>(nullptr);
  }

  SCSyncTextConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSyncTextConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSyncTextConfig& from);
  void MergeFrom(const SCSyncTextConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSyncTextConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCSyncTextConfig";
  }
  protected:
  explicit SCSyncTextConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextListFieldNumber = 1,
  };
  // repeated .PlaneWar.TextInfo textList = 1;
  int textlist_size() const;
  private:
  int _internal_textlist_size() const;
  public:
  void clear_textlist();
  ::PlaneWar::TextInfo* mutable_textlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::TextInfo >*
      mutable_textlist();
  private:
  const ::PlaneWar::TextInfo& _internal_textlist(int index) const;
  ::PlaneWar::TextInfo* _internal_add_textlist();
  public:
  const ::PlaneWar::TextInfo& textlist(int index) const;
  ::PlaneWar::TextInfo* add_textlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::TextInfo >&
      textlist() const;

  // @@protoc_insertion_point(class_scope:PlaneWar.SCSyncTextConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::TextInfo > textlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class CSExtraMul PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.CSExtraMul) */ {
 public:
  inline CSExtraMul() : CSExtraMul(nullptr) {}
  virtual ~CSExtraMul();

  CSExtraMul(const CSExtraMul& from);
  CSExtraMul(CSExtraMul&& from) noexcept
    : CSExtraMul() {
    *this = ::std::move(from);
  }

  inline CSExtraMul& operator=(const CSExtraMul& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSExtraMul& operator=(CSExtraMul&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSExtraMul& default_instance();

  static inline const CSExtraMul* internal_default_instance() {
    return reinterpret_cast<const CSExtraMul*>(
               &_CSExtraMul_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    301;

  friend void swap(CSExtraMul& a, CSExtraMul& b) {
    a.Swap(&b);
  }
  inline void Swap(CSExtraMul* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSExtraMul* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSExtraMul* New() const final {
    return CreateMaybeMessage<CSExtraMul>(nullptr);
  }

  CSExtraMul* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSExtraMul>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSExtraMul& from);
  void MergeFrom(const CSExtraMul& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSExtraMul* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.CSExtraMul";
  }
  protected:
  explicit CSExtraMul(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraMulFieldNumber = 1,
  };
  // bool extra_mul = 1;
  void clear_extra_mul();
  bool extra_mul() const;
  void set_extra_mul(bool value);
  private:
  bool _internal_extra_mul() const;
  void _internal_set_extra_mul(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.CSExtraMul)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool extra_mul_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// -------------------------------------------------------------------

class SCExtraMul PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlaneWar.SCExtraMul) */ {
 public:
  inline SCExtraMul() : SCExtraMul(nullptr) {}
  virtual ~SCExtraMul();

  SCExtraMul(const SCExtraMul& from);
  SCExtraMul(SCExtraMul&& from) noexcept
    : SCExtraMul() {
    *this = ::std::move(from);
  }

  inline SCExtraMul& operator=(const SCExtraMul& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCExtraMul& operator=(SCExtraMul&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCExtraMul& default_instance();

  static inline const SCExtraMul* internal_default_instance() {
    return reinterpret_cast<const SCExtraMul*>(
               &_SCExtraMul_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    302;

  friend void swap(SCExtraMul& a, SCExtraMul& b) {
    a.Swap(&b);
  }
  inline void Swap(SCExtraMul* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCExtraMul* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCExtraMul* New() const final {
    return CreateMaybeMessage<SCExtraMul>(nullptr);
  }

  SCExtraMul* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCExtraMul>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCExtraMul& from);
  void MergeFrom(const SCExtraMul& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCExtraMul* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlaneWar.SCExtraMul";
  }
  protected:
  explicit SCExtraMul(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlaneWar_2eproto);
    return ::descriptor_table_PlaneWar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdFieldNumber = 1,
    kExtraMulFieldNumber = 2,
  };
  // int32 chairId = 1;
  void clear_chairid();
  ::PROTOBUF_NAMESPACE_ID::int32 chairid() const;
  void set_chairid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chairid() const;
  void _internal_set_chairid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool extra_mul = 2;
  void clear_extra_mul();
  bool extra_mul() const;
  void set_extra_mul(bool value);
  private:
  bool _internal_extra_mul() const;
  void _internal_set_extra_mul(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlaneWar.SCExtraMul)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chairid_;
  bool extra_mul_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlaneWar_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MissileFishListInfo

// repeated int32 fish_list = 1;
inline int MissileFishListInfo::_internal_fish_list_size() const {
  return fish_list_.size();
}
inline int MissileFishListInfo::fish_list_size() const {
  return _internal_fish_list_size();
}
inline void MissileFishListInfo::clear_fish_list() {
  fish_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissileFishListInfo::_internal_fish_list(int index) const {
  return fish_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissileFishListInfo::fish_list(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.MissileFishListInfo.fish_list)
  return _internal_fish_list(index);
}
inline void MissileFishListInfo::set_fish_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  fish_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlaneWar.MissileFishListInfo.fish_list)
}
inline void MissileFishListInfo::_internal_add_fish_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  fish_list_.Add(value);
}
inline void MissileFishListInfo::add_fish_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_fish_list(value);
  // @@protoc_insertion_point(field_add:PlaneWar.MissileFishListInfo.fish_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MissileFishListInfo::_internal_fish_list() const {
  return fish_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MissileFishListInfo::fish_list() const {
  // @@protoc_insertion_point(field_list:PlaneWar.MissileFishListInfo.fish_list)
  return _internal_fish_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MissileFishListInfo::_internal_mutable_fish_list() {
  return &fish_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MissileFishListInfo::mutable_fish_list() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.MissileFishListInfo.fish_list)
  return _internal_mutable_fish_list();
}

// -------------------------------------------------------------------

// Decimal

// int32 num = 1;
inline void Decimal::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Decimal::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Decimal::num() const {
  // @@protoc_insertion_point(field_get:PlaneWar.Decimal.num)
  return _internal_num();
}
inline void Decimal::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void Decimal::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:PlaneWar.Decimal.num)
}

// int32 denom = 2;
inline void Decimal::clear_denom() {
  denom_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Decimal::_internal_denom() const {
  return denom_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Decimal::denom() const {
  // @@protoc_insertion_point(field_get:PlaneWar.Decimal.denom)
  return _internal_denom();
}
inline void Decimal::_internal_set_denom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  denom_ = value;
}
inline void Decimal::set_denom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_denom(value);
  // @@protoc_insertion_point(field_set:PlaneWar.Decimal.denom)
}

// -------------------------------------------------------------------

// SC_SceneInfo

// repeated int32 bet_list = 1;
inline int SC_SceneInfo::_internal_bet_list_size() const {
  return bet_list_.size();
}
inline int SC_SceneInfo::bet_list_size() const {
  return _internal_bet_list_size();
}
inline void SC_SceneInfo::clear_bet_list() {
  bet_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_bet_list(int index) const {
  return bet_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::bet_list(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SC_SceneInfo.bet_list)
  return _internal_bet_list(index);
}
inline void SC_SceneInfo::set_bet_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  bet_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlaneWar.SC_SceneInfo.bet_list)
}
inline void SC_SceneInfo::_internal_add_bet_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  bet_list_.Add(value);
}
inline void SC_SceneInfo::add_bet_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_bet_list(value);
  // @@protoc_insertion_point(field_add:PlaneWar.SC_SceneInfo.bet_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_SceneInfo::_internal_bet_list() const {
  return bet_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_SceneInfo::bet_list() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SC_SceneInfo.bet_list)
  return _internal_bet_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_SceneInfo::_internal_mutable_bet_list() {
  return &bet_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_SceneInfo::mutable_bet_list() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SC_SceneInfo.bet_list)
  return _internal_mutable_bet_list();
}

// repeated .PlaneWar.PlayerInfo player_info = 2;
inline int SC_SceneInfo::_internal_player_info_size() const {
  return player_info_.size();
}
inline int SC_SceneInfo::player_info_size() const {
  return _internal_player_info_size();
}
inline void SC_SceneInfo::clear_player_info() {
  player_info_.Clear();
}
inline ::PlaneWar::PlayerInfo* SC_SceneInfo::mutable_player_info(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SC_SceneInfo.player_info)
  return player_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PlayerInfo >*
SC_SceneInfo::mutable_player_info() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SC_SceneInfo.player_info)
  return &player_info_;
}
inline const ::PlaneWar::PlayerInfo& SC_SceneInfo::_internal_player_info(int index) const {
  return player_info_.Get(index);
}
inline const ::PlaneWar::PlayerInfo& SC_SceneInfo::player_info(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SC_SceneInfo.player_info)
  return _internal_player_info(index);
}
inline ::PlaneWar::PlayerInfo* SC_SceneInfo::_internal_add_player_info() {
  return player_info_.Add();
}
inline ::PlaneWar::PlayerInfo* SC_SceneInfo::add_player_info() {
  // @@protoc_insertion_point(field_add:PlaneWar.SC_SceneInfo.player_info)
  return _internal_add_player_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PlayerInfo >&
SC_SceneInfo::player_info() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SC_SceneInfo.player_info)
  return player_info_;
}

// .PlaneWar.RoomInfo roomInfo = 3;
inline bool SC_SceneInfo::_internal_has_roominfo() const {
  return this != internal_default_instance() && roominfo_ != nullptr;
}
inline bool SC_SceneInfo::has_roominfo() const {
  return _internal_has_roominfo();
}
inline void SC_SceneInfo::clear_roominfo() {
  if (GetArena() == nullptr && roominfo_ != nullptr) {
    delete roominfo_;
  }
  roominfo_ = nullptr;
}
inline const ::PlaneWar::RoomInfo& SC_SceneInfo::_internal_roominfo() const {
  const ::PlaneWar::RoomInfo* p = roominfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::RoomInfo&>(
      ::PlaneWar::_RoomInfo_default_instance_);
}
inline const ::PlaneWar::RoomInfo& SC_SceneInfo::roominfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SC_SceneInfo.roomInfo)
  return _internal_roominfo();
}
inline void SC_SceneInfo::unsafe_arena_set_allocated_roominfo(
    ::PlaneWar::RoomInfo* roominfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  roominfo_ = roominfo;
  if (roominfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SC_SceneInfo.roomInfo)
}
inline ::PlaneWar::RoomInfo* SC_SceneInfo::release_roominfo() {
  
  ::PlaneWar::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::RoomInfo* SC_SceneInfo::unsafe_arena_release_roominfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.SC_SceneInfo.roomInfo)
  
  ::PlaneWar::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::RoomInfo* SC_SceneInfo::_internal_mutable_roominfo() {
  
  if (roominfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::RoomInfo>(GetArena());
    roominfo_ = p;
  }
  return roominfo_;
}
inline ::PlaneWar::RoomInfo* SC_SceneInfo::mutable_roominfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SC_SceneInfo.roomInfo)
  return _internal_mutable_roominfo();
}
inline void SC_SceneInfo::set_allocated_roominfo(::PlaneWar::RoomInfo* roominfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete roominfo_;
  }
  if (roominfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(roominfo);
    if (message_arena != submessage_arena) {
      roominfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roominfo, submessage_arena);
    }
    
  } else {
    
  }
  roominfo_ = roominfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SC_SceneInfo.roomInfo)
}

// repeated int32 piece_pay = 4;
inline int SC_SceneInfo::_internal_piece_pay_size() const {
  return piece_pay_.size();
}
inline int SC_SceneInfo::piece_pay_size() const {
  return _internal_piece_pay_size();
}
inline void SC_SceneInfo::clear_piece_pay() {
  piece_pay_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_piece_pay(int index) const {
  return piece_pay_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::piece_pay(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SC_SceneInfo.piece_pay)
  return _internal_piece_pay(index);
}
inline void SC_SceneInfo::set_piece_pay(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  piece_pay_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlaneWar.SC_SceneInfo.piece_pay)
}
inline void SC_SceneInfo::_internal_add_piece_pay(::PROTOBUF_NAMESPACE_ID::int32 value) {
  piece_pay_.Add(value);
}
inline void SC_SceneInfo::add_piece_pay(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_piece_pay(value);
  // @@protoc_insertion_point(field_add:PlaneWar.SC_SceneInfo.piece_pay)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_SceneInfo::_internal_piece_pay() const {
  return piece_pay_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_SceneInfo::piece_pay() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SC_SceneInfo.piece_pay)
  return _internal_piece_pay();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_SceneInfo::_internal_mutable_piece_pay() {
  return &piece_pay_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_SceneInfo::mutable_piece_pay() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SC_SceneInfo.piece_pay)
  return _internal_mutable_piece_pay();
}

// -------------------------------------------------------------------

// CSLogin

// int32 playerId = 1;
inline void CSLogin::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLogin::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLogin::playerid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSLogin.playerId)
  return _internal_playerid();
}
inline void CSLogin::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void CSLogin::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSLogin.playerId)
}

// string token = 2;
inline void CSLogin::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& CSLogin::token() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSLogin.token)
  return _internal_token();
}
inline void CSLogin::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSLogin.token)
}
inline std::string* CSLogin::mutable_token() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.CSLogin.token)
  return _internal_mutable_token();
}
inline const std::string& CSLogin::_internal_token() const {
  return token_.Get();
}
inline void CSLogin::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSLogin::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.CSLogin.token)
}
inline void CSLogin::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.CSLogin.token)
}
inline void CSLogin::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.CSLogin.token)
}
inline std::string* CSLogin::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSLogin::release_token() {
  // @@protoc_insertion_point(field_release:PlaneWar.CSLogin.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSLogin::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.CSLogin.token)
}

// -------------------------------------------------------------------

// SCLogin

// int32 sceneId = 1;
inline void SCLogin::clear_sceneid() {
  sceneid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLogin::_internal_sceneid() const {
  return sceneid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLogin::sceneid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCLogin.sceneId)
  return _internal_sceneid();
}
inline void SCLogin::_internal_set_sceneid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sceneid_ = value;
}
inline void SCLogin::set_sceneid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sceneid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCLogin.sceneId)
}

// int32 arenaID = 2;
inline void SCLogin::clear_arenaid() {
  arenaid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLogin::_internal_arenaid() const {
  return arenaid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLogin::arenaid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCLogin.arenaID)
  return _internal_arenaid();
}
inline void SCLogin::_internal_set_arenaid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  arenaid_ = value;
}
inline void SCLogin::set_arenaid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_arenaid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCLogin.arenaID)
}

// -------------------------------------------------------------------

// CSLogout

// -------------------------------------------------------------------

// SCLogout

// int32 logoutType = 1;
inline void SCLogout::clear_logouttype() {
  logouttype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLogout::_internal_logouttype() const {
  return logouttype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLogout::logouttype() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCLogout.logoutType)
  return _internal_logouttype();
}
inline void SCLogout::_internal_set_logouttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  logouttype_ = value;
}
inline void SCLogout::set_logouttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_logouttype(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCLogout.logoutType)
}

// int32 chair = 2;
inline void SCLogout::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLogout::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLogout::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCLogout.chair)
  return _internal_chair();
}
inline void SCLogout::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCLogout::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCLogout.chair)
}

// -------------------------------------------------------------------

// CommonPropInfo

// int32 propID = 1;
inline void CommonPropInfo::clear_propid() {
  propid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonPropInfo::_internal_propid() const {
  return propid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonPropInfo::propid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CommonPropInfo.propID)
  return _internal_propid();
}
inline void CommonPropInfo::_internal_set_propid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  propid_ = value;
}
inline void CommonPropInfo::set_propid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_propid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CommonPropInfo.propID)
}

// int32 num = 2;
inline void CommonPropInfo::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonPropInfo::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonPropInfo::num() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CommonPropInfo.num)
  return _internal_num();
}
inline void CommonPropInfo::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void CommonPropInfo::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CommonPropInfo.num)
}

// -------------------------------------------------------------------

// Pos

// float x = 1;
inline void Pos::clear_x() {
  x_ = 0;
}
inline float Pos::_internal_x() const {
  return x_;
}
inline float Pos::x() const {
  // @@protoc_insertion_point(field_get:PlaneWar.Pos.x)
  return _internal_x();
}
inline void Pos::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Pos::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:PlaneWar.Pos.x)
}

// float y = 2;
inline void Pos::clear_y() {
  y_ = 0;
}
inline float Pos::_internal_y() const {
  return y_;
}
inline float Pos::y() const {
  // @@protoc_insertion_point(field_get:PlaneWar.Pos.y)
  return _internal_y();
}
inline void Pos::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Pos::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:PlaneWar.Pos.y)
}

// float z = 3;
inline void Pos::clear_z() {
  z_ = 0;
}
inline float Pos::_internal_z() const {
  return z_;
}
inline float Pos::z() const {
  // @@protoc_insertion_point(field_get:PlaneWar.Pos.z)
  return _internal_z();
}
inline void Pos::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Pos::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:PlaneWar.Pos.z)
}

// -------------------------------------------------------------------

// BuffInfo

// int32 buffUID = 1;
inline void BuffInfo::clear_buffuid() {
  buffuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuffInfo::_internal_buffuid() const {
  return buffuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuffInfo::buffuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.BuffInfo.buffUID)
  return _internal_buffuid();
}
inline void BuffInfo::_internal_set_buffuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  buffuid_ = value;
}
inline void BuffInfo::set_buffuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_buffuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.BuffInfo.buffUID)
}

// int32 num = 2;
inline void BuffInfo::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuffInfo::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuffInfo::num() const {
  // @@protoc_insertion_point(field_get:PlaneWar.BuffInfo.num)
  return _internal_num();
}
inline void BuffInfo::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void BuffInfo::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:PlaneWar.BuffInfo.num)
}

// int32 ratio = 3;
inline void BuffInfo::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuffInfo::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuffInfo::ratio() const {
  // @@protoc_insertion_point(field_get:PlaneWar.BuffInfo.ratio)
  return _internal_ratio();
}
inline void BuffInfo::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void BuffInfo::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:PlaneWar.BuffInfo.ratio)
}

// bool isCrit = 4;
inline void BuffInfo::clear_iscrit() {
  iscrit_ = false;
}
inline bool BuffInfo::_internal_iscrit() const {
  return iscrit_;
}
inline bool BuffInfo::iscrit() const {
  // @@protoc_insertion_point(field_get:PlaneWar.BuffInfo.isCrit)
  return _internal_iscrit();
}
inline void BuffInfo::_internal_set_iscrit(bool value) {
  
  iscrit_ = value;
}
inline void BuffInfo::set_iscrit(bool value) {
  _internal_set_iscrit(value);
  // @@protoc_insertion_point(field_set:PlaneWar.BuffInfo.isCrit)
}

// repeated int32 compose = 5;
inline int BuffInfo::_internal_compose_size() const {
  return compose_.size();
}
inline int BuffInfo::compose_size() const {
  return _internal_compose_size();
}
inline void BuffInfo::clear_compose() {
  compose_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuffInfo::_internal_compose(int index) const {
  return compose_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuffInfo::compose(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.BuffInfo.compose)
  return _internal_compose(index);
}
inline void BuffInfo::set_compose(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  compose_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlaneWar.BuffInfo.compose)
}
inline void BuffInfo::_internal_add_compose(::PROTOBUF_NAMESPACE_ID::int32 value) {
  compose_.Add(value);
}
inline void BuffInfo::add_compose(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_compose(value);
  // @@protoc_insertion_point(field_add:PlaneWar.BuffInfo.compose)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuffInfo::_internal_compose() const {
  return compose_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuffInfo::compose() const {
  // @@protoc_insertion_point(field_list:PlaneWar.BuffInfo.compose)
  return _internal_compose();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuffInfo::_internal_mutable_compose() {
  return &compose_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuffInfo::mutable_compose() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.BuffInfo.compose)
  return _internal_mutable_compose();
}

// repeated int32 desc = 6;
inline int BuffInfo::_internal_desc_size() const {
  return desc_.size();
}
inline int BuffInfo::desc_size() const {
  return _internal_desc_size();
}
inline void BuffInfo::clear_desc() {
  desc_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuffInfo::_internal_desc(int index) const {
  return desc_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuffInfo::desc(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.BuffInfo.desc)
  return _internal_desc(index);
}
inline void BuffInfo::set_desc(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  desc_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlaneWar.BuffInfo.desc)
}
inline void BuffInfo::_internal_add_desc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  desc_.Add(value);
}
inline void BuffInfo::add_desc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_desc(value);
  // @@protoc_insertion_point(field_add:PlaneWar.BuffInfo.desc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuffInfo::_internal_desc() const {
  return desc_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuffInfo::desc() const {
  // @@protoc_insertion_point(field_list:PlaneWar.BuffInfo.desc)
  return _internal_desc();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuffInfo::_internal_mutable_desc() {
  return &desc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuffInfo::mutable_desc() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.BuffInfo.desc)
  return _internal_mutable_desc();
}

// int32 speedUpRatio = 7;
inline void BuffInfo::clear_speedupratio() {
  speedupratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuffInfo::_internal_speedupratio() const {
  return speedupratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuffInfo::speedupratio() const {
  // @@protoc_insertion_point(field_get:PlaneWar.BuffInfo.speedUpRatio)
  return _internal_speedupratio();
}
inline void BuffInfo::_internal_set_speedupratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  speedupratio_ = value;
}
inline void BuffInfo::set_speedupratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speedupratio(value);
  // @@protoc_insertion_point(field_set:PlaneWar.BuffInfo.speedUpRatio)
}

// int32 originUID = 8;
inline void BuffInfo::clear_originuid() {
  originuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuffInfo::_internal_originuid() const {
  return originuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuffInfo::originuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.BuffInfo.originUID)
  return _internal_originuid();
}
inline void BuffInfo::_internal_set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  originuid_ = value;
}
inline void BuffInfo::set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_originuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.BuffInfo.originUID)
}

// -------------------------------------------------------------------

// BlackHoleInfo

// int32 uid = 1;
inline void BlackHoleInfo::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlackHoleInfo::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlackHoleInfo::uid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.BlackHoleInfo.uid)
  return _internal_uid();
}
inline void BlackHoleInfo::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void BlackHoleInfo::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.BlackHoleInfo.uid)
}

// int32 num = 2;
inline void BlackHoleInfo::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlackHoleInfo::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlackHoleInfo::num() const {
  // @@protoc_insertion_point(field_get:PlaneWar.BlackHoleInfo.num)
  return _internal_num();
}
inline void BlackHoleInfo::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void BlackHoleInfo::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:PlaneWar.BlackHoleInfo.num)
}

// int32 ratio = 3;
inline void BlackHoleInfo::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlackHoleInfo::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlackHoleInfo::ratio() const {
  // @@protoc_insertion_point(field_get:PlaneWar.BlackHoleInfo.ratio)
  return _internal_ratio();
}
inline void BlackHoleInfo::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void BlackHoleInfo::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:PlaneWar.BlackHoleInfo.ratio)
}

// .PlaneWar.Pos pos = 4;
inline bool BlackHoleInfo::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool BlackHoleInfo::has_pos() const {
  return _internal_has_pos();
}
inline void BlackHoleInfo::clear_pos() {
  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::PlaneWar::Pos& BlackHoleInfo::_internal_pos() const {
  const ::PlaneWar::Pos* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::Pos&>(
      ::PlaneWar::_Pos_default_instance_);
}
inline const ::PlaneWar::Pos& BlackHoleInfo::pos() const {
  // @@protoc_insertion_point(field_get:PlaneWar.BlackHoleInfo.pos)
  return _internal_pos();
}
inline void BlackHoleInfo::unsafe_arena_set_allocated_pos(
    ::PlaneWar::Pos* pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.BlackHoleInfo.pos)
}
inline ::PlaneWar::Pos* BlackHoleInfo::release_pos() {
  
  ::PlaneWar::Pos* temp = pos_;
  pos_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::Pos* BlackHoleInfo::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:PlaneWar.BlackHoleInfo.pos)
  
  ::PlaneWar::Pos* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::PlaneWar::Pos* BlackHoleInfo::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::Pos>(GetArena());
    pos_ = p;
  }
  return pos_;
}
inline ::PlaneWar::Pos* BlackHoleInfo::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.BlackHoleInfo.pos)
  return _internal_mutable_pos();
}
inline void BlackHoleInfo::set_allocated_pos(::PlaneWar::Pos* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.BlackHoleInfo.pos)
}

// bool isCrit = 5;
inline void BlackHoleInfo::clear_iscrit() {
  iscrit_ = false;
}
inline bool BlackHoleInfo::_internal_iscrit() const {
  return iscrit_;
}
inline bool BlackHoleInfo::iscrit() const {
  // @@protoc_insertion_point(field_get:PlaneWar.BlackHoleInfo.isCrit)
  return _internal_iscrit();
}
inline void BlackHoleInfo::_internal_set_iscrit(bool value) {
  
  iscrit_ = value;
}
inline void BlackHoleInfo::set_iscrit(bool value) {
  _internal_set_iscrit(value);
  // @@protoc_insertion_point(field_set:PlaneWar.BlackHoleInfo.isCrit)
}

// repeated int32 monsterList = 6;
inline int BlackHoleInfo::_internal_monsterlist_size() const {
  return monsterlist_.size();
}
inline int BlackHoleInfo::monsterlist_size() const {
  return _internal_monsterlist_size();
}
inline void BlackHoleInfo::clear_monsterlist() {
  monsterlist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlackHoleInfo::_internal_monsterlist(int index) const {
  return monsterlist_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlackHoleInfo::monsterlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.BlackHoleInfo.monsterList)
  return _internal_monsterlist(index);
}
inline void BlackHoleInfo::set_monsterlist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  monsterlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlaneWar.BlackHoleInfo.monsterList)
}
inline void BlackHoleInfo::_internal_add_monsterlist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  monsterlist_.Add(value);
}
inline void BlackHoleInfo::add_monsterlist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_monsterlist(value);
  // @@protoc_insertion_point(field_add:PlaneWar.BlackHoleInfo.monsterList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BlackHoleInfo::_internal_monsterlist() const {
  return monsterlist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BlackHoleInfo::monsterlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.BlackHoleInfo.monsterList)
  return _internal_monsterlist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BlackHoleInfo::_internal_mutable_monsterlist() {
  return &monsterlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BlackHoleInfo::mutable_monsterlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.BlackHoleInfo.monsterList)
  return _internal_mutable_monsterlist();
}

// int32 originUID = 7;
inline void BlackHoleInfo::clear_originuid() {
  originuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlackHoleInfo::_internal_originuid() const {
  return originuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlackHoleInfo::originuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.BlackHoleInfo.originUID)
  return _internal_originuid();
}
inline void BlackHoleInfo::_internal_set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  originuid_ = value;
}
inline void BlackHoleInfo::set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_originuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.BlackHoleInfo.originUID)
}

// -------------------------------------------------------------------

// FormInfo

// int32 form = 1;
inline void FormInfo::clear_form() {
  form_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FormInfo::_internal_form() const {
  return form_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FormInfo::form() const {
  // @@protoc_insertion_point(field_get:PlaneWar.FormInfo.form)
  return _internal_form();
}
inline void FormInfo::_internal_set_form(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  form_ = value;
}
inline void FormInfo::set_form(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_form(value);
  // @@protoc_insertion_point(field_set:PlaneWar.FormInfo.form)
}

// .PlaneWar.Pos pos = 2;
inline bool FormInfo::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool FormInfo::has_pos() const {
  return _internal_has_pos();
}
inline void FormInfo::clear_pos() {
  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::PlaneWar::Pos& FormInfo::_internal_pos() const {
  const ::PlaneWar::Pos* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::Pos&>(
      ::PlaneWar::_Pos_default_instance_);
}
inline const ::PlaneWar::Pos& FormInfo::pos() const {
  // @@protoc_insertion_point(field_get:PlaneWar.FormInfo.pos)
  return _internal_pos();
}
inline void FormInfo::unsafe_arena_set_allocated_pos(
    ::PlaneWar::Pos* pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.FormInfo.pos)
}
inline ::PlaneWar::Pos* FormInfo::release_pos() {
  
  ::PlaneWar::Pos* temp = pos_;
  pos_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::Pos* FormInfo::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:PlaneWar.FormInfo.pos)
  
  ::PlaneWar::Pos* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::PlaneWar::Pos* FormInfo::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::Pos>(GetArena());
    pos_ = p;
  }
  return pos_;
}
inline ::PlaneWar::Pos* FormInfo::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.FormInfo.pos)
  return _internal_mutable_pos();
}
inline void FormInfo::set_allocated_pos(::PlaneWar::Pos* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.FormInfo.pos)
}

// -------------------------------------------------------------------

// LockInfo

// int32 lockUID = 1;
inline void LockInfo::clear_lockuid() {
  lockuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LockInfo::_internal_lockuid() const {
  return lockuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LockInfo::lockuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.LockInfo.lockUID)
  return _internal_lockuid();
}
inline void LockInfo::_internal_set_lockuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lockuid_ = value;
}
inline void LockInfo::set_lockuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lockuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.LockInfo.lockUID)
}

// int32 colliderIndex = 2;
inline void LockInfo::clear_colliderindex() {
  colliderindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LockInfo::_internal_colliderindex() const {
  return colliderindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LockInfo::colliderindex() const {
  // @@protoc_insertion_point(field_get:PlaneWar.LockInfo.colliderIndex)
  return _internal_colliderindex();
}
inline void LockInfo::_internal_set_colliderindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  colliderindex_ = value;
}
inline void LockInfo::set_colliderindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_colliderindex(value);
  // @@protoc_insertion_point(field_set:PlaneWar.LockInfo.colliderIndex)
}

// -------------------------------------------------------------------

// HitMode

// int32 hitType = 1;
inline void HitMode::clear_hittype() {
  hittype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HitMode::_internal_hittype() const {
  return hittype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HitMode::hittype() const {
  // @@protoc_insertion_point(field_get:PlaneWar.HitMode.hitType)
  return _internal_hittype();
}
inline void HitMode::_internal_set_hittype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hittype_ = value;
}
inline void HitMode::set_hittype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hittype(value);
  // @@protoc_insertion_point(field_set:PlaneWar.HitMode.hitType)
}

// int32 hitDirection = 2;
inline void HitMode::clear_hitdirection() {
  hitdirection_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HitMode::_internal_hitdirection() const {
  return hitdirection_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HitMode::hitdirection() const {
  // @@protoc_insertion_point(field_get:PlaneWar.HitMode.hitDirection)
  return _internal_hitdirection();
}
inline void HitMode::_internal_set_hitdirection(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hitdirection_ = value;
}
inline void HitMode::set_hitdirection(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hitdirection(value);
  // @@protoc_insertion_point(field_set:PlaneWar.HitMode.hitDirection)
}

// -------------------------------------------------------------------

// WeaponState

// int32 step = 1;
inline void WeaponState::clear_step() {
  step_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeaponState::_internal_step() const {
  return step_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeaponState::step() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WeaponState.step)
  return _internal_step();
}
inline void WeaponState::_internal_set_step(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  step_ = value;
}
inline void WeaponState::set_step(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:PlaneWar.WeaponState.step)
}

// .PlaneWar.Pos position = 2;
inline bool WeaponState::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool WeaponState::has_position() const {
  return _internal_has_position();
}
inline void WeaponState::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::PlaneWar::Pos& WeaponState::_internal_position() const {
  const ::PlaneWar::Pos* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::Pos&>(
      ::PlaneWar::_Pos_default_instance_);
}
inline const ::PlaneWar::Pos& WeaponState::position() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WeaponState.position)
  return _internal_position();
}
inline void WeaponState::unsafe_arena_set_allocated_position(
    ::PlaneWar::Pos* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.WeaponState.position)
}
inline ::PlaneWar::Pos* WeaponState::release_position() {
  
  ::PlaneWar::Pos* temp = position_;
  position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::Pos* WeaponState::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:PlaneWar.WeaponState.position)
  
  ::PlaneWar::Pos* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::PlaneWar::Pos* WeaponState::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::Pos>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::PlaneWar::Pos* WeaponState::mutable_position() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.WeaponState.position)
  return _internal_mutable_position();
}
inline void WeaponState::set_allocated_position(::PlaneWar::Pos* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.WeaponState.position)
}

// int32 duration = 3;
inline void WeaponState::clear_duration() {
  duration_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeaponState::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeaponState::duration() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WeaponState.duration)
  return _internal_duration();
}
inline void WeaponState::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  duration_ = value;
}
inline void WeaponState::set_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:PlaneWar.WeaponState.duration)
}

// int32 moveMode = 4;
inline void WeaponState::clear_movemode() {
  movemode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeaponState::_internal_movemode() const {
  return movemode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeaponState::movemode() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WeaponState.moveMode)
  return _internal_movemode();
}
inline void WeaponState::_internal_set_movemode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  movemode_ = value;
}
inline void WeaponState::set_movemode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_movemode(value);
  // @@protoc_insertion_point(field_set:PlaneWar.WeaponState.moveMode)
}

// -------------------------------------------------------------------

// SettleInfo

// int32 originUID = 1;
inline void SettleInfo::clear_originuid() {
  originuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SettleInfo::_internal_originuid() const {
  return originuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SettleInfo::originuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SettleInfo.originUID)
  return _internal_originuid();
}
inline void SettleInfo::_internal_set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  originuid_ = value;
}
inline void SettleInfo::set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_originuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SettleInfo.originUID)
}

// int32 bulletType = 2;
inline void SettleInfo::clear_bullettype() {
  bullettype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SettleInfo::_internal_bullettype() const {
  return bullettype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SettleInfo::bullettype() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SettleInfo.bulletType)
  return _internal_bullettype();
}
inline void SettleInfo::_internal_set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bullettype_ = value;
}
inline void SettleInfo::set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bullettype(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SettleInfo.bulletType)
}

// int32 reward = 3;
inline void SettleInfo::clear_reward() {
  reward_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SettleInfo::_internal_reward() const {
  return reward_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SettleInfo::reward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SettleInfo.reward)
  return _internal_reward();
}
inline void SettleInfo::_internal_set_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reward_ = value;
}
inline void SettleInfo::set_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SettleInfo.reward)
}

// int32 weaponID = 4;
inline void SettleInfo::clear_weaponid() {
  weaponid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SettleInfo::_internal_weaponid() const {
  return weaponid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SettleInfo::weaponid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SettleInfo.weaponID)
  return _internal_weaponid();
}
inline void SettleInfo::_internal_set_weaponid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  weaponid_ = value;
}
inline void SettleInfo::set_weaponid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_weaponid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SettleInfo.weaponID)
}

// -------------------------------------------------------------------

// GunInfo

// int32 sourceUID = 1;
inline void GunInfo::clear_sourceuid() {
  sourceuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunInfo::_internal_sourceuid() const {
  return sourceuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunInfo::sourceuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GunInfo.sourceUID)
  return _internal_sourceuid();
}
inline void GunInfo::_internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sourceuid_ = value;
}
inline void GunInfo::set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sourceuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GunInfo.sourceUID)
}

// int32 originUID = 2;
inline void GunInfo::clear_originuid() {
  originuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunInfo::_internal_originuid() const {
  return originuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunInfo::originuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GunInfo.originUID)
  return _internal_originuid();
}
inline void GunInfo::_internal_set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  originuid_ = value;
}
inline void GunInfo::set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_originuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GunInfo.originUID)
}

// int32 ratio = 3;
inline void GunInfo::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunInfo::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunInfo::ratio() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GunInfo.ratio)
  return _internal_ratio();
}
inline void GunInfo::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void GunInfo::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GunInfo.ratio)
}

// int32 num = 4;
inline void GunInfo::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunInfo::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunInfo::num() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GunInfo.num)
  return _internal_num();
}
inline void GunInfo::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void GunInfo::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GunInfo.num)
}

// -------------------------------------------------------------------

// FlameInfo

// int32 originUID = 1;
inline void FlameInfo::clear_originuid() {
  originuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlameInfo::_internal_originuid() const {
  return originuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlameInfo::originuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.FlameInfo.originUID)
  return _internal_originuid();
}
inline void FlameInfo::_internal_set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  originuid_ = value;
}
inline void FlameInfo::set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_originuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.FlameInfo.originUID)
}

// int32 ratio = 2;
inline void FlameInfo::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlameInfo::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlameInfo::ratio() const {
  // @@protoc_insertion_point(field_get:PlaneWar.FlameInfo.ratio)
  return _internal_ratio();
}
inline void FlameInfo::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void FlameInfo::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:PlaneWar.FlameInfo.ratio)
}

// repeated int32 sourceUIDList = 3;
inline int FlameInfo::_internal_sourceuidlist_size() const {
  return sourceuidlist_.size();
}
inline int FlameInfo::sourceuidlist_size() const {
  return _internal_sourceuidlist_size();
}
inline void FlameInfo::clear_sourceuidlist() {
  sourceuidlist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlameInfo::_internal_sourceuidlist(int index) const {
  return sourceuidlist_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlameInfo::sourceuidlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.FlameInfo.sourceUIDList)
  return _internal_sourceuidlist(index);
}
inline void FlameInfo::set_sourceuidlist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  sourceuidlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlaneWar.FlameInfo.sourceUIDList)
}
inline void FlameInfo::_internal_add_sourceuidlist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  sourceuidlist_.Add(value);
}
inline void FlameInfo::add_sourceuidlist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_sourceuidlist(value);
  // @@protoc_insertion_point(field_add:PlaneWar.FlameInfo.sourceUIDList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FlameInfo::_internal_sourceuidlist() const {
  return sourceuidlist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FlameInfo::sourceuidlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.FlameInfo.sourceUIDList)
  return _internal_sourceuidlist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FlameInfo::_internal_mutable_sourceuidlist() {
  return &sourceuidlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FlameInfo::mutable_sourceuidlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.FlameInfo.sourceUIDList)
  return _internal_mutable_sourceuidlist();
}

// -------------------------------------------------------------------

// BeeInfo

// repeated int32 ratioList = 1;
inline int BeeInfo::_internal_ratiolist_size() const {
  return ratiolist_.size();
}
inline int BeeInfo::ratiolist_size() const {
  return _internal_ratiolist_size();
}
inline void BeeInfo::clear_ratiolist() {
  ratiolist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BeeInfo::_internal_ratiolist(int index) const {
  return ratiolist_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BeeInfo::ratiolist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.BeeInfo.ratioList)
  return _internal_ratiolist(index);
}
inline void BeeInfo::set_ratiolist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  ratiolist_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlaneWar.BeeInfo.ratioList)
}
inline void BeeInfo::_internal_add_ratiolist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ratiolist_.Add(value);
}
inline void BeeInfo::add_ratiolist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_ratiolist(value);
  // @@protoc_insertion_point(field_add:PlaneWar.BeeInfo.ratioList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BeeInfo::_internal_ratiolist() const {
  return ratiolist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BeeInfo::ratiolist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.BeeInfo.ratioList)
  return _internal_ratiolist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BeeInfo::_internal_mutable_ratiolist() {
  return &ratiolist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BeeInfo::mutable_ratiolist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.BeeInfo.ratioList)
  return _internal_mutable_ratiolist();
}

// int32 totalRatio = 2;
inline void BeeInfo::clear_totalratio() {
  totalratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BeeInfo::_internal_totalratio() const {
  return totalratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BeeInfo::totalratio() const {
  // @@protoc_insertion_point(field_get:PlaneWar.BeeInfo.totalRatio)
  return _internal_totalratio();
}
inline void BeeInfo::_internal_set_totalratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  totalratio_ = value;
}
inline void BeeInfo::set_totalratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_totalratio(value);
  // @@protoc_insertion_point(field_set:PlaneWar.BeeInfo.totalRatio)
}

// -------------------------------------------------------------------

// WeaponInfo

// int32 weaponID = 1;
inline void WeaponInfo::clear_weaponid() {
  weaponid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeaponInfo::_internal_weaponid() const {
  return weaponid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeaponInfo::weaponid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WeaponInfo.weaponID)
  return _internal_weaponid();
}
inline void WeaponInfo::_internal_set_weaponid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  weaponid_ = value;
}
inline void WeaponInfo::set_weaponid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_weaponid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.WeaponInfo.weaponID)
}

// int32 sourceUID = 2;
inline void WeaponInfo::clear_sourceuid() {
  sourceuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeaponInfo::_internal_sourceuid() const {
  return sourceuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeaponInfo::sourceuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WeaponInfo.sourceUID)
  return _internal_sourceuid();
}
inline void WeaponInfo::_internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sourceuid_ = value;
}
inline void WeaponInfo::set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sourceuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.WeaponInfo.sourceUID)
}

// int32 originUID = 3;
inline void WeaponInfo::clear_originuid() {
  originuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeaponInfo::_internal_originuid() const {
  return originuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeaponInfo::originuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WeaponInfo.originUID)
  return _internal_originuid();
}
inline void WeaponInfo::_internal_set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  originuid_ = value;
}
inline void WeaponInfo::set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_originuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.WeaponInfo.originUID)
}

// int32 ratio = 4;
inline void WeaponInfo::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeaponInfo::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeaponInfo::ratio() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WeaponInfo.ratio)
  return _internal_ratio();
}
inline void WeaponInfo::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void WeaponInfo::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:PlaneWar.WeaponInfo.ratio)
}

// int32 num = 5;
inline void WeaponInfo::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeaponInfo::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeaponInfo::num() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WeaponInfo.num)
  return _internal_num();
}
inline void WeaponInfo::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void WeaponInfo::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:PlaneWar.WeaponInfo.num)
}

// string weaponName = 6;
inline void WeaponInfo::clear_weaponname() {
  weaponname_.ClearToEmpty();
}
inline const std::string& WeaponInfo::weaponname() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WeaponInfo.weaponName)
  return _internal_weaponname();
}
inline void WeaponInfo::set_weaponname(const std::string& value) {
  _internal_set_weaponname(value);
  // @@protoc_insertion_point(field_set:PlaneWar.WeaponInfo.weaponName)
}
inline std::string* WeaponInfo::mutable_weaponname() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.WeaponInfo.weaponName)
  return _internal_mutable_weaponname();
}
inline const std::string& WeaponInfo::_internal_weaponname() const {
  return weaponname_.Get();
}
inline void WeaponInfo::_internal_set_weaponname(const std::string& value) {
  
  weaponname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WeaponInfo::set_weaponname(std::string&& value) {
  
  weaponname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.WeaponInfo.weaponName)
}
inline void WeaponInfo::set_weaponname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  weaponname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.WeaponInfo.weaponName)
}
inline void WeaponInfo::set_weaponname(const char* value,
    size_t size) {
  
  weaponname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.WeaponInfo.weaponName)
}
inline std::string* WeaponInfo::_internal_mutable_weaponname() {
  
  return weaponname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WeaponInfo::release_weaponname() {
  // @@protoc_insertion_point(field_release:PlaneWar.WeaponInfo.weaponName)
  return weaponname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WeaponInfo::set_allocated_weaponname(std::string* weaponname) {
  if (weaponname != nullptr) {
    
  } else {
    
  }
  weaponname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), weaponname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.WeaponInfo.weaponName)
}

// int32 weaponRatio = 7;
inline void WeaponInfo::clear_weaponratio() {
  weaponratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeaponInfo::_internal_weaponratio() const {
  return weaponratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeaponInfo::weaponratio() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WeaponInfo.weaponRatio)
  return _internal_weaponratio();
}
inline void WeaponInfo::_internal_set_weaponratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  weaponratio_ = value;
}
inline void WeaponInfo::set_weaponratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_weaponratio(value);
  // @@protoc_insertion_point(field_set:PlaneWar.WeaponInfo.weaponRatio)
}

// .PlaneWar.WeaponState weaponState = 8;
inline bool WeaponInfo::_internal_has_weaponstate() const {
  return this != internal_default_instance() && weaponstate_ != nullptr;
}
inline bool WeaponInfo::has_weaponstate() const {
  return _internal_has_weaponstate();
}
inline void WeaponInfo::clear_weaponstate() {
  if (GetArena() == nullptr && weaponstate_ != nullptr) {
    delete weaponstate_;
  }
  weaponstate_ = nullptr;
}
inline const ::PlaneWar::WeaponState& WeaponInfo::_internal_weaponstate() const {
  const ::PlaneWar::WeaponState* p = weaponstate_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::WeaponState&>(
      ::PlaneWar::_WeaponState_default_instance_);
}
inline const ::PlaneWar::WeaponState& WeaponInfo::weaponstate() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WeaponInfo.weaponState)
  return _internal_weaponstate();
}
inline void WeaponInfo::unsafe_arena_set_allocated_weaponstate(
    ::PlaneWar::WeaponState* weaponstate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(weaponstate_);
  }
  weaponstate_ = weaponstate;
  if (weaponstate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.WeaponInfo.weaponState)
}
inline ::PlaneWar::WeaponState* WeaponInfo::release_weaponstate() {
  
  ::PlaneWar::WeaponState* temp = weaponstate_;
  weaponstate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::WeaponState* WeaponInfo::unsafe_arena_release_weaponstate() {
  // @@protoc_insertion_point(field_release:PlaneWar.WeaponInfo.weaponState)
  
  ::PlaneWar::WeaponState* temp = weaponstate_;
  weaponstate_ = nullptr;
  return temp;
}
inline ::PlaneWar::WeaponState* WeaponInfo::_internal_mutable_weaponstate() {
  
  if (weaponstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::WeaponState>(GetArena());
    weaponstate_ = p;
  }
  return weaponstate_;
}
inline ::PlaneWar::WeaponState* WeaponInfo::mutable_weaponstate() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.WeaponInfo.weaponState)
  return _internal_mutable_weaponstate();
}
inline void WeaponInfo::set_allocated_weaponstate(::PlaneWar::WeaponState* weaponstate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete weaponstate_;
  }
  if (weaponstate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(weaponstate);
    if (message_arena != submessage_arena) {
      weaponstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weaponstate, submessage_arena);
    }
    
  } else {
    
  }
  weaponstate_ = weaponstate;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.WeaponInfo.weaponState)
}

// -------------------------------------------------------------------

// SpecEffect

// int32 costMoney = 1;
inline void SpecEffect::clear_costmoney() {
  costmoney_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpecEffect::_internal_costmoney() const {
  return costmoney_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpecEffect::costmoney() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SpecEffect.costMoney)
  return _internal_costmoney();
}
inline void SpecEffect::_internal_set_costmoney(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  costmoney_ = value;
}
inline void SpecEffect::set_costmoney(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_costmoney(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SpecEffect.costMoney)
}

// int32 earnMoney = 2;
inline void SpecEffect::clear_earnmoney() {
  earnmoney_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpecEffect::_internal_earnmoney() const {
  return earnmoney_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpecEffect::earnmoney() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SpecEffect.earnMoney)
  return _internal_earnmoney();
}
inline void SpecEffect::_internal_set_earnmoney(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  earnmoney_ = value;
}
inline void SpecEffect::set_earnmoney(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_earnmoney(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SpecEffect.earnMoney)
}

// float violence = 3;
inline void SpecEffect::clear_violence() {
  violence_ = 0;
}
inline float SpecEffect::_internal_violence() const {
  return violence_;
}
inline float SpecEffect::violence() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SpecEffect.violence)
  return _internal_violence();
}
inline void SpecEffect::_internal_set_violence(float value) {
  
  violence_ = value;
}
inline void SpecEffect::set_violence(float value) {
  _internal_set_violence(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SpecEffect.violence)
}

// int32 duration = 4;
inline void SpecEffect::clear_duration() {
  duration_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpecEffect::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpecEffect::duration() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SpecEffect.duration)
  return _internal_duration();
}
inline void SpecEffect::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  duration_ = value;
}
inline void SpecEffect::set_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SpecEffect.duration)
}

// int32 maxDuration = 5;
inline void SpecEffect::clear_maxduration() {
  maxduration_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpecEffect::_internal_maxduration() const {
  return maxduration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpecEffect::maxduration() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SpecEffect.maxDuration)
  return _internal_maxduration();
}
inline void SpecEffect::_internal_set_maxduration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxduration_ = value;
}
inline void SpecEffect::set_maxduration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxduration(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SpecEffect.maxDuration)
}

// int32 sourceType = 6;
inline void SpecEffect::clear_sourcetype() {
  sourcetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpecEffect::_internal_sourcetype() const {
  return sourcetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpecEffect::sourcetype() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SpecEffect.sourceType)
  return _internal_sourcetype();
}
inline void SpecEffect::_internal_set_sourcetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sourcetype_ = value;
}
inline void SpecEffect::set_sourcetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sourcetype(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SpecEffect.sourceType)
}

// -------------------------------------------------------------------

// Dice

// int32 ratio = 1;
inline void Dice::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dice::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dice::ratio() const {
  // @@protoc_insertion_point(field_get:PlaneWar.Dice.ratio)
  return _internal_ratio();
}
inline void Dice::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void Dice::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:PlaneWar.Dice.ratio)
}

// int32 tp = 2;
inline void Dice::clear_tp() {
  tp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dice::_internal_tp() const {
  return tp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dice::tp() const {
  // @@protoc_insertion_point(field_get:PlaneWar.Dice.tp)
  return _internal_tp();
}
inline void Dice::_internal_set_tp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tp_ = value;
}
inline void Dice::set_tp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tp(value);
  // @@protoc_insertion_point(field_set:PlaneWar.Dice.tp)
}

// .PlaneWar.Pos pos = 3;
inline bool Dice::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool Dice::has_pos() const {
  return _internal_has_pos();
}
inline void Dice::clear_pos() {
  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::PlaneWar::Pos& Dice::_internal_pos() const {
  const ::PlaneWar::Pos* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::Pos&>(
      ::PlaneWar::_Pos_default_instance_);
}
inline const ::PlaneWar::Pos& Dice::pos() const {
  // @@protoc_insertion_point(field_get:PlaneWar.Dice.pos)
  return _internal_pos();
}
inline void Dice::unsafe_arena_set_allocated_pos(
    ::PlaneWar::Pos* pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.Dice.pos)
}
inline ::PlaneWar::Pos* Dice::release_pos() {
  
  ::PlaneWar::Pos* temp = pos_;
  pos_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::Pos* Dice::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:PlaneWar.Dice.pos)
  
  ::PlaneWar::Pos* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::PlaneWar::Pos* Dice::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::Pos>(GetArena());
    pos_ = p;
  }
  return pos_;
}
inline ::PlaneWar::Pos* Dice::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.Dice.pos)
  return _internal_mutable_pos();
}
inline void Dice::set_allocated_pos(::PlaneWar::Pos* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.Dice.pos)
}

// -------------------------------------------------------------------

// DiceInfo

// int32 mode = 1;
inline void DiceInfo::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DiceInfo::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DiceInfo::mode() const {
  // @@protoc_insertion_point(field_get:PlaneWar.DiceInfo.mode)
  return _internal_mode();
}
inline void DiceInfo::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
}
inline void DiceInfo::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:PlaneWar.DiceInfo.mode)
}

// int32 mul = 2;
inline void DiceInfo::clear_mul() {
  mul_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DiceInfo::_internal_mul() const {
  return mul_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DiceInfo::mul() const {
  // @@protoc_insertion_point(field_get:PlaneWar.DiceInfo.mul)
  return _internal_mul();
}
inline void DiceInfo::_internal_set_mul(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mul_ = value;
}
inline void DiceInfo::set_mul(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mul(value);
  // @@protoc_insertion_point(field_set:PlaneWar.DiceInfo.mul)
}

// repeated .PlaneWar.Dice diceList = 3;
inline int DiceInfo::_internal_dicelist_size() const {
  return dicelist_.size();
}
inline int DiceInfo::dicelist_size() const {
  return _internal_dicelist_size();
}
inline void DiceInfo::clear_dicelist() {
  dicelist_.Clear();
}
inline ::PlaneWar::Dice* DiceInfo::mutable_dicelist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.DiceInfo.diceList)
  return dicelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::Dice >*
DiceInfo::mutable_dicelist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.DiceInfo.diceList)
  return &dicelist_;
}
inline const ::PlaneWar::Dice& DiceInfo::_internal_dicelist(int index) const {
  return dicelist_.Get(index);
}
inline const ::PlaneWar::Dice& DiceInfo::dicelist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.DiceInfo.diceList)
  return _internal_dicelist(index);
}
inline ::PlaneWar::Dice* DiceInfo::_internal_add_dicelist() {
  return dicelist_.Add();
}
inline ::PlaneWar::Dice* DiceInfo::add_dicelist() {
  // @@protoc_insertion_point(field_add:PlaneWar.DiceInfo.diceList)
  return _internal_add_dicelist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::Dice >&
DiceInfo::dicelist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.DiceInfo.diceList)
  return dicelist_;
}

// -------------------------------------------------------------------

// StateInfo

// bool isBack = 1;
inline void StateInfo::clear_isback() {
  isback_ = false;
}
inline bool StateInfo::_internal_isback() const {
  return isback_;
}
inline bool StateInfo::isback() const {
  // @@protoc_insertion_point(field_get:PlaneWar.StateInfo.isBack)
  return _internal_isback();
}
inline void StateInfo::_internal_set_isback(bool value) {
  
  isback_ = value;
}
inline void StateInfo::set_isback(bool value) {
  _internal_set_isback(value);
  // @@protoc_insertion_point(field_set:PlaneWar.StateInfo.isBack)
}

// repeated .PlaneWar.BuffInfo buffList = 2;
inline int StateInfo::_internal_bufflist_size() const {
  return bufflist_.size();
}
inline int StateInfo::bufflist_size() const {
  return _internal_bufflist_size();
}
inline void StateInfo::clear_bufflist() {
  bufflist_.Clear();
}
inline ::PlaneWar::BuffInfo* StateInfo::mutable_bufflist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.StateInfo.buffList)
  return bufflist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::BuffInfo >*
StateInfo::mutable_bufflist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.StateInfo.buffList)
  return &bufflist_;
}
inline const ::PlaneWar::BuffInfo& StateInfo::_internal_bufflist(int index) const {
  return bufflist_.Get(index);
}
inline const ::PlaneWar::BuffInfo& StateInfo::bufflist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.StateInfo.buffList)
  return _internal_bufflist(index);
}
inline ::PlaneWar::BuffInfo* StateInfo::_internal_add_bufflist() {
  return bufflist_.Add();
}
inline ::PlaneWar::BuffInfo* StateInfo::add_bufflist() {
  // @@protoc_insertion_point(field_add:PlaneWar.StateInfo.buffList)
  return _internal_add_bufflist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::BuffInfo >&
StateInfo::bufflist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.StateInfo.buffList)
  return bufflist_;
}

// repeated .PlaneWar.BlackHoleInfo blackHoleList = 3;
inline int StateInfo::_internal_blackholelist_size() const {
  return blackholelist_.size();
}
inline int StateInfo::blackholelist_size() const {
  return _internal_blackholelist_size();
}
inline void StateInfo::clear_blackholelist() {
  blackholelist_.Clear();
}
inline ::PlaneWar::BlackHoleInfo* StateInfo::mutable_blackholelist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.StateInfo.blackHoleList)
  return blackholelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::BlackHoleInfo >*
StateInfo::mutable_blackholelist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.StateInfo.blackHoleList)
  return &blackholelist_;
}
inline const ::PlaneWar::BlackHoleInfo& StateInfo::_internal_blackholelist(int index) const {
  return blackholelist_.Get(index);
}
inline const ::PlaneWar::BlackHoleInfo& StateInfo::blackholelist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.StateInfo.blackHoleList)
  return _internal_blackholelist(index);
}
inline ::PlaneWar::BlackHoleInfo* StateInfo::_internal_add_blackholelist() {
  return blackholelist_.Add();
}
inline ::PlaneWar::BlackHoleInfo* StateInfo::add_blackholelist() {
  // @@protoc_insertion_point(field_add:PlaneWar.StateInfo.blackHoleList)
  return _internal_add_blackholelist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::BlackHoleInfo >&
StateInfo::blackholelist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.StateInfo.blackHoleList)
  return blackholelist_;
}

// .PlaneWar.FormInfo formInfo = 4;
inline bool StateInfo::_internal_has_forminfo() const {
  return this != internal_default_instance() && forminfo_ != nullptr;
}
inline bool StateInfo::has_forminfo() const {
  return _internal_has_forminfo();
}
inline void StateInfo::clear_forminfo() {
  if (GetArena() == nullptr && forminfo_ != nullptr) {
    delete forminfo_;
  }
  forminfo_ = nullptr;
}
inline const ::PlaneWar::FormInfo& StateInfo::_internal_forminfo() const {
  const ::PlaneWar::FormInfo* p = forminfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::FormInfo&>(
      ::PlaneWar::_FormInfo_default_instance_);
}
inline const ::PlaneWar::FormInfo& StateInfo::forminfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.StateInfo.formInfo)
  return _internal_forminfo();
}
inline void StateInfo::unsafe_arena_set_allocated_forminfo(
    ::PlaneWar::FormInfo* forminfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(forminfo_);
  }
  forminfo_ = forminfo;
  if (forminfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.StateInfo.formInfo)
}
inline ::PlaneWar::FormInfo* StateInfo::release_forminfo() {
  
  ::PlaneWar::FormInfo* temp = forminfo_;
  forminfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::FormInfo* StateInfo::unsafe_arena_release_forminfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.StateInfo.formInfo)
  
  ::PlaneWar::FormInfo* temp = forminfo_;
  forminfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::FormInfo* StateInfo::_internal_mutable_forminfo() {
  
  if (forminfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::FormInfo>(GetArena());
    forminfo_ = p;
  }
  return forminfo_;
}
inline ::PlaneWar::FormInfo* StateInfo::mutable_forminfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.StateInfo.formInfo)
  return _internal_mutable_forminfo();
}
inline void StateInfo::set_allocated_forminfo(::PlaneWar::FormInfo* forminfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete forminfo_;
  }
  if (forminfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(forminfo);
    if (message_arena != submessage_arena) {
      forminfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forminfo, submessage_arena);
    }
    
  } else {
    
  }
  forminfo_ = forminfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.StateInfo.formInfo)
}

// .PlaneWar.LockInfo lockInfo = 5;
inline bool StateInfo::_internal_has_lockinfo() const {
  return this != internal_default_instance() && lockinfo_ != nullptr;
}
inline bool StateInfo::has_lockinfo() const {
  return _internal_has_lockinfo();
}
inline void StateInfo::clear_lockinfo() {
  if (GetArena() == nullptr && lockinfo_ != nullptr) {
    delete lockinfo_;
  }
  lockinfo_ = nullptr;
}
inline const ::PlaneWar::LockInfo& StateInfo::_internal_lockinfo() const {
  const ::PlaneWar::LockInfo* p = lockinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::LockInfo&>(
      ::PlaneWar::_LockInfo_default_instance_);
}
inline const ::PlaneWar::LockInfo& StateInfo::lockinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.StateInfo.lockInfo)
  return _internal_lockinfo();
}
inline void StateInfo::unsafe_arena_set_allocated_lockinfo(
    ::PlaneWar::LockInfo* lockinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lockinfo_);
  }
  lockinfo_ = lockinfo;
  if (lockinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.StateInfo.lockInfo)
}
inline ::PlaneWar::LockInfo* StateInfo::release_lockinfo() {
  
  ::PlaneWar::LockInfo* temp = lockinfo_;
  lockinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::LockInfo* StateInfo::unsafe_arena_release_lockinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.StateInfo.lockInfo)
  
  ::PlaneWar::LockInfo* temp = lockinfo_;
  lockinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::LockInfo* StateInfo::_internal_mutable_lockinfo() {
  
  if (lockinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::LockInfo>(GetArena());
    lockinfo_ = p;
  }
  return lockinfo_;
}
inline ::PlaneWar::LockInfo* StateInfo::mutable_lockinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.StateInfo.lockInfo)
  return _internal_mutable_lockinfo();
}
inline void StateInfo::set_allocated_lockinfo(::PlaneWar::LockInfo* lockinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lockinfo_;
  }
  if (lockinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lockinfo);
    if (message_arena != submessage_arena) {
      lockinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lockinfo, submessage_arena);
    }
    
  } else {
    
  }
  lockinfo_ = lockinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.StateInfo.lockInfo)
}

// .PlaneWar.WeaponInfo weaponInfo = 6;
inline bool StateInfo::_internal_has_weaponinfo() const {
  return this != internal_default_instance() && weaponinfo_ != nullptr;
}
inline bool StateInfo::has_weaponinfo() const {
  return _internal_has_weaponinfo();
}
inline void StateInfo::clear_weaponinfo() {
  if (GetArena() == nullptr && weaponinfo_ != nullptr) {
    delete weaponinfo_;
  }
  weaponinfo_ = nullptr;
}
inline const ::PlaneWar::WeaponInfo& StateInfo::_internal_weaponinfo() const {
  const ::PlaneWar::WeaponInfo* p = weaponinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::WeaponInfo&>(
      ::PlaneWar::_WeaponInfo_default_instance_);
}
inline const ::PlaneWar::WeaponInfo& StateInfo::weaponinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.StateInfo.weaponInfo)
  return _internal_weaponinfo();
}
inline void StateInfo::unsafe_arena_set_allocated_weaponinfo(
    ::PlaneWar::WeaponInfo* weaponinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(weaponinfo_);
  }
  weaponinfo_ = weaponinfo;
  if (weaponinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.StateInfo.weaponInfo)
}
inline ::PlaneWar::WeaponInfo* StateInfo::release_weaponinfo() {
  
  ::PlaneWar::WeaponInfo* temp = weaponinfo_;
  weaponinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::WeaponInfo* StateInfo::unsafe_arena_release_weaponinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.StateInfo.weaponInfo)
  
  ::PlaneWar::WeaponInfo* temp = weaponinfo_;
  weaponinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::WeaponInfo* StateInfo::_internal_mutable_weaponinfo() {
  
  if (weaponinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::WeaponInfo>(GetArena());
    weaponinfo_ = p;
  }
  return weaponinfo_;
}
inline ::PlaneWar::WeaponInfo* StateInfo::mutable_weaponinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.StateInfo.weaponInfo)
  return _internal_mutable_weaponinfo();
}
inline void StateInfo::set_allocated_weaponinfo(::PlaneWar::WeaponInfo* weaponinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete weaponinfo_;
  }
  if (weaponinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(weaponinfo);
    if (message_arena != submessage_arena) {
      weaponinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weaponinfo, submessage_arena);
    }
    
  } else {
    
  }
  weaponinfo_ = weaponinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.StateInfo.weaponInfo)
}

// .PlaneWar.WeaponInfo propWeaponInfo = 7;
inline bool StateInfo::_internal_has_propweaponinfo() const {
  return this != internal_default_instance() && propweaponinfo_ != nullptr;
}
inline bool StateInfo::has_propweaponinfo() const {
  return _internal_has_propweaponinfo();
}
inline void StateInfo::clear_propweaponinfo() {
  if (GetArena() == nullptr && propweaponinfo_ != nullptr) {
    delete propweaponinfo_;
  }
  propweaponinfo_ = nullptr;
}
inline const ::PlaneWar::WeaponInfo& StateInfo::_internal_propweaponinfo() const {
  const ::PlaneWar::WeaponInfo* p = propweaponinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::WeaponInfo&>(
      ::PlaneWar::_WeaponInfo_default_instance_);
}
inline const ::PlaneWar::WeaponInfo& StateInfo::propweaponinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.StateInfo.propWeaponInfo)
  return _internal_propweaponinfo();
}
inline void StateInfo::unsafe_arena_set_allocated_propweaponinfo(
    ::PlaneWar::WeaponInfo* propweaponinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(propweaponinfo_);
  }
  propweaponinfo_ = propweaponinfo;
  if (propweaponinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.StateInfo.propWeaponInfo)
}
inline ::PlaneWar::WeaponInfo* StateInfo::release_propweaponinfo() {
  
  ::PlaneWar::WeaponInfo* temp = propweaponinfo_;
  propweaponinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::WeaponInfo* StateInfo::unsafe_arena_release_propweaponinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.StateInfo.propWeaponInfo)
  
  ::PlaneWar::WeaponInfo* temp = propweaponinfo_;
  propweaponinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::WeaponInfo* StateInfo::_internal_mutable_propweaponinfo() {
  
  if (propweaponinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::WeaponInfo>(GetArena());
    propweaponinfo_ = p;
  }
  return propweaponinfo_;
}
inline ::PlaneWar::WeaponInfo* StateInfo::mutable_propweaponinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.StateInfo.propWeaponInfo)
  return _internal_mutable_propweaponinfo();
}
inline void StateInfo::set_allocated_propweaponinfo(::PlaneWar::WeaponInfo* propweaponinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete propweaponinfo_;
  }
  if (propweaponinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(propweaponinfo);
    if (message_arena != submessage_arena) {
      propweaponinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, propweaponinfo, submessage_arena);
    }
    
  } else {
    
  }
  propweaponinfo_ = propweaponinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.StateInfo.propWeaponInfo)
}

// repeated .PlaneWar.SettleInfo settleList = 8;
inline int StateInfo::_internal_settlelist_size() const {
  return settlelist_.size();
}
inline int StateInfo::settlelist_size() const {
  return _internal_settlelist_size();
}
inline void StateInfo::clear_settlelist() {
  settlelist_.Clear();
}
inline ::PlaneWar::SettleInfo* StateInfo::mutable_settlelist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.StateInfo.settleList)
  return settlelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::SettleInfo >*
StateInfo::mutable_settlelist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.StateInfo.settleList)
  return &settlelist_;
}
inline const ::PlaneWar::SettleInfo& StateInfo::_internal_settlelist(int index) const {
  return settlelist_.Get(index);
}
inline const ::PlaneWar::SettleInfo& StateInfo::settlelist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.StateInfo.settleList)
  return _internal_settlelist(index);
}
inline ::PlaneWar::SettleInfo* StateInfo::_internal_add_settlelist() {
  return settlelist_.Add();
}
inline ::PlaneWar::SettleInfo* StateInfo::add_settlelist() {
  // @@protoc_insertion_point(field_add:PlaneWar.StateInfo.settleList)
  return _internal_add_settlelist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::SettleInfo >&
StateInfo::settlelist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.StateInfo.settleList)
  return settlelist_;
}

// .PlaneWar.GunInfo gunInfo = 9;
inline bool StateInfo::_internal_has_guninfo() const {
  return this != internal_default_instance() && guninfo_ != nullptr;
}
inline bool StateInfo::has_guninfo() const {
  return _internal_has_guninfo();
}
inline void StateInfo::clear_guninfo() {
  if (GetArena() == nullptr && guninfo_ != nullptr) {
    delete guninfo_;
  }
  guninfo_ = nullptr;
}
inline const ::PlaneWar::GunInfo& StateInfo::_internal_guninfo() const {
  const ::PlaneWar::GunInfo* p = guninfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::GunInfo&>(
      ::PlaneWar::_GunInfo_default_instance_);
}
inline const ::PlaneWar::GunInfo& StateInfo::guninfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.StateInfo.gunInfo)
  return _internal_guninfo();
}
inline void StateInfo::unsafe_arena_set_allocated_guninfo(
    ::PlaneWar::GunInfo* guninfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guninfo_);
  }
  guninfo_ = guninfo;
  if (guninfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.StateInfo.gunInfo)
}
inline ::PlaneWar::GunInfo* StateInfo::release_guninfo() {
  
  ::PlaneWar::GunInfo* temp = guninfo_;
  guninfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::GunInfo* StateInfo::unsafe_arena_release_guninfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.StateInfo.gunInfo)
  
  ::PlaneWar::GunInfo* temp = guninfo_;
  guninfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::GunInfo* StateInfo::_internal_mutable_guninfo() {
  
  if (guninfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::GunInfo>(GetArena());
    guninfo_ = p;
  }
  return guninfo_;
}
inline ::PlaneWar::GunInfo* StateInfo::mutable_guninfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.StateInfo.gunInfo)
  return _internal_mutable_guninfo();
}
inline void StateInfo::set_allocated_guninfo(::PlaneWar::GunInfo* guninfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete guninfo_;
  }
  if (guninfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(guninfo);
    if (message_arena != submessage_arena) {
      guninfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guninfo, submessage_arena);
    }
    
  } else {
    
  }
  guninfo_ = guninfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.StateInfo.gunInfo)
}

// .PlaneWar.FlameInfo flameInfo = 10;
inline bool StateInfo::_internal_has_flameinfo() const {
  return this != internal_default_instance() && flameinfo_ != nullptr;
}
inline bool StateInfo::has_flameinfo() const {
  return _internal_has_flameinfo();
}
inline void StateInfo::clear_flameinfo() {
  if (GetArena() == nullptr && flameinfo_ != nullptr) {
    delete flameinfo_;
  }
  flameinfo_ = nullptr;
}
inline const ::PlaneWar::FlameInfo& StateInfo::_internal_flameinfo() const {
  const ::PlaneWar::FlameInfo* p = flameinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::FlameInfo&>(
      ::PlaneWar::_FlameInfo_default_instance_);
}
inline const ::PlaneWar::FlameInfo& StateInfo::flameinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.StateInfo.flameInfo)
  return _internal_flameinfo();
}
inline void StateInfo::unsafe_arena_set_allocated_flameinfo(
    ::PlaneWar::FlameInfo* flameinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flameinfo_);
  }
  flameinfo_ = flameinfo;
  if (flameinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.StateInfo.flameInfo)
}
inline ::PlaneWar::FlameInfo* StateInfo::release_flameinfo() {
  
  ::PlaneWar::FlameInfo* temp = flameinfo_;
  flameinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::FlameInfo* StateInfo::unsafe_arena_release_flameinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.StateInfo.flameInfo)
  
  ::PlaneWar::FlameInfo* temp = flameinfo_;
  flameinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::FlameInfo* StateInfo::_internal_mutable_flameinfo() {
  
  if (flameinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::FlameInfo>(GetArena());
    flameinfo_ = p;
  }
  return flameinfo_;
}
inline ::PlaneWar::FlameInfo* StateInfo::mutable_flameinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.StateInfo.flameInfo)
  return _internal_mutable_flameinfo();
}
inline void StateInfo::set_allocated_flameinfo(::PlaneWar::FlameInfo* flameinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete flameinfo_;
  }
  if (flameinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(flameinfo);
    if (message_arena != submessage_arena) {
      flameinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flameinfo, submessage_arena);
    }
    
  } else {
    
  }
  flameinfo_ = flameinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.StateInfo.flameInfo)
}

// .PlaneWar.SpecEffect specEffect = 11;
inline bool StateInfo::_internal_has_speceffect() const {
  return this != internal_default_instance() && speceffect_ != nullptr;
}
inline bool StateInfo::has_speceffect() const {
  return _internal_has_speceffect();
}
inline void StateInfo::clear_speceffect() {
  if (GetArena() == nullptr && speceffect_ != nullptr) {
    delete speceffect_;
  }
  speceffect_ = nullptr;
}
inline const ::PlaneWar::SpecEffect& StateInfo::_internal_speceffect() const {
  const ::PlaneWar::SpecEffect* p = speceffect_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::SpecEffect&>(
      ::PlaneWar::_SpecEffect_default_instance_);
}
inline const ::PlaneWar::SpecEffect& StateInfo::speceffect() const {
  // @@protoc_insertion_point(field_get:PlaneWar.StateInfo.specEffect)
  return _internal_speceffect();
}
inline void StateInfo::unsafe_arena_set_allocated_speceffect(
    ::PlaneWar::SpecEffect* speceffect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speceffect_);
  }
  speceffect_ = speceffect;
  if (speceffect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.StateInfo.specEffect)
}
inline ::PlaneWar::SpecEffect* StateInfo::release_speceffect() {
  
  ::PlaneWar::SpecEffect* temp = speceffect_;
  speceffect_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::SpecEffect* StateInfo::unsafe_arena_release_speceffect() {
  // @@protoc_insertion_point(field_release:PlaneWar.StateInfo.specEffect)
  
  ::PlaneWar::SpecEffect* temp = speceffect_;
  speceffect_ = nullptr;
  return temp;
}
inline ::PlaneWar::SpecEffect* StateInfo::_internal_mutable_speceffect() {
  
  if (speceffect_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::SpecEffect>(GetArena());
    speceffect_ = p;
  }
  return speceffect_;
}
inline ::PlaneWar::SpecEffect* StateInfo::mutable_speceffect() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.StateInfo.specEffect)
  return _internal_mutable_speceffect();
}
inline void StateInfo::set_allocated_speceffect(::PlaneWar::SpecEffect* speceffect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete speceffect_;
  }
  if (speceffect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(speceffect);
    if (message_arena != submessage_arena) {
      speceffect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speceffect, submessage_arena);
    }
    
  } else {
    
  }
  speceffect_ = speceffect;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.StateInfo.specEffect)
}

// bool extra_mul = 12;
inline void StateInfo::clear_extra_mul() {
  extra_mul_ = false;
}
inline bool StateInfo::_internal_extra_mul() const {
  return extra_mul_;
}
inline bool StateInfo::extra_mul() const {
  // @@protoc_insertion_point(field_get:PlaneWar.StateInfo.extra_mul)
  return _internal_extra_mul();
}
inline void StateInfo::_internal_set_extra_mul(bool value) {
  
  extra_mul_ = value;
}
inline void StateInfo::set_extra_mul(bool value) {
  _internal_set_extra_mul(value);
  // @@protoc_insertion_point(field_set:PlaneWar.StateInfo.extra_mul)
}

// -------------------------------------------------------------------

// MissileInfo

// int32 id = 1;
inline void MissileInfo::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissileInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissileInfo::id() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MissileInfo.id)
  return _internal_id();
}
inline void MissileInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void MissileInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MissileInfo.id)
}

// int32 num = 2;
inline void MissileInfo::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissileInfo::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissileInfo::num() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MissileInfo.num)
  return _internal_num();
}
inline void MissileInfo::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void MissileInfo::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MissileInfo.num)
}

// -------------------------------------------------------------------

// PiggyInfo

// int32 status = 1;
inline void PiggyInfo::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiggyInfo::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiggyInfo::status() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PiggyInfo.status)
  return _internal_status();
}
inline void PiggyInfo::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void PiggyInfo::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PiggyInfo.status)
}

// int32 rewardValue = 2;
inline void PiggyInfo::clear_rewardvalue() {
  rewardvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiggyInfo::_internal_rewardvalue() const {
  return rewardvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiggyInfo::rewardvalue() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PiggyInfo.rewardValue)
  return _internal_rewardvalue();
}
inline void PiggyInfo::_internal_set_rewardvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rewardvalue_ = value;
}
inline void PiggyInfo::set_rewardvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rewardvalue(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PiggyInfo.rewardValue)
}

// int32 accumulatingValue = 3;
inline void PiggyInfo::clear_accumulatingvalue() {
  accumulatingvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiggyInfo::_internal_accumulatingvalue() const {
  return accumulatingvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiggyInfo::accumulatingvalue() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PiggyInfo.accumulatingValue)
  return _internal_accumulatingvalue();
}
inline void PiggyInfo::_internal_set_accumulatingvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  accumulatingvalue_ = value;
}
inline void PiggyInfo::set_accumulatingvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_accumulatingvalue(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PiggyInfo.accumulatingValue)
}

// string settleTime = 4;
inline void PiggyInfo::clear_settletime() {
  settletime_.ClearToEmpty();
}
inline const std::string& PiggyInfo::settletime() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PiggyInfo.settleTime)
  return _internal_settletime();
}
inline void PiggyInfo::set_settletime(const std::string& value) {
  _internal_set_settletime(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PiggyInfo.settleTime)
}
inline std::string* PiggyInfo::mutable_settletime() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.PiggyInfo.settleTime)
  return _internal_mutable_settletime();
}
inline const std::string& PiggyInfo::_internal_settletime() const {
  return settletime_.Get();
}
inline void PiggyInfo::_internal_set_settletime(const std::string& value) {
  
  settletime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PiggyInfo::set_settletime(std::string&& value) {
  
  settletime_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.PiggyInfo.settleTime)
}
inline void PiggyInfo::set_settletime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  settletime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.PiggyInfo.settleTime)
}
inline void PiggyInfo::set_settletime(const char* value,
    size_t size) {
  
  settletime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.PiggyInfo.settleTime)
}
inline std::string* PiggyInfo::_internal_mutable_settletime() {
  
  return settletime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PiggyInfo::release_settletime() {
  // @@protoc_insertion_point(field_release:PlaneWar.PiggyInfo.settleTime)
  return settletime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PiggyInfo::set_allocated_settletime(std::string* settletime) {
  if (settletime != nullptr) {
    
  } else {
    
  }
  settletime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), settletime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.PiggyInfo.settleTime)
}

// int32 settleThreshold = 5;
inline void PiggyInfo::clear_settlethreshold() {
  settlethreshold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiggyInfo::_internal_settlethreshold() const {
  return settlethreshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiggyInfo::settlethreshold() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PiggyInfo.settleThreshold)
  return _internal_settlethreshold();
}
inline void PiggyInfo::_internal_set_settlethreshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  settlethreshold_ = value;
}
inline void PiggyInfo::set_settlethreshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_settlethreshold(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PiggyInfo.settleThreshold)
}

// int32 maxReward = 6;
inline void PiggyInfo::clear_maxreward() {
  maxreward_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiggyInfo::_internal_maxreward() const {
  return maxreward_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiggyInfo::maxreward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PiggyInfo.maxReward)
  return _internal_maxreward();
}
inline void PiggyInfo::_internal_set_maxreward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxreward_ = value;
}
inline void PiggyInfo::set_maxreward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxreward(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PiggyInfo.maxReward)
}

// int32 nextMaxReward = 7;
inline void PiggyInfo::clear_nextmaxreward() {
  nextmaxreward_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiggyInfo::_internal_nextmaxreward() const {
  return nextmaxreward_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiggyInfo::nextmaxreward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PiggyInfo.nextMaxReward)
  return _internal_nextmaxreward();
}
inline void PiggyInfo::_internal_set_nextmaxreward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nextmaxreward_ = value;
}
inline void PiggyInfo::set_nextmaxreward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nextmaxreward(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PiggyInfo.nextMaxReward)
}

// -------------------------------------------------------------------

// ArenaPieceInfo

// int32 arenaID = 1;
inline void ArenaPieceInfo::clear_arenaid() {
  arenaid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ArenaPieceInfo::_internal_arenaid() const {
  return arenaid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ArenaPieceInfo::arenaid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.ArenaPieceInfo.arenaID)
  return _internal_arenaid();
}
inline void ArenaPieceInfo::_internal_set_arenaid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  arenaid_ = value;
}
inline void ArenaPieceInfo::set_arenaid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_arenaid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.ArenaPieceInfo.arenaID)
}

// int32 havePiece = 2;
inline void ArenaPieceInfo::clear_havepiece() {
  havepiece_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ArenaPieceInfo::_internal_havepiece() const {
  return havepiece_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ArenaPieceInfo::havepiece() const {
  // @@protoc_insertion_point(field_get:PlaneWar.ArenaPieceInfo.havePiece)
  return _internal_havepiece();
}
inline void ArenaPieceInfo::_internal_set_havepiece(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  havepiece_ = value;
}
inline void ArenaPieceInfo::set_havepiece(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_havepiece(value);
  // @@protoc_insertion_point(field_set:PlaneWar.ArenaPieceInfo.havePiece)
}

// int32 needPiece = 3;
inline void ArenaPieceInfo::clear_needpiece() {
  needpiece_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ArenaPieceInfo::_internal_needpiece() const {
  return needpiece_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ArenaPieceInfo::needpiece() const {
  // @@protoc_insertion_point(field_get:PlaneWar.ArenaPieceInfo.needPiece)
  return _internal_needpiece();
}
inline void ArenaPieceInfo::_internal_set_needpiece(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  needpiece_ = value;
}
inline void ArenaPieceInfo::set_needpiece(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_needpiece(value);
  // @@protoc_insertion_point(field_set:PlaneWar.ArenaPieceInfo.needPiece)
}

// int32 ratio = 4;
inline void ArenaPieceInfo::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ArenaPieceInfo::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ArenaPieceInfo::ratio() const {
  // @@protoc_insertion_point(field_get:PlaneWar.ArenaPieceInfo.ratio)
  return _internal_ratio();
}
inline void ArenaPieceInfo::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void ArenaPieceInfo::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:PlaneWar.ArenaPieceInfo.ratio)
}

// -------------------------------------------------------------------

// PieceInfo

// repeated .PlaneWar.ArenaPieceInfo arenaInfo = 1;
inline int PieceInfo::_internal_arenainfo_size() const {
  return arenainfo_.size();
}
inline int PieceInfo::arenainfo_size() const {
  return _internal_arenainfo_size();
}
inline void PieceInfo::clear_arenainfo() {
  arenainfo_.Clear();
}
inline ::PlaneWar::ArenaPieceInfo* PieceInfo::mutable_arenainfo(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.PieceInfo.arenaInfo)
  return arenainfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ArenaPieceInfo >*
PieceInfo::mutable_arenainfo() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.PieceInfo.arenaInfo)
  return &arenainfo_;
}
inline const ::PlaneWar::ArenaPieceInfo& PieceInfo::_internal_arenainfo(int index) const {
  return arenainfo_.Get(index);
}
inline const ::PlaneWar::ArenaPieceInfo& PieceInfo::arenainfo(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.PieceInfo.arenaInfo)
  return _internal_arenainfo(index);
}
inline ::PlaneWar::ArenaPieceInfo* PieceInfo::_internal_add_arenainfo() {
  return arenainfo_.Add();
}
inline ::PlaneWar::ArenaPieceInfo* PieceInfo::add_arenainfo() {
  // @@protoc_insertion_point(field_add:PlaneWar.PieceInfo.arenaInfo)
  return _internal_add_arenainfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ArenaPieceInfo >&
PieceInfo::arenainfo() const {
  // @@protoc_insertion_point(field_list:PlaneWar.PieceInfo.arenaInfo)
  return arenainfo_;
}

// int32 haveDiamond = 2;
inline void PieceInfo::clear_havediamond() {
  havediamond_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PieceInfo::_internal_havediamond() const {
  return havediamond_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PieceInfo::havediamond() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PieceInfo.haveDiamond)
  return _internal_havediamond();
}
inline void PieceInfo::_internal_set_havediamond(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  havediamond_ = value;
}
inline void PieceInfo::set_havediamond(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_havediamond(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PieceInfo.haveDiamond)
}

// int32 needDiamond = 3;
inline void PieceInfo::clear_needdiamond() {
  needdiamond_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PieceInfo::_internal_needdiamond() const {
  return needdiamond_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PieceInfo::needdiamond() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PieceInfo.needDiamond)
  return _internal_needdiamond();
}
inline void PieceInfo::_internal_set_needdiamond(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  needdiamond_ = value;
}
inline void PieceInfo::set_needdiamond(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_needdiamond(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PieceInfo.needDiamond)
}

// int32 pieceStackLimit = 4;
inline void PieceInfo::clear_piecestacklimit() {
  piecestacklimit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PieceInfo::_internal_piecestacklimit() const {
  return piecestacklimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PieceInfo::piecestacklimit() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PieceInfo.pieceStackLimit)
  return _internal_piecestacklimit();
}
inline void PieceInfo::_internal_set_piecestacklimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  piecestacklimit_ = value;
}
inline void PieceInfo::set_piecestacklimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_piecestacklimit(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PieceInfo.pieceStackLimit)
}

// int32 exchangePiece = 5;
inline void PieceInfo::clear_exchangepiece() {
  exchangepiece_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PieceInfo::_internal_exchangepiece() const {
  return exchangepiece_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PieceInfo::exchangepiece() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PieceInfo.exchangePiece)
  return _internal_exchangepiece();
}
inline void PieceInfo::_internal_set_exchangepiece(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exchangepiece_ = value;
}
inline void PieceInfo::set_exchangepiece(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_exchangepiece(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PieceInfo.exchangePiece)
}

// -------------------------------------------------------------------

// RouletteInfo

// int32 id = 1;
inline void RouletteInfo::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RouletteInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RouletteInfo::id() const {
  // @@protoc_insertion_point(field_get:PlaneWar.RouletteInfo.id)
  return _internal_id();
}
inline void RouletteInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void RouletteInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PlaneWar.RouletteInfo.id)
}

// int32 num = 2;
inline void RouletteInfo::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RouletteInfo::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RouletteInfo::num() const {
  // @@protoc_insertion_point(field_get:PlaneWar.RouletteInfo.num)
  return _internal_num();
}
inline void RouletteInfo::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void RouletteInfo::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:PlaneWar.RouletteInfo.num)
}

// -------------------------------------------------------------------

// EffectInfo

// int32 effectID = 1;
inline void EffectInfo::clear_effectid() {
  effectid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EffectInfo::_internal_effectid() const {
  return effectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EffectInfo::effectid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.EffectInfo.effectID)
  return _internal_effectid();
}
inline void EffectInfo::_internal_set_effectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  effectid_ = value;
}
inline void EffectInfo::set_effectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_effectid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.EffectInfo.effectID)
}

// bool isGlobal = 2;
inline void EffectInfo::clear_isglobal() {
  isglobal_ = false;
}
inline bool EffectInfo::_internal_isglobal() const {
  return isglobal_;
}
inline bool EffectInfo::isglobal() const {
  // @@protoc_insertion_point(field_get:PlaneWar.EffectInfo.isGlobal)
  return _internal_isglobal();
}
inline void EffectInfo::_internal_set_isglobal(bool value) {
  
  isglobal_ = value;
}
inline void EffectInfo::set_isglobal(bool value) {
  _internal_set_isglobal(value);
  // @@protoc_insertion_point(field_set:PlaneWar.EffectInfo.isGlobal)
}

// -------------------------------------------------------------------

// PlayerInfo

// int32 ratio = 1;
inline void PlayerInfo::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::ratio() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlayerInfo.ratio)
  return _internal_ratio();
}
inline void PlayerInfo::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void PlayerInfo::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlayerInfo.ratio)
}

// int32 planeID = 2;
inline void PlayerInfo::clear_planeid() {
  planeid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_planeid() const {
  return planeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::planeid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlayerInfo.planeID)
  return _internal_planeid();
}
inline void PlayerInfo::_internal_set_planeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  planeid_ = value;
}
inline void PlayerInfo::set_planeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_planeid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlayerInfo.planeID)
}

// int64 score = 3;
inline void PlayerInfo::clear_score() {
  score_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerInfo::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerInfo::score() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlayerInfo.score)
  return _internal_score();
}
inline void PlayerInfo::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  score_ = value;
}
inline void PlayerInfo::set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlayerInfo.score)
}

// int32 chair = 4;
inline void PlayerInfo::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlayerInfo.chair)
  return _internal_chair();
}
inline void PlayerInfo::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void PlayerInfo::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlayerInfo.chair)
}

// string playerName = 5;
inline void PlayerInfo::clear_playername() {
  playername_.ClearToEmpty();
}
inline const std::string& PlayerInfo::playername() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlayerInfo.playerName)
  return _internal_playername();
}
inline void PlayerInfo::set_playername(const std::string& value) {
  _internal_set_playername(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlayerInfo.playerName)
}
inline std::string* PlayerInfo::mutable_playername() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.PlayerInfo.playerName)
  return _internal_mutable_playername();
}
inline const std::string& PlayerInfo::_internal_playername() const {
  return playername_.Get();
}
inline void PlayerInfo::_internal_set_playername(const std::string& value) {
  
  playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PlayerInfo::set_playername(std::string&& value) {
  
  playername_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.PlayerInfo.playerName)
}
inline void PlayerInfo::set_playername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.PlayerInfo.playerName)
}
inline void PlayerInfo::set_playername(const char* value,
    size_t size) {
  
  playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.PlayerInfo.playerName)
}
inline std::string* PlayerInfo::_internal_mutable_playername() {
  
  return playername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PlayerInfo::release_playername() {
  // @@protoc_insertion_point(field_release:PlaneWar.PlayerInfo.playerName)
  return playername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerInfo::set_allocated_playername(std::string* playername) {
  if (playername != nullptr) {
    
  } else {
    
  }
  playername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.PlayerInfo.playerName)
}

// int32 playerID = 6;
inline void PlayerInfo::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::playerid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlayerInfo.playerID)
  return _internal_playerid();
}
inline void PlayerInfo::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void PlayerInfo::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlayerInfo.playerID)
}

// int32 vip = 7;
inline void PlayerInfo::clear_vip() {
  vip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_vip() const {
  return vip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::vip() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlayerInfo.vip)
  return _internal_vip();
}
inline void PlayerInfo::_internal_set_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vip_ = value;
}
inline void PlayerInfo::set_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vip(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlayerInfo.vip)
}

// .PlaneWar.StateInfo stateInfo = 8;
inline bool PlayerInfo::_internal_has_stateinfo() const {
  return this != internal_default_instance() && stateinfo_ != nullptr;
}
inline bool PlayerInfo::has_stateinfo() const {
  return _internal_has_stateinfo();
}
inline void PlayerInfo::clear_stateinfo() {
  if (GetArena() == nullptr && stateinfo_ != nullptr) {
    delete stateinfo_;
  }
  stateinfo_ = nullptr;
}
inline const ::PlaneWar::StateInfo& PlayerInfo::_internal_stateinfo() const {
  const ::PlaneWar::StateInfo* p = stateinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::StateInfo&>(
      ::PlaneWar::_StateInfo_default_instance_);
}
inline const ::PlaneWar::StateInfo& PlayerInfo::stateinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlayerInfo.stateInfo)
  return _internal_stateinfo();
}
inline void PlayerInfo::unsafe_arena_set_allocated_stateinfo(
    ::PlaneWar::StateInfo* stateinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stateinfo_);
  }
  stateinfo_ = stateinfo;
  if (stateinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.PlayerInfo.stateInfo)
}
inline ::PlaneWar::StateInfo* PlayerInfo::release_stateinfo() {
  
  ::PlaneWar::StateInfo* temp = stateinfo_;
  stateinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::StateInfo* PlayerInfo::unsafe_arena_release_stateinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.PlayerInfo.stateInfo)
  
  ::PlaneWar::StateInfo* temp = stateinfo_;
  stateinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::StateInfo* PlayerInfo::_internal_mutable_stateinfo() {
  
  if (stateinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::StateInfo>(GetArena());
    stateinfo_ = p;
  }
  return stateinfo_;
}
inline ::PlaneWar::StateInfo* PlayerInfo::mutable_stateinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.PlayerInfo.stateInfo)
  return _internal_mutable_stateinfo();
}
inline void PlayerInfo::set_allocated_stateinfo(::PlaneWar::StateInfo* stateinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stateinfo_;
  }
  if (stateinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stateinfo);
    if (message_arena != submessage_arena) {
      stateinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stateinfo, submessage_arena);
    }
    
  } else {
    
  }
  stateinfo_ = stateinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.PlayerInfo.stateInfo)
}

// int32 memberDays = 9;
inline void PlayerInfo::clear_memberdays() {
  memberdays_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_memberdays() const {
  return memberdays_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::memberdays() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlayerInfo.memberDays)
  return _internal_memberdays();
}
inline void PlayerInfo::_internal_set_memberdays(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  memberdays_ = value;
}
inline void PlayerInfo::set_memberdays(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_memberdays(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlayerInfo.memberDays)
}

// int32 lastVipLevel = 10;
inline void PlayerInfo::clear_lastviplevel() {
  lastviplevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_lastviplevel() const {
  return lastviplevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::lastviplevel() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlayerInfo.lastVipLevel)
  return _internal_lastviplevel();
}
inline void PlayerInfo::_internal_set_lastviplevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lastviplevel_ = value;
}
inline void PlayerInfo::set_lastviplevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lastviplevel(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlayerInfo.lastVipLevel)
}

// int32 scratchCardNum = 11;
inline void PlayerInfo::clear_scratchcardnum() {
  scratchcardnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_scratchcardnum() const {
  return scratchcardnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::scratchcardnum() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlayerInfo.scratchCardNum)
  return _internal_scratchcardnum();
}
inline void PlayerInfo::_internal_set_scratchcardnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scratchcardnum_ = value;
}
inline void PlayerInfo::set_scratchcardnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scratchcardnum(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlayerInfo.scratchCardNum)
}

// int32 ticket = 12;
inline void PlayerInfo::clear_ticket() {
  ticket_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_ticket() const {
  return ticket_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::ticket() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlayerInfo.ticket)
  return _internal_ticket();
}
inline void PlayerInfo::_internal_set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ticket_ = value;
}
inline void PlayerInfo::set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ticket(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlayerInfo.ticket)
}

// bool ratioUnLock = 13;
inline void PlayerInfo::clear_ratiounlock() {
  ratiounlock_ = false;
}
inline bool PlayerInfo::_internal_ratiounlock() const {
  return ratiounlock_;
}
inline bool PlayerInfo::ratiounlock() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlayerInfo.ratioUnLock)
  return _internal_ratiounlock();
}
inline void PlayerInfo::_internal_set_ratiounlock(bool value) {
  
  ratiounlock_ = value;
}
inline void PlayerInfo::set_ratiounlock(bool value) {
  _internal_set_ratiounlock(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlayerInfo.ratioUnLock)
}

// .PlaneWar.PiggyInfo piggyInfo = 14;
inline bool PlayerInfo::_internal_has_piggyinfo() const {
  return this != internal_default_instance() && piggyinfo_ != nullptr;
}
inline bool PlayerInfo::has_piggyinfo() const {
  return _internal_has_piggyinfo();
}
inline void PlayerInfo::clear_piggyinfo() {
  if (GetArena() == nullptr && piggyinfo_ != nullptr) {
    delete piggyinfo_;
  }
  piggyinfo_ = nullptr;
}
inline const ::PlaneWar::PiggyInfo& PlayerInfo::_internal_piggyinfo() const {
  const ::PlaneWar::PiggyInfo* p = piggyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::PiggyInfo&>(
      ::PlaneWar::_PiggyInfo_default_instance_);
}
inline const ::PlaneWar::PiggyInfo& PlayerInfo::piggyinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlayerInfo.piggyInfo)
  return _internal_piggyinfo();
}
inline void PlayerInfo::unsafe_arena_set_allocated_piggyinfo(
    ::PlaneWar::PiggyInfo* piggyinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(piggyinfo_);
  }
  piggyinfo_ = piggyinfo;
  if (piggyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.PlayerInfo.piggyInfo)
}
inline ::PlaneWar::PiggyInfo* PlayerInfo::release_piggyinfo() {
  
  ::PlaneWar::PiggyInfo* temp = piggyinfo_;
  piggyinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::PiggyInfo* PlayerInfo::unsafe_arena_release_piggyinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.PlayerInfo.piggyInfo)
  
  ::PlaneWar::PiggyInfo* temp = piggyinfo_;
  piggyinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::PiggyInfo* PlayerInfo::_internal_mutable_piggyinfo() {
  
  if (piggyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::PiggyInfo>(GetArena());
    piggyinfo_ = p;
  }
  return piggyinfo_;
}
inline ::PlaneWar::PiggyInfo* PlayerInfo::mutable_piggyinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.PlayerInfo.piggyInfo)
  return _internal_mutable_piggyinfo();
}
inline void PlayerInfo::set_allocated_piggyinfo(::PlaneWar::PiggyInfo* piggyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete piggyinfo_;
  }
  if (piggyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(piggyinfo);
    if (message_arena != submessage_arena) {
      piggyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, piggyinfo, submessage_arena);
    }
    
  } else {
    
  }
  piggyinfo_ = piggyinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.PlayerInfo.piggyInfo)
}

// repeated .PlaneWar.MissileInfo missileList = 15;
inline int PlayerInfo::_internal_missilelist_size() const {
  return missilelist_.size();
}
inline int PlayerInfo::missilelist_size() const {
  return _internal_missilelist_size();
}
inline void PlayerInfo::clear_missilelist() {
  missilelist_.Clear();
}
inline ::PlaneWar::MissileInfo* PlayerInfo::mutable_missilelist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.PlayerInfo.missileList)
  return missilelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MissileInfo >*
PlayerInfo::mutable_missilelist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.PlayerInfo.missileList)
  return &missilelist_;
}
inline const ::PlaneWar::MissileInfo& PlayerInfo::_internal_missilelist(int index) const {
  return missilelist_.Get(index);
}
inline const ::PlaneWar::MissileInfo& PlayerInfo::missilelist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlayerInfo.missileList)
  return _internal_missilelist(index);
}
inline ::PlaneWar::MissileInfo* PlayerInfo::_internal_add_missilelist() {
  return missilelist_.Add();
}
inline ::PlaneWar::MissileInfo* PlayerInfo::add_missilelist() {
  // @@protoc_insertion_point(field_add:PlaneWar.PlayerInfo.missileList)
  return _internal_add_missilelist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MissileInfo >&
PlayerInfo::missilelist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.PlayerInfo.missileList)
  return missilelist_;
}

// int32 callNum = 16;
inline void PlayerInfo::clear_callnum() {
  callnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_callnum() const {
  return callnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::callnum() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlayerInfo.callNum)
  return _internal_callnum();
}
inline void PlayerInfo::_internal_set_callnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  callnum_ = value;
}
inline void PlayerInfo::set_callnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_callnum(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlayerInfo.callNum)
}

// int32 selectedTitle = 17;
inline void PlayerInfo::clear_selectedtitle() {
  selectedtitle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_selectedtitle() const {
  return selectedtitle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::selectedtitle() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlayerInfo.selectedTitle)
  return _internal_selectedtitle();
}
inline void PlayerInfo::_internal_set_selectedtitle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  selectedtitle_ = value;
}
inline void PlayerInfo::set_selectedtitle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_selectedtitle(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlayerInfo.selectedTitle)
}

// .PlaneWar.PieceInfo weaponPieceInfo = 18;
inline bool PlayerInfo::_internal_has_weaponpieceinfo() const {
  return this != internal_default_instance() && weaponpieceinfo_ != nullptr;
}
inline bool PlayerInfo::has_weaponpieceinfo() const {
  return _internal_has_weaponpieceinfo();
}
inline void PlayerInfo::clear_weaponpieceinfo() {
  if (GetArena() == nullptr && weaponpieceinfo_ != nullptr) {
    delete weaponpieceinfo_;
  }
  weaponpieceinfo_ = nullptr;
}
inline const ::PlaneWar::PieceInfo& PlayerInfo::_internal_weaponpieceinfo() const {
  const ::PlaneWar::PieceInfo* p = weaponpieceinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::PieceInfo&>(
      ::PlaneWar::_PieceInfo_default_instance_);
}
inline const ::PlaneWar::PieceInfo& PlayerInfo::weaponpieceinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlayerInfo.weaponPieceInfo)
  return _internal_weaponpieceinfo();
}
inline void PlayerInfo::unsafe_arena_set_allocated_weaponpieceinfo(
    ::PlaneWar::PieceInfo* weaponpieceinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(weaponpieceinfo_);
  }
  weaponpieceinfo_ = weaponpieceinfo;
  if (weaponpieceinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.PlayerInfo.weaponPieceInfo)
}
inline ::PlaneWar::PieceInfo* PlayerInfo::release_weaponpieceinfo() {
  
  ::PlaneWar::PieceInfo* temp = weaponpieceinfo_;
  weaponpieceinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::PieceInfo* PlayerInfo::unsafe_arena_release_weaponpieceinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.PlayerInfo.weaponPieceInfo)
  
  ::PlaneWar::PieceInfo* temp = weaponpieceinfo_;
  weaponpieceinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::PieceInfo* PlayerInfo::_internal_mutable_weaponpieceinfo() {
  
  if (weaponpieceinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::PieceInfo>(GetArena());
    weaponpieceinfo_ = p;
  }
  return weaponpieceinfo_;
}
inline ::PlaneWar::PieceInfo* PlayerInfo::mutable_weaponpieceinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.PlayerInfo.weaponPieceInfo)
  return _internal_mutable_weaponpieceinfo();
}
inline void PlayerInfo::set_allocated_weaponpieceinfo(::PlaneWar::PieceInfo* weaponpieceinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete weaponpieceinfo_;
  }
  if (weaponpieceinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(weaponpieceinfo);
    if (message_arena != submessage_arena) {
      weaponpieceinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weaponpieceinfo, submessage_arena);
    }
    
  } else {
    
  }
  weaponpieceinfo_ = weaponpieceinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.PlayerInfo.weaponPieceInfo)
}

// int32 effectID = 19;
inline void PlayerInfo::clear_effectid() {
  effectid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_effectid() const {
  return effectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::effectid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlayerInfo.effectID)
  return _internal_effectid();
}
inline void PlayerInfo::_internal_set_effectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  effectid_ = value;
}
inline void PlayerInfo::set_effectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_effectid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlayerInfo.effectID)
}

// string icon = 20;
inline void PlayerInfo::clear_icon() {
  icon_.ClearToEmpty();
}
inline const std::string& PlayerInfo::icon() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlayerInfo.icon)
  return _internal_icon();
}
inline void PlayerInfo::set_icon(const std::string& value) {
  _internal_set_icon(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlayerInfo.icon)
}
inline std::string* PlayerInfo::mutable_icon() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.PlayerInfo.icon)
  return _internal_mutable_icon();
}
inline const std::string& PlayerInfo::_internal_icon() const {
  return icon_.Get();
}
inline void PlayerInfo::_internal_set_icon(const std::string& value) {
  
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PlayerInfo::set_icon(std::string&& value) {
  
  icon_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.PlayerInfo.icon)
}
inline void PlayerInfo::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.PlayerInfo.icon)
}
inline void PlayerInfo::set_icon(const char* value,
    size_t size) {
  
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.PlayerInfo.icon)
}
inline std::string* PlayerInfo::_internal_mutable_icon() {
  
  return icon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PlayerInfo::release_icon() {
  // @@protoc_insertion_point(field_release:PlaneWar.PlayerInfo.icon)
  return icon_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerInfo::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.PlayerInfo.icon)
}

// repeated .PlaneWar.RouletteInfo rouletteList = 21;
inline int PlayerInfo::_internal_roulettelist_size() const {
  return roulettelist_.size();
}
inline int PlayerInfo::roulettelist_size() const {
  return _internal_roulettelist_size();
}
inline void PlayerInfo::clear_roulettelist() {
  roulettelist_.Clear();
}
inline ::PlaneWar::RouletteInfo* PlayerInfo::mutable_roulettelist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.PlayerInfo.rouletteList)
  return roulettelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::RouletteInfo >*
PlayerInfo::mutable_roulettelist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.PlayerInfo.rouletteList)
  return &roulettelist_;
}
inline const ::PlaneWar::RouletteInfo& PlayerInfo::_internal_roulettelist(int index) const {
  return roulettelist_.Get(index);
}
inline const ::PlaneWar::RouletteInfo& PlayerInfo::roulettelist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlayerInfo.rouletteList)
  return _internal_roulettelist(index);
}
inline ::PlaneWar::RouletteInfo* PlayerInfo::_internal_add_roulettelist() {
  return roulettelist_.Add();
}
inline ::PlaneWar::RouletteInfo* PlayerInfo::add_roulettelist() {
  // @@protoc_insertion_point(field_add:PlaneWar.PlayerInfo.rouletteList)
  return _internal_add_roulettelist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::RouletteInfo >&
PlayerInfo::roulettelist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.PlayerInfo.rouletteList)
  return roulettelist_;
}

// int32 wingsId = 22;
inline void PlayerInfo::clear_wingsid() {
  wingsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_wingsid() const {
  return wingsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::wingsid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlayerInfo.wingsId)
  return _internal_wingsid();
}
inline void PlayerInfo::_internal_set_wingsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wingsid_ = value;
}
inline void PlayerInfo::set_wingsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wingsid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlayerInfo.wingsId)
}

// .PlaneWar.EffectInfo effectInfo = 23;
inline bool PlayerInfo::_internal_has_effectinfo() const {
  return this != internal_default_instance() && effectinfo_ != nullptr;
}
inline bool PlayerInfo::has_effectinfo() const {
  return _internal_has_effectinfo();
}
inline void PlayerInfo::clear_effectinfo() {
  if (GetArena() == nullptr && effectinfo_ != nullptr) {
    delete effectinfo_;
  }
  effectinfo_ = nullptr;
}
inline const ::PlaneWar::EffectInfo& PlayerInfo::_internal_effectinfo() const {
  const ::PlaneWar::EffectInfo* p = effectinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::EffectInfo&>(
      ::PlaneWar::_EffectInfo_default_instance_);
}
inline const ::PlaneWar::EffectInfo& PlayerInfo::effectinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlayerInfo.effectInfo)
  return _internal_effectinfo();
}
inline void PlayerInfo::unsafe_arena_set_allocated_effectinfo(
    ::PlaneWar::EffectInfo* effectinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(effectinfo_);
  }
  effectinfo_ = effectinfo;
  if (effectinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.PlayerInfo.effectInfo)
}
inline ::PlaneWar::EffectInfo* PlayerInfo::release_effectinfo() {
  
  ::PlaneWar::EffectInfo* temp = effectinfo_;
  effectinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::EffectInfo* PlayerInfo::unsafe_arena_release_effectinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.PlayerInfo.effectInfo)
  
  ::PlaneWar::EffectInfo* temp = effectinfo_;
  effectinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::EffectInfo* PlayerInfo::_internal_mutable_effectinfo() {
  
  if (effectinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::EffectInfo>(GetArena());
    effectinfo_ = p;
  }
  return effectinfo_;
}
inline ::PlaneWar::EffectInfo* PlayerInfo::mutable_effectinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.PlayerInfo.effectInfo)
  return _internal_mutable_effectinfo();
}
inline void PlayerInfo::set_allocated_effectinfo(::PlaneWar::EffectInfo* effectinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete effectinfo_;
  }
  if (effectinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(effectinfo);
    if (message_arena != submessage_arena) {
      effectinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, effectinfo, submessage_arena);
    }
    
  } else {
    
  }
  effectinfo_ = effectinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.PlayerInfo.effectInfo)
}

// int32 currentRank = 24;
inline void PlayerInfo::clear_currentrank() {
  currentrank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_currentrank() const {
  return currentrank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::currentrank() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlayerInfo.currentRank)
  return _internal_currentrank();
}
inline void PlayerInfo::_internal_set_currentrank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  currentrank_ = value;
}
inline void PlayerInfo::set_currentrank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_currentrank(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlayerInfo.currentRank)
}

// int32 star = 25;
inline void PlayerInfo::clear_star() {
  star_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_star() const {
  return star_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::star() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlayerInfo.star)
  return _internal_star();
}
inline void PlayerInfo::_internal_set_star(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  star_ = value;
}
inline void PlayerInfo::set_star(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_star(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlayerInfo.star)
}

// bool isLastRank = 26;
inline void PlayerInfo::clear_islastrank() {
  islastrank_ = false;
}
inline bool PlayerInfo::_internal_islastrank() const {
  return islastrank_;
}
inline bool PlayerInfo::islastrank() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlayerInfo.isLastRank)
  return _internal_islastrank();
}
inline void PlayerInfo::_internal_set_islastrank(bool value) {
  
  islastrank_ = value;
}
inline void PlayerInfo::set_islastrank(bool value) {
  _internal_set_islastrank(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlayerInfo.isLastRank)
}

// .PlaneWar.Decimal redPacket = 27;
inline bool PlayerInfo::_internal_has_redpacket() const {
  return this != internal_default_instance() && redpacket_ != nullptr;
}
inline bool PlayerInfo::has_redpacket() const {
  return _internal_has_redpacket();
}
inline void PlayerInfo::clear_redpacket() {
  if (GetArena() == nullptr && redpacket_ != nullptr) {
    delete redpacket_;
  }
  redpacket_ = nullptr;
}
inline const ::PlaneWar::Decimal& PlayerInfo::_internal_redpacket() const {
  const ::PlaneWar::Decimal* p = redpacket_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::Decimal&>(
      ::PlaneWar::_Decimal_default_instance_);
}
inline const ::PlaneWar::Decimal& PlayerInfo::redpacket() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlayerInfo.redPacket)
  return _internal_redpacket();
}
inline void PlayerInfo::unsafe_arena_set_allocated_redpacket(
    ::PlaneWar::Decimal* redpacket) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redpacket_);
  }
  redpacket_ = redpacket;
  if (redpacket) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.PlayerInfo.redPacket)
}
inline ::PlaneWar::Decimal* PlayerInfo::release_redpacket() {
  
  ::PlaneWar::Decimal* temp = redpacket_;
  redpacket_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::Decimal* PlayerInfo::unsafe_arena_release_redpacket() {
  // @@protoc_insertion_point(field_release:PlaneWar.PlayerInfo.redPacket)
  
  ::PlaneWar::Decimal* temp = redpacket_;
  redpacket_ = nullptr;
  return temp;
}
inline ::PlaneWar::Decimal* PlayerInfo::_internal_mutable_redpacket() {
  
  if (redpacket_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::Decimal>(GetArena());
    redpacket_ = p;
  }
  return redpacket_;
}
inline ::PlaneWar::Decimal* PlayerInfo::mutable_redpacket() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.PlayerInfo.redPacket)
  return _internal_mutable_redpacket();
}
inline void PlayerInfo::set_allocated_redpacket(::PlaneWar::Decimal* redpacket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete redpacket_;
  }
  if (redpacket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(redpacket);
    if (message_arena != submessage_arena) {
      redpacket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redpacket, submessage_arena);
    }
    
  } else {
    
  }
  redpacket_ = redpacket;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.PlayerInfo.redPacket)
}

// -------------------------------------------------------------------

// PlaneSpecEffect

// int32 ratioLimit = 1;
inline void PlaneSpecEffect::clear_ratiolimit() {
  ratiolimit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaneSpecEffect::_internal_ratiolimit() const {
  return ratiolimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaneSpecEffect::ratiolimit() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlaneSpecEffect.ratioLimit)
  return _internal_ratiolimit();
}
inline void PlaneSpecEffect::_internal_set_ratiolimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratiolimit_ = value;
}
inline void PlaneSpecEffect::set_ratiolimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratiolimit(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlaneSpecEffect.ratioLimit)
}

// float hitChangeRate = 2;
inline void PlaneSpecEffect::clear_hitchangerate() {
  hitchangerate_ = 0;
}
inline float PlaneSpecEffect::_internal_hitchangerate() const {
  return hitchangerate_;
}
inline float PlaneSpecEffect::hitchangerate() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlaneSpecEffect.hitChangeRate)
  return _internal_hitchangerate();
}
inline void PlaneSpecEffect::_internal_set_hitchangerate(float value) {
  
  hitchangerate_ = value;
}
inline void PlaneSpecEffect::set_hitchangerate(float value) {
  _internal_set_hitchangerate(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlaneSpecEffect.hitChangeRate)
}

// float moneyChangeRate = 3;
inline void PlaneSpecEffect::clear_moneychangerate() {
  moneychangerate_ = 0;
}
inline float PlaneSpecEffect::_internal_moneychangerate() const {
  return moneychangerate_;
}
inline float PlaneSpecEffect::moneychangerate() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlaneSpecEffect.moneyChangeRate)
  return _internal_moneychangerate();
}
inline void PlaneSpecEffect::_internal_set_moneychangerate(float value) {
  
  moneychangerate_ = value;
}
inline void PlaneSpecEffect::set_moneychangerate(float value) {
  _internal_set_moneychangerate(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlaneSpecEffect.moneyChangeRate)
}

// float violenceRate = 4;
inline void PlaneSpecEffect::clear_violencerate() {
  violencerate_ = 0;
}
inline float PlaneSpecEffect::_internal_violencerate() const {
  return violencerate_;
}
inline float PlaneSpecEffect::violencerate() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlaneSpecEffect.violenceRate)
  return _internal_violencerate();
}
inline void PlaneSpecEffect::_internal_set_violencerate(float value) {
  
  violencerate_ = value;
}
inline void PlaneSpecEffect::set_violencerate(float value) {
  _internal_set_violencerate(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlaneSpecEffect.violenceRate)
}

// float speedRate = 5;
inline void PlaneSpecEffect::clear_speedrate() {
  speedrate_ = 0;
}
inline float PlaneSpecEffect::_internal_speedrate() const {
  return speedrate_;
}
inline float PlaneSpecEffect::speedrate() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlaneSpecEffect.speedRate)
  return _internal_speedrate();
}
inline void PlaneSpecEffect::_internal_set_speedrate(float value) {
  
  speedrate_ = value;
}
inline void PlaneSpecEffect::set_speedrate(float value) {
  _internal_set_speedrate(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlaneSpecEffect.speedRate)
}

// int32 type = 6;
inline void PlaneSpecEffect::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaneSpecEffect::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaneSpecEffect::type() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlaneSpecEffect.type)
  return _internal_type();
}
inline void PlaneSpecEffect::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void PlaneSpecEffect::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlaneSpecEffect.type)
}

// -------------------------------------------------------------------

// WingsSpecEffect

// float speedRate = 1;
inline void WingsSpecEffect::clear_speedrate() {
  speedrate_ = 0;
}
inline float WingsSpecEffect::_internal_speedrate() const {
  return speedrate_;
}
inline float WingsSpecEffect::speedrate() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WingsSpecEffect.speedRate)
  return _internal_speedrate();
}
inline void WingsSpecEffect::_internal_set_speedrate(float value) {
  
  speedrate_ = value;
}
inline void WingsSpecEffect::set_speedrate(float value) {
  _internal_set_speedrate(value);
  // @@protoc_insertion_point(field_set:PlaneWar.WingsSpecEffect.speedRate)
}

// int32 ratioLimit = 2;
inline void WingsSpecEffect::clear_ratiolimit() {
  ratiolimit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsSpecEffect::_internal_ratiolimit() const {
  return ratiolimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsSpecEffect::ratiolimit() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WingsSpecEffect.ratioLimit)
  return _internal_ratiolimit();
}
inline void WingsSpecEffect::_internal_set_ratiolimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratiolimit_ = value;
}
inline void WingsSpecEffect::set_ratiolimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratiolimit(value);
  // @@protoc_insertion_point(field_set:PlaneWar.WingsSpecEffect.ratioLimit)
}

// float hitChangeRate = 3;
inline void WingsSpecEffect::clear_hitchangerate() {
  hitchangerate_ = 0;
}
inline float WingsSpecEffect::_internal_hitchangerate() const {
  return hitchangerate_;
}
inline float WingsSpecEffect::hitchangerate() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WingsSpecEffect.hitChangeRate)
  return _internal_hitchangerate();
}
inline void WingsSpecEffect::_internal_set_hitchangerate(float value) {
  
  hitchangerate_ = value;
}
inline void WingsSpecEffect::set_hitchangerate(float value) {
  _internal_set_hitchangerate(value);
  // @@protoc_insertion_point(field_set:PlaneWar.WingsSpecEffect.hitChangeRate)
}

// float moneyChangeRate = 4;
inline void WingsSpecEffect::clear_moneychangerate() {
  moneychangerate_ = 0;
}
inline float WingsSpecEffect::_internal_moneychangerate() const {
  return moneychangerate_;
}
inline float WingsSpecEffect::moneychangerate() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WingsSpecEffect.moneyChangeRate)
  return _internal_moneychangerate();
}
inline void WingsSpecEffect::_internal_set_moneychangerate(float value) {
  
  moneychangerate_ = value;
}
inline void WingsSpecEffect::set_moneychangerate(float value) {
  _internal_set_moneychangerate(value);
  // @@protoc_insertion_point(field_set:PlaneWar.WingsSpecEffect.moneyChangeRate)
}

// int32 type = 5;
inline void WingsSpecEffect::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsSpecEffect::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsSpecEffect::type() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WingsSpecEffect.type)
  return _internal_type();
}
inline void WingsSpecEffect::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void WingsSpecEffect::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PlaneWar.WingsSpecEffect.type)
}

// -------------------------------------------------------------------

// PlaneInfo

// int32 planeID = 1;
inline void PlaneInfo::clear_planeid() {
  planeid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaneInfo::_internal_planeid() const {
  return planeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaneInfo::planeid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlaneInfo.planeID)
  return _internal_planeid();
}
inline void PlaneInfo::_internal_set_planeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  planeid_ = value;
}
inline void PlaneInfo::set_planeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_planeid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlaneInfo.planeID)
}

// bool isVip = 2;
inline void PlaneInfo::clear_isvip() {
  isvip_ = false;
}
inline bool PlaneInfo::_internal_isvip() const {
  return isvip_;
}
inline bool PlaneInfo::isvip() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlaneInfo.isVip)
  return _internal_isvip();
}
inline void PlaneInfo::_internal_set_isvip(bool value) {
  
  isvip_ = value;
}
inline void PlaneInfo::set_isvip(bool value) {
  _internal_set_isvip(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlaneInfo.isVip)
}

// int32 vipLevel = 3;
inline void PlaneInfo::clear_viplevel() {
  viplevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaneInfo::_internal_viplevel() const {
  return viplevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaneInfo::viplevel() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlaneInfo.vipLevel)
  return _internal_viplevel();
}
inline void PlaneInfo::_internal_set_viplevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  viplevel_ = value;
}
inline void PlaneInfo::set_viplevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_viplevel(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlaneInfo.vipLevel)
}

// bool isMember = 4;
inline void PlaneInfo::clear_ismember() {
  ismember_ = false;
}
inline bool PlaneInfo::_internal_ismember() const {
  return ismember_;
}
inline bool PlaneInfo::ismember() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlaneInfo.isMember)
  return _internal_ismember();
}
inline void PlaneInfo::_internal_set_ismember(bool value) {
  
  ismember_ = value;
}
inline void PlaneInfo::set_ismember(bool value) {
  _internal_set_ismember(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlaneInfo.isMember)
}

// bool isTaskLock = 5;
inline void PlaneInfo::clear_istasklock() {
  istasklock_ = false;
}
inline bool PlaneInfo::_internal_istasklock() const {
  return istasklock_;
}
inline bool PlaneInfo::istasklock() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlaneInfo.isTaskLock)
  return _internal_istasklock();
}
inline void PlaneInfo::_internal_set_istasklock(bool value) {
  
  istasklock_ = value;
}
inline void PlaneInfo::set_istasklock(bool value) {
  _internal_set_istasklock(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlaneInfo.isTaskLock)
}

// int32 requireAct = 6;
inline void PlaneInfo::clear_requireact() {
  requireact_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaneInfo::_internal_requireact() const {
  return requireact_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaneInfo::requireact() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlaneInfo.requireAct)
  return _internal_requireact();
}
inline void PlaneInfo::_internal_set_requireact(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  requireact_ = value;
}
inline void PlaneInfo::set_requireact(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requireact(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlaneInfo.requireAct)
}

// bool enable = 7;
inline void PlaneInfo::clear_enable() {
  enable_ = false;
}
inline bool PlaneInfo::_internal_enable() const {
  return enable_;
}
inline bool PlaneInfo::enable() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlaneInfo.enable)
  return _internal_enable();
}
inline void PlaneInfo::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void PlaneInfo::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlaneInfo.enable)
}

// .PlaneWar.PlaneSpecEffect planeSpecEffect = 8;
inline bool PlaneInfo::_internal_has_planespeceffect() const {
  return this != internal_default_instance() && planespeceffect_ != nullptr;
}
inline bool PlaneInfo::has_planespeceffect() const {
  return _internal_has_planespeceffect();
}
inline void PlaneInfo::clear_planespeceffect() {
  if (GetArena() == nullptr && planespeceffect_ != nullptr) {
    delete planespeceffect_;
  }
  planespeceffect_ = nullptr;
}
inline const ::PlaneWar::PlaneSpecEffect& PlaneInfo::_internal_planespeceffect() const {
  const ::PlaneWar::PlaneSpecEffect* p = planespeceffect_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::PlaneSpecEffect&>(
      ::PlaneWar::_PlaneSpecEffect_default_instance_);
}
inline const ::PlaneWar::PlaneSpecEffect& PlaneInfo::planespeceffect() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlaneInfo.planeSpecEffect)
  return _internal_planespeceffect();
}
inline void PlaneInfo::unsafe_arena_set_allocated_planespeceffect(
    ::PlaneWar::PlaneSpecEffect* planespeceffect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(planespeceffect_);
  }
  planespeceffect_ = planespeceffect;
  if (planespeceffect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.PlaneInfo.planeSpecEffect)
}
inline ::PlaneWar::PlaneSpecEffect* PlaneInfo::release_planespeceffect() {
  
  ::PlaneWar::PlaneSpecEffect* temp = planespeceffect_;
  planespeceffect_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::PlaneSpecEffect* PlaneInfo::unsafe_arena_release_planespeceffect() {
  // @@protoc_insertion_point(field_release:PlaneWar.PlaneInfo.planeSpecEffect)
  
  ::PlaneWar::PlaneSpecEffect* temp = planespeceffect_;
  planespeceffect_ = nullptr;
  return temp;
}
inline ::PlaneWar::PlaneSpecEffect* PlaneInfo::_internal_mutable_planespeceffect() {
  
  if (planespeceffect_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::PlaneSpecEffect>(GetArena());
    planespeceffect_ = p;
  }
  return planespeceffect_;
}
inline ::PlaneWar::PlaneSpecEffect* PlaneInfo::mutable_planespeceffect() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.PlaneInfo.planeSpecEffect)
  return _internal_mutable_planespeceffect();
}
inline void PlaneInfo::set_allocated_planespeceffect(::PlaneWar::PlaneSpecEffect* planespeceffect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete planespeceffect_;
  }
  if (planespeceffect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(planespeceffect);
    if (message_arena != submessage_arena) {
      planespeceffect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, planespeceffect, submessage_arena);
    }
    
  } else {
    
  }
  planespeceffect_ = planespeceffect;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.PlaneInfo.planeSpecEffect)
}

// int32 timestamp = 9;
inline void PlaneInfo::clear_timestamp() {
  timestamp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaneInfo::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaneInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlaneInfo.timestamp)
  return _internal_timestamp();
}
inline void PlaneInfo::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timestamp_ = value;
}
inline void PlaneInfo::set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlaneInfo.timestamp)
}

// int32 rankFlag = 10;
inline void PlaneInfo::clear_rankflag() {
  rankflag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaneInfo::_internal_rankflag() const {
  return rankflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaneInfo::rankflag() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlaneInfo.rankFlag)
  return _internal_rankflag();
}
inline void PlaneInfo::_internal_set_rankflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rankflag_ = value;
}
inline void PlaneInfo::set_rankflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rankflag(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlaneInfo.rankFlag)
}

// int32 price = 11;
inline void PlaneInfo::clear_price() {
  price_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaneInfo::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaneInfo::price() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlaneInfo.price)
  return _internal_price();
}
inline void PlaneInfo::_internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  price_ = value;
}
inline void PlaneInfo::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PlaneInfo.price)
}

// .PlaneWar.PlaneSpecEffect buff = 12;
inline bool PlaneInfo::_internal_has_buff() const {
  return this != internal_default_instance() && buff_ != nullptr;
}
inline bool PlaneInfo::has_buff() const {
  return _internal_has_buff();
}
inline void PlaneInfo::clear_buff() {
  if (GetArena() == nullptr && buff_ != nullptr) {
    delete buff_;
  }
  buff_ = nullptr;
}
inline const ::PlaneWar::PlaneSpecEffect& PlaneInfo::_internal_buff() const {
  const ::PlaneWar::PlaneSpecEffect* p = buff_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::PlaneSpecEffect&>(
      ::PlaneWar::_PlaneSpecEffect_default_instance_);
}
inline const ::PlaneWar::PlaneSpecEffect& PlaneInfo::buff() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PlaneInfo.buff)
  return _internal_buff();
}
inline void PlaneInfo::unsafe_arena_set_allocated_buff(
    ::PlaneWar::PlaneSpecEffect* buff) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buff_);
  }
  buff_ = buff;
  if (buff) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.PlaneInfo.buff)
}
inline ::PlaneWar::PlaneSpecEffect* PlaneInfo::release_buff() {
  
  ::PlaneWar::PlaneSpecEffect* temp = buff_;
  buff_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::PlaneSpecEffect* PlaneInfo::unsafe_arena_release_buff() {
  // @@protoc_insertion_point(field_release:PlaneWar.PlaneInfo.buff)
  
  ::PlaneWar::PlaneSpecEffect* temp = buff_;
  buff_ = nullptr;
  return temp;
}
inline ::PlaneWar::PlaneSpecEffect* PlaneInfo::_internal_mutable_buff() {
  
  if (buff_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::PlaneSpecEffect>(GetArena());
    buff_ = p;
  }
  return buff_;
}
inline ::PlaneWar::PlaneSpecEffect* PlaneInfo::mutable_buff() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.PlaneInfo.buff)
  return _internal_mutable_buff();
}
inline void PlaneInfo::set_allocated_buff(::PlaneWar::PlaneSpecEffect* buff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete buff_;
  }
  if (buff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(buff);
    if (message_arena != submessage_arena) {
      buff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buff, submessage_arena);
    }
    
  } else {
    
  }
  buff_ = buff;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.PlaneInfo.buff)
}

// -------------------------------------------------------------------

// InteractionItem

// int32 id = 1;
inline void InteractionItem::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InteractionItem::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InteractionItem::id() const {
  // @@protoc_insertion_point(field_get:PlaneWar.InteractionItem.id)
  return _internal_id();
}
inline void InteractionItem::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void InteractionItem::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PlaneWar.InteractionItem.id)
}

// int32 cost = 2;
inline void InteractionItem::clear_cost() {
  cost_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InteractionItem::_internal_cost() const {
  return cost_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InteractionItem::cost() const {
  // @@protoc_insertion_point(field_get:PlaneWar.InteractionItem.cost)
  return _internal_cost();
}
inline void InteractionItem::_internal_set_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cost_ = value;
}
inline void InteractionItem::set_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:PlaneWar.InteractionItem.cost)
}

// -------------------------------------------------------------------

// RankStatusInfo

// bool rankEnable = 1;
inline void RankStatusInfo::clear_rankenable() {
  rankenable_ = false;
}
inline bool RankStatusInfo::_internal_rankenable() const {
  return rankenable_;
}
inline bool RankStatusInfo::rankenable() const {
  // @@protoc_insertion_point(field_get:PlaneWar.RankStatusInfo.rankEnable)
  return _internal_rankenable();
}
inline void RankStatusInfo::_internal_set_rankenable(bool value) {
  
  rankenable_ = value;
}
inline void RankStatusInfo::set_rankenable(bool value) {
  _internal_set_rankenable(value);
  // @@protoc_insertion_point(field_set:PlaneWar.RankStatusInfo.rankEnable)
}

// repeated int32 allowTypeList = 2;
inline int RankStatusInfo::_internal_allowtypelist_size() const {
  return allowtypelist_.size();
}
inline int RankStatusInfo::allowtypelist_size() const {
  return _internal_allowtypelist_size();
}
inline void RankStatusInfo::clear_allowtypelist() {
  allowtypelist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankStatusInfo::_internal_allowtypelist(int index) const {
  return allowtypelist_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankStatusInfo::allowtypelist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.RankStatusInfo.allowTypeList)
  return _internal_allowtypelist(index);
}
inline void RankStatusInfo::set_allowtypelist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  allowtypelist_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlaneWar.RankStatusInfo.allowTypeList)
}
inline void RankStatusInfo::_internal_add_allowtypelist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  allowtypelist_.Add(value);
}
inline void RankStatusInfo::add_allowtypelist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_allowtypelist(value);
  // @@protoc_insertion_point(field_add:PlaneWar.RankStatusInfo.allowTypeList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RankStatusInfo::_internal_allowtypelist() const {
  return allowtypelist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RankStatusInfo::allowtypelist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.RankStatusInfo.allowTypeList)
  return _internal_allowtypelist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RankStatusInfo::_internal_mutable_allowtypelist() {
  return &allowtypelist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RankStatusInfo::mutable_allowtypelist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.RankStatusInfo.allowTypeList)
  return _internal_mutable_allowtypelist();
}

// -------------------------------------------------------------------

// WingsInfo

// int32 wingsId = 1;
inline void WingsInfo::clear_wingsid() {
  wingsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsInfo::_internal_wingsid() const {
  return wingsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsInfo::wingsid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WingsInfo.wingsId)
  return _internal_wingsid();
}
inline void WingsInfo::_internal_set_wingsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wingsid_ = value;
}
inline void WingsInfo::set_wingsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wingsid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.WingsInfo.wingsId)
}

// bool enable = 2;
inline void WingsInfo::clear_enable() {
  enable_ = false;
}
inline bool WingsInfo::_internal_enable() const {
  return enable_;
}
inline bool WingsInfo::enable() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WingsInfo.enable)
  return _internal_enable();
}
inline void WingsInfo::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void WingsInfo::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:PlaneWar.WingsInfo.enable)
}

// int32 timestamp = 3;
inline void WingsInfo::clear_timestamp() {
  timestamp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsInfo::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WingsInfo.timestamp)
  return _internal_timestamp();
}
inline void WingsInfo::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timestamp_ = value;
}
inline void WingsInfo::set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:PlaneWar.WingsInfo.timestamp)
}

// .PlaneWar.WingsSpecEffect wingsSpecEffect = 4;
inline bool WingsInfo::_internal_has_wingsspeceffect() const {
  return this != internal_default_instance() && wingsspeceffect_ != nullptr;
}
inline bool WingsInfo::has_wingsspeceffect() const {
  return _internal_has_wingsspeceffect();
}
inline void WingsInfo::clear_wingsspeceffect() {
  if (GetArena() == nullptr && wingsspeceffect_ != nullptr) {
    delete wingsspeceffect_;
  }
  wingsspeceffect_ = nullptr;
}
inline const ::PlaneWar::WingsSpecEffect& WingsInfo::_internal_wingsspeceffect() const {
  const ::PlaneWar::WingsSpecEffect* p = wingsspeceffect_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::WingsSpecEffect&>(
      ::PlaneWar::_WingsSpecEffect_default_instance_);
}
inline const ::PlaneWar::WingsSpecEffect& WingsInfo::wingsspeceffect() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WingsInfo.wingsSpecEffect)
  return _internal_wingsspeceffect();
}
inline void WingsInfo::unsafe_arena_set_allocated_wingsspeceffect(
    ::PlaneWar::WingsSpecEffect* wingsspeceffect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wingsspeceffect_);
  }
  wingsspeceffect_ = wingsspeceffect;
  if (wingsspeceffect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.WingsInfo.wingsSpecEffect)
}
inline ::PlaneWar::WingsSpecEffect* WingsInfo::release_wingsspeceffect() {
  
  ::PlaneWar::WingsSpecEffect* temp = wingsspeceffect_;
  wingsspeceffect_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::WingsSpecEffect* WingsInfo::unsafe_arena_release_wingsspeceffect() {
  // @@protoc_insertion_point(field_release:PlaneWar.WingsInfo.wingsSpecEffect)
  
  ::PlaneWar::WingsSpecEffect* temp = wingsspeceffect_;
  wingsspeceffect_ = nullptr;
  return temp;
}
inline ::PlaneWar::WingsSpecEffect* WingsInfo::_internal_mutable_wingsspeceffect() {
  
  if (wingsspeceffect_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::WingsSpecEffect>(GetArena());
    wingsspeceffect_ = p;
  }
  return wingsspeceffect_;
}
inline ::PlaneWar::WingsSpecEffect* WingsInfo::mutable_wingsspeceffect() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.WingsInfo.wingsSpecEffect)
  return _internal_mutable_wingsspeceffect();
}
inline void WingsInfo::set_allocated_wingsspeceffect(::PlaneWar::WingsSpecEffect* wingsspeceffect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete wingsspeceffect_;
  }
  if (wingsspeceffect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(wingsspeceffect);
    if (message_arena != submessage_arena) {
      wingsspeceffect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wingsspeceffect, submessage_arena);
    }
    
  } else {
    
  }
  wingsspeceffect_ = wingsspeceffect;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.WingsInfo.wingsSpecEffect)
}

// int32 rankFlag = 5;
inline void WingsInfo::clear_rankflag() {
  rankflag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsInfo::_internal_rankflag() const {
  return rankflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsInfo::rankflag() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WingsInfo.rankFlag)
  return _internal_rankflag();
}
inline void WingsInfo::_internal_set_rankflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rankflag_ = value;
}
inline void WingsInfo::set_rankflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rankflag(value);
  // @@protoc_insertion_point(field_set:PlaneWar.WingsInfo.rankFlag)
}

// int32 price = 6;
inline void WingsInfo::clear_price() {
  price_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsInfo::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsInfo::price() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WingsInfo.price)
  return _internal_price();
}
inline void WingsInfo::_internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  price_ = value;
}
inline void WingsInfo::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:PlaneWar.WingsInfo.price)
}

// .PlaneWar.WingsSpecEffect buff = 7;
inline bool WingsInfo::_internal_has_buff() const {
  return this != internal_default_instance() && buff_ != nullptr;
}
inline bool WingsInfo::has_buff() const {
  return _internal_has_buff();
}
inline void WingsInfo::clear_buff() {
  if (GetArena() == nullptr && buff_ != nullptr) {
    delete buff_;
  }
  buff_ = nullptr;
}
inline const ::PlaneWar::WingsSpecEffect& WingsInfo::_internal_buff() const {
  const ::PlaneWar::WingsSpecEffect* p = buff_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::WingsSpecEffect&>(
      ::PlaneWar::_WingsSpecEffect_default_instance_);
}
inline const ::PlaneWar::WingsSpecEffect& WingsInfo::buff() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WingsInfo.buff)
  return _internal_buff();
}
inline void WingsInfo::unsafe_arena_set_allocated_buff(
    ::PlaneWar::WingsSpecEffect* buff) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buff_);
  }
  buff_ = buff;
  if (buff) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.WingsInfo.buff)
}
inline ::PlaneWar::WingsSpecEffect* WingsInfo::release_buff() {
  
  ::PlaneWar::WingsSpecEffect* temp = buff_;
  buff_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::WingsSpecEffect* WingsInfo::unsafe_arena_release_buff() {
  // @@protoc_insertion_point(field_release:PlaneWar.WingsInfo.buff)
  
  ::PlaneWar::WingsSpecEffect* temp = buff_;
  buff_ = nullptr;
  return temp;
}
inline ::PlaneWar::WingsSpecEffect* WingsInfo::_internal_mutable_buff() {
  
  if (buff_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::WingsSpecEffect>(GetArena());
    buff_ = p;
  }
  return buff_;
}
inline ::PlaneWar::WingsSpecEffect* WingsInfo::mutable_buff() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.WingsInfo.buff)
  return _internal_mutable_buff();
}
inline void WingsInfo::set_allocated_buff(::PlaneWar::WingsSpecEffect* buff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete buff_;
  }
  if (buff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(buff);
    if (message_arena != submessage_arena) {
      buff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buff, submessage_arena);
    }
    
  } else {
    
  }
  buff_ = buff;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.WingsInfo.buff)
}

// -------------------------------------------------------------------

// RoomInfo

// repeated .PlaneWar.PlaneInfo planeList = 1;
inline int RoomInfo::_internal_planelist_size() const {
  return planelist_.size();
}
inline int RoomInfo::planelist_size() const {
  return _internal_planelist_size();
}
inline void RoomInfo::clear_planelist() {
  planelist_.Clear();
}
inline ::PlaneWar::PlaneInfo* RoomInfo::mutable_planelist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.RoomInfo.planeList)
  return planelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PlaneInfo >*
RoomInfo::mutable_planelist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.RoomInfo.planeList)
  return &planelist_;
}
inline const ::PlaneWar::PlaneInfo& RoomInfo::_internal_planelist(int index) const {
  return planelist_.Get(index);
}
inline const ::PlaneWar::PlaneInfo& RoomInfo::planelist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.RoomInfo.planeList)
  return _internal_planelist(index);
}
inline ::PlaneWar::PlaneInfo* RoomInfo::_internal_add_planelist() {
  return planelist_.Add();
}
inline ::PlaneWar::PlaneInfo* RoomInfo::add_planelist() {
  // @@protoc_insertion_point(field_add:PlaneWar.RoomInfo.planeList)
  return _internal_add_planelist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PlaneInfo >&
RoomInfo::planelist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.RoomInfo.planeList)
  return planelist_;
}

// bool scratchCardEnable = 2;
inline void RoomInfo::clear_scratchcardenable() {
  scratchcardenable_ = false;
}
inline bool RoomInfo::_internal_scratchcardenable() const {
  return scratchcardenable_;
}
inline bool RoomInfo::scratchcardenable() const {
  // @@protoc_insertion_point(field_get:PlaneWar.RoomInfo.scratchCardEnable)
  return _internal_scratchcardenable();
}
inline void RoomInfo::_internal_set_scratchcardenable(bool value) {
  
  scratchcardenable_ = value;
}
inline void RoomInfo::set_scratchcardenable(bool value) {
  _internal_set_scratchcardenable(value);
  // @@protoc_insertion_point(field_set:PlaneWar.RoomInfo.scratchCardEnable)
}

// repeated .PlaneWar.InteractionItem interactionList = 3;
inline int RoomInfo::_internal_interactionlist_size() const {
  return interactionlist_.size();
}
inline int RoomInfo::interactionlist_size() const {
  return _internal_interactionlist_size();
}
inline void RoomInfo::clear_interactionlist() {
  interactionlist_.Clear();
}
inline ::PlaneWar::InteractionItem* RoomInfo::mutable_interactionlist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.RoomInfo.interactionList)
  return interactionlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::InteractionItem >*
RoomInfo::mutable_interactionlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.RoomInfo.interactionList)
  return &interactionlist_;
}
inline const ::PlaneWar::InteractionItem& RoomInfo::_internal_interactionlist(int index) const {
  return interactionlist_.Get(index);
}
inline const ::PlaneWar::InteractionItem& RoomInfo::interactionlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.RoomInfo.interactionList)
  return _internal_interactionlist(index);
}
inline ::PlaneWar::InteractionItem* RoomInfo::_internal_add_interactionlist() {
  return interactionlist_.Add();
}
inline ::PlaneWar::InteractionItem* RoomInfo::add_interactionlist() {
  // @@protoc_insertion_point(field_add:PlaneWar.RoomInfo.interactionList)
  return _internal_add_interactionlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::InteractionItem >&
RoomInfo::interactionlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.RoomInfo.interactionList)
  return interactionlist_;
}

// bool piggyBankEnable = 4;
inline void RoomInfo::clear_piggybankenable() {
  piggybankenable_ = false;
}
inline bool RoomInfo::_internal_piggybankenable() const {
  return piggybankenable_;
}
inline bool RoomInfo::piggybankenable() const {
  // @@protoc_insertion_point(field_get:PlaneWar.RoomInfo.piggyBankEnable)
  return _internal_piggybankenable();
}
inline void RoomInfo::_internal_set_piggybankenable(bool value) {
  
  piggybankenable_ = value;
}
inline void RoomInfo::set_piggybankenable(bool value) {
  _internal_set_piggybankenable(value);
  // @@protoc_insertion_point(field_set:PlaneWar.RoomInfo.piggyBankEnable)
}

// bool personalPoolEnable = 5;
inline void RoomInfo::clear_personalpoolenable() {
  personalpoolenable_ = false;
}
inline bool RoomInfo::_internal_personalpoolenable() const {
  return personalpoolenable_;
}
inline bool RoomInfo::personalpoolenable() const {
  // @@protoc_insertion_point(field_get:PlaneWar.RoomInfo.personalPoolEnable)
  return _internal_personalpoolenable();
}
inline void RoomInfo::_internal_set_personalpoolenable(bool value) {
  
  personalpoolenable_ = value;
}
inline void RoomInfo::set_personalpoolenable(bool value) {
  _internal_set_personalpoolenable(value);
  // @@protoc_insertion_point(field_set:PlaneWar.RoomInfo.personalPoolEnable)
}

// repeated int32 rewardMonsterList = 6;
inline int RoomInfo::_internal_rewardmonsterlist_size() const {
  return rewardmonsterlist_.size();
}
inline int RoomInfo::rewardmonsterlist_size() const {
  return _internal_rewardmonsterlist_size();
}
inline void RoomInfo::clear_rewardmonsterlist() {
  rewardmonsterlist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomInfo::_internal_rewardmonsterlist(int index) const {
  return rewardmonsterlist_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomInfo::rewardmonsterlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.RoomInfo.rewardMonsterList)
  return _internal_rewardmonsterlist(index);
}
inline void RoomInfo::set_rewardmonsterlist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  rewardmonsterlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlaneWar.RoomInfo.rewardMonsterList)
}
inline void RoomInfo::_internal_add_rewardmonsterlist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  rewardmonsterlist_.Add(value);
}
inline void RoomInfo::add_rewardmonsterlist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_rewardmonsterlist(value);
  // @@protoc_insertion_point(field_add:PlaneWar.RoomInfo.rewardMonsterList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RoomInfo::_internal_rewardmonsterlist() const {
  return rewardmonsterlist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RoomInfo::rewardmonsterlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.RoomInfo.rewardMonsterList)
  return _internal_rewardmonsterlist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RoomInfo::_internal_mutable_rewardmonsterlist() {
  return &rewardmonsterlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RoomInfo::mutable_rewardmonsterlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.RoomInfo.rewardMonsterList)
  return _internal_mutable_rewardmonsterlist();
}

// .PlaneWar.RankStatusInfo rankStatus = 7;
inline bool RoomInfo::_internal_has_rankstatus() const {
  return this != internal_default_instance() && rankstatus_ != nullptr;
}
inline bool RoomInfo::has_rankstatus() const {
  return _internal_has_rankstatus();
}
inline void RoomInfo::clear_rankstatus() {
  if (GetArena() == nullptr && rankstatus_ != nullptr) {
    delete rankstatus_;
  }
  rankstatus_ = nullptr;
}
inline const ::PlaneWar::RankStatusInfo& RoomInfo::_internal_rankstatus() const {
  const ::PlaneWar::RankStatusInfo* p = rankstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::RankStatusInfo&>(
      ::PlaneWar::_RankStatusInfo_default_instance_);
}
inline const ::PlaneWar::RankStatusInfo& RoomInfo::rankstatus() const {
  // @@protoc_insertion_point(field_get:PlaneWar.RoomInfo.rankStatus)
  return _internal_rankstatus();
}
inline void RoomInfo::unsafe_arena_set_allocated_rankstatus(
    ::PlaneWar::RankStatusInfo* rankstatus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rankstatus_);
  }
  rankstatus_ = rankstatus;
  if (rankstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.RoomInfo.rankStatus)
}
inline ::PlaneWar::RankStatusInfo* RoomInfo::release_rankstatus() {
  
  ::PlaneWar::RankStatusInfo* temp = rankstatus_;
  rankstatus_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::RankStatusInfo* RoomInfo::unsafe_arena_release_rankstatus() {
  // @@protoc_insertion_point(field_release:PlaneWar.RoomInfo.rankStatus)
  
  ::PlaneWar::RankStatusInfo* temp = rankstatus_;
  rankstatus_ = nullptr;
  return temp;
}
inline ::PlaneWar::RankStatusInfo* RoomInfo::_internal_mutable_rankstatus() {
  
  if (rankstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::RankStatusInfo>(GetArena());
    rankstatus_ = p;
  }
  return rankstatus_;
}
inline ::PlaneWar::RankStatusInfo* RoomInfo::mutable_rankstatus() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.RoomInfo.rankStatus)
  return _internal_mutable_rankstatus();
}
inline void RoomInfo::set_allocated_rankstatus(::PlaneWar::RankStatusInfo* rankstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rankstatus_;
  }
  if (rankstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rankstatus);
    if (message_arena != submessage_arena) {
      rankstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rankstatus, submessage_arena);
    }
    
  } else {
    
  }
  rankstatus_ = rankstatus;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.RoomInfo.rankStatus)
}

// repeated .PlaneWar.WingsInfo wingsList = 8;
inline int RoomInfo::_internal_wingslist_size() const {
  return wingslist_.size();
}
inline int RoomInfo::wingslist_size() const {
  return _internal_wingslist_size();
}
inline void RoomInfo::clear_wingslist() {
  wingslist_.Clear();
}
inline ::PlaneWar::WingsInfo* RoomInfo::mutable_wingslist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.RoomInfo.wingsList)
  return wingslist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::WingsInfo >*
RoomInfo::mutable_wingslist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.RoomInfo.wingsList)
  return &wingslist_;
}
inline const ::PlaneWar::WingsInfo& RoomInfo::_internal_wingslist(int index) const {
  return wingslist_.Get(index);
}
inline const ::PlaneWar::WingsInfo& RoomInfo::wingslist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.RoomInfo.wingsList)
  return _internal_wingslist(index);
}
inline ::PlaneWar::WingsInfo* RoomInfo::_internal_add_wingslist() {
  return wingslist_.Add();
}
inline ::PlaneWar::WingsInfo* RoomInfo::add_wingslist() {
  // @@protoc_insertion_point(field_add:PlaneWar.RoomInfo.wingsList)
  return _internal_add_wingslist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::WingsInfo >&
RoomInfo::wingslist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.RoomInfo.wingsList)
  return wingslist_;
}

// repeated int32 ratioList = 9;
inline int RoomInfo::_internal_ratiolist_size() const {
  return ratiolist_.size();
}
inline int RoomInfo::ratiolist_size() const {
  return _internal_ratiolist_size();
}
inline void RoomInfo::clear_ratiolist() {
  ratiolist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomInfo::_internal_ratiolist(int index) const {
  return ratiolist_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomInfo::ratiolist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.RoomInfo.ratioList)
  return _internal_ratiolist(index);
}
inline void RoomInfo::set_ratiolist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  ratiolist_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlaneWar.RoomInfo.ratioList)
}
inline void RoomInfo::_internal_add_ratiolist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ratiolist_.Add(value);
}
inline void RoomInfo::add_ratiolist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_ratiolist(value);
  // @@protoc_insertion_point(field_add:PlaneWar.RoomInfo.ratioList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RoomInfo::_internal_ratiolist() const {
  return ratiolist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RoomInfo::ratiolist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.RoomInfo.ratioList)
  return _internal_ratiolist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RoomInfo::_internal_mutable_ratiolist() {
  return &ratiolist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RoomInfo::mutable_ratiolist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.RoomInfo.ratioList)
  return _internal_mutable_ratiolist();
}

// -------------------------------------------------------------------

// CSReady

// -------------------------------------------------------------------

// SCReady

// repeated .PlaneWar.PlayerInfo playerList = 1;
inline int SCReady::_internal_playerlist_size() const {
  return playerlist_.size();
}
inline int SCReady::playerlist_size() const {
  return _internal_playerlist_size();
}
inline void SCReady::clear_playerlist() {
  playerlist_.Clear();
}
inline ::PlaneWar::PlayerInfo* SCReady::mutable_playerlist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCReady.playerList)
  return playerlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PlayerInfo >*
SCReady::mutable_playerlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCReady.playerList)
  return &playerlist_;
}
inline const ::PlaneWar::PlayerInfo& SCReady::_internal_playerlist(int index) const {
  return playerlist_.Get(index);
}
inline const ::PlaneWar::PlayerInfo& SCReady::playerlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCReady.playerList)
  return _internal_playerlist(index);
}
inline ::PlaneWar::PlayerInfo* SCReady::_internal_add_playerlist() {
  return playerlist_.Add();
}
inline ::PlaneWar::PlayerInfo* SCReady::add_playerlist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCReady.playerList)
  return _internal_add_playerlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PlayerInfo >&
SCReady::playerlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCReady.playerList)
  return playerlist_;
}

// .PlaneWar.RoomInfo roomInfo = 2;
inline bool SCReady::_internal_has_roominfo() const {
  return this != internal_default_instance() && roominfo_ != nullptr;
}
inline bool SCReady::has_roominfo() const {
  return _internal_has_roominfo();
}
inline void SCReady::clear_roominfo() {
  if (GetArena() == nullptr && roominfo_ != nullptr) {
    delete roominfo_;
  }
  roominfo_ = nullptr;
}
inline const ::PlaneWar::RoomInfo& SCReady::_internal_roominfo() const {
  const ::PlaneWar::RoomInfo* p = roominfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::RoomInfo&>(
      ::PlaneWar::_RoomInfo_default_instance_);
}
inline const ::PlaneWar::RoomInfo& SCReady::roominfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCReady.roomInfo)
  return _internal_roominfo();
}
inline void SCReady::unsafe_arena_set_allocated_roominfo(
    ::PlaneWar::RoomInfo* roominfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  roominfo_ = roominfo;
  if (roominfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCReady.roomInfo)
}
inline ::PlaneWar::RoomInfo* SCReady::release_roominfo() {
  
  ::PlaneWar::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::RoomInfo* SCReady::unsafe_arena_release_roominfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCReady.roomInfo)
  
  ::PlaneWar::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::RoomInfo* SCReady::_internal_mutable_roominfo() {
  
  if (roominfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::RoomInfo>(GetArena());
    roominfo_ = p;
  }
  return roominfo_;
}
inline ::PlaneWar::RoomInfo* SCReady::mutable_roominfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCReady.roomInfo)
  return _internal_mutable_roominfo();
}
inline void SCReady::set_allocated_roominfo(::PlaneWar::RoomInfo* roominfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete roominfo_;
  }
  if (roominfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(roominfo);
    if (message_arena != submessage_arena) {
      roominfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roominfo, submessage_arena);
    }
    
  } else {
    
  }
  roominfo_ = roominfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCReady.roomInfo)
}

// -------------------------------------------------------------------

// SCUserEnterNotify

// .PlaneWar.PlayerInfo player = 1;
inline bool SCUserEnterNotify::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool SCUserEnterNotify::has_player() const {
  return _internal_has_player();
}
inline void SCUserEnterNotify::clear_player() {
  if (GetArena() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
inline const ::PlaneWar::PlayerInfo& SCUserEnterNotify::_internal_player() const {
  const ::PlaneWar::PlayerInfo* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::PlayerInfo&>(
      ::PlaneWar::_PlayerInfo_default_instance_);
}
inline const ::PlaneWar::PlayerInfo& SCUserEnterNotify::player() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUserEnterNotify.player)
  return _internal_player();
}
inline void SCUserEnterNotify::unsafe_arena_set_allocated_player(
    ::PlaneWar::PlayerInfo* player) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCUserEnterNotify.player)
}
inline ::PlaneWar::PlayerInfo* SCUserEnterNotify::release_player() {
  
  ::PlaneWar::PlayerInfo* temp = player_;
  player_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::PlayerInfo* SCUserEnterNotify::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCUserEnterNotify.player)
  
  ::PlaneWar::PlayerInfo* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::PlaneWar::PlayerInfo* SCUserEnterNotify::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::PlayerInfo>(GetArena());
    player_ = p;
  }
  return player_;
}
inline ::PlaneWar::PlayerInfo* SCUserEnterNotify::mutable_player() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCUserEnterNotify.player)
  return _internal_mutable_player();
}
inline void SCUserEnterNotify::set_allocated_player(::PlaneWar::PlayerInfo* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(player);
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCUserEnterNotify.player)
}

// -------------------------------------------------------------------

// MonsterInfo

// int32 monsterType = 1;
inline void MonsterInfo::clear_monstertype() {
  monstertype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MonsterInfo::_internal_monstertype() const {
  return monstertype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MonsterInfo::monstertype() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MonsterInfo.monsterType)
  return _internal_monstertype();
}
inline void MonsterInfo::_internal_set_monstertype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  monstertype_ = value;
}
inline void MonsterInfo::set_monstertype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_monstertype(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MonsterInfo.monsterType)
}

// int32 monsterUID = 2;
inline void MonsterInfo::clear_monsteruid() {
  monsteruid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MonsterInfo::_internal_monsteruid() const {
  return monsteruid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MonsterInfo::monsteruid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MonsterInfo.monsterUID)
  return _internal_monsteruid();
}
inline void MonsterInfo::_internal_set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  monsteruid_ = value;
}
inline void MonsterInfo::set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_monsteruid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MonsterInfo.monsterUID)
}

// bool isConnect = 3;
inline void MonsterInfo::clear_isconnect() {
  isconnect_ = false;
}
inline bool MonsterInfo::_internal_isconnect() const {
  return isconnect_;
}
inline bool MonsterInfo::isconnect() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MonsterInfo.isConnect)
  return _internal_isconnect();
}
inline void MonsterInfo::_internal_set_isconnect(bool value) {
  
  isconnect_ = value;
}
inline void MonsterInfo::set_isconnect(bool value) {
  _internal_set_isconnect(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MonsterInfo.isConnect)
}

// -------------------------------------------------------------------

// SCMonsterSpawn

// int32 configID = 1;
inline void SCMonsterSpawn::clear_configid() {
  configid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMonsterSpawn::_internal_configid() const {
  return configid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMonsterSpawn::configid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCMonsterSpawn.configID)
  return _internal_configid();
}
inline void SCMonsterSpawn::_internal_set_configid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  configid_ = value;
}
inline void SCMonsterSpawn::set_configid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_configid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCMonsterSpawn.configID)
}

// repeated .PlaneWar.MonsterInfo monsterList = 2;
inline int SCMonsterSpawn::_internal_monsterlist_size() const {
  return monsterlist_.size();
}
inline int SCMonsterSpawn::monsterlist_size() const {
  return _internal_monsterlist_size();
}
inline void SCMonsterSpawn::clear_monsterlist() {
  monsterlist_.Clear();
}
inline ::PlaneWar::MonsterInfo* SCMonsterSpawn::mutable_monsterlist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCMonsterSpawn.monsterList)
  return monsterlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MonsterInfo >*
SCMonsterSpawn::mutable_monsterlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCMonsterSpawn.monsterList)
  return &monsterlist_;
}
inline const ::PlaneWar::MonsterInfo& SCMonsterSpawn::_internal_monsterlist(int index) const {
  return monsterlist_.Get(index);
}
inline const ::PlaneWar::MonsterInfo& SCMonsterSpawn::monsterlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCMonsterSpawn.monsterList)
  return _internal_monsterlist(index);
}
inline ::PlaneWar::MonsterInfo* SCMonsterSpawn::_internal_add_monsterlist() {
  return monsterlist_.Add();
}
inline ::PlaneWar::MonsterInfo* SCMonsterSpawn::add_monsterlist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCMonsterSpawn.monsterList)
  return _internal_add_monsterlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MonsterInfo >&
SCMonsterSpawn::monsterlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCMonsterSpawn.monsterList)
  return monsterlist_;
}

// bool isCall = 3;
inline void SCMonsterSpawn::clear_iscall() {
  iscall_ = false;
}
inline bool SCMonsterSpawn::_internal_iscall() const {
  return iscall_;
}
inline bool SCMonsterSpawn::iscall() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCMonsterSpawn.isCall)
  return _internal_iscall();
}
inline void SCMonsterSpawn::_internal_set_iscall(bool value) {
  
  iscall_ = value;
}
inline void SCMonsterSpawn::set_iscall(bool value) {
  _internal_set_iscall(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCMonsterSpawn.isCall)
}

// -------------------------------------------------------------------

// CSShot

// int32 angle = 1;
inline void CSShot::clear_angle() {
  angle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSShot::_internal_angle() const {
  return angle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSShot::angle() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSShot.angle)
  return _internal_angle();
}
inline void CSShot::_internal_set_angle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  angle_ = value;
}
inline void CSShot::set_angle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSShot.angle)
}

// int32 ratio = 2;
inline void CSShot::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSShot::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSShot::ratio() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSShot.ratio)
  return _internal_ratio();
}
inline void CSShot::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void CSShot::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSShot.ratio)
}

// int32 bulletType = 3;
inline void CSShot::clear_bullettype() {
  bullettype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSShot::_internal_bullettype() const {
  return bullettype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSShot::bullettype() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSShot.bulletType)
  return _internal_bullettype();
}
inline void CSShot::_internal_set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bullettype_ = value;
}
inline void CSShot::set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bullettype(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSShot.bulletType)
}

// int32 scatter = 4;
inline void CSShot::clear_scatter() {
  scatter_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSShot::_internal_scatter() const {
  return scatter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSShot::scatter() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSShot.scatter)
  return _internal_scatter();
}
inline void CSShot::_internal_set_scatter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scatter_ = value;
}
inline void CSShot::set_scatter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scatter(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSShot.scatter)
}

// int32 sourceUID = 5;
inline void CSShot::clear_sourceuid() {
  sourceuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSShot::_internal_sourceuid() const {
  return sourceuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSShot::sourceuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSShot.sourceUID)
  return _internal_sourceuid();
}
inline void CSShot::_internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sourceuid_ = value;
}
inline void CSShot::set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sourceuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSShot.sourceUID)
}

// -------------------------------------------------------------------

// SCShot

// int32 chair = 1;
inline void SCShot::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCShot::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCShot::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCShot.chair)
  return _internal_chair();
}
inline void SCShot::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCShot::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCShot.chair)
}

// int32 angle = 2;
inline void SCShot::clear_angle() {
  angle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCShot::_internal_angle() const {
  return angle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCShot::angle() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCShot.angle)
  return _internal_angle();
}
inline void SCShot::_internal_set_angle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  angle_ = value;
}
inline void SCShot::set_angle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCShot.angle)
}

// int32 score = 3;
inline void SCShot::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCShot::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCShot::score() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCShot.score)
  return _internal_score();
}
inline void SCShot::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void SCShot::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCShot.score)
}

// int32 bulletType = 4;
inline void SCShot::clear_bullettype() {
  bullettype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCShot::_internal_bullettype() const {
  return bullettype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCShot::bullettype() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCShot.bulletType)
  return _internal_bullettype();
}
inline void SCShot::_internal_set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bullettype_ = value;
}
inline void SCShot::set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bullettype(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCShot.bulletType)
}

// int32 scatter = 5;
inline void SCShot::clear_scatter() {
  scatter_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCShot::_internal_scatter() const {
  return scatter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCShot::scatter() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCShot.scatter)
  return _internal_scatter();
}
inline void SCShot::_internal_set_scatter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scatter_ = value;
}
inline void SCShot::set_scatter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scatter(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCShot.scatter)
}

// -------------------------------------------------------------------

// CSLock

// int32 monsterUID = 1;
inline void CSLock::clear_monsteruid() {
  monsteruid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLock::_internal_monsteruid() const {
  return monsteruid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLock::monsteruid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSLock.monsterUID)
  return _internal_monsteruid();
}
inline void CSLock::_internal_set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  monsteruid_ = value;
}
inline void CSLock::set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_monsteruid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSLock.monsterUID)
}

// int32 colliderIndex = 2;
inline void CSLock::clear_colliderindex() {
  colliderindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLock::_internal_colliderindex() const {
  return colliderindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLock::colliderindex() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSLock.colliderIndex)
  return _internal_colliderindex();
}
inline void CSLock::_internal_set_colliderindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  colliderindex_ = value;
}
inline void CSLock::set_colliderindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_colliderindex(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSLock.colliderIndex)
}

// -------------------------------------------------------------------

// SCLock

// int32 chair = 1;
inline void SCLock::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLock::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLock::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCLock.chair)
  return _internal_chair();
}
inline void SCLock::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCLock::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCLock.chair)
}

// int32 monsterUID = 2;
inline void SCLock::clear_monsteruid() {
  monsteruid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLock::_internal_monsteruid() const {
  return monsteruid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLock::monsteruid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCLock.monsterUID)
  return _internal_monsteruid();
}
inline void SCLock::_internal_set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  monsteruid_ = value;
}
inline void SCLock::set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_monsteruid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCLock.monsterUID)
}

// int32 colliderIndex = 3;
inline void SCLock::clear_colliderindex() {
  colliderindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLock::_internal_colliderindex() const {
  return colliderindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLock::colliderindex() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCLock.colliderIndex)
  return _internal_colliderindex();
}
inline void SCLock::_internal_set_colliderindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  colliderindex_ = value;
}
inline void SCLock::set_colliderindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_colliderindex(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCLock.colliderIndex)
}

// -------------------------------------------------------------------

// Poker

// int32 value = 1;
inline void Poker::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Poker::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Poker::value() const {
  // @@protoc_insertion_point(field_get:PlaneWar.Poker.value)
  return _internal_value();
}
inline void Poker::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void Poker::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:PlaneWar.Poker.value)
}

// int32 multiple = 2;
inline void Poker::clear_multiple() {
  multiple_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Poker::_internal_multiple() const {
  return multiple_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Poker::multiple() const {
  // @@protoc_insertion_point(field_get:PlaneWar.Poker.multiple)
  return _internal_multiple();
}
inline void Poker::_internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  multiple_ = value;
}
inline void Poker::set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_multiple(value);
  // @@protoc_insertion_point(field_set:PlaneWar.Poker.multiple)
}

// -------------------------------------------------------------------

// DropPoker

// repeated .PlaneWar.Poker pokerList = 1;
inline int DropPoker::_internal_pokerlist_size() const {
  return pokerlist_.size();
}
inline int DropPoker::pokerlist_size() const {
  return _internal_pokerlist_size();
}
inline void DropPoker::clear_pokerlist() {
  pokerlist_.Clear();
}
inline ::PlaneWar::Poker* DropPoker::mutable_pokerlist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.DropPoker.pokerList)
  return pokerlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::Poker >*
DropPoker::mutable_pokerlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.DropPoker.pokerList)
  return &pokerlist_;
}
inline const ::PlaneWar::Poker& DropPoker::_internal_pokerlist(int index) const {
  return pokerlist_.Get(index);
}
inline const ::PlaneWar::Poker& DropPoker::pokerlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.DropPoker.pokerList)
  return _internal_pokerlist(index);
}
inline ::PlaneWar::Poker* DropPoker::_internal_add_pokerlist() {
  return pokerlist_.Add();
}
inline ::PlaneWar::Poker* DropPoker::add_pokerlist() {
  // @@protoc_insertion_point(field_add:PlaneWar.DropPoker.pokerList)
  return _internal_add_pokerlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::Poker >&
DropPoker::pokerlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.DropPoker.pokerList)
  return pokerlist_;
}

// int32 dice = 2;
inline void DropPoker::clear_dice() {
  dice_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DropPoker::_internal_dice() const {
  return dice_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DropPoker::dice() const {
  // @@protoc_insertion_point(field_get:PlaneWar.DropPoker.dice)
  return _internal_dice();
}
inline void DropPoker::_internal_set_dice(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dice_ = value;
}
inline void DropPoker::set_dice(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dice(value);
  // @@protoc_insertion_point(field_set:PlaneWar.DropPoker.dice)
}

// int32 kind = 3;
inline void DropPoker::clear_kind() {
  kind_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DropPoker::_internal_kind() const {
  return kind_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DropPoker::kind() const {
  // @@protoc_insertion_point(field_get:PlaneWar.DropPoker.kind)
  return _internal_kind();
}
inline void DropPoker::_internal_set_kind(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  kind_ = value;
}
inline void DropPoker::set_kind(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:PlaneWar.DropPoker.kind)
}

// int32 kindMultiple = 4;
inline void DropPoker::clear_kindmultiple() {
  kindmultiple_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DropPoker::_internal_kindmultiple() const {
  return kindmultiple_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DropPoker::kindmultiple() const {
  // @@protoc_insertion_point(field_get:PlaneWar.DropPoker.kindMultiple)
  return _internal_kindmultiple();
}
inline void DropPoker::_internal_set_kindmultiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  kindmultiple_ = value;
}
inline void DropPoker::set_kindmultiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_kindmultiple(value);
  // @@protoc_insertion_point(field_set:PlaneWar.DropPoker.kindMultiple)
}

// -------------------------------------------------------------------

// TriggerBullet

// int32 bulletType = 1;
inline void TriggerBullet::clear_bullettype() {
  bullettype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TriggerBullet::_internal_bullettype() const {
  return bullettype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TriggerBullet::bullettype() const {
  // @@protoc_insertion_point(field_get:PlaneWar.TriggerBullet.bulletType)
  return _internal_bullettype();
}
inline void TriggerBullet::_internal_set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bullettype_ = value;
}
inline void TriggerBullet::set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bullettype(value);
  // @@protoc_insertion_point(field_set:PlaneWar.TriggerBullet.bulletType)
}

// int32 subType = 2;
inline void TriggerBullet::clear_subtype() {
  subtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TriggerBullet::_internal_subtype() const {
  return subtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TriggerBullet::subtype() const {
  // @@protoc_insertion_point(field_get:PlaneWar.TriggerBullet.subType)
  return _internal_subtype();
}
inline void TriggerBullet::_internal_set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  subtype_ = value;
}
inline void TriggerBullet::set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_subtype(value);
  // @@protoc_insertion_point(field_set:PlaneWar.TriggerBullet.subType)
}

// int32 num = 3;
inline void TriggerBullet::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TriggerBullet::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TriggerBullet::num() const {
  // @@protoc_insertion_point(field_get:PlaneWar.TriggerBullet.num)
  return _internal_num();
}
inline void TriggerBullet::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void TriggerBullet::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:PlaneWar.TriggerBullet.num)
}

// repeated int32 params = 4;
inline int TriggerBullet::_internal_params_size() const {
  return params_.size();
}
inline int TriggerBullet::params_size() const {
  return _internal_params_size();
}
inline void TriggerBullet::clear_params() {
  params_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TriggerBullet::_internal_params(int index) const {
  return params_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TriggerBullet::params(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.TriggerBullet.params)
  return _internal_params(index);
}
inline void TriggerBullet::set_params(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  params_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlaneWar.TriggerBullet.params)
}
inline void TriggerBullet::_internal_add_params(::PROTOBUF_NAMESPACE_ID::int32 value) {
  params_.Add(value);
}
inline void TriggerBullet::add_params(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_params(value);
  // @@protoc_insertion_point(field_add:PlaneWar.TriggerBullet.params)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TriggerBullet::_internal_params() const {
  return params_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TriggerBullet::params() const {
  // @@protoc_insertion_point(field_list:PlaneWar.TriggerBullet.params)
  return _internal_params();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TriggerBullet::_internal_mutable_params() {
  return &params_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TriggerBullet::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.TriggerBullet.params)
  return _internal_mutable_params();
}

// repeated int32 params2 = 5;
inline int TriggerBullet::_internal_params2_size() const {
  return params2_.size();
}
inline int TriggerBullet::params2_size() const {
  return _internal_params2_size();
}
inline void TriggerBullet::clear_params2() {
  params2_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TriggerBullet::_internal_params2(int index) const {
  return params2_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TriggerBullet::params2(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.TriggerBullet.params2)
  return _internal_params2(index);
}
inline void TriggerBullet::set_params2(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  params2_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlaneWar.TriggerBullet.params2)
}
inline void TriggerBullet::_internal_add_params2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  params2_.Add(value);
}
inline void TriggerBullet::add_params2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_params2(value);
  // @@protoc_insertion_point(field_add:PlaneWar.TriggerBullet.params2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TriggerBullet::_internal_params2() const {
  return params2_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TriggerBullet::params2() const {
  // @@protoc_insertion_point(field_list:PlaneWar.TriggerBullet.params2)
  return _internal_params2();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TriggerBullet::_internal_mutable_params2() {
  return &params2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TriggerBullet::mutable_params2() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.TriggerBullet.params2)
  return _internal_mutable_params2();
}

// int32 sourceUID = 6;
inline void TriggerBullet::clear_sourceuid() {
  sourceuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TriggerBullet::_internal_sourceuid() const {
  return sourceuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TriggerBullet::sourceuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.TriggerBullet.sourceUID)
  return _internal_sourceuid();
}
inline void TriggerBullet::_internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sourceuid_ = value;
}
inline void TriggerBullet::set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sourceuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.TriggerBullet.sourceUID)
}

// int32 generation = 7;
inline void TriggerBullet::clear_generation() {
  generation_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TriggerBullet::_internal_generation() const {
  return generation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TriggerBullet::generation() const {
  // @@protoc_insertion_point(field_get:PlaneWar.TriggerBullet.generation)
  return _internal_generation();
}
inline void TriggerBullet::_internal_set_generation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  generation_ = value;
}
inline void TriggerBullet::set_generation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_generation(value);
  // @@protoc_insertion_point(field_set:PlaneWar.TriggerBullet.generation)
}

// .PlaneWar.Pos pos = 8;
inline bool TriggerBullet::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool TriggerBullet::has_pos() const {
  return _internal_has_pos();
}
inline void TriggerBullet::clear_pos() {
  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::PlaneWar::Pos& TriggerBullet::_internal_pos() const {
  const ::PlaneWar::Pos* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::Pos&>(
      ::PlaneWar::_Pos_default_instance_);
}
inline const ::PlaneWar::Pos& TriggerBullet::pos() const {
  // @@protoc_insertion_point(field_get:PlaneWar.TriggerBullet.pos)
  return _internal_pos();
}
inline void TriggerBullet::unsafe_arena_set_allocated_pos(
    ::PlaneWar::Pos* pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.TriggerBullet.pos)
}
inline ::PlaneWar::Pos* TriggerBullet::release_pos() {
  
  ::PlaneWar::Pos* temp = pos_;
  pos_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::Pos* TriggerBullet::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:PlaneWar.TriggerBullet.pos)
  
  ::PlaneWar::Pos* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::PlaneWar::Pos* TriggerBullet::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::Pos>(GetArena());
    pos_ = p;
  }
  return pos_;
}
inline ::PlaneWar::Pos* TriggerBullet::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.TriggerBullet.pos)
  return _internal_mutable_pos();
}
inline void TriggerBullet::set_allocated_pos(::PlaneWar::Pos* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.TriggerBullet.pos)
}

// float delay = 9;
inline void TriggerBullet::clear_delay() {
  delay_ = 0;
}
inline float TriggerBullet::_internal_delay() const {
  return delay_;
}
inline float TriggerBullet::delay() const {
  // @@protoc_insertion_point(field_get:PlaneWar.TriggerBullet.delay)
  return _internal_delay();
}
inline void TriggerBullet::_internal_set_delay(float value) {
  
  delay_ = value;
}
inline void TriggerBullet::set_delay(float value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:PlaneWar.TriggerBullet.delay)
}

// int32 range = 10;
inline void TriggerBullet::clear_range() {
  range_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TriggerBullet::_internal_range() const {
  return range_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TriggerBullet::range() const {
  // @@protoc_insertion_point(field_get:PlaneWar.TriggerBullet.range)
  return _internal_range();
}
inline void TriggerBullet::_internal_set_range(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  range_ = value;
}
inline void TriggerBullet::set_range(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:PlaneWar.TriggerBullet.range)
}

// float speed = 11;
inline void TriggerBullet::clear_speed() {
  speed_ = 0;
}
inline float TriggerBullet::_internal_speed() const {
  return speed_;
}
inline float TriggerBullet::speed() const {
  // @@protoc_insertion_point(field_get:PlaneWar.TriggerBullet.speed)
  return _internal_speed();
}
inline void TriggerBullet::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void TriggerBullet::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:PlaneWar.TriggerBullet.speed)
}

// string monetary = 12;
inline void TriggerBullet::clear_monetary() {
  monetary_.ClearToEmpty();
}
inline const std::string& TriggerBullet::monetary() const {
  // @@protoc_insertion_point(field_get:PlaneWar.TriggerBullet.monetary)
  return _internal_monetary();
}
inline void TriggerBullet::set_monetary(const std::string& value) {
  _internal_set_monetary(value);
  // @@protoc_insertion_point(field_set:PlaneWar.TriggerBullet.monetary)
}
inline std::string* TriggerBullet::mutable_monetary() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.TriggerBullet.monetary)
  return _internal_mutable_monetary();
}
inline const std::string& TriggerBullet::_internal_monetary() const {
  return monetary_.Get();
}
inline void TriggerBullet::_internal_set_monetary(const std::string& value) {
  
  monetary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TriggerBullet::set_monetary(std::string&& value) {
  
  monetary_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.TriggerBullet.monetary)
}
inline void TriggerBullet::set_monetary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  monetary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.TriggerBullet.monetary)
}
inline void TriggerBullet::set_monetary(const char* value,
    size_t size) {
  
  monetary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.TriggerBullet.monetary)
}
inline std::string* TriggerBullet::_internal_mutable_monetary() {
  
  return monetary_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TriggerBullet::release_monetary() {
  // @@protoc_insertion_point(field_release:PlaneWar.TriggerBullet.monetary)
  return monetary_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TriggerBullet::set_allocated_monetary(std::string* monetary) {
  if (monetary != nullptr) {
    
  } else {
    
  }
  monetary_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), monetary,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.TriggerBullet.monetary)
}

// float destroyDelay = 13;
inline void TriggerBullet::clear_destroydelay() {
  destroydelay_ = 0;
}
inline float TriggerBullet::_internal_destroydelay() const {
  return destroydelay_;
}
inline float TriggerBullet::destroydelay() const {
  // @@protoc_insertion_point(field_get:PlaneWar.TriggerBullet.destroyDelay)
  return _internal_destroydelay();
}
inline void TriggerBullet::_internal_set_destroydelay(float value) {
  
  destroydelay_ = value;
}
inline void TriggerBullet::set_destroydelay(float value) {
  _internal_set_destroydelay(value);
  // @@protoc_insertion_point(field_set:PlaneWar.TriggerBullet.destroyDelay)
}

// int32 hitRatio = 14;
inline void TriggerBullet::clear_hitratio() {
  hitratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TriggerBullet::_internal_hitratio() const {
  return hitratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TriggerBullet::hitratio() const {
  // @@protoc_insertion_point(field_get:PlaneWar.TriggerBullet.hitRatio)
  return _internal_hitratio();
}
inline void TriggerBullet::_internal_set_hitratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hitratio_ = value;
}
inline void TriggerBullet::set_hitratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hitratio(value);
  // @@protoc_insertion_point(field_set:PlaneWar.TriggerBullet.hitRatio)
}

// -------------------------------------------------------------------

// Roulette

// int32 outerIndex = 1;
inline void Roulette::clear_outerindex() {
  outerindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Roulette::_internal_outerindex() const {
  return outerindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Roulette::outerindex() const {
  // @@protoc_insertion_point(field_get:PlaneWar.Roulette.outerIndex)
  return _internal_outerindex();
}
inline void Roulette::_internal_set_outerindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  outerindex_ = value;
}
inline void Roulette::set_outerindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_outerindex(value);
  // @@protoc_insertion_point(field_set:PlaneWar.Roulette.outerIndex)
}

// int32 innerIndex = 2;
inline void Roulette::clear_innerindex() {
  innerindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Roulette::_internal_innerindex() const {
  return innerindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Roulette::innerindex() const {
  // @@protoc_insertion_point(field_get:PlaneWar.Roulette.innerIndex)
  return _internal_innerindex();
}
inline void Roulette::_internal_set_innerindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  innerindex_ = value;
}
inline void Roulette::set_innerindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_innerindex(value);
  // @@protoc_insertion_point(field_set:PlaneWar.Roulette.innerIndex)
}

// repeated int32 outerRound = 3;
inline int Roulette::_internal_outerround_size() const {
  return outerround_.size();
}
inline int Roulette::outerround_size() const {
  return _internal_outerround_size();
}
inline void Roulette::clear_outerround() {
  outerround_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Roulette::_internal_outerround(int index) const {
  return outerround_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Roulette::outerround(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.Roulette.outerRound)
  return _internal_outerround(index);
}
inline void Roulette::set_outerround(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  outerround_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlaneWar.Roulette.outerRound)
}
inline void Roulette::_internal_add_outerround(::PROTOBUF_NAMESPACE_ID::int32 value) {
  outerround_.Add(value);
}
inline void Roulette::add_outerround(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_outerround(value);
  // @@protoc_insertion_point(field_add:PlaneWar.Roulette.outerRound)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Roulette::_internal_outerround() const {
  return outerround_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Roulette::outerround() const {
  // @@protoc_insertion_point(field_list:PlaneWar.Roulette.outerRound)
  return _internal_outerround();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Roulette::_internal_mutable_outerround() {
  return &outerround_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Roulette::mutable_outerround() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.Roulette.outerRound)
  return _internal_mutable_outerround();
}

// repeated int32 innerRound = 4;
inline int Roulette::_internal_innerround_size() const {
  return innerround_.size();
}
inline int Roulette::innerround_size() const {
  return _internal_innerround_size();
}
inline void Roulette::clear_innerround() {
  innerround_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Roulette::_internal_innerround(int index) const {
  return innerround_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Roulette::innerround(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.Roulette.innerRound)
  return _internal_innerround(index);
}
inline void Roulette::set_innerround(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  innerround_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlaneWar.Roulette.innerRound)
}
inline void Roulette::_internal_add_innerround(::PROTOBUF_NAMESPACE_ID::int32 value) {
  innerround_.Add(value);
}
inline void Roulette::add_innerround(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_innerround(value);
  // @@protoc_insertion_point(field_add:PlaneWar.Roulette.innerRound)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Roulette::_internal_innerround() const {
  return innerround_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Roulette::innerround() const {
  // @@protoc_insertion_point(field_list:PlaneWar.Roulette.innerRound)
  return _internal_innerround();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Roulette::_internal_mutable_innerround() {
  return &innerround_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Roulette::mutable_innerround() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.Roulette.innerRound)
  return _internal_mutable_innerround();
}

// -------------------------------------------------------------------

// DropBuff

// int32 buffUID = 1;
inline void DropBuff::clear_buffuid() {
  buffuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DropBuff::_internal_buffuid() const {
  return buffuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DropBuff::buffuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.DropBuff.buffUID)
  return _internal_buffuid();
}
inline void DropBuff::_internal_set_buffuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  buffuid_ = value;
}
inline void DropBuff::set_buffuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_buffuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.DropBuff.buffUID)
}

// int32 num = 2;
inline void DropBuff::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DropBuff::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DropBuff::num() const {
  // @@protoc_insertion_point(field_get:PlaneWar.DropBuff.num)
  return _internal_num();
}
inline void DropBuff::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void DropBuff::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:PlaneWar.DropBuff.num)
}

// repeated int32 compose = 3;
inline int DropBuff::_internal_compose_size() const {
  return compose_.size();
}
inline int DropBuff::compose_size() const {
  return _internal_compose_size();
}
inline void DropBuff::clear_compose() {
  compose_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DropBuff::_internal_compose(int index) const {
  return compose_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DropBuff::compose(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.DropBuff.compose)
  return _internal_compose(index);
}
inline void DropBuff::set_compose(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  compose_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlaneWar.DropBuff.compose)
}
inline void DropBuff::_internal_add_compose(::PROTOBUF_NAMESPACE_ID::int32 value) {
  compose_.Add(value);
}
inline void DropBuff::add_compose(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_compose(value);
  // @@protoc_insertion_point(field_add:PlaneWar.DropBuff.compose)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DropBuff::_internal_compose() const {
  return compose_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DropBuff::compose() const {
  // @@protoc_insertion_point(field_list:PlaneWar.DropBuff.compose)
  return _internal_compose();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DropBuff::_internal_mutable_compose() {
  return &compose_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DropBuff::mutable_compose() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.DropBuff.compose)
  return _internal_mutable_compose();
}

// repeated int32 desc = 4;
inline int DropBuff::_internal_desc_size() const {
  return desc_.size();
}
inline int DropBuff::desc_size() const {
  return _internal_desc_size();
}
inline void DropBuff::clear_desc() {
  desc_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DropBuff::_internal_desc(int index) const {
  return desc_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DropBuff::desc(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.DropBuff.desc)
  return _internal_desc(index);
}
inline void DropBuff::set_desc(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  desc_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlaneWar.DropBuff.desc)
}
inline void DropBuff::_internal_add_desc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  desc_.Add(value);
}
inline void DropBuff::add_desc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_desc(value);
  // @@protoc_insertion_point(field_add:PlaneWar.DropBuff.desc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DropBuff::_internal_desc() const {
  return desc_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DropBuff::desc() const {
  // @@protoc_insertion_point(field_list:PlaneWar.DropBuff.desc)
  return _internal_desc();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DropBuff::_internal_mutable_desc() {
  return &desc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DropBuff::mutable_desc() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.DropBuff.desc)
  return _internal_mutable_desc();
}

// int32 speedUpRatio = 5;
inline void DropBuff::clear_speedupratio() {
  speedupratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DropBuff::_internal_speedupratio() const {
  return speedupratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DropBuff::speedupratio() const {
  // @@protoc_insertion_point(field_get:PlaneWar.DropBuff.speedUpRatio)
  return _internal_speedupratio();
}
inline void DropBuff::_internal_set_speedupratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  speedupratio_ = value;
}
inline void DropBuff::set_speedupratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speedupratio(value);
  // @@protoc_insertion_point(field_set:PlaneWar.DropBuff.speedUpRatio)
}

// -------------------------------------------------------------------

// FakeTresureInfo

// int32 type = 1;
inline void FakeTresureInfo::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FakeTresureInfo::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FakeTresureInfo::type() const {
  // @@protoc_insertion_point(field_get:PlaneWar.FakeTresureInfo.type)
  return _internal_type();
}
inline void FakeTresureInfo::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void FakeTresureInfo::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PlaneWar.FakeTresureInfo.type)
}

// int32 propID = 2;
inline void FakeTresureInfo::clear_propid() {
  propid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FakeTresureInfo::_internal_propid() const {
  return propid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FakeTresureInfo::propid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.FakeTresureInfo.propID)
  return _internal_propid();
}
inline void FakeTresureInfo::_internal_set_propid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  propid_ = value;
}
inline void FakeTresureInfo::set_propid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_propid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.FakeTresureInfo.propID)
}

// int32 num = 3;
inline void FakeTresureInfo::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FakeTresureInfo::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FakeTresureInfo::num() const {
  // @@protoc_insertion_point(field_get:PlaneWar.FakeTresureInfo.num)
  return _internal_num();
}
inline void FakeTresureInfo::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void FakeTresureInfo::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:PlaneWar.FakeTresureInfo.num)
}

// -------------------------------------------------------------------

// TreasureInfo

// int32 showType = 1;
inline void TreasureInfo::clear_showtype() {
  showtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TreasureInfo::_internal_showtype() const {
  return showtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TreasureInfo::showtype() const {
  // @@protoc_insertion_point(field_get:PlaneWar.TreasureInfo.showType)
  return _internal_showtype();
}
inline void TreasureInfo::_internal_set_showtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  showtype_ = value;
}
inline void TreasureInfo::set_showtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_showtype(value);
  // @@protoc_insertion_point(field_set:PlaneWar.TreasureInfo.showType)
}

// int32 type = 2;
inline void TreasureInfo::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TreasureInfo::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TreasureInfo::type() const {
  // @@protoc_insertion_point(field_get:PlaneWar.TreasureInfo.type)
  return _internal_type();
}
inline void TreasureInfo::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void TreasureInfo::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PlaneWar.TreasureInfo.type)
}

// int32 propID = 3;
inline void TreasureInfo::clear_propid() {
  propid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TreasureInfo::_internal_propid() const {
  return propid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TreasureInfo::propid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.TreasureInfo.propID)
  return _internal_propid();
}
inline void TreasureInfo::_internal_set_propid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  propid_ = value;
}
inline void TreasureInfo::set_propid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_propid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.TreasureInfo.propID)
}

// int32 num = 4;
inline void TreasureInfo::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TreasureInfo::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TreasureInfo::num() const {
  // @@protoc_insertion_point(field_get:PlaneWar.TreasureInfo.num)
  return _internal_num();
}
inline void TreasureInfo::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void TreasureInfo::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:PlaneWar.TreasureInfo.num)
}

// int32 fakeType = 5;
inline void TreasureInfo::clear_faketype() {
  faketype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TreasureInfo::_internal_faketype() const {
  return faketype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TreasureInfo::faketype() const {
  // @@protoc_insertion_point(field_get:PlaneWar.TreasureInfo.fakeType)
  return _internal_faketype();
}
inline void TreasureInfo::_internal_set_faketype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  faketype_ = value;
}
inline void TreasureInfo::set_faketype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_faketype(value);
  // @@protoc_insertion_point(field_set:PlaneWar.TreasureInfo.fakeType)
}

// .PlaneWar.FakeTresureInfo fakeInfo = 6;
inline bool TreasureInfo::_internal_has_fakeinfo() const {
  return this != internal_default_instance() && fakeinfo_ != nullptr;
}
inline bool TreasureInfo::has_fakeinfo() const {
  return _internal_has_fakeinfo();
}
inline void TreasureInfo::clear_fakeinfo() {
  if (GetArena() == nullptr && fakeinfo_ != nullptr) {
    delete fakeinfo_;
  }
  fakeinfo_ = nullptr;
}
inline const ::PlaneWar::FakeTresureInfo& TreasureInfo::_internal_fakeinfo() const {
  const ::PlaneWar::FakeTresureInfo* p = fakeinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::FakeTresureInfo&>(
      ::PlaneWar::_FakeTresureInfo_default_instance_);
}
inline const ::PlaneWar::FakeTresureInfo& TreasureInfo::fakeinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.TreasureInfo.fakeInfo)
  return _internal_fakeinfo();
}
inline void TreasureInfo::unsafe_arena_set_allocated_fakeinfo(
    ::PlaneWar::FakeTresureInfo* fakeinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fakeinfo_);
  }
  fakeinfo_ = fakeinfo;
  if (fakeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.TreasureInfo.fakeInfo)
}
inline ::PlaneWar::FakeTresureInfo* TreasureInfo::release_fakeinfo() {
  
  ::PlaneWar::FakeTresureInfo* temp = fakeinfo_;
  fakeinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::FakeTresureInfo* TreasureInfo::unsafe_arena_release_fakeinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.TreasureInfo.fakeInfo)
  
  ::PlaneWar::FakeTresureInfo* temp = fakeinfo_;
  fakeinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::FakeTresureInfo* TreasureInfo::_internal_mutable_fakeinfo() {
  
  if (fakeinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::FakeTresureInfo>(GetArena());
    fakeinfo_ = p;
  }
  return fakeinfo_;
}
inline ::PlaneWar::FakeTresureInfo* TreasureInfo::mutable_fakeinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.TreasureInfo.fakeInfo)
  return _internal_mutable_fakeinfo();
}
inline void TreasureInfo::set_allocated_fakeinfo(::PlaneWar::FakeTresureInfo* fakeinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fakeinfo_;
  }
  if (fakeinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fakeinfo);
    if (message_arena != submessage_arena) {
      fakeinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fakeinfo, submessage_arena);
    }
    
  } else {
    
  }
  fakeinfo_ = fakeinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.TreasureInfo.fakeInfo)
}

// -------------------------------------------------------------------

// FortuneWheelInfo

// int32 stage = 1;
inline void FortuneWheelInfo::clear_stage() {
  stage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FortuneWheelInfo::_internal_stage() const {
  return stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FortuneWheelInfo::stage() const {
  // @@protoc_insertion_point(field_get:PlaneWar.FortuneWheelInfo.stage)
  return _internal_stage();
}
inline void FortuneWheelInfo::_internal_set_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stage_ = value;
}
inline void FortuneWheelInfo::set_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:PlaneWar.FortuneWheelInfo.stage)
}

// int32 ratio = 2;
inline void FortuneWheelInfo::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FortuneWheelInfo::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FortuneWheelInfo::ratio() const {
  // @@protoc_insertion_point(field_get:PlaneWar.FortuneWheelInfo.ratio)
  return _internal_ratio();
}
inline void FortuneWheelInfo::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void FortuneWheelInfo::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:PlaneWar.FortuneWheelInfo.ratio)
}

// bool next = 3;
inline void FortuneWheelInfo::clear_next() {
  next_ = false;
}
inline bool FortuneWheelInfo::_internal_next() const {
  return next_;
}
inline bool FortuneWheelInfo::next() const {
  // @@protoc_insertion_point(field_get:PlaneWar.FortuneWheelInfo.next)
  return _internal_next();
}
inline void FortuneWheelInfo::_internal_set_next(bool value) {
  
  next_ = value;
}
inline void FortuneWheelInfo::set_next(bool value) {
  _internal_set_next(value);
  // @@protoc_insertion_point(field_set:PlaneWar.FortuneWheelInfo.next)
}

// int32 color = 4;
inline void FortuneWheelInfo::clear_color() {
  color_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FortuneWheelInfo::_internal_color() const {
  return color_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FortuneWheelInfo::color() const {
  // @@protoc_insertion_point(field_get:PlaneWar.FortuneWheelInfo.color)
  return _internal_color();
}
inline void FortuneWheelInfo::_internal_set_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  color_ = value;
}
inline void FortuneWheelInfo::set_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:PlaneWar.FortuneWheelInfo.color)
}

// -------------------------------------------------------------------

// ToadInfo

// repeated int32 ratioList = 1;
inline int ToadInfo::_internal_ratiolist_size() const {
  return ratiolist_.size();
}
inline int ToadInfo::ratiolist_size() const {
  return _internal_ratiolist_size();
}
inline void ToadInfo::clear_ratiolist() {
  ratiolist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ToadInfo::_internal_ratiolist(int index) const {
  return ratiolist_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ToadInfo::ratiolist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.ToadInfo.ratioList)
  return _internal_ratiolist(index);
}
inline void ToadInfo::set_ratiolist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  ratiolist_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlaneWar.ToadInfo.ratioList)
}
inline void ToadInfo::_internal_add_ratiolist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ratiolist_.Add(value);
}
inline void ToadInfo::add_ratiolist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_ratiolist(value);
  // @@protoc_insertion_point(field_add:PlaneWar.ToadInfo.ratioList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ToadInfo::_internal_ratiolist() const {
  return ratiolist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ToadInfo::ratiolist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.ToadInfo.ratioList)
  return _internal_ratiolist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ToadInfo::_internal_mutable_ratiolist() {
  return &ratiolist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ToadInfo::mutable_ratiolist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.ToadInfo.ratioList)
  return _internal_mutable_ratiolist();
}

// int32 critical = 2;
inline void ToadInfo::clear_critical() {
  critical_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ToadInfo::_internal_critical() const {
  return critical_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ToadInfo::critical() const {
  // @@protoc_insertion_point(field_get:PlaneWar.ToadInfo.critical)
  return _internal_critical();
}
inline void ToadInfo::_internal_set_critical(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  critical_ = value;
}
inline void ToadInfo::set_critical(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_critical(value);
  // @@protoc_insertion_point(field_set:PlaneWar.ToadInfo.critical)
}

// -------------------------------------------------------------------

// FortuneConfig

// repeated .PlaneWar.FortuneWheelInfo fortuneWheelInfo = 1;
inline int FortuneConfig::_internal_fortunewheelinfo_size() const {
  return fortunewheelinfo_.size();
}
inline int FortuneConfig::fortunewheelinfo_size() const {
  return _internal_fortunewheelinfo_size();
}
inline void FortuneConfig::clear_fortunewheelinfo() {
  fortunewheelinfo_.Clear();
}
inline ::PlaneWar::FortuneWheelInfo* FortuneConfig::mutable_fortunewheelinfo(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.FortuneConfig.fortuneWheelInfo)
  return fortunewheelinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::FortuneWheelInfo >*
FortuneConfig::mutable_fortunewheelinfo() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.FortuneConfig.fortuneWheelInfo)
  return &fortunewheelinfo_;
}
inline const ::PlaneWar::FortuneWheelInfo& FortuneConfig::_internal_fortunewheelinfo(int index) const {
  return fortunewheelinfo_.Get(index);
}
inline const ::PlaneWar::FortuneWheelInfo& FortuneConfig::fortunewheelinfo(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.FortuneConfig.fortuneWheelInfo)
  return _internal_fortunewheelinfo(index);
}
inline ::PlaneWar::FortuneWheelInfo* FortuneConfig::_internal_add_fortunewheelinfo() {
  return fortunewheelinfo_.Add();
}
inline ::PlaneWar::FortuneWheelInfo* FortuneConfig::add_fortunewheelinfo() {
  // @@protoc_insertion_point(field_add:PlaneWar.FortuneConfig.fortuneWheelInfo)
  return _internal_add_fortunewheelinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::FortuneWheelInfo >&
FortuneConfig::fortunewheelinfo() const {
  // @@protoc_insertion_point(field_list:PlaneWar.FortuneConfig.fortuneWheelInfo)
  return fortunewheelinfo_;
}

// -------------------------------------------------------------------

// BeeConfig

// repeated int32 aList = 1;
inline int BeeConfig::_internal_alist_size() const {
  return alist_.size();
}
inline int BeeConfig::alist_size() const {
  return _internal_alist_size();
}
inline void BeeConfig::clear_alist() {
  alist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BeeConfig::_internal_alist(int index) const {
  return alist_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BeeConfig::alist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.BeeConfig.aList)
  return _internal_alist(index);
}
inline void BeeConfig::set_alist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  alist_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlaneWar.BeeConfig.aList)
}
inline void BeeConfig::_internal_add_alist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  alist_.Add(value);
}
inline void BeeConfig::add_alist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_alist(value);
  // @@protoc_insertion_point(field_add:PlaneWar.BeeConfig.aList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BeeConfig::_internal_alist() const {
  return alist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BeeConfig::alist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.BeeConfig.aList)
  return _internal_alist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BeeConfig::_internal_mutable_alist() {
  return &alist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BeeConfig::mutable_alist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.BeeConfig.aList)
  return _internal_mutable_alist();
}

// repeated int32 bList = 2;
inline int BeeConfig::_internal_blist_size() const {
  return blist_.size();
}
inline int BeeConfig::blist_size() const {
  return _internal_blist_size();
}
inline void BeeConfig::clear_blist() {
  blist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BeeConfig::_internal_blist(int index) const {
  return blist_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BeeConfig::blist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.BeeConfig.bList)
  return _internal_blist(index);
}
inline void BeeConfig::set_blist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  blist_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlaneWar.BeeConfig.bList)
}
inline void BeeConfig::_internal_add_blist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  blist_.Add(value);
}
inline void BeeConfig::add_blist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_blist(value);
  // @@protoc_insertion_point(field_add:PlaneWar.BeeConfig.bList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BeeConfig::_internal_blist() const {
  return blist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BeeConfig::blist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.BeeConfig.bList)
  return _internal_blist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BeeConfig::_internal_mutable_blist() {
  return &blist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BeeConfig::mutable_blist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.BeeConfig.bList)
  return _internal_mutable_blist();
}

// repeated int32 cList = 3;
inline int BeeConfig::_internal_clist_size() const {
  return clist_.size();
}
inline int BeeConfig::clist_size() const {
  return _internal_clist_size();
}
inline void BeeConfig::clear_clist() {
  clist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BeeConfig::_internal_clist(int index) const {
  return clist_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BeeConfig::clist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.BeeConfig.cList)
  return _internal_clist(index);
}
inline void BeeConfig::set_clist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  clist_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlaneWar.BeeConfig.cList)
}
inline void BeeConfig::_internal_add_clist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  clist_.Add(value);
}
inline void BeeConfig::add_clist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_clist(value);
  // @@protoc_insertion_point(field_add:PlaneWar.BeeConfig.cList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BeeConfig::_internal_clist() const {
  return clist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BeeConfig::clist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.BeeConfig.cList)
  return _internal_clist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BeeConfig::_internal_mutable_clist() {
  return &clist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BeeConfig::mutable_clist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.BeeConfig.cList)
  return _internal_mutable_clist();
}

// -------------------------------------------------------------------

// CommonReplayConfig

// int32 maxLen = 1;
inline void CommonReplayConfig::clear_maxlen() {
  maxlen_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonReplayConfig::_internal_maxlen() const {
  return maxlen_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonReplayConfig::maxlen() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CommonReplayConfig.maxLen)
  return _internal_maxlen();
}
inline void CommonReplayConfig::_internal_set_maxlen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxlen_ = value;
}
inline void CommonReplayConfig::set_maxlen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxlen(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CommonReplayConfig.maxLen)
}

// int32 limitReward = 2;
inline void CommonReplayConfig::clear_limitreward() {
  limitreward_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonReplayConfig::_internal_limitreward() const {
  return limitreward_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonReplayConfig::limitreward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CommonReplayConfig.limitReward)
  return _internal_limitreward();
}
inline void CommonReplayConfig::_internal_set_limitreward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limitreward_ = value;
}
inline void CommonReplayConfig::set_limitreward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limitreward(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CommonReplayConfig.limitReward)
}

// int32 limitMul = 3;
inline void CommonReplayConfig::clear_limitmul() {
  limitmul_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonReplayConfig::_internal_limitmul() const {
  return limitmul_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonReplayConfig::limitmul() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CommonReplayConfig.limitMul)
  return _internal_limitmul();
}
inline void CommonReplayConfig::_internal_set_limitmul(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limitmul_ = value;
}
inline void CommonReplayConfig::set_limitmul(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limitmul(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CommonReplayConfig.limitMul)
}

// -------------------------------------------------------------------

// GlobalReplayConfig

// .PlaneWar.CommonReplayConfig commonReplayConfig = 1;
inline bool GlobalReplayConfig::_internal_has_commonreplayconfig() const {
  return this != internal_default_instance() && commonreplayconfig_ != nullptr;
}
inline bool GlobalReplayConfig::has_commonreplayconfig() const {
  return _internal_has_commonreplayconfig();
}
inline void GlobalReplayConfig::clear_commonreplayconfig() {
  if (GetArena() == nullptr && commonreplayconfig_ != nullptr) {
    delete commonreplayconfig_;
  }
  commonreplayconfig_ = nullptr;
}
inline const ::PlaneWar::CommonReplayConfig& GlobalReplayConfig::_internal_commonreplayconfig() const {
  const ::PlaneWar::CommonReplayConfig* p = commonreplayconfig_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::CommonReplayConfig&>(
      ::PlaneWar::_CommonReplayConfig_default_instance_);
}
inline const ::PlaneWar::CommonReplayConfig& GlobalReplayConfig::commonreplayconfig() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GlobalReplayConfig.commonReplayConfig)
  return _internal_commonreplayconfig();
}
inline void GlobalReplayConfig::unsafe_arena_set_allocated_commonreplayconfig(
    ::PlaneWar::CommonReplayConfig* commonreplayconfig) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commonreplayconfig_);
  }
  commonreplayconfig_ = commonreplayconfig;
  if (commonreplayconfig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.GlobalReplayConfig.commonReplayConfig)
}
inline ::PlaneWar::CommonReplayConfig* GlobalReplayConfig::release_commonreplayconfig() {
  
  ::PlaneWar::CommonReplayConfig* temp = commonreplayconfig_;
  commonreplayconfig_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::CommonReplayConfig* GlobalReplayConfig::unsafe_arena_release_commonreplayconfig() {
  // @@protoc_insertion_point(field_release:PlaneWar.GlobalReplayConfig.commonReplayConfig)
  
  ::PlaneWar::CommonReplayConfig* temp = commonreplayconfig_;
  commonreplayconfig_ = nullptr;
  return temp;
}
inline ::PlaneWar::CommonReplayConfig* GlobalReplayConfig::_internal_mutable_commonreplayconfig() {
  
  if (commonreplayconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::CommonReplayConfig>(GetArena());
    commonreplayconfig_ = p;
  }
  return commonreplayconfig_;
}
inline ::PlaneWar::CommonReplayConfig* GlobalReplayConfig::mutable_commonreplayconfig() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.GlobalReplayConfig.commonReplayConfig)
  return _internal_mutable_commonreplayconfig();
}
inline void GlobalReplayConfig::set_allocated_commonreplayconfig(::PlaneWar::CommonReplayConfig* commonreplayconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete commonreplayconfig_;
  }
  if (commonreplayconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(commonreplayconfig);
    if (message_arena != submessage_arena) {
      commonreplayconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commonreplayconfig, submessage_arena);
    }
    
  } else {
    
  }
  commonreplayconfig_ = commonreplayconfig;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.GlobalReplayConfig.commonReplayConfig)
}

// int32 refreshTime = 2;
inline void GlobalReplayConfig::clear_refreshtime() {
  refreshtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GlobalReplayConfig::_internal_refreshtime() const {
  return refreshtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GlobalReplayConfig::refreshtime() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GlobalReplayConfig.refreshTime)
  return _internal_refreshtime();
}
inline void GlobalReplayConfig::_internal_set_refreshtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  refreshtime_ = value;
}
inline void GlobalReplayConfig::set_refreshtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_refreshtime(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GlobalReplayConfig.refreshTime)
}

// -------------------------------------------------------------------

// PersonalReplayConfig

// .PlaneWar.CommonReplayConfig commonReplayConfig = 1;
inline bool PersonalReplayConfig::_internal_has_commonreplayconfig() const {
  return this != internal_default_instance() && commonreplayconfig_ != nullptr;
}
inline bool PersonalReplayConfig::has_commonreplayconfig() const {
  return _internal_has_commonreplayconfig();
}
inline void PersonalReplayConfig::clear_commonreplayconfig() {
  if (GetArena() == nullptr && commonreplayconfig_ != nullptr) {
    delete commonreplayconfig_;
  }
  commonreplayconfig_ = nullptr;
}
inline const ::PlaneWar::CommonReplayConfig& PersonalReplayConfig::_internal_commonreplayconfig() const {
  const ::PlaneWar::CommonReplayConfig* p = commonreplayconfig_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::CommonReplayConfig&>(
      ::PlaneWar::_CommonReplayConfig_default_instance_);
}
inline const ::PlaneWar::CommonReplayConfig& PersonalReplayConfig::commonreplayconfig() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PersonalReplayConfig.commonReplayConfig)
  return _internal_commonreplayconfig();
}
inline void PersonalReplayConfig::unsafe_arena_set_allocated_commonreplayconfig(
    ::PlaneWar::CommonReplayConfig* commonreplayconfig) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commonreplayconfig_);
  }
  commonreplayconfig_ = commonreplayconfig;
  if (commonreplayconfig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.PersonalReplayConfig.commonReplayConfig)
}
inline ::PlaneWar::CommonReplayConfig* PersonalReplayConfig::release_commonreplayconfig() {
  
  ::PlaneWar::CommonReplayConfig* temp = commonreplayconfig_;
  commonreplayconfig_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::CommonReplayConfig* PersonalReplayConfig::unsafe_arena_release_commonreplayconfig() {
  // @@protoc_insertion_point(field_release:PlaneWar.PersonalReplayConfig.commonReplayConfig)
  
  ::PlaneWar::CommonReplayConfig* temp = commonreplayconfig_;
  commonreplayconfig_ = nullptr;
  return temp;
}
inline ::PlaneWar::CommonReplayConfig* PersonalReplayConfig::_internal_mutable_commonreplayconfig() {
  
  if (commonreplayconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::CommonReplayConfig>(GetArena());
    commonreplayconfig_ = p;
  }
  return commonreplayconfig_;
}
inline ::PlaneWar::CommonReplayConfig* PersonalReplayConfig::mutable_commonreplayconfig() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.PersonalReplayConfig.commonReplayConfig)
  return _internal_mutable_commonreplayconfig();
}
inline void PersonalReplayConfig::set_allocated_commonreplayconfig(::PlaneWar::CommonReplayConfig* commonreplayconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete commonreplayconfig_;
  }
  if (commonreplayconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(commonreplayconfig);
    if (message_arena != submessage_arena) {
      commonreplayconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commonreplayconfig, submessage_arena);
    }
    
  } else {
    
  }
  commonreplayconfig_ = commonreplayconfig;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.PersonalReplayConfig.commonReplayConfig)
}

// -------------------------------------------------------------------

// ReplayConfig

// .PlaneWar.GlobalReplayConfig globalReplayConfig = 1;
inline bool ReplayConfig::_internal_has_globalreplayconfig() const {
  return this != internal_default_instance() && globalreplayconfig_ != nullptr;
}
inline bool ReplayConfig::has_globalreplayconfig() const {
  return _internal_has_globalreplayconfig();
}
inline void ReplayConfig::clear_globalreplayconfig() {
  if (GetArena() == nullptr && globalreplayconfig_ != nullptr) {
    delete globalreplayconfig_;
  }
  globalreplayconfig_ = nullptr;
}
inline const ::PlaneWar::GlobalReplayConfig& ReplayConfig::_internal_globalreplayconfig() const {
  const ::PlaneWar::GlobalReplayConfig* p = globalreplayconfig_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::GlobalReplayConfig&>(
      ::PlaneWar::_GlobalReplayConfig_default_instance_);
}
inline const ::PlaneWar::GlobalReplayConfig& ReplayConfig::globalreplayconfig() const {
  // @@protoc_insertion_point(field_get:PlaneWar.ReplayConfig.globalReplayConfig)
  return _internal_globalreplayconfig();
}
inline void ReplayConfig::unsafe_arena_set_allocated_globalreplayconfig(
    ::PlaneWar::GlobalReplayConfig* globalreplayconfig) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(globalreplayconfig_);
  }
  globalreplayconfig_ = globalreplayconfig;
  if (globalreplayconfig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.ReplayConfig.globalReplayConfig)
}
inline ::PlaneWar::GlobalReplayConfig* ReplayConfig::release_globalreplayconfig() {
  
  ::PlaneWar::GlobalReplayConfig* temp = globalreplayconfig_;
  globalreplayconfig_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::GlobalReplayConfig* ReplayConfig::unsafe_arena_release_globalreplayconfig() {
  // @@protoc_insertion_point(field_release:PlaneWar.ReplayConfig.globalReplayConfig)
  
  ::PlaneWar::GlobalReplayConfig* temp = globalreplayconfig_;
  globalreplayconfig_ = nullptr;
  return temp;
}
inline ::PlaneWar::GlobalReplayConfig* ReplayConfig::_internal_mutable_globalreplayconfig() {
  
  if (globalreplayconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::GlobalReplayConfig>(GetArena());
    globalreplayconfig_ = p;
  }
  return globalreplayconfig_;
}
inline ::PlaneWar::GlobalReplayConfig* ReplayConfig::mutable_globalreplayconfig() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.ReplayConfig.globalReplayConfig)
  return _internal_mutable_globalreplayconfig();
}
inline void ReplayConfig::set_allocated_globalreplayconfig(::PlaneWar::GlobalReplayConfig* globalreplayconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete globalreplayconfig_;
  }
  if (globalreplayconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(globalreplayconfig);
    if (message_arena != submessage_arena) {
      globalreplayconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, globalreplayconfig, submessage_arena);
    }
    
  } else {
    
  }
  globalreplayconfig_ = globalreplayconfig;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.ReplayConfig.globalReplayConfig)
}

// .PlaneWar.PersonalReplayConfig personalReplayConfig = 2;
inline bool ReplayConfig::_internal_has_personalreplayconfig() const {
  return this != internal_default_instance() && personalreplayconfig_ != nullptr;
}
inline bool ReplayConfig::has_personalreplayconfig() const {
  return _internal_has_personalreplayconfig();
}
inline void ReplayConfig::clear_personalreplayconfig() {
  if (GetArena() == nullptr && personalreplayconfig_ != nullptr) {
    delete personalreplayconfig_;
  }
  personalreplayconfig_ = nullptr;
}
inline const ::PlaneWar::PersonalReplayConfig& ReplayConfig::_internal_personalreplayconfig() const {
  const ::PlaneWar::PersonalReplayConfig* p = personalreplayconfig_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::PersonalReplayConfig&>(
      ::PlaneWar::_PersonalReplayConfig_default_instance_);
}
inline const ::PlaneWar::PersonalReplayConfig& ReplayConfig::personalreplayconfig() const {
  // @@protoc_insertion_point(field_get:PlaneWar.ReplayConfig.personalReplayConfig)
  return _internal_personalreplayconfig();
}
inline void ReplayConfig::unsafe_arena_set_allocated_personalreplayconfig(
    ::PlaneWar::PersonalReplayConfig* personalreplayconfig) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(personalreplayconfig_);
  }
  personalreplayconfig_ = personalreplayconfig;
  if (personalreplayconfig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.ReplayConfig.personalReplayConfig)
}
inline ::PlaneWar::PersonalReplayConfig* ReplayConfig::release_personalreplayconfig() {
  
  ::PlaneWar::PersonalReplayConfig* temp = personalreplayconfig_;
  personalreplayconfig_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::PersonalReplayConfig* ReplayConfig::unsafe_arena_release_personalreplayconfig() {
  // @@protoc_insertion_point(field_release:PlaneWar.ReplayConfig.personalReplayConfig)
  
  ::PlaneWar::PersonalReplayConfig* temp = personalreplayconfig_;
  personalreplayconfig_ = nullptr;
  return temp;
}
inline ::PlaneWar::PersonalReplayConfig* ReplayConfig::_internal_mutable_personalreplayconfig() {
  
  if (personalreplayconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::PersonalReplayConfig>(GetArena());
    personalreplayconfig_ = p;
  }
  return personalreplayconfig_;
}
inline ::PlaneWar::PersonalReplayConfig* ReplayConfig::mutable_personalreplayconfig() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.ReplayConfig.personalReplayConfig)
  return _internal_mutable_personalreplayconfig();
}
inline void ReplayConfig::set_allocated_personalreplayconfig(::PlaneWar::PersonalReplayConfig* personalreplayconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete personalreplayconfig_;
  }
  if (personalreplayconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(personalreplayconfig);
    if (message_arena != submessage_arena) {
      personalreplayconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, personalreplayconfig, submessage_arena);
    }
    
  } else {
    
  }
  personalreplayconfig_ = personalreplayconfig;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.ReplayConfig.personalReplayConfig)
}

// bool open = 3;
inline void ReplayConfig::clear_open() {
  open_ = false;
}
inline bool ReplayConfig::_internal_open() const {
  return open_;
}
inline bool ReplayConfig::open() const {
  // @@protoc_insertion_point(field_get:PlaneWar.ReplayConfig.open)
  return _internal_open();
}
inline void ReplayConfig::_internal_set_open(bool value) {
  
  open_ = value;
}
inline void ReplayConfig::set_open(bool value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:PlaneWar.ReplayConfig.open)
}

// -------------------------------------------------------------------

// ConnMonsterInfo

// int32 sourceUID = 1;
inline void ConnMonsterInfo::clear_sourceuid() {
  sourceuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConnMonsterInfo::_internal_sourceuid() const {
  return sourceuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConnMonsterInfo::sourceuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.ConnMonsterInfo.sourceUID)
  return _internal_sourceuid();
}
inline void ConnMonsterInfo::_internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sourceuid_ = value;
}
inline void ConnMonsterInfo::set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sourceuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.ConnMonsterInfo.sourceUID)
}

// int32 originUID = 2;
inline void ConnMonsterInfo::clear_originuid() {
  originuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConnMonsterInfo::_internal_originuid() const {
  return originuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConnMonsterInfo::originuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.ConnMonsterInfo.originUID)
  return _internal_originuid();
}
inline void ConnMonsterInfo::_internal_set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  originuid_ = value;
}
inline void ConnMonsterInfo::set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_originuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.ConnMonsterInfo.originUID)
}

// int32 ratio = 3;
inline void ConnMonsterInfo::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConnMonsterInfo::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConnMonsterInfo::ratio() const {
  // @@protoc_insertion_point(field_get:PlaneWar.ConnMonsterInfo.ratio)
  return _internal_ratio();
}
inline void ConnMonsterInfo::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void ConnMonsterInfo::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:PlaneWar.ConnMonsterInfo.ratio)
}

// repeated int32 connMonsterList = 4;
inline int ConnMonsterInfo::_internal_connmonsterlist_size() const {
  return connmonsterlist_.size();
}
inline int ConnMonsterInfo::connmonsterlist_size() const {
  return _internal_connmonsterlist_size();
}
inline void ConnMonsterInfo::clear_connmonsterlist() {
  connmonsterlist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConnMonsterInfo::_internal_connmonsterlist(int index) const {
  return connmonsterlist_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConnMonsterInfo::connmonsterlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.ConnMonsterInfo.connMonsterList)
  return _internal_connmonsterlist(index);
}
inline void ConnMonsterInfo::set_connmonsterlist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  connmonsterlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlaneWar.ConnMonsterInfo.connMonsterList)
}
inline void ConnMonsterInfo::_internal_add_connmonsterlist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  connmonsterlist_.Add(value);
}
inline void ConnMonsterInfo::add_connmonsterlist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_connmonsterlist(value);
  // @@protoc_insertion_point(field_add:PlaneWar.ConnMonsterInfo.connMonsterList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ConnMonsterInfo::_internal_connmonsterlist() const {
  return connmonsterlist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ConnMonsterInfo::connmonsterlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.ConnMonsterInfo.connMonsterList)
  return _internal_connmonsterlist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ConnMonsterInfo::_internal_mutable_connmonsterlist() {
  return &connmonsterlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ConnMonsterInfo::mutable_connmonsterlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.ConnMonsterInfo.connMonsterList)
  return _internal_mutable_connmonsterlist();
}

// -------------------------------------------------------------------

// CSHit

// int32 monsterUID = 1;
inline void CSHit::clear_monsteruid() {
  monsteruid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHit::_internal_monsteruid() const {
  return monsteruid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHit::monsteruid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSHit.monsterUID)
  return _internal_monsteruid();
}
inline void CSHit::_internal_set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  monsteruid_ = value;
}
inline void CSHit::set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_monsteruid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSHit.monsterUID)
}

// int32 ratio = 2;
inline void CSHit::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHit::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHit::ratio() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSHit.ratio)
  return _internal_ratio();
}
inline void CSHit::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void CSHit::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSHit.ratio)
}

// int32 bulletType = 3;
inline void CSHit::clear_bullettype() {
  bullettype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHit::_internal_bullettype() const {
  return bullettype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHit::bullettype() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSHit.bulletType)
  return _internal_bullettype();
}
inline void CSHit::_internal_set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bullettype_ = value;
}
inline void CSHit::set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bullettype(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSHit.bulletType)
}

// int32 sourceUID = 4;
inline void CSHit::clear_sourceuid() {
  sourceuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHit::_internal_sourceuid() const {
  return sourceuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHit::sourceuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSHit.sourceUID)
  return _internal_sourceuid();
}
inline void CSHit::_internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sourceuid_ = value;
}
inline void CSHit::set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sourceuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSHit.sourceUID)
}

// int32 generation = 5;
inline void CSHit::clear_generation() {
  generation_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHit::_internal_generation() const {
  return generation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHit::generation() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSHit.generation)
  return _internal_generation();
}
inline void CSHit::_internal_set_generation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  generation_ = value;
}
inline void CSHit::set_generation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_generation(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSHit.generation)
}

// int32 deductedMoney = 6;
inline void CSHit::clear_deductedmoney() {
  deductedmoney_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHit::_internal_deductedmoney() const {
  return deductedmoney_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHit::deductedmoney() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSHit.deductedMoney)
  return _internal_deductedmoney();
}
inline void CSHit::_internal_set_deductedmoney(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  deductedmoney_ = value;
}
inline void CSHit::set_deductedmoney(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_deductedmoney(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSHit.deductedMoney)
}

// int32 originUID = 7;
inline void CSHit::clear_originuid() {
  originuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHit::_internal_originuid() const {
  return originuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHit::originuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSHit.originUID)
  return _internal_originuid();
}
inline void CSHit::_internal_set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  originuid_ = value;
}
inline void CSHit::set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_originuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSHit.originUID)
}

// bool is_end = 8;
inline void CSHit::clear_is_end() {
  is_end_ = false;
}
inline bool CSHit::_internal_is_end() const {
  return is_end_;
}
inline bool CSHit::is_end() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSHit.is_end)
  return _internal_is_end();
}
inline void CSHit::_internal_set_is_end(bool value) {
  
  is_end_ = value;
}
inline void CSHit::set_is_end(bool value) {
  _internal_set_is_end(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSHit.is_end)
}

// -------------------------------------------------------------------

// SCHit

// bool isCaptured = 1;
inline void SCHit::clear_iscaptured() {
  iscaptured_ = false;
}
inline bool SCHit::_internal_iscaptured() const {
  return iscaptured_;
}
inline bool SCHit::iscaptured() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCHit.isCaptured)
  return _internal_iscaptured();
}
inline void SCHit::_internal_set_iscaptured(bool value) {
  
  iscaptured_ = value;
}
inline void SCHit::set_iscaptured(bool value) {
  _internal_set_iscaptured(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCHit.isCaptured)
}

// int32 chair = 2;
inline void SCHit::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHit::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHit::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCHit.chair)
  return _internal_chair();
}
inline void SCHit::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCHit::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCHit.chair)
}

// int32 monsterUID = 3;
inline void SCHit::clear_monsteruid() {
  monsteruid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHit::_internal_monsteruid() const {
  return monsteruid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHit::monsteruid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCHit.monsterUID)
  return _internal_monsteruid();
}
inline void SCHit::_internal_set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  monsteruid_ = value;
}
inline void SCHit::set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_monsteruid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCHit.monsterUID)
}

// int32 ratio = 4;
inline void SCHit::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHit::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHit::ratio() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCHit.ratio)
  return _internal_ratio();
}
inline void SCHit::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void SCHit::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCHit.ratio)
}

// int32 bulletType = 5;
inline void SCHit::clear_bullettype() {
  bullettype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHit::_internal_bullettype() const {
  return bullettype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHit::bullettype() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCHit.bulletType)
  return _internal_bullettype();
}
inline void SCHit::_internal_set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bullettype_ = value;
}
inline void SCHit::set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bullettype(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCHit.bulletType)
}

// int32 earn = 6;
inline void SCHit::clear_earn() {
  earn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHit::_internal_earn() const {
  return earn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHit::earn() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCHit.earn)
  return _internal_earn();
}
inline void SCHit::_internal_set_earn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  earn_ = value;
}
inline void SCHit::set_earn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_earn(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCHit.earn)
}

// int64 score = 7;
inline void SCHit::clear_score() {
  score_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCHit::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCHit::score() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCHit.score)
  return _internal_score();
}
inline void SCHit::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  score_ = value;
}
inline void SCHit::set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCHit.score)
}

// int32 baseValue = 8;
inline void SCHit::clear_basevalue() {
  basevalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHit::_internal_basevalue() const {
  return basevalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHit::basevalue() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCHit.baseValue)
  return _internal_basevalue();
}
inline void SCHit::_internal_set_basevalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  basevalue_ = value;
}
inline void SCHit::set_basevalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_basevalue(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCHit.baseValue)
}

// repeated int32 multipleList = 9;
inline int SCHit::_internal_multiplelist_size() const {
  return multiplelist_.size();
}
inline int SCHit::multiplelist_size() const {
  return _internal_multiplelist_size();
}
inline void SCHit::clear_multiplelist() {
  multiplelist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHit::_internal_multiplelist(int index) const {
  return multiplelist_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHit::multiplelist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCHit.multipleList)
  return _internal_multiplelist(index);
}
inline void SCHit::set_multiplelist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  multiplelist_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCHit.multipleList)
}
inline void SCHit::_internal_add_multiplelist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  multiplelist_.Add(value);
}
inline void SCHit::add_multiplelist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_multiplelist(value);
  // @@protoc_insertion_point(field_add:PlaneWar.SCHit.multipleList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCHit::_internal_multiplelist() const {
  return multiplelist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCHit::multiplelist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCHit.multipleList)
  return _internal_multiplelist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCHit::_internal_mutable_multiplelist() {
  return &multiplelist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCHit::mutable_multiplelist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCHit.multipleList)
  return _internal_mutable_multiplelist();
}

// repeated .PlaneWar.BuffInfo dropBuffList = 10;
inline int SCHit::_internal_dropbufflist_size() const {
  return dropbufflist_.size();
}
inline int SCHit::dropbufflist_size() const {
  return _internal_dropbufflist_size();
}
inline void SCHit::clear_dropbufflist() {
  dropbufflist_.Clear();
}
inline ::PlaneWar::BuffInfo* SCHit::mutable_dropbufflist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCHit.dropBuffList)
  return dropbufflist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::BuffInfo >*
SCHit::mutable_dropbufflist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCHit.dropBuffList)
  return &dropbufflist_;
}
inline const ::PlaneWar::BuffInfo& SCHit::_internal_dropbufflist(int index) const {
  return dropbufflist_.Get(index);
}
inline const ::PlaneWar::BuffInfo& SCHit::dropbufflist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCHit.dropBuffList)
  return _internal_dropbufflist(index);
}
inline ::PlaneWar::BuffInfo* SCHit::_internal_add_dropbufflist() {
  return dropbufflist_.Add();
}
inline ::PlaneWar::BuffInfo* SCHit::add_dropbufflist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCHit.dropBuffList)
  return _internal_add_dropbufflist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::BuffInfo >&
SCHit::dropbufflist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCHit.dropBuffList)
  return dropbufflist_;
}

// repeated .PlaneWar.TriggerBullet triggerBullet = 11;
inline int SCHit::_internal_triggerbullet_size() const {
  return triggerbullet_.size();
}
inline int SCHit::triggerbullet_size() const {
  return _internal_triggerbullet_size();
}
inline void SCHit::clear_triggerbullet() {
  triggerbullet_.Clear();
}
inline ::PlaneWar::TriggerBullet* SCHit::mutable_triggerbullet(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCHit.triggerBullet)
  return triggerbullet_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::TriggerBullet >*
SCHit::mutable_triggerbullet() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCHit.triggerBullet)
  return &triggerbullet_;
}
inline const ::PlaneWar::TriggerBullet& SCHit::_internal_triggerbullet(int index) const {
  return triggerbullet_.Get(index);
}
inline const ::PlaneWar::TriggerBullet& SCHit::triggerbullet(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCHit.triggerBullet)
  return _internal_triggerbullet(index);
}
inline ::PlaneWar::TriggerBullet* SCHit::_internal_add_triggerbullet() {
  return triggerbullet_.Add();
}
inline ::PlaneWar::TriggerBullet* SCHit::add_triggerbullet() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCHit.triggerBullet)
  return _internal_add_triggerbullet();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::TriggerBullet >&
SCHit::triggerbullet() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCHit.triggerBullet)
  return triggerbullet_;
}

// .PlaneWar.DropPoker dropPoker = 12;
inline bool SCHit::_internal_has_droppoker() const {
  return this != internal_default_instance() && droppoker_ != nullptr;
}
inline bool SCHit::has_droppoker() const {
  return _internal_has_droppoker();
}
inline void SCHit::clear_droppoker() {
  if (GetArena() == nullptr && droppoker_ != nullptr) {
    delete droppoker_;
  }
  droppoker_ = nullptr;
}
inline const ::PlaneWar::DropPoker& SCHit::_internal_droppoker() const {
  const ::PlaneWar::DropPoker* p = droppoker_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::DropPoker&>(
      ::PlaneWar::_DropPoker_default_instance_);
}
inline const ::PlaneWar::DropPoker& SCHit::droppoker() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCHit.dropPoker)
  return _internal_droppoker();
}
inline void SCHit::unsafe_arena_set_allocated_droppoker(
    ::PlaneWar::DropPoker* droppoker) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(droppoker_);
  }
  droppoker_ = droppoker;
  if (droppoker) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCHit.dropPoker)
}
inline ::PlaneWar::DropPoker* SCHit::release_droppoker() {
  
  ::PlaneWar::DropPoker* temp = droppoker_;
  droppoker_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::DropPoker* SCHit::unsafe_arena_release_droppoker() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCHit.dropPoker)
  
  ::PlaneWar::DropPoker* temp = droppoker_;
  droppoker_ = nullptr;
  return temp;
}
inline ::PlaneWar::DropPoker* SCHit::_internal_mutable_droppoker() {
  
  if (droppoker_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::DropPoker>(GetArena());
    droppoker_ = p;
  }
  return droppoker_;
}
inline ::PlaneWar::DropPoker* SCHit::mutable_droppoker() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCHit.dropPoker)
  return _internal_mutable_droppoker();
}
inline void SCHit::set_allocated_droppoker(::PlaneWar::DropPoker* droppoker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete droppoker_;
  }
  if (droppoker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(droppoker);
    if (message_arena != submessage_arena) {
      droppoker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, droppoker, submessage_arena);
    }
    
  } else {
    
  }
  droppoker_ = droppoker;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCHit.dropPoker)
}

// .PlaneWar.Roulette roulette = 13;
inline bool SCHit::_internal_has_roulette() const {
  return this != internal_default_instance() && roulette_ != nullptr;
}
inline bool SCHit::has_roulette() const {
  return _internal_has_roulette();
}
inline void SCHit::clear_roulette() {
  if (GetArena() == nullptr && roulette_ != nullptr) {
    delete roulette_;
  }
  roulette_ = nullptr;
}
inline const ::PlaneWar::Roulette& SCHit::_internal_roulette() const {
  const ::PlaneWar::Roulette* p = roulette_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::Roulette&>(
      ::PlaneWar::_Roulette_default_instance_);
}
inline const ::PlaneWar::Roulette& SCHit::roulette() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCHit.roulette)
  return _internal_roulette();
}
inline void SCHit::unsafe_arena_set_allocated_roulette(
    ::PlaneWar::Roulette* roulette) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roulette_);
  }
  roulette_ = roulette;
  if (roulette) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCHit.roulette)
}
inline ::PlaneWar::Roulette* SCHit::release_roulette() {
  
  ::PlaneWar::Roulette* temp = roulette_;
  roulette_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::Roulette* SCHit::unsafe_arena_release_roulette() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCHit.roulette)
  
  ::PlaneWar::Roulette* temp = roulette_;
  roulette_ = nullptr;
  return temp;
}
inline ::PlaneWar::Roulette* SCHit::_internal_mutable_roulette() {
  
  if (roulette_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::Roulette>(GetArena());
    roulette_ = p;
  }
  return roulette_;
}
inline ::PlaneWar::Roulette* SCHit::mutable_roulette() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCHit.roulette)
  return _internal_mutable_roulette();
}
inline void SCHit::set_allocated_roulette(::PlaneWar::Roulette* roulette) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete roulette_;
  }
  if (roulette) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(roulette);
    if (message_arena != submessage_arena) {
      roulette = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roulette, submessage_arena);
    }
    
  } else {
    
  }
  roulette_ = roulette;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCHit.roulette)
}

// int32 stage = 14;
inline void SCHit::clear_stage() {
  stage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHit::_internal_stage() const {
  return stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHit::stage() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCHit.stage)
  return _internal_stage();
}
inline void SCHit::_internal_set_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stage_ = value;
}
inline void SCHit::set_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCHit.stage)
}

// int32 dropCard = 15;
inline void SCHit::clear_dropcard() {
  dropcard_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHit::_internal_dropcard() const {
  return dropcard_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHit::dropcard() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCHit.dropCard)
  return _internal_dropcard();
}
inline void SCHit::_internal_set_dropcard(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dropcard_ = value;
}
inline void SCHit::set_dropcard(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dropcard(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCHit.dropCard)
}

// int32 originUID = 16;
inline void SCHit::clear_originuid() {
  originuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHit::_internal_originuid() const {
  return originuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHit::originuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCHit.originUID)
  return _internal_originuid();
}
inline void SCHit::_internal_set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  originuid_ = value;
}
inline void SCHit::set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_originuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCHit.originUID)
}

// int32 dropCall = 17;
inline void SCHit::clear_dropcall() {
  dropcall_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHit::_internal_dropcall() const {
  return dropcall_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHit::dropcall() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCHit.dropCall)
  return _internal_dropcall();
}
inline void SCHit::_internal_set_dropcall(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dropcall_ = value;
}
inline void SCHit::set_dropcall(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dropcall(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCHit.dropCall)
}

// int32 dropWeaponPiece = 18;
inline void SCHit::clear_dropweaponpiece() {
  dropweaponpiece_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHit::_internal_dropweaponpiece() const {
  return dropweaponpiece_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHit::dropweaponpiece() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCHit.dropWeaponPiece)
  return _internal_dropweaponpiece();
}
inline void SCHit::_internal_set_dropweaponpiece(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dropweaponpiece_ = value;
}
inline void SCHit::set_dropweaponpiece(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dropweaponpiece(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCHit.dropWeaponPiece)
}

// repeated .PlaneWar.TreasureInfo treasureList = 19;
inline int SCHit::_internal_treasurelist_size() const {
  return treasurelist_.size();
}
inline int SCHit::treasurelist_size() const {
  return _internal_treasurelist_size();
}
inline void SCHit::clear_treasurelist() {
  treasurelist_.Clear();
}
inline ::PlaneWar::TreasureInfo* SCHit::mutable_treasurelist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCHit.treasureList)
  return treasurelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::TreasureInfo >*
SCHit::mutable_treasurelist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCHit.treasureList)
  return &treasurelist_;
}
inline const ::PlaneWar::TreasureInfo& SCHit::_internal_treasurelist(int index) const {
  return treasurelist_.Get(index);
}
inline const ::PlaneWar::TreasureInfo& SCHit::treasurelist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCHit.treasureList)
  return _internal_treasurelist(index);
}
inline ::PlaneWar::TreasureInfo* SCHit::_internal_add_treasurelist() {
  return treasurelist_.Add();
}
inline ::PlaneWar::TreasureInfo* SCHit::add_treasurelist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCHit.treasureList)
  return _internal_add_treasurelist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::TreasureInfo >&
SCHit::treasurelist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCHit.treasureList)
  return treasurelist_;
}

// int32 weaponID = 20;
inline void SCHit::clear_weaponid() {
  weaponid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHit::_internal_weaponid() const {
  return weaponid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHit::weaponid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCHit.weaponID)
  return _internal_weaponid();
}
inline void SCHit::_internal_set_weaponid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  weaponid_ = value;
}
inline void SCHit::set_weaponid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_weaponid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCHit.weaponID)
}

// .PlaneWar.WeaponInfo weaponInfo = 21;
inline bool SCHit::_internal_has_weaponinfo() const {
  return this != internal_default_instance() && weaponinfo_ != nullptr;
}
inline bool SCHit::has_weaponinfo() const {
  return _internal_has_weaponinfo();
}
inline void SCHit::clear_weaponinfo() {
  if (GetArena() == nullptr && weaponinfo_ != nullptr) {
    delete weaponinfo_;
  }
  weaponinfo_ = nullptr;
}
inline const ::PlaneWar::WeaponInfo& SCHit::_internal_weaponinfo() const {
  const ::PlaneWar::WeaponInfo* p = weaponinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::WeaponInfo&>(
      ::PlaneWar::_WeaponInfo_default_instance_);
}
inline const ::PlaneWar::WeaponInfo& SCHit::weaponinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCHit.weaponInfo)
  return _internal_weaponinfo();
}
inline void SCHit::unsafe_arena_set_allocated_weaponinfo(
    ::PlaneWar::WeaponInfo* weaponinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(weaponinfo_);
  }
  weaponinfo_ = weaponinfo;
  if (weaponinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCHit.weaponInfo)
}
inline ::PlaneWar::WeaponInfo* SCHit::release_weaponinfo() {
  
  ::PlaneWar::WeaponInfo* temp = weaponinfo_;
  weaponinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::WeaponInfo* SCHit::unsafe_arena_release_weaponinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCHit.weaponInfo)
  
  ::PlaneWar::WeaponInfo* temp = weaponinfo_;
  weaponinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::WeaponInfo* SCHit::_internal_mutable_weaponinfo() {
  
  if (weaponinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::WeaponInfo>(GetArena());
    weaponinfo_ = p;
  }
  return weaponinfo_;
}
inline ::PlaneWar::WeaponInfo* SCHit::mutable_weaponinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCHit.weaponInfo)
  return _internal_mutable_weaponinfo();
}
inline void SCHit::set_allocated_weaponinfo(::PlaneWar::WeaponInfo* weaponinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete weaponinfo_;
  }
  if (weaponinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(weaponinfo);
    if (message_arena != submessage_arena) {
      weaponinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weaponinfo, submessage_arena);
    }
    
  } else {
    
  }
  weaponinfo_ = weaponinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCHit.weaponInfo)
}

// .PlaneWar.GunInfo gunInfo = 22;
inline bool SCHit::_internal_has_guninfo() const {
  return this != internal_default_instance() && guninfo_ != nullptr;
}
inline bool SCHit::has_guninfo() const {
  return _internal_has_guninfo();
}
inline void SCHit::clear_guninfo() {
  if (GetArena() == nullptr && guninfo_ != nullptr) {
    delete guninfo_;
  }
  guninfo_ = nullptr;
}
inline const ::PlaneWar::GunInfo& SCHit::_internal_guninfo() const {
  const ::PlaneWar::GunInfo* p = guninfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::GunInfo&>(
      ::PlaneWar::_GunInfo_default_instance_);
}
inline const ::PlaneWar::GunInfo& SCHit::guninfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCHit.gunInfo)
  return _internal_guninfo();
}
inline void SCHit::unsafe_arena_set_allocated_guninfo(
    ::PlaneWar::GunInfo* guninfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guninfo_);
  }
  guninfo_ = guninfo;
  if (guninfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCHit.gunInfo)
}
inline ::PlaneWar::GunInfo* SCHit::release_guninfo() {
  
  ::PlaneWar::GunInfo* temp = guninfo_;
  guninfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::GunInfo* SCHit::unsafe_arena_release_guninfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCHit.gunInfo)
  
  ::PlaneWar::GunInfo* temp = guninfo_;
  guninfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::GunInfo* SCHit::_internal_mutable_guninfo() {
  
  if (guninfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::GunInfo>(GetArena());
    guninfo_ = p;
  }
  return guninfo_;
}
inline ::PlaneWar::GunInfo* SCHit::mutable_guninfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCHit.gunInfo)
  return _internal_mutable_guninfo();
}
inline void SCHit::set_allocated_guninfo(::PlaneWar::GunInfo* guninfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete guninfo_;
  }
  if (guninfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(guninfo);
    if (message_arena != submessage_arena) {
      guninfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guninfo, submessage_arena);
    }
    
  } else {
    
  }
  guninfo_ = guninfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCHit.gunInfo)
}

// repeated .PlaneWar.FortuneWheelInfo fortuneWheelList = 23;
inline int SCHit::_internal_fortunewheellist_size() const {
  return fortunewheellist_.size();
}
inline int SCHit::fortunewheellist_size() const {
  return _internal_fortunewheellist_size();
}
inline void SCHit::clear_fortunewheellist() {
  fortunewheellist_.Clear();
}
inline ::PlaneWar::FortuneWheelInfo* SCHit::mutable_fortunewheellist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCHit.fortuneWheelList)
  return fortunewheellist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::FortuneWheelInfo >*
SCHit::mutable_fortunewheellist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCHit.fortuneWheelList)
  return &fortunewheellist_;
}
inline const ::PlaneWar::FortuneWheelInfo& SCHit::_internal_fortunewheellist(int index) const {
  return fortunewheellist_.Get(index);
}
inline const ::PlaneWar::FortuneWheelInfo& SCHit::fortunewheellist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCHit.fortuneWheelList)
  return _internal_fortunewheellist(index);
}
inline ::PlaneWar::FortuneWheelInfo* SCHit::_internal_add_fortunewheellist() {
  return fortunewheellist_.Add();
}
inline ::PlaneWar::FortuneWheelInfo* SCHit::add_fortunewheellist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCHit.fortuneWheelList)
  return _internal_add_fortunewheellist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::FortuneWheelInfo >&
SCHit::fortunewheellist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCHit.fortuneWheelList)
  return fortunewheellist_;
}

// .PlaneWar.ToadInfo toadInfo = 24;
inline bool SCHit::_internal_has_toadinfo() const {
  return this != internal_default_instance() && toadinfo_ != nullptr;
}
inline bool SCHit::has_toadinfo() const {
  return _internal_has_toadinfo();
}
inline void SCHit::clear_toadinfo() {
  if (GetArena() == nullptr && toadinfo_ != nullptr) {
    delete toadinfo_;
  }
  toadinfo_ = nullptr;
}
inline const ::PlaneWar::ToadInfo& SCHit::_internal_toadinfo() const {
  const ::PlaneWar::ToadInfo* p = toadinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::ToadInfo&>(
      ::PlaneWar::_ToadInfo_default_instance_);
}
inline const ::PlaneWar::ToadInfo& SCHit::toadinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCHit.toadInfo)
  return _internal_toadinfo();
}
inline void SCHit::unsafe_arena_set_allocated_toadinfo(
    ::PlaneWar::ToadInfo* toadinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(toadinfo_);
  }
  toadinfo_ = toadinfo;
  if (toadinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCHit.toadInfo)
}
inline ::PlaneWar::ToadInfo* SCHit::release_toadinfo() {
  
  ::PlaneWar::ToadInfo* temp = toadinfo_;
  toadinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::ToadInfo* SCHit::unsafe_arena_release_toadinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCHit.toadInfo)
  
  ::PlaneWar::ToadInfo* temp = toadinfo_;
  toadinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::ToadInfo* SCHit::_internal_mutable_toadinfo() {
  
  if (toadinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::ToadInfo>(GetArena());
    toadinfo_ = p;
  }
  return toadinfo_;
}
inline ::PlaneWar::ToadInfo* SCHit::mutable_toadinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCHit.toadInfo)
  return _internal_mutable_toadinfo();
}
inline void SCHit::set_allocated_toadinfo(::PlaneWar::ToadInfo* toadinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete toadinfo_;
  }
  if (toadinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(toadinfo);
    if (message_arena != submessage_arena) {
      toadinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, toadinfo, submessage_arena);
    }
    
  } else {
    
  }
  toadinfo_ = toadinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCHit.toadInfo)
}

// .PlaneWar.FlameInfo flameInfo = 25;
inline bool SCHit::_internal_has_flameinfo() const {
  return this != internal_default_instance() && flameinfo_ != nullptr;
}
inline bool SCHit::has_flameinfo() const {
  return _internal_has_flameinfo();
}
inline void SCHit::clear_flameinfo() {
  if (GetArena() == nullptr && flameinfo_ != nullptr) {
    delete flameinfo_;
  }
  flameinfo_ = nullptr;
}
inline const ::PlaneWar::FlameInfo& SCHit::_internal_flameinfo() const {
  const ::PlaneWar::FlameInfo* p = flameinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::FlameInfo&>(
      ::PlaneWar::_FlameInfo_default_instance_);
}
inline const ::PlaneWar::FlameInfo& SCHit::flameinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCHit.flameInfo)
  return _internal_flameinfo();
}
inline void SCHit::unsafe_arena_set_allocated_flameinfo(
    ::PlaneWar::FlameInfo* flameinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flameinfo_);
  }
  flameinfo_ = flameinfo;
  if (flameinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCHit.flameInfo)
}
inline ::PlaneWar::FlameInfo* SCHit::release_flameinfo() {
  
  ::PlaneWar::FlameInfo* temp = flameinfo_;
  flameinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::FlameInfo* SCHit::unsafe_arena_release_flameinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCHit.flameInfo)
  
  ::PlaneWar::FlameInfo* temp = flameinfo_;
  flameinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::FlameInfo* SCHit::_internal_mutable_flameinfo() {
  
  if (flameinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::FlameInfo>(GetArena());
    flameinfo_ = p;
  }
  return flameinfo_;
}
inline ::PlaneWar::FlameInfo* SCHit::mutable_flameinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCHit.flameInfo)
  return _internal_mutable_flameinfo();
}
inline void SCHit::set_allocated_flameinfo(::PlaneWar::FlameInfo* flameinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete flameinfo_;
  }
  if (flameinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(flameinfo);
    if (message_arena != submessage_arena) {
      flameinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flameinfo, submessage_arena);
    }
    
  } else {
    
  }
  flameinfo_ = flameinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCHit.flameInfo)
}

// .PlaneWar.BeeInfo beeInfo = 26;
inline bool SCHit::_internal_has_beeinfo() const {
  return this != internal_default_instance() && beeinfo_ != nullptr;
}
inline bool SCHit::has_beeinfo() const {
  return _internal_has_beeinfo();
}
inline void SCHit::clear_beeinfo() {
  if (GetArena() == nullptr && beeinfo_ != nullptr) {
    delete beeinfo_;
  }
  beeinfo_ = nullptr;
}
inline const ::PlaneWar::BeeInfo& SCHit::_internal_beeinfo() const {
  const ::PlaneWar::BeeInfo* p = beeinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::BeeInfo&>(
      ::PlaneWar::_BeeInfo_default_instance_);
}
inline const ::PlaneWar::BeeInfo& SCHit::beeinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCHit.beeInfo)
  return _internal_beeinfo();
}
inline void SCHit::unsafe_arena_set_allocated_beeinfo(
    ::PlaneWar::BeeInfo* beeinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(beeinfo_);
  }
  beeinfo_ = beeinfo;
  if (beeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCHit.beeInfo)
}
inline ::PlaneWar::BeeInfo* SCHit::release_beeinfo() {
  
  ::PlaneWar::BeeInfo* temp = beeinfo_;
  beeinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::BeeInfo* SCHit::unsafe_arena_release_beeinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCHit.beeInfo)
  
  ::PlaneWar::BeeInfo* temp = beeinfo_;
  beeinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::BeeInfo* SCHit::_internal_mutable_beeinfo() {
  
  if (beeinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::BeeInfo>(GetArena());
    beeinfo_ = p;
  }
  return beeinfo_;
}
inline ::PlaneWar::BeeInfo* SCHit::mutable_beeinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCHit.beeInfo)
  return _internal_mutable_beeinfo();
}
inline void SCHit::set_allocated_beeinfo(::PlaneWar::BeeInfo* beeinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete beeinfo_;
  }
  if (beeinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(beeinfo);
    if (message_arena != submessage_arena) {
      beeinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, beeinfo, submessage_arena);
    }
    
  } else {
    
  }
  beeinfo_ = beeinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCHit.beeInfo)
}

// .PlaneWar.ConnMonsterInfo connMonsterInfo = 27;
inline bool SCHit::_internal_has_connmonsterinfo() const {
  return this != internal_default_instance() && connmonsterinfo_ != nullptr;
}
inline bool SCHit::has_connmonsterinfo() const {
  return _internal_has_connmonsterinfo();
}
inline void SCHit::clear_connmonsterinfo() {
  if (GetArena() == nullptr && connmonsterinfo_ != nullptr) {
    delete connmonsterinfo_;
  }
  connmonsterinfo_ = nullptr;
}
inline const ::PlaneWar::ConnMonsterInfo& SCHit::_internal_connmonsterinfo() const {
  const ::PlaneWar::ConnMonsterInfo* p = connmonsterinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::ConnMonsterInfo&>(
      ::PlaneWar::_ConnMonsterInfo_default_instance_);
}
inline const ::PlaneWar::ConnMonsterInfo& SCHit::connmonsterinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCHit.connMonsterInfo)
  return _internal_connmonsterinfo();
}
inline void SCHit::unsafe_arena_set_allocated_connmonsterinfo(
    ::PlaneWar::ConnMonsterInfo* connmonsterinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(connmonsterinfo_);
  }
  connmonsterinfo_ = connmonsterinfo;
  if (connmonsterinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCHit.connMonsterInfo)
}
inline ::PlaneWar::ConnMonsterInfo* SCHit::release_connmonsterinfo() {
  
  ::PlaneWar::ConnMonsterInfo* temp = connmonsterinfo_;
  connmonsterinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::ConnMonsterInfo* SCHit::unsafe_arena_release_connmonsterinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCHit.connMonsterInfo)
  
  ::PlaneWar::ConnMonsterInfo* temp = connmonsterinfo_;
  connmonsterinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::ConnMonsterInfo* SCHit::_internal_mutable_connmonsterinfo() {
  
  if (connmonsterinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::ConnMonsterInfo>(GetArena());
    connmonsterinfo_ = p;
  }
  return connmonsterinfo_;
}
inline ::PlaneWar::ConnMonsterInfo* SCHit::mutable_connmonsterinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCHit.connMonsterInfo)
  return _internal_mutable_connmonsterinfo();
}
inline void SCHit::set_allocated_connmonsterinfo(::PlaneWar::ConnMonsterInfo* connmonsterinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete connmonsterinfo_;
  }
  if (connmonsterinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(connmonsterinfo);
    if (message_arena != submessage_arena) {
      connmonsterinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connmonsterinfo, submessage_arena);
    }
    
  } else {
    
  }
  connmonsterinfo_ = connmonsterinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCHit.connMonsterInfo)
}

// repeated .PlaneWar.SpecEffect specEffect = 28;
inline int SCHit::_internal_speceffect_size() const {
  return speceffect_.size();
}
inline int SCHit::speceffect_size() const {
  return _internal_speceffect_size();
}
inline void SCHit::clear_speceffect() {
  speceffect_.Clear();
}
inline ::PlaneWar::SpecEffect* SCHit::mutable_speceffect(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCHit.specEffect)
  return speceffect_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::SpecEffect >*
SCHit::mutable_speceffect() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCHit.specEffect)
  return &speceffect_;
}
inline const ::PlaneWar::SpecEffect& SCHit::_internal_speceffect(int index) const {
  return speceffect_.Get(index);
}
inline const ::PlaneWar::SpecEffect& SCHit::speceffect(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCHit.specEffect)
  return _internal_speceffect(index);
}
inline ::PlaneWar::SpecEffect* SCHit::_internal_add_speceffect() {
  return speceffect_.Add();
}
inline ::PlaneWar::SpecEffect* SCHit::add_speceffect() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCHit.specEffect)
  return _internal_add_speceffect();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::SpecEffect >&
SCHit::speceffect() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCHit.specEffect)
  return speceffect_;
}

// .PlaneWar.DiceInfo diceInfo = 29;
inline bool SCHit::_internal_has_diceinfo() const {
  return this != internal_default_instance() && diceinfo_ != nullptr;
}
inline bool SCHit::has_diceinfo() const {
  return _internal_has_diceinfo();
}
inline void SCHit::clear_diceinfo() {
  if (GetArena() == nullptr && diceinfo_ != nullptr) {
    delete diceinfo_;
  }
  diceinfo_ = nullptr;
}
inline const ::PlaneWar::DiceInfo& SCHit::_internal_diceinfo() const {
  const ::PlaneWar::DiceInfo* p = diceinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::DiceInfo&>(
      ::PlaneWar::_DiceInfo_default_instance_);
}
inline const ::PlaneWar::DiceInfo& SCHit::diceinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCHit.diceInfo)
  return _internal_diceinfo();
}
inline void SCHit::unsafe_arena_set_allocated_diceinfo(
    ::PlaneWar::DiceInfo* diceinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diceinfo_);
  }
  diceinfo_ = diceinfo;
  if (diceinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCHit.diceInfo)
}
inline ::PlaneWar::DiceInfo* SCHit::release_diceinfo() {
  
  ::PlaneWar::DiceInfo* temp = diceinfo_;
  diceinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::DiceInfo* SCHit::unsafe_arena_release_diceinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCHit.diceInfo)
  
  ::PlaneWar::DiceInfo* temp = diceinfo_;
  diceinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::DiceInfo* SCHit::_internal_mutable_diceinfo() {
  
  if (diceinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::DiceInfo>(GetArena());
    diceinfo_ = p;
  }
  return diceinfo_;
}
inline ::PlaneWar::DiceInfo* SCHit::mutable_diceinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCHit.diceInfo)
  return _internal_mutable_diceinfo();
}
inline void SCHit::set_allocated_diceinfo(::PlaneWar::DiceInfo* diceinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete diceinfo_;
  }
  if (diceinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(diceinfo);
    if (message_arena != submessage_arena) {
      diceinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diceinfo, submessage_arena);
    }
    
  } else {
    
  }
  diceinfo_ = diceinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCHit.diceInfo)
}

// bool isProp = 30;
inline void SCHit::clear_isprop() {
  isprop_ = false;
}
inline bool SCHit::_internal_isprop() const {
  return isprop_;
}
inline bool SCHit::isprop() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCHit.isProp)
  return _internal_isprop();
}
inline void SCHit::_internal_set_isprop(bool value) {
  
  isprop_ = value;
}
inline void SCHit::set_isprop(bool value) {
  _internal_set_isprop(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCHit.isProp)
}

// -------------------------------------------------------------------

// CSMonsterDestory

// int32 monsterUID = 1;
inline void CSMonsterDestory::clear_monsteruid() {
  monsteruid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSMonsterDestory::_internal_monsteruid() const {
  return monsteruid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSMonsterDestory::monsteruid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSMonsterDestory.monsterUID)
  return _internal_monsteruid();
}
inline void CSMonsterDestory::_internal_set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  monsteruid_ = value;
}
inline void CSMonsterDestory::set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_monsteruid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSMonsterDestory.monsterUID)
}

// -------------------------------------------------------------------

// SCMonsterDestory

// -------------------------------------------------------------------

// CSTransform

// int32 form = 1;
inline void CSTransform::clear_form() {
  form_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSTransform::_internal_form() const {
  return form_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSTransform::form() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSTransform.form)
  return _internal_form();
}
inline void CSTransform::_internal_set_form(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  form_ = value;
}
inline void CSTransform::set_form(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_form(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSTransform.form)
}

// -------------------------------------------------------------------

// SCTransform

// int32 chair = 1;
inline void SCTransform::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTransform::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTransform::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCTransform.chair)
  return _internal_chair();
}
inline void SCTransform::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCTransform::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCTransform.chair)
}

// int32 form = 2;
inline void SCTransform::clear_form() {
  form_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTransform::_internal_form() const {
  return form_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTransform::form() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCTransform.form)
  return _internal_form();
}
inline void SCTransform::_internal_set_form(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  form_ = value;
}
inline void SCTransform::set_form(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_form(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCTransform.form)
}

// -------------------------------------------------------------------

// CSPlanePosSync

// .PlaneWar.Pos pos = 1;
inline bool CSPlanePosSync::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool CSPlanePosSync::has_pos() const {
  return _internal_has_pos();
}
inline void CSPlanePosSync::clear_pos() {
  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::PlaneWar::Pos& CSPlanePosSync::_internal_pos() const {
  const ::PlaneWar::Pos* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::Pos&>(
      ::PlaneWar::_Pos_default_instance_);
}
inline const ::PlaneWar::Pos& CSPlanePosSync::pos() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSPlanePosSync.pos)
  return _internal_pos();
}
inline void CSPlanePosSync::unsafe_arena_set_allocated_pos(
    ::PlaneWar::Pos* pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.CSPlanePosSync.pos)
}
inline ::PlaneWar::Pos* CSPlanePosSync::release_pos() {
  
  ::PlaneWar::Pos* temp = pos_;
  pos_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::Pos* CSPlanePosSync::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:PlaneWar.CSPlanePosSync.pos)
  
  ::PlaneWar::Pos* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::PlaneWar::Pos* CSPlanePosSync::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::Pos>(GetArena());
    pos_ = p;
  }
  return pos_;
}
inline ::PlaneWar::Pos* CSPlanePosSync::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.CSPlanePosSync.pos)
  return _internal_mutable_pos();
}
inline void CSPlanePosSync::set_allocated_pos(::PlaneWar::Pos* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.CSPlanePosSync.pos)
}

// -------------------------------------------------------------------

// SCPlanePosSync

// int32 chair = 1;
inline void SCPlanePosSync::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPlanePosSync::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPlanePosSync::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCPlanePosSync.chair)
  return _internal_chair();
}
inline void SCPlanePosSync::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCPlanePosSync::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCPlanePosSync.chair)
}

// .PlaneWar.Pos pos = 2;
inline bool SCPlanePosSync::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool SCPlanePosSync::has_pos() const {
  return _internal_has_pos();
}
inline void SCPlanePosSync::clear_pos() {
  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::PlaneWar::Pos& SCPlanePosSync::_internal_pos() const {
  const ::PlaneWar::Pos* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::Pos&>(
      ::PlaneWar::_Pos_default_instance_);
}
inline const ::PlaneWar::Pos& SCPlanePosSync::pos() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCPlanePosSync.pos)
  return _internal_pos();
}
inline void SCPlanePosSync::unsafe_arena_set_allocated_pos(
    ::PlaneWar::Pos* pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCPlanePosSync.pos)
}
inline ::PlaneWar::Pos* SCPlanePosSync::release_pos() {
  
  ::PlaneWar::Pos* temp = pos_;
  pos_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::Pos* SCPlanePosSync::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCPlanePosSync.pos)
  
  ::PlaneWar::Pos* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::PlaneWar::Pos* SCPlanePosSync::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::Pos>(GetArena());
    pos_ = p;
  }
  return pos_;
}
inline ::PlaneWar::Pos* SCPlanePosSync::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCPlanePosSync.pos)
  return _internal_mutable_pos();
}
inline void SCPlanePosSync::set_allocated_pos(::PlaneWar::Pos* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCPlanePosSync.pos)
}

// -------------------------------------------------------------------

// SCStateEnd

// int32 chair = 1;
inline void SCStateEnd::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCStateEnd::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCStateEnd::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCStateEnd.chair)
  return _internal_chair();
}
inline void SCStateEnd::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCStateEnd::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCStateEnd.chair)
}

// int32 type = 2;
inline void SCStateEnd::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCStateEnd::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCStateEnd::type() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCStateEnd.type)
  return _internal_type();
}
inline void SCStateEnd::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void SCStateEnd::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCStateEnd.type)
}

// int32 sourceUID = 3;
inline void SCStateEnd::clear_sourceuid() {
  sourceuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCStateEnd::_internal_sourceuid() const {
  return sourceuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCStateEnd::sourceuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCStateEnd.sourceUID)
  return _internal_sourceuid();
}
inline void SCStateEnd::_internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sourceuid_ = value;
}
inline void SCStateEnd::set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sourceuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCStateEnd.sourceUID)
}

// -------------------------------------------------------------------

// CSModRatio

// int32 modLevel = 1;
inline void CSModRatio::clear_modlevel() {
  modlevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSModRatio::_internal_modlevel() const {
  return modlevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSModRatio::modlevel() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSModRatio.modLevel)
  return _internal_modlevel();
}
inline void CSModRatio::_internal_set_modlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  modlevel_ = value;
}
inline void CSModRatio::set_modlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_modlevel(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSModRatio.modLevel)
}

// -------------------------------------------------------------------

// SCModRatio

// int32 chair = 1;
inline void SCModRatio::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCModRatio::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCModRatio::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCModRatio.chair)
  return _internal_chair();
}
inline void SCModRatio::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCModRatio::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCModRatio.chair)
}

// int32 ratio = 2;
inline void SCModRatio::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCModRatio::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCModRatio::ratio() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCModRatio.ratio)
  return _internal_ratio();
}
inline void SCModRatio::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void SCModRatio::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCModRatio.ratio)
}

// bool isUnlock = 3;
inline void SCModRatio::clear_isunlock() {
  isunlock_ = false;
}
inline bool SCModRatio::_internal_isunlock() const {
  return isunlock_;
}
inline bool SCModRatio::isunlock() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCModRatio.isUnlock)
  return _internal_isunlock();
}
inline void SCModRatio::_internal_set_isunlock(bool value) {
  
  isunlock_ = value;
}
inline void SCModRatio::set_isunlock(bool value) {
  _internal_set_isunlock(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCModRatio.isUnlock)
}

// -------------------------------------------------------------------

// SCGainNotify

// int32 source = 1;
inline void SCGainNotify::clear_source() {
  source_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGainNotify::_internal_source() const {
  return source_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGainNotify::source() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGainNotify.source)
  return _internal_source();
}
inline void SCGainNotify::_internal_set_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  source_ = value;
}
inline void SCGainNotify::set_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGainNotify.source)
}

// int32 curMoney = 2;
inline void SCGainNotify::clear_curmoney() {
  curmoney_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGainNotify::_internal_curmoney() const {
  return curmoney_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGainNotify::curmoney() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGainNotify.curMoney)
  return _internal_curmoney();
}
inline void SCGainNotify::_internal_set_curmoney(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curmoney_ = value;
}
inline void SCGainNotify::set_curmoney(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curmoney(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGainNotify.curMoney)
}

// int32 gain = 3;
inline void SCGainNotify::clear_gain() {
  gain_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGainNotify::_internal_gain() const {
  return gain_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGainNotify::gain() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGainNotify.gain)
  return _internal_gain();
}
inline void SCGainNotify::_internal_set_gain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gain_ = value;
}
inline void SCGainNotify::set_gain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gain(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGainNotify.gain)
}

// int32 curTicket = 4;
inline void SCGainNotify::clear_curticket() {
  curticket_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGainNotify::_internal_curticket() const {
  return curticket_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGainNotify::curticket() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGainNotify.curTicket)
  return _internal_curticket();
}
inline void SCGainNotify::_internal_set_curticket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curticket_ = value;
}
inline void SCGainNotify::set_curticket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curticket(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGainNotify.curTicket)
}

// int32 changeTicket = 5;
inline void SCGainNotify::clear_changeticket() {
  changeticket_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGainNotify::_internal_changeticket() const {
  return changeticket_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGainNotify::changeticket() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGainNotify.changeTicket)
  return _internal_changeticket();
}
inline void SCGainNotify::_internal_set_changeticket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  changeticket_ = value;
}
inline void SCGainNotify::set_changeticket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_changeticket(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGainNotify.changeTicket)
}

// int32 changeDiamond = 6;
inline void SCGainNotify::clear_changediamond() {
  changediamond_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGainNotify::_internal_changediamond() const {
  return changediamond_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGainNotify::changediamond() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGainNotify.changeDiamond)
  return _internal_changediamond();
}
inline void SCGainNotify::_internal_set_changediamond(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  changediamond_ = value;
}
inline void SCGainNotify::set_changediamond(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_changediamond(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGainNotify.changeDiamond)
}

// int32 curDiamond = 7;
inline void SCGainNotify::clear_curdiamond() {
  curdiamond_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGainNotify::_internal_curdiamond() const {
  return curdiamond_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGainNotify::curdiamond() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGainNotify.curDiamond)
  return _internal_curdiamond();
}
inline void SCGainNotify::_internal_set_curdiamond(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curdiamond_ = value;
}
inline void SCGainNotify::set_curdiamond(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curdiamond(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGainNotify.curDiamond)
}

// .PlaneWar.Decimal curRedPacket = 8;
inline bool SCGainNotify::_internal_has_curredpacket() const {
  return this != internal_default_instance() && curredpacket_ != nullptr;
}
inline bool SCGainNotify::has_curredpacket() const {
  return _internal_has_curredpacket();
}
inline void SCGainNotify::clear_curredpacket() {
  if (GetArena() == nullptr && curredpacket_ != nullptr) {
    delete curredpacket_;
  }
  curredpacket_ = nullptr;
}
inline const ::PlaneWar::Decimal& SCGainNotify::_internal_curredpacket() const {
  const ::PlaneWar::Decimal* p = curredpacket_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::Decimal&>(
      ::PlaneWar::_Decimal_default_instance_);
}
inline const ::PlaneWar::Decimal& SCGainNotify::curredpacket() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGainNotify.curRedPacket)
  return _internal_curredpacket();
}
inline void SCGainNotify::unsafe_arena_set_allocated_curredpacket(
    ::PlaneWar::Decimal* curredpacket) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(curredpacket_);
  }
  curredpacket_ = curredpacket;
  if (curredpacket) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCGainNotify.curRedPacket)
}
inline ::PlaneWar::Decimal* SCGainNotify::release_curredpacket() {
  
  ::PlaneWar::Decimal* temp = curredpacket_;
  curredpacket_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::Decimal* SCGainNotify::unsafe_arena_release_curredpacket() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCGainNotify.curRedPacket)
  
  ::PlaneWar::Decimal* temp = curredpacket_;
  curredpacket_ = nullptr;
  return temp;
}
inline ::PlaneWar::Decimal* SCGainNotify::_internal_mutable_curredpacket() {
  
  if (curredpacket_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::Decimal>(GetArena());
    curredpacket_ = p;
  }
  return curredpacket_;
}
inline ::PlaneWar::Decimal* SCGainNotify::mutable_curredpacket() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCGainNotify.curRedPacket)
  return _internal_mutable_curredpacket();
}
inline void SCGainNotify::set_allocated_curredpacket(::PlaneWar::Decimal* curredpacket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete curredpacket_;
  }
  if (curredpacket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(curredpacket);
    if (message_arena != submessage_arena) {
      curredpacket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, curredpacket, submessage_arena);
    }
    
  } else {
    
  }
  curredpacket_ = curredpacket;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCGainNotify.curRedPacket)
}

// -------------------------------------------------------------------

// SCGainSettle

// int32 chair = 1;
inline void SCGainSettle::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGainSettle::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGainSettle::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGainSettle.chair)
  return _internal_chair();
}
inline void SCGainSettle::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCGainSettle::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGainSettle.chair)
}

// int32 originUID = 2;
inline void SCGainSettle::clear_originuid() {
  originuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGainSettle::_internal_originuid() const {
  return originuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGainSettle::originuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGainSettle.originUID)
  return _internal_originuid();
}
inline void SCGainSettle::_internal_set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  originuid_ = value;
}
inline void SCGainSettle::set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_originuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGainSettle.originUID)
}

// int32 ratio = 3;
inline void SCGainSettle::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGainSettle::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGainSettle::ratio() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGainSettle.ratio)
  return _internal_ratio();
}
inline void SCGainSettle::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void SCGainSettle::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGainSettle.ratio)
}

// int32 sourceUID = 4;
inline void SCGainSettle::clear_sourceuid() {
  sourceuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGainSettle::_internal_sourceuid() const {
  return sourceuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGainSettle::sourceuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGainSettle.sourceUID)
  return _internal_sourceuid();
}
inline void SCGainSettle::_internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sourceuid_ = value;
}
inline void SCGainSettle::set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sourceuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGainSettle.sourceUID)
}

// -------------------------------------------------------------------

// CSSetPlane

// int32 planeID = 1;
inline void CSSetPlane::clear_planeid() {
  planeid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSetPlane::_internal_planeid() const {
  return planeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSetPlane::planeid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSSetPlane.planeID)
  return _internal_planeid();
}
inline void CSSetPlane::_internal_set_planeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  planeid_ = value;
}
inline void CSSetPlane::set_planeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_planeid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSSetPlane.planeID)
}

// -------------------------------------------------------------------

// SCSetPlane

// int32 chair = 1;
inline void SCSetPlane::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetPlane::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetPlane::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCSetPlane.chair)
  return _internal_chair();
}
inline void SCSetPlane::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCSetPlane::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCSetPlane.chair)
}

// int32 planeID = 2;
inline void SCSetPlane::clear_planeid() {
  planeid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetPlane::_internal_planeid() const {
  return planeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetPlane::planeid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCSetPlane.planeID)
  return _internal_planeid();
}
inline void SCSetPlane::_internal_set_planeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  planeid_ = value;
}
inline void SCSetPlane::set_planeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_planeid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCSetPlane.planeID)
}

// -------------------------------------------------------------------

// CSSwitchBackGround

// -------------------------------------------------------------------

// SCSwitchBackGround

// int32 chair = 1;
inline void SCSwitchBackGround::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSwitchBackGround::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSwitchBackGround::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCSwitchBackGround.chair)
  return _internal_chair();
}
inline void SCSwitchBackGround::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCSwitchBackGround::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCSwitchBackGround.chair)
}

// -------------------------------------------------------------------

// MonsterPath

// .PlaneWar.MonsterInfo monster = 1;
inline bool MonsterPath::_internal_has_monster() const {
  return this != internal_default_instance() && monster_ != nullptr;
}
inline bool MonsterPath::has_monster() const {
  return _internal_has_monster();
}
inline void MonsterPath::clear_monster() {
  if (GetArena() == nullptr && monster_ != nullptr) {
    delete monster_;
  }
  monster_ = nullptr;
}
inline const ::PlaneWar::MonsterInfo& MonsterPath::_internal_monster() const {
  const ::PlaneWar::MonsterInfo* p = monster_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::MonsterInfo&>(
      ::PlaneWar::_MonsterInfo_default_instance_);
}
inline const ::PlaneWar::MonsterInfo& MonsterPath::monster() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MonsterPath.monster)
  return _internal_monster();
}
inline void MonsterPath::unsafe_arena_set_allocated_monster(
    ::PlaneWar::MonsterInfo* monster) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(monster_);
  }
  monster_ = monster;
  if (monster) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.MonsterPath.monster)
}
inline ::PlaneWar::MonsterInfo* MonsterPath::release_monster() {
  
  ::PlaneWar::MonsterInfo* temp = monster_;
  monster_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::MonsterInfo* MonsterPath::unsafe_arena_release_monster() {
  // @@protoc_insertion_point(field_release:PlaneWar.MonsterPath.monster)
  
  ::PlaneWar::MonsterInfo* temp = monster_;
  monster_ = nullptr;
  return temp;
}
inline ::PlaneWar::MonsterInfo* MonsterPath::_internal_mutable_monster() {
  
  if (monster_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::MonsterInfo>(GetArena());
    monster_ = p;
  }
  return monster_;
}
inline ::PlaneWar::MonsterInfo* MonsterPath::mutable_monster() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.MonsterPath.monster)
  return _internal_mutable_monster();
}
inline void MonsterPath::set_allocated_monster(::PlaneWar::MonsterInfo* monster) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete monster_;
  }
  if (monster) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(monster);
    if (message_arena != submessage_arena) {
      monster = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, monster, submessage_arena);
    }
    
  } else {
    
  }
  monster_ = monster;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.MonsterPath.monster)
}

// int32 configID = 2;
inline void MonsterPath::clear_configid() {
  configid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MonsterPath::_internal_configid() const {
  return configid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MonsterPath::configid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MonsterPath.configID)
  return _internal_configid();
}
inline void MonsterPath::_internal_set_configid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  configid_ = value;
}
inline void MonsterPath::set_configid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_configid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MonsterPath.configID)
}

// int32 stepIndex = 3;
inline void MonsterPath::clear_stepindex() {
  stepindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MonsterPath::_internal_stepindex() const {
  return stepindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MonsterPath::stepindex() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MonsterPath.stepIndex)
  return _internal_stepindex();
}
inline void MonsterPath::_internal_set_stepindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stepindex_ = value;
}
inline void MonsterPath::set_stepindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stepindex(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MonsterPath.stepIndex)
}

// int32 roadIndex = 4;
inline void MonsterPath::clear_roadindex() {
  roadindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MonsterPath::_internal_roadindex() const {
  return roadindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MonsterPath::roadindex() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MonsterPath.roadIndex)
  return _internal_roadindex();
}
inline void MonsterPath::_internal_set_roadindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roadindex_ = value;
}
inline void MonsterPath::set_roadindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roadindex(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MonsterPath.roadIndex)
}

// float moveT = 5;
inline void MonsterPath::clear_movet() {
  movet_ = 0;
}
inline float MonsterPath::_internal_movet() const {
  return movet_;
}
inline float MonsterPath::movet() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MonsterPath.moveT)
  return _internal_movet();
}
inline void MonsterPath::_internal_set_movet(float value) {
  
  movet_ = value;
}
inline void MonsterPath::set_movet(float value) {
  _internal_set_movet(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MonsterPath.moveT)
}

// int32 dotIndex = 6;
inline void MonsterPath::clear_dotindex() {
  dotindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MonsterPath::_internal_dotindex() const {
  return dotindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MonsterPath::dotindex() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MonsterPath.dotIndex)
  return _internal_dotindex();
}
inline void MonsterPath::_internal_set_dotindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dotindex_ = value;
}
inline void MonsterPath::set_dotindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dotindex(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MonsterPath.dotIndex)
}

// float delay = 7;
inline void MonsterPath::clear_delay() {
  delay_ = 0;
}
inline float MonsterPath::_internal_delay() const {
  return delay_;
}
inline float MonsterPath::delay() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MonsterPath.delay)
  return _internal_delay();
}
inline void MonsterPath::_internal_set_delay(float value) {
  
  delay_ = value;
}
inline void MonsterPath::set_delay(float value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MonsterPath.delay)
}

// int32 stage = 8;
inline void MonsterPath::clear_stage() {
  stage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MonsterPath::_internal_stage() const {
  return stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MonsterPath::stage() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MonsterPath.stage)
  return _internal_stage();
}
inline void MonsterPath::_internal_set_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stage_ = value;
}
inline void MonsterPath::set_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MonsterPath.stage)
}

// -------------------------------------------------------------------

// SCSyncMonsterInfo

// repeated .PlaneWar.MonsterPath createdPathList = 1;
inline int SCSyncMonsterInfo::_internal_createdpathlist_size() const {
  return createdpathlist_.size();
}
inline int SCSyncMonsterInfo::createdpathlist_size() const {
  return _internal_createdpathlist_size();
}
inline void SCSyncMonsterInfo::clear_createdpathlist() {
  createdpathlist_.Clear();
}
inline ::PlaneWar::MonsterPath* SCSyncMonsterInfo::mutable_createdpathlist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCSyncMonsterInfo.createdPathList)
  return createdpathlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MonsterPath >*
SCSyncMonsterInfo::mutable_createdpathlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCSyncMonsterInfo.createdPathList)
  return &createdpathlist_;
}
inline const ::PlaneWar::MonsterPath& SCSyncMonsterInfo::_internal_createdpathlist(int index) const {
  return createdpathlist_.Get(index);
}
inline const ::PlaneWar::MonsterPath& SCSyncMonsterInfo::createdpathlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCSyncMonsterInfo.createdPathList)
  return _internal_createdpathlist(index);
}
inline ::PlaneWar::MonsterPath* SCSyncMonsterInfo::_internal_add_createdpathlist() {
  return createdpathlist_.Add();
}
inline ::PlaneWar::MonsterPath* SCSyncMonsterInfo::add_createdpathlist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCSyncMonsterInfo.createdPathList)
  return _internal_add_createdpathlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MonsterPath >&
SCSyncMonsterInfo::createdpathlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCSyncMonsterInfo.createdPathList)
  return createdpathlist_;
}

// -------------------------------------------------------------------

// ScratchInfo

// int32 base = 1;
inline void ScratchInfo::clear_base() {
  base_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScratchInfo::_internal_base() const {
  return base_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScratchInfo::base() const {
  // @@protoc_insertion_point(field_get:PlaneWar.ScratchInfo.base)
  return _internal_base();
}
inline void ScratchInfo::_internal_set_base(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  base_ = value;
}
inline void ScratchInfo::set_base(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_base(value);
  // @@protoc_insertion_point(field_set:PlaneWar.ScratchInfo.base)
}

// int32 multiple = 2;
inline void ScratchInfo::clear_multiple() {
  multiple_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScratchInfo::_internal_multiple() const {
  return multiple_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScratchInfo::multiple() const {
  // @@protoc_insertion_point(field_get:PlaneWar.ScratchInfo.multiple)
  return _internal_multiple();
}
inline void ScratchInfo::_internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  multiple_ = value;
}
inline void ScratchInfo::set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_multiple(value);
  // @@protoc_insertion_point(field_set:PlaneWar.ScratchInfo.multiple)
}

// -------------------------------------------------------------------

// CSScratchCardList

// -------------------------------------------------------------------

// SCScratchCardList

// int32 num = 1;
inline void SCScratchCardList::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCScratchCardList::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCScratchCardList::num() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCScratchCardList.num)
  return _internal_num();
}
inline void SCScratchCardList::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void SCScratchCardList::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCScratchCardList.num)
}

// .PlaneWar.ScratchInfo firstCard = 2;
inline bool SCScratchCardList::_internal_has_firstcard() const {
  return this != internal_default_instance() && firstcard_ != nullptr;
}
inline bool SCScratchCardList::has_firstcard() const {
  return _internal_has_firstcard();
}
inline void SCScratchCardList::clear_firstcard() {
  if (GetArena() == nullptr && firstcard_ != nullptr) {
    delete firstcard_;
  }
  firstcard_ = nullptr;
}
inline const ::PlaneWar::ScratchInfo& SCScratchCardList::_internal_firstcard() const {
  const ::PlaneWar::ScratchInfo* p = firstcard_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::ScratchInfo&>(
      ::PlaneWar::_ScratchInfo_default_instance_);
}
inline const ::PlaneWar::ScratchInfo& SCScratchCardList::firstcard() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCScratchCardList.firstCard)
  return _internal_firstcard();
}
inline void SCScratchCardList::unsafe_arena_set_allocated_firstcard(
    ::PlaneWar::ScratchInfo* firstcard) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(firstcard_);
  }
  firstcard_ = firstcard;
  if (firstcard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCScratchCardList.firstCard)
}
inline ::PlaneWar::ScratchInfo* SCScratchCardList::release_firstcard() {
  
  ::PlaneWar::ScratchInfo* temp = firstcard_;
  firstcard_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::ScratchInfo* SCScratchCardList::unsafe_arena_release_firstcard() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCScratchCardList.firstCard)
  
  ::PlaneWar::ScratchInfo* temp = firstcard_;
  firstcard_ = nullptr;
  return temp;
}
inline ::PlaneWar::ScratchInfo* SCScratchCardList::_internal_mutable_firstcard() {
  
  if (firstcard_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::ScratchInfo>(GetArena());
    firstcard_ = p;
  }
  return firstcard_;
}
inline ::PlaneWar::ScratchInfo* SCScratchCardList::mutable_firstcard() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCScratchCardList.firstCard)
  return _internal_mutable_firstcard();
}
inline void SCScratchCardList::set_allocated_firstcard(::PlaneWar::ScratchInfo* firstcard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete firstcard_;
  }
  if (firstcard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(firstcard);
    if (message_arena != submessage_arena) {
      firstcard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, firstcard, submessage_arena);
    }
    
  } else {
    
  }
  firstcard_ = firstcard;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCScratchCardList.firstCard)
}

// -------------------------------------------------------------------

// CSUseScratchCard

// int32 num = 1;
inline void CSUseScratchCard::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUseScratchCard::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUseScratchCard::num() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSUseScratchCard.num)
  return _internal_num();
}
inline void CSUseScratchCard::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void CSUseScratchCard::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSUseScratchCard.num)
}

// -------------------------------------------------------------------

// SCUseScratchCard

// int32 chair = 1;
inline void SCUseScratchCard::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseScratchCard::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseScratchCard::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUseScratchCard.chair)
  return _internal_chair();
}
inline void SCUseScratchCard::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCUseScratchCard::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUseScratchCard.chair)
}

// repeated .PlaneWar.ScratchInfo cardList = 2;
inline int SCUseScratchCard::_internal_cardlist_size() const {
  return cardlist_.size();
}
inline int SCUseScratchCard::cardlist_size() const {
  return _internal_cardlist_size();
}
inline void SCUseScratchCard::clear_cardlist() {
  cardlist_.Clear();
}
inline ::PlaneWar::ScratchInfo* SCUseScratchCard::mutable_cardlist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCUseScratchCard.cardList)
  return cardlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ScratchInfo >*
SCUseScratchCard::mutable_cardlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCUseScratchCard.cardList)
  return &cardlist_;
}
inline const ::PlaneWar::ScratchInfo& SCUseScratchCard::_internal_cardlist(int index) const {
  return cardlist_.Get(index);
}
inline const ::PlaneWar::ScratchInfo& SCUseScratchCard::cardlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUseScratchCard.cardList)
  return _internal_cardlist(index);
}
inline ::PlaneWar::ScratchInfo* SCUseScratchCard::_internal_add_cardlist() {
  return cardlist_.Add();
}
inline ::PlaneWar::ScratchInfo* SCUseScratchCard::add_cardlist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCUseScratchCard.cardList)
  return _internal_add_cardlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ScratchInfo >&
SCUseScratchCard::cardlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCUseScratchCard.cardList)
  return cardlist_;
}

// int32 total = 3;
inline void SCUseScratchCard::clear_total() {
  total_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseScratchCard::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseScratchCard::total() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUseScratchCard.total)
  return _internal_total();
}
inline void SCUseScratchCard::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_ = value;
}
inline void SCUseScratchCard::set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUseScratchCard.total)
}

// int32 remain = 4;
inline void SCUseScratchCard::clear_remain() {
  remain_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseScratchCard::_internal_remain() const {
  return remain_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseScratchCard::remain() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUseScratchCard.remain)
  return _internal_remain();
}
inline void SCUseScratchCard::_internal_set_remain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  remain_ = value;
}
inline void SCUseScratchCard::set_remain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_remain(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUseScratchCard.remain)
}

// int32 curMoney = 5;
inline void SCUseScratchCard::clear_curmoney() {
  curmoney_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseScratchCard::_internal_curmoney() const {
  return curmoney_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseScratchCard::curmoney() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUseScratchCard.curMoney)
  return _internal_curmoney();
}
inline void SCUseScratchCard::_internal_set_curmoney(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curmoney_ = value;
}
inline void SCUseScratchCard::set_curmoney(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curmoney(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUseScratchCard.curMoney)
}

// -------------------------------------------------------------------

// CSExplodeSettle

// int32 sourceUID = 1;
inline void CSExplodeSettle::clear_sourceuid() {
  sourceuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSExplodeSettle::_internal_sourceuid() const {
  return sourceuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSExplodeSettle::sourceuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSExplodeSettle.sourceUID)
  return _internal_sourceuid();
}
inline void CSExplodeSettle::_internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sourceuid_ = value;
}
inline void CSExplodeSettle::set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sourceuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSExplodeSettle.sourceUID)
}

// -------------------------------------------------------------------

// SCExplodeSettle

// int32 chair = 1;
inline void SCExplodeSettle::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCExplodeSettle::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCExplodeSettle::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCExplodeSettle.chair)
  return _internal_chair();
}
inline void SCExplodeSettle::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCExplodeSettle::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCExplodeSettle.chair)
}

// int32 sourceUID = 2;
inline void SCExplodeSettle::clear_sourceuid() {
  sourceuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCExplodeSettle::_internal_sourceuid() const {
  return sourceuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCExplodeSettle::sourceuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCExplodeSettle.sourceUID)
  return _internal_sourceuid();
}
inline void SCExplodeSettle::_internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sourceuid_ = value;
}
inline void SCExplodeSettle::set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sourceuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCExplodeSettle.sourceUID)
}

// int32 originUID = 3;
inline void SCExplodeSettle::clear_originuid() {
  originuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCExplodeSettle::_internal_originuid() const {
  return originuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCExplodeSettle::originuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCExplodeSettle.originUID)
  return _internal_originuid();
}
inline void SCExplodeSettle::_internal_set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  originuid_ = value;
}
inline void SCExplodeSettle::set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_originuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCExplodeSettle.originUID)
}

// int32 remain = 4;
inline void SCExplodeSettle::clear_remain() {
  remain_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCExplodeSettle::_internal_remain() const {
  return remain_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCExplodeSettle::remain() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCExplodeSettle.remain)
  return _internal_remain();
}
inline void SCExplodeSettle::_internal_set_remain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  remain_ = value;
}
inline void SCExplodeSettle::set_remain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_remain(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCExplodeSettle.remain)
}

// -------------------------------------------------------------------

// CSFallIntoBlackHole

// int32 monsterUID = 1;
inline void CSFallIntoBlackHole::clear_monsteruid() {
  monsteruid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSFallIntoBlackHole::_internal_monsteruid() const {
  return monsteruid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSFallIntoBlackHole::monsteruid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSFallIntoBlackHole.monsterUID)
  return _internal_monsteruid();
}
inline void CSFallIntoBlackHole::_internal_set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  monsteruid_ = value;
}
inline void CSFallIntoBlackHole::set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_monsteruid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSFallIntoBlackHole.monsterUID)
}

// int32 sourceUID = 2;
inline void CSFallIntoBlackHole::clear_sourceuid() {
  sourceuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSFallIntoBlackHole::_internal_sourceuid() const {
  return sourceuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSFallIntoBlackHole::sourceuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSFallIntoBlackHole.sourceUID)
  return _internal_sourceuid();
}
inline void CSFallIntoBlackHole::_internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sourceuid_ = value;
}
inline void CSFallIntoBlackHole::set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sourceuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSFallIntoBlackHole.sourceUID)
}

// -------------------------------------------------------------------

// SCFallIntoBlackHole

// int32 chair = 1;
inline void SCFallIntoBlackHole::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCFallIntoBlackHole::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCFallIntoBlackHole::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCFallIntoBlackHole.chair)
  return _internal_chair();
}
inline void SCFallIntoBlackHole::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCFallIntoBlackHole::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCFallIntoBlackHole.chair)
}

// int32 monsterUID = 2;
inline void SCFallIntoBlackHole::clear_monsteruid() {
  monsteruid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCFallIntoBlackHole::_internal_monsteruid() const {
  return monsteruid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCFallIntoBlackHole::monsteruid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCFallIntoBlackHole.monsterUID)
  return _internal_monsteruid();
}
inline void SCFallIntoBlackHole::_internal_set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  monsteruid_ = value;
}
inline void SCFallIntoBlackHole::set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_monsteruid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCFallIntoBlackHole.monsterUID)
}

// int32 sourceUID = 3;
inline void SCFallIntoBlackHole::clear_sourceuid() {
  sourceuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCFallIntoBlackHole::_internal_sourceuid() const {
  return sourceuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCFallIntoBlackHole::sourceuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCFallIntoBlackHole.sourceUID)
  return _internal_sourceuid();
}
inline void SCFallIntoBlackHole::_internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sourceuid_ = value;
}
inline void SCFallIntoBlackHole::set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sourceuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCFallIntoBlackHole.sourceUID)
}

// -------------------------------------------------------------------

// CSSyncBlackHolePos

// int32 sourceUID = 1;
inline void CSSyncBlackHolePos::clear_sourceuid() {
  sourceuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncBlackHolePos::_internal_sourceuid() const {
  return sourceuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncBlackHolePos::sourceuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSSyncBlackHolePos.sourceUID)
  return _internal_sourceuid();
}
inline void CSSyncBlackHolePos::_internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sourceuid_ = value;
}
inline void CSSyncBlackHolePos::set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sourceuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSSyncBlackHolePos.sourceUID)
}

// .PlaneWar.Pos pos = 2;
inline bool CSSyncBlackHolePos::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool CSSyncBlackHolePos::has_pos() const {
  return _internal_has_pos();
}
inline void CSSyncBlackHolePos::clear_pos() {
  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::PlaneWar::Pos& CSSyncBlackHolePos::_internal_pos() const {
  const ::PlaneWar::Pos* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::Pos&>(
      ::PlaneWar::_Pos_default_instance_);
}
inline const ::PlaneWar::Pos& CSSyncBlackHolePos::pos() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSSyncBlackHolePos.pos)
  return _internal_pos();
}
inline void CSSyncBlackHolePos::unsafe_arena_set_allocated_pos(
    ::PlaneWar::Pos* pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.CSSyncBlackHolePos.pos)
}
inline ::PlaneWar::Pos* CSSyncBlackHolePos::release_pos() {
  
  ::PlaneWar::Pos* temp = pos_;
  pos_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::Pos* CSSyncBlackHolePos::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:PlaneWar.CSSyncBlackHolePos.pos)
  
  ::PlaneWar::Pos* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::PlaneWar::Pos* CSSyncBlackHolePos::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::Pos>(GetArena());
    pos_ = p;
  }
  return pos_;
}
inline ::PlaneWar::Pos* CSSyncBlackHolePos::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.CSSyncBlackHolePos.pos)
  return _internal_mutable_pos();
}
inline void CSSyncBlackHolePos::set_allocated_pos(::PlaneWar::Pos* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.CSSyncBlackHolePos.pos)
}

// -------------------------------------------------------------------

// SCSyncBlackHolePos

// int32 chair = 1;
inline void SCSyncBlackHolePos::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncBlackHolePos::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncBlackHolePos::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCSyncBlackHolePos.chair)
  return _internal_chair();
}
inline void SCSyncBlackHolePos::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCSyncBlackHolePos::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCSyncBlackHolePos.chair)
}

// int32 sourceUID = 2;
inline void SCSyncBlackHolePos::clear_sourceuid() {
  sourceuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncBlackHolePos::_internal_sourceuid() const {
  return sourceuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncBlackHolePos::sourceuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCSyncBlackHolePos.sourceUID)
  return _internal_sourceuid();
}
inline void SCSyncBlackHolePos::_internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sourceuid_ = value;
}
inline void SCSyncBlackHolePos::set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sourceuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCSyncBlackHolePos.sourceUID)
}

// .PlaneWar.Pos pos = 3;
inline bool SCSyncBlackHolePos::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool SCSyncBlackHolePos::has_pos() const {
  return _internal_has_pos();
}
inline void SCSyncBlackHolePos::clear_pos() {
  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::PlaneWar::Pos& SCSyncBlackHolePos::_internal_pos() const {
  const ::PlaneWar::Pos* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::Pos&>(
      ::PlaneWar::_Pos_default_instance_);
}
inline const ::PlaneWar::Pos& SCSyncBlackHolePos::pos() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCSyncBlackHolePos.pos)
  return _internal_pos();
}
inline void SCSyncBlackHolePos::unsafe_arena_set_allocated_pos(
    ::PlaneWar::Pos* pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCSyncBlackHolePos.pos)
}
inline ::PlaneWar::Pos* SCSyncBlackHolePos::release_pos() {
  
  ::PlaneWar::Pos* temp = pos_;
  pos_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::Pos* SCSyncBlackHolePos::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCSyncBlackHolePos.pos)
  
  ::PlaneWar::Pos* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::PlaneWar::Pos* SCSyncBlackHolePos::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::Pos>(GetArena());
    pos_ = p;
  }
  return pos_;
}
inline ::PlaneWar::Pos* SCSyncBlackHolePos::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCSyncBlackHolePos.pos)
  return _internal_mutable_pos();
}
inline void SCSyncBlackHolePos::set_allocated_pos(::PlaneWar::Pos* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCSyncBlackHolePos.pos)
}

// -------------------------------------------------------------------

// CSInteraction

// int32 targetChair = 1;
inline void CSInteraction::clear_targetchair() {
  targetchair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSInteraction::_internal_targetchair() const {
  return targetchair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSInteraction::targetchair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSInteraction.targetChair)
  return _internal_targetchair();
}
inline void CSInteraction::_internal_set_targetchair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  targetchair_ = value;
}
inline void CSInteraction::set_targetchair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_targetchair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSInteraction.targetChair)
}

// int32 type = 2;
inline void CSInteraction::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSInteraction::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSInteraction::type() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSInteraction.type)
  return _internal_type();
}
inline void CSInteraction::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CSInteraction::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSInteraction.type)
}

// -------------------------------------------------------------------

// SCInteraction

// int32 sourceChair = 1;
inline void SCInteraction::clear_sourcechair() {
  sourcechair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCInteraction::_internal_sourcechair() const {
  return sourcechair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCInteraction::sourcechair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCInteraction.sourceChair)
  return _internal_sourcechair();
}
inline void SCInteraction::_internal_set_sourcechair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sourcechair_ = value;
}
inline void SCInteraction::set_sourcechair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sourcechair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCInteraction.sourceChair)
}

// int32 targetChair = 2;
inline void SCInteraction::clear_targetchair() {
  targetchair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCInteraction::_internal_targetchair() const {
  return targetchair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCInteraction::targetchair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCInteraction.targetChair)
  return _internal_targetchair();
}
inline void SCInteraction::_internal_set_targetchair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  targetchair_ = value;
}
inline void SCInteraction::set_targetchair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_targetchair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCInteraction.targetChair)
}

// int32 type = 3;
inline void SCInteraction::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCInteraction::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCInteraction::type() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCInteraction.type)
  return _internal_type();
}
inline void SCInteraction::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void SCInteraction::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCInteraction.type)
}

// int32 cooldown = 4;
inline void SCInteraction::clear_cooldown() {
  cooldown_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCInteraction::_internal_cooldown() const {
  return cooldown_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCInteraction::cooldown() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCInteraction.cooldown)
  return _internal_cooldown();
}
inline void SCInteraction::_internal_set_cooldown(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cooldown_ = value;
}
inline void SCInteraction::set_cooldown(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cooldown(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCInteraction.cooldown)
}

// int64 curMoney = 5;
inline void SCInteraction::clear_curmoney() {
  curmoney_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCInteraction::_internal_curmoney() const {
  return curmoney_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCInteraction::curmoney() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCInteraction.curMoney)
  return _internal_curmoney();
}
inline void SCInteraction::_internal_set_curmoney(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  curmoney_ = value;
}
inline void SCInteraction::set_curmoney(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_curmoney(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCInteraction.curMoney)
}

// -------------------------------------------------------------------

// JumpHighArena

// bool isOpen = 1;
inline void JumpHighArena::clear_isopen() {
  isopen_ = false;
}
inline bool JumpHighArena::_internal_isopen() const {
  return isopen_;
}
inline bool JumpHighArena::isopen() const {
  // @@protoc_insertion_point(field_get:PlaneWar.JumpHighArena.isOpen)
  return _internal_isopen();
}
inline void JumpHighArena::_internal_set_isopen(bool value) {
  
  isopen_ = value;
}
inline void JumpHighArena::set_isopen(bool value) {
  _internal_set_isopen(value);
  // @@protoc_insertion_point(field_set:PlaneWar.JumpHighArena.isOpen)
}

// int32 vip = 2;
inline void JumpHighArena::clear_vip() {
  vip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JumpHighArena::_internal_vip() const {
  return vip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JumpHighArena::vip() const {
  // @@protoc_insertion_point(field_get:PlaneWar.JumpHighArena.vip)
  return _internal_vip();
}
inline void JumpHighArena::_internal_set_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vip_ = value;
}
inline void JumpHighArena::set_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vip(value);
  // @@protoc_insertion_point(field_set:PlaneWar.JumpHighArena.vip)
}

// int32 coin = 3;
inline void JumpHighArena::clear_coin() {
  coin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JumpHighArena::_internal_coin() const {
  return coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JumpHighArena::coin() const {
  // @@protoc_insertion_point(field_get:PlaneWar.JumpHighArena.coin)
  return _internal_coin();
}
inline void JumpHighArena::_internal_set_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  coin_ = value;
}
inline void JumpHighArena::set_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_coin(value);
  // @@protoc_insertion_point(field_set:PlaneWar.JumpHighArena.coin)
}

// int32 gameTime = 4;
inline void JumpHighArena::clear_gametime() {
  gametime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JumpHighArena::_internal_gametime() const {
  return gametime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JumpHighArena::gametime() const {
  // @@protoc_insertion_point(field_get:PlaneWar.JumpHighArena.gameTime)
  return _internal_gametime();
}
inline void JumpHighArena::_internal_set_gametime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gametime_ = value;
}
inline void JumpHighArena::set_gametime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gametime(value);
  // @@protoc_insertion_point(field_set:PlaneWar.JumpHighArena.gameTime)
}

// string tips = 5;
inline void JumpHighArena::clear_tips() {
  tips_.ClearToEmpty();
}
inline const std::string& JumpHighArena::tips() const {
  // @@protoc_insertion_point(field_get:PlaneWar.JumpHighArena.tips)
  return _internal_tips();
}
inline void JumpHighArena::set_tips(const std::string& value) {
  _internal_set_tips(value);
  // @@protoc_insertion_point(field_set:PlaneWar.JumpHighArena.tips)
}
inline std::string* JumpHighArena::mutable_tips() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.JumpHighArena.tips)
  return _internal_mutable_tips();
}
inline const std::string& JumpHighArena::_internal_tips() const {
  return tips_.Get();
}
inline void JumpHighArena::_internal_set_tips(const std::string& value) {
  
  tips_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void JumpHighArena::set_tips(std::string&& value) {
  
  tips_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.JumpHighArena.tips)
}
inline void JumpHighArena::set_tips(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tips_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.JumpHighArena.tips)
}
inline void JumpHighArena::set_tips(const char* value,
    size_t size) {
  
  tips_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.JumpHighArena.tips)
}
inline std::string* JumpHighArena::_internal_mutable_tips() {
  
  return tips_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* JumpHighArena::release_tips() {
  // @@protoc_insertion_point(field_release:PlaneWar.JumpHighArena.tips)
  return tips_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JumpHighArena::set_allocated_tips(std::string* tips) {
  if (tips != nullptr) {
    
  } else {
    
  }
  tips_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tips,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.JumpHighArena.tips)
}

// repeated int32 monsterId = 6;
inline int JumpHighArena::_internal_monsterid_size() const {
  return monsterid_.size();
}
inline int JumpHighArena::monsterid_size() const {
  return _internal_monsterid_size();
}
inline void JumpHighArena::clear_monsterid() {
  monsterid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JumpHighArena::_internal_monsterid(int index) const {
  return monsterid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JumpHighArena::monsterid(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.JumpHighArena.monsterId)
  return _internal_monsterid(index);
}
inline void JumpHighArena::set_monsterid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  monsterid_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlaneWar.JumpHighArena.monsterId)
}
inline void JumpHighArena::_internal_add_monsterid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  monsterid_.Add(value);
}
inline void JumpHighArena::add_monsterid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_monsterid(value);
  // @@protoc_insertion_point(field_add:PlaneWar.JumpHighArena.monsterId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
JumpHighArena::_internal_monsterid() const {
  return monsterid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
JumpHighArena::monsterid() const {
  // @@protoc_insertion_point(field_list:PlaneWar.JumpHighArena.monsterId)
  return _internal_monsterid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
JumpHighArena::_internal_mutable_monsterid() {
  return &monsterid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
JumpHighArena::mutable_monsterid() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.JumpHighArena.monsterId)
  return _internal_mutable_monsterid();
}

// -------------------------------------------------------------------

// PoolArenaLimit

// int32 level = 1;
inline void PoolArenaLimit::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoolArenaLimit::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoolArenaLimit::level() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PoolArenaLimit.level)
  return _internal_level();
}
inline void PoolArenaLimit::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void PoolArenaLimit::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PoolArenaLimit.level)
}

// int32 arena = 2;
inline void PoolArenaLimit::clear_arena() {
  arena_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoolArenaLimit::_internal_arena() const {
  return arena_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoolArenaLimit::arena() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PoolArenaLimit.arena)
  return _internal_arena();
}
inline void PoolArenaLimit::_internal_set_arena(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  arena_ = value;
}
inline void PoolArenaLimit::set_arena(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_arena(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PoolArenaLimit.arena)
}

// -------------------------------------------------------------------

// SCActivityInfo

// .PlaneWar.JumpHighArena jump = 1;
inline bool SCActivityInfo::_internal_has_jump() const {
  return this != internal_default_instance() && jump_ != nullptr;
}
inline bool SCActivityInfo::has_jump() const {
  return _internal_has_jump();
}
inline void SCActivityInfo::clear_jump() {
  if (GetArena() == nullptr && jump_ != nullptr) {
    delete jump_;
  }
  jump_ = nullptr;
}
inline const ::PlaneWar::JumpHighArena& SCActivityInfo::_internal_jump() const {
  const ::PlaneWar::JumpHighArena* p = jump_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::JumpHighArena&>(
      ::PlaneWar::_JumpHighArena_default_instance_);
}
inline const ::PlaneWar::JumpHighArena& SCActivityInfo::jump() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCActivityInfo.jump)
  return _internal_jump();
}
inline void SCActivityInfo::unsafe_arena_set_allocated_jump(
    ::PlaneWar::JumpHighArena* jump) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(jump_);
  }
  jump_ = jump;
  if (jump) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCActivityInfo.jump)
}
inline ::PlaneWar::JumpHighArena* SCActivityInfo::release_jump() {
  
  ::PlaneWar::JumpHighArena* temp = jump_;
  jump_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::JumpHighArena* SCActivityInfo::unsafe_arena_release_jump() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCActivityInfo.jump)
  
  ::PlaneWar::JumpHighArena* temp = jump_;
  jump_ = nullptr;
  return temp;
}
inline ::PlaneWar::JumpHighArena* SCActivityInfo::_internal_mutable_jump() {
  
  if (jump_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::JumpHighArena>(GetArena());
    jump_ = p;
  }
  return jump_;
}
inline ::PlaneWar::JumpHighArena* SCActivityInfo::mutable_jump() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCActivityInfo.jump)
  return _internal_mutable_jump();
}
inline void SCActivityInfo::set_allocated_jump(::PlaneWar::JumpHighArena* jump) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete jump_;
  }
  if (jump) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(jump);
    if (message_arena != submessage_arena) {
      jump = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, jump, submessage_arena);
    }
    
  } else {
    
  }
  jump_ = jump;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCActivityInfo.jump)
}

// int32 limit = 2;
inline void SCActivityInfo::clear_limit() {
  limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCActivityInfo::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCActivityInfo::limit() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCActivityInfo.limit)
  return _internal_limit();
}
inline void SCActivityInfo::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_ = value;
}
inline void SCActivityInfo::set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCActivityInfo.limit)
}

// repeated .PlaneWar.PoolArenaLimit poolLimit = 3;
inline int SCActivityInfo::_internal_poollimit_size() const {
  return poollimit_.size();
}
inline int SCActivityInfo::poollimit_size() const {
  return _internal_poollimit_size();
}
inline void SCActivityInfo::clear_poollimit() {
  poollimit_.Clear();
}
inline ::PlaneWar::PoolArenaLimit* SCActivityInfo::mutable_poollimit(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCActivityInfo.poolLimit)
  return poollimit_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PoolArenaLimit >*
SCActivityInfo::mutable_poollimit() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCActivityInfo.poolLimit)
  return &poollimit_;
}
inline const ::PlaneWar::PoolArenaLimit& SCActivityInfo::_internal_poollimit(int index) const {
  return poollimit_.Get(index);
}
inline const ::PlaneWar::PoolArenaLimit& SCActivityInfo::poollimit(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCActivityInfo.poolLimit)
  return _internal_poollimit(index);
}
inline ::PlaneWar::PoolArenaLimit* SCActivityInfo::_internal_add_poollimit() {
  return poollimit_.Add();
}
inline ::PlaneWar::PoolArenaLimit* SCActivityInfo::add_poollimit() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCActivityInfo.poolLimit)
  return _internal_add_poollimit();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PoolArenaLimit >&
SCActivityInfo::poollimit() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCActivityInfo.poolLimit)
  return poollimit_;
}

// -------------------------------------------------------------------

// CSGetTaskReward

// -------------------------------------------------------------------

// SCGetTaskReward

// int32 gunRatio = 1;
inline void SCGetTaskReward::clear_gunratio() {
  gunratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetTaskReward::_internal_gunratio() const {
  return gunratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetTaskReward::gunratio() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetTaskReward.gunRatio)
  return _internal_gunratio();
}
inline void SCGetTaskReward::_internal_set_gunratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gunratio_ = value;
}
inline void SCGetTaskReward::set_gunratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gunratio(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGetTaskReward.gunRatio)
}

// int32 award = 2;
inline void SCGetTaskReward::clear_award() {
  award_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetTaskReward::_internal_award() const {
  return award_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetTaskReward::award() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetTaskReward.award)
  return _internal_award();
}
inline void SCGetTaskReward::_internal_set_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  award_ = value;
}
inline void SCGetTaskReward::set_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_award(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGetTaskReward.award)
}

// int32 ticket = 3;
inline void SCGetTaskReward::clear_ticket() {
  ticket_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetTaskReward::_internal_ticket() const {
  return ticket_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetTaskReward::ticket() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetTaskReward.ticket)
  return _internal_ticket();
}
inline void SCGetTaskReward::_internal_set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ticket_ = value;
}
inline void SCGetTaskReward::set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ticket(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGetTaskReward.ticket)
}

// -------------------------------------------------------------------

// CSGetTaskInfo

// -------------------------------------------------------------------

// SCGetTaskInfo

// int32 gunRatio = 1;
inline void SCGetTaskInfo::clear_gunratio() {
  gunratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetTaskInfo::_internal_gunratio() const {
  return gunratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetTaskInfo::gunratio() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetTaskInfo.gunRatio)
  return _internal_gunratio();
}
inline void SCGetTaskInfo::_internal_set_gunratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gunratio_ = value;
}
inline void SCGetTaskInfo::set_gunratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gunratio(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGetTaskInfo.gunRatio)
}

// int32 curNum = 2;
inline void SCGetTaskInfo::clear_curnum() {
  curnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetTaskInfo::_internal_curnum() const {
  return curnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetTaskInfo::curnum() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetTaskInfo.curNum)
  return _internal_curnum();
}
inline void SCGetTaskInfo::_internal_set_curnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curnum_ = value;
}
inline void SCGetTaskInfo::set_curnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curnum(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGetTaskInfo.curNum)
}

// int32 totalNum = 3;
inline void SCGetTaskInfo::clear_totalnum() {
  totalnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetTaskInfo::_internal_totalnum() const {
  return totalnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetTaskInfo::totalnum() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetTaskInfo.totalNum)
  return _internal_totalnum();
}
inline void SCGetTaskInfo::_internal_set_totalnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  totalnum_ = value;
}
inline void SCGetTaskInfo::set_totalnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_totalnum(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGetTaskInfo.totalNum)
}

// int32 vipLevel = 4;
inline void SCGetTaskInfo::clear_viplevel() {
  viplevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetTaskInfo::_internal_viplevel() const {
  return viplevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetTaskInfo::viplevel() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetTaskInfo.vipLevel)
  return _internal_viplevel();
}
inline void SCGetTaskInfo::_internal_set_viplevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  viplevel_ = value;
}
inline void SCGetTaskInfo::set_viplevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_viplevel(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGetTaskInfo.vipLevel)
}

// int32 isUnlock = 5;
inline void SCGetTaskInfo::clear_isunlock() {
  isunlock_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetTaskInfo::_internal_isunlock() const {
  return isunlock_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetTaskInfo::isunlock() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetTaskInfo.isUnlock)
  return _internal_isunlock();
}
inline void SCGetTaskInfo::_internal_set_isunlock(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  isunlock_ = value;
}
inline void SCGetTaskInfo::set_isunlock(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_isunlock(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGetTaskInfo.isUnlock)
}

// int32 award = 6;
inline void SCGetTaskInfo::clear_award() {
  award_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetTaskInfo::_internal_award() const {
  return award_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetTaskInfo::award() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetTaskInfo.award)
  return _internal_award();
}
inline void SCGetTaskInfo::_internal_set_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  award_ = value;
}
inline void SCGetTaskInfo::set_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_award(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGetTaskInfo.award)
}

// bool isVipUnlock = 7;
inline void SCGetTaskInfo::clear_isvipunlock() {
  isvipunlock_ = false;
}
inline bool SCGetTaskInfo::_internal_isvipunlock() const {
  return isvipunlock_;
}
inline bool SCGetTaskInfo::isvipunlock() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetTaskInfo.isVipUnlock)
  return _internal_isvipunlock();
}
inline void SCGetTaskInfo::_internal_set_isvipunlock(bool value) {
  
  isvipunlock_ = value;
}
inline void SCGetTaskInfo::set_isvipunlock(bool value) {
  _internal_set_isvipunlock(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGetTaskInfo.isVipUnlock)
}

// int32 ticket = 8;
inline void SCGetTaskInfo::clear_ticket() {
  ticket_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetTaskInfo::_internal_ticket() const {
  return ticket_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetTaskInfo::ticket() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetTaskInfo.ticket)
  return _internal_ticket();
}
inline void SCGetTaskInfo::_internal_set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ticket_ = value;
}
inline void SCGetTaskInfo::set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ticket(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGetTaskInfo.ticket)
}

// -------------------------------------------------------------------

// SCNoticeInfoChange

// bool isCompleteTask = 1;
inline void SCNoticeInfoChange::clear_iscompletetask() {
  iscompletetask_ = false;
}
inline bool SCNoticeInfoChange::_internal_iscompletetask() const {
  return iscompletetask_;
}
inline bool SCNoticeInfoChange::iscompletetask() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCNoticeInfoChange.isCompleteTask)
  return _internal_iscompletetask();
}
inline void SCNoticeInfoChange::_internal_set_iscompletetask(bool value) {
  
  iscompletetask_ = value;
}
inline void SCNoticeInfoChange::set_iscompletetask(bool value) {
  _internal_set_iscompletetask(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCNoticeInfoChange.isCompleteTask)
}

// repeated .PlaneWar.MissileInfo missileList = 2;
inline int SCNoticeInfoChange::_internal_missilelist_size() const {
  return missilelist_.size();
}
inline int SCNoticeInfoChange::missilelist_size() const {
  return _internal_missilelist_size();
}
inline void SCNoticeInfoChange::clear_missilelist() {
  missilelist_.Clear();
}
inline ::PlaneWar::MissileInfo* SCNoticeInfoChange::mutable_missilelist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCNoticeInfoChange.missileList)
  return missilelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MissileInfo >*
SCNoticeInfoChange::mutable_missilelist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCNoticeInfoChange.missileList)
  return &missilelist_;
}
inline const ::PlaneWar::MissileInfo& SCNoticeInfoChange::_internal_missilelist(int index) const {
  return missilelist_.Get(index);
}
inline const ::PlaneWar::MissileInfo& SCNoticeInfoChange::missilelist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCNoticeInfoChange.missileList)
  return _internal_missilelist(index);
}
inline ::PlaneWar::MissileInfo* SCNoticeInfoChange::_internal_add_missilelist() {
  return missilelist_.Add();
}
inline ::PlaneWar::MissileInfo* SCNoticeInfoChange::add_missilelist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCNoticeInfoChange.missileList)
  return _internal_add_missilelist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MissileInfo >&
SCNoticeInfoChange::missilelist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCNoticeInfoChange.missileList)
  return missilelist_;
}

// int32 callNum = 3;
inline void SCNoticeInfoChange::clear_callnum() {
  callnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNoticeInfoChange::_internal_callnum() const {
  return callnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNoticeInfoChange::callnum() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCNoticeInfoChange.callNum)
  return _internal_callnum();
}
inline void SCNoticeInfoChange::_internal_set_callnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  callnum_ = value;
}
inline void SCNoticeInfoChange::set_callnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_callnum(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCNoticeInfoChange.callNum)
}

// -------------------------------------------------------------------

// ProsInfo

// int32 id = 1;
inline void ProsInfo::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProsInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProsInfo::id() const {
  // @@protoc_insertion_point(field_get:PlaneWar.ProsInfo.id)
  return _internal_id();
}
inline void ProsInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ProsInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PlaneWar.ProsInfo.id)
}

// int32 change = 2;
inline void ProsInfo::clear_change() {
  change_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProsInfo::_internal_change() const {
  return change_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProsInfo::change() const {
  // @@protoc_insertion_point(field_get:PlaneWar.ProsInfo.change)
  return _internal_change();
}
inline void ProsInfo::_internal_set_change(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  change_ = value;
}
inline void ProsInfo::set_change(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_change(value);
  // @@protoc_insertion_point(field_set:PlaneWar.ProsInfo.change)
}

// int32 value = 3;
inline void ProsInfo::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProsInfo::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProsInfo::value() const {
  // @@protoc_insertion_point(field_get:PlaneWar.ProsInfo.value)
  return _internal_value();
}
inline void ProsInfo::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void ProsInfo::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:PlaneWar.ProsInfo.value)
}

// -------------------------------------------------------------------

// SCNoticeHallProsChange

// int32 chair = 1;
inline void SCNoticeHallProsChange::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNoticeHallProsChange::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNoticeHallProsChange::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCNoticeHallProsChange.chair)
  return _internal_chair();
}
inline void SCNoticeHallProsChange::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCNoticeHallProsChange::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCNoticeHallProsChange.chair)
}

// repeated .PlaneWar.ProsInfo prosList = 2;
inline int SCNoticeHallProsChange::_internal_proslist_size() const {
  return proslist_.size();
}
inline int SCNoticeHallProsChange::proslist_size() const {
  return _internal_proslist_size();
}
inline void SCNoticeHallProsChange::clear_proslist() {
  proslist_.Clear();
}
inline ::PlaneWar::ProsInfo* SCNoticeHallProsChange::mutable_proslist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCNoticeHallProsChange.prosList)
  return proslist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ProsInfo >*
SCNoticeHallProsChange::mutable_proslist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCNoticeHallProsChange.prosList)
  return &proslist_;
}
inline const ::PlaneWar::ProsInfo& SCNoticeHallProsChange::_internal_proslist(int index) const {
  return proslist_.Get(index);
}
inline const ::PlaneWar::ProsInfo& SCNoticeHallProsChange::proslist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCNoticeHallProsChange.prosList)
  return _internal_proslist(index);
}
inline ::PlaneWar::ProsInfo* SCNoticeHallProsChange::_internal_add_proslist() {
  return proslist_.Add();
}
inline ::PlaneWar::ProsInfo* SCNoticeHallProsChange::add_proslist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCNoticeHallProsChange.prosList)
  return _internal_add_proslist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ProsInfo >&
SCNoticeHallProsChange::proslist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCNoticeHallProsChange.prosList)
  return proslist_;
}

// -------------------------------------------------------------------

// TimingMonster

// int32 sec = 1;
inline void TimingMonster::clear_sec() {
  sec_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TimingMonster::_internal_sec() const {
  return sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TimingMonster::sec() const {
  // @@protoc_insertion_point(field_get:PlaneWar.TimingMonster.sec)
  return _internal_sec();
}
inline void TimingMonster::_internal_set_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sec_ = value;
}
inline void TimingMonster::set_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sec(value);
  // @@protoc_insertion_point(field_set:PlaneWar.TimingMonster.sec)
}

// int32 id = 2;
inline void TimingMonster::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TimingMonster::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TimingMonster::id() const {
  // @@protoc_insertion_point(field_get:PlaneWar.TimingMonster.id)
  return _internal_id();
}
inline void TimingMonster::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void TimingMonster::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PlaneWar.TimingMonster.id)
}

// -------------------------------------------------------------------

// SCNoticeTimingMonster

// repeated .PlaneWar.TimingMonster monster_list = 1;
inline int SCNoticeTimingMonster::_internal_monster_list_size() const {
  return monster_list_.size();
}
inline int SCNoticeTimingMonster::monster_list_size() const {
  return _internal_monster_list_size();
}
inline void SCNoticeTimingMonster::clear_monster_list() {
  monster_list_.Clear();
}
inline ::PlaneWar::TimingMonster* SCNoticeTimingMonster::mutable_monster_list(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCNoticeTimingMonster.monster_list)
  return monster_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::TimingMonster >*
SCNoticeTimingMonster::mutable_monster_list() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCNoticeTimingMonster.monster_list)
  return &monster_list_;
}
inline const ::PlaneWar::TimingMonster& SCNoticeTimingMonster::_internal_monster_list(int index) const {
  return monster_list_.Get(index);
}
inline const ::PlaneWar::TimingMonster& SCNoticeTimingMonster::monster_list(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCNoticeTimingMonster.monster_list)
  return _internal_monster_list(index);
}
inline ::PlaneWar::TimingMonster* SCNoticeTimingMonster::_internal_add_monster_list() {
  return monster_list_.Add();
}
inline ::PlaneWar::TimingMonster* SCNoticeTimingMonster::add_monster_list() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCNoticeTimingMonster.monster_list)
  return _internal_add_monster_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::TimingMonster >&
SCNoticeTimingMonster::monster_list() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCNoticeTimingMonster.monster_list)
  return monster_list_;
}

// -------------------------------------------------------------------

// CSPiggyBankInfo

// bool isOpen = 1;
inline void CSPiggyBankInfo::clear_isopen() {
  isopen_ = false;
}
inline bool CSPiggyBankInfo::_internal_isopen() const {
  return isopen_;
}
inline bool CSPiggyBankInfo::isopen() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSPiggyBankInfo.isOpen)
  return _internal_isopen();
}
inline void CSPiggyBankInfo::_internal_set_isopen(bool value) {
  
  isopen_ = value;
}
inline void CSPiggyBankInfo::set_isopen(bool value) {
  _internal_set_isopen(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSPiggyBankInfo.isOpen)
}

// -------------------------------------------------------------------

// SCPiggyBankInfo

// int32 chair = 1;
inline void SCPiggyBankInfo::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPiggyBankInfo::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPiggyBankInfo::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCPiggyBankInfo.chair)
  return _internal_chair();
}
inline void SCPiggyBankInfo::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCPiggyBankInfo::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCPiggyBankInfo.chair)
}

// bool isOpen = 2;
inline void SCPiggyBankInfo::clear_isopen() {
  isopen_ = false;
}
inline bool SCPiggyBankInfo::_internal_isopen() const {
  return isopen_;
}
inline bool SCPiggyBankInfo::isopen() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCPiggyBankInfo.isOpen)
  return _internal_isopen();
}
inline void SCPiggyBankInfo::_internal_set_isopen(bool value) {
  
  isopen_ = value;
}
inline void SCPiggyBankInfo::set_isopen(bool value) {
  _internal_set_isopen(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCPiggyBankInfo.isOpen)
}

// .PlaneWar.PiggyInfo piggyInfo = 3;
inline bool SCPiggyBankInfo::_internal_has_piggyinfo() const {
  return this != internal_default_instance() && piggyinfo_ != nullptr;
}
inline bool SCPiggyBankInfo::has_piggyinfo() const {
  return _internal_has_piggyinfo();
}
inline void SCPiggyBankInfo::clear_piggyinfo() {
  if (GetArena() == nullptr && piggyinfo_ != nullptr) {
    delete piggyinfo_;
  }
  piggyinfo_ = nullptr;
}
inline const ::PlaneWar::PiggyInfo& SCPiggyBankInfo::_internal_piggyinfo() const {
  const ::PlaneWar::PiggyInfo* p = piggyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::PiggyInfo&>(
      ::PlaneWar::_PiggyInfo_default_instance_);
}
inline const ::PlaneWar::PiggyInfo& SCPiggyBankInfo::piggyinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCPiggyBankInfo.piggyInfo)
  return _internal_piggyinfo();
}
inline void SCPiggyBankInfo::unsafe_arena_set_allocated_piggyinfo(
    ::PlaneWar::PiggyInfo* piggyinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(piggyinfo_);
  }
  piggyinfo_ = piggyinfo;
  if (piggyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCPiggyBankInfo.piggyInfo)
}
inline ::PlaneWar::PiggyInfo* SCPiggyBankInfo::release_piggyinfo() {
  
  ::PlaneWar::PiggyInfo* temp = piggyinfo_;
  piggyinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::PiggyInfo* SCPiggyBankInfo::unsafe_arena_release_piggyinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCPiggyBankInfo.piggyInfo)
  
  ::PlaneWar::PiggyInfo* temp = piggyinfo_;
  piggyinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::PiggyInfo* SCPiggyBankInfo::_internal_mutable_piggyinfo() {
  
  if (piggyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::PiggyInfo>(GetArena());
    piggyinfo_ = p;
  }
  return piggyinfo_;
}
inline ::PlaneWar::PiggyInfo* SCPiggyBankInfo::mutable_piggyinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCPiggyBankInfo.piggyInfo)
  return _internal_mutable_piggyinfo();
}
inline void SCPiggyBankInfo::set_allocated_piggyinfo(::PlaneWar::PiggyInfo* piggyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete piggyinfo_;
  }
  if (piggyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(piggyinfo);
    if (message_arena != submessage_arena) {
      piggyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, piggyinfo, submessage_arena);
    }
    
  } else {
    
  }
  piggyinfo_ = piggyinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCPiggyBankInfo.piggyInfo)
}

// -------------------------------------------------------------------

// PiggyReward

// int32 id = 1;
inline void PiggyReward::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiggyReward::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiggyReward::id() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PiggyReward.id)
  return _internal_id();
}
inline void PiggyReward::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void PiggyReward::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PiggyReward.id)
}

// int32 reward = 2;
inline void PiggyReward::clear_reward() {
  reward_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiggyReward::_internal_reward() const {
  return reward_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiggyReward::reward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PiggyReward.reward)
  return _internal_reward();
}
inline void PiggyReward::_internal_set_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reward_ = value;
}
inline void PiggyReward::set_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PiggyReward.reward)
}

// -------------------------------------------------------------------

// CSOpenPiggyBank

// -------------------------------------------------------------------

// SCOpenPiggyBank

// int32 chair = 1;
inline void SCOpenPiggyBank::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCOpenPiggyBank::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCOpenPiggyBank::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCOpenPiggyBank.chair)
  return _internal_chair();
}
inline void SCOpenPiggyBank::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCOpenPiggyBank::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCOpenPiggyBank.chair)
}

// repeated .PlaneWar.PiggyReward rewardList = 2;
inline int SCOpenPiggyBank::_internal_rewardlist_size() const {
  return rewardlist_.size();
}
inline int SCOpenPiggyBank::rewardlist_size() const {
  return _internal_rewardlist_size();
}
inline void SCOpenPiggyBank::clear_rewardlist() {
  rewardlist_.Clear();
}
inline ::PlaneWar::PiggyReward* SCOpenPiggyBank::mutable_rewardlist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCOpenPiggyBank.rewardList)
  return rewardlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PiggyReward >*
SCOpenPiggyBank::mutable_rewardlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCOpenPiggyBank.rewardList)
  return &rewardlist_;
}
inline const ::PlaneWar::PiggyReward& SCOpenPiggyBank::_internal_rewardlist(int index) const {
  return rewardlist_.Get(index);
}
inline const ::PlaneWar::PiggyReward& SCOpenPiggyBank::rewardlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCOpenPiggyBank.rewardList)
  return _internal_rewardlist(index);
}
inline ::PlaneWar::PiggyReward* SCOpenPiggyBank::_internal_add_rewardlist() {
  return rewardlist_.Add();
}
inline ::PlaneWar::PiggyReward* SCOpenPiggyBank::add_rewardlist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCOpenPiggyBank.rewardList)
  return _internal_add_rewardlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PiggyReward >&
SCOpenPiggyBank::rewardlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCOpenPiggyBank.rewardList)
  return rewardlist_;
}

// int32 curMoney = 3;
inline void SCOpenPiggyBank::clear_curmoney() {
  curmoney_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCOpenPiggyBank::_internal_curmoney() const {
  return curmoney_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCOpenPiggyBank::curmoney() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCOpenPiggyBank.curMoney)
  return _internal_curmoney();
}
inline void SCOpenPiggyBank::_internal_set_curmoney(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curmoney_ = value;
}
inline void SCOpenPiggyBank::set_curmoney(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curmoney(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCOpenPiggyBank.curMoney)
}

// -------------------------------------------------------------------

// CSPiggyBankOpenFinish

// -------------------------------------------------------------------

// SCPiggyBankOpenFinish

// int32 chair = 1;
inline void SCPiggyBankOpenFinish::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPiggyBankOpenFinish::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPiggyBankOpenFinish::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCPiggyBankOpenFinish.chair)
  return _internal_chair();
}
inline void SCPiggyBankOpenFinish::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCPiggyBankOpenFinish::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCPiggyBankOpenFinish.chair)
}

// -------------------------------------------------------------------

// SCPiggyBankChangeNotify

// .PlaneWar.PiggyInfo piggyInfo = 1;
inline bool SCPiggyBankChangeNotify::_internal_has_piggyinfo() const {
  return this != internal_default_instance() && piggyinfo_ != nullptr;
}
inline bool SCPiggyBankChangeNotify::has_piggyinfo() const {
  return _internal_has_piggyinfo();
}
inline void SCPiggyBankChangeNotify::clear_piggyinfo() {
  if (GetArena() == nullptr && piggyinfo_ != nullptr) {
    delete piggyinfo_;
  }
  piggyinfo_ = nullptr;
}
inline const ::PlaneWar::PiggyInfo& SCPiggyBankChangeNotify::_internal_piggyinfo() const {
  const ::PlaneWar::PiggyInfo* p = piggyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::PiggyInfo&>(
      ::PlaneWar::_PiggyInfo_default_instance_);
}
inline const ::PlaneWar::PiggyInfo& SCPiggyBankChangeNotify::piggyinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCPiggyBankChangeNotify.piggyInfo)
  return _internal_piggyinfo();
}
inline void SCPiggyBankChangeNotify::unsafe_arena_set_allocated_piggyinfo(
    ::PlaneWar::PiggyInfo* piggyinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(piggyinfo_);
  }
  piggyinfo_ = piggyinfo;
  if (piggyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCPiggyBankChangeNotify.piggyInfo)
}
inline ::PlaneWar::PiggyInfo* SCPiggyBankChangeNotify::release_piggyinfo() {
  
  ::PlaneWar::PiggyInfo* temp = piggyinfo_;
  piggyinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::PiggyInfo* SCPiggyBankChangeNotify::unsafe_arena_release_piggyinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCPiggyBankChangeNotify.piggyInfo)
  
  ::PlaneWar::PiggyInfo* temp = piggyinfo_;
  piggyinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::PiggyInfo* SCPiggyBankChangeNotify::_internal_mutable_piggyinfo() {
  
  if (piggyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::PiggyInfo>(GetArena());
    piggyinfo_ = p;
  }
  return piggyinfo_;
}
inline ::PlaneWar::PiggyInfo* SCPiggyBankChangeNotify::mutable_piggyinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCPiggyBankChangeNotify.piggyInfo)
  return _internal_mutable_piggyinfo();
}
inline void SCPiggyBankChangeNotify::set_allocated_piggyinfo(::PlaneWar::PiggyInfo* piggyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete piggyinfo_;
  }
  if (piggyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(piggyinfo);
    if (message_arena != submessage_arena) {
      piggyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, piggyinfo, submessage_arena);
    }
    
  } else {
    
  }
  piggyinfo_ = piggyinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCPiggyBankChangeNotify.piggyInfo)
}

// -------------------------------------------------------------------

// CSSetPersonalPoolEnable

// bool enable = 1;
inline void CSSetPersonalPoolEnable::clear_enable() {
  enable_ = false;
}
inline bool CSSetPersonalPoolEnable::_internal_enable() const {
  return enable_;
}
inline bool CSSetPersonalPoolEnable::enable() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSSetPersonalPoolEnable.enable)
  return _internal_enable();
}
inline void CSSetPersonalPoolEnable::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void CSSetPersonalPoolEnable::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSSetPersonalPoolEnable.enable)
}

// -------------------------------------------------------------------

// SCSetPersonalPoolEnable

// bool enable = 1;
inline void SCSetPersonalPoolEnable::clear_enable() {
  enable_ = false;
}
inline bool SCSetPersonalPoolEnable::_internal_enable() const {
  return enable_;
}
inline bool SCSetPersonalPoolEnable::enable() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCSetPersonalPoolEnable.enable)
  return _internal_enable();
}
inline void SCSetPersonalPoolEnable::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void SCSetPersonalPoolEnable::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCSetPersonalPoolEnable.enable)
}

// -------------------------------------------------------------------

// CSPersonalPoolInfo

// bool isOpen = 1;
inline void CSPersonalPoolInfo::clear_isopen() {
  isopen_ = false;
}
inline bool CSPersonalPoolInfo::_internal_isopen() const {
  return isopen_;
}
inline bool CSPersonalPoolInfo::isopen() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSPersonalPoolInfo.isOpen)
  return _internal_isopen();
}
inline void CSPersonalPoolInfo::_internal_set_isopen(bool value) {
  
  isopen_ = value;
}
inline void CSPersonalPoolInfo::set_isopen(bool value) {
  _internal_set_isopen(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSPersonalPoolInfo.isOpen)
}

// -------------------------------------------------------------------

// PersonalPoolReward

// int32 type = 1;
inline void PersonalPoolReward::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonalPoolReward::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonalPoolReward::type() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PersonalPoolReward.type)
  return _internal_type();
}
inline void PersonalPoolReward::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void PersonalPoolReward::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PersonalPoolReward.type)
}

// int32 id = 2;
inline void PersonalPoolReward::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonalPoolReward::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonalPoolReward::id() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PersonalPoolReward.id)
  return _internal_id();
}
inline void PersonalPoolReward::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void PersonalPoolReward::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PersonalPoolReward.id)
}

// int32 num = 3;
inline void PersonalPoolReward::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonalPoolReward::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonalPoolReward::num() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PersonalPoolReward.num)
  return _internal_num();
}
inline void PersonalPoolReward::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void PersonalPoolReward::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PersonalPoolReward.num)
}

// string clientID = 4;
inline void PersonalPoolReward::clear_clientid() {
  clientid_.ClearToEmpty();
}
inline const std::string& PersonalPoolReward::clientid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PersonalPoolReward.clientID)
  return _internal_clientid();
}
inline void PersonalPoolReward::set_clientid(const std::string& value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PersonalPoolReward.clientID)
}
inline std::string* PersonalPoolReward::mutable_clientid() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.PersonalPoolReward.clientID)
  return _internal_mutable_clientid();
}
inline const std::string& PersonalPoolReward::_internal_clientid() const {
  return clientid_.Get();
}
inline void PersonalPoolReward::_internal_set_clientid(const std::string& value) {
  
  clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PersonalPoolReward::set_clientid(std::string&& value) {
  
  clientid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.PersonalPoolReward.clientID)
}
inline void PersonalPoolReward::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.PersonalPoolReward.clientID)
}
inline void PersonalPoolReward::set_clientid(const char* value,
    size_t size) {
  
  clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.PersonalPoolReward.clientID)
}
inline std::string* PersonalPoolReward::_internal_mutable_clientid() {
  
  return clientid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PersonalPoolReward::release_clientid() {
  // @@protoc_insertion_point(field_release:PlaneWar.PersonalPoolReward.clientID)
  return clientid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PersonalPoolReward::set_allocated_clientid(std::string* clientid) {
  if (clientid != nullptr) {
    
  } else {
    
  }
  clientid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.PersonalPoolReward.clientID)
}

// string name = 5;
inline void PersonalPoolReward::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& PersonalPoolReward::name() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PersonalPoolReward.name)
  return _internal_name();
}
inline void PersonalPoolReward::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PersonalPoolReward.name)
}
inline std::string* PersonalPoolReward::mutable_name() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.PersonalPoolReward.name)
  return _internal_mutable_name();
}
inline const std::string& PersonalPoolReward::_internal_name() const {
  return name_.Get();
}
inline void PersonalPoolReward::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PersonalPoolReward::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.PersonalPoolReward.name)
}
inline void PersonalPoolReward::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.PersonalPoolReward.name)
}
inline void PersonalPoolReward::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.PersonalPoolReward.name)
}
inline std::string* PersonalPoolReward::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PersonalPoolReward::release_name() {
  // @@protoc_insertion_point(field_release:PlaneWar.PersonalPoolReward.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PersonalPoolReward::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.PersonalPoolReward.name)
}

// -------------------------------------------------------------------

// PersonalPoolLevelInfo

// int32 level = 1;
inline void PersonalPoolLevelInfo::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonalPoolLevelInfo::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonalPoolLevelInfo::level() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PersonalPoolLevelInfo.level)
  return _internal_level();
}
inline void PersonalPoolLevelInfo::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void PersonalPoolLevelInfo::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PersonalPoolLevelInfo.level)
}

// int32 targetValue = 2;
inline void PersonalPoolLevelInfo::clear_targetvalue() {
  targetvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonalPoolLevelInfo::_internal_targetvalue() const {
  return targetvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonalPoolLevelInfo::targetvalue() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PersonalPoolLevelInfo.targetValue)
  return _internal_targetvalue();
}
inline void PersonalPoolLevelInfo::_internal_set_targetvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  targetvalue_ = value;
}
inline void PersonalPoolLevelInfo::set_targetvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_targetvalue(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PersonalPoolLevelInfo.targetValue)
}

// repeated .PlaneWar.PersonalPoolReward rewardList = 3;
inline int PersonalPoolLevelInfo::_internal_rewardlist_size() const {
  return rewardlist_.size();
}
inline int PersonalPoolLevelInfo::rewardlist_size() const {
  return _internal_rewardlist_size();
}
inline void PersonalPoolLevelInfo::clear_rewardlist() {
  rewardlist_.Clear();
}
inline ::PlaneWar::PersonalPoolReward* PersonalPoolLevelInfo::mutable_rewardlist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.PersonalPoolLevelInfo.rewardList)
  return rewardlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PersonalPoolReward >*
PersonalPoolLevelInfo::mutable_rewardlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.PersonalPoolLevelInfo.rewardList)
  return &rewardlist_;
}
inline const ::PlaneWar::PersonalPoolReward& PersonalPoolLevelInfo::_internal_rewardlist(int index) const {
  return rewardlist_.Get(index);
}
inline const ::PlaneWar::PersonalPoolReward& PersonalPoolLevelInfo::rewardlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.PersonalPoolLevelInfo.rewardList)
  return _internal_rewardlist(index);
}
inline ::PlaneWar::PersonalPoolReward* PersonalPoolLevelInfo::_internal_add_rewardlist() {
  return rewardlist_.Add();
}
inline ::PlaneWar::PersonalPoolReward* PersonalPoolLevelInfo::add_rewardlist() {
  // @@protoc_insertion_point(field_add:PlaneWar.PersonalPoolLevelInfo.rewardList)
  return _internal_add_rewardlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PersonalPoolReward >&
PersonalPoolLevelInfo::rewardlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.PersonalPoolLevelInfo.rewardList)
  return rewardlist_;
}

// bool reward = 4;
inline void PersonalPoolLevelInfo::clear_reward() {
  reward_ = false;
}
inline bool PersonalPoolLevelInfo::_internal_reward() const {
  return reward_;
}
inline bool PersonalPoolLevelInfo::reward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PersonalPoolLevelInfo.reward)
  return _internal_reward();
}
inline void PersonalPoolLevelInfo::_internal_set_reward(bool value) {
  
  reward_ = value;
}
inline void PersonalPoolLevelInfo::set_reward(bool value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PersonalPoolLevelInfo.reward)
}

// -------------------------------------------------------------------

// PersonalPoolLuckyInfo

// int32 total = 1;
inline void PersonalPoolLuckyInfo::clear_total() {
  total_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonalPoolLuckyInfo::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonalPoolLuckyInfo::total() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PersonalPoolLuckyInfo.total)
  return _internal_total();
}
inline void PersonalPoolLuckyInfo::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_ = value;
}
inline void PersonalPoolLuckyInfo::set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PersonalPoolLuckyInfo.total)
}

// int32 cost = 2;
inline void PersonalPoolLuckyInfo::clear_cost() {
  cost_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonalPoolLuckyInfo::_internal_cost() const {
  return cost_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonalPoolLuckyInfo::cost() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PersonalPoolLuckyInfo.cost)
  return _internal_cost();
}
inline void PersonalPoolLuckyInfo::_internal_set_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cost_ = value;
}
inline void PersonalPoolLuckyInfo::set_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PersonalPoolLuckyInfo.cost)
}

// -------------------------------------------------------------------

// SCPersonalPoolInfo

// int32 chair = 1;
inline void SCPersonalPoolInfo::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPersonalPoolInfo::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPersonalPoolInfo::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCPersonalPoolInfo.chair)
  return _internal_chair();
}
inline void SCPersonalPoolInfo::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCPersonalPoolInfo::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCPersonalPoolInfo.chair)
}

// bool isOpen = 2;
inline void SCPersonalPoolInfo::clear_isopen() {
  isopen_ = false;
}
inline bool SCPersonalPoolInfo::_internal_isopen() const {
  return isopen_;
}
inline bool SCPersonalPoolInfo::isopen() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCPersonalPoolInfo.isOpen)
  return _internal_isopen();
}
inline void SCPersonalPoolInfo::_internal_set_isopen(bool value) {
  
  isopen_ = value;
}
inline void SCPersonalPoolInfo::set_isopen(bool value) {
  _internal_set_isopen(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCPersonalPoolInfo.isOpen)
}

// bool enable = 3;
inline void SCPersonalPoolInfo::clear_enable() {
  enable_ = false;
}
inline bool SCPersonalPoolInfo::_internal_enable() const {
  return enable_;
}
inline bool SCPersonalPoolInfo::enable() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCPersonalPoolInfo.enable)
  return _internal_enable();
}
inline void SCPersonalPoolInfo::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void SCPersonalPoolInfo::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCPersonalPoolInfo.enable)
}

// int32 poolValue = 4;
inline void SCPersonalPoolInfo::clear_poolvalue() {
  poolvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPersonalPoolInfo::_internal_poolvalue() const {
  return poolvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPersonalPoolInfo::poolvalue() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCPersonalPoolInfo.poolValue)
  return _internal_poolvalue();
}
inline void SCPersonalPoolInfo::_internal_set_poolvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  poolvalue_ = value;
}
inline void SCPersonalPoolInfo::set_poolvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_poolvalue(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCPersonalPoolInfo.poolValue)
}

// int32 maxValue = 5;
inline void SCPersonalPoolInfo::clear_maxvalue() {
  maxvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPersonalPoolInfo::_internal_maxvalue() const {
  return maxvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPersonalPoolInfo::maxvalue() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCPersonalPoolInfo.maxValue)
  return _internal_maxvalue();
}
inline void SCPersonalPoolInfo::_internal_set_maxvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxvalue_ = value;
}
inline void SCPersonalPoolInfo::set_maxvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxvalue(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCPersonalPoolInfo.maxValue)
}

// int32 curLevel = 6;
inline void SCPersonalPoolInfo::clear_curlevel() {
  curlevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPersonalPoolInfo::_internal_curlevel() const {
  return curlevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPersonalPoolInfo::curlevel() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCPersonalPoolInfo.curLevel)
  return _internal_curlevel();
}
inline void SCPersonalPoolInfo::_internal_set_curlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curlevel_ = value;
}
inline void SCPersonalPoolInfo::set_curlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curlevel(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCPersonalPoolInfo.curLevel)
}

// repeated .PlaneWar.PersonalPoolLevelInfo levelList = 7;
inline int SCPersonalPoolInfo::_internal_levellist_size() const {
  return levellist_.size();
}
inline int SCPersonalPoolInfo::levellist_size() const {
  return _internal_levellist_size();
}
inline void SCPersonalPoolInfo::clear_levellist() {
  levellist_.Clear();
}
inline ::PlaneWar::PersonalPoolLevelInfo* SCPersonalPoolInfo::mutable_levellist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCPersonalPoolInfo.levelList)
  return levellist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PersonalPoolLevelInfo >*
SCPersonalPoolInfo::mutable_levellist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCPersonalPoolInfo.levelList)
  return &levellist_;
}
inline const ::PlaneWar::PersonalPoolLevelInfo& SCPersonalPoolInfo::_internal_levellist(int index) const {
  return levellist_.Get(index);
}
inline const ::PlaneWar::PersonalPoolLevelInfo& SCPersonalPoolInfo::levellist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCPersonalPoolInfo.levelList)
  return _internal_levellist(index);
}
inline ::PlaneWar::PersonalPoolLevelInfo* SCPersonalPoolInfo::_internal_add_levellist() {
  return levellist_.Add();
}
inline ::PlaneWar::PersonalPoolLevelInfo* SCPersonalPoolInfo::add_levellist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCPersonalPoolInfo.levelList)
  return _internal_add_levellist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PersonalPoolLevelInfo >&
SCPersonalPoolInfo::levellist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCPersonalPoolInfo.levelList)
  return levellist_;
}

// .PlaneWar.PersonalPoolLuckyInfo luckyInfo = 8;
inline bool SCPersonalPoolInfo::_internal_has_luckyinfo() const {
  return this != internal_default_instance() && luckyinfo_ != nullptr;
}
inline bool SCPersonalPoolInfo::has_luckyinfo() const {
  return _internal_has_luckyinfo();
}
inline void SCPersonalPoolInfo::clear_luckyinfo() {
  if (GetArena() == nullptr && luckyinfo_ != nullptr) {
    delete luckyinfo_;
  }
  luckyinfo_ = nullptr;
}
inline const ::PlaneWar::PersonalPoolLuckyInfo& SCPersonalPoolInfo::_internal_luckyinfo() const {
  const ::PlaneWar::PersonalPoolLuckyInfo* p = luckyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::PersonalPoolLuckyInfo&>(
      ::PlaneWar::_PersonalPoolLuckyInfo_default_instance_);
}
inline const ::PlaneWar::PersonalPoolLuckyInfo& SCPersonalPoolInfo::luckyinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCPersonalPoolInfo.luckyInfo)
  return _internal_luckyinfo();
}
inline void SCPersonalPoolInfo::unsafe_arena_set_allocated_luckyinfo(
    ::PlaneWar::PersonalPoolLuckyInfo* luckyinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(luckyinfo_);
  }
  luckyinfo_ = luckyinfo;
  if (luckyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCPersonalPoolInfo.luckyInfo)
}
inline ::PlaneWar::PersonalPoolLuckyInfo* SCPersonalPoolInfo::release_luckyinfo() {
  
  ::PlaneWar::PersonalPoolLuckyInfo* temp = luckyinfo_;
  luckyinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::PersonalPoolLuckyInfo* SCPersonalPoolInfo::unsafe_arena_release_luckyinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCPersonalPoolInfo.luckyInfo)
  
  ::PlaneWar::PersonalPoolLuckyInfo* temp = luckyinfo_;
  luckyinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::PersonalPoolLuckyInfo* SCPersonalPoolInfo::_internal_mutable_luckyinfo() {
  
  if (luckyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::PersonalPoolLuckyInfo>(GetArena());
    luckyinfo_ = p;
  }
  return luckyinfo_;
}
inline ::PlaneWar::PersonalPoolLuckyInfo* SCPersonalPoolInfo::mutable_luckyinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCPersonalPoolInfo.luckyInfo)
  return _internal_mutable_luckyinfo();
}
inline void SCPersonalPoolInfo::set_allocated_luckyinfo(::PlaneWar::PersonalPoolLuckyInfo* luckyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete luckyinfo_;
  }
  if (luckyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(luckyinfo);
    if (message_arena != submessage_arena) {
      luckyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, luckyinfo, submessage_arena);
    }
    
  } else {
    
  }
  luckyinfo_ = luckyinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCPersonalPoolInfo.luckyInfo)
}

// -------------------------------------------------------------------

// CSDrawPersonalPool

// int32 chair = 1;
inline void CSDrawPersonalPool::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSDrawPersonalPool::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSDrawPersonalPool::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSDrawPersonalPool.chair)
  return _internal_chair();
}
inline void CSDrawPersonalPool::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void CSDrawPersonalPool::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSDrawPersonalPool.chair)
}

// .PlaneWar.PersonalPoolReward reward = 2;
inline bool CSDrawPersonalPool::_internal_has_reward() const {
  return this != internal_default_instance() && reward_ != nullptr;
}
inline bool CSDrawPersonalPool::has_reward() const {
  return _internal_has_reward();
}
inline void CSDrawPersonalPool::clear_reward() {
  if (GetArena() == nullptr && reward_ != nullptr) {
    delete reward_;
  }
  reward_ = nullptr;
}
inline const ::PlaneWar::PersonalPoolReward& CSDrawPersonalPool::_internal_reward() const {
  const ::PlaneWar::PersonalPoolReward* p = reward_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::PersonalPoolReward&>(
      ::PlaneWar::_PersonalPoolReward_default_instance_);
}
inline const ::PlaneWar::PersonalPoolReward& CSDrawPersonalPool::reward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSDrawPersonalPool.reward)
  return _internal_reward();
}
inline void CSDrawPersonalPool::unsafe_arena_set_allocated_reward(
    ::PlaneWar::PersonalPoolReward* reward) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reward_);
  }
  reward_ = reward;
  if (reward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.CSDrawPersonalPool.reward)
}
inline ::PlaneWar::PersonalPoolReward* CSDrawPersonalPool::release_reward() {
  
  ::PlaneWar::PersonalPoolReward* temp = reward_;
  reward_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::PersonalPoolReward* CSDrawPersonalPool::unsafe_arena_release_reward() {
  // @@protoc_insertion_point(field_release:PlaneWar.CSDrawPersonalPool.reward)
  
  ::PlaneWar::PersonalPoolReward* temp = reward_;
  reward_ = nullptr;
  return temp;
}
inline ::PlaneWar::PersonalPoolReward* CSDrawPersonalPool::_internal_mutable_reward() {
  
  if (reward_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::PersonalPoolReward>(GetArena());
    reward_ = p;
  }
  return reward_;
}
inline ::PlaneWar::PersonalPoolReward* CSDrawPersonalPool::mutable_reward() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.CSDrawPersonalPool.reward)
  return _internal_mutable_reward();
}
inline void CSDrawPersonalPool::set_allocated_reward(::PlaneWar::PersonalPoolReward* reward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reward_;
  }
  if (reward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reward);
    if (message_arena != submessage_arena) {
      reward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reward, submessage_arena);
    }
    
  } else {
    
  }
  reward_ = reward;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.CSDrawPersonalPool.reward)
}

// .PlaneWar.PersonalPoolReward missReward = 3;
inline bool CSDrawPersonalPool::_internal_has_missreward() const {
  return this != internal_default_instance() && missreward_ != nullptr;
}
inline bool CSDrawPersonalPool::has_missreward() const {
  return _internal_has_missreward();
}
inline void CSDrawPersonalPool::clear_missreward() {
  if (GetArena() == nullptr && missreward_ != nullptr) {
    delete missreward_;
  }
  missreward_ = nullptr;
}
inline const ::PlaneWar::PersonalPoolReward& CSDrawPersonalPool::_internal_missreward() const {
  const ::PlaneWar::PersonalPoolReward* p = missreward_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::PersonalPoolReward&>(
      ::PlaneWar::_PersonalPoolReward_default_instance_);
}
inline const ::PlaneWar::PersonalPoolReward& CSDrawPersonalPool::missreward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSDrawPersonalPool.missReward)
  return _internal_missreward();
}
inline void CSDrawPersonalPool::unsafe_arena_set_allocated_missreward(
    ::PlaneWar::PersonalPoolReward* missreward) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(missreward_);
  }
  missreward_ = missreward;
  if (missreward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.CSDrawPersonalPool.missReward)
}
inline ::PlaneWar::PersonalPoolReward* CSDrawPersonalPool::release_missreward() {
  
  ::PlaneWar::PersonalPoolReward* temp = missreward_;
  missreward_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::PersonalPoolReward* CSDrawPersonalPool::unsafe_arena_release_missreward() {
  // @@protoc_insertion_point(field_release:PlaneWar.CSDrawPersonalPool.missReward)
  
  ::PlaneWar::PersonalPoolReward* temp = missreward_;
  missreward_ = nullptr;
  return temp;
}
inline ::PlaneWar::PersonalPoolReward* CSDrawPersonalPool::_internal_mutable_missreward() {
  
  if (missreward_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::PersonalPoolReward>(GetArena());
    missreward_ = p;
  }
  return missreward_;
}
inline ::PlaneWar::PersonalPoolReward* CSDrawPersonalPool::mutable_missreward() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.CSDrawPersonalPool.missReward)
  return _internal_mutable_missreward();
}
inline void CSDrawPersonalPool::set_allocated_missreward(::PlaneWar::PersonalPoolReward* missreward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete missreward_;
  }
  if (missreward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(missreward);
    if (message_arena != submessage_arena) {
      missreward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, missreward, submessage_arena);
    }
    
  } else {
    
  }
  missreward_ = missreward;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.CSDrawPersonalPool.missReward)
}

// int64 curMoney = 4;
inline void CSDrawPersonalPool::clear_curmoney() {
  curmoney_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CSDrawPersonalPool::_internal_curmoney() const {
  return curmoney_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CSDrawPersonalPool::curmoney() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSDrawPersonalPool.curMoney)
  return _internal_curmoney();
}
inline void CSDrawPersonalPool::_internal_set_curmoney(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  curmoney_ = value;
}
inline void CSDrawPersonalPool::set_curmoney(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_curmoney(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSDrawPersonalPool.curMoney)
}

// int32 upgradeCost = 5;
inline void CSDrawPersonalPool::clear_upgradecost() {
  upgradecost_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSDrawPersonalPool::_internal_upgradecost() const {
  return upgradecost_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSDrawPersonalPool::upgradecost() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSDrawPersonalPool.upgradeCost)
  return _internal_upgradecost();
}
inline void CSDrawPersonalPool::_internal_set_upgradecost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  upgradecost_ = value;
}
inline void CSDrawPersonalPool::set_upgradecost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_upgradecost(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSDrawPersonalPool.upgradeCost)
}

// -------------------------------------------------------------------

// CSUpgradePoolReward

// bool isUpgrade = 1;
inline void CSUpgradePoolReward::clear_isupgrade() {
  isupgrade_ = false;
}
inline bool CSUpgradePoolReward::_internal_isupgrade() const {
  return isupgrade_;
}
inline bool CSUpgradePoolReward::isupgrade() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSUpgradePoolReward.isUpgrade)
  return _internal_isupgrade();
}
inline void CSUpgradePoolReward::_internal_set_isupgrade(bool value) {
  
  isupgrade_ = value;
}
inline void CSUpgradePoolReward::set_isupgrade(bool value) {
  _internal_set_isupgrade(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSUpgradePoolReward.isUpgrade)
}

// -------------------------------------------------------------------

// SCUpgradePoolReward

// int32 chair = 1;
inline void SCUpgradePoolReward::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpgradePoolReward::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpgradePoolReward::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUpgradePoolReward.chair)
  return _internal_chair();
}
inline void SCUpgradePoolReward::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCUpgradePoolReward::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUpgradePoolReward.chair)
}

// int32 result = 2;
inline void SCUpgradePoolReward::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpgradePoolReward::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpgradePoolReward::result() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUpgradePoolReward.result)
  return _internal_result();
}
inline void SCUpgradePoolReward::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void SCUpgradePoolReward::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUpgradePoolReward.result)
}

// int64 curMoney = 3;
inline void SCUpgradePoolReward::clear_curmoney() {
  curmoney_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCUpgradePoolReward::_internal_curmoney() const {
  return curmoney_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCUpgradePoolReward::curmoney() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUpgradePoolReward.curMoney)
  return _internal_curmoney();
}
inline void SCUpgradePoolReward::_internal_set_curmoney(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  curmoney_ = value;
}
inline void SCUpgradePoolReward::set_curmoney(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_curmoney(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUpgradePoolReward.curMoney)
}

// .PlaneWar.PersonalPoolReward baseReward = 4;
inline bool SCUpgradePoolReward::_internal_has_basereward() const {
  return this != internal_default_instance() && basereward_ != nullptr;
}
inline bool SCUpgradePoolReward::has_basereward() const {
  return _internal_has_basereward();
}
inline void SCUpgradePoolReward::clear_basereward() {
  if (GetArena() == nullptr && basereward_ != nullptr) {
    delete basereward_;
  }
  basereward_ = nullptr;
}
inline const ::PlaneWar::PersonalPoolReward& SCUpgradePoolReward::_internal_basereward() const {
  const ::PlaneWar::PersonalPoolReward* p = basereward_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::PersonalPoolReward&>(
      ::PlaneWar::_PersonalPoolReward_default_instance_);
}
inline const ::PlaneWar::PersonalPoolReward& SCUpgradePoolReward::basereward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUpgradePoolReward.baseReward)
  return _internal_basereward();
}
inline void SCUpgradePoolReward::unsafe_arena_set_allocated_basereward(
    ::PlaneWar::PersonalPoolReward* basereward) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(basereward_);
  }
  basereward_ = basereward;
  if (basereward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCUpgradePoolReward.baseReward)
}
inline ::PlaneWar::PersonalPoolReward* SCUpgradePoolReward::release_basereward() {
  
  ::PlaneWar::PersonalPoolReward* temp = basereward_;
  basereward_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::PersonalPoolReward* SCUpgradePoolReward::unsafe_arena_release_basereward() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCUpgradePoolReward.baseReward)
  
  ::PlaneWar::PersonalPoolReward* temp = basereward_;
  basereward_ = nullptr;
  return temp;
}
inline ::PlaneWar::PersonalPoolReward* SCUpgradePoolReward::_internal_mutable_basereward() {
  
  if (basereward_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::PersonalPoolReward>(GetArena());
    basereward_ = p;
  }
  return basereward_;
}
inline ::PlaneWar::PersonalPoolReward* SCUpgradePoolReward::mutable_basereward() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCUpgradePoolReward.baseReward)
  return _internal_mutable_basereward();
}
inline void SCUpgradePoolReward::set_allocated_basereward(::PlaneWar::PersonalPoolReward* basereward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete basereward_;
  }
  if (basereward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(basereward);
    if (message_arena != submessage_arena) {
      basereward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basereward, submessage_arena);
    }
    
  } else {
    
  }
  basereward_ = basereward;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCUpgradePoolReward.baseReward)
}

// .PlaneWar.PersonalPoolReward extraReward = 5;
inline bool SCUpgradePoolReward::_internal_has_extrareward() const {
  return this != internal_default_instance() && extrareward_ != nullptr;
}
inline bool SCUpgradePoolReward::has_extrareward() const {
  return _internal_has_extrareward();
}
inline void SCUpgradePoolReward::clear_extrareward() {
  if (GetArena() == nullptr && extrareward_ != nullptr) {
    delete extrareward_;
  }
  extrareward_ = nullptr;
}
inline const ::PlaneWar::PersonalPoolReward& SCUpgradePoolReward::_internal_extrareward() const {
  const ::PlaneWar::PersonalPoolReward* p = extrareward_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::PersonalPoolReward&>(
      ::PlaneWar::_PersonalPoolReward_default_instance_);
}
inline const ::PlaneWar::PersonalPoolReward& SCUpgradePoolReward::extrareward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUpgradePoolReward.extraReward)
  return _internal_extrareward();
}
inline void SCUpgradePoolReward::unsafe_arena_set_allocated_extrareward(
    ::PlaneWar::PersonalPoolReward* extrareward) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extrareward_);
  }
  extrareward_ = extrareward;
  if (extrareward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCUpgradePoolReward.extraReward)
}
inline ::PlaneWar::PersonalPoolReward* SCUpgradePoolReward::release_extrareward() {
  
  ::PlaneWar::PersonalPoolReward* temp = extrareward_;
  extrareward_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::PersonalPoolReward* SCUpgradePoolReward::unsafe_arena_release_extrareward() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCUpgradePoolReward.extraReward)
  
  ::PlaneWar::PersonalPoolReward* temp = extrareward_;
  extrareward_ = nullptr;
  return temp;
}
inline ::PlaneWar::PersonalPoolReward* SCUpgradePoolReward::_internal_mutable_extrareward() {
  
  if (extrareward_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::PersonalPoolReward>(GetArena());
    extrareward_ = p;
  }
  return extrareward_;
}
inline ::PlaneWar::PersonalPoolReward* SCUpgradePoolReward::mutable_extrareward() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCUpgradePoolReward.extraReward)
  return _internal_mutable_extrareward();
}
inline void SCUpgradePoolReward::set_allocated_extrareward(::PlaneWar::PersonalPoolReward* extrareward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete extrareward_;
  }
  if (extrareward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(extrareward);
    if (message_arena != submessage_arena) {
      extrareward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extrareward, submessage_arena);
    }
    
  } else {
    
  }
  extrareward_ = extrareward;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCUpgradePoolReward.extraReward)
}

// int32 addLuckyValue = 6;
inline void SCUpgradePoolReward::clear_addluckyvalue() {
  addluckyvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpgradePoolReward::_internal_addluckyvalue() const {
  return addluckyvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpgradePoolReward::addluckyvalue() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUpgradePoolReward.addLuckyValue)
  return _internal_addluckyvalue();
}
inline void SCUpgradePoolReward::_internal_set_addluckyvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  addluckyvalue_ = value;
}
inline void SCUpgradePoolReward::set_addluckyvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_addluckyvalue(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUpgradePoolReward.addLuckyValue)
}

// -------------------------------------------------------------------

// CSGetPoolLuckyReward

// -------------------------------------------------------------------

// SCGetPoolLuckyReward

// int32 chair = 1;
inline void SCGetPoolLuckyReward::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetPoolLuckyReward::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetPoolLuckyReward::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetPoolLuckyReward.chair)
  return _internal_chair();
}
inline void SCGetPoolLuckyReward::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCGetPoolLuckyReward::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGetPoolLuckyReward.chair)
}

// int64 curMoney = 2;
inline void SCGetPoolLuckyReward::clear_curmoney() {
  curmoney_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCGetPoolLuckyReward::_internal_curmoney() const {
  return curmoney_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCGetPoolLuckyReward::curmoney() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetPoolLuckyReward.curMoney)
  return _internal_curmoney();
}
inline void SCGetPoolLuckyReward::_internal_set_curmoney(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  curmoney_ = value;
}
inline void SCGetPoolLuckyReward::set_curmoney(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_curmoney(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGetPoolLuckyReward.curMoney)
}

// int32 cost = 3;
inline void SCGetPoolLuckyReward::clear_cost() {
  cost_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetPoolLuckyReward::_internal_cost() const {
  return cost_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetPoolLuckyReward::cost() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetPoolLuckyReward.cost)
  return _internal_cost();
}
inline void SCGetPoolLuckyReward::_internal_set_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cost_ = value;
}
inline void SCGetPoolLuckyReward::set_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGetPoolLuckyReward.cost)
}

// repeated .PlaneWar.CommonPropInfo rewardList = 4;
inline int SCGetPoolLuckyReward::_internal_rewardlist_size() const {
  return rewardlist_.size();
}
inline int SCGetPoolLuckyReward::rewardlist_size() const {
  return _internal_rewardlist_size();
}
inline void SCGetPoolLuckyReward::clear_rewardlist() {
  rewardlist_.Clear();
}
inline ::PlaneWar::CommonPropInfo* SCGetPoolLuckyReward::mutable_rewardlist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCGetPoolLuckyReward.rewardList)
  return rewardlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::CommonPropInfo >*
SCGetPoolLuckyReward::mutable_rewardlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCGetPoolLuckyReward.rewardList)
  return &rewardlist_;
}
inline const ::PlaneWar::CommonPropInfo& SCGetPoolLuckyReward::_internal_rewardlist(int index) const {
  return rewardlist_.Get(index);
}
inline const ::PlaneWar::CommonPropInfo& SCGetPoolLuckyReward::rewardlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetPoolLuckyReward.rewardList)
  return _internal_rewardlist(index);
}
inline ::PlaneWar::CommonPropInfo* SCGetPoolLuckyReward::_internal_add_rewardlist() {
  return rewardlist_.Add();
}
inline ::PlaneWar::CommonPropInfo* SCGetPoolLuckyReward::add_rewardlist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCGetPoolLuckyReward.rewardList)
  return _internal_add_rewardlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::CommonPropInfo >&
SCGetPoolLuckyReward::rewardlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCGetPoolLuckyReward.rewardList)
  return rewardlist_;
}

// -------------------------------------------------------------------

// SCPersonalPoolChangeNotify

// bool enable = 1;
inline void SCPersonalPoolChangeNotify::clear_enable() {
  enable_ = false;
}
inline bool SCPersonalPoolChangeNotify::_internal_enable() const {
  return enable_;
}
inline bool SCPersonalPoolChangeNotify::enable() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCPersonalPoolChangeNotify.enable)
  return _internal_enable();
}
inline void SCPersonalPoolChangeNotify::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void SCPersonalPoolChangeNotify::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCPersonalPoolChangeNotify.enable)
}

// int32 curValue = 2;
inline void SCPersonalPoolChangeNotify::clear_curvalue() {
  curvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPersonalPoolChangeNotify::_internal_curvalue() const {
  return curvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPersonalPoolChangeNotify::curvalue() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCPersonalPoolChangeNotify.curValue)
  return _internal_curvalue();
}
inline void SCPersonalPoolChangeNotify::_internal_set_curvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curvalue_ = value;
}
inline void SCPersonalPoolChangeNotify::set_curvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curvalue(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCPersonalPoolChangeNotify.curValue)
}

// int32 curLevel = 3;
inline void SCPersonalPoolChangeNotify::clear_curlevel() {
  curlevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPersonalPoolChangeNotify::_internal_curlevel() const {
  return curlevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPersonalPoolChangeNotify::curlevel() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCPersonalPoolChangeNotify.curLevel)
  return _internal_curlevel();
}
inline void SCPersonalPoolChangeNotify::_internal_set_curlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curlevel_ = value;
}
inline void SCPersonalPoolChangeNotify::set_curlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curlevel(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCPersonalPoolChangeNotify.curLevel)
}

// int32 maxValue = 4;
inline void SCPersonalPoolChangeNotify::clear_maxvalue() {
  maxvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPersonalPoolChangeNotify::_internal_maxvalue() const {
  return maxvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPersonalPoolChangeNotify::maxvalue() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCPersonalPoolChangeNotify.maxValue)
  return _internal_maxvalue();
}
inline void SCPersonalPoolChangeNotify::_internal_set_maxvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxvalue_ = value;
}
inline void SCPersonalPoolChangeNotify::set_maxvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxvalue(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCPersonalPoolChangeNotify.maxValue)
}

// int32 targetValue = 5;
inline void SCPersonalPoolChangeNotify::clear_targetvalue() {
  targetvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPersonalPoolChangeNotify::_internal_targetvalue() const {
  return targetvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPersonalPoolChangeNotify::targetvalue() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCPersonalPoolChangeNotify.targetValue)
  return _internal_targetvalue();
}
inline void SCPersonalPoolChangeNotify::_internal_set_targetvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  targetvalue_ = value;
}
inline void SCPersonalPoolChangeNotify::set_targetvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_targetvalue(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCPersonalPoolChangeNotify.targetValue)
}

// -------------------------------------------------------------------

// CSUseMissile

// int32 id = 1;
inline void CSUseMissile::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUseMissile::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUseMissile::id() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSUseMissile.id)
  return _internal_id();
}
inline void CSUseMissile::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void CSUseMissile::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSUseMissile.id)
}

// -------------------------------------------------------------------

// SCUseMissile

// int32 chair = 1;
inline void SCUseMissile::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseMissile::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseMissile::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUseMissile.chair)
  return _internal_chair();
}
inline void SCUseMissile::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCUseMissile::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUseMissile.chair)
}

// int32 id = 2;
inline void SCUseMissile::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseMissile::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseMissile::id() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUseMissile.id)
  return _internal_id();
}
inline void SCUseMissile::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void SCUseMissile::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUseMissile.id)
}

// int32 reward = 3;
inline void SCUseMissile::clear_reward() {
  reward_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseMissile::_internal_reward() const {
  return reward_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseMissile::reward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUseMissile.reward)
  return _internal_reward();
}
inline void SCUseMissile::_internal_set_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reward_ = value;
}
inline void SCUseMissile::set_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUseMissile.reward)
}

// int32 remainNum = 4;
inline void SCUseMissile::clear_remainnum() {
  remainnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseMissile::_internal_remainnum() const {
  return remainnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseMissile::remainnum() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUseMissile.remainNum)
  return _internal_remainnum();
}
inline void SCUseMissile::_internal_set_remainnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  remainnum_ = value;
}
inline void SCUseMissile::set_remainnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_remainnum(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUseMissile.remainNum)
}

// int64 curMoney = 5;
inline void SCUseMissile::clear_curmoney() {
  curmoney_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCUseMissile::_internal_curmoney() const {
  return curmoney_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCUseMissile::curmoney() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUseMissile.curMoney)
  return _internal_curmoney();
}
inline void SCUseMissile::_internal_set_curmoney(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  curmoney_ = value;
}
inline void SCUseMissile::set_curmoney(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_curmoney(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUseMissile.curMoney)
}

// -------------------------------------------------------------------

// CSMonsterCall

// -------------------------------------------------------------------

// SCMonsterCall

// int32 chair = 1;
inline void SCMonsterCall::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMonsterCall::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMonsterCall::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCMonsterCall.chair)
  return _internal_chair();
}
inline void SCMonsterCall::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCMonsterCall::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCMonsterCall.chair)
}

// int32 count = 2;
inline void SCMonsterCall::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMonsterCall::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMonsterCall::count() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCMonsterCall.count)
  return _internal_count();
}
inline void SCMonsterCall::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void SCMonsterCall::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCMonsterCall.count)
}

// int32 code = 3;
inline void SCMonsterCall::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMonsterCall::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMonsterCall::code() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCMonsterCall.code)
  return _internal_code();
}
inline void SCMonsterCall::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void SCMonsterCall::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCMonsterCall.code)
}

// -------------------------------------------------------------------

// CSClickStatic

// int32 type = 1;
inline void CSClickStatic::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSClickStatic::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSClickStatic::type() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSClickStatic.type)
  return _internal_type();
}
inline void CSClickStatic::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CSClickStatic::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSClickStatic.type)
}

// -------------------------------------------------------------------

// SCClickStatic

// -------------------------------------------------------------------

// RankInfo

// int32 playerId = 1;
inline void RankInfo::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankInfo::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankInfo::playerid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.RankInfo.playerId)
  return _internal_playerid();
}
inline void RankInfo::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void RankInfo::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.RankInfo.playerId)
}

// int32 point = 2;
inline void RankInfo::clear_point() {
  point_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankInfo::_internal_point() const {
  return point_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankInfo::point() const {
  // @@protoc_insertion_point(field_get:PlaneWar.RankInfo.point)
  return _internal_point();
}
inline void RankInfo::_internal_set_point(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  point_ = value;
}
inline void RankInfo::set_point(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_point(value);
  // @@protoc_insertion_point(field_set:PlaneWar.RankInfo.point)
}

// string nick = 3;
inline void RankInfo::clear_nick() {
  nick_.ClearToEmpty();
}
inline const std::string& RankInfo::nick() const {
  // @@protoc_insertion_point(field_get:PlaneWar.RankInfo.nick)
  return _internal_nick();
}
inline void RankInfo::set_nick(const std::string& value) {
  _internal_set_nick(value);
  // @@protoc_insertion_point(field_set:PlaneWar.RankInfo.nick)
}
inline std::string* RankInfo::mutable_nick() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.RankInfo.nick)
  return _internal_mutable_nick();
}
inline const std::string& RankInfo::_internal_nick() const {
  return nick_.Get();
}
inline void RankInfo::_internal_set_nick(const std::string& value) {
  
  nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RankInfo::set_nick(std::string&& value) {
  
  nick_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.RankInfo.nick)
}
inline void RankInfo::set_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.RankInfo.nick)
}
inline void RankInfo::set_nick(const char* value,
    size_t size) {
  
  nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.RankInfo.nick)
}
inline std::string* RankInfo::_internal_mutable_nick() {
  
  return nick_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RankInfo::release_nick() {
  // @@protoc_insertion_point(field_release:PlaneWar.RankInfo.nick)
  return nick_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RankInfo::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    
  } else {
    
  }
  nick_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.RankInfo.nick)
}

// string icon = 4;
inline void RankInfo::clear_icon() {
  icon_.ClearToEmpty();
}
inline const std::string& RankInfo::icon() const {
  // @@protoc_insertion_point(field_get:PlaneWar.RankInfo.icon)
  return _internal_icon();
}
inline void RankInfo::set_icon(const std::string& value) {
  _internal_set_icon(value);
  // @@protoc_insertion_point(field_set:PlaneWar.RankInfo.icon)
}
inline std::string* RankInfo::mutable_icon() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.RankInfo.icon)
  return _internal_mutable_icon();
}
inline const std::string& RankInfo::_internal_icon() const {
  return icon_.Get();
}
inline void RankInfo::_internal_set_icon(const std::string& value) {
  
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RankInfo::set_icon(std::string&& value) {
  
  icon_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.RankInfo.icon)
}
inline void RankInfo::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.RankInfo.icon)
}
inline void RankInfo::set_icon(const char* value,
    size_t size) {
  
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.RankInfo.icon)
}
inline std::string* RankInfo::_internal_mutable_icon() {
  
  return icon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RankInfo::release_icon() {
  // @@protoc_insertion_point(field_release:PlaneWar.RankInfo.icon)
  return icon_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RankInfo::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.RankInfo.icon)
}

// -------------------------------------------------------------------

// MyRankInfo

// int32 rank = 1;
inline void MyRankInfo::clear_rank() {
  rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MyRankInfo::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MyRankInfo::rank() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MyRankInfo.rank)
  return _internal_rank();
}
inline void MyRankInfo::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rank_ = value;
}
inline void MyRankInfo::set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MyRankInfo.rank)
}

// int32 point = 2;
inline void MyRankInfo::clear_point() {
  point_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MyRankInfo::_internal_point() const {
  return point_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MyRankInfo::point() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MyRankInfo.point)
  return _internal_point();
}
inline void MyRankInfo::_internal_set_point(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  point_ = value;
}
inline void MyRankInfo::set_point(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_point(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MyRankInfo.point)
}

// string nick = 3;
inline void MyRankInfo::clear_nick() {
  nick_.ClearToEmpty();
}
inline const std::string& MyRankInfo::nick() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MyRankInfo.nick)
  return _internal_nick();
}
inline void MyRankInfo::set_nick(const std::string& value) {
  _internal_set_nick(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MyRankInfo.nick)
}
inline std::string* MyRankInfo::mutable_nick() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.MyRankInfo.nick)
  return _internal_mutable_nick();
}
inline const std::string& MyRankInfo::_internal_nick() const {
  return nick_.Get();
}
inline void MyRankInfo::_internal_set_nick(const std::string& value) {
  
  nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MyRankInfo::set_nick(std::string&& value) {
  
  nick_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.MyRankInfo.nick)
}
inline void MyRankInfo::set_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.MyRankInfo.nick)
}
inline void MyRankInfo::set_nick(const char* value,
    size_t size) {
  
  nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.MyRankInfo.nick)
}
inline std::string* MyRankInfo::_internal_mutable_nick() {
  
  return nick_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MyRankInfo::release_nick() {
  // @@protoc_insertion_point(field_release:PlaneWar.MyRankInfo.nick)
  return nick_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MyRankInfo::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    
  } else {
    
  }
  nick_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.MyRankInfo.nick)
}

// string icon = 4;
inline void MyRankInfo::clear_icon() {
  icon_.ClearToEmpty();
}
inline const std::string& MyRankInfo::icon() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MyRankInfo.icon)
  return _internal_icon();
}
inline void MyRankInfo::set_icon(const std::string& value) {
  _internal_set_icon(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MyRankInfo.icon)
}
inline std::string* MyRankInfo::mutable_icon() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.MyRankInfo.icon)
  return _internal_mutable_icon();
}
inline const std::string& MyRankInfo::_internal_icon() const {
  return icon_.Get();
}
inline void MyRankInfo::_internal_set_icon(const std::string& value) {
  
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MyRankInfo::set_icon(std::string&& value) {
  
  icon_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.MyRankInfo.icon)
}
inline void MyRankInfo::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.MyRankInfo.icon)
}
inline void MyRankInfo::set_icon(const char* value,
    size_t size) {
  
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.MyRankInfo.icon)
}
inline std::string* MyRankInfo::_internal_mutable_icon() {
  
  return icon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MyRankInfo::release_icon() {
  // @@protoc_insertion_point(field_release:PlaneWar.MyRankInfo.icon)
  return icon_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MyRankInfo::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.MyRankInfo.icon)
}

// -------------------------------------------------------------------

// CSRankList

// int32 type = 1;
inline void CSRankList::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSRankList::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSRankList::type() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSRankList.type)
  return _internal_type();
}
inline void CSRankList::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CSRankList::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSRankList.type)
}

// -------------------------------------------------------------------

// SCRankList

// int32 type = 1;
inline void SCRankList::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRankList::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRankList::type() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCRankList.type)
  return _internal_type();
}
inline void SCRankList::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void SCRankList::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCRankList.type)
}

// .PlaneWar.RankInfo rank = 2;
inline bool SCRankList::_internal_has_rank() const {
  return this != internal_default_instance() && rank_ != nullptr;
}
inline bool SCRankList::has_rank() const {
  return _internal_has_rank();
}
inline void SCRankList::clear_rank() {
  if (GetArena() == nullptr && rank_ != nullptr) {
    delete rank_;
  }
  rank_ = nullptr;
}
inline const ::PlaneWar::RankInfo& SCRankList::_internal_rank() const {
  const ::PlaneWar::RankInfo* p = rank_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::RankInfo&>(
      ::PlaneWar::_RankInfo_default_instance_);
}
inline const ::PlaneWar::RankInfo& SCRankList::rank() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCRankList.rank)
  return _internal_rank();
}
inline void SCRankList::unsafe_arena_set_allocated_rank(
    ::PlaneWar::RankInfo* rank) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rank_);
  }
  rank_ = rank;
  if (rank) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCRankList.rank)
}
inline ::PlaneWar::RankInfo* SCRankList::release_rank() {
  
  ::PlaneWar::RankInfo* temp = rank_;
  rank_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::RankInfo* SCRankList::unsafe_arena_release_rank() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCRankList.rank)
  
  ::PlaneWar::RankInfo* temp = rank_;
  rank_ = nullptr;
  return temp;
}
inline ::PlaneWar::RankInfo* SCRankList::_internal_mutable_rank() {
  
  if (rank_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::RankInfo>(GetArena());
    rank_ = p;
  }
  return rank_;
}
inline ::PlaneWar::RankInfo* SCRankList::mutable_rank() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCRankList.rank)
  return _internal_mutable_rank();
}
inline void SCRankList::set_allocated_rank(::PlaneWar::RankInfo* rank) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rank_;
  }
  if (rank) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rank);
    if (message_arena != submessage_arena) {
      rank = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rank, submessage_arena);
    }
    
  } else {
    
  }
  rank_ = rank;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCRankList.rank)
}

// .PlaneWar.MyRankInfo myRank = 3;
inline bool SCRankList::_internal_has_myrank() const {
  return this != internal_default_instance() && myrank_ != nullptr;
}
inline bool SCRankList::has_myrank() const {
  return _internal_has_myrank();
}
inline void SCRankList::clear_myrank() {
  if (GetArena() == nullptr && myrank_ != nullptr) {
    delete myrank_;
  }
  myrank_ = nullptr;
}
inline const ::PlaneWar::MyRankInfo& SCRankList::_internal_myrank() const {
  const ::PlaneWar::MyRankInfo* p = myrank_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::MyRankInfo&>(
      ::PlaneWar::_MyRankInfo_default_instance_);
}
inline const ::PlaneWar::MyRankInfo& SCRankList::myrank() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCRankList.myRank)
  return _internal_myrank();
}
inline void SCRankList::unsafe_arena_set_allocated_myrank(
    ::PlaneWar::MyRankInfo* myrank) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(myrank_);
  }
  myrank_ = myrank;
  if (myrank) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCRankList.myRank)
}
inline ::PlaneWar::MyRankInfo* SCRankList::release_myrank() {
  
  ::PlaneWar::MyRankInfo* temp = myrank_;
  myrank_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::MyRankInfo* SCRankList::unsafe_arena_release_myrank() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCRankList.myRank)
  
  ::PlaneWar::MyRankInfo* temp = myrank_;
  myrank_ = nullptr;
  return temp;
}
inline ::PlaneWar::MyRankInfo* SCRankList::_internal_mutable_myrank() {
  
  if (myrank_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::MyRankInfo>(GetArena());
    myrank_ = p;
  }
  return myrank_;
}
inline ::PlaneWar::MyRankInfo* SCRankList::mutable_myrank() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCRankList.myRank)
  return _internal_mutable_myrank();
}
inline void SCRankList::set_allocated_myrank(::PlaneWar::MyRankInfo* myrank) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete myrank_;
  }
  if (myrank) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(myrank);
    if (message_arena != submessage_arena) {
      myrank = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, myrank, submessage_arena);
    }
    
  } else {
    
  }
  myrank_ = myrank;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCRankList.myRank)
}

// .PlaneWar.RankInfo lastTop = 4;
inline bool SCRankList::_internal_has_lasttop() const {
  return this != internal_default_instance() && lasttop_ != nullptr;
}
inline bool SCRankList::has_lasttop() const {
  return _internal_has_lasttop();
}
inline void SCRankList::clear_lasttop() {
  if (GetArena() == nullptr && lasttop_ != nullptr) {
    delete lasttop_;
  }
  lasttop_ = nullptr;
}
inline const ::PlaneWar::RankInfo& SCRankList::_internal_lasttop() const {
  const ::PlaneWar::RankInfo* p = lasttop_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::RankInfo&>(
      ::PlaneWar::_RankInfo_default_instance_);
}
inline const ::PlaneWar::RankInfo& SCRankList::lasttop() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCRankList.lastTop)
  return _internal_lasttop();
}
inline void SCRankList::unsafe_arena_set_allocated_lasttop(
    ::PlaneWar::RankInfo* lasttop) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lasttop_);
  }
  lasttop_ = lasttop;
  if (lasttop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCRankList.lastTop)
}
inline ::PlaneWar::RankInfo* SCRankList::release_lasttop() {
  
  ::PlaneWar::RankInfo* temp = lasttop_;
  lasttop_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::RankInfo* SCRankList::unsafe_arena_release_lasttop() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCRankList.lastTop)
  
  ::PlaneWar::RankInfo* temp = lasttop_;
  lasttop_ = nullptr;
  return temp;
}
inline ::PlaneWar::RankInfo* SCRankList::_internal_mutable_lasttop() {
  
  if (lasttop_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::RankInfo>(GetArena());
    lasttop_ = p;
  }
  return lasttop_;
}
inline ::PlaneWar::RankInfo* SCRankList::mutable_lasttop() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCRankList.lastTop)
  return _internal_mutable_lasttop();
}
inline void SCRankList::set_allocated_lasttop(::PlaneWar::RankInfo* lasttop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lasttop_;
  }
  if (lasttop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lasttop);
    if (message_arena != submessage_arena) {
      lasttop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lasttop, submessage_arena);
    }
    
  } else {
    
  }
  lasttop_ = lasttop;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCRankList.lastTop)
}

// -------------------------------------------------------------------

// TitleInfo

// int32 id = 1;
inline void TitleInfo::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TitleInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TitleInfo::id() const {
  // @@protoc_insertion_point(field_get:PlaneWar.TitleInfo.id)
  return _internal_id();
}
inline void TitleInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void TitleInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PlaneWar.TitleInfo.id)
}

// int32 status = 2;
inline void TitleInfo::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TitleInfo::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TitleInfo::status() const {
  // @@protoc_insertion_point(field_get:PlaneWar.TitleInfo.status)
  return _internal_status();
}
inline void TitleInfo::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void TitleInfo::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:PlaneWar.TitleInfo.status)
}

// string name = 3;
inline void TitleInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& TitleInfo::name() const {
  // @@protoc_insertion_point(field_get:PlaneWar.TitleInfo.name)
  return _internal_name();
}
inline void TitleInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:PlaneWar.TitleInfo.name)
}
inline std::string* TitleInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.TitleInfo.name)
  return _internal_mutable_name();
}
inline const std::string& TitleInfo::_internal_name() const {
  return name_.Get();
}
inline void TitleInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TitleInfo::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.TitleInfo.name)
}
inline void TitleInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.TitleInfo.name)
}
inline void TitleInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.TitleInfo.name)
}
inline std::string* TitleInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TitleInfo::release_name() {
  // @@protoc_insertion_point(field_release:PlaneWar.TitleInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TitleInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.TitleInfo.name)
}

// int32 endTime = 4;
inline void TitleInfo::clear_endtime() {
  endtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TitleInfo::_internal_endtime() const {
  return endtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TitleInfo::endtime() const {
  // @@protoc_insertion_point(field_get:PlaneWar.TitleInfo.endTime)
  return _internal_endtime();
}
inline void TitleInfo::_internal_set_endtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  endtime_ = value;
}
inline void TitleInfo::set_endtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:PlaneWar.TitleInfo.endTime)
}

// -------------------------------------------------------------------

// SCTitleList

// repeated .PlaneWar.TitleInfo titleList = 1;
inline int SCTitleList::_internal_titlelist_size() const {
  return titlelist_.size();
}
inline int SCTitleList::titlelist_size() const {
  return _internal_titlelist_size();
}
inline void SCTitleList::clear_titlelist() {
  titlelist_.Clear();
}
inline ::PlaneWar::TitleInfo* SCTitleList::mutable_titlelist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCTitleList.titleList)
  return titlelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::TitleInfo >*
SCTitleList::mutable_titlelist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCTitleList.titleList)
  return &titlelist_;
}
inline const ::PlaneWar::TitleInfo& SCTitleList::_internal_titlelist(int index) const {
  return titlelist_.Get(index);
}
inline const ::PlaneWar::TitleInfo& SCTitleList::titlelist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCTitleList.titleList)
  return _internal_titlelist(index);
}
inline ::PlaneWar::TitleInfo* SCTitleList::_internal_add_titlelist() {
  return titlelist_.Add();
}
inline ::PlaneWar::TitleInfo* SCTitleList::add_titlelist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCTitleList.titleList)
  return _internal_add_titlelist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::TitleInfo >&
SCTitleList::titlelist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCTitleList.titleList)
  return titlelist_;
}

// int32 selectedTitleId = 2;
inline void SCTitleList::clear_selectedtitleid() {
  selectedtitleid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTitleList::_internal_selectedtitleid() const {
  return selectedtitleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTitleList::selectedtitleid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCTitleList.selectedTitleId)
  return _internal_selectedtitleid();
}
inline void SCTitleList::_internal_set_selectedtitleid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  selectedtitleid_ = value;
}
inline void SCTitleList::set_selectedtitleid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_selectedtitleid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCTitleList.selectedTitleId)
}

// -------------------------------------------------------------------

// CSSelectTitle

// int32 id = 1;
inline void CSSelectTitle::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSelectTitle::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSelectTitle::id() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSSelectTitle.id)
  return _internal_id();
}
inline void CSSelectTitle::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void CSSelectTitle::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSSelectTitle.id)
}

// -------------------------------------------------------------------

// SCSelectTitle

// int32 id = 1;
inline void SCSelectTitle::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSelectTitle::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSelectTitle::id() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCSelectTitle.id)
  return _internal_id();
}
inline void SCSelectTitle::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void SCSelectTitle::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCSelectTitle.id)
}

// int32 chair = 2;
inline void SCSelectTitle::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSelectTitle::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSelectTitle::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCSelectTitle.chair)
  return _internal_chair();
}
inline void SCSelectTitle::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCSelectTitle::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCSelectTitle.chair)
}

// -------------------------------------------------------------------

// SCTitleActiveNotify

// int32 id = 1;
inline void SCTitleActiveNotify::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTitleActiveNotify::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTitleActiveNotify::id() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCTitleActiveNotify.id)
  return _internal_id();
}
inline void SCTitleActiveNotify::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void SCTitleActiveNotify::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCTitleActiveNotify.id)
}

// -------------------------------------------------------------------

// SCRoomInfoChangeNotify

// .PlaneWar.RoomInfo roomInfo = 1;
inline bool SCRoomInfoChangeNotify::_internal_has_roominfo() const {
  return this != internal_default_instance() && roominfo_ != nullptr;
}
inline bool SCRoomInfoChangeNotify::has_roominfo() const {
  return _internal_has_roominfo();
}
inline void SCRoomInfoChangeNotify::clear_roominfo() {
  if (GetArena() == nullptr && roominfo_ != nullptr) {
    delete roominfo_;
  }
  roominfo_ = nullptr;
}
inline const ::PlaneWar::RoomInfo& SCRoomInfoChangeNotify::_internal_roominfo() const {
  const ::PlaneWar::RoomInfo* p = roominfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::RoomInfo&>(
      ::PlaneWar::_RoomInfo_default_instance_);
}
inline const ::PlaneWar::RoomInfo& SCRoomInfoChangeNotify::roominfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCRoomInfoChangeNotify.roomInfo)
  return _internal_roominfo();
}
inline void SCRoomInfoChangeNotify::unsafe_arena_set_allocated_roominfo(
    ::PlaneWar::RoomInfo* roominfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  roominfo_ = roominfo;
  if (roominfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCRoomInfoChangeNotify.roomInfo)
}
inline ::PlaneWar::RoomInfo* SCRoomInfoChangeNotify::release_roominfo() {
  
  ::PlaneWar::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::RoomInfo* SCRoomInfoChangeNotify::unsafe_arena_release_roominfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCRoomInfoChangeNotify.roomInfo)
  
  ::PlaneWar::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::RoomInfo* SCRoomInfoChangeNotify::_internal_mutable_roominfo() {
  
  if (roominfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::RoomInfo>(GetArena());
    roominfo_ = p;
  }
  return roominfo_;
}
inline ::PlaneWar::RoomInfo* SCRoomInfoChangeNotify::mutable_roominfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCRoomInfoChangeNotify.roomInfo)
  return _internal_mutable_roominfo();
}
inline void SCRoomInfoChangeNotify::set_allocated_roominfo(::PlaneWar::RoomInfo* roominfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete roominfo_;
  }
  if (roominfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(roominfo);
    if (message_arena != submessage_arena) {
      roominfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roominfo, submessage_arena);
    }
    
  } else {
    
  }
  roominfo_ = roominfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCRoomInfoChangeNotify.roomInfo)
}

// -------------------------------------------------------------------

// CSMatchBrief

// -------------------------------------------------------------------

// SCMatchBrief

// int32 status = 1;
inline void SCMatchBrief::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMatchBrief::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMatchBrief::status() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCMatchBrief.status)
  return _internal_status();
}
inline void SCMatchBrief::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void SCMatchBrief::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCMatchBrief.status)
}

// int32 matchType = 2;
inline void SCMatchBrief::clear_matchtype() {
  matchtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMatchBrief::_internal_matchtype() const {
  return matchtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMatchBrief::matchtype() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCMatchBrief.matchType)
  return _internal_matchtype();
}
inline void SCMatchBrief::_internal_set_matchtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  matchtype_ = value;
}
inline void SCMatchBrief::set_matchtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_matchtype(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCMatchBrief.matchType)
}

// string matchName = 3;
inline void SCMatchBrief::clear_matchname() {
  matchname_.ClearToEmpty();
}
inline const std::string& SCMatchBrief::matchname() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCMatchBrief.matchName)
  return _internal_matchname();
}
inline void SCMatchBrief::set_matchname(const std::string& value) {
  _internal_set_matchname(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCMatchBrief.matchName)
}
inline std::string* SCMatchBrief::mutable_matchname() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCMatchBrief.matchName)
  return _internal_mutable_matchname();
}
inline const std::string& SCMatchBrief::_internal_matchname() const {
  return matchname_.Get();
}
inline void SCMatchBrief::_internal_set_matchname(const std::string& value) {
  
  matchname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SCMatchBrief::set_matchname(std::string&& value) {
  
  matchname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.SCMatchBrief.matchName)
}
inline void SCMatchBrief::set_matchname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  matchname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.SCMatchBrief.matchName)
}
inline void SCMatchBrief::set_matchname(const char* value,
    size_t size) {
  
  matchname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.SCMatchBrief.matchName)
}
inline std::string* SCMatchBrief::_internal_mutable_matchname() {
  
  return matchname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SCMatchBrief::release_matchname() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCMatchBrief.matchName)
  return matchname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SCMatchBrief::set_allocated_matchname(std::string* matchname) {
  if (matchname != nullptr) {
    
  } else {
    
  }
  matchname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), matchname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCMatchBrief.matchName)
}

// int32 countDown = 4;
inline void SCMatchBrief::clear_countdown() {
  countdown_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMatchBrief::_internal_countdown() const {
  return countdown_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMatchBrief::countdown() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCMatchBrief.countDown)
  return _internal_countdown();
}
inline void SCMatchBrief::_internal_set_countdown(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  countdown_ = value;
}
inline void SCMatchBrief::set_countdown(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_countdown(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCMatchBrief.countDown)
}

// int32 totalNum = 5;
inline void SCMatchBrief::clear_totalnum() {
  totalnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMatchBrief::_internal_totalnum() const {
  return totalnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMatchBrief::totalnum() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCMatchBrief.totalNum)
  return _internal_totalnum();
}
inline void SCMatchBrief::_internal_set_totalnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  totalnum_ = value;
}
inline void SCMatchBrief::set_totalnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_totalnum(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCMatchBrief.totalNum)
}

// int32 rewardNum = 6;
inline void SCMatchBrief::clear_rewardnum() {
  rewardnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMatchBrief::_internal_rewardnum() const {
  return rewardnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMatchBrief::rewardnum() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCMatchBrief.rewardNum)
  return _internal_rewardnum();
}
inline void SCMatchBrief::_internal_set_rewardnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rewardnum_ = value;
}
inline void SCMatchBrief::set_rewardnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rewardnum(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCMatchBrief.rewardNum)
}

// int32 myRank = 7;
inline void SCMatchBrief::clear_myrank() {
  myrank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMatchBrief::_internal_myrank() const {
  return myrank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMatchBrief::myrank() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCMatchBrief.myRank)
  return _internal_myrank();
}
inline void SCMatchBrief::_internal_set_myrank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  myrank_ = value;
}
inline void SCMatchBrief::set_myrank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_myrank(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCMatchBrief.myRank)
}

// int32 myPoint = 8;
inline void SCMatchBrief::clear_mypoint() {
  mypoint_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMatchBrief::_internal_mypoint() const {
  return mypoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMatchBrief::mypoint() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCMatchBrief.myPoint)
  return _internal_mypoint();
}
inline void SCMatchBrief::_internal_set_mypoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mypoint_ = value;
}
inline void SCMatchBrief::set_mypoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mypoint(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCMatchBrief.myPoint)
}

// int32 nextRankPoint = 9;
inline void SCMatchBrief::clear_nextrankpoint() {
  nextrankpoint_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMatchBrief::_internal_nextrankpoint() const {
  return nextrankpoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMatchBrief::nextrankpoint() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCMatchBrief.nextRankPoint)
  return _internal_nextrankpoint();
}
inline void SCMatchBrief::_internal_set_nextrankpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nextrankpoint_ = value;
}
inline void SCMatchBrief::set_nextrankpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nextrankpoint(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCMatchBrief.nextRankPoint)
}

// -------------------------------------------------------------------

// CSMatchDetail

// -------------------------------------------------------------------

// MatchSubInfo

// bool inMatch = 1;
inline void MatchSubInfo::clear_inmatch() {
  inmatch_ = false;
}
inline bool MatchSubInfo::_internal_inmatch() const {
  return inmatch_;
}
inline bool MatchSubInfo::inmatch() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MatchSubInfo.inMatch)
  return _internal_inmatch();
}
inline void MatchSubInfo::_internal_set_inmatch(bool value) {
  
  inmatch_ = value;
}
inline void MatchSubInfo::set_inmatch(bool value) {
  _internal_set_inmatch(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MatchSubInfo.inMatch)
}

// string subMatchName = 2;
inline void MatchSubInfo::clear_submatchname() {
  submatchname_.ClearToEmpty();
}
inline const std::string& MatchSubInfo::submatchname() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MatchSubInfo.subMatchName)
  return _internal_submatchname();
}
inline void MatchSubInfo::set_submatchname(const std::string& value) {
  _internal_set_submatchname(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MatchSubInfo.subMatchName)
}
inline std::string* MatchSubInfo::mutable_submatchname() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.MatchSubInfo.subMatchName)
  return _internal_mutable_submatchname();
}
inline const std::string& MatchSubInfo::_internal_submatchname() const {
  return submatchname_.Get();
}
inline void MatchSubInfo::_internal_set_submatchname(const std::string& value) {
  
  submatchname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MatchSubInfo::set_submatchname(std::string&& value) {
  
  submatchname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.MatchSubInfo.subMatchName)
}
inline void MatchSubInfo::set_submatchname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  submatchname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.MatchSubInfo.subMatchName)
}
inline void MatchSubInfo::set_submatchname(const char* value,
    size_t size) {
  
  submatchname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.MatchSubInfo.subMatchName)
}
inline std::string* MatchSubInfo::_internal_mutable_submatchname() {
  
  return submatchname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MatchSubInfo::release_submatchname() {
  // @@protoc_insertion_point(field_release:PlaneWar.MatchSubInfo.subMatchName)
  return submatchname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MatchSubInfo::set_allocated_submatchname(std::string* submatchname) {
  if (submatchname != nullptr) {
    
  } else {
    
  }
  submatchname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), submatchname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.MatchSubInfo.subMatchName)
}

// int32 jackpot = 3;
inline void MatchSubInfo::clear_jackpot() {
  jackpot_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchSubInfo::_internal_jackpot() const {
  return jackpot_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchSubInfo::jackpot() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MatchSubInfo.jackpot)
  return _internal_jackpot();
}
inline void MatchSubInfo::_internal_set_jackpot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  jackpot_ = value;
}
inline void MatchSubInfo::set_jackpot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_jackpot(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MatchSubInfo.jackpot)
}

// int32 totalNum = 4;
inline void MatchSubInfo::clear_totalnum() {
  totalnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchSubInfo::_internal_totalnum() const {
  return totalnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchSubInfo::totalnum() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MatchSubInfo.totalNum)
  return _internal_totalnum();
}
inline void MatchSubInfo::_internal_set_totalnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  totalnum_ = value;
}
inline void MatchSubInfo::set_totalnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_totalnum(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MatchSubInfo.totalNum)
}

// -------------------------------------------------------------------

// MatchRewardItem

// int32 id = 1;
inline void MatchRewardItem::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchRewardItem::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchRewardItem::id() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MatchRewardItem.id)
  return _internal_id();
}
inline void MatchRewardItem::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void MatchRewardItem::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MatchRewardItem.id)
}

// int32 num = 2;
inline void MatchRewardItem::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchRewardItem::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchRewardItem::num() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MatchRewardItem.num)
  return _internal_num();
}
inline void MatchRewardItem::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void MatchRewardItem::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MatchRewardItem.num)
}

// -------------------------------------------------------------------

// MatchRankInfo

// int32 playerId = 1;
inline void MatchRankInfo::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchRankInfo::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchRankInfo::playerid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MatchRankInfo.playerId)
  return _internal_playerid();
}
inline void MatchRankInfo::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void MatchRankInfo::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MatchRankInfo.playerId)
}

// int32 point = 2;
inline void MatchRankInfo::clear_point() {
  point_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchRankInfo::_internal_point() const {
  return point_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchRankInfo::point() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MatchRankInfo.point)
  return _internal_point();
}
inline void MatchRankInfo::_internal_set_point(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  point_ = value;
}
inline void MatchRankInfo::set_point(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_point(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MatchRankInfo.point)
}

// string nick = 3;
inline void MatchRankInfo::clear_nick() {
  nick_.ClearToEmpty();
}
inline const std::string& MatchRankInfo::nick() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MatchRankInfo.nick)
  return _internal_nick();
}
inline void MatchRankInfo::set_nick(const std::string& value) {
  _internal_set_nick(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MatchRankInfo.nick)
}
inline std::string* MatchRankInfo::mutable_nick() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.MatchRankInfo.nick)
  return _internal_mutable_nick();
}
inline const std::string& MatchRankInfo::_internal_nick() const {
  return nick_.Get();
}
inline void MatchRankInfo::_internal_set_nick(const std::string& value) {
  
  nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MatchRankInfo::set_nick(std::string&& value) {
  
  nick_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.MatchRankInfo.nick)
}
inline void MatchRankInfo::set_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.MatchRankInfo.nick)
}
inline void MatchRankInfo::set_nick(const char* value,
    size_t size) {
  
  nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.MatchRankInfo.nick)
}
inline std::string* MatchRankInfo::_internal_mutable_nick() {
  
  return nick_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MatchRankInfo::release_nick() {
  // @@protoc_insertion_point(field_release:PlaneWar.MatchRankInfo.nick)
  return nick_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MatchRankInfo::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    
  } else {
    
  }
  nick_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.MatchRankInfo.nick)
}

// string icon = 4;
inline void MatchRankInfo::clear_icon() {
  icon_.ClearToEmpty();
}
inline const std::string& MatchRankInfo::icon() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MatchRankInfo.icon)
  return _internal_icon();
}
inline void MatchRankInfo::set_icon(const std::string& value) {
  _internal_set_icon(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MatchRankInfo.icon)
}
inline std::string* MatchRankInfo::mutable_icon() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.MatchRankInfo.icon)
  return _internal_mutable_icon();
}
inline const std::string& MatchRankInfo::_internal_icon() const {
  return icon_.Get();
}
inline void MatchRankInfo::_internal_set_icon(const std::string& value) {
  
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MatchRankInfo::set_icon(std::string&& value) {
  
  icon_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.MatchRankInfo.icon)
}
inline void MatchRankInfo::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.MatchRankInfo.icon)
}
inline void MatchRankInfo::set_icon(const char* value,
    size_t size) {
  
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.MatchRankInfo.icon)
}
inline std::string* MatchRankInfo::_internal_mutable_icon() {
  
  return icon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MatchRankInfo::release_icon() {
  // @@protoc_insertion_point(field_release:PlaneWar.MatchRankInfo.icon)
  return icon_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MatchRankInfo::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.MatchRankInfo.icon)
}

// int32 rank = 5;
inline void MatchRankInfo::clear_rank() {
  rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchRankInfo::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchRankInfo::rank() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MatchRankInfo.rank)
  return _internal_rank();
}
inline void MatchRankInfo::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rank_ = value;
}
inline void MatchRankInfo::set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MatchRankInfo.rank)
}

// int32 pointBonus = 6;
inline void MatchRankInfo::clear_pointbonus() {
  pointbonus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchRankInfo::_internal_pointbonus() const {
  return pointbonus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchRankInfo::pointbonus() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MatchRankInfo.pointBonus)
  return _internal_pointbonus();
}
inline void MatchRankInfo::_internal_set_pointbonus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pointbonus_ = value;
}
inline void MatchRankInfo::set_pointbonus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pointbonus(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MatchRankInfo.pointBonus)
}

// int32 moneyBonus = 7;
inline void MatchRankInfo::clear_moneybonus() {
  moneybonus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchRankInfo::_internal_moneybonus() const {
  return moneybonus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchRankInfo::moneybonus() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MatchRankInfo.moneyBonus)
  return _internal_moneybonus();
}
inline void MatchRankInfo::_internal_set_moneybonus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  moneybonus_ = value;
}
inline void MatchRankInfo::set_moneybonus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_moneybonus(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MatchRankInfo.moneyBonus)
}

// .PlaneWar.MatchRewardItem rewardList = 8;
inline bool MatchRankInfo::_internal_has_rewardlist() const {
  return this != internal_default_instance() && rewardlist_ != nullptr;
}
inline bool MatchRankInfo::has_rewardlist() const {
  return _internal_has_rewardlist();
}
inline void MatchRankInfo::clear_rewardlist() {
  if (GetArena() == nullptr && rewardlist_ != nullptr) {
    delete rewardlist_;
  }
  rewardlist_ = nullptr;
}
inline const ::PlaneWar::MatchRewardItem& MatchRankInfo::_internal_rewardlist() const {
  const ::PlaneWar::MatchRewardItem* p = rewardlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::MatchRewardItem&>(
      ::PlaneWar::_MatchRewardItem_default_instance_);
}
inline const ::PlaneWar::MatchRewardItem& MatchRankInfo::rewardlist() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MatchRankInfo.rewardList)
  return _internal_rewardlist();
}
inline void MatchRankInfo::unsafe_arena_set_allocated_rewardlist(
    ::PlaneWar::MatchRewardItem* rewardlist) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rewardlist_);
  }
  rewardlist_ = rewardlist;
  if (rewardlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.MatchRankInfo.rewardList)
}
inline ::PlaneWar::MatchRewardItem* MatchRankInfo::release_rewardlist() {
  
  ::PlaneWar::MatchRewardItem* temp = rewardlist_;
  rewardlist_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::MatchRewardItem* MatchRankInfo::unsafe_arena_release_rewardlist() {
  // @@protoc_insertion_point(field_release:PlaneWar.MatchRankInfo.rewardList)
  
  ::PlaneWar::MatchRewardItem* temp = rewardlist_;
  rewardlist_ = nullptr;
  return temp;
}
inline ::PlaneWar::MatchRewardItem* MatchRankInfo::_internal_mutable_rewardlist() {
  
  if (rewardlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::MatchRewardItem>(GetArena());
    rewardlist_ = p;
  }
  return rewardlist_;
}
inline ::PlaneWar::MatchRewardItem* MatchRankInfo::mutable_rewardlist() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.MatchRankInfo.rewardList)
  return _internal_mutable_rewardlist();
}
inline void MatchRankInfo::set_allocated_rewardlist(::PlaneWar::MatchRewardItem* rewardlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rewardlist_;
  }
  if (rewardlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rewardlist);
    if (message_arena != submessage_arena) {
      rewardlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rewardlist, submessage_arena);
    }
    
  } else {
    
  }
  rewardlist_ = rewardlist;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.MatchRankInfo.rewardList)
}

// -------------------------------------------------------------------

// MatchTask

// int32 status = 1;
inline void MatchTask::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchTask::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchTask::status() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MatchTask.status)
  return _internal_status();
}
inline void MatchTask::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void MatchTask::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MatchTask.status)
}

// int32 target = 2;
inline void MatchTask::clear_target() {
  target_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchTask::_internal_target() const {
  return target_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchTask::target() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MatchTask.target)
  return _internal_target();
}
inline void MatchTask::_internal_set_target(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  target_ = value;
}
inline void MatchTask::set_target(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MatchTask.target)
}

// int32 reward = 3;
inline void MatchTask::clear_reward() {
  reward_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchTask::_internal_reward() const {
  return reward_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchTask::reward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MatchTask.reward)
  return _internal_reward();
}
inline void MatchTask::_internal_set_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reward_ = value;
}
inline void MatchTask::set_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MatchTask.reward)
}

// -------------------------------------------------------------------

// SCMatchDetail

// repeated .PlaneWar.MatchSubInfo subInfoList = 1;
inline int SCMatchDetail::_internal_subinfolist_size() const {
  return subinfolist_.size();
}
inline int SCMatchDetail::subinfolist_size() const {
  return _internal_subinfolist_size();
}
inline void SCMatchDetail::clear_subinfolist() {
  subinfolist_.Clear();
}
inline ::PlaneWar::MatchSubInfo* SCMatchDetail::mutable_subinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCMatchDetail.subInfoList)
  return subinfolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MatchSubInfo >*
SCMatchDetail::mutable_subinfolist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCMatchDetail.subInfoList)
  return &subinfolist_;
}
inline const ::PlaneWar::MatchSubInfo& SCMatchDetail::_internal_subinfolist(int index) const {
  return subinfolist_.Get(index);
}
inline const ::PlaneWar::MatchSubInfo& SCMatchDetail::subinfolist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCMatchDetail.subInfoList)
  return _internal_subinfolist(index);
}
inline ::PlaneWar::MatchSubInfo* SCMatchDetail::_internal_add_subinfolist() {
  return subinfolist_.Add();
}
inline ::PlaneWar::MatchSubInfo* SCMatchDetail::add_subinfolist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCMatchDetail.subInfoList)
  return _internal_add_subinfolist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MatchSubInfo >&
SCMatchDetail::subinfolist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCMatchDetail.subInfoList)
  return subinfolist_;
}

// repeated .PlaneWar.MatchRankInfo rankList = 2;
inline int SCMatchDetail::_internal_ranklist_size() const {
  return ranklist_.size();
}
inline int SCMatchDetail::ranklist_size() const {
  return _internal_ranklist_size();
}
inline void SCMatchDetail::clear_ranklist() {
  ranklist_.Clear();
}
inline ::PlaneWar::MatchRankInfo* SCMatchDetail::mutable_ranklist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCMatchDetail.rankList)
  return ranklist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MatchRankInfo >*
SCMatchDetail::mutable_ranklist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCMatchDetail.rankList)
  return &ranklist_;
}
inline const ::PlaneWar::MatchRankInfo& SCMatchDetail::_internal_ranklist(int index) const {
  return ranklist_.Get(index);
}
inline const ::PlaneWar::MatchRankInfo& SCMatchDetail::ranklist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCMatchDetail.rankList)
  return _internal_ranklist(index);
}
inline ::PlaneWar::MatchRankInfo* SCMatchDetail::_internal_add_ranklist() {
  return ranklist_.Add();
}
inline ::PlaneWar::MatchRankInfo* SCMatchDetail::add_ranklist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCMatchDetail.rankList)
  return _internal_add_ranklist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MatchRankInfo >&
SCMatchDetail::ranklist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCMatchDetail.rankList)
  return ranklist_;
}

// .PlaneWar.MatchRankInfo myRank = 3;
inline bool SCMatchDetail::_internal_has_myrank() const {
  return this != internal_default_instance() && myrank_ != nullptr;
}
inline bool SCMatchDetail::has_myrank() const {
  return _internal_has_myrank();
}
inline void SCMatchDetail::clear_myrank() {
  if (GetArena() == nullptr && myrank_ != nullptr) {
    delete myrank_;
  }
  myrank_ = nullptr;
}
inline const ::PlaneWar::MatchRankInfo& SCMatchDetail::_internal_myrank() const {
  const ::PlaneWar::MatchRankInfo* p = myrank_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::MatchRankInfo&>(
      ::PlaneWar::_MatchRankInfo_default_instance_);
}
inline const ::PlaneWar::MatchRankInfo& SCMatchDetail::myrank() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCMatchDetail.myRank)
  return _internal_myrank();
}
inline void SCMatchDetail::unsafe_arena_set_allocated_myrank(
    ::PlaneWar::MatchRankInfo* myrank) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(myrank_);
  }
  myrank_ = myrank;
  if (myrank) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCMatchDetail.myRank)
}
inline ::PlaneWar::MatchRankInfo* SCMatchDetail::release_myrank() {
  
  ::PlaneWar::MatchRankInfo* temp = myrank_;
  myrank_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::MatchRankInfo* SCMatchDetail::unsafe_arena_release_myrank() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCMatchDetail.myRank)
  
  ::PlaneWar::MatchRankInfo* temp = myrank_;
  myrank_ = nullptr;
  return temp;
}
inline ::PlaneWar::MatchRankInfo* SCMatchDetail::_internal_mutable_myrank() {
  
  if (myrank_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::MatchRankInfo>(GetArena());
    myrank_ = p;
  }
  return myrank_;
}
inline ::PlaneWar::MatchRankInfo* SCMatchDetail::mutable_myrank() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCMatchDetail.myRank)
  return _internal_mutable_myrank();
}
inline void SCMatchDetail::set_allocated_myrank(::PlaneWar::MatchRankInfo* myrank) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete myrank_;
  }
  if (myrank) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(myrank);
    if (message_arena != submessage_arena) {
      myrank = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, myrank, submessage_arena);
    }
    
  } else {
    
  }
  myrank_ = myrank;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCMatchDetail.myRank)
}

// repeated int32 tipList = 4;
inline int SCMatchDetail::_internal_tiplist_size() const {
  return tiplist_.size();
}
inline int SCMatchDetail::tiplist_size() const {
  return _internal_tiplist_size();
}
inline void SCMatchDetail::clear_tiplist() {
  tiplist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMatchDetail::_internal_tiplist(int index) const {
  return tiplist_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMatchDetail::tiplist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCMatchDetail.tipList)
  return _internal_tiplist(index);
}
inline void SCMatchDetail::set_tiplist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  tiplist_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCMatchDetail.tipList)
}
inline void SCMatchDetail::_internal_add_tiplist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  tiplist_.Add(value);
}
inline void SCMatchDetail::add_tiplist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_tiplist(value);
  // @@protoc_insertion_point(field_add:PlaneWar.SCMatchDetail.tipList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCMatchDetail::_internal_tiplist() const {
  return tiplist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCMatchDetail::tiplist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCMatchDetail.tipList)
  return _internal_tiplist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCMatchDetail::_internal_mutable_tiplist() {
  return &tiplist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCMatchDetail::mutable_tiplist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCMatchDetail.tipList)
  return _internal_mutable_tiplist();
}

// repeated int32 luckyStage = 5;
inline int SCMatchDetail::_internal_luckystage_size() const {
  return luckystage_.size();
}
inline int SCMatchDetail::luckystage_size() const {
  return _internal_luckystage_size();
}
inline void SCMatchDetail::clear_luckystage() {
  luckystage_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMatchDetail::_internal_luckystage(int index) const {
  return luckystage_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMatchDetail::luckystage(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCMatchDetail.luckyStage)
  return _internal_luckystage(index);
}
inline void SCMatchDetail::set_luckystage(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  luckystage_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCMatchDetail.luckyStage)
}
inline void SCMatchDetail::_internal_add_luckystage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  luckystage_.Add(value);
}
inline void SCMatchDetail::add_luckystage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_luckystage(value);
  // @@protoc_insertion_point(field_add:PlaneWar.SCMatchDetail.luckyStage)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCMatchDetail::_internal_luckystage() const {
  return luckystage_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCMatchDetail::luckystage() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCMatchDetail.luckyStage)
  return _internal_luckystage();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCMatchDetail::_internal_mutable_luckystage() {
  return &luckystage_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCMatchDetail::mutable_luckystage() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCMatchDetail.luckyStage)
  return _internal_mutable_luckystage();
}

// repeated .PlaneWar.MatchTask taskList = 6;
inline int SCMatchDetail::_internal_tasklist_size() const {
  return tasklist_.size();
}
inline int SCMatchDetail::tasklist_size() const {
  return _internal_tasklist_size();
}
inline void SCMatchDetail::clear_tasklist() {
  tasklist_.Clear();
}
inline ::PlaneWar::MatchTask* SCMatchDetail::mutable_tasklist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCMatchDetail.taskList)
  return tasklist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MatchTask >*
SCMatchDetail::mutable_tasklist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCMatchDetail.taskList)
  return &tasklist_;
}
inline const ::PlaneWar::MatchTask& SCMatchDetail::_internal_tasklist(int index) const {
  return tasklist_.Get(index);
}
inline const ::PlaneWar::MatchTask& SCMatchDetail::tasklist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCMatchDetail.taskList)
  return _internal_tasklist(index);
}
inline ::PlaneWar::MatchTask* SCMatchDetail::_internal_add_tasklist() {
  return tasklist_.Add();
}
inline ::PlaneWar::MatchTask* SCMatchDetail::add_tasklist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCMatchDetail.taskList)
  return _internal_add_tasklist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MatchTask >&
SCMatchDetail::tasklist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCMatchDetail.taskList)
  return tasklist_;
}

// -------------------------------------------------------------------

// CSMatchReward

// -------------------------------------------------------------------

// RankReward

// int32 from = 1;
inline void RankReward::clear_from() {
  from_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankReward::_internal_from() const {
  return from_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankReward::from() const {
  // @@protoc_insertion_point(field_get:PlaneWar.RankReward.from)
  return _internal_from();
}
inline void RankReward::_internal_set_from(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  from_ = value;
}
inline void RankReward::set_from(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:PlaneWar.RankReward.from)
}

// int32 to = 2;
inline void RankReward::clear_to() {
  to_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankReward::_internal_to() const {
  return to_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankReward::to() const {
  // @@protoc_insertion_point(field_get:PlaneWar.RankReward.to)
  return _internal_to();
}
inline void RankReward::_internal_set_to(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  to_ = value;
}
inline void RankReward::set_to(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:PlaneWar.RankReward.to)
}

// .PlaneWar.MatchRewardItem rewardList = 3;
inline bool RankReward::_internal_has_rewardlist() const {
  return this != internal_default_instance() && rewardlist_ != nullptr;
}
inline bool RankReward::has_rewardlist() const {
  return _internal_has_rewardlist();
}
inline void RankReward::clear_rewardlist() {
  if (GetArena() == nullptr && rewardlist_ != nullptr) {
    delete rewardlist_;
  }
  rewardlist_ = nullptr;
}
inline const ::PlaneWar::MatchRewardItem& RankReward::_internal_rewardlist() const {
  const ::PlaneWar::MatchRewardItem* p = rewardlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::MatchRewardItem&>(
      ::PlaneWar::_MatchRewardItem_default_instance_);
}
inline const ::PlaneWar::MatchRewardItem& RankReward::rewardlist() const {
  // @@protoc_insertion_point(field_get:PlaneWar.RankReward.rewardList)
  return _internal_rewardlist();
}
inline void RankReward::unsafe_arena_set_allocated_rewardlist(
    ::PlaneWar::MatchRewardItem* rewardlist) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rewardlist_);
  }
  rewardlist_ = rewardlist;
  if (rewardlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.RankReward.rewardList)
}
inline ::PlaneWar::MatchRewardItem* RankReward::release_rewardlist() {
  
  ::PlaneWar::MatchRewardItem* temp = rewardlist_;
  rewardlist_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::MatchRewardItem* RankReward::unsafe_arena_release_rewardlist() {
  // @@protoc_insertion_point(field_release:PlaneWar.RankReward.rewardList)
  
  ::PlaneWar::MatchRewardItem* temp = rewardlist_;
  rewardlist_ = nullptr;
  return temp;
}
inline ::PlaneWar::MatchRewardItem* RankReward::_internal_mutable_rewardlist() {
  
  if (rewardlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::MatchRewardItem>(GetArena());
    rewardlist_ = p;
  }
  return rewardlist_;
}
inline ::PlaneWar::MatchRewardItem* RankReward::mutable_rewardlist() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.RankReward.rewardList)
  return _internal_mutable_rewardlist();
}
inline void RankReward::set_allocated_rewardlist(::PlaneWar::MatchRewardItem* rewardlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rewardlist_;
  }
  if (rewardlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rewardlist);
    if (message_arena != submessage_arena) {
      rewardlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rewardlist, submessage_arena);
    }
    
  } else {
    
  }
  rewardlist_ = rewardlist;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.RankReward.rewardList)
}

// -------------------------------------------------------------------

// SCMatchReward

// repeated .PlaneWar.RankReward rankRewardList = 1;
inline int SCMatchReward::_internal_rankrewardlist_size() const {
  return rankrewardlist_.size();
}
inline int SCMatchReward::rankrewardlist_size() const {
  return _internal_rankrewardlist_size();
}
inline void SCMatchReward::clear_rankrewardlist() {
  rankrewardlist_.Clear();
}
inline ::PlaneWar::RankReward* SCMatchReward::mutable_rankrewardlist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCMatchReward.rankRewardList)
  return rankrewardlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::RankReward >*
SCMatchReward::mutable_rankrewardlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCMatchReward.rankRewardList)
  return &rankrewardlist_;
}
inline const ::PlaneWar::RankReward& SCMatchReward::_internal_rankrewardlist(int index) const {
  return rankrewardlist_.Get(index);
}
inline const ::PlaneWar::RankReward& SCMatchReward::rankrewardlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCMatchReward.rankRewardList)
  return _internal_rankrewardlist(index);
}
inline ::PlaneWar::RankReward* SCMatchReward::_internal_add_rankrewardlist() {
  return rankrewardlist_.Add();
}
inline ::PlaneWar::RankReward* SCMatchReward::add_rankrewardlist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCMatchReward.rankRewardList)
  return _internal_add_rankrewardlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::RankReward >&
SCMatchReward::rankrewardlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCMatchReward.rankRewardList)
  return rankrewardlist_;
}

// repeated int32 luckyReward = 2;
inline int SCMatchReward::_internal_luckyreward_size() const {
  return luckyreward_.size();
}
inline int SCMatchReward::luckyreward_size() const {
  return _internal_luckyreward_size();
}
inline void SCMatchReward::clear_luckyreward() {
  luckyreward_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMatchReward::_internal_luckyreward(int index) const {
  return luckyreward_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMatchReward::luckyreward(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCMatchReward.luckyReward)
  return _internal_luckyreward(index);
}
inline void SCMatchReward::set_luckyreward(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  luckyreward_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCMatchReward.luckyReward)
}
inline void SCMatchReward::_internal_add_luckyreward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  luckyreward_.Add(value);
}
inline void SCMatchReward::add_luckyreward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_luckyreward(value);
  // @@protoc_insertion_point(field_add:PlaneWar.SCMatchReward.luckyReward)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCMatchReward::_internal_luckyreward() const {
  return luckyreward_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCMatchReward::luckyreward() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCMatchReward.luckyReward)
  return _internal_luckyreward();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCMatchReward::_internal_mutable_luckyreward() {
  return &luckyreward_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCMatchReward::mutable_luckyreward() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCMatchReward.luckyReward)
  return _internal_mutable_luckyreward();
}

// -------------------------------------------------------------------

// MyMatchReward

// int32 rank = 1;
inline void MyMatchReward::clear_rank() {
  rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MyMatchReward::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MyMatchReward::rank() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MyMatchReward.rank)
  return _internal_rank();
}
inline void MyMatchReward::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rank_ = value;
}
inline void MyMatchReward::set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MyMatchReward.rank)
}

// repeated .PlaneWar.MatchRewardItem myReward = 2;
inline int MyMatchReward::_internal_myreward_size() const {
  return myreward_.size();
}
inline int MyMatchReward::myreward_size() const {
  return _internal_myreward_size();
}
inline void MyMatchReward::clear_myreward() {
  myreward_.Clear();
}
inline ::PlaneWar::MatchRewardItem* MyMatchReward::mutable_myreward(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.MyMatchReward.myReward)
  return myreward_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MatchRewardItem >*
MyMatchReward::mutable_myreward() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.MyMatchReward.myReward)
  return &myreward_;
}
inline const ::PlaneWar::MatchRewardItem& MyMatchReward::_internal_myreward(int index) const {
  return myreward_.Get(index);
}
inline const ::PlaneWar::MatchRewardItem& MyMatchReward::myreward(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.MyMatchReward.myReward)
  return _internal_myreward(index);
}
inline ::PlaneWar::MatchRewardItem* MyMatchReward::_internal_add_myreward() {
  return myreward_.Add();
}
inline ::PlaneWar::MatchRewardItem* MyMatchReward::add_myreward() {
  // @@protoc_insertion_point(field_add:PlaneWar.MyMatchReward.myReward)
  return _internal_add_myreward();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MatchRewardItem >&
MyMatchReward::myreward() const {
  // @@protoc_insertion_point(field_list:PlaneWar.MyMatchReward.myReward)
  return myreward_;
}

// int32 bonus = 3;
inline void MyMatchReward::clear_bonus() {
  bonus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MyMatchReward::_internal_bonus() const {
  return bonus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MyMatchReward::bonus() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MyMatchReward.bonus)
  return _internal_bonus();
}
inline void MyMatchReward::_internal_set_bonus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bonus_ = value;
}
inline void MyMatchReward::set_bonus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bonus(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MyMatchReward.bonus)
}

// int32 luckyReward = 4;
inline void MyMatchReward::clear_luckyreward() {
  luckyreward_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MyMatchReward::_internal_luckyreward() const {
  return luckyreward_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MyMatchReward::luckyreward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.MyMatchReward.luckyReward)
  return _internal_luckyreward();
}
inline void MyMatchReward::_internal_set_luckyreward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  luckyreward_ = value;
}
inline void MyMatchReward::set_luckyreward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_luckyreward(value);
  // @@protoc_insertion_point(field_set:PlaneWar.MyMatchReward.luckyReward)
}

// -------------------------------------------------------------------

// SCMatchRewardNotify

// .PlaneWar.MatchRankInfo rewardList = 1;
inline bool SCMatchRewardNotify::_internal_has_rewardlist() const {
  return this != internal_default_instance() && rewardlist_ != nullptr;
}
inline bool SCMatchRewardNotify::has_rewardlist() const {
  return _internal_has_rewardlist();
}
inline void SCMatchRewardNotify::clear_rewardlist() {
  if (GetArena() == nullptr && rewardlist_ != nullptr) {
    delete rewardlist_;
  }
  rewardlist_ = nullptr;
}
inline const ::PlaneWar::MatchRankInfo& SCMatchRewardNotify::_internal_rewardlist() const {
  const ::PlaneWar::MatchRankInfo* p = rewardlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::MatchRankInfo&>(
      ::PlaneWar::_MatchRankInfo_default_instance_);
}
inline const ::PlaneWar::MatchRankInfo& SCMatchRewardNotify::rewardlist() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCMatchRewardNotify.rewardList)
  return _internal_rewardlist();
}
inline void SCMatchRewardNotify::unsafe_arena_set_allocated_rewardlist(
    ::PlaneWar::MatchRankInfo* rewardlist) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rewardlist_);
  }
  rewardlist_ = rewardlist;
  if (rewardlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCMatchRewardNotify.rewardList)
}
inline ::PlaneWar::MatchRankInfo* SCMatchRewardNotify::release_rewardlist() {
  
  ::PlaneWar::MatchRankInfo* temp = rewardlist_;
  rewardlist_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::MatchRankInfo* SCMatchRewardNotify::unsafe_arena_release_rewardlist() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCMatchRewardNotify.rewardList)
  
  ::PlaneWar::MatchRankInfo* temp = rewardlist_;
  rewardlist_ = nullptr;
  return temp;
}
inline ::PlaneWar::MatchRankInfo* SCMatchRewardNotify::_internal_mutable_rewardlist() {
  
  if (rewardlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::MatchRankInfo>(GetArena());
    rewardlist_ = p;
  }
  return rewardlist_;
}
inline ::PlaneWar::MatchRankInfo* SCMatchRewardNotify::mutable_rewardlist() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCMatchRewardNotify.rewardList)
  return _internal_mutable_rewardlist();
}
inline void SCMatchRewardNotify::set_allocated_rewardlist(::PlaneWar::MatchRankInfo* rewardlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rewardlist_;
  }
  if (rewardlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rewardlist);
    if (message_arena != submessage_arena) {
      rewardlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rewardlist, submessage_arena);
    }
    
  } else {
    
  }
  rewardlist_ = rewardlist;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCMatchRewardNotify.rewardList)
}

// .PlaneWar.MyMatchReward myReward = 2;
inline bool SCMatchRewardNotify::_internal_has_myreward() const {
  return this != internal_default_instance() && myreward_ != nullptr;
}
inline bool SCMatchRewardNotify::has_myreward() const {
  return _internal_has_myreward();
}
inline void SCMatchRewardNotify::clear_myreward() {
  if (GetArena() == nullptr && myreward_ != nullptr) {
    delete myreward_;
  }
  myreward_ = nullptr;
}
inline const ::PlaneWar::MyMatchReward& SCMatchRewardNotify::_internal_myreward() const {
  const ::PlaneWar::MyMatchReward* p = myreward_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::MyMatchReward&>(
      ::PlaneWar::_MyMatchReward_default_instance_);
}
inline const ::PlaneWar::MyMatchReward& SCMatchRewardNotify::myreward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCMatchRewardNotify.myReward)
  return _internal_myreward();
}
inline void SCMatchRewardNotify::unsafe_arena_set_allocated_myreward(
    ::PlaneWar::MyMatchReward* myreward) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(myreward_);
  }
  myreward_ = myreward;
  if (myreward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCMatchRewardNotify.myReward)
}
inline ::PlaneWar::MyMatchReward* SCMatchRewardNotify::release_myreward() {
  
  ::PlaneWar::MyMatchReward* temp = myreward_;
  myreward_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::MyMatchReward* SCMatchRewardNotify::unsafe_arena_release_myreward() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCMatchRewardNotify.myReward)
  
  ::PlaneWar::MyMatchReward* temp = myreward_;
  myreward_ = nullptr;
  return temp;
}
inline ::PlaneWar::MyMatchReward* SCMatchRewardNotify::_internal_mutable_myreward() {
  
  if (myreward_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::MyMatchReward>(GetArena());
    myreward_ = p;
  }
  return myreward_;
}
inline ::PlaneWar::MyMatchReward* SCMatchRewardNotify::mutable_myreward() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCMatchRewardNotify.myReward)
  return _internal_mutable_myreward();
}
inline void SCMatchRewardNotify::set_allocated_myreward(::PlaneWar::MyMatchReward* myreward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete myreward_;
  }
  if (myreward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(myreward);
    if (message_arena != submessage_arena) {
      myreward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, myreward, submessage_arena);
    }
    
  } else {
    
  }
  myreward_ = myreward;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCMatchRewardNotify.myReward)
}

// -------------------------------------------------------------------

// CSGiftList

// -------------------------------------------------------------------

// GiftInfo

// int32 id = 1;
inline void GiftInfo::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GiftInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GiftInfo::id() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GiftInfo.id)
  return _internal_id();
}
inline void GiftInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void GiftInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GiftInfo.id)
}

// int32 pointBonus = 2;
inline void GiftInfo::clear_pointbonus() {
  pointbonus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GiftInfo::_internal_pointbonus() const {
  return pointbonus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GiftInfo::pointbonus() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GiftInfo.pointBonus)
  return _internal_pointbonus();
}
inline void GiftInfo::_internal_set_pointbonus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pointbonus_ = value;
}
inline void GiftInfo::set_pointbonus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pointbonus(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GiftInfo.pointBonus)
}

// int32 moneyBonus = 3;
inline void GiftInfo::clear_moneybonus() {
  moneybonus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GiftInfo::_internal_moneybonus() const {
  return moneybonus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GiftInfo::moneybonus() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GiftInfo.moneyBonus)
  return _internal_moneybonus();
}
inline void GiftInfo::_internal_set_moneybonus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  moneybonus_ = value;
}
inline void GiftInfo::set_moneybonus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_moneybonus(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GiftInfo.moneyBonus)
}

// bool canBuy = 4;
inline void GiftInfo::clear_canbuy() {
  canbuy_ = false;
}
inline bool GiftInfo::_internal_canbuy() const {
  return canbuy_;
}
inline bool GiftInfo::canbuy() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GiftInfo.canBuy)
  return _internal_canbuy();
}
inline void GiftInfo::_internal_set_canbuy(bool value) {
  
  canbuy_ = value;
}
inline void GiftInfo::set_canbuy(bool value) {
  _internal_set_canbuy(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GiftInfo.canBuy)
}

// int32 buyCountDown = 5;
inline void GiftInfo::clear_buycountdown() {
  buycountdown_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GiftInfo::_internal_buycountdown() const {
  return buycountdown_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GiftInfo::buycountdown() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GiftInfo.buyCountDown)
  return _internal_buycountdown();
}
inline void GiftInfo::_internal_set_buycountdown(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  buycountdown_ = value;
}
inline void GiftInfo::set_buycountdown(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_buycountdown(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GiftInfo.buyCountDown)
}

// -------------------------------------------------------------------

// SCGiftList

// repeated .PlaneWar.GiftInfo giftList = 1;
inline int SCGiftList::_internal_giftlist_size() const {
  return giftlist_.size();
}
inline int SCGiftList::giftlist_size() const {
  return _internal_giftlist_size();
}
inline void SCGiftList::clear_giftlist() {
  giftlist_.Clear();
}
inline ::PlaneWar::GiftInfo* SCGiftList::mutable_giftlist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCGiftList.giftList)
  return giftlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GiftInfo >*
SCGiftList::mutable_giftlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCGiftList.giftList)
  return &giftlist_;
}
inline const ::PlaneWar::GiftInfo& SCGiftList::_internal_giftlist(int index) const {
  return giftlist_.Get(index);
}
inline const ::PlaneWar::GiftInfo& SCGiftList::giftlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGiftList.giftList)
  return _internal_giftlist(index);
}
inline ::PlaneWar::GiftInfo* SCGiftList::_internal_add_giftlist() {
  return giftlist_.Add();
}
inline ::PlaneWar::GiftInfo* SCGiftList::add_giftlist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCGiftList.giftList)
  return _internal_add_giftlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GiftInfo >&
SCGiftList::giftlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCGiftList.giftList)
  return giftlist_;
}

// -------------------------------------------------------------------

// SCGiftExpireNotify

// int32 giftID = 1;
inline void SCGiftExpireNotify::clear_giftid() {
  giftid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGiftExpireNotify::_internal_giftid() const {
  return giftid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGiftExpireNotify::giftid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGiftExpireNotify.giftID)
  return _internal_giftid();
}
inline void SCGiftExpireNotify::_internal_set_giftid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  giftid_ = value;
}
inline void SCGiftExpireNotify::set_giftid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_giftid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGiftExpireNotify.giftID)
}

// string msg = 2;
inline void SCGiftExpireNotify::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& SCGiftExpireNotify::msg() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGiftExpireNotify.msg)
  return _internal_msg();
}
inline void SCGiftExpireNotify::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGiftExpireNotify.msg)
}
inline std::string* SCGiftExpireNotify::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCGiftExpireNotify.msg)
  return _internal_mutable_msg();
}
inline const std::string& SCGiftExpireNotify::_internal_msg() const {
  return msg_.Get();
}
inline void SCGiftExpireNotify::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SCGiftExpireNotify::set_msg(std::string&& value) {
  
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.SCGiftExpireNotify.msg)
}
inline void SCGiftExpireNotify::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.SCGiftExpireNotify.msg)
}
inline void SCGiftExpireNotify::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.SCGiftExpireNotify.msg)
}
inline std::string* SCGiftExpireNotify::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SCGiftExpireNotify::release_msg() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCGiftExpireNotify.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SCGiftExpireNotify::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCGiftExpireNotify.msg)
}

// -------------------------------------------------------------------

// CSGetMatchTaskReward

// int32 index = 1;
inline void CSGetMatchTaskReward::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSGetMatchTaskReward::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSGetMatchTaskReward::index() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSGetMatchTaskReward.index)
  return _internal_index();
}
inline void CSGetMatchTaskReward::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void CSGetMatchTaskReward::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSGetMatchTaskReward.index)
}

// -------------------------------------------------------------------

// SCGetMatchTaskReward

// int32 index = 1;
inline void SCGetMatchTaskReward::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetMatchTaskReward::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetMatchTaskReward::index() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetMatchTaskReward.index)
  return _internal_index();
}
inline void SCGetMatchTaskReward::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void SCGetMatchTaskReward::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGetMatchTaskReward.index)
}

// int32 reward = 2;
inline void SCGetMatchTaskReward::clear_reward() {
  reward_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetMatchTaskReward::_internal_reward() const {
  return reward_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetMatchTaskReward::reward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetMatchTaskReward.reward)
  return _internal_reward();
}
inline void SCGetMatchTaskReward::_internal_set_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reward_ = value;
}
inline void SCGetMatchTaskReward::set_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGetMatchTaskReward.reward)
}

// -------------------------------------------------------------------

// WeaponUseCondition

// int32 vipLevel = 1;
inline void WeaponUseCondition::clear_viplevel() {
  viplevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeaponUseCondition::_internal_viplevel() const {
  return viplevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeaponUseCondition::viplevel() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WeaponUseCondition.vipLevel)
  return _internal_viplevel();
}
inline void WeaponUseCondition::_internal_set_viplevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  viplevel_ = value;
}
inline void WeaponUseCondition::set_viplevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_viplevel(value);
  // @@protoc_insertion_point(field_set:PlaneWar.WeaponUseCondition.vipLevel)
}

// -------------------------------------------------------------------

// WeaponConfig

// int32 weaponID = 1;
inline void WeaponConfig::clear_weaponid() {
  weaponid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeaponConfig::_internal_weaponid() const {
  return weaponid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeaponConfig::weaponid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WeaponConfig.weaponID)
  return _internal_weaponid();
}
inline void WeaponConfig::_internal_set_weaponid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  weaponid_ = value;
}
inline void WeaponConfig::set_weaponid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_weaponid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.WeaponConfig.weaponID)
}

// string name = 2;
inline void WeaponConfig::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& WeaponConfig::name() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WeaponConfig.name)
  return _internal_name();
}
inline void WeaponConfig::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:PlaneWar.WeaponConfig.name)
}
inline std::string* WeaponConfig::mutable_name() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.WeaponConfig.name)
  return _internal_mutable_name();
}
inline const std::string& WeaponConfig::_internal_name() const {
  return name_.Get();
}
inline void WeaponConfig::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WeaponConfig::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.WeaponConfig.name)
}
inline void WeaponConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.WeaponConfig.name)
}
inline void WeaponConfig::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.WeaponConfig.name)
}
inline std::string* WeaponConfig::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WeaponConfig::release_name() {
  // @@protoc_insertion_point(field_release:PlaneWar.WeaponConfig.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WeaponConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.WeaponConfig.name)
}

// .PlaneWar.WeaponUseCondition condition = 3;
inline bool WeaponConfig::_internal_has_condition() const {
  return this != internal_default_instance() && condition_ != nullptr;
}
inline bool WeaponConfig::has_condition() const {
  return _internal_has_condition();
}
inline void WeaponConfig::clear_condition() {
  if (GetArena() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
}
inline const ::PlaneWar::WeaponUseCondition& WeaponConfig::_internal_condition() const {
  const ::PlaneWar::WeaponUseCondition* p = condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::WeaponUseCondition&>(
      ::PlaneWar::_WeaponUseCondition_default_instance_);
}
inline const ::PlaneWar::WeaponUseCondition& WeaponConfig::condition() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WeaponConfig.condition)
  return _internal_condition();
}
inline void WeaponConfig::unsafe_arena_set_allocated_condition(
    ::PlaneWar::WeaponUseCondition* condition) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition_);
  }
  condition_ = condition;
  if (condition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.WeaponConfig.condition)
}
inline ::PlaneWar::WeaponUseCondition* WeaponConfig::release_condition() {
  
  ::PlaneWar::WeaponUseCondition* temp = condition_;
  condition_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::WeaponUseCondition* WeaponConfig::unsafe_arena_release_condition() {
  // @@protoc_insertion_point(field_release:PlaneWar.WeaponConfig.condition)
  
  ::PlaneWar::WeaponUseCondition* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::PlaneWar::WeaponUseCondition* WeaponConfig::_internal_mutable_condition() {
  
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::WeaponUseCondition>(GetArena());
    condition_ = p;
  }
  return condition_;
}
inline ::PlaneWar::WeaponUseCondition* WeaponConfig::mutable_condition() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.WeaponConfig.condition)
  return _internal_mutable_condition();
}
inline void WeaponConfig::set_allocated_condition(::PlaneWar::WeaponUseCondition* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(condition);
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    
  } else {
    
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.WeaponConfig.condition)
}

// -------------------------------------------------------------------

// CSWeaponPieceInfo

// bool isBrowsing = 1;
inline void CSWeaponPieceInfo::clear_isbrowsing() {
  isbrowsing_ = false;
}
inline bool CSWeaponPieceInfo::_internal_isbrowsing() const {
  return isbrowsing_;
}
inline bool CSWeaponPieceInfo::isbrowsing() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSWeaponPieceInfo.isBrowsing)
  return _internal_isbrowsing();
}
inline void CSWeaponPieceInfo::_internal_set_isbrowsing(bool value) {
  
  isbrowsing_ = value;
}
inline void CSWeaponPieceInfo::set_isbrowsing(bool value) {
  _internal_set_isbrowsing(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSWeaponPieceInfo.isBrowsing)
}

// -------------------------------------------------------------------

// PiecesStackLimitInfo

// int32 fromVipLevel = 1;
inline void PiecesStackLimitInfo::clear_fromviplevel() {
  fromviplevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiecesStackLimitInfo::_internal_fromviplevel() const {
  return fromviplevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiecesStackLimitInfo::fromviplevel() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PiecesStackLimitInfo.fromVipLevel)
  return _internal_fromviplevel();
}
inline void PiecesStackLimitInfo::_internal_set_fromviplevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fromviplevel_ = value;
}
inline void PiecesStackLimitInfo::set_fromviplevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fromviplevel(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PiecesStackLimitInfo.fromVipLevel)
}

// int32 toVipLevel = 2;
inline void PiecesStackLimitInfo::clear_toviplevel() {
  toviplevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiecesStackLimitInfo::_internal_toviplevel() const {
  return toviplevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiecesStackLimitInfo::toviplevel() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PiecesStackLimitInfo.toVipLevel)
  return _internal_toviplevel();
}
inline void PiecesStackLimitInfo::_internal_set_toviplevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  toviplevel_ = value;
}
inline void PiecesStackLimitInfo::set_toviplevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_toviplevel(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PiecesStackLimitInfo.toVipLevel)
}

// int32 stackNum = 3;
inline void PiecesStackLimitInfo::clear_stacknum() {
  stacknum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiecesStackLimitInfo::_internal_stacknum() const {
  return stacknum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiecesStackLimitInfo::stacknum() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PiecesStackLimitInfo.stackNum)
  return _internal_stacknum();
}
inline void PiecesStackLimitInfo::_internal_set_stacknum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stacknum_ = value;
}
inline void PiecesStackLimitInfo::set_stacknum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stacknum(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PiecesStackLimitInfo.stackNum)
}

// -------------------------------------------------------------------

// SCWeaponPieceInfo

// bool isBrowsing = 1;
inline void SCWeaponPieceInfo::clear_isbrowsing() {
  isbrowsing_ = false;
}
inline bool SCWeaponPieceInfo::_internal_isbrowsing() const {
  return isbrowsing_;
}
inline bool SCWeaponPieceInfo::isbrowsing() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCWeaponPieceInfo.isBrowsing)
  return _internal_isbrowsing();
}
inline void SCWeaponPieceInfo::_internal_set_isbrowsing(bool value) {
  
  isbrowsing_ = value;
}
inline void SCWeaponPieceInfo::set_isbrowsing(bool value) {
  _internal_set_isbrowsing(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCWeaponPieceInfo.isBrowsing)
}

// int32 chair = 2;
inline void SCWeaponPieceInfo::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCWeaponPieceInfo::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCWeaponPieceInfo::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCWeaponPieceInfo.chair)
  return _internal_chair();
}
inline void SCWeaponPieceInfo::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCWeaponPieceInfo::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCWeaponPieceInfo.chair)
}

// .PlaneWar.PieceInfo pieceInfo = 3;
inline bool SCWeaponPieceInfo::_internal_has_pieceinfo() const {
  return this != internal_default_instance() && pieceinfo_ != nullptr;
}
inline bool SCWeaponPieceInfo::has_pieceinfo() const {
  return _internal_has_pieceinfo();
}
inline void SCWeaponPieceInfo::clear_pieceinfo() {
  if (GetArena() == nullptr && pieceinfo_ != nullptr) {
    delete pieceinfo_;
  }
  pieceinfo_ = nullptr;
}
inline const ::PlaneWar::PieceInfo& SCWeaponPieceInfo::_internal_pieceinfo() const {
  const ::PlaneWar::PieceInfo* p = pieceinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::PieceInfo&>(
      ::PlaneWar::_PieceInfo_default_instance_);
}
inline const ::PlaneWar::PieceInfo& SCWeaponPieceInfo::pieceinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCWeaponPieceInfo.pieceInfo)
  return _internal_pieceinfo();
}
inline void SCWeaponPieceInfo::unsafe_arena_set_allocated_pieceinfo(
    ::PlaneWar::PieceInfo* pieceinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pieceinfo_);
  }
  pieceinfo_ = pieceinfo;
  if (pieceinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCWeaponPieceInfo.pieceInfo)
}
inline ::PlaneWar::PieceInfo* SCWeaponPieceInfo::release_pieceinfo() {
  
  ::PlaneWar::PieceInfo* temp = pieceinfo_;
  pieceinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::PieceInfo* SCWeaponPieceInfo::unsafe_arena_release_pieceinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCWeaponPieceInfo.pieceInfo)
  
  ::PlaneWar::PieceInfo* temp = pieceinfo_;
  pieceinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::PieceInfo* SCWeaponPieceInfo::_internal_mutable_pieceinfo() {
  
  if (pieceinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::PieceInfo>(GetArena());
    pieceinfo_ = p;
  }
  return pieceinfo_;
}
inline ::PlaneWar::PieceInfo* SCWeaponPieceInfo::mutable_pieceinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCWeaponPieceInfo.pieceInfo)
  return _internal_mutable_pieceinfo();
}
inline void SCWeaponPieceInfo::set_allocated_pieceinfo(::PlaneWar::PieceInfo* pieceinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pieceinfo_;
  }
  if (pieceinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pieceinfo);
    if (message_arena != submessage_arena) {
      pieceinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pieceinfo, submessage_arena);
    }
    
  } else {
    
  }
  pieceinfo_ = pieceinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCWeaponPieceInfo.pieceInfo)
}

// repeated .PlaneWar.WeaponConfig configList = 4;
inline int SCWeaponPieceInfo::_internal_configlist_size() const {
  return configlist_.size();
}
inline int SCWeaponPieceInfo::configlist_size() const {
  return _internal_configlist_size();
}
inline void SCWeaponPieceInfo::clear_configlist() {
  configlist_.Clear();
}
inline ::PlaneWar::WeaponConfig* SCWeaponPieceInfo::mutable_configlist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCWeaponPieceInfo.configList)
  return configlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::WeaponConfig >*
SCWeaponPieceInfo::mutable_configlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCWeaponPieceInfo.configList)
  return &configlist_;
}
inline const ::PlaneWar::WeaponConfig& SCWeaponPieceInfo::_internal_configlist(int index) const {
  return configlist_.Get(index);
}
inline const ::PlaneWar::WeaponConfig& SCWeaponPieceInfo::configlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCWeaponPieceInfo.configList)
  return _internal_configlist(index);
}
inline ::PlaneWar::WeaponConfig* SCWeaponPieceInfo::_internal_add_configlist() {
  return configlist_.Add();
}
inline ::PlaneWar::WeaponConfig* SCWeaponPieceInfo::add_configlist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCWeaponPieceInfo.configList)
  return _internal_add_configlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::WeaponConfig >&
SCWeaponPieceInfo::configlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCWeaponPieceInfo.configList)
  return configlist_;
}

// repeated .PlaneWar.PiecesStackLimitInfo stackLimitList = 5;
inline int SCWeaponPieceInfo::_internal_stacklimitlist_size() const {
  return stacklimitlist_.size();
}
inline int SCWeaponPieceInfo::stacklimitlist_size() const {
  return _internal_stacklimitlist_size();
}
inline void SCWeaponPieceInfo::clear_stacklimitlist() {
  stacklimitlist_.Clear();
}
inline ::PlaneWar::PiecesStackLimitInfo* SCWeaponPieceInfo::mutable_stacklimitlist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCWeaponPieceInfo.stackLimitList)
  return stacklimitlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PiecesStackLimitInfo >*
SCWeaponPieceInfo::mutable_stacklimitlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCWeaponPieceInfo.stackLimitList)
  return &stacklimitlist_;
}
inline const ::PlaneWar::PiecesStackLimitInfo& SCWeaponPieceInfo::_internal_stacklimitlist(int index) const {
  return stacklimitlist_.Get(index);
}
inline const ::PlaneWar::PiecesStackLimitInfo& SCWeaponPieceInfo::stacklimitlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCWeaponPieceInfo.stackLimitList)
  return _internal_stacklimitlist(index);
}
inline ::PlaneWar::PiecesStackLimitInfo* SCWeaponPieceInfo::_internal_add_stacklimitlist() {
  return stacklimitlist_.Add();
}
inline ::PlaneWar::PiecesStackLimitInfo* SCWeaponPieceInfo::add_stacklimitlist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCWeaponPieceInfo.stackLimitList)
  return _internal_add_stacklimitlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PiecesStackLimitInfo >&
SCWeaponPieceInfo::stacklimitlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCWeaponPieceInfo.stackLimitList)
  return stacklimitlist_;
}

// -------------------------------------------------------------------

// CSBuyWeapon

// -------------------------------------------------------------------

// SCBuyWeapon

// int32 chair = 1;
inline void SCBuyWeapon::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBuyWeapon::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBuyWeapon::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCBuyWeapon.chair)
  return _internal_chair();
}
inline void SCBuyWeapon::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCBuyWeapon::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCBuyWeapon.chair)
}

// int32 weaponID = 2;
inline void SCBuyWeapon::clear_weaponid() {
  weaponid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBuyWeapon::_internal_weaponid() const {
  return weaponid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBuyWeapon::weaponid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCBuyWeapon.weaponID)
  return _internal_weaponid();
}
inline void SCBuyWeapon::_internal_set_weaponid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  weaponid_ = value;
}
inline void SCBuyWeapon::set_weaponid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_weaponid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCBuyWeapon.weaponID)
}

// .PlaneWar.WeaponInfo weaponInfo = 3;
inline bool SCBuyWeapon::_internal_has_weaponinfo() const {
  return this != internal_default_instance() && weaponinfo_ != nullptr;
}
inline bool SCBuyWeapon::has_weaponinfo() const {
  return _internal_has_weaponinfo();
}
inline void SCBuyWeapon::clear_weaponinfo() {
  if (GetArena() == nullptr && weaponinfo_ != nullptr) {
    delete weaponinfo_;
  }
  weaponinfo_ = nullptr;
}
inline const ::PlaneWar::WeaponInfo& SCBuyWeapon::_internal_weaponinfo() const {
  const ::PlaneWar::WeaponInfo* p = weaponinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::WeaponInfo&>(
      ::PlaneWar::_WeaponInfo_default_instance_);
}
inline const ::PlaneWar::WeaponInfo& SCBuyWeapon::weaponinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCBuyWeapon.weaponInfo)
  return _internal_weaponinfo();
}
inline void SCBuyWeapon::unsafe_arena_set_allocated_weaponinfo(
    ::PlaneWar::WeaponInfo* weaponinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(weaponinfo_);
  }
  weaponinfo_ = weaponinfo;
  if (weaponinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCBuyWeapon.weaponInfo)
}
inline ::PlaneWar::WeaponInfo* SCBuyWeapon::release_weaponinfo() {
  
  ::PlaneWar::WeaponInfo* temp = weaponinfo_;
  weaponinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::WeaponInfo* SCBuyWeapon::unsafe_arena_release_weaponinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCBuyWeapon.weaponInfo)
  
  ::PlaneWar::WeaponInfo* temp = weaponinfo_;
  weaponinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::WeaponInfo* SCBuyWeapon::_internal_mutable_weaponinfo() {
  
  if (weaponinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::WeaponInfo>(GetArena());
    weaponinfo_ = p;
  }
  return weaponinfo_;
}
inline ::PlaneWar::WeaponInfo* SCBuyWeapon::mutable_weaponinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCBuyWeapon.weaponInfo)
  return _internal_mutable_weaponinfo();
}
inline void SCBuyWeapon::set_allocated_weaponinfo(::PlaneWar::WeaponInfo* weaponinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete weaponinfo_;
  }
  if (weaponinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(weaponinfo);
    if (message_arena != submessage_arena) {
      weaponinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weaponinfo, submessage_arena);
    }
    
  } else {
    
  }
  weaponinfo_ = weaponinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCBuyWeapon.weaponInfo)
}

// .PlaneWar.PieceInfo pieceInfo = 4;
inline bool SCBuyWeapon::_internal_has_pieceinfo() const {
  return this != internal_default_instance() && pieceinfo_ != nullptr;
}
inline bool SCBuyWeapon::has_pieceinfo() const {
  return _internal_has_pieceinfo();
}
inline void SCBuyWeapon::clear_pieceinfo() {
  if (GetArena() == nullptr && pieceinfo_ != nullptr) {
    delete pieceinfo_;
  }
  pieceinfo_ = nullptr;
}
inline const ::PlaneWar::PieceInfo& SCBuyWeapon::_internal_pieceinfo() const {
  const ::PlaneWar::PieceInfo* p = pieceinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::PieceInfo&>(
      ::PlaneWar::_PieceInfo_default_instance_);
}
inline const ::PlaneWar::PieceInfo& SCBuyWeapon::pieceinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCBuyWeapon.pieceInfo)
  return _internal_pieceinfo();
}
inline void SCBuyWeapon::unsafe_arena_set_allocated_pieceinfo(
    ::PlaneWar::PieceInfo* pieceinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pieceinfo_);
  }
  pieceinfo_ = pieceinfo;
  if (pieceinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCBuyWeapon.pieceInfo)
}
inline ::PlaneWar::PieceInfo* SCBuyWeapon::release_pieceinfo() {
  
  ::PlaneWar::PieceInfo* temp = pieceinfo_;
  pieceinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::PieceInfo* SCBuyWeapon::unsafe_arena_release_pieceinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCBuyWeapon.pieceInfo)
  
  ::PlaneWar::PieceInfo* temp = pieceinfo_;
  pieceinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::PieceInfo* SCBuyWeapon::_internal_mutable_pieceinfo() {
  
  if (pieceinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::PieceInfo>(GetArena());
    pieceinfo_ = p;
  }
  return pieceinfo_;
}
inline ::PlaneWar::PieceInfo* SCBuyWeapon::mutable_pieceinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCBuyWeapon.pieceInfo)
  return _internal_mutable_pieceinfo();
}
inline void SCBuyWeapon::set_allocated_pieceinfo(::PlaneWar::PieceInfo* pieceinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pieceinfo_;
  }
  if (pieceinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pieceinfo);
    if (message_arena != submessage_arena) {
      pieceinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pieceinfo, submessage_arena);
    }
    
  } else {
    
  }
  pieceinfo_ = pieceinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCBuyWeapon.pieceInfo)
}

// .PlaneWar.WeaponUseCondition condition = 5;
inline bool SCBuyWeapon::_internal_has_condition() const {
  return this != internal_default_instance() && condition_ != nullptr;
}
inline bool SCBuyWeapon::has_condition() const {
  return _internal_has_condition();
}
inline void SCBuyWeapon::clear_condition() {
  if (GetArena() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
}
inline const ::PlaneWar::WeaponUseCondition& SCBuyWeapon::_internal_condition() const {
  const ::PlaneWar::WeaponUseCondition* p = condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::WeaponUseCondition&>(
      ::PlaneWar::_WeaponUseCondition_default_instance_);
}
inline const ::PlaneWar::WeaponUseCondition& SCBuyWeapon::condition() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCBuyWeapon.condition)
  return _internal_condition();
}
inline void SCBuyWeapon::unsafe_arena_set_allocated_condition(
    ::PlaneWar::WeaponUseCondition* condition) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition_);
  }
  condition_ = condition;
  if (condition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCBuyWeapon.condition)
}
inline ::PlaneWar::WeaponUseCondition* SCBuyWeapon::release_condition() {
  
  ::PlaneWar::WeaponUseCondition* temp = condition_;
  condition_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::WeaponUseCondition* SCBuyWeapon::unsafe_arena_release_condition() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCBuyWeapon.condition)
  
  ::PlaneWar::WeaponUseCondition* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::PlaneWar::WeaponUseCondition* SCBuyWeapon::_internal_mutable_condition() {
  
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::WeaponUseCondition>(GetArena());
    condition_ = p;
  }
  return condition_;
}
inline ::PlaneWar::WeaponUseCondition* SCBuyWeapon::mutable_condition() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCBuyWeapon.condition)
  return _internal_mutable_condition();
}
inline void SCBuyWeapon::set_allocated_condition(::PlaneWar::WeaponUseCondition* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(condition);
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    
  } else {
    
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCBuyWeapon.condition)
}

// -------------------------------------------------------------------

// EarnRecord

// int32 playerID = 1;
inline void EarnRecord::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EarnRecord::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EarnRecord::playerid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.EarnRecord.playerID)
  return _internal_playerid();
}
inline void EarnRecord::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void EarnRecord::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.EarnRecord.playerID)
}

// string nick = 2;
inline void EarnRecord::clear_nick() {
  nick_.ClearToEmpty();
}
inline const std::string& EarnRecord::nick() const {
  // @@protoc_insertion_point(field_get:PlaneWar.EarnRecord.nick)
  return _internal_nick();
}
inline void EarnRecord::set_nick(const std::string& value) {
  _internal_set_nick(value);
  // @@protoc_insertion_point(field_set:PlaneWar.EarnRecord.nick)
}
inline std::string* EarnRecord::mutable_nick() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.EarnRecord.nick)
  return _internal_mutable_nick();
}
inline const std::string& EarnRecord::_internal_nick() const {
  return nick_.Get();
}
inline void EarnRecord::_internal_set_nick(const std::string& value) {
  
  nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EarnRecord::set_nick(std::string&& value) {
  
  nick_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.EarnRecord.nick)
}
inline void EarnRecord::set_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.EarnRecord.nick)
}
inline void EarnRecord::set_nick(const char* value,
    size_t size) {
  
  nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.EarnRecord.nick)
}
inline std::string* EarnRecord::_internal_mutable_nick() {
  
  return nick_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EarnRecord::release_nick() {
  // @@protoc_insertion_point(field_release:PlaneWar.EarnRecord.nick)
  return nick_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EarnRecord::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    
  } else {
    
  }
  nick_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.EarnRecord.nick)
}

// string icon = 3;
inline void EarnRecord::clear_icon() {
  icon_.ClearToEmpty();
}
inline const std::string& EarnRecord::icon() const {
  // @@protoc_insertion_point(field_get:PlaneWar.EarnRecord.icon)
  return _internal_icon();
}
inline void EarnRecord::set_icon(const std::string& value) {
  _internal_set_icon(value);
  // @@protoc_insertion_point(field_set:PlaneWar.EarnRecord.icon)
}
inline std::string* EarnRecord::mutable_icon() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.EarnRecord.icon)
  return _internal_mutable_icon();
}
inline const std::string& EarnRecord::_internal_icon() const {
  return icon_.Get();
}
inline void EarnRecord::_internal_set_icon(const std::string& value) {
  
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EarnRecord::set_icon(std::string&& value) {
  
  icon_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.EarnRecord.icon)
}
inline void EarnRecord::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.EarnRecord.icon)
}
inline void EarnRecord::set_icon(const char* value,
    size_t size) {
  
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.EarnRecord.icon)
}
inline std::string* EarnRecord::_internal_mutable_icon() {
  
  return icon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EarnRecord::release_icon() {
  // @@protoc_insertion_point(field_release:PlaneWar.EarnRecord.icon)
  return icon_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EarnRecord::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.EarnRecord.icon)
}

// int32 vipLevel = 4;
inline void EarnRecord::clear_viplevel() {
  viplevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EarnRecord::_internal_viplevel() const {
  return viplevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EarnRecord::viplevel() const {
  // @@protoc_insertion_point(field_get:PlaneWar.EarnRecord.vipLevel)
  return _internal_viplevel();
}
inline void EarnRecord::_internal_set_viplevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  viplevel_ = value;
}
inline void EarnRecord::set_viplevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_viplevel(value);
  // @@protoc_insertion_point(field_set:PlaneWar.EarnRecord.vipLevel)
}

// string weaponName = 5;
inline void EarnRecord::clear_weaponname() {
  weaponname_.ClearToEmpty();
}
inline const std::string& EarnRecord::weaponname() const {
  // @@protoc_insertion_point(field_get:PlaneWar.EarnRecord.weaponName)
  return _internal_weaponname();
}
inline void EarnRecord::set_weaponname(const std::string& value) {
  _internal_set_weaponname(value);
  // @@protoc_insertion_point(field_set:PlaneWar.EarnRecord.weaponName)
}
inline std::string* EarnRecord::mutable_weaponname() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.EarnRecord.weaponName)
  return _internal_mutable_weaponname();
}
inline const std::string& EarnRecord::_internal_weaponname() const {
  return weaponname_.Get();
}
inline void EarnRecord::_internal_set_weaponname(const std::string& value) {
  
  weaponname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EarnRecord::set_weaponname(std::string&& value) {
  
  weaponname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.EarnRecord.weaponName)
}
inline void EarnRecord::set_weaponname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  weaponname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.EarnRecord.weaponName)
}
inline void EarnRecord::set_weaponname(const char* value,
    size_t size) {
  
  weaponname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.EarnRecord.weaponName)
}
inline std::string* EarnRecord::_internal_mutable_weaponname() {
  
  return weaponname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EarnRecord::release_weaponname() {
  // @@protoc_insertion_point(field_release:PlaneWar.EarnRecord.weaponName)
  return weaponname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EarnRecord::set_allocated_weaponname(std::string* weaponname) {
  if (weaponname != nullptr) {
    
  } else {
    
  }
  weaponname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), weaponname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.EarnRecord.weaponName)
}

// int32 time = 6;
inline void EarnRecord::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EarnRecord::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EarnRecord::time() const {
  // @@protoc_insertion_point(field_get:PlaneWar.EarnRecord.time)
  return _internal_time();
}
inline void EarnRecord::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void EarnRecord::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:PlaneWar.EarnRecord.time)
}

// int32 earn = 7;
inline void EarnRecord::clear_earn() {
  earn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EarnRecord::_internal_earn() const {
  return earn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EarnRecord::earn() const {
  // @@protoc_insertion_point(field_get:PlaneWar.EarnRecord.earn)
  return _internal_earn();
}
inline void EarnRecord::_internal_set_earn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  earn_ = value;
}
inline void EarnRecord::set_earn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_earn(value);
  // @@protoc_insertion_point(field_set:PlaneWar.EarnRecord.earn)
}

// -------------------------------------------------------------------

// CSWeaponEarnRecord

// int32 page = 1;
inline void CSWeaponEarnRecord::clear_page() {
  page_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSWeaponEarnRecord::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSWeaponEarnRecord::page() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSWeaponEarnRecord.page)
  return _internal_page();
}
inline void CSWeaponEarnRecord::_internal_set_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_ = value;
}
inline void CSWeaponEarnRecord::set_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSWeaponEarnRecord.page)
}

// -------------------------------------------------------------------

// SCWeaponEarnRecord

// repeated .PlaneWar.EarnRecord recordList = 1;
inline int SCWeaponEarnRecord::_internal_recordlist_size() const {
  return recordlist_.size();
}
inline int SCWeaponEarnRecord::recordlist_size() const {
  return _internal_recordlist_size();
}
inline void SCWeaponEarnRecord::clear_recordlist() {
  recordlist_.Clear();
}
inline ::PlaneWar::EarnRecord* SCWeaponEarnRecord::mutable_recordlist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCWeaponEarnRecord.recordList)
  return recordlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::EarnRecord >*
SCWeaponEarnRecord::mutable_recordlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCWeaponEarnRecord.recordList)
  return &recordlist_;
}
inline const ::PlaneWar::EarnRecord& SCWeaponEarnRecord::_internal_recordlist(int index) const {
  return recordlist_.Get(index);
}
inline const ::PlaneWar::EarnRecord& SCWeaponEarnRecord::recordlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCWeaponEarnRecord.recordList)
  return _internal_recordlist(index);
}
inline ::PlaneWar::EarnRecord* SCWeaponEarnRecord::_internal_add_recordlist() {
  return recordlist_.Add();
}
inline ::PlaneWar::EarnRecord* SCWeaponEarnRecord::add_recordlist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCWeaponEarnRecord.recordList)
  return _internal_add_recordlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::EarnRecord >&
SCWeaponEarnRecord::recordlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCWeaponEarnRecord.recordList)
  return recordlist_;
}

// int32 page = 2;
inline void SCWeaponEarnRecord::clear_page() {
  page_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCWeaponEarnRecord::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCWeaponEarnRecord::page() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCWeaponEarnRecord.page)
  return _internal_page();
}
inline void SCWeaponEarnRecord::_internal_set_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_ = value;
}
inline void SCWeaponEarnRecord::set_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCWeaponEarnRecord.page)
}

// -------------------------------------------------------------------

// CSStateForceSettle

// int32 sourceUID = 1;
inline void CSStateForceSettle::clear_sourceuid() {
  sourceuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSStateForceSettle::_internal_sourceuid() const {
  return sourceuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSStateForceSettle::sourceuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSStateForceSettle.sourceUID)
  return _internal_sourceuid();
}
inline void CSStateForceSettle::_internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sourceuid_ = value;
}
inline void CSStateForceSettle::set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sourceuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSStateForceSettle.sourceUID)
}

// -------------------------------------------------------------------

// SCStateForceSettle

// int32 chair = 1;
inline void SCStateForceSettle::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCStateForceSettle::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCStateForceSettle::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCStateForceSettle.chair)
  return _internal_chair();
}
inline void SCStateForceSettle::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCStateForceSettle::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCStateForceSettle.chair)
}

// int32 sourceUID = 2;
inline void SCStateForceSettle::clear_sourceuid() {
  sourceuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCStateForceSettle::_internal_sourceuid() const {
  return sourceuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCStateForceSettle::sourceuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCStateForceSettle.sourceUID)
  return _internal_sourceuid();
}
inline void SCStateForceSettle::_internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sourceuid_ = value;
}
inline void SCStateForceSettle::set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sourceuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCStateForceSettle.sourceUID)
}

// int32 originUID = 3;
inline void SCStateForceSettle::clear_originuid() {
  originuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCStateForceSettle::_internal_originuid() const {
  return originuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCStateForceSettle::originuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCStateForceSettle.originUID)
  return _internal_originuid();
}
inline void SCStateForceSettle::_internal_set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  originuid_ = value;
}
inline void SCStateForceSettle::set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_originuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCStateForceSettle.originUID)
}

// int32 remain = 4;
inline void SCStateForceSettle::clear_remain() {
  remain_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCStateForceSettle::_internal_remain() const {
  return remain_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCStateForceSettle::remain() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCStateForceSettle.remain)
  return _internal_remain();
}
inline void SCStateForceSettle::_internal_set_remain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  remain_ = value;
}
inline void SCStateForceSettle::set_remain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_remain(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCStateForceSettle.remain)
}

// -------------------------------------------------------------------

// SCAddMissedBullet

// int32 chair = 1;
inline void SCAddMissedBullet::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCAddMissedBullet::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCAddMissedBullet::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCAddMissedBullet.chair)
  return _internal_chair();
}
inline void SCAddMissedBullet::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCAddMissedBullet::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCAddMissedBullet.chair)
}

// int32 bulletType = 2;
inline void SCAddMissedBullet::clear_bullettype() {
  bullettype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCAddMissedBullet::_internal_bullettype() const {
  return bullettype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCAddMissedBullet::bullettype() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCAddMissedBullet.bulletType)
  return _internal_bullettype();
}
inline void SCAddMissedBullet::_internal_set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bullettype_ = value;
}
inline void SCAddMissedBullet::set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bullettype(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCAddMissedBullet.bulletType)
}

// int32 sourceUID = 3;
inline void SCAddMissedBullet::clear_sourceuid() {
  sourceuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCAddMissedBullet::_internal_sourceuid() const {
  return sourceuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCAddMissedBullet::sourceuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCAddMissedBullet.sourceUID)
  return _internal_sourceuid();
}
inline void SCAddMissedBullet::_internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sourceuid_ = value;
}
inline void SCAddMissedBullet::set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sourceuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCAddMissedBullet.sourceUID)
}

// int32 addNum = 4;
inline void SCAddMissedBullet::clear_addnum() {
  addnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCAddMissedBullet::_internal_addnum() const {
  return addnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCAddMissedBullet::addnum() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCAddMissedBullet.addNum)
  return _internal_addnum();
}
inline void SCAddMissedBullet::_internal_set_addnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  addnum_ = value;
}
inline void SCAddMissedBullet::set_addnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_addnum(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCAddMissedBullet.addNum)
}

// -------------------------------------------------------------------

// CSUpdateBulletData

// float angle = 1;
inline void CSUpdateBulletData::clear_angle() {
  angle_ = 0;
}
inline float CSUpdateBulletData::_internal_angle() const {
  return angle_;
}
inline float CSUpdateBulletData::angle() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSUpdateBulletData.angle)
  return _internal_angle();
}
inline void CSUpdateBulletData::_internal_set_angle(float value) {
  
  angle_ = value;
}
inline void CSUpdateBulletData::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSUpdateBulletData.angle)
}

// int32 bulletType = 2;
inline void CSUpdateBulletData::clear_bullettype() {
  bullettype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUpdateBulletData::_internal_bullettype() const {
  return bullettype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUpdateBulletData::bullettype() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSUpdateBulletData.bulletType)
  return _internal_bullettype();
}
inline void CSUpdateBulletData::_internal_set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bullettype_ = value;
}
inline void CSUpdateBulletData::set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bullettype(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSUpdateBulletData.bulletType)
}

// int32 sourceUID = 3;
inline void CSUpdateBulletData::clear_sourceuid() {
  sourceuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUpdateBulletData::_internal_sourceuid() const {
  return sourceuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUpdateBulletData::sourceuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSUpdateBulletData.sourceUID)
  return _internal_sourceuid();
}
inline void CSUpdateBulletData::_internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sourceuid_ = value;
}
inline void CSUpdateBulletData::set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sourceuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSUpdateBulletData.sourceUID)
}

// int32 confID = 4;
inline void CSUpdateBulletData::clear_confid() {
  confid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUpdateBulletData::_internal_confid() const {
  return confid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUpdateBulletData::confid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSUpdateBulletData.confID)
  return _internal_confid();
}
inline void CSUpdateBulletData::_internal_set_confid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  confid_ = value;
}
inline void CSUpdateBulletData::set_confid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_confid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSUpdateBulletData.confID)
}

// bool isShooting = 5;
inline void CSUpdateBulletData::clear_isshooting() {
  isshooting_ = false;
}
inline bool CSUpdateBulletData::_internal_isshooting() const {
  return isshooting_;
}
inline bool CSUpdateBulletData::isshooting() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSUpdateBulletData.isShooting)
  return _internal_isshooting();
}
inline void CSUpdateBulletData::_internal_set_isshooting(bool value) {
  
  isshooting_ = value;
}
inline void CSUpdateBulletData::set_isshooting(bool value) {
  _internal_set_isshooting(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSUpdateBulletData.isShooting)
}

// -------------------------------------------------------------------

// SCUpdateBulletData

// int32 chair = 1;
inline void SCUpdateBulletData::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpdateBulletData::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpdateBulletData::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUpdateBulletData.chair)
  return _internal_chair();
}
inline void SCUpdateBulletData::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCUpdateBulletData::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUpdateBulletData.chair)
}

// float angle = 2;
inline void SCUpdateBulletData::clear_angle() {
  angle_ = 0;
}
inline float SCUpdateBulletData::_internal_angle() const {
  return angle_;
}
inline float SCUpdateBulletData::angle() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUpdateBulletData.angle)
  return _internal_angle();
}
inline void SCUpdateBulletData::_internal_set_angle(float value) {
  
  angle_ = value;
}
inline void SCUpdateBulletData::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUpdateBulletData.angle)
}

// int32 bulletType = 3;
inline void SCUpdateBulletData::clear_bullettype() {
  bullettype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpdateBulletData::_internal_bullettype() const {
  return bullettype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpdateBulletData::bullettype() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUpdateBulletData.bulletType)
  return _internal_bullettype();
}
inline void SCUpdateBulletData::_internal_set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bullettype_ = value;
}
inline void SCUpdateBulletData::set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bullettype(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUpdateBulletData.bulletType)
}

// int32 sourceUID = 4;
inline void SCUpdateBulletData::clear_sourceuid() {
  sourceuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpdateBulletData::_internal_sourceuid() const {
  return sourceuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpdateBulletData::sourceuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUpdateBulletData.sourceUID)
  return _internal_sourceuid();
}
inline void SCUpdateBulletData::_internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sourceuid_ = value;
}
inline void SCUpdateBulletData::set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sourceuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUpdateBulletData.sourceUID)
}

// int32 confID = 5;
inline void SCUpdateBulletData::clear_confid() {
  confid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpdateBulletData::_internal_confid() const {
  return confid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpdateBulletData::confid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUpdateBulletData.confID)
  return _internal_confid();
}
inline void SCUpdateBulletData::_internal_set_confid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  confid_ = value;
}
inline void SCUpdateBulletData::set_confid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_confid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUpdateBulletData.confID)
}

// bool isShooting = 6;
inline void SCUpdateBulletData::clear_isshooting() {
  isshooting_ = false;
}
inline bool SCUpdateBulletData::_internal_isshooting() const {
  return isshooting_;
}
inline bool SCUpdateBulletData::isshooting() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUpdateBulletData.isShooting)
  return _internal_isshooting();
}
inline void SCUpdateBulletData::_internal_set_isshooting(bool value) {
  
  isshooting_ = value;
}
inline void SCUpdateBulletData::set_isshooting(bool value) {
  _internal_set_isshooting(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUpdateBulletData.isShooting)
}

// -------------------------------------------------------------------

// CSUseMissileBatch

// -------------------------------------------------------------------

// SCUseMissileBatch

// int32 chair = 1;
inline void SCUseMissileBatch::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseMissileBatch::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseMissileBatch::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUseMissileBatch.chair)
  return _internal_chair();
}
inline void SCUseMissileBatch::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCUseMissileBatch::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUseMissileBatch.chair)
}

// int32 totalReward = 2;
inline void SCUseMissileBatch::clear_totalreward() {
  totalreward_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseMissileBatch::_internal_totalreward() const {
  return totalreward_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseMissileBatch::totalreward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUseMissileBatch.totalReward)
  return _internal_totalreward();
}
inline void SCUseMissileBatch::_internal_set_totalreward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  totalreward_ = value;
}
inline void SCUseMissileBatch::set_totalreward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_totalreward(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUseMissileBatch.totalReward)
}

// int64 curMoney = 3;
inline void SCUseMissileBatch::clear_curmoney() {
  curmoney_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCUseMissileBatch::_internal_curmoney() const {
  return curmoney_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCUseMissileBatch::curmoney() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUseMissileBatch.curMoney)
  return _internal_curmoney();
}
inline void SCUseMissileBatch::_internal_set_curmoney(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  curmoney_ = value;
}
inline void SCUseMissileBatch::set_curmoney(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_curmoney(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUseMissileBatch.curMoney)
}

// repeated .PlaneWar.MissileInfo remainMissile = 4;
inline int SCUseMissileBatch::_internal_remainmissile_size() const {
  return remainmissile_.size();
}
inline int SCUseMissileBatch::remainmissile_size() const {
  return _internal_remainmissile_size();
}
inline void SCUseMissileBatch::clear_remainmissile() {
  remainmissile_.Clear();
}
inline ::PlaneWar::MissileInfo* SCUseMissileBatch::mutable_remainmissile(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCUseMissileBatch.remainMissile)
  return remainmissile_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MissileInfo >*
SCUseMissileBatch::mutable_remainmissile() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCUseMissileBatch.remainMissile)
  return &remainmissile_;
}
inline const ::PlaneWar::MissileInfo& SCUseMissileBatch::_internal_remainmissile(int index) const {
  return remainmissile_.Get(index);
}
inline const ::PlaneWar::MissileInfo& SCUseMissileBatch::remainmissile(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUseMissileBatch.remainMissile)
  return _internal_remainmissile(index);
}
inline ::PlaneWar::MissileInfo* SCUseMissileBatch::_internal_add_remainmissile() {
  return remainmissile_.Add();
}
inline ::PlaneWar::MissileInfo* SCUseMissileBatch::add_remainmissile() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCUseMissileBatch.remainMissile)
  return _internal_add_remainmissile();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MissileInfo >&
SCUseMissileBatch::remainmissile() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCUseMissileBatch.remainMissile)
  return remainmissile_;
}

// -------------------------------------------------------------------

// CSSyncPropsToHall

// -------------------------------------------------------------------

// SCSyncPropsToHall

// -------------------------------------------------------------------

// CSChangeTable

// -------------------------------------------------------------------

// SCChangeTable

// -------------------------------------------------------------------

// CSUseRoulette

// int32 iD = 1;
inline void CSUseRoulette::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUseRoulette::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUseRoulette::id() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSUseRoulette.iD)
  return _internal_id();
}
inline void CSUseRoulette::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void CSUseRoulette::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSUseRoulette.iD)
}

// -------------------------------------------------------------------

// SCUseRoulette

// int32 chair = 1;
inline void SCUseRoulette::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseRoulette::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseRoulette::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUseRoulette.chair)
  return _internal_chair();
}
inline void SCUseRoulette::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCUseRoulette::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUseRoulette.chair)
}

// int32 id = 2;
inline void SCUseRoulette::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseRoulette::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseRoulette::id() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUseRoulette.id)
  return _internal_id();
}
inline void SCUseRoulette::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void SCUseRoulette::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUseRoulette.id)
}

// int32 costNum = 3;
inline void SCUseRoulette::clear_costnum() {
  costnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseRoulette::_internal_costnum() const {
  return costnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseRoulette::costnum() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUseRoulette.costNum)
  return _internal_costnum();
}
inline void SCUseRoulette::_internal_set_costnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  costnum_ = value;
}
inline void SCUseRoulette::set_costnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_costnum(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUseRoulette.costNum)
}

// int32 ratio = 4;
inline void SCUseRoulette::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseRoulette::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseRoulette::ratio() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUseRoulette.ratio)
  return _internal_ratio();
}
inline void SCUseRoulette::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void SCUseRoulette::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUseRoulette.ratio)
}

// .PlaneWar.Roulette roulette = 5;
inline bool SCUseRoulette::_internal_has_roulette() const {
  return this != internal_default_instance() && roulette_ != nullptr;
}
inline bool SCUseRoulette::has_roulette() const {
  return _internal_has_roulette();
}
inline void SCUseRoulette::clear_roulette() {
  if (GetArena() == nullptr && roulette_ != nullptr) {
    delete roulette_;
  }
  roulette_ = nullptr;
}
inline const ::PlaneWar::Roulette& SCUseRoulette::_internal_roulette() const {
  const ::PlaneWar::Roulette* p = roulette_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::Roulette&>(
      ::PlaneWar::_Roulette_default_instance_);
}
inline const ::PlaneWar::Roulette& SCUseRoulette::roulette() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUseRoulette.roulette)
  return _internal_roulette();
}
inline void SCUseRoulette::unsafe_arena_set_allocated_roulette(
    ::PlaneWar::Roulette* roulette) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roulette_);
  }
  roulette_ = roulette;
  if (roulette) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCUseRoulette.roulette)
}
inline ::PlaneWar::Roulette* SCUseRoulette::release_roulette() {
  
  ::PlaneWar::Roulette* temp = roulette_;
  roulette_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::Roulette* SCUseRoulette::unsafe_arena_release_roulette() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCUseRoulette.roulette)
  
  ::PlaneWar::Roulette* temp = roulette_;
  roulette_ = nullptr;
  return temp;
}
inline ::PlaneWar::Roulette* SCUseRoulette::_internal_mutable_roulette() {
  
  if (roulette_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::Roulette>(GetArena());
    roulette_ = p;
  }
  return roulette_;
}
inline ::PlaneWar::Roulette* SCUseRoulette::mutable_roulette() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCUseRoulette.roulette)
  return _internal_mutable_roulette();
}
inline void SCUseRoulette::set_allocated_roulette(::PlaneWar::Roulette* roulette) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete roulette_;
  }
  if (roulette) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(roulette);
    if (message_arena != submessage_arena) {
      roulette = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roulette, submessage_arena);
    }
    
  } else {
    
  }
  roulette_ = roulette;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCUseRoulette.roulette)
}

// int32 reward = 6;
inline void SCUseRoulette::clear_reward() {
  reward_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseRoulette::_internal_reward() const {
  return reward_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseRoulette::reward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUseRoulette.reward)
  return _internal_reward();
}
inline void SCUseRoulette::_internal_set_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reward_ = value;
}
inline void SCUseRoulette::set_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUseRoulette.reward)
}

// int64 curMoney = 7;
inline void SCUseRoulette::clear_curmoney() {
  curmoney_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCUseRoulette::_internal_curmoney() const {
  return curmoney_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCUseRoulette::curmoney() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUseRoulette.curMoney)
  return _internal_curmoney();
}
inline void SCUseRoulette::_internal_set_curmoney(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  curmoney_ = value;
}
inline void SCUseRoulette::set_curmoney(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_curmoney(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUseRoulette.curMoney)
}

// -------------------------------------------------------------------

// CSRedEnvelopePoint

// -------------------------------------------------------------------

// RedOpenInfo

// .PlaneWar.RedOpenStatus status = 1;
inline void RedOpenInfo::clear_status() {
  status_ = 0;
}
inline ::PlaneWar::RedOpenStatus RedOpenInfo::_internal_status() const {
  return static_cast< ::PlaneWar::RedOpenStatus >(status_);
}
inline ::PlaneWar::RedOpenStatus RedOpenInfo::status() const {
  // @@protoc_insertion_point(field_get:PlaneWar.RedOpenInfo.status)
  return _internal_status();
}
inline void RedOpenInfo::_internal_set_status(::PlaneWar::RedOpenStatus value) {
  
  status_ = value;
}
inline void RedOpenInfo::set_status(::PlaneWar::RedOpenStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:PlaneWar.RedOpenInfo.status)
}

// int32 unLockVipLevel = 2;
inline void RedOpenInfo::clear_unlockviplevel() {
  unlockviplevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RedOpenInfo::_internal_unlockviplevel() const {
  return unlockviplevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RedOpenInfo::unlockviplevel() const {
  // @@protoc_insertion_point(field_get:PlaneWar.RedOpenInfo.unLockVipLevel)
  return _internal_unlockviplevel();
}
inline void RedOpenInfo::_internal_set_unlockviplevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  unlockviplevel_ = value;
}
inline void RedOpenInfo::set_unlockviplevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_unlockviplevel(value);
  // @@protoc_insertion_point(field_set:PlaneWar.RedOpenInfo.unLockVipLevel)
}

// -------------------------------------------------------------------

// SCRedEnvelopePoint

// int32 curPoint = 1;
inline void SCRedEnvelopePoint::clear_curpoint() {
  curpoint_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRedEnvelopePoint::_internal_curpoint() const {
  return curpoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRedEnvelopePoint::curpoint() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCRedEnvelopePoint.curPoint)
  return _internal_curpoint();
}
inline void SCRedEnvelopePoint::_internal_set_curpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curpoint_ = value;
}
inline void SCRedEnvelopePoint::set_curpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curpoint(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCRedEnvelopePoint.curPoint)
}

// int32 maxPoint = 2;
inline void SCRedEnvelopePoint::clear_maxpoint() {
  maxpoint_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRedEnvelopePoint::_internal_maxpoint() const {
  return maxpoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRedEnvelopePoint::maxpoint() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCRedEnvelopePoint.maxPoint)
  return _internal_maxpoint();
}
inline void SCRedEnvelopePoint::_internal_set_maxpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxpoint_ = value;
}
inline void SCRedEnvelopePoint::set_maxpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxpoint(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCRedEnvelopePoint.maxPoint)
}

// int32 costPoint = 3;
inline void SCRedEnvelopePoint::clear_costpoint() {
  costpoint_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRedEnvelopePoint::_internal_costpoint() const {
  return costpoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRedEnvelopePoint::costpoint() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCRedEnvelopePoint.costPoint)
  return _internal_costpoint();
}
inline void SCRedEnvelopePoint::_internal_set_costpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  costpoint_ = value;
}
inline void SCRedEnvelopePoint::set_costpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_costpoint(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCRedEnvelopePoint.costPoint)
}

// repeated .PlaneWar.RedOpenInfo redOpenList = 4;
inline int SCRedEnvelopePoint::_internal_redopenlist_size() const {
  return redopenlist_.size();
}
inline int SCRedEnvelopePoint::redopenlist_size() const {
  return _internal_redopenlist_size();
}
inline void SCRedEnvelopePoint::clear_redopenlist() {
  redopenlist_.Clear();
}
inline ::PlaneWar::RedOpenInfo* SCRedEnvelopePoint::mutable_redopenlist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCRedEnvelopePoint.redOpenList)
  return redopenlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::RedOpenInfo >*
SCRedEnvelopePoint::mutable_redopenlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCRedEnvelopePoint.redOpenList)
  return &redopenlist_;
}
inline const ::PlaneWar::RedOpenInfo& SCRedEnvelopePoint::_internal_redopenlist(int index) const {
  return redopenlist_.Get(index);
}
inline const ::PlaneWar::RedOpenInfo& SCRedEnvelopePoint::redopenlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCRedEnvelopePoint.redOpenList)
  return _internal_redopenlist(index);
}
inline ::PlaneWar::RedOpenInfo* SCRedEnvelopePoint::_internal_add_redopenlist() {
  return redopenlist_.Add();
}
inline ::PlaneWar::RedOpenInfo* SCRedEnvelopePoint::add_redopenlist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCRedEnvelopePoint.redOpenList)
  return _internal_add_redopenlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::RedOpenInfo >&
SCRedEnvelopePoint::redopenlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCRedEnvelopePoint.redOpenList)
  return redopenlist_;
}

// -------------------------------------------------------------------

// CSRedEnvelopeInfo

// bool isOpen = 1;
inline void CSRedEnvelopeInfo::clear_isopen() {
  isopen_ = false;
}
inline bool CSRedEnvelopeInfo::_internal_isopen() const {
  return isopen_;
}
inline bool CSRedEnvelopeInfo::isopen() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSRedEnvelopeInfo.isOpen)
  return _internal_isopen();
}
inline void CSRedEnvelopeInfo::_internal_set_isopen(bool value) {
  
  isopen_ = value;
}
inline void CSRedEnvelopeInfo::set_isopen(bool value) {
  _internal_set_isopen(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSRedEnvelopeInfo.isOpen)
}

// -------------------------------------------------------------------

// RedInfo

// int32 cost = 1;
inline void RedInfo::clear_cost() {
  cost_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RedInfo::_internal_cost() const {
  return cost_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RedInfo::cost() const {
  // @@protoc_insertion_point(field_get:PlaneWar.RedInfo.cost)
  return _internal_cost();
}
inline void RedInfo::_internal_set_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cost_ = value;
}
inline void RedInfo::set_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:PlaneWar.RedInfo.cost)
}

// -------------------------------------------------------------------

// SCRedEnvelopeInfo

// repeated .PlaneWar.RedInfo redList = 1;
inline int SCRedEnvelopeInfo::_internal_redlist_size() const {
  return redlist_.size();
}
inline int SCRedEnvelopeInfo::redlist_size() const {
  return _internal_redlist_size();
}
inline void SCRedEnvelopeInfo::clear_redlist() {
  redlist_.Clear();
}
inline ::PlaneWar::RedInfo* SCRedEnvelopeInfo::mutable_redlist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCRedEnvelopeInfo.redList)
  return redlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::RedInfo >*
SCRedEnvelopeInfo::mutable_redlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCRedEnvelopeInfo.redList)
  return &redlist_;
}
inline const ::PlaneWar::RedInfo& SCRedEnvelopeInfo::_internal_redlist(int index) const {
  return redlist_.Get(index);
}
inline const ::PlaneWar::RedInfo& SCRedEnvelopeInfo::redlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCRedEnvelopeInfo.redList)
  return _internal_redlist(index);
}
inline ::PlaneWar::RedInfo* SCRedEnvelopeInfo::_internal_add_redlist() {
  return redlist_.Add();
}
inline ::PlaneWar::RedInfo* SCRedEnvelopeInfo::add_redlist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCRedEnvelopeInfo.redList)
  return _internal_add_redlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::RedInfo >&
SCRedEnvelopeInfo::redlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCRedEnvelopeInfo.redList)
  return redlist_;
}

// -------------------------------------------------------------------

// CSOpenRedEnvelope

// int32 index = 1;
inline void CSOpenRedEnvelope::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSOpenRedEnvelope::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSOpenRedEnvelope::index() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSOpenRedEnvelope.index)
  return _internal_index();
}
inline void CSOpenRedEnvelope::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void CSOpenRedEnvelope::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSOpenRedEnvelope.index)
}

// -------------------------------------------------------------------

// RedUpgradeInfo

// int32 leastReward = 1;
inline void RedUpgradeInfo::clear_leastreward() {
  leastreward_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RedUpgradeInfo::_internal_leastreward() const {
  return leastreward_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RedUpgradeInfo::leastreward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.RedUpgradeInfo.leastReward)
  return _internal_leastreward();
}
inline void RedUpgradeInfo::_internal_set_leastreward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  leastreward_ = value;
}
inline void RedUpgradeInfo::set_leastreward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_leastreward(value);
  // @@protoc_insertion_point(field_set:PlaneWar.RedUpgradeInfo.leastReward)
}

// int32 mayAddReward = 2;
inline void RedUpgradeInfo::clear_mayaddreward() {
  mayaddreward_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RedUpgradeInfo::_internal_mayaddreward() const {
  return mayaddreward_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RedUpgradeInfo::mayaddreward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.RedUpgradeInfo.mayAddReward)
  return _internal_mayaddreward();
}
inline void RedUpgradeInfo::_internal_set_mayaddreward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mayaddreward_ = value;
}
inline void RedUpgradeInfo::set_mayaddreward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mayaddreward(value);
  // @@protoc_insertion_point(field_set:PlaneWar.RedUpgradeInfo.mayAddReward)
}

// int32 maxUpgradeNum = 3;
inline void RedUpgradeInfo::clear_maxupgradenum() {
  maxupgradenum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RedUpgradeInfo::_internal_maxupgradenum() const {
  return maxupgradenum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RedUpgradeInfo::maxupgradenum() const {
  // @@protoc_insertion_point(field_get:PlaneWar.RedUpgradeInfo.maxUpgradeNum)
  return _internal_maxupgradenum();
}
inline void RedUpgradeInfo::_internal_set_maxupgradenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxupgradenum_ = value;
}
inline void RedUpgradeInfo::set_maxupgradenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxupgradenum(value);
  // @@protoc_insertion_point(field_set:PlaneWar.RedUpgradeInfo.maxUpgradeNum)
}

// int32 remainUpgradeNum = 4;
inline void RedUpgradeInfo::clear_remainupgradenum() {
  remainupgradenum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RedUpgradeInfo::_internal_remainupgradenum() const {
  return remainupgradenum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RedUpgradeInfo::remainupgradenum() const {
  // @@protoc_insertion_point(field_get:PlaneWar.RedUpgradeInfo.remainUpgradeNum)
  return _internal_remainupgradenum();
}
inline void RedUpgradeInfo::_internal_set_remainupgradenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  remainupgradenum_ = value;
}
inline void RedUpgradeInfo::set_remainupgradenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_remainupgradenum(value);
  // @@protoc_insertion_point(field_set:PlaneWar.RedUpgradeInfo.remainUpgradeNum)
}

// -------------------------------------------------------------------

// SCOpenRedEnvelope

// int32 rawReward = 1;
inline void SCOpenRedEnvelope::clear_rawreward() {
  rawreward_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCOpenRedEnvelope::_internal_rawreward() const {
  return rawreward_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCOpenRedEnvelope::rawreward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCOpenRedEnvelope.rawReward)
  return _internal_rawreward();
}
inline void SCOpenRedEnvelope::_internal_set_rawreward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rawreward_ = value;
}
inline void SCOpenRedEnvelope::set_rawreward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rawreward(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCOpenRedEnvelope.rawReward)
}

// int32 grantThreshold = 2;
inline void SCOpenRedEnvelope::clear_grantthreshold() {
  grantthreshold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCOpenRedEnvelope::_internal_grantthreshold() const {
  return grantthreshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCOpenRedEnvelope::grantthreshold() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCOpenRedEnvelope.grantThreshold)
  return _internal_grantthreshold();
}
inline void SCOpenRedEnvelope::_internal_set_grantthreshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grantthreshold_ = value;
}
inline void SCOpenRedEnvelope::set_grantthreshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grantthreshold(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCOpenRedEnvelope.grantThreshold)
}

// .PlaneWar.RedUpgradeInfo upgradeInfo = 3;
inline bool SCOpenRedEnvelope::_internal_has_upgradeinfo() const {
  return this != internal_default_instance() && upgradeinfo_ != nullptr;
}
inline bool SCOpenRedEnvelope::has_upgradeinfo() const {
  return _internal_has_upgradeinfo();
}
inline void SCOpenRedEnvelope::clear_upgradeinfo() {
  if (GetArena() == nullptr && upgradeinfo_ != nullptr) {
    delete upgradeinfo_;
  }
  upgradeinfo_ = nullptr;
}
inline const ::PlaneWar::RedUpgradeInfo& SCOpenRedEnvelope::_internal_upgradeinfo() const {
  const ::PlaneWar::RedUpgradeInfo* p = upgradeinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::RedUpgradeInfo&>(
      ::PlaneWar::_RedUpgradeInfo_default_instance_);
}
inline const ::PlaneWar::RedUpgradeInfo& SCOpenRedEnvelope::upgradeinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCOpenRedEnvelope.upgradeInfo)
  return _internal_upgradeinfo();
}
inline void SCOpenRedEnvelope::unsafe_arena_set_allocated_upgradeinfo(
    ::PlaneWar::RedUpgradeInfo* upgradeinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upgradeinfo_);
  }
  upgradeinfo_ = upgradeinfo;
  if (upgradeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCOpenRedEnvelope.upgradeInfo)
}
inline ::PlaneWar::RedUpgradeInfo* SCOpenRedEnvelope::release_upgradeinfo() {
  
  ::PlaneWar::RedUpgradeInfo* temp = upgradeinfo_;
  upgradeinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::RedUpgradeInfo* SCOpenRedEnvelope::unsafe_arena_release_upgradeinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCOpenRedEnvelope.upgradeInfo)
  
  ::PlaneWar::RedUpgradeInfo* temp = upgradeinfo_;
  upgradeinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::RedUpgradeInfo* SCOpenRedEnvelope::_internal_mutable_upgradeinfo() {
  
  if (upgradeinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::RedUpgradeInfo>(GetArena());
    upgradeinfo_ = p;
  }
  return upgradeinfo_;
}
inline ::PlaneWar::RedUpgradeInfo* SCOpenRedEnvelope::mutable_upgradeinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCOpenRedEnvelope.upgradeInfo)
  return _internal_mutable_upgradeinfo();
}
inline void SCOpenRedEnvelope::set_allocated_upgradeinfo(::PlaneWar::RedUpgradeInfo* upgradeinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete upgradeinfo_;
  }
  if (upgradeinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(upgradeinfo);
    if (message_arena != submessage_arena) {
      upgradeinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upgradeinfo, submessage_arena);
    }
    
  } else {
    
  }
  upgradeinfo_ = upgradeinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCOpenRedEnvelope.upgradeInfo)
}

// -------------------------------------------------------------------

// CSUpgradeRedEnvelope

// bool isUpgrade = 1;
inline void CSUpgradeRedEnvelope::clear_isupgrade() {
  isupgrade_ = false;
}
inline bool CSUpgradeRedEnvelope::_internal_isupgrade() const {
  return isupgrade_;
}
inline bool CSUpgradeRedEnvelope::isupgrade() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSUpgradeRedEnvelope.isUpgrade)
  return _internal_isupgrade();
}
inline void CSUpgradeRedEnvelope::_internal_set_isupgrade(bool value) {
  
  isupgrade_ = value;
}
inline void CSUpgradeRedEnvelope::set_isupgrade(bool value) {
  _internal_set_isupgrade(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSUpgradeRedEnvelope.isUpgrade)
}

// -------------------------------------------------------------------

// SCUpgradeRedEnvelope

// .PlaneWar.UpgradeRedResult result = 1;
inline void SCUpgradeRedEnvelope::clear_result() {
  result_ = 0;
}
inline ::PlaneWar::UpgradeRedResult SCUpgradeRedEnvelope::_internal_result() const {
  return static_cast< ::PlaneWar::UpgradeRedResult >(result_);
}
inline ::PlaneWar::UpgradeRedResult SCUpgradeRedEnvelope::result() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUpgradeRedEnvelope.result)
  return _internal_result();
}
inline void SCUpgradeRedEnvelope::_internal_set_result(::PlaneWar::UpgradeRedResult value) {
  
  result_ = value;
}
inline void SCUpgradeRedEnvelope::set_result(::PlaneWar::UpgradeRedResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUpgradeRedEnvelope.result)
}

// int32 curReward = 2;
inline void SCUpgradeRedEnvelope::clear_curreward() {
  curreward_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpgradeRedEnvelope::_internal_curreward() const {
  return curreward_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpgradeRedEnvelope::curreward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUpgradeRedEnvelope.curReward)
  return _internal_curreward();
}
inline void SCUpgradeRedEnvelope::_internal_set_curreward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curreward_ = value;
}
inline void SCUpgradeRedEnvelope::set_curreward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curreward(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUpgradeRedEnvelope.curReward)
}

// int32 grantThreshold = 3;
inline void SCUpgradeRedEnvelope::clear_grantthreshold() {
  grantthreshold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpgradeRedEnvelope::_internal_grantthreshold() const {
  return grantthreshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpgradeRedEnvelope::grantthreshold() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUpgradeRedEnvelope.grantThreshold)
  return _internal_grantthreshold();
}
inline void SCUpgradeRedEnvelope::_internal_set_grantthreshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grantthreshold_ = value;
}
inline void SCUpgradeRedEnvelope::set_grantthreshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grantthreshold(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUpgradeRedEnvelope.grantThreshold)
}

// int32 addReward = 4;
inline void SCUpgradeRedEnvelope::clear_addreward() {
  addreward_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpgradeRedEnvelope::_internal_addreward() const {
  return addreward_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpgradeRedEnvelope::addreward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUpgradeRedEnvelope.addReward)
  return _internal_addreward();
}
inline void SCUpgradeRedEnvelope::_internal_set_addreward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  addreward_ = value;
}
inline void SCUpgradeRedEnvelope::set_addreward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_addreward(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUpgradeRedEnvelope.addReward)
}

// .PlaneWar.RedUpgradeInfo upgradeInfo = 5;
inline bool SCUpgradeRedEnvelope::_internal_has_upgradeinfo() const {
  return this != internal_default_instance() && upgradeinfo_ != nullptr;
}
inline bool SCUpgradeRedEnvelope::has_upgradeinfo() const {
  return _internal_has_upgradeinfo();
}
inline void SCUpgradeRedEnvelope::clear_upgradeinfo() {
  if (GetArena() == nullptr && upgradeinfo_ != nullptr) {
    delete upgradeinfo_;
  }
  upgradeinfo_ = nullptr;
}
inline const ::PlaneWar::RedUpgradeInfo& SCUpgradeRedEnvelope::_internal_upgradeinfo() const {
  const ::PlaneWar::RedUpgradeInfo* p = upgradeinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::RedUpgradeInfo&>(
      ::PlaneWar::_RedUpgradeInfo_default_instance_);
}
inline const ::PlaneWar::RedUpgradeInfo& SCUpgradeRedEnvelope::upgradeinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUpgradeRedEnvelope.upgradeInfo)
  return _internal_upgradeinfo();
}
inline void SCUpgradeRedEnvelope::unsafe_arena_set_allocated_upgradeinfo(
    ::PlaneWar::RedUpgradeInfo* upgradeinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upgradeinfo_);
  }
  upgradeinfo_ = upgradeinfo;
  if (upgradeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCUpgradeRedEnvelope.upgradeInfo)
}
inline ::PlaneWar::RedUpgradeInfo* SCUpgradeRedEnvelope::release_upgradeinfo() {
  
  ::PlaneWar::RedUpgradeInfo* temp = upgradeinfo_;
  upgradeinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::RedUpgradeInfo* SCUpgradeRedEnvelope::unsafe_arena_release_upgradeinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCUpgradeRedEnvelope.upgradeInfo)
  
  ::PlaneWar::RedUpgradeInfo* temp = upgradeinfo_;
  upgradeinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::RedUpgradeInfo* SCUpgradeRedEnvelope::_internal_mutable_upgradeinfo() {
  
  if (upgradeinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::RedUpgradeInfo>(GetArena());
    upgradeinfo_ = p;
  }
  return upgradeinfo_;
}
inline ::PlaneWar::RedUpgradeInfo* SCUpgradeRedEnvelope::mutable_upgradeinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCUpgradeRedEnvelope.upgradeInfo)
  return _internal_mutable_upgradeinfo();
}
inline void SCUpgradeRedEnvelope::set_allocated_upgradeinfo(::PlaneWar::RedUpgradeInfo* upgradeinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete upgradeinfo_;
  }
  if (upgradeinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(upgradeinfo);
    if (message_arena != submessage_arena) {
      upgradeinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upgradeinfo, submessage_arena);
    }
    
  } else {
    
  }
  upgradeinfo_ = upgradeinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCUpgradeRedEnvelope.upgradeInfo)
}

// -------------------------------------------------------------------

// CSCommonRedEnvelopeInfo

// bool isOpen = 1;
inline void CSCommonRedEnvelopeInfo::clear_isopen() {
  isopen_ = false;
}
inline bool CSCommonRedEnvelopeInfo::_internal_isopen() const {
  return isopen_;
}
inline bool CSCommonRedEnvelopeInfo::isopen() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSCommonRedEnvelopeInfo.isOpen)
  return _internal_isopen();
}
inline void CSCommonRedEnvelopeInfo::_internal_set_isopen(bool value) {
  
  isopen_ = value;
}
inline void CSCommonRedEnvelopeInfo::set_isopen(bool value) {
  _internal_set_isopen(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSCommonRedEnvelopeInfo.isOpen)
}

// -------------------------------------------------------------------

// CommonRedInfo

// string id = 1;
inline void CommonRedInfo::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& CommonRedInfo::id() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CommonRedInfo.id)
  return _internal_id();
}
inline void CommonRedInfo::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CommonRedInfo.id)
}
inline std::string* CommonRedInfo::mutable_id() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.CommonRedInfo.id)
  return _internal_mutable_id();
}
inline const std::string& CommonRedInfo::_internal_id() const {
  return id_.Get();
}
inline void CommonRedInfo::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CommonRedInfo::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.CommonRedInfo.id)
}
inline void CommonRedInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.CommonRedInfo.id)
}
inline void CommonRedInfo::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.CommonRedInfo.id)
}
inline std::string* CommonRedInfo::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommonRedInfo::release_id() {
  // @@protoc_insertion_point(field_release:PlaneWar.CommonRedInfo.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommonRedInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.CommonRedInfo.id)
}

// int32 reward = 2;
inline void CommonRedInfo::clear_reward() {
  reward_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonRedInfo::_internal_reward() const {
  return reward_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonRedInfo::reward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CommonRedInfo.reward)
  return _internal_reward();
}
inline void CommonRedInfo::_internal_set_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reward_ = value;
}
inline void CommonRedInfo::set_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CommonRedInfo.reward)
}

// int32 expire = 3;
inline void CommonRedInfo::clear_expire() {
  expire_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonRedInfo::_internal_expire() const {
  return expire_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonRedInfo::expire() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CommonRedInfo.expire)
  return _internal_expire();
}
inline void CommonRedInfo::_internal_set_expire(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  expire_ = value;
}
inline void CommonRedInfo::set_expire(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_expire(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CommonRedInfo.expire)
}

// string sourcePlayerNick = 4;
inline void CommonRedInfo::clear_sourceplayernick() {
  sourceplayernick_.ClearToEmpty();
}
inline const std::string& CommonRedInfo::sourceplayernick() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CommonRedInfo.sourcePlayerNick)
  return _internal_sourceplayernick();
}
inline void CommonRedInfo::set_sourceplayernick(const std::string& value) {
  _internal_set_sourceplayernick(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CommonRedInfo.sourcePlayerNick)
}
inline std::string* CommonRedInfo::mutable_sourceplayernick() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.CommonRedInfo.sourcePlayerNick)
  return _internal_mutable_sourceplayernick();
}
inline const std::string& CommonRedInfo::_internal_sourceplayernick() const {
  return sourceplayernick_.Get();
}
inline void CommonRedInfo::_internal_set_sourceplayernick(const std::string& value) {
  
  sourceplayernick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CommonRedInfo::set_sourceplayernick(std::string&& value) {
  
  sourceplayernick_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.CommonRedInfo.sourcePlayerNick)
}
inline void CommonRedInfo::set_sourceplayernick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sourceplayernick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.CommonRedInfo.sourcePlayerNick)
}
inline void CommonRedInfo::set_sourceplayernick(const char* value,
    size_t size) {
  
  sourceplayernick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.CommonRedInfo.sourcePlayerNick)
}
inline std::string* CommonRedInfo::_internal_mutable_sourceplayernick() {
  
  return sourceplayernick_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommonRedInfo::release_sourceplayernick() {
  // @@protoc_insertion_point(field_release:PlaneWar.CommonRedInfo.sourcePlayerNick)
  return sourceplayernick_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommonRedInfo::set_allocated_sourceplayernick(std::string* sourceplayernick) {
  if (sourceplayernick != nullptr) {
    
  } else {
    
  }
  sourceplayernick_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sourceplayernick,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.CommonRedInfo.sourcePlayerNick)
}

// int32 tryOpenNum = 5;
inline void CommonRedInfo::clear_tryopennum() {
  tryopennum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonRedInfo::_internal_tryopennum() const {
  return tryopennum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonRedInfo::tryopennum() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CommonRedInfo.tryOpenNum)
  return _internal_tryopennum();
}
inline void CommonRedInfo::_internal_set_tryopennum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tryopennum_ = value;
}
inline void CommonRedInfo::set_tryopennum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tryopennum(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CommonRedInfo.tryOpenNum)
}

// int32 cost = 6;
inline void CommonRedInfo::clear_cost() {
  cost_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonRedInfo::_internal_cost() const {
  return cost_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonRedInfo::cost() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CommonRedInfo.cost)
  return _internal_cost();
}
inline void CommonRedInfo::_internal_set_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cost_ = value;
}
inline void CommonRedInfo::set_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CommonRedInfo.cost)
}

// bool isSelfGrant = 7;
inline void CommonRedInfo::clear_isselfgrant() {
  isselfgrant_ = false;
}
inline bool CommonRedInfo::_internal_isselfgrant() const {
  return isselfgrant_;
}
inline bool CommonRedInfo::isselfgrant() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CommonRedInfo.isSelfGrant)
  return _internal_isselfgrant();
}
inline void CommonRedInfo::_internal_set_isselfgrant(bool value) {
  
  isselfgrant_ = value;
}
inline void CommonRedInfo::set_isselfgrant(bool value) {
  _internal_set_isselfgrant(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CommonRedInfo.isSelfGrant)
}

// -------------------------------------------------------------------

// SCCommonRedEnvelopeInfo

// repeated .PlaneWar.CommonRedInfo redList = 1;
inline int SCCommonRedEnvelopeInfo::_internal_redlist_size() const {
  return redlist_.size();
}
inline int SCCommonRedEnvelopeInfo::redlist_size() const {
  return _internal_redlist_size();
}
inline void SCCommonRedEnvelopeInfo::clear_redlist() {
  redlist_.Clear();
}
inline ::PlaneWar::CommonRedInfo* SCCommonRedEnvelopeInfo::mutable_redlist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCCommonRedEnvelopeInfo.redList)
  return redlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::CommonRedInfo >*
SCCommonRedEnvelopeInfo::mutable_redlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCCommonRedEnvelopeInfo.redList)
  return &redlist_;
}
inline const ::PlaneWar::CommonRedInfo& SCCommonRedEnvelopeInfo::_internal_redlist(int index) const {
  return redlist_.Get(index);
}
inline const ::PlaneWar::CommonRedInfo& SCCommonRedEnvelopeInfo::redlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCCommonRedEnvelopeInfo.redList)
  return _internal_redlist(index);
}
inline ::PlaneWar::CommonRedInfo* SCCommonRedEnvelopeInfo::_internal_add_redlist() {
  return redlist_.Add();
}
inline ::PlaneWar::CommonRedInfo* SCCommonRedEnvelopeInfo::add_redlist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCCommonRedEnvelopeInfo.redList)
  return _internal_add_redlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::CommonRedInfo >&
SCCommonRedEnvelopeInfo::redlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCCommonRedEnvelopeInfo.redList)
  return redlist_;
}

// int32 grantThreshold = 2;
inline void SCCommonRedEnvelopeInfo::clear_grantthreshold() {
  grantthreshold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCCommonRedEnvelopeInfo::_internal_grantthreshold() const {
  return grantthreshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCCommonRedEnvelopeInfo::grantthreshold() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCCommonRedEnvelopeInfo.grantThreshold)
  return _internal_grantthreshold();
}
inline void SCCommonRedEnvelopeInfo::_internal_set_grantthreshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grantthreshold_ = value;
}
inline void SCCommonRedEnvelopeInfo::set_grantthreshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grantthreshold(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCCommonRedEnvelopeInfo.grantThreshold)
}

// int32 maxShowNum = 3;
inline void SCCommonRedEnvelopeInfo::clear_maxshownum() {
  maxshownum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCCommonRedEnvelopeInfo::_internal_maxshownum() const {
  return maxshownum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCCommonRedEnvelopeInfo::maxshownum() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCCommonRedEnvelopeInfo.maxShowNum)
  return _internal_maxshownum();
}
inline void SCCommonRedEnvelopeInfo::_internal_set_maxshownum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxshownum_ = value;
}
inline void SCCommonRedEnvelopeInfo::set_maxshownum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxshownum(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCCommonRedEnvelopeInfo.maxShowNum)
}

// int32 maxOpenNum = 4;
inline void SCCommonRedEnvelopeInfo::clear_maxopennum() {
  maxopennum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCCommonRedEnvelopeInfo::_internal_maxopennum() const {
  return maxopennum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCCommonRedEnvelopeInfo::maxopennum() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCCommonRedEnvelopeInfo.maxOpenNum)
  return _internal_maxopennum();
}
inline void SCCommonRedEnvelopeInfo::_internal_set_maxopennum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxopennum_ = value;
}
inline void SCCommonRedEnvelopeInfo::set_maxopennum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxopennum(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCCommonRedEnvelopeInfo.maxOpenNum)
}

// int32 remainOpenNum = 5;
inline void SCCommonRedEnvelopeInfo::clear_remainopennum() {
  remainopennum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCCommonRedEnvelopeInfo::_internal_remainopennum() const {
  return remainopennum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCCommonRedEnvelopeInfo::remainopennum() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCCommonRedEnvelopeInfo.remainOpenNum)
  return _internal_remainopennum();
}
inline void SCCommonRedEnvelopeInfo::_internal_set_remainopennum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  remainopennum_ = value;
}
inline void SCCommonRedEnvelopeInfo::set_remainopennum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_remainopennum(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCCommonRedEnvelopeInfo.remainOpenNum)
}

// -------------------------------------------------------------------

// CSOpenCommonRedEnvelope

// string id = 1;
inline void CSOpenCommonRedEnvelope::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& CSOpenCommonRedEnvelope::id() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSOpenCommonRedEnvelope.id)
  return _internal_id();
}
inline void CSOpenCommonRedEnvelope::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSOpenCommonRedEnvelope.id)
}
inline std::string* CSOpenCommonRedEnvelope::mutable_id() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.CSOpenCommonRedEnvelope.id)
  return _internal_mutable_id();
}
inline const std::string& CSOpenCommonRedEnvelope::_internal_id() const {
  return id_.Get();
}
inline void CSOpenCommonRedEnvelope::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSOpenCommonRedEnvelope::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.CSOpenCommonRedEnvelope.id)
}
inline void CSOpenCommonRedEnvelope::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.CSOpenCommonRedEnvelope.id)
}
inline void CSOpenCommonRedEnvelope::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.CSOpenCommonRedEnvelope.id)
}
inline std::string* CSOpenCommonRedEnvelope::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSOpenCommonRedEnvelope::release_id() {
  // @@protoc_insertion_point(field_release:PlaneWar.CSOpenCommonRedEnvelope.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSOpenCommonRedEnvelope::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.CSOpenCommonRedEnvelope.id)
}

// -------------------------------------------------------------------

// SCOpenCommonRedEnvelope

// string id = 1;
inline void SCOpenCommonRedEnvelope::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& SCOpenCommonRedEnvelope::id() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCOpenCommonRedEnvelope.id)
  return _internal_id();
}
inline void SCOpenCommonRedEnvelope::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCOpenCommonRedEnvelope.id)
}
inline std::string* SCOpenCommonRedEnvelope::mutable_id() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCOpenCommonRedEnvelope.id)
  return _internal_mutable_id();
}
inline const std::string& SCOpenCommonRedEnvelope::_internal_id() const {
  return id_.Get();
}
inline void SCOpenCommonRedEnvelope::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SCOpenCommonRedEnvelope::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.SCOpenCommonRedEnvelope.id)
}
inline void SCOpenCommonRedEnvelope::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.SCOpenCommonRedEnvelope.id)
}
inline void SCOpenCommonRedEnvelope::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.SCOpenCommonRedEnvelope.id)
}
inline std::string* SCOpenCommonRedEnvelope::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SCOpenCommonRedEnvelope::release_id() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCOpenCommonRedEnvelope.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SCOpenCommonRedEnvelope::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCOpenCommonRedEnvelope.id)
}

// bool result = 2;
inline void SCOpenCommonRedEnvelope::clear_result() {
  result_ = false;
}
inline bool SCOpenCommonRedEnvelope::_internal_result() const {
  return result_;
}
inline bool SCOpenCommonRedEnvelope::result() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCOpenCommonRedEnvelope.result)
  return _internal_result();
}
inline void SCOpenCommonRedEnvelope::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void SCOpenCommonRedEnvelope::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCOpenCommonRedEnvelope.result)
}

// int32 remainOpenNum = 3;
inline void SCOpenCommonRedEnvelope::clear_remainopennum() {
  remainopennum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCOpenCommonRedEnvelope::_internal_remainopennum() const {
  return remainopennum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCOpenCommonRedEnvelope::remainopennum() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCOpenCommonRedEnvelope.remainOpenNum)
  return _internal_remainopennum();
}
inline void SCOpenCommonRedEnvelope::_internal_set_remainopennum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  remainopennum_ = value;
}
inline void SCOpenCommonRedEnvelope::set_remainopennum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_remainopennum(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCOpenCommonRedEnvelope.remainOpenNum)
}

// int32 reward = 4;
inline void SCOpenCommonRedEnvelope::clear_reward() {
  reward_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCOpenCommonRedEnvelope::_internal_reward() const {
  return reward_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCOpenCommonRedEnvelope::reward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCOpenCommonRedEnvelope.reward)
  return _internal_reward();
}
inline void SCOpenCommonRedEnvelope::_internal_set_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reward_ = value;
}
inline void SCOpenCommonRedEnvelope::set_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCOpenCommonRedEnvelope.reward)
}

// -------------------------------------------------------------------

// RedRankPlayerInfo

// int32 playerID = 1;
inline void RedRankPlayerInfo::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RedRankPlayerInfo::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RedRankPlayerInfo::playerid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.RedRankPlayerInfo.playerID)
  return _internal_playerid();
}
inline void RedRankPlayerInfo::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void RedRankPlayerInfo::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.RedRankPlayerInfo.playerID)
}

// string nick = 2;
inline void RedRankPlayerInfo::clear_nick() {
  nick_.ClearToEmpty();
}
inline const std::string& RedRankPlayerInfo::nick() const {
  // @@protoc_insertion_point(field_get:PlaneWar.RedRankPlayerInfo.nick)
  return _internal_nick();
}
inline void RedRankPlayerInfo::set_nick(const std::string& value) {
  _internal_set_nick(value);
  // @@protoc_insertion_point(field_set:PlaneWar.RedRankPlayerInfo.nick)
}
inline std::string* RedRankPlayerInfo::mutable_nick() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.RedRankPlayerInfo.nick)
  return _internal_mutable_nick();
}
inline const std::string& RedRankPlayerInfo::_internal_nick() const {
  return nick_.Get();
}
inline void RedRankPlayerInfo::_internal_set_nick(const std::string& value) {
  
  nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RedRankPlayerInfo::set_nick(std::string&& value) {
  
  nick_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.RedRankPlayerInfo.nick)
}
inline void RedRankPlayerInfo::set_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.RedRankPlayerInfo.nick)
}
inline void RedRankPlayerInfo::set_nick(const char* value,
    size_t size) {
  
  nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.RedRankPlayerInfo.nick)
}
inline std::string* RedRankPlayerInfo::_internal_mutable_nick() {
  
  return nick_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RedRankPlayerInfo::release_nick() {
  // @@protoc_insertion_point(field_release:PlaneWar.RedRankPlayerInfo.nick)
  return nick_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RedRankPlayerInfo::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    
  } else {
    
  }
  nick_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.RedRankPlayerInfo.nick)
}

// string icon = 3;
inline void RedRankPlayerInfo::clear_icon() {
  icon_.ClearToEmpty();
}
inline const std::string& RedRankPlayerInfo::icon() const {
  // @@protoc_insertion_point(field_get:PlaneWar.RedRankPlayerInfo.icon)
  return _internal_icon();
}
inline void RedRankPlayerInfo::set_icon(const std::string& value) {
  _internal_set_icon(value);
  // @@protoc_insertion_point(field_set:PlaneWar.RedRankPlayerInfo.icon)
}
inline std::string* RedRankPlayerInfo::mutable_icon() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.RedRankPlayerInfo.icon)
  return _internal_mutable_icon();
}
inline const std::string& RedRankPlayerInfo::_internal_icon() const {
  return icon_.Get();
}
inline void RedRankPlayerInfo::_internal_set_icon(const std::string& value) {
  
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RedRankPlayerInfo::set_icon(std::string&& value) {
  
  icon_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.RedRankPlayerInfo.icon)
}
inline void RedRankPlayerInfo::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.RedRankPlayerInfo.icon)
}
inline void RedRankPlayerInfo::set_icon(const char* value,
    size_t size) {
  
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.RedRankPlayerInfo.icon)
}
inline std::string* RedRankPlayerInfo::_internal_mutable_icon() {
  
  return icon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RedRankPlayerInfo::release_icon() {
  // @@protoc_insertion_point(field_release:PlaneWar.RedRankPlayerInfo.icon)
  return icon_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RedRankPlayerInfo::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.RedRankPlayerInfo.icon)
}

// int32 vipLevel = 4;
inline void RedRankPlayerInfo::clear_viplevel() {
  viplevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RedRankPlayerInfo::_internal_viplevel() const {
  return viplevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RedRankPlayerInfo::viplevel() const {
  // @@protoc_insertion_point(field_get:PlaneWar.RedRankPlayerInfo.vipLevel)
  return _internal_viplevel();
}
inline void RedRankPlayerInfo::_internal_set_viplevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  viplevel_ = value;
}
inline void RedRankPlayerInfo::set_viplevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_viplevel(value);
  // @@protoc_insertion_point(field_set:PlaneWar.RedRankPlayerInfo.vipLevel)
}

// -------------------------------------------------------------------

// CSGrantCommonRedEnvelopeRank

// int32 from = 1;
inline void CSGrantCommonRedEnvelopeRank::clear_from() {
  from_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSGrantCommonRedEnvelopeRank::_internal_from() const {
  return from_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSGrantCommonRedEnvelopeRank::from() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSGrantCommonRedEnvelopeRank.from)
  return _internal_from();
}
inline void CSGrantCommonRedEnvelopeRank::_internal_set_from(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  from_ = value;
}
inline void CSGrantCommonRedEnvelopeRank::set_from(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSGrantCommonRedEnvelopeRank.from)
}

// int32 to = 2;
inline void CSGrantCommonRedEnvelopeRank::clear_to() {
  to_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSGrantCommonRedEnvelopeRank::_internal_to() const {
  return to_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSGrantCommonRedEnvelopeRank::to() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSGrantCommonRedEnvelopeRank.to)
  return _internal_to();
}
inline void CSGrantCommonRedEnvelopeRank::_internal_set_to(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  to_ = value;
}
inline void CSGrantCommonRedEnvelopeRank::set_to(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSGrantCommonRedEnvelopeRank.to)
}

// -------------------------------------------------------------------

// GrantRankItem

// int32 rank = 1;
inline void GrantRankItem::clear_rank() {
  rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GrantRankItem::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GrantRankItem::rank() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GrantRankItem.rank)
  return _internal_rank();
}
inline void GrantRankItem::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rank_ = value;
}
inline void GrantRankItem::set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GrantRankItem.rank)
}

// .PlaneWar.RedRankPlayerInfo playerInfo = 2;
inline bool GrantRankItem::_internal_has_playerinfo() const {
  return this != internal_default_instance() && playerinfo_ != nullptr;
}
inline bool GrantRankItem::has_playerinfo() const {
  return _internal_has_playerinfo();
}
inline void GrantRankItem::clear_playerinfo() {
  if (GetArena() == nullptr && playerinfo_ != nullptr) {
    delete playerinfo_;
  }
  playerinfo_ = nullptr;
}
inline const ::PlaneWar::RedRankPlayerInfo& GrantRankItem::_internal_playerinfo() const {
  const ::PlaneWar::RedRankPlayerInfo* p = playerinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::RedRankPlayerInfo&>(
      ::PlaneWar::_RedRankPlayerInfo_default_instance_);
}
inline const ::PlaneWar::RedRankPlayerInfo& GrantRankItem::playerinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GrantRankItem.playerInfo)
  return _internal_playerinfo();
}
inline void GrantRankItem::unsafe_arena_set_allocated_playerinfo(
    ::PlaneWar::RedRankPlayerInfo* playerinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerinfo_);
  }
  playerinfo_ = playerinfo;
  if (playerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.GrantRankItem.playerInfo)
}
inline ::PlaneWar::RedRankPlayerInfo* GrantRankItem::release_playerinfo() {
  
  ::PlaneWar::RedRankPlayerInfo* temp = playerinfo_;
  playerinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::RedRankPlayerInfo* GrantRankItem::unsafe_arena_release_playerinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.GrantRankItem.playerInfo)
  
  ::PlaneWar::RedRankPlayerInfo* temp = playerinfo_;
  playerinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::RedRankPlayerInfo* GrantRankItem::_internal_mutable_playerinfo() {
  
  if (playerinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::RedRankPlayerInfo>(GetArena());
    playerinfo_ = p;
  }
  return playerinfo_;
}
inline ::PlaneWar::RedRankPlayerInfo* GrantRankItem::mutable_playerinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.GrantRankItem.playerInfo)
  return _internal_mutable_playerinfo();
}
inline void GrantRankItem::set_allocated_playerinfo(::PlaneWar::RedRankPlayerInfo* playerinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete playerinfo_;
  }
  if (playerinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(playerinfo);
    if (message_arena != submessage_arena) {
      playerinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerinfo, submessage_arena);
    }
    
  } else {
    
  }
  playerinfo_ = playerinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.GrantRankItem.playerInfo)
}

// int32 upgradeNum = 3;
inline void GrantRankItem::clear_upgradenum() {
  upgradenum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GrantRankItem::_internal_upgradenum() const {
  return upgradenum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GrantRankItem::upgradenum() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GrantRankItem.upgradeNum)
  return _internal_upgradenum();
}
inline void GrantRankItem::_internal_set_upgradenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  upgradenum_ = value;
}
inline void GrantRankItem::set_upgradenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_upgradenum(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GrantRankItem.upgradeNum)
}

// int32 reward = 4;
inline void GrantRankItem::clear_reward() {
  reward_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GrantRankItem::_internal_reward() const {
  return reward_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GrantRankItem::reward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GrantRankItem.reward)
  return _internal_reward();
}
inline void GrantRankItem::_internal_set_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reward_ = value;
}
inline void GrantRankItem::set_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GrantRankItem.reward)
}

// -------------------------------------------------------------------

// SCGrantCommonRedEnvelopeRank

// repeated .PlaneWar.GrantRankItem rankList = 1;
inline int SCGrantCommonRedEnvelopeRank::_internal_ranklist_size() const {
  return ranklist_.size();
}
inline int SCGrantCommonRedEnvelopeRank::ranklist_size() const {
  return _internal_ranklist_size();
}
inline void SCGrantCommonRedEnvelopeRank::clear_ranklist() {
  ranklist_.Clear();
}
inline ::PlaneWar::GrantRankItem* SCGrantCommonRedEnvelopeRank::mutable_ranklist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCGrantCommonRedEnvelopeRank.rankList)
  return ranklist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GrantRankItem >*
SCGrantCommonRedEnvelopeRank::mutable_ranklist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCGrantCommonRedEnvelopeRank.rankList)
  return &ranklist_;
}
inline const ::PlaneWar::GrantRankItem& SCGrantCommonRedEnvelopeRank::_internal_ranklist(int index) const {
  return ranklist_.Get(index);
}
inline const ::PlaneWar::GrantRankItem& SCGrantCommonRedEnvelopeRank::ranklist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGrantCommonRedEnvelopeRank.rankList)
  return _internal_ranklist(index);
}
inline ::PlaneWar::GrantRankItem* SCGrantCommonRedEnvelopeRank::_internal_add_ranklist() {
  return ranklist_.Add();
}
inline ::PlaneWar::GrantRankItem* SCGrantCommonRedEnvelopeRank::add_ranklist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCGrantCommonRedEnvelopeRank.rankList)
  return _internal_add_ranklist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GrantRankItem >&
SCGrantCommonRedEnvelopeRank::ranklist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCGrantCommonRedEnvelopeRank.rankList)
  return ranklist_;
}

// .PlaneWar.GrantRankItem selfRank = 2;
inline bool SCGrantCommonRedEnvelopeRank::_internal_has_selfrank() const {
  return this != internal_default_instance() && selfrank_ != nullptr;
}
inline bool SCGrantCommonRedEnvelopeRank::has_selfrank() const {
  return _internal_has_selfrank();
}
inline void SCGrantCommonRedEnvelopeRank::clear_selfrank() {
  if (GetArena() == nullptr && selfrank_ != nullptr) {
    delete selfrank_;
  }
  selfrank_ = nullptr;
}
inline const ::PlaneWar::GrantRankItem& SCGrantCommonRedEnvelopeRank::_internal_selfrank() const {
  const ::PlaneWar::GrantRankItem* p = selfrank_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::GrantRankItem&>(
      ::PlaneWar::_GrantRankItem_default_instance_);
}
inline const ::PlaneWar::GrantRankItem& SCGrantCommonRedEnvelopeRank::selfrank() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGrantCommonRedEnvelopeRank.selfRank)
  return _internal_selfrank();
}
inline void SCGrantCommonRedEnvelopeRank::unsafe_arena_set_allocated_selfrank(
    ::PlaneWar::GrantRankItem* selfrank) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selfrank_);
  }
  selfrank_ = selfrank;
  if (selfrank) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCGrantCommonRedEnvelopeRank.selfRank)
}
inline ::PlaneWar::GrantRankItem* SCGrantCommonRedEnvelopeRank::release_selfrank() {
  
  ::PlaneWar::GrantRankItem* temp = selfrank_;
  selfrank_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::GrantRankItem* SCGrantCommonRedEnvelopeRank::unsafe_arena_release_selfrank() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCGrantCommonRedEnvelopeRank.selfRank)
  
  ::PlaneWar::GrantRankItem* temp = selfrank_;
  selfrank_ = nullptr;
  return temp;
}
inline ::PlaneWar::GrantRankItem* SCGrantCommonRedEnvelopeRank::_internal_mutable_selfrank() {
  
  if (selfrank_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::GrantRankItem>(GetArena());
    selfrank_ = p;
  }
  return selfrank_;
}
inline ::PlaneWar::GrantRankItem* SCGrantCommonRedEnvelopeRank::mutable_selfrank() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCGrantCommonRedEnvelopeRank.selfRank)
  return _internal_mutable_selfrank();
}
inline void SCGrantCommonRedEnvelopeRank::set_allocated_selfrank(::PlaneWar::GrantRankItem* selfrank) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete selfrank_;
  }
  if (selfrank) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(selfrank);
    if (message_arena != submessage_arena) {
      selfrank = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selfrank, submessage_arena);
    }
    
  } else {
    
  }
  selfrank_ = selfrank;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCGrantCommonRedEnvelopeRank.selfRank)
}

// -------------------------------------------------------------------

// CSOpenCommonRedEnvelopeRank

// int32 from = 1;
inline void CSOpenCommonRedEnvelopeRank::clear_from() {
  from_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSOpenCommonRedEnvelopeRank::_internal_from() const {
  return from_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSOpenCommonRedEnvelopeRank::from() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSOpenCommonRedEnvelopeRank.from)
  return _internal_from();
}
inline void CSOpenCommonRedEnvelopeRank::_internal_set_from(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  from_ = value;
}
inline void CSOpenCommonRedEnvelopeRank::set_from(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSOpenCommonRedEnvelopeRank.from)
}

// int32 to = 2;
inline void CSOpenCommonRedEnvelopeRank::clear_to() {
  to_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSOpenCommonRedEnvelopeRank::_internal_to() const {
  return to_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSOpenCommonRedEnvelopeRank::to() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSOpenCommonRedEnvelopeRank.to)
  return _internal_to();
}
inline void CSOpenCommonRedEnvelopeRank::_internal_set_to(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  to_ = value;
}
inline void CSOpenCommonRedEnvelopeRank::set_to(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSOpenCommonRedEnvelopeRank.to)
}

// -------------------------------------------------------------------

// OpenRankItem

// int32 rank = 1;
inline void OpenRankItem::clear_rank() {
  rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpenRankItem::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpenRankItem::rank() const {
  // @@protoc_insertion_point(field_get:PlaneWar.OpenRankItem.rank)
  return _internal_rank();
}
inline void OpenRankItem::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rank_ = value;
}
inline void OpenRankItem::set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:PlaneWar.OpenRankItem.rank)
}

// .PlaneWar.RedRankPlayerInfo playerInfo = 2;
inline bool OpenRankItem::_internal_has_playerinfo() const {
  return this != internal_default_instance() && playerinfo_ != nullptr;
}
inline bool OpenRankItem::has_playerinfo() const {
  return _internal_has_playerinfo();
}
inline void OpenRankItem::clear_playerinfo() {
  if (GetArena() == nullptr && playerinfo_ != nullptr) {
    delete playerinfo_;
  }
  playerinfo_ = nullptr;
}
inline const ::PlaneWar::RedRankPlayerInfo& OpenRankItem::_internal_playerinfo() const {
  const ::PlaneWar::RedRankPlayerInfo* p = playerinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::RedRankPlayerInfo&>(
      ::PlaneWar::_RedRankPlayerInfo_default_instance_);
}
inline const ::PlaneWar::RedRankPlayerInfo& OpenRankItem::playerinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.OpenRankItem.playerInfo)
  return _internal_playerinfo();
}
inline void OpenRankItem::unsafe_arena_set_allocated_playerinfo(
    ::PlaneWar::RedRankPlayerInfo* playerinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerinfo_);
  }
  playerinfo_ = playerinfo;
  if (playerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.OpenRankItem.playerInfo)
}
inline ::PlaneWar::RedRankPlayerInfo* OpenRankItem::release_playerinfo() {
  
  ::PlaneWar::RedRankPlayerInfo* temp = playerinfo_;
  playerinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::RedRankPlayerInfo* OpenRankItem::unsafe_arena_release_playerinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.OpenRankItem.playerInfo)
  
  ::PlaneWar::RedRankPlayerInfo* temp = playerinfo_;
  playerinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::RedRankPlayerInfo* OpenRankItem::_internal_mutable_playerinfo() {
  
  if (playerinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::RedRankPlayerInfo>(GetArena());
    playerinfo_ = p;
  }
  return playerinfo_;
}
inline ::PlaneWar::RedRankPlayerInfo* OpenRankItem::mutable_playerinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.OpenRankItem.playerInfo)
  return _internal_mutable_playerinfo();
}
inline void OpenRankItem::set_allocated_playerinfo(::PlaneWar::RedRankPlayerInfo* playerinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete playerinfo_;
  }
  if (playerinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(playerinfo);
    if (message_arena != submessage_arena) {
      playerinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerinfo, submessage_arena);
    }
    
  } else {
    
  }
  playerinfo_ = playerinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.OpenRankItem.playerInfo)
}

// int32 totalReward = 3;
inline void OpenRankItem::clear_totalreward() {
  totalreward_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpenRankItem::_internal_totalreward() const {
  return totalreward_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpenRankItem::totalreward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.OpenRankItem.totalReward)
  return _internal_totalreward();
}
inline void OpenRankItem::_internal_set_totalreward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  totalreward_ = value;
}
inline void OpenRankItem::set_totalreward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_totalreward(value);
  // @@protoc_insertion_point(field_set:PlaneWar.OpenRankItem.totalReward)
}

// int32 openNum = 4;
inline void OpenRankItem::clear_opennum() {
  opennum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpenRankItem::_internal_opennum() const {
  return opennum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpenRankItem::opennum() const {
  // @@protoc_insertion_point(field_get:PlaneWar.OpenRankItem.openNum)
  return _internal_opennum();
}
inline void OpenRankItem::_internal_set_opennum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  opennum_ = value;
}
inline void OpenRankItem::set_opennum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_opennum(value);
  // @@protoc_insertion_point(field_set:PlaneWar.OpenRankItem.openNum)
}

// -------------------------------------------------------------------

// SCOpenCommonRedEnvelopeRank

// repeated .PlaneWar.OpenRankItem rankList = 1;
inline int SCOpenCommonRedEnvelopeRank::_internal_ranklist_size() const {
  return ranklist_.size();
}
inline int SCOpenCommonRedEnvelopeRank::ranklist_size() const {
  return _internal_ranklist_size();
}
inline void SCOpenCommonRedEnvelopeRank::clear_ranklist() {
  ranklist_.Clear();
}
inline ::PlaneWar::OpenRankItem* SCOpenCommonRedEnvelopeRank::mutable_ranklist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCOpenCommonRedEnvelopeRank.rankList)
  return ranklist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::OpenRankItem >*
SCOpenCommonRedEnvelopeRank::mutable_ranklist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCOpenCommonRedEnvelopeRank.rankList)
  return &ranklist_;
}
inline const ::PlaneWar::OpenRankItem& SCOpenCommonRedEnvelopeRank::_internal_ranklist(int index) const {
  return ranklist_.Get(index);
}
inline const ::PlaneWar::OpenRankItem& SCOpenCommonRedEnvelopeRank::ranklist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCOpenCommonRedEnvelopeRank.rankList)
  return _internal_ranklist(index);
}
inline ::PlaneWar::OpenRankItem* SCOpenCommonRedEnvelopeRank::_internal_add_ranklist() {
  return ranklist_.Add();
}
inline ::PlaneWar::OpenRankItem* SCOpenCommonRedEnvelopeRank::add_ranklist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCOpenCommonRedEnvelopeRank.rankList)
  return _internal_add_ranklist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::OpenRankItem >&
SCOpenCommonRedEnvelopeRank::ranklist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCOpenCommonRedEnvelopeRank.rankList)
  return ranklist_;
}

// .PlaneWar.OpenRankItem selfRank = 2;
inline bool SCOpenCommonRedEnvelopeRank::_internal_has_selfrank() const {
  return this != internal_default_instance() && selfrank_ != nullptr;
}
inline bool SCOpenCommonRedEnvelopeRank::has_selfrank() const {
  return _internal_has_selfrank();
}
inline void SCOpenCommonRedEnvelopeRank::clear_selfrank() {
  if (GetArena() == nullptr && selfrank_ != nullptr) {
    delete selfrank_;
  }
  selfrank_ = nullptr;
}
inline const ::PlaneWar::OpenRankItem& SCOpenCommonRedEnvelopeRank::_internal_selfrank() const {
  const ::PlaneWar::OpenRankItem* p = selfrank_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::OpenRankItem&>(
      ::PlaneWar::_OpenRankItem_default_instance_);
}
inline const ::PlaneWar::OpenRankItem& SCOpenCommonRedEnvelopeRank::selfrank() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCOpenCommonRedEnvelopeRank.selfRank)
  return _internal_selfrank();
}
inline void SCOpenCommonRedEnvelopeRank::unsafe_arena_set_allocated_selfrank(
    ::PlaneWar::OpenRankItem* selfrank) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selfrank_);
  }
  selfrank_ = selfrank;
  if (selfrank) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCOpenCommonRedEnvelopeRank.selfRank)
}
inline ::PlaneWar::OpenRankItem* SCOpenCommonRedEnvelopeRank::release_selfrank() {
  
  ::PlaneWar::OpenRankItem* temp = selfrank_;
  selfrank_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::OpenRankItem* SCOpenCommonRedEnvelopeRank::unsafe_arena_release_selfrank() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCOpenCommonRedEnvelopeRank.selfRank)
  
  ::PlaneWar::OpenRankItem* temp = selfrank_;
  selfrank_ = nullptr;
  return temp;
}
inline ::PlaneWar::OpenRankItem* SCOpenCommonRedEnvelopeRank::_internal_mutable_selfrank() {
  
  if (selfrank_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::OpenRankItem>(GetArena());
    selfrank_ = p;
  }
  return selfrank_;
}
inline ::PlaneWar::OpenRankItem* SCOpenCommonRedEnvelopeRank::mutable_selfrank() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCOpenCommonRedEnvelopeRank.selfRank)
  return _internal_mutable_selfrank();
}
inline void SCOpenCommonRedEnvelopeRank::set_allocated_selfrank(::PlaneWar::OpenRankItem* selfrank) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete selfrank_;
  }
  if (selfrank) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(selfrank);
    if (message_arena != submessage_arena) {
      selfrank = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selfrank, submessage_arena);
    }
    
  } else {
    
  }
  selfrank_ = selfrank;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCOpenCommonRedEnvelopeRank.selfRank)
}

// -------------------------------------------------------------------

// CSGrantCommonRedEnvelopeRecord

// -------------------------------------------------------------------

// GrantRecord

// int32 grantTime = 1;
inline void GrantRecord::clear_granttime() {
  granttime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GrantRecord::_internal_granttime() const {
  return granttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GrantRecord::granttime() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GrantRecord.grantTime)
  return _internal_granttime();
}
inline void GrantRecord::_internal_set_granttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  granttime_ = value;
}
inline void GrantRecord::set_granttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_granttime(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GrantRecord.grantTime)
}

// int32 expireTime = 2;
inline void GrantRecord::clear_expiretime() {
  expiretime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GrantRecord::_internal_expiretime() const {
  return expiretime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GrantRecord::expiretime() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GrantRecord.expireTime)
  return _internal_expiretime();
}
inline void GrantRecord::_internal_set_expiretime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  expiretime_ = value;
}
inline void GrantRecord::set_expiretime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_expiretime(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GrantRecord.expireTime)
}

// int32 reward = 3;
inline void GrantRecord::clear_reward() {
  reward_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GrantRecord::_internal_reward() const {
  return reward_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GrantRecord::reward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GrantRecord.reward)
  return _internal_reward();
}
inline void GrantRecord::_internal_set_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reward_ = value;
}
inline void GrantRecord::set_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GrantRecord.reward)
}

// .PlaneWar.GrantRedStatus status = 4;
inline void GrantRecord::clear_status() {
  status_ = 0;
}
inline ::PlaneWar::GrantRedStatus GrantRecord::_internal_status() const {
  return static_cast< ::PlaneWar::GrantRedStatus >(status_);
}
inline ::PlaneWar::GrantRedStatus GrantRecord::status() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GrantRecord.status)
  return _internal_status();
}
inline void GrantRecord::_internal_set_status(::PlaneWar::GrantRedStatus value) {
  
  status_ = value;
}
inline void GrantRecord::set_status(::PlaneWar::GrantRedStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GrantRecord.status)
}

// string openPlayerNick = 5;
inline void GrantRecord::clear_openplayernick() {
  openplayernick_.ClearToEmpty();
}
inline const std::string& GrantRecord::openplayernick() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GrantRecord.openPlayerNick)
  return _internal_openplayernick();
}
inline void GrantRecord::set_openplayernick(const std::string& value) {
  _internal_set_openplayernick(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GrantRecord.openPlayerNick)
}
inline std::string* GrantRecord::mutable_openplayernick() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.GrantRecord.openPlayerNick)
  return _internal_mutable_openplayernick();
}
inline const std::string& GrantRecord::_internal_openplayernick() const {
  return openplayernick_.Get();
}
inline void GrantRecord::_internal_set_openplayernick(const std::string& value) {
  
  openplayernick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GrantRecord::set_openplayernick(std::string&& value) {
  
  openplayernick_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.GrantRecord.openPlayerNick)
}
inline void GrantRecord::set_openplayernick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  openplayernick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.GrantRecord.openPlayerNick)
}
inline void GrantRecord::set_openplayernick(const char* value,
    size_t size) {
  
  openplayernick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.GrantRecord.openPlayerNick)
}
inline std::string* GrantRecord::_internal_mutable_openplayernick() {
  
  return openplayernick_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GrantRecord::release_openplayernick() {
  // @@protoc_insertion_point(field_release:PlaneWar.GrantRecord.openPlayerNick)
  return openplayernick_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GrantRecord::set_allocated_openplayernick(std::string* openplayernick) {
  if (openplayernick != nullptr) {
    
  } else {
    
  }
  openplayernick_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), openplayernick,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.GrantRecord.openPlayerNick)
}

// -------------------------------------------------------------------

// SCGrantCommonRedEnvelopeRecord

// repeated .PlaneWar.GrantRecord recordList = 1;
inline int SCGrantCommonRedEnvelopeRecord::_internal_recordlist_size() const {
  return recordlist_.size();
}
inline int SCGrantCommonRedEnvelopeRecord::recordlist_size() const {
  return _internal_recordlist_size();
}
inline void SCGrantCommonRedEnvelopeRecord::clear_recordlist() {
  recordlist_.Clear();
}
inline ::PlaneWar::GrantRecord* SCGrantCommonRedEnvelopeRecord::mutable_recordlist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCGrantCommonRedEnvelopeRecord.recordList)
  return recordlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GrantRecord >*
SCGrantCommonRedEnvelopeRecord::mutable_recordlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCGrantCommonRedEnvelopeRecord.recordList)
  return &recordlist_;
}
inline const ::PlaneWar::GrantRecord& SCGrantCommonRedEnvelopeRecord::_internal_recordlist(int index) const {
  return recordlist_.Get(index);
}
inline const ::PlaneWar::GrantRecord& SCGrantCommonRedEnvelopeRecord::recordlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGrantCommonRedEnvelopeRecord.recordList)
  return _internal_recordlist(index);
}
inline ::PlaneWar::GrantRecord* SCGrantCommonRedEnvelopeRecord::_internal_add_recordlist() {
  return recordlist_.Add();
}
inline ::PlaneWar::GrantRecord* SCGrantCommonRedEnvelopeRecord::add_recordlist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCGrantCommonRedEnvelopeRecord.recordList)
  return _internal_add_recordlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GrantRecord >&
SCGrantCommonRedEnvelopeRecord::recordlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCGrantCommonRedEnvelopeRecord.recordList)
  return recordlist_;
}

// -------------------------------------------------------------------

// CSOpenCommonRedEnvelopeRecord

// -------------------------------------------------------------------

// OpenRecord

// string sourcePlayerNick = 1;
inline void OpenRecord::clear_sourceplayernick() {
  sourceplayernick_.ClearToEmpty();
}
inline const std::string& OpenRecord::sourceplayernick() const {
  // @@protoc_insertion_point(field_get:PlaneWar.OpenRecord.sourcePlayerNick)
  return _internal_sourceplayernick();
}
inline void OpenRecord::set_sourceplayernick(const std::string& value) {
  _internal_set_sourceplayernick(value);
  // @@protoc_insertion_point(field_set:PlaneWar.OpenRecord.sourcePlayerNick)
}
inline std::string* OpenRecord::mutable_sourceplayernick() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.OpenRecord.sourcePlayerNick)
  return _internal_mutable_sourceplayernick();
}
inline const std::string& OpenRecord::_internal_sourceplayernick() const {
  return sourceplayernick_.Get();
}
inline void OpenRecord::_internal_set_sourceplayernick(const std::string& value) {
  
  sourceplayernick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OpenRecord::set_sourceplayernick(std::string&& value) {
  
  sourceplayernick_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.OpenRecord.sourcePlayerNick)
}
inline void OpenRecord::set_sourceplayernick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sourceplayernick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.OpenRecord.sourcePlayerNick)
}
inline void OpenRecord::set_sourceplayernick(const char* value,
    size_t size) {
  
  sourceplayernick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.OpenRecord.sourcePlayerNick)
}
inline std::string* OpenRecord::_internal_mutable_sourceplayernick() {
  
  return sourceplayernick_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OpenRecord::release_sourceplayernick() {
  // @@protoc_insertion_point(field_release:PlaneWar.OpenRecord.sourcePlayerNick)
  return sourceplayernick_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpenRecord::set_allocated_sourceplayernick(std::string* sourceplayernick) {
  if (sourceplayernick != nullptr) {
    
  } else {
    
  }
  sourceplayernick_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sourceplayernick,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.OpenRecord.sourcePlayerNick)
}

// int32 reward = 2;
inline void OpenRecord::clear_reward() {
  reward_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpenRecord::_internal_reward() const {
  return reward_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpenRecord::reward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.OpenRecord.reward)
  return _internal_reward();
}
inline void OpenRecord::_internal_set_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reward_ = value;
}
inline void OpenRecord::set_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:PlaneWar.OpenRecord.reward)
}

// int32 openTime = 3;
inline void OpenRecord::clear_opentime() {
  opentime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpenRecord::_internal_opentime() const {
  return opentime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpenRecord::opentime() const {
  // @@protoc_insertion_point(field_get:PlaneWar.OpenRecord.openTime)
  return _internal_opentime();
}
inline void OpenRecord::_internal_set_opentime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  opentime_ = value;
}
inline void OpenRecord::set_opentime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_opentime(value);
  // @@protoc_insertion_point(field_set:PlaneWar.OpenRecord.openTime)
}

// -------------------------------------------------------------------

// SCOpenCommonRedEnvelopeRecord

// repeated .PlaneWar.OpenRecord recordList = 1;
inline int SCOpenCommonRedEnvelopeRecord::_internal_recordlist_size() const {
  return recordlist_.size();
}
inline int SCOpenCommonRedEnvelopeRecord::recordlist_size() const {
  return _internal_recordlist_size();
}
inline void SCOpenCommonRedEnvelopeRecord::clear_recordlist() {
  recordlist_.Clear();
}
inline ::PlaneWar::OpenRecord* SCOpenCommonRedEnvelopeRecord::mutable_recordlist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCOpenCommonRedEnvelopeRecord.recordList)
  return recordlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::OpenRecord >*
SCOpenCommonRedEnvelopeRecord::mutable_recordlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCOpenCommonRedEnvelopeRecord.recordList)
  return &recordlist_;
}
inline const ::PlaneWar::OpenRecord& SCOpenCommonRedEnvelopeRecord::_internal_recordlist(int index) const {
  return recordlist_.Get(index);
}
inline const ::PlaneWar::OpenRecord& SCOpenCommonRedEnvelopeRecord::recordlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCOpenCommonRedEnvelopeRecord.recordList)
  return _internal_recordlist(index);
}
inline ::PlaneWar::OpenRecord* SCOpenCommonRedEnvelopeRecord::_internal_add_recordlist() {
  return recordlist_.Add();
}
inline ::PlaneWar::OpenRecord* SCOpenCommonRedEnvelopeRecord::add_recordlist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCOpenCommonRedEnvelopeRecord.recordList)
  return _internal_add_recordlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::OpenRecord >&
SCOpenCommonRedEnvelopeRecord::recordlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCOpenCommonRedEnvelopeRecord.recordList)
  return recordlist_;
}

// int32 showRecordNum = 2;
inline void SCOpenCommonRedEnvelopeRecord::clear_showrecordnum() {
  showrecordnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCOpenCommonRedEnvelopeRecord::_internal_showrecordnum() const {
  return showrecordnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCOpenCommonRedEnvelopeRecord::showrecordnum() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCOpenCommonRedEnvelopeRecord.showRecordNum)
  return _internal_showrecordnum();
}
inline void SCOpenCommonRedEnvelopeRecord::_internal_set_showrecordnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  showrecordnum_ = value;
}
inline void SCOpenCommonRedEnvelopeRecord::set_showrecordnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_showrecordnum(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCOpenCommonRedEnvelopeRecord.showRecordNum)
}

// -------------------------------------------------------------------

// SCRedEnvelopeOpStatusNotify

// int32 chair = 1;
inline void SCRedEnvelopeOpStatusNotify::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRedEnvelopeOpStatusNotify::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRedEnvelopeOpStatusNotify::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCRedEnvelopeOpStatusNotify.chair)
  return _internal_chair();
}
inline void SCRedEnvelopeOpStatusNotify::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCRedEnvelopeOpStatusNotify::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCRedEnvelopeOpStatusNotify.chair)
}

// .PlaneWar.RedOpStatus status = 2;
inline void SCRedEnvelopeOpStatusNotify::clear_status() {
  status_ = 0;
}
inline ::PlaneWar::RedOpStatus SCRedEnvelopeOpStatusNotify::_internal_status() const {
  return static_cast< ::PlaneWar::RedOpStatus >(status_);
}
inline ::PlaneWar::RedOpStatus SCRedEnvelopeOpStatusNotify::status() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCRedEnvelopeOpStatusNotify.status)
  return _internal_status();
}
inline void SCRedEnvelopeOpStatusNotify::_internal_set_status(::PlaneWar::RedOpStatus value) {
  
  status_ = value;
}
inline void SCRedEnvelopeOpStatusNotify::set_status(::PlaneWar::RedOpStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCRedEnvelopeOpStatusNotify.status)
}

// int64 curMoney = 3;
inline void SCRedEnvelopeOpStatusNotify::clear_curmoney() {
  curmoney_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCRedEnvelopeOpStatusNotify::_internal_curmoney() const {
  return curmoney_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCRedEnvelopeOpStatusNotify::curmoney() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCRedEnvelopeOpStatusNotify.curMoney)
  return _internal_curmoney();
}
inline void SCRedEnvelopeOpStatusNotify::_internal_set_curmoney(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  curmoney_ = value;
}
inline void SCRedEnvelopeOpStatusNotify::set_curmoney(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_curmoney(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCRedEnvelopeOpStatusNotify.curMoney)
}

// .PlaneWar.RedUpgradeInfo upgradeInfo = 4;
inline bool SCRedEnvelopeOpStatusNotify::_internal_has_upgradeinfo() const {
  return this != internal_default_instance() && upgradeinfo_ != nullptr;
}
inline bool SCRedEnvelopeOpStatusNotify::has_upgradeinfo() const {
  return _internal_has_upgradeinfo();
}
inline void SCRedEnvelopeOpStatusNotify::clear_upgradeinfo() {
  if (GetArena() == nullptr && upgradeinfo_ != nullptr) {
    delete upgradeinfo_;
  }
  upgradeinfo_ = nullptr;
}
inline const ::PlaneWar::RedUpgradeInfo& SCRedEnvelopeOpStatusNotify::_internal_upgradeinfo() const {
  const ::PlaneWar::RedUpgradeInfo* p = upgradeinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::RedUpgradeInfo&>(
      ::PlaneWar::_RedUpgradeInfo_default_instance_);
}
inline const ::PlaneWar::RedUpgradeInfo& SCRedEnvelopeOpStatusNotify::upgradeinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCRedEnvelopeOpStatusNotify.upgradeInfo)
  return _internal_upgradeinfo();
}
inline void SCRedEnvelopeOpStatusNotify::unsafe_arena_set_allocated_upgradeinfo(
    ::PlaneWar::RedUpgradeInfo* upgradeinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upgradeinfo_);
  }
  upgradeinfo_ = upgradeinfo;
  if (upgradeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCRedEnvelopeOpStatusNotify.upgradeInfo)
}
inline ::PlaneWar::RedUpgradeInfo* SCRedEnvelopeOpStatusNotify::release_upgradeinfo() {
  
  ::PlaneWar::RedUpgradeInfo* temp = upgradeinfo_;
  upgradeinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::RedUpgradeInfo* SCRedEnvelopeOpStatusNotify::unsafe_arena_release_upgradeinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCRedEnvelopeOpStatusNotify.upgradeInfo)
  
  ::PlaneWar::RedUpgradeInfo* temp = upgradeinfo_;
  upgradeinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::RedUpgradeInfo* SCRedEnvelopeOpStatusNotify::_internal_mutable_upgradeinfo() {
  
  if (upgradeinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::RedUpgradeInfo>(GetArena());
    upgradeinfo_ = p;
  }
  return upgradeinfo_;
}
inline ::PlaneWar::RedUpgradeInfo* SCRedEnvelopeOpStatusNotify::mutable_upgradeinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCRedEnvelopeOpStatusNotify.upgradeInfo)
  return _internal_mutable_upgradeinfo();
}
inline void SCRedEnvelopeOpStatusNotify::set_allocated_upgradeinfo(::PlaneWar::RedUpgradeInfo* upgradeinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete upgradeinfo_;
  }
  if (upgradeinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(upgradeinfo);
    if (message_arena != submessage_arena) {
      upgradeinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upgradeinfo, submessage_arena);
    }
    
  } else {
    
  }
  upgradeinfo_ = upgradeinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCRedEnvelopeOpStatusNotify.upgradeInfo)
}

// int32 reward = 5;
inline void SCRedEnvelopeOpStatusNotify::clear_reward() {
  reward_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRedEnvelopeOpStatusNotify::_internal_reward() const {
  return reward_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRedEnvelopeOpStatusNotify::reward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCRedEnvelopeOpStatusNotify.reward)
  return _internal_reward();
}
inline void SCRedEnvelopeOpStatusNotify::_internal_set_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reward_ = value;
}
inline void SCRedEnvelopeOpStatusNotify::set_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCRedEnvelopeOpStatusNotify.reward)
}

// -------------------------------------------------------------------

// CSSyncWeaponState

// int32 weaponId = 1;
inline void CSSyncWeaponState::clear_weaponid() {
  weaponid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncWeaponState::_internal_weaponid() const {
  return weaponid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncWeaponState::weaponid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSSyncWeaponState.weaponId)
  return _internal_weaponid();
}
inline void CSSyncWeaponState::_internal_set_weaponid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  weaponid_ = value;
}
inline void CSSyncWeaponState::set_weaponid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_weaponid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSSyncWeaponState.weaponId)
}

// int32 chairId = 2;
inline void CSSyncWeaponState::clear_chairid() {
  chairid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncWeaponState::_internal_chairid() const {
  return chairid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncWeaponState::chairid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSSyncWeaponState.chairId)
  return _internal_chairid();
}
inline void CSSyncWeaponState::_internal_set_chairid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chairid_ = value;
}
inline void CSSyncWeaponState::set_chairid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chairid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSSyncWeaponState.chairId)
}

// int32 weaponUID = 3;
inline void CSSyncWeaponState::clear_weaponuid() {
  weaponuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncWeaponState::_internal_weaponuid() const {
  return weaponuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncWeaponState::weaponuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSSyncWeaponState.weaponUID)
  return _internal_weaponuid();
}
inline void CSSyncWeaponState::_internal_set_weaponuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  weaponuid_ = value;
}
inline void CSSyncWeaponState::set_weaponuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_weaponuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSSyncWeaponState.weaponUID)
}

// .PlaneWar.WeaponState weaponState = 4;
inline bool CSSyncWeaponState::_internal_has_weaponstate() const {
  return this != internal_default_instance() && weaponstate_ != nullptr;
}
inline bool CSSyncWeaponState::has_weaponstate() const {
  return _internal_has_weaponstate();
}
inline void CSSyncWeaponState::clear_weaponstate() {
  if (GetArena() == nullptr && weaponstate_ != nullptr) {
    delete weaponstate_;
  }
  weaponstate_ = nullptr;
}
inline const ::PlaneWar::WeaponState& CSSyncWeaponState::_internal_weaponstate() const {
  const ::PlaneWar::WeaponState* p = weaponstate_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::WeaponState&>(
      ::PlaneWar::_WeaponState_default_instance_);
}
inline const ::PlaneWar::WeaponState& CSSyncWeaponState::weaponstate() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSSyncWeaponState.weaponState)
  return _internal_weaponstate();
}
inline void CSSyncWeaponState::unsafe_arena_set_allocated_weaponstate(
    ::PlaneWar::WeaponState* weaponstate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(weaponstate_);
  }
  weaponstate_ = weaponstate;
  if (weaponstate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.CSSyncWeaponState.weaponState)
}
inline ::PlaneWar::WeaponState* CSSyncWeaponState::release_weaponstate() {
  
  ::PlaneWar::WeaponState* temp = weaponstate_;
  weaponstate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::WeaponState* CSSyncWeaponState::unsafe_arena_release_weaponstate() {
  // @@protoc_insertion_point(field_release:PlaneWar.CSSyncWeaponState.weaponState)
  
  ::PlaneWar::WeaponState* temp = weaponstate_;
  weaponstate_ = nullptr;
  return temp;
}
inline ::PlaneWar::WeaponState* CSSyncWeaponState::_internal_mutable_weaponstate() {
  
  if (weaponstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::WeaponState>(GetArena());
    weaponstate_ = p;
  }
  return weaponstate_;
}
inline ::PlaneWar::WeaponState* CSSyncWeaponState::mutable_weaponstate() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.CSSyncWeaponState.weaponState)
  return _internal_mutable_weaponstate();
}
inline void CSSyncWeaponState::set_allocated_weaponstate(::PlaneWar::WeaponState* weaponstate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete weaponstate_;
  }
  if (weaponstate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(weaponstate);
    if (message_arena != submessage_arena) {
      weaponstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weaponstate, submessage_arena);
    }
    
  } else {
    
  }
  weaponstate_ = weaponstate;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.CSSyncWeaponState.weaponState)
}

// -------------------------------------------------------------------

// SCSyncWeaponState

// -------------------------------------------------------------------

// CSPreHit

// int32 ratio = 1;
inline void CSPreHit::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSPreHit::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSPreHit::ratio() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSPreHit.ratio)
  return _internal_ratio();
}
inline void CSPreHit::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void CSPreHit::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSPreHit.ratio)
}

// int32 bulletType = 2;
inline void CSPreHit::clear_bullettype() {
  bullettype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSPreHit::_internal_bullettype() const {
  return bullettype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSPreHit::bullettype() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSPreHit.bulletType)
  return _internal_bullettype();
}
inline void CSPreHit::_internal_set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bullettype_ = value;
}
inline void CSPreHit::set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bullettype(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSPreHit.bulletType)
}

// int32 sourceUID = 3;
inline void CSPreHit::clear_sourceuid() {
  sourceuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSPreHit::_internal_sourceuid() const {
  return sourceuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSPreHit::sourceuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSPreHit.sourceUID)
  return _internal_sourceuid();
}
inline void CSPreHit::_internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sourceuid_ = value;
}
inline void CSPreHit::set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sourceuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSPreHit.sourceUID)
}

// -------------------------------------------------------------------

// SCPreHit

// int32 weaponUID = 1;
inline void SCPreHit::clear_weaponuid() {
  weaponuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPreHit::_internal_weaponuid() const {
  return weaponuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPreHit::weaponuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCPreHit.weaponUID)
  return _internal_weaponuid();
}
inline void SCPreHit::_internal_set_weaponuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  weaponuid_ = value;
}
inline void SCPreHit::set_weaponuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_weaponuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCPreHit.weaponUID)
}

// .PlaneWar.HitMode hitMode = 2;
inline bool SCPreHit::_internal_has_hitmode() const {
  return this != internal_default_instance() && hitmode_ != nullptr;
}
inline bool SCPreHit::has_hitmode() const {
  return _internal_has_hitmode();
}
inline void SCPreHit::clear_hitmode() {
  if (GetArena() == nullptr && hitmode_ != nullptr) {
    delete hitmode_;
  }
  hitmode_ = nullptr;
}
inline const ::PlaneWar::HitMode& SCPreHit::_internal_hitmode() const {
  const ::PlaneWar::HitMode* p = hitmode_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::HitMode&>(
      ::PlaneWar::_HitMode_default_instance_);
}
inline const ::PlaneWar::HitMode& SCPreHit::hitmode() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCPreHit.hitMode)
  return _internal_hitmode();
}
inline void SCPreHit::unsafe_arena_set_allocated_hitmode(
    ::PlaneWar::HitMode* hitmode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hitmode_);
  }
  hitmode_ = hitmode;
  if (hitmode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCPreHit.hitMode)
}
inline ::PlaneWar::HitMode* SCPreHit::release_hitmode() {
  
  ::PlaneWar::HitMode* temp = hitmode_;
  hitmode_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::HitMode* SCPreHit::unsafe_arena_release_hitmode() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCPreHit.hitMode)
  
  ::PlaneWar::HitMode* temp = hitmode_;
  hitmode_ = nullptr;
  return temp;
}
inline ::PlaneWar::HitMode* SCPreHit::_internal_mutable_hitmode() {
  
  if (hitmode_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::HitMode>(GetArena());
    hitmode_ = p;
  }
  return hitmode_;
}
inline ::PlaneWar::HitMode* SCPreHit::mutable_hitmode() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCPreHit.hitMode)
  return _internal_mutable_hitmode();
}
inline void SCPreHit::set_allocated_hitmode(::PlaneWar::HitMode* hitmode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hitmode_;
  }
  if (hitmode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hitmode);
    if (message_arena != submessage_arena) {
      hitmode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hitmode, submessage_arena);
    }
    
  } else {
    
  }
  hitmode_ = hitmode;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCPreHit.hitMode)
}

// -------------------------------------------------------------------

// Animation

// int32 animationID = 1;
inline void Animation::clear_animationid() {
  animationid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Animation::_internal_animationid() const {
  return animationid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Animation::animationid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.Animation.animationID)
  return _internal_animationid();
}
inline void Animation::_internal_set_animationid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  animationid_ = value;
}
inline void Animation::set_animationid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_animationid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.Animation.animationID)
}

// string animationMsg = 2;
inline void Animation::clear_animationmsg() {
  animationmsg_.ClearToEmpty();
}
inline const std::string& Animation::animationmsg() const {
  // @@protoc_insertion_point(field_get:PlaneWar.Animation.animationMsg)
  return _internal_animationmsg();
}
inline void Animation::set_animationmsg(const std::string& value) {
  _internal_set_animationmsg(value);
  // @@protoc_insertion_point(field_set:PlaneWar.Animation.animationMsg)
}
inline std::string* Animation::mutable_animationmsg() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.Animation.animationMsg)
  return _internal_mutable_animationmsg();
}
inline const std::string& Animation::_internal_animationmsg() const {
  return animationmsg_.Get();
}
inline void Animation::_internal_set_animationmsg(const std::string& value) {
  
  animationmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Animation::set_animationmsg(std::string&& value) {
  
  animationmsg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.Animation.animationMsg)
}
inline void Animation::set_animationmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  animationmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.Animation.animationMsg)
}
inline void Animation::set_animationmsg(const char* value,
    size_t size) {
  
  animationmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.Animation.animationMsg)
}
inline std::string* Animation::_internal_mutable_animationmsg() {
  
  return animationmsg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Animation::release_animationmsg() {
  // @@protoc_insertion_point(field_release:PlaneWar.Animation.animationMsg)
  return animationmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Animation::set_allocated_animationmsg(std::string* animationmsg) {
  if (animationmsg != nullptr) {
    
  } else {
    
  }
  animationmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), animationmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.Animation.animationMsg)
}

// int32 chair = 3;
inline void Animation::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Animation::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Animation::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.Animation.chair)
  return _internal_chair();
}
inline void Animation::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void Animation::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.Animation.chair)
}

// int32 monsterUID = 4;
inline void Animation::clear_monsteruid() {
  monsteruid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Animation::_internal_monsteruid() const {
  return monsteruid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Animation::monsteruid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.Animation.monsterUID)
  return _internal_monsteruid();
}
inline void Animation::_internal_set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  monsteruid_ = value;
}
inline void Animation::set_monsteruid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_monsteruid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.Animation.monsterUID)
}

// int32 bulletType = 5;
inline void Animation::clear_bullettype() {
  bullettype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Animation::_internal_bullettype() const {
  return bullettype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Animation::bullettype() const {
  // @@protoc_insertion_point(field_get:PlaneWar.Animation.bulletType)
  return _internal_bullettype();
}
inline void Animation::_internal_set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bullettype_ = value;
}
inline void Animation::set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bullettype(value);
  // @@protoc_insertion_point(field_set:PlaneWar.Animation.bulletType)
}

// int32 earn = 6;
inline void Animation::clear_earn() {
  earn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Animation::_internal_earn() const {
  return earn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Animation::earn() const {
  // @@protoc_insertion_point(field_get:PlaneWar.Animation.earn)
  return _internal_earn();
}
inline void Animation::_internal_set_earn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  earn_ = value;
}
inline void Animation::set_earn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_earn(value);
  // @@protoc_insertion_point(field_set:PlaneWar.Animation.earn)
}

// int32 originUID = 7;
inline void Animation::clear_originuid() {
  originuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Animation::_internal_originuid() const {
  return originuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Animation::originuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.Animation.originUID)
  return _internal_originuid();
}
inline void Animation::_internal_set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  originuid_ = value;
}
inline void Animation::set_originuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_originuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.Animation.originUID)
}

// repeated int32 multipleList = 8;
inline int Animation::_internal_multiplelist_size() const {
  return multiplelist_.size();
}
inline int Animation::multiplelist_size() const {
  return _internal_multiplelist_size();
}
inline void Animation::clear_multiplelist() {
  multiplelist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Animation::_internal_multiplelist(int index) const {
  return multiplelist_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Animation::multiplelist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.Animation.multipleList)
  return _internal_multiplelist(index);
}
inline void Animation::set_multiplelist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  multiplelist_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlaneWar.Animation.multipleList)
}
inline void Animation::_internal_add_multiplelist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  multiplelist_.Add(value);
}
inline void Animation::add_multiplelist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_multiplelist(value);
  // @@protoc_insertion_point(field_add:PlaneWar.Animation.multipleList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Animation::_internal_multiplelist() const {
  return multiplelist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Animation::multiplelist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.Animation.multipleList)
  return _internal_multiplelist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Animation::_internal_mutable_multiplelist() {
  return &multiplelist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Animation::mutable_multiplelist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.Animation.multipleList)
  return _internal_mutable_multiplelist();
}

// int32 ratio = 9;
inline void Animation::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Animation::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Animation::ratio() const {
  // @@protoc_insertion_point(field_get:PlaneWar.Animation.ratio)
  return _internal_ratio();
}
inline void Animation::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void Animation::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:PlaneWar.Animation.ratio)
}

// .PlaneWar.FortuneWheelJson fortuneJson = 10;
inline bool Animation::_internal_has_fortunejson() const {
  return this != internal_default_instance() && fortunejson_ != nullptr;
}
inline bool Animation::has_fortunejson() const {
  return _internal_has_fortunejson();
}
inline void Animation::clear_fortunejson() {
  if (GetArena() == nullptr && fortunejson_ != nullptr) {
    delete fortunejson_;
  }
  fortunejson_ = nullptr;
}
inline const ::PlaneWar::FortuneWheelJson& Animation::_internal_fortunejson() const {
  const ::PlaneWar::FortuneWheelJson* p = fortunejson_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::FortuneWheelJson&>(
      ::PlaneWar::_FortuneWheelJson_default_instance_);
}
inline const ::PlaneWar::FortuneWheelJson& Animation::fortunejson() const {
  // @@protoc_insertion_point(field_get:PlaneWar.Animation.fortuneJson)
  return _internal_fortunejson();
}
inline void Animation::unsafe_arena_set_allocated_fortunejson(
    ::PlaneWar::FortuneWheelJson* fortunejson) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fortunejson_);
  }
  fortunejson_ = fortunejson;
  if (fortunejson) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.Animation.fortuneJson)
}
inline ::PlaneWar::FortuneWheelJson* Animation::release_fortunejson() {
  
  ::PlaneWar::FortuneWheelJson* temp = fortunejson_;
  fortunejson_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::FortuneWheelJson* Animation::unsafe_arena_release_fortunejson() {
  // @@protoc_insertion_point(field_release:PlaneWar.Animation.fortuneJson)
  
  ::PlaneWar::FortuneWheelJson* temp = fortunejson_;
  fortunejson_ = nullptr;
  return temp;
}
inline ::PlaneWar::FortuneWheelJson* Animation::_internal_mutable_fortunejson() {
  
  if (fortunejson_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::FortuneWheelJson>(GetArena());
    fortunejson_ = p;
  }
  return fortunejson_;
}
inline ::PlaneWar::FortuneWheelJson* Animation::mutable_fortunejson() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.Animation.fortuneJson)
  return _internal_mutable_fortunejson();
}
inline void Animation::set_allocated_fortunejson(::PlaneWar::FortuneWheelJson* fortunejson) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fortunejson_;
  }
  if (fortunejson) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fortunejson);
    if (message_arena != submessage_arena) {
      fortunejson = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fortunejson, submessage_arena);
    }
    
  } else {
    
  }
  fortunejson_ = fortunejson;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.Animation.fortuneJson)
}

// .PlaneWar.GoldenToadJson goldenToadJson = 11;
inline bool Animation::_internal_has_goldentoadjson() const {
  return this != internal_default_instance() && goldentoadjson_ != nullptr;
}
inline bool Animation::has_goldentoadjson() const {
  return _internal_has_goldentoadjson();
}
inline void Animation::clear_goldentoadjson() {
  if (GetArena() == nullptr && goldentoadjson_ != nullptr) {
    delete goldentoadjson_;
  }
  goldentoadjson_ = nullptr;
}
inline const ::PlaneWar::GoldenToadJson& Animation::_internal_goldentoadjson() const {
  const ::PlaneWar::GoldenToadJson* p = goldentoadjson_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::GoldenToadJson&>(
      ::PlaneWar::_GoldenToadJson_default_instance_);
}
inline const ::PlaneWar::GoldenToadJson& Animation::goldentoadjson() const {
  // @@protoc_insertion_point(field_get:PlaneWar.Animation.goldenToadJson)
  return _internal_goldentoadjson();
}
inline void Animation::unsafe_arena_set_allocated_goldentoadjson(
    ::PlaneWar::GoldenToadJson* goldentoadjson) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(goldentoadjson_);
  }
  goldentoadjson_ = goldentoadjson;
  if (goldentoadjson) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.Animation.goldenToadJson)
}
inline ::PlaneWar::GoldenToadJson* Animation::release_goldentoadjson() {
  
  ::PlaneWar::GoldenToadJson* temp = goldentoadjson_;
  goldentoadjson_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::GoldenToadJson* Animation::unsafe_arena_release_goldentoadjson() {
  // @@protoc_insertion_point(field_release:PlaneWar.Animation.goldenToadJson)
  
  ::PlaneWar::GoldenToadJson* temp = goldentoadjson_;
  goldentoadjson_ = nullptr;
  return temp;
}
inline ::PlaneWar::GoldenToadJson* Animation::_internal_mutable_goldentoadjson() {
  
  if (goldentoadjson_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::GoldenToadJson>(GetArena());
    goldentoadjson_ = p;
  }
  return goldentoadjson_;
}
inline ::PlaneWar::GoldenToadJson* Animation::mutable_goldentoadjson() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.Animation.goldenToadJson)
  return _internal_mutable_goldentoadjson();
}
inline void Animation::set_allocated_goldentoadjson(::PlaneWar::GoldenToadJson* goldentoadjson) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete goldentoadjson_;
  }
  if (goldentoadjson) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(goldentoadjson);
    if (message_arena != submessage_arena) {
      goldentoadjson = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, goldentoadjson, submessage_arena);
    }
    
  } else {
    
  }
  goldentoadjson_ = goldentoadjson;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.Animation.goldenToadJson)
}

// .PlaneWar.DiceJson diceJson = 12;
inline bool Animation::_internal_has_dicejson() const {
  return this != internal_default_instance() && dicejson_ != nullptr;
}
inline bool Animation::has_dicejson() const {
  return _internal_has_dicejson();
}
inline void Animation::clear_dicejson() {
  if (GetArena() == nullptr && dicejson_ != nullptr) {
    delete dicejson_;
  }
  dicejson_ = nullptr;
}
inline const ::PlaneWar::DiceJson& Animation::_internal_dicejson() const {
  const ::PlaneWar::DiceJson* p = dicejson_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::DiceJson&>(
      ::PlaneWar::_DiceJson_default_instance_);
}
inline const ::PlaneWar::DiceJson& Animation::dicejson() const {
  // @@protoc_insertion_point(field_get:PlaneWar.Animation.diceJson)
  return _internal_dicejson();
}
inline void Animation::unsafe_arena_set_allocated_dicejson(
    ::PlaneWar::DiceJson* dicejson) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dicejson_);
  }
  dicejson_ = dicejson;
  if (dicejson) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.Animation.diceJson)
}
inline ::PlaneWar::DiceJson* Animation::release_dicejson() {
  
  ::PlaneWar::DiceJson* temp = dicejson_;
  dicejson_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::DiceJson* Animation::unsafe_arena_release_dicejson() {
  // @@protoc_insertion_point(field_release:PlaneWar.Animation.diceJson)
  
  ::PlaneWar::DiceJson* temp = dicejson_;
  dicejson_ = nullptr;
  return temp;
}
inline ::PlaneWar::DiceJson* Animation::_internal_mutable_dicejson() {
  
  if (dicejson_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::DiceJson>(GetArena());
    dicejson_ = p;
  }
  return dicejson_;
}
inline ::PlaneWar::DiceJson* Animation::mutable_dicejson() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.Animation.diceJson)
  return _internal_mutable_dicejson();
}
inline void Animation::set_allocated_dicejson(::PlaneWar::DiceJson* dicejson) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dicejson_;
  }
  if (dicejson) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dicejson);
    if (message_arena != submessage_arena) {
      dicejson = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dicejson, submessage_arena);
    }
    
  } else {
    
  }
  dicejson_ = dicejson;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.Animation.diceJson)
}

// -------------------------------------------------------------------

// DiceJson

// int32 step = 1;
inline void DiceJson::clear_step() {
  step_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DiceJson::_internal_step() const {
  return step_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DiceJson::step() const {
  // @@protoc_insertion_point(field_get:PlaneWar.DiceJson.step)
  return _internal_step();
}
inline void DiceJson::_internal_set_step(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  step_ = value;
}
inline void DiceJson::set_step(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:PlaneWar.DiceJson.step)
}

// repeated .PlaneWar.Dice dice = 2;
inline int DiceJson::_internal_dice_size() const {
  return dice_.size();
}
inline int DiceJson::dice_size() const {
  return _internal_dice_size();
}
inline void DiceJson::clear_dice() {
  dice_.Clear();
}
inline ::PlaneWar::Dice* DiceJson::mutable_dice(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.DiceJson.dice)
  return dice_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::Dice >*
DiceJson::mutable_dice() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.DiceJson.dice)
  return &dice_;
}
inline const ::PlaneWar::Dice& DiceJson::_internal_dice(int index) const {
  return dice_.Get(index);
}
inline const ::PlaneWar::Dice& DiceJson::dice(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.DiceJson.dice)
  return _internal_dice(index);
}
inline ::PlaneWar::Dice* DiceJson::_internal_add_dice() {
  return dice_.Add();
}
inline ::PlaneWar::Dice* DiceJson::add_dice() {
  // @@protoc_insertion_point(field_add:PlaneWar.DiceJson.dice)
  return _internal_add_dice();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::Dice >&
DiceJson::dice() const {
  // @@protoc_insertion_point(field_list:PlaneWar.DiceJson.dice)
  return dice_;
}

// repeated .PlaneWar.Dice mulList = 3;
inline int DiceJson::_internal_mullist_size() const {
  return mullist_.size();
}
inline int DiceJson::mullist_size() const {
  return _internal_mullist_size();
}
inline void DiceJson::clear_mullist() {
  mullist_.Clear();
}
inline ::PlaneWar::Dice* DiceJson::mutable_mullist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.DiceJson.mulList)
  return mullist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::Dice >*
DiceJson::mutable_mullist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.DiceJson.mulList)
  return &mullist_;
}
inline const ::PlaneWar::Dice& DiceJson::_internal_mullist(int index) const {
  return mullist_.Get(index);
}
inline const ::PlaneWar::Dice& DiceJson::mullist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.DiceJson.mulList)
  return _internal_mullist(index);
}
inline ::PlaneWar::Dice* DiceJson::_internal_add_mullist() {
  return mullist_.Add();
}
inline ::PlaneWar::Dice* DiceJson::add_mullist() {
  // @@protoc_insertion_point(field_add:PlaneWar.DiceJson.mulList)
  return _internal_add_mullist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::Dice >&
DiceJson::mullist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.DiceJson.mulList)
  return mullist_;
}

// repeated .PlaneWar.Pos mulPosList = 4;
inline int DiceJson::_internal_mulposlist_size() const {
  return mulposlist_.size();
}
inline int DiceJson::mulposlist_size() const {
  return _internal_mulposlist_size();
}
inline void DiceJson::clear_mulposlist() {
  mulposlist_.Clear();
}
inline ::PlaneWar::Pos* DiceJson::mutable_mulposlist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.DiceJson.mulPosList)
  return mulposlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::Pos >*
DiceJson::mutable_mulposlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.DiceJson.mulPosList)
  return &mulposlist_;
}
inline const ::PlaneWar::Pos& DiceJson::_internal_mulposlist(int index) const {
  return mulposlist_.Get(index);
}
inline const ::PlaneWar::Pos& DiceJson::mulposlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.DiceJson.mulPosList)
  return _internal_mulposlist(index);
}
inline ::PlaneWar::Pos* DiceJson::_internal_add_mulposlist() {
  return mulposlist_.Add();
}
inline ::PlaneWar::Pos* DiceJson::add_mulposlist() {
  // @@protoc_insertion_point(field_add:PlaneWar.DiceJson.mulPosList)
  return _internal_add_mulposlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::Pos >&
DiceJson::mulposlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.DiceJson.mulPosList)
  return mulposlist_;
}

// -------------------------------------------------------------------

// FortuneWheelJson

// repeated .PlaneWar.FortuneWheelInfo result = 1;
inline int FortuneWheelJson::_internal_result_size() const {
  return result_.size();
}
inline int FortuneWheelJson::result_size() const {
  return _internal_result_size();
}
inline void FortuneWheelJson::clear_result() {
  result_.Clear();
}
inline ::PlaneWar::FortuneWheelInfo* FortuneWheelJson::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.FortuneWheelJson.result)
  return result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::FortuneWheelInfo >*
FortuneWheelJson::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.FortuneWheelJson.result)
  return &result_;
}
inline const ::PlaneWar::FortuneWheelInfo& FortuneWheelJson::_internal_result(int index) const {
  return result_.Get(index);
}
inline const ::PlaneWar::FortuneWheelInfo& FortuneWheelJson::result(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.FortuneWheelJson.result)
  return _internal_result(index);
}
inline ::PlaneWar::FortuneWheelInfo* FortuneWheelJson::_internal_add_result() {
  return result_.Add();
}
inline ::PlaneWar::FortuneWheelInfo* FortuneWheelJson::add_result() {
  // @@protoc_insertion_point(field_add:PlaneWar.FortuneWheelJson.result)
  return _internal_add_result();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::FortuneWheelInfo >&
FortuneWheelJson::result() const {
  // @@protoc_insertion_point(field_list:PlaneWar.FortuneWheelJson.result)
  return result_;
}

// int32 site = 2;
inline void FortuneWheelJson::clear_site() {
  site_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FortuneWheelJson::_internal_site() const {
  return site_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FortuneWheelJson::site() const {
  // @@protoc_insertion_point(field_get:PlaneWar.FortuneWheelJson.site)
  return _internal_site();
}
inline void FortuneWheelJson::_internal_set_site(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  site_ = value;
}
inline void FortuneWheelJson::set_site(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_site(value);
  // @@protoc_insertion_point(field_set:PlaneWar.FortuneWheelJson.site)
}

// -------------------------------------------------------------------

// GoldenToadJson

// repeated .PlaneWar.OrderData orderList = 1;
inline int GoldenToadJson::_internal_orderlist_size() const {
  return orderlist_.size();
}
inline int GoldenToadJson::orderlist_size() const {
  return _internal_orderlist_size();
}
inline void GoldenToadJson::clear_orderlist() {
  orderlist_.Clear();
}
inline ::PlaneWar::OrderData* GoldenToadJson::mutable_orderlist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.GoldenToadJson.orderList)
  return orderlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::OrderData >*
GoldenToadJson::mutable_orderlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.GoldenToadJson.orderList)
  return &orderlist_;
}
inline const ::PlaneWar::OrderData& GoldenToadJson::_internal_orderlist(int index) const {
  return orderlist_.Get(index);
}
inline const ::PlaneWar::OrderData& GoldenToadJson::orderlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.GoldenToadJson.orderList)
  return _internal_orderlist(index);
}
inline ::PlaneWar::OrderData* GoldenToadJson::_internal_add_orderlist() {
  return orderlist_.Add();
}
inline ::PlaneWar::OrderData* GoldenToadJson::add_orderlist() {
  // @@protoc_insertion_point(field_add:PlaneWar.GoldenToadJson.orderList)
  return _internal_add_orderlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::OrderData >&
GoldenToadJson::orderlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.GoldenToadJson.orderList)
  return orderlist_;
}

// int32 totalRatio = 2;
inline void GoldenToadJson::clear_totalratio() {
  totalratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GoldenToadJson::_internal_totalratio() const {
  return totalratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GoldenToadJson::totalratio() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GoldenToadJson.totalRatio)
  return _internal_totalratio();
}
inline void GoldenToadJson::_internal_set_totalratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  totalratio_ = value;
}
inline void GoldenToadJson::set_totalratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_totalratio(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GoldenToadJson.totalRatio)
}

// int32 ratio = 3;
inline void GoldenToadJson::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GoldenToadJson::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GoldenToadJson::ratio() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GoldenToadJson.ratio)
  return _internal_ratio();
}
inline void GoldenToadJson::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void GoldenToadJson::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GoldenToadJson.ratio)
}

// int32 step = 4;
inline void GoldenToadJson::clear_step() {
  step_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GoldenToadJson::_internal_step() const {
  return step_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GoldenToadJson::step() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GoldenToadJson.step)
  return _internal_step();
}
inline void GoldenToadJson::_internal_set_step(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  step_ = value;
}
inline void GoldenToadJson::set_step(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GoldenToadJson.step)
}

// -------------------------------------------------------------------

// OrderData

// int32 type = 1;
inline void OrderData::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderData::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderData::type() const {
  // @@protoc_insertion_point(field_get:PlaneWar.OrderData.type)
  return _internal_type();
}
inline void OrderData::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void OrderData::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PlaneWar.OrderData.type)
}

// int32 ratio = 2;
inline void OrderData::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderData::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderData::ratio() const {
  // @@protoc_insertion_point(field_get:PlaneWar.OrderData.ratio)
  return _internal_ratio();
}
inline void OrderData::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void OrderData::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:PlaneWar.OrderData.ratio)
}

// -------------------------------------------------------------------

// CSSyncAnimation

// .PlaneWar.Animation animation = 1;
inline bool CSSyncAnimation::_internal_has_animation() const {
  return this != internal_default_instance() && animation_ != nullptr;
}
inline bool CSSyncAnimation::has_animation() const {
  return _internal_has_animation();
}
inline void CSSyncAnimation::clear_animation() {
  if (GetArena() == nullptr && animation_ != nullptr) {
    delete animation_;
  }
  animation_ = nullptr;
}
inline const ::PlaneWar::Animation& CSSyncAnimation::_internal_animation() const {
  const ::PlaneWar::Animation* p = animation_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::Animation&>(
      ::PlaneWar::_Animation_default_instance_);
}
inline const ::PlaneWar::Animation& CSSyncAnimation::animation() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSSyncAnimation.animation)
  return _internal_animation();
}
inline void CSSyncAnimation::unsafe_arena_set_allocated_animation(
    ::PlaneWar::Animation* animation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(animation_);
  }
  animation_ = animation;
  if (animation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.CSSyncAnimation.animation)
}
inline ::PlaneWar::Animation* CSSyncAnimation::release_animation() {
  
  ::PlaneWar::Animation* temp = animation_;
  animation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::Animation* CSSyncAnimation::unsafe_arena_release_animation() {
  // @@protoc_insertion_point(field_release:PlaneWar.CSSyncAnimation.animation)
  
  ::PlaneWar::Animation* temp = animation_;
  animation_ = nullptr;
  return temp;
}
inline ::PlaneWar::Animation* CSSyncAnimation::_internal_mutable_animation() {
  
  if (animation_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::Animation>(GetArena());
    animation_ = p;
  }
  return animation_;
}
inline ::PlaneWar::Animation* CSSyncAnimation::mutable_animation() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.CSSyncAnimation.animation)
  return _internal_mutable_animation();
}
inline void CSSyncAnimation::set_allocated_animation(::PlaneWar::Animation* animation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete animation_;
  }
  if (animation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(animation);
    if (message_arena != submessage_arena) {
      animation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, animation, submessage_arena);
    }
    
  } else {
    
  }
  animation_ = animation;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.CSSyncAnimation.animation)
}

// bool isComplete = 2;
inline void CSSyncAnimation::clear_iscomplete() {
  iscomplete_ = false;
}
inline bool CSSyncAnimation::_internal_iscomplete() const {
  return iscomplete_;
}
inline bool CSSyncAnimation::iscomplete() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSSyncAnimation.isComplete)
  return _internal_iscomplete();
}
inline void CSSyncAnimation::_internal_set_iscomplete(bool value) {
  
  iscomplete_ = value;
}
inline void CSSyncAnimation::set_iscomplete(bool value) {
  _internal_set_iscomplete(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSSyncAnimation.isComplete)
}

// -------------------------------------------------------------------

// SCSyncAnimation

// .PlaneWar.Animation animation = 1;
inline bool SCSyncAnimation::_internal_has_animation() const {
  return this != internal_default_instance() && animation_ != nullptr;
}
inline bool SCSyncAnimation::has_animation() const {
  return _internal_has_animation();
}
inline void SCSyncAnimation::clear_animation() {
  if (GetArena() == nullptr && animation_ != nullptr) {
    delete animation_;
  }
  animation_ = nullptr;
}
inline const ::PlaneWar::Animation& SCSyncAnimation::_internal_animation() const {
  const ::PlaneWar::Animation* p = animation_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::Animation&>(
      ::PlaneWar::_Animation_default_instance_);
}
inline const ::PlaneWar::Animation& SCSyncAnimation::animation() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCSyncAnimation.animation)
  return _internal_animation();
}
inline void SCSyncAnimation::unsafe_arena_set_allocated_animation(
    ::PlaneWar::Animation* animation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(animation_);
  }
  animation_ = animation;
  if (animation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCSyncAnimation.animation)
}
inline ::PlaneWar::Animation* SCSyncAnimation::release_animation() {
  
  ::PlaneWar::Animation* temp = animation_;
  animation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::Animation* SCSyncAnimation::unsafe_arena_release_animation() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCSyncAnimation.animation)
  
  ::PlaneWar::Animation* temp = animation_;
  animation_ = nullptr;
  return temp;
}
inline ::PlaneWar::Animation* SCSyncAnimation::_internal_mutable_animation() {
  
  if (animation_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::Animation>(GetArena());
    animation_ = p;
  }
  return animation_;
}
inline ::PlaneWar::Animation* SCSyncAnimation::mutable_animation() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCSyncAnimation.animation)
  return _internal_mutable_animation();
}
inline void SCSyncAnimation::set_allocated_animation(::PlaneWar::Animation* animation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete animation_;
  }
  if (animation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(animation);
    if (message_arena != submessage_arena) {
      animation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, animation, submessage_arena);
    }
    
  } else {
    
  }
  animation_ = animation;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCSyncAnimation.animation)
}

// bool isComplete = 2;
inline void SCSyncAnimation::clear_iscomplete() {
  iscomplete_ = false;
}
inline bool SCSyncAnimation::_internal_iscomplete() const {
  return iscomplete_;
}
inline bool SCSyncAnimation::iscomplete() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCSyncAnimation.isComplete)
  return _internal_iscomplete();
}
inline void SCSyncAnimation::_internal_set_iscomplete(bool value) {
  
  iscomplete_ = value;
}
inline void SCSyncAnimation::set_iscomplete(bool value) {
  _internal_set_iscomplete(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCSyncAnimation.isComplete)
}

// -------------------------------------------------------------------

// SCGetAnimations

// repeated .PlaneWar.Animation animations = 1;
inline int SCGetAnimations::_internal_animations_size() const {
  return animations_.size();
}
inline int SCGetAnimations::animations_size() const {
  return _internal_animations_size();
}
inline void SCGetAnimations::clear_animations() {
  animations_.Clear();
}
inline ::PlaneWar::Animation* SCGetAnimations::mutable_animations(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCGetAnimations.animations)
  return animations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::Animation >*
SCGetAnimations::mutable_animations() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCGetAnimations.animations)
  return &animations_;
}
inline const ::PlaneWar::Animation& SCGetAnimations::_internal_animations(int index) const {
  return animations_.Get(index);
}
inline const ::PlaneWar::Animation& SCGetAnimations::animations(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetAnimations.animations)
  return _internal_animations(index);
}
inline ::PlaneWar::Animation* SCGetAnimations::_internal_add_animations() {
  return animations_.Add();
}
inline ::PlaneWar::Animation* SCGetAnimations::add_animations() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCGetAnimations.animations)
  return _internal_add_animations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::Animation >&
SCGetAnimations::animations() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCGetAnimations.animations)
  return animations_;
}

// -------------------------------------------------------------------

// GradeRankDetail

// int32 rankIndex = 1;
inline void GradeRankDetail::clear_rankindex() {
  rankindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GradeRankDetail::_internal_rankindex() const {
  return rankindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GradeRankDetail::rankindex() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GradeRankDetail.rankIndex)
  return _internal_rankindex();
}
inline void GradeRankDetail::_internal_set_rankindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rankindex_ = value;
}
inline void GradeRankDetail::set_rankindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rankindex(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GradeRankDetail.rankIndex)
}

// string rankName = 2;
inline void GradeRankDetail::clear_rankname() {
  rankname_.ClearToEmpty();
}
inline const std::string& GradeRankDetail::rankname() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GradeRankDetail.rankName)
  return _internal_rankname();
}
inline void GradeRankDetail::set_rankname(const std::string& value) {
  _internal_set_rankname(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GradeRankDetail.rankName)
}
inline std::string* GradeRankDetail::mutable_rankname() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.GradeRankDetail.rankName)
  return _internal_mutable_rankname();
}
inline const std::string& GradeRankDetail::_internal_rankname() const {
  return rankname_.Get();
}
inline void GradeRankDetail::_internal_set_rankname(const std::string& value) {
  
  rankname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GradeRankDetail::set_rankname(std::string&& value) {
  
  rankname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.GradeRankDetail.rankName)
}
inline void GradeRankDetail::set_rankname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rankname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.GradeRankDetail.rankName)
}
inline void GradeRankDetail::set_rankname(const char* value,
    size_t size) {
  
  rankname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.GradeRankDetail.rankName)
}
inline std::string* GradeRankDetail::_internal_mutable_rankname() {
  
  return rankname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GradeRankDetail::release_rankname() {
  // @@protoc_insertion_point(field_release:PlaneWar.GradeRankDetail.rankName)
  return rankname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GradeRankDetail::set_allocated_rankname(std::string* rankname) {
  if (rankname != nullptr) {
    
  } else {
    
  }
  rankname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rankname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.GradeRankDetail.rankName)
}

// -------------------------------------------------------------------

// GradeRankConfig

// repeated .PlaneWar.GradeRankDetail gradeRankDetail = 1;
inline int GradeRankConfig::_internal_graderankdetail_size() const {
  return graderankdetail_.size();
}
inline int GradeRankConfig::graderankdetail_size() const {
  return _internal_graderankdetail_size();
}
inline void GradeRankConfig::clear_graderankdetail() {
  graderankdetail_.Clear();
}
inline ::PlaneWar::GradeRankDetail* GradeRankConfig::mutable_graderankdetail(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.GradeRankConfig.gradeRankDetail)
  return graderankdetail_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GradeRankDetail >*
GradeRankConfig::mutable_graderankdetail() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.GradeRankConfig.gradeRankDetail)
  return &graderankdetail_;
}
inline const ::PlaneWar::GradeRankDetail& GradeRankConfig::_internal_graderankdetail(int index) const {
  return graderankdetail_.Get(index);
}
inline const ::PlaneWar::GradeRankDetail& GradeRankConfig::graderankdetail(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.GradeRankConfig.gradeRankDetail)
  return _internal_graderankdetail(index);
}
inline ::PlaneWar::GradeRankDetail* GradeRankConfig::_internal_add_graderankdetail() {
  return graderankdetail_.Add();
}
inline ::PlaneWar::GradeRankDetail* GradeRankConfig::add_graderankdetail() {
  // @@protoc_insertion_point(field_add:PlaneWar.GradeRankConfig.gradeRankDetail)
  return _internal_add_graderankdetail();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GradeRankDetail >&
GradeRankConfig::graderankdetail() const {
  // @@protoc_insertion_point(field_list:PlaneWar.GradeRankConfig.gradeRankDetail)
  return graderankdetail_;
}

// int32 rankListLen = 2;
inline void GradeRankConfig::clear_ranklistlen() {
  ranklistlen_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GradeRankConfig::_internal_ranklistlen() const {
  return ranklistlen_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GradeRankConfig::ranklistlen() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GradeRankConfig.rankListLen)
  return _internal_ranklistlen();
}
inline void GradeRankConfig::_internal_set_ranklistlen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ranklistlen_ = value;
}
inline void GradeRankConfig::set_ranklistlen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ranklistlen(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GradeRankConfig.rankListLen)
}

// -------------------------------------------------------------------

// WareGivingInfo

// int32 propId = 1;
inline void WareGivingInfo::clear_propid() {
  propid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WareGivingInfo::_internal_propid() const {
  return propid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WareGivingInfo::propid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WareGivingInfo.propId)
  return _internal_propid();
}
inline void WareGivingInfo::_internal_set_propid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  propid_ = value;
}
inline void WareGivingInfo::set_propid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_propid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.WareGivingInfo.propId)
}

// string propName = 2;
inline void WareGivingInfo::clear_propname() {
  propname_.ClearToEmpty();
}
inline const std::string& WareGivingInfo::propname() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WareGivingInfo.propName)
  return _internal_propname();
}
inline void WareGivingInfo::set_propname(const std::string& value) {
  _internal_set_propname(value);
  // @@protoc_insertion_point(field_set:PlaneWar.WareGivingInfo.propName)
}
inline std::string* WareGivingInfo::mutable_propname() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.WareGivingInfo.propName)
  return _internal_mutable_propname();
}
inline const std::string& WareGivingInfo::_internal_propname() const {
  return propname_.Get();
}
inline void WareGivingInfo::_internal_set_propname(const std::string& value) {
  
  propname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WareGivingInfo::set_propname(std::string&& value) {
  
  propname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.WareGivingInfo.propName)
}
inline void WareGivingInfo::set_propname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  propname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.WareGivingInfo.propName)
}
inline void WareGivingInfo::set_propname(const char* value,
    size_t size) {
  
  propname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.WareGivingInfo.propName)
}
inline std::string* WareGivingInfo::_internal_mutable_propname() {
  
  return propname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WareGivingInfo::release_propname() {
  // @@protoc_insertion_point(field_release:PlaneWar.WareGivingInfo.propName)
  return propname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WareGivingInfo::set_allocated_propname(std::string* propname) {
  if (propname != nullptr) {
    
  } else {
    
  }
  propname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), propname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.WareGivingInfo.propName)
}

// float ratio = 3;
inline void WareGivingInfo::clear_ratio() {
  ratio_ = 0;
}
inline float WareGivingInfo::_internal_ratio() const {
  return ratio_;
}
inline float WareGivingInfo::ratio() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WareGivingInfo.ratio)
  return _internal_ratio();
}
inline void WareGivingInfo::_internal_set_ratio(float value) {
  
  ratio_ = value;
}
inline void WareGivingInfo::set_ratio(float value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:PlaneWar.WareGivingInfo.ratio)
}

// bool noRepeat = 4;
inline void WareGivingInfo::clear_norepeat() {
  norepeat_ = false;
}
inline bool WareGivingInfo::_internal_norepeat() const {
  return norepeat_;
}
inline bool WareGivingInfo::norepeat() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WareGivingInfo.noRepeat)
  return _internal_norepeat();
}
inline void WareGivingInfo::_internal_set_norepeat(bool value) {
  
  norepeat_ = value;
}
inline void WareGivingInfo::set_norepeat(bool value) {
  _internal_set_norepeat(value);
  // @@protoc_insertion_point(field_set:PlaneWar.WareGivingInfo.noRepeat)
}

// -------------------------------------------------------------------

// WareInfo

// string wareId = 1;
inline void WareInfo::clear_wareid() {
  wareid_.ClearToEmpty();
}
inline const std::string& WareInfo::wareid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WareInfo.wareId)
  return _internal_wareid();
}
inline void WareInfo::set_wareid(const std::string& value) {
  _internal_set_wareid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.WareInfo.wareId)
}
inline std::string* WareInfo::mutable_wareid() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.WareInfo.wareId)
  return _internal_mutable_wareid();
}
inline const std::string& WareInfo::_internal_wareid() const {
  return wareid_.Get();
}
inline void WareInfo::_internal_set_wareid(const std::string& value) {
  
  wareid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WareInfo::set_wareid(std::string&& value) {
  
  wareid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.WareInfo.wareId)
}
inline void WareInfo::set_wareid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  wareid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.WareInfo.wareId)
}
inline void WareInfo::set_wareid(const char* value,
    size_t size) {
  
  wareid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.WareInfo.wareId)
}
inline std::string* WareInfo::_internal_mutable_wareid() {
  
  return wareid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WareInfo::release_wareid() {
  // @@protoc_insertion_point(field_release:PlaneWar.WareInfo.wareId)
  return wareid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WareInfo::set_allocated_wareid(std::string* wareid) {
  if (wareid != nullptr) {
    
  } else {
    
  }
  wareid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wareid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.WareInfo.wareId)
}

// repeated .PlaneWar.WareGivingInfo wareGivingInfoList = 2;
inline int WareInfo::_internal_waregivinginfolist_size() const {
  return waregivinginfolist_.size();
}
inline int WareInfo::waregivinginfolist_size() const {
  return _internal_waregivinginfolist_size();
}
inline void WareInfo::clear_waregivinginfolist() {
  waregivinginfolist_.Clear();
}
inline ::PlaneWar::WareGivingInfo* WareInfo::mutable_waregivinginfolist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.WareInfo.wareGivingInfoList)
  return waregivinginfolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::WareGivingInfo >*
WareInfo::mutable_waregivinginfolist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.WareInfo.wareGivingInfoList)
  return &waregivinginfolist_;
}
inline const ::PlaneWar::WareGivingInfo& WareInfo::_internal_waregivinginfolist(int index) const {
  return waregivinginfolist_.Get(index);
}
inline const ::PlaneWar::WareGivingInfo& WareInfo::waregivinginfolist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.WareInfo.wareGivingInfoList)
  return _internal_waregivinginfolist(index);
}
inline ::PlaneWar::WareGivingInfo* WareInfo::_internal_add_waregivinginfolist() {
  return waregivinginfolist_.Add();
}
inline ::PlaneWar::WareGivingInfo* WareInfo::add_waregivinginfolist() {
  // @@protoc_insertion_point(field_add:PlaneWar.WareInfo.wareGivingInfoList)
  return _internal_add_waregivinginfolist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::WareGivingInfo >&
WareInfo::waregivinginfolist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.WareInfo.wareGivingInfoList)
  return waregivinginfolist_;
}

// int32 minMoney = 3;
inline void WareInfo::clear_minmoney() {
  minmoney_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WareInfo::_internal_minmoney() const {
  return minmoney_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WareInfo::minmoney() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WareInfo.minMoney)
  return _internal_minmoney();
}
inline void WareInfo::_internal_set_minmoney(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  minmoney_ = value;
}
inline void WareInfo::set_minmoney(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_minmoney(value);
  // @@protoc_insertion_point(field_set:PlaneWar.WareInfo.minMoney)
}

// int32 maxMoney = 4;
inline void WareInfo::clear_maxmoney() {
  maxmoney_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WareInfo::_internal_maxmoney() const {
  return maxmoney_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WareInfo::maxmoney() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WareInfo.maxMoney)
  return _internal_maxmoney();
}
inline void WareInfo::_internal_set_maxmoney(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxmoney_ = value;
}
inline void WareInfo::set_maxmoney(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxmoney(value);
  // @@protoc_insertion_point(field_set:PlaneWar.WareInfo.maxMoney)
}

// int32 price = 5;
inline void WareInfo::clear_price() {
  price_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WareInfo::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WareInfo::price() const {
  // @@protoc_insertion_point(field_get:PlaneWar.WareInfo.price)
  return _internal_price();
}
inline void WareInfo::_internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  price_ = value;
}
inline void WareInfo::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:PlaneWar.WareInfo.price)
}

// repeated .PlaneWar.WareGivingInfo wareGivingProInfoList = 6;
inline int WareInfo::_internal_waregivingproinfolist_size() const {
  return waregivingproinfolist_.size();
}
inline int WareInfo::waregivingproinfolist_size() const {
  return _internal_waregivingproinfolist_size();
}
inline void WareInfo::clear_waregivingproinfolist() {
  waregivingproinfolist_.Clear();
}
inline ::PlaneWar::WareGivingInfo* WareInfo::mutable_waregivingproinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.WareInfo.wareGivingProInfoList)
  return waregivingproinfolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::WareGivingInfo >*
WareInfo::mutable_waregivingproinfolist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.WareInfo.wareGivingProInfoList)
  return &waregivingproinfolist_;
}
inline const ::PlaneWar::WareGivingInfo& WareInfo::_internal_waregivingproinfolist(int index) const {
  return waregivingproinfolist_.Get(index);
}
inline const ::PlaneWar::WareGivingInfo& WareInfo::waregivingproinfolist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.WareInfo.wareGivingProInfoList)
  return _internal_waregivingproinfolist(index);
}
inline ::PlaneWar::WareGivingInfo* WareInfo::_internal_add_waregivingproinfolist() {
  return waregivingproinfolist_.Add();
}
inline ::PlaneWar::WareGivingInfo* WareInfo::add_waregivingproinfolist() {
  // @@protoc_insertion_point(field_add:PlaneWar.WareInfo.wareGivingProInfoList)
  return _internal_add_waregivingproinfolist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::WareGivingInfo >&
WareInfo::waregivingproinfolist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.WareInfo.wareGivingProInfoList)
  return waregivingproinfolist_;
}

// -------------------------------------------------------------------

// ExtraGradeRewardInfo

// string title = 1;
inline void ExtraGradeRewardInfo::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& ExtraGradeRewardInfo::title() const {
  // @@protoc_insertion_point(field_get:PlaneWar.ExtraGradeRewardInfo.title)
  return _internal_title();
}
inline void ExtraGradeRewardInfo::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:PlaneWar.ExtraGradeRewardInfo.title)
}
inline std::string* ExtraGradeRewardInfo::mutable_title() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.ExtraGradeRewardInfo.title)
  return _internal_mutable_title();
}
inline const std::string& ExtraGradeRewardInfo::_internal_title() const {
  return title_.Get();
}
inline void ExtraGradeRewardInfo::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ExtraGradeRewardInfo::set_title(std::string&& value) {
  
  title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.ExtraGradeRewardInfo.title)
}
inline void ExtraGradeRewardInfo::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.ExtraGradeRewardInfo.title)
}
inline void ExtraGradeRewardInfo::set_title(const char* value,
    size_t size) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.ExtraGradeRewardInfo.title)
}
inline std::string* ExtraGradeRewardInfo::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ExtraGradeRewardInfo::release_title() {
  // @@protoc_insertion_point(field_release:PlaneWar.ExtraGradeRewardInfo.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExtraGradeRewardInfo::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.ExtraGradeRewardInfo.title)
}

// string desc = 2;
inline void ExtraGradeRewardInfo::clear_desc() {
  desc_.ClearToEmpty();
}
inline const std::string& ExtraGradeRewardInfo::desc() const {
  // @@protoc_insertion_point(field_get:PlaneWar.ExtraGradeRewardInfo.desc)
  return _internal_desc();
}
inline void ExtraGradeRewardInfo::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:PlaneWar.ExtraGradeRewardInfo.desc)
}
inline std::string* ExtraGradeRewardInfo::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.ExtraGradeRewardInfo.desc)
  return _internal_mutable_desc();
}
inline const std::string& ExtraGradeRewardInfo::_internal_desc() const {
  return desc_.Get();
}
inline void ExtraGradeRewardInfo::_internal_set_desc(const std::string& value) {
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ExtraGradeRewardInfo::set_desc(std::string&& value) {
  
  desc_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.ExtraGradeRewardInfo.desc)
}
inline void ExtraGradeRewardInfo::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.ExtraGradeRewardInfo.desc)
}
inline void ExtraGradeRewardInfo::set_desc(const char* value,
    size_t size) {
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.ExtraGradeRewardInfo.desc)
}
inline std::string* ExtraGradeRewardInfo::_internal_mutable_desc() {
  
  return desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ExtraGradeRewardInfo::release_desc() {
  // @@protoc_insertion_point(field_release:PlaneWar.ExtraGradeRewardInfo.desc)
  return desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExtraGradeRewardInfo::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.ExtraGradeRewardInfo.desc)
}

// float extraExp = 3;
inline void ExtraGradeRewardInfo::clear_extraexp() {
  extraexp_ = 0;
}
inline float ExtraGradeRewardInfo::_internal_extraexp() const {
  return extraexp_;
}
inline float ExtraGradeRewardInfo::extraexp() const {
  // @@protoc_insertion_point(field_get:PlaneWar.ExtraGradeRewardInfo.extraExp)
  return _internal_extraexp();
}
inline void ExtraGradeRewardInfo::_internal_set_extraexp(float value) {
  
  extraexp_ = value;
}
inline void ExtraGradeRewardInfo::set_extraexp(float value) {
  _internal_set_extraexp(value);
  // @@protoc_insertion_point(field_set:PlaneWar.ExtraGradeRewardInfo.extraExp)
}

// -------------------------------------------------------------------

// RankWareConfig

// .PlaneWar.WareInfo commWareInfo = 1;
inline bool RankWareConfig::_internal_has_commwareinfo() const {
  return this != internal_default_instance() && commwareinfo_ != nullptr;
}
inline bool RankWareConfig::has_commwareinfo() const {
  return _internal_has_commwareinfo();
}
inline void RankWareConfig::clear_commwareinfo() {
  if (GetArena() == nullptr && commwareinfo_ != nullptr) {
    delete commwareinfo_;
  }
  commwareinfo_ = nullptr;
}
inline const ::PlaneWar::WareInfo& RankWareConfig::_internal_commwareinfo() const {
  const ::PlaneWar::WareInfo* p = commwareinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::WareInfo&>(
      ::PlaneWar::_WareInfo_default_instance_);
}
inline const ::PlaneWar::WareInfo& RankWareConfig::commwareinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.RankWareConfig.commWareInfo)
  return _internal_commwareinfo();
}
inline void RankWareConfig::unsafe_arena_set_allocated_commwareinfo(
    ::PlaneWar::WareInfo* commwareinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commwareinfo_);
  }
  commwareinfo_ = commwareinfo;
  if (commwareinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.RankWareConfig.commWareInfo)
}
inline ::PlaneWar::WareInfo* RankWareConfig::release_commwareinfo() {
  
  ::PlaneWar::WareInfo* temp = commwareinfo_;
  commwareinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::WareInfo* RankWareConfig::unsafe_arena_release_commwareinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.RankWareConfig.commWareInfo)
  
  ::PlaneWar::WareInfo* temp = commwareinfo_;
  commwareinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::WareInfo* RankWareConfig::_internal_mutable_commwareinfo() {
  
  if (commwareinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::WareInfo>(GetArena());
    commwareinfo_ = p;
  }
  return commwareinfo_;
}
inline ::PlaneWar::WareInfo* RankWareConfig::mutable_commwareinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.RankWareConfig.commWareInfo)
  return _internal_mutable_commwareinfo();
}
inline void RankWareConfig::set_allocated_commwareinfo(::PlaneWar::WareInfo* commwareinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete commwareinfo_;
  }
  if (commwareinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(commwareinfo);
    if (message_arena != submessage_arena) {
      commwareinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commwareinfo, submessage_arena);
    }
    
  } else {
    
  }
  commwareinfo_ = commwareinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.RankWareConfig.commWareInfo)
}

// .PlaneWar.WareInfo advanceWareInfo = 2;
inline bool RankWareConfig::_internal_has_advancewareinfo() const {
  return this != internal_default_instance() && advancewareinfo_ != nullptr;
}
inline bool RankWareConfig::has_advancewareinfo() const {
  return _internal_has_advancewareinfo();
}
inline void RankWareConfig::clear_advancewareinfo() {
  if (GetArena() == nullptr && advancewareinfo_ != nullptr) {
    delete advancewareinfo_;
  }
  advancewareinfo_ = nullptr;
}
inline const ::PlaneWar::WareInfo& RankWareConfig::_internal_advancewareinfo() const {
  const ::PlaneWar::WareInfo* p = advancewareinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::WareInfo&>(
      ::PlaneWar::_WareInfo_default_instance_);
}
inline const ::PlaneWar::WareInfo& RankWareConfig::advancewareinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.RankWareConfig.advanceWareInfo)
  return _internal_advancewareinfo();
}
inline void RankWareConfig::unsafe_arena_set_allocated_advancewareinfo(
    ::PlaneWar::WareInfo* advancewareinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advancewareinfo_);
  }
  advancewareinfo_ = advancewareinfo;
  if (advancewareinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.RankWareConfig.advanceWareInfo)
}
inline ::PlaneWar::WareInfo* RankWareConfig::release_advancewareinfo() {
  
  ::PlaneWar::WareInfo* temp = advancewareinfo_;
  advancewareinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::WareInfo* RankWareConfig::unsafe_arena_release_advancewareinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.RankWareConfig.advanceWareInfo)
  
  ::PlaneWar::WareInfo* temp = advancewareinfo_;
  advancewareinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::WareInfo* RankWareConfig::_internal_mutable_advancewareinfo() {
  
  if (advancewareinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::WareInfo>(GetArena());
    advancewareinfo_ = p;
  }
  return advancewareinfo_;
}
inline ::PlaneWar::WareInfo* RankWareConfig::mutable_advancewareinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.RankWareConfig.advanceWareInfo)
  return _internal_mutable_advancewareinfo();
}
inline void RankWareConfig::set_allocated_advancewareinfo(::PlaneWar::WareInfo* advancewareinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete advancewareinfo_;
  }
  if (advancewareinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(advancewareinfo);
    if (message_arena != submessage_arena) {
      advancewareinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advancewareinfo, submessage_arena);
    }
    
  } else {
    
  }
  advancewareinfo_ = advancewareinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.RankWareConfig.advanceWareInfo)
}

// .PlaneWar.ExtraGradeRewardInfo extraGradeRewardInfo = 3;
inline bool RankWareConfig::_internal_has_extragraderewardinfo() const {
  return this != internal_default_instance() && extragraderewardinfo_ != nullptr;
}
inline bool RankWareConfig::has_extragraderewardinfo() const {
  return _internal_has_extragraderewardinfo();
}
inline void RankWareConfig::clear_extragraderewardinfo() {
  if (GetArena() == nullptr && extragraderewardinfo_ != nullptr) {
    delete extragraderewardinfo_;
  }
  extragraderewardinfo_ = nullptr;
}
inline const ::PlaneWar::ExtraGradeRewardInfo& RankWareConfig::_internal_extragraderewardinfo() const {
  const ::PlaneWar::ExtraGradeRewardInfo* p = extragraderewardinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::ExtraGradeRewardInfo&>(
      ::PlaneWar::_ExtraGradeRewardInfo_default_instance_);
}
inline const ::PlaneWar::ExtraGradeRewardInfo& RankWareConfig::extragraderewardinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.RankWareConfig.extraGradeRewardInfo)
  return _internal_extragraderewardinfo();
}
inline void RankWareConfig::unsafe_arena_set_allocated_extragraderewardinfo(
    ::PlaneWar::ExtraGradeRewardInfo* extragraderewardinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extragraderewardinfo_);
  }
  extragraderewardinfo_ = extragraderewardinfo;
  if (extragraderewardinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.RankWareConfig.extraGradeRewardInfo)
}
inline ::PlaneWar::ExtraGradeRewardInfo* RankWareConfig::release_extragraderewardinfo() {
  
  ::PlaneWar::ExtraGradeRewardInfo* temp = extragraderewardinfo_;
  extragraderewardinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::ExtraGradeRewardInfo* RankWareConfig::unsafe_arena_release_extragraderewardinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.RankWareConfig.extraGradeRewardInfo)
  
  ::PlaneWar::ExtraGradeRewardInfo* temp = extragraderewardinfo_;
  extragraderewardinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::ExtraGradeRewardInfo* RankWareConfig::_internal_mutable_extragraderewardinfo() {
  
  if (extragraderewardinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::ExtraGradeRewardInfo>(GetArena());
    extragraderewardinfo_ = p;
  }
  return extragraderewardinfo_;
}
inline ::PlaneWar::ExtraGradeRewardInfo* RankWareConfig::mutable_extragraderewardinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.RankWareConfig.extraGradeRewardInfo)
  return _internal_mutable_extragraderewardinfo();
}
inline void RankWareConfig::set_allocated_extragraderewardinfo(::PlaneWar::ExtraGradeRewardInfo* extragraderewardinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete extragraderewardinfo_;
  }
  if (extragraderewardinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(extragraderewardinfo);
    if (message_arena != submessage_arena) {
      extragraderewardinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extragraderewardinfo, submessage_arena);
    }
    
  } else {
    
  }
  extragraderewardinfo_ = extragraderewardinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.RankWareConfig.extraGradeRewardInfo)
}

// repeated int32 wareDescList = 4;
inline int RankWareConfig::_internal_waredesclist_size() const {
  return waredesclist_.size();
}
inline int RankWareConfig::waredesclist_size() const {
  return _internal_waredesclist_size();
}
inline void RankWareConfig::clear_waredesclist() {
  waredesclist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankWareConfig::_internal_waredesclist(int index) const {
  return waredesclist_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankWareConfig::waredesclist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.RankWareConfig.wareDescList)
  return _internal_waredesclist(index);
}
inline void RankWareConfig::set_waredesclist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  waredesclist_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlaneWar.RankWareConfig.wareDescList)
}
inline void RankWareConfig::_internal_add_waredesclist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  waredesclist_.Add(value);
}
inline void RankWareConfig::add_waredesclist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_waredesclist(value);
  // @@protoc_insertion_point(field_add:PlaneWar.RankWareConfig.wareDescList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RankWareConfig::_internal_waredesclist() const {
  return waredesclist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RankWareConfig::waredesclist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.RankWareConfig.wareDescList)
  return _internal_waredesclist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RankWareConfig::_internal_mutable_waredesclist() {
  return &waredesclist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RankWareConfig::mutable_waredesclist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.RankWareConfig.wareDescList)
  return _internal_mutable_waredesclist();
}

// repeated int32 gradeDescList = 5;
inline int RankWareConfig::_internal_gradedesclist_size() const {
  return gradedesclist_.size();
}
inline int RankWareConfig::gradedesclist_size() const {
  return _internal_gradedesclist_size();
}
inline void RankWareConfig::clear_gradedesclist() {
  gradedesclist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankWareConfig::_internal_gradedesclist(int index) const {
  return gradedesclist_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankWareConfig::gradedesclist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.RankWareConfig.gradeDescList)
  return _internal_gradedesclist(index);
}
inline void RankWareConfig::set_gradedesclist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  gradedesclist_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlaneWar.RankWareConfig.gradeDescList)
}
inline void RankWareConfig::_internal_add_gradedesclist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  gradedesclist_.Add(value);
}
inline void RankWareConfig::add_gradedesclist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_gradedesclist(value);
  // @@protoc_insertion_point(field_add:PlaneWar.RankWareConfig.gradeDescList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RankWareConfig::_internal_gradedesclist() const {
  return gradedesclist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RankWareConfig::gradedesclist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.RankWareConfig.gradeDescList)
  return _internal_gradedesclist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RankWareConfig::_internal_mutable_gradedesclist() {
  return &gradedesclist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RankWareConfig::mutable_gradedesclist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.RankWareConfig.gradeDescList)
  return _internal_mutable_gradedesclist();
}

// -------------------------------------------------------------------

// DiceConfig

// repeated int32 ratioList = 1;
inline int DiceConfig::_internal_ratiolist_size() const {
  return ratiolist_.size();
}
inline int DiceConfig::ratiolist_size() const {
  return _internal_ratiolist_size();
}
inline void DiceConfig::clear_ratiolist() {
  ratiolist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DiceConfig::_internal_ratiolist(int index) const {
  return ratiolist_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DiceConfig::ratiolist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.DiceConfig.ratioList)
  return _internal_ratiolist(index);
}
inline void DiceConfig::set_ratiolist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  ratiolist_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlaneWar.DiceConfig.ratioList)
}
inline void DiceConfig::_internal_add_ratiolist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ratiolist_.Add(value);
}
inline void DiceConfig::add_ratiolist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_ratiolist(value);
  // @@protoc_insertion_point(field_add:PlaneWar.DiceConfig.ratioList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DiceConfig::_internal_ratiolist() const {
  return ratiolist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DiceConfig::ratiolist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.DiceConfig.ratioList)
  return _internal_ratiolist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DiceConfig::_internal_mutable_ratiolist() {
  return &ratiolist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DiceConfig::mutable_ratiolist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.DiceConfig.ratioList)
  return _internal_mutable_ratiolist();
}

// int32 maxMul = 2;
inline void DiceConfig::clear_maxmul() {
  maxmul_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DiceConfig::_internal_maxmul() const {
  return maxmul_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DiceConfig::maxmul() const {
  // @@protoc_insertion_point(field_get:PlaneWar.DiceConfig.maxMul)
  return _internal_maxmul();
}
inline void DiceConfig::_internal_set_maxmul(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxmul_ = value;
}
inline void DiceConfig::set_maxmul(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxmul(value);
  // @@protoc_insertion_point(field_set:PlaneWar.DiceConfig.maxMul)
}

// -------------------------------------------------------------------

// CSSyncConfigs

// -------------------------------------------------------------------

// SCSyncConfigs

// repeated .PlaneWar.FortuneConfig fortuneConfig = 1;
inline int SCSyncConfigs::_internal_fortuneconfig_size() const {
  return fortuneconfig_.size();
}
inline int SCSyncConfigs::fortuneconfig_size() const {
  return _internal_fortuneconfig_size();
}
inline void SCSyncConfigs::clear_fortuneconfig() {
  fortuneconfig_.Clear();
}
inline ::PlaneWar::FortuneConfig* SCSyncConfigs::mutable_fortuneconfig(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCSyncConfigs.fortuneConfig)
  return fortuneconfig_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::FortuneConfig >*
SCSyncConfigs::mutable_fortuneconfig() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCSyncConfigs.fortuneConfig)
  return &fortuneconfig_;
}
inline const ::PlaneWar::FortuneConfig& SCSyncConfigs::_internal_fortuneconfig(int index) const {
  return fortuneconfig_.Get(index);
}
inline const ::PlaneWar::FortuneConfig& SCSyncConfigs::fortuneconfig(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCSyncConfigs.fortuneConfig)
  return _internal_fortuneconfig(index);
}
inline ::PlaneWar::FortuneConfig* SCSyncConfigs::_internal_add_fortuneconfig() {
  return fortuneconfig_.Add();
}
inline ::PlaneWar::FortuneConfig* SCSyncConfigs::add_fortuneconfig() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCSyncConfigs.fortuneConfig)
  return _internal_add_fortuneconfig();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::FortuneConfig >&
SCSyncConfigs::fortuneconfig() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCSyncConfigs.fortuneConfig)
  return fortuneconfig_;
}

// .PlaneWar.BeeConfig beeConfig = 2;
inline bool SCSyncConfigs::_internal_has_beeconfig() const {
  return this != internal_default_instance() && beeconfig_ != nullptr;
}
inline bool SCSyncConfigs::has_beeconfig() const {
  return _internal_has_beeconfig();
}
inline void SCSyncConfigs::clear_beeconfig() {
  if (GetArena() == nullptr && beeconfig_ != nullptr) {
    delete beeconfig_;
  }
  beeconfig_ = nullptr;
}
inline const ::PlaneWar::BeeConfig& SCSyncConfigs::_internal_beeconfig() const {
  const ::PlaneWar::BeeConfig* p = beeconfig_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::BeeConfig&>(
      ::PlaneWar::_BeeConfig_default_instance_);
}
inline const ::PlaneWar::BeeConfig& SCSyncConfigs::beeconfig() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCSyncConfigs.beeConfig)
  return _internal_beeconfig();
}
inline void SCSyncConfigs::unsafe_arena_set_allocated_beeconfig(
    ::PlaneWar::BeeConfig* beeconfig) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(beeconfig_);
  }
  beeconfig_ = beeconfig;
  if (beeconfig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCSyncConfigs.beeConfig)
}
inline ::PlaneWar::BeeConfig* SCSyncConfigs::release_beeconfig() {
  
  ::PlaneWar::BeeConfig* temp = beeconfig_;
  beeconfig_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::BeeConfig* SCSyncConfigs::unsafe_arena_release_beeconfig() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCSyncConfigs.beeConfig)
  
  ::PlaneWar::BeeConfig* temp = beeconfig_;
  beeconfig_ = nullptr;
  return temp;
}
inline ::PlaneWar::BeeConfig* SCSyncConfigs::_internal_mutable_beeconfig() {
  
  if (beeconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::BeeConfig>(GetArena());
    beeconfig_ = p;
  }
  return beeconfig_;
}
inline ::PlaneWar::BeeConfig* SCSyncConfigs::mutable_beeconfig() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCSyncConfigs.beeConfig)
  return _internal_mutable_beeconfig();
}
inline void SCSyncConfigs::set_allocated_beeconfig(::PlaneWar::BeeConfig* beeconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete beeconfig_;
  }
  if (beeconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(beeconfig);
    if (message_arena != submessage_arena) {
      beeconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, beeconfig, submessage_arena);
    }
    
  } else {
    
  }
  beeconfig_ = beeconfig;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCSyncConfigs.beeConfig)
}

// .PlaneWar.ReplayConfig replayConfig = 3;
inline bool SCSyncConfigs::_internal_has_replayconfig() const {
  return this != internal_default_instance() && replayconfig_ != nullptr;
}
inline bool SCSyncConfigs::has_replayconfig() const {
  return _internal_has_replayconfig();
}
inline void SCSyncConfigs::clear_replayconfig() {
  if (GetArena() == nullptr && replayconfig_ != nullptr) {
    delete replayconfig_;
  }
  replayconfig_ = nullptr;
}
inline const ::PlaneWar::ReplayConfig& SCSyncConfigs::_internal_replayconfig() const {
  const ::PlaneWar::ReplayConfig* p = replayconfig_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::ReplayConfig&>(
      ::PlaneWar::_ReplayConfig_default_instance_);
}
inline const ::PlaneWar::ReplayConfig& SCSyncConfigs::replayconfig() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCSyncConfigs.replayConfig)
  return _internal_replayconfig();
}
inline void SCSyncConfigs::unsafe_arena_set_allocated_replayconfig(
    ::PlaneWar::ReplayConfig* replayconfig) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replayconfig_);
  }
  replayconfig_ = replayconfig;
  if (replayconfig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCSyncConfigs.replayConfig)
}
inline ::PlaneWar::ReplayConfig* SCSyncConfigs::release_replayconfig() {
  
  ::PlaneWar::ReplayConfig* temp = replayconfig_;
  replayconfig_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::ReplayConfig* SCSyncConfigs::unsafe_arena_release_replayconfig() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCSyncConfigs.replayConfig)
  
  ::PlaneWar::ReplayConfig* temp = replayconfig_;
  replayconfig_ = nullptr;
  return temp;
}
inline ::PlaneWar::ReplayConfig* SCSyncConfigs::_internal_mutable_replayconfig() {
  
  if (replayconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::ReplayConfig>(GetArena());
    replayconfig_ = p;
  }
  return replayconfig_;
}
inline ::PlaneWar::ReplayConfig* SCSyncConfigs::mutable_replayconfig() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCSyncConfigs.replayConfig)
  return _internal_mutable_replayconfig();
}
inline void SCSyncConfigs::set_allocated_replayconfig(::PlaneWar::ReplayConfig* replayconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete replayconfig_;
  }
  if (replayconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(replayconfig);
    if (message_arena != submessage_arena) {
      replayconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replayconfig, submessage_arena);
    }
    
  } else {
    
  }
  replayconfig_ = replayconfig;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCSyncConfigs.replayConfig)
}

// .PlaneWar.GradeRankConfig gradeRankConfig = 4;
inline bool SCSyncConfigs::_internal_has_graderankconfig() const {
  return this != internal_default_instance() && graderankconfig_ != nullptr;
}
inline bool SCSyncConfigs::has_graderankconfig() const {
  return _internal_has_graderankconfig();
}
inline void SCSyncConfigs::clear_graderankconfig() {
  if (GetArena() == nullptr && graderankconfig_ != nullptr) {
    delete graderankconfig_;
  }
  graderankconfig_ = nullptr;
}
inline const ::PlaneWar::GradeRankConfig& SCSyncConfigs::_internal_graderankconfig() const {
  const ::PlaneWar::GradeRankConfig* p = graderankconfig_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::GradeRankConfig&>(
      ::PlaneWar::_GradeRankConfig_default_instance_);
}
inline const ::PlaneWar::GradeRankConfig& SCSyncConfigs::graderankconfig() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCSyncConfigs.gradeRankConfig)
  return _internal_graderankconfig();
}
inline void SCSyncConfigs::unsafe_arena_set_allocated_graderankconfig(
    ::PlaneWar::GradeRankConfig* graderankconfig) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graderankconfig_);
  }
  graderankconfig_ = graderankconfig;
  if (graderankconfig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCSyncConfigs.gradeRankConfig)
}
inline ::PlaneWar::GradeRankConfig* SCSyncConfigs::release_graderankconfig() {
  
  ::PlaneWar::GradeRankConfig* temp = graderankconfig_;
  graderankconfig_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::GradeRankConfig* SCSyncConfigs::unsafe_arena_release_graderankconfig() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCSyncConfigs.gradeRankConfig)
  
  ::PlaneWar::GradeRankConfig* temp = graderankconfig_;
  graderankconfig_ = nullptr;
  return temp;
}
inline ::PlaneWar::GradeRankConfig* SCSyncConfigs::_internal_mutable_graderankconfig() {
  
  if (graderankconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::GradeRankConfig>(GetArena());
    graderankconfig_ = p;
  }
  return graderankconfig_;
}
inline ::PlaneWar::GradeRankConfig* SCSyncConfigs::mutable_graderankconfig() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCSyncConfigs.gradeRankConfig)
  return _internal_mutable_graderankconfig();
}
inline void SCSyncConfigs::set_allocated_graderankconfig(::PlaneWar::GradeRankConfig* graderankconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete graderankconfig_;
  }
  if (graderankconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(graderankconfig);
    if (message_arena != submessage_arena) {
      graderankconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graderankconfig, submessage_arena);
    }
    
  } else {
    
  }
  graderankconfig_ = graderankconfig;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCSyncConfigs.gradeRankConfig)
}

// .PlaneWar.RankWareConfig wareConfig = 5;
inline bool SCSyncConfigs::_internal_has_wareconfig() const {
  return this != internal_default_instance() && wareconfig_ != nullptr;
}
inline bool SCSyncConfigs::has_wareconfig() const {
  return _internal_has_wareconfig();
}
inline void SCSyncConfigs::clear_wareconfig() {
  if (GetArena() == nullptr && wareconfig_ != nullptr) {
    delete wareconfig_;
  }
  wareconfig_ = nullptr;
}
inline const ::PlaneWar::RankWareConfig& SCSyncConfigs::_internal_wareconfig() const {
  const ::PlaneWar::RankWareConfig* p = wareconfig_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::RankWareConfig&>(
      ::PlaneWar::_RankWareConfig_default_instance_);
}
inline const ::PlaneWar::RankWareConfig& SCSyncConfigs::wareconfig() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCSyncConfigs.wareConfig)
  return _internal_wareconfig();
}
inline void SCSyncConfigs::unsafe_arena_set_allocated_wareconfig(
    ::PlaneWar::RankWareConfig* wareconfig) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wareconfig_);
  }
  wareconfig_ = wareconfig;
  if (wareconfig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCSyncConfigs.wareConfig)
}
inline ::PlaneWar::RankWareConfig* SCSyncConfigs::release_wareconfig() {
  
  ::PlaneWar::RankWareConfig* temp = wareconfig_;
  wareconfig_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::RankWareConfig* SCSyncConfigs::unsafe_arena_release_wareconfig() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCSyncConfigs.wareConfig)
  
  ::PlaneWar::RankWareConfig* temp = wareconfig_;
  wareconfig_ = nullptr;
  return temp;
}
inline ::PlaneWar::RankWareConfig* SCSyncConfigs::_internal_mutable_wareconfig() {
  
  if (wareconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::RankWareConfig>(GetArena());
    wareconfig_ = p;
  }
  return wareconfig_;
}
inline ::PlaneWar::RankWareConfig* SCSyncConfigs::mutable_wareconfig() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCSyncConfigs.wareConfig)
  return _internal_mutable_wareconfig();
}
inline void SCSyncConfigs::set_allocated_wareconfig(::PlaneWar::RankWareConfig* wareconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete wareconfig_;
  }
  if (wareconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(wareconfig);
    if (message_arena != submessage_arena) {
      wareconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wareconfig, submessage_arena);
    }
    
  } else {
    
  }
  wareconfig_ = wareconfig;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCSyncConfigs.wareConfig)
}

// .PlaneWar.DiceConfig diceConfig = 6;
inline bool SCSyncConfigs::_internal_has_diceconfig() const {
  return this != internal_default_instance() && diceconfig_ != nullptr;
}
inline bool SCSyncConfigs::has_diceconfig() const {
  return _internal_has_diceconfig();
}
inline void SCSyncConfigs::clear_diceconfig() {
  if (GetArena() == nullptr && diceconfig_ != nullptr) {
    delete diceconfig_;
  }
  diceconfig_ = nullptr;
}
inline const ::PlaneWar::DiceConfig& SCSyncConfigs::_internal_diceconfig() const {
  const ::PlaneWar::DiceConfig* p = diceconfig_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::DiceConfig&>(
      ::PlaneWar::_DiceConfig_default_instance_);
}
inline const ::PlaneWar::DiceConfig& SCSyncConfigs::diceconfig() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCSyncConfigs.diceConfig)
  return _internal_diceconfig();
}
inline void SCSyncConfigs::unsafe_arena_set_allocated_diceconfig(
    ::PlaneWar::DiceConfig* diceconfig) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diceconfig_);
  }
  diceconfig_ = diceconfig;
  if (diceconfig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCSyncConfigs.diceConfig)
}
inline ::PlaneWar::DiceConfig* SCSyncConfigs::release_diceconfig() {
  
  ::PlaneWar::DiceConfig* temp = diceconfig_;
  diceconfig_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::DiceConfig* SCSyncConfigs::unsafe_arena_release_diceconfig() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCSyncConfigs.diceConfig)
  
  ::PlaneWar::DiceConfig* temp = diceconfig_;
  diceconfig_ = nullptr;
  return temp;
}
inline ::PlaneWar::DiceConfig* SCSyncConfigs::_internal_mutable_diceconfig() {
  
  if (diceconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::DiceConfig>(GetArena());
    diceconfig_ = p;
  }
  return diceconfig_;
}
inline ::PlaneWar::DiceConfig* SCSyncConfigs::mutable_diceconfig() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCSyncConfigs.diceConfig)
  return _internal_mutable_diceconfig();
}
inline void SCSyncConfigs::set_allocated_diceconfig(::PlaneWar::DiceConfig* diceconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete diceconfig_;
  }
  if (diceconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(diceconfig);
    if (message_arena != submessage_arena) {
      diceconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diceconfig, submessage_arena);
    }
    
  } else {
    
  }
  diceconfig_ = diceconfig;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCSyncConfigs.diceConfig)
}

// -------------------------------------------------------------------

// CSConfirmWeaponExist

// int32 sourceUID = 1;
inline void CSConfirmWeaponExist::clear_sourceuid() {
  sourceuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSConfirmWeaponExist::_internal_sourceuid() const {
  return sourceuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSConfirmWeaponExist::sourceuid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSConfirmWeaponExist.sourceUID)
  return _internal_sourceuid();
}
inline void CSConfirmWeaponExist::_internal_set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sourceuid_ = value;
}
inline void CSConfirmWeaponExist::set_sourceuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sourceuid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSConfirmWeaponExist.sourceUID)
}

// -------------------------------------------------------------------

// SCConfirmWeaponExist

// bool exist = 1;
inline void SCConfirmWeaponExist::clear_exist() {
  exist_ = false;
}
inline bool SCConfirmWeaponExist::_internal_exist() const {
  return exist_;
}
inline bool SCConfirmWeaponExist::exist() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCConfirmWeaponExist.exist)
  return _internal_exist();
}
inline void SCConfirmWeaponExist::_internal_set_exist(bool value) {
  
  exist_ = value;
}
inline void SCConfirmWeaponExist::set_exist(bool value) {
  _internal_set_exist(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCConfirmWeaponExist.exist)
}

// -------------------------------------------------------------------

// CSGetVideo

// string videoId = 1;
inline void CSGetVideo::clear_videoid() {
  videoid_.ClearToEmpty();
}
inline const std::string& CSGetVideo::videoid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSGetVideo.videoId)
  return _internal_videoid();
}
inline void CSGetVideo::set_videoid(const std::string& value) {
  _internal_set_videoid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSGetVideo.videoId)
}
inline std::string* CSGetVideo::mutable_videoid() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.CSGetVideo.videoId)
  return _internal_mutable_videoid();
}
inline const std::string& CSGetVideo::_internal_videoid() const {
  return videoid_.Get();
}
inline void CSGetVideo::_internal_set_videoid(const std::string& value) {
  
  videoid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSGetVideo::set_videoid(std::string&& value) {
  
  videoid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.CSGetVideo.videoId)
}
inline void CSGetVideo::set_videoid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  videoid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.CSGetVideo.videoId)
}
inline void CSGetVideo::set_videoid(const char* value,
    size_t size) {
  
  videoid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.CSGetVideo.videoId)
}
inline std::string* CSGetVideo::_internal_mutable_videoid() {
  
  return videoid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSGetVideo::release_videoid() {
  // @@protoc_insertion_point(field_release:PlaneWar.CSGetVideo.videoId)
  return videoid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSGetVideo::set_allocated_videoid(std::string* videoid) {
  if (videoid != nullptr) {
    
  } else {
    
  }
  videoid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), videoid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.CSGetVideo.videoId)
}

// int32 videoType = 2;
inline void CSGetVideo::clear_videotype() {
  videotype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSGetVideo::_internal_videotype() const {
  return videotype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSGetVideo::videotype() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSGetVideo.videoType)
  return _internal_videotype();
}
inline void CSGetVideo::_internal_set_videotype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  videotype_ = value;
}
inline void CSGetVideo::set_videotype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_videotype(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSGetVideo.videoType)
}

// -------------------------------------------------------------------

// SCGetVideo

// repeated .PlaneWar.MonsterPath createdPathList = 1;
inline int SCGetVideo::_internal_createdpathlist_size() const {
  return createdpathlist_.size();
}
inline int SCGetVideo::createdpathlist_size() const {
  return _internal_createdpathlist_size();
}
inline void SCGetVideo::clear_createdpathlist() {
  createdpathlist_.Clear();
}
inline ::PlaneWar::MonsterPath* SCGetVideo::mutable_createdpathlist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCGetVideo.createdPathList)
  return createdpathlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MonsterPath >*
SCGetVideo::mutable_createdpathlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCGetVideo.createdPathList)
  return &createdpathlist_;
}
inline const ::PlaneWar::MonsterPath& SCGetVideo::_internal_createdpathlist(int index) const {
  return createdpathlist_.Get(index);
}
inline const ::PlaneWar::MonsterPath& SCGetVideo::createdpathlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetVideo.createdPathList)
  return _internal_createdpathlist(index);
}
inline ::PlaneWar::MonsterPath* SCGetVideo::_internal_add_createdpathlist() {
  return createdpathlist_.Add();
}
inline ::PlaneWar::MonsterPath* SCGetVideo::add_createdpathlist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCGetVideo.createdPathList)
  return _internal_add_createdpathlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::MonsterPath >&
SCGetVideo::createdpathlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCGetVideo.createdPathList)
  return createdpathlist_;
}

// int32 rewardType = 2;
inline void SCGetVideo::clear_rewardtype() {
  rewardtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetVideo::_internal_rewardtype() const {
  return rewardtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetVideo::rewardtype() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetVideo.rewardType)
  return _internal_rewardtype();
}
inline void SCGetVideo::_internal_set_rewardtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rewardtype_ = value;
}
inline void SCGetVideo::set_rewardtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rewardtype(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGetVideo.rewardType)
}

// int64 timestamp = 3;
inline void SCGetVideo::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCGetVideo::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCGetVideo::timestamp() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetVideo.timestamp)
  return _internal_timestamp();
}
inline void SCGetVideo::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void SCGetVideo::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGetVideo.timestamp)
}

// int32 reward = 4;
inline void SCGetVideo::clear_reward() {
  reward_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetVideo::_internal_reward() const {
  return reward_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetVideo::reward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetVideo.reward)
  return _internal_reward();
}
inline void SCGetVideo::_internal_set_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reward_ = value;
}
inline void SCGetVideo::set_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGetVideo.reward)
}

// int32 chair = 5;
inline void SCGetVideo::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetVideo::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetVideo::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetVideo.chair)
  return _internal_chair();
}
inline void SCGetVideo::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCGetVideo::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGetVideo.chair)
}

// int64 money = 6;
inline void SCGetVideo::clear_money() {
  money_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCGetVideo::_internal_money() const {
  return money_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCGetVideo::money() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetVideo.money)
  return _internal_money();
}
inline void SCGetVideo::_internal_set_money(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  money_ = value;
}
inline void SCGetVideo::set_money(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGetVideo.money)
}

// int32 ratio = 7;
inline void SCGetVideo::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetVideo::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetVideo::ratio() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetVideo.ratio)
  return _internal_ratio();
}
inline void SCGetVideo::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void SCGetVideo::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGetVideo.ratio)
}

// int32 gunType = 8;
inline void SCGetVideo::clear_guntype() {
  guntype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetVideo::_internal_guntype() const {
  return guntype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetVideo::guntype() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetVideo.gunType)
  return _internal_guntype();
}
inline void SCGetVideo::_internal_set_guntype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  guntype_ = value;
}
inline void SCGetVideo::set_guntype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_guntype(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGetVideo.gunType)
}

// int32 arena = 9;
inline void SCGetVideo::clear_arena() {
  arena_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetVideo::_internal_arena() const {
  return arena_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetVideo::arena() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetVideo.arena)
  return _internal_arena();
}
inline void SCGetVideo::_internal_set_arena(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  arena_ = value;
}
inline void SCGetVideo::set_arena(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_arena(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGetVideo.arena)
}

// int32 weaponId = 10;
inline void SCGetVideo::clear_weaponid() {
  weaponid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetVideo::_internal_weaponid() const {
  return weaponid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetVideo::weaponid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetVideo.weaponId)
  return _internal_weaponid();
}
inline void SCGetVideo::_internal_set_weaponid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  weaponid_ = value;
}
inline void SCGetVideo::set_weaponid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_weaponid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGetVideo.weaponId)
}

// -------------------------------------------------------------------

// VideoCommon

// int32 reward = 1;
inline void VideoCommon::clear_reward() {
  reward_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoCommon::_internal_reward() const {
  return reward_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoCommon::reward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.VideoCommon.reward)
  return _internal_reward();
}
inline void VideoCommon::_internal_set_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reward_ = value;
}
inline void VideoCommon::set_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:PlaneWar.VideoCommon.reward)
}

// int32 rewardType = 2;
inline void VideoCommon::clear_rewardtype() {
  rewardtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoCommon::_internal_rewardtype() const {
  return rewardtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoCommon::rewardtype() const {
  // @@protoc_insertion_point(field_get:PlaneWar.VideoCommon.rewardType)
  return _internal_rewardtype();
}
inline void VideoCommon::_internal_set_rewardtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rewardtype_ = value;
}
inline void VideoCommon::set_rewardtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rewardtype(value);
  // @@protoc_insertion_point(field_set:PlaneWar.VideoCommon.rewardType)
}

// int64 timestamp = 3;
inline void VideoCommon::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VideoCommon::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VideoCommon::timestamp() const {
  // @@protoc_insertion_point(field_get:PlaneWar.VideoCommon.timestamp)
  return _internal_timestamp();
}
inline void VideoCommon::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void VideoCommon::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:PlaneWar.VideoCommon.timestamp)
}

// string videoId = 4;
inline void VideoCommon::clear_videoid() {
  videoid_.ClearToEmpty();
}
inline const std::string& VideoCommon::videoid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.VideoCommon.videoId)
  return _internal_videoid();
}
inline void VideoCommon::set_videoid(const std::string& value) {
  _internal_set_videoid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.VideoCommon.videoId)
}
inline std::string* VideoCommon::mutable_videoid() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.VideoCommon.videoId)
  return _internal_mutable_videoid();
}
inline const std::string& VideoCommon::_internal_videoid() const {
  return videoid_.Get();
}
inline void VideoCommon::_internal_set_videoid(const std::string& value) {
  
  videoid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VideoCommon::set_videoid(std::string&& value) {
  
  videoid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.VideoCommon.videoId)
}
inline void VideoCommon::set_videoid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  videoid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.VideoCommon.videoId)
}
inline void VideoCommon::set_videoid(const char* value,
    size_t size) {
  
  videoid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.VideoCommon.videoId)
}
inline std::string* VideoCommon::_internal_mutable_videoid() {
  
  return videoid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VideoCommon::release_videoid() {
  // @@protoc_insertion_point(field_release:PlaneWar.VideoCommon.videoId)
  return videoid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VideoCommon::set_allocated_videoid(std::string* videoid) {
  if (videoid != nullptr) {
    
  } else {
    
  }
  videoid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), videoid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.VideoCommon.videoId)
}

// bool unread = 5;
inline void VideoCommon::clear_unread() {
  unread_ = false;
}
inline bool VideoCommon::_internal_unread() const {
  return unread_;
}
inline bool VideoCommon::unread() const {
  // @@protoc_insertion_point(field_get:PlaneWar.VideoCommon.unread)
  return _internal_unread();
}
inline void VideoCommon::_internal_set_unread(bool value) {
  
  unread_ = value;
}
inline void VideoCommon::set_unread(bool value) {
  _internal_set_unread(value);
  // @@protoc_insertion_point(field_set:PlaneWar.VideoCommon.unread)
}

// int32 weaponId = 6;
inline void VideoCommon::clear_weaponid() {
  weaponid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoCommon::_internal_weaponid() const {
  return weaponid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoCommon::weaponid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.VideoCommon.weaponId)
  return _internal_weaponid();
}
inline void VideoCommon::_internal_set_weaponid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  weaponid_ = value;
}
inline void VideoCommon::set_weaponid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_weaponid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.VideoCommon.weaponId)
}

// int32 arenaId = 7;
inline void VideoCommon::clear_arenaid() {
  arenaid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoCommon::_internal_arenaid() const {
  return arenaid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoCommon::arenaid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.VideoCommon.arenaId)
  return _internal_arenaid();
}
inline void VideoCommon::_internal_set_arenaid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  arenaid_ = value;
}
inline void VideoCommon::set_arenaid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_arenaid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.VideoCommon.arenaId)
}

// -------------------------------------------------------------------

// GlobalVideoInfo

// string niceName = 1;
inline void GlobalVideoInfo::clear_nicename() {
  nicename_.ClearToEmpty();
}
inline const std::string& GlobalVideoInfo::nicename() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GlobalVideoInfo.niceName)
  return _internal_nicename();
}
inline void GlobalVideoInfo::set_nicename(const std::string& value) {
  _internal_set_nicename(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GlobalVideoInfo.niceName)
}
inline std::string* GlobalVideoInfo::mutable_nicename() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.GlobalVideoInfo.niceName)
  return _internal_mutable_nicename();
}
inline const std::string& GlobalVideoInfo::_internal_nicename() const {
  return nicename_.Get();
}
inline void GlobalVideoInfo::_internal_set_nicename(const std::string& value) {
  
  nicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GlobalVideoInfo::set_nicename(std::string&& value) {
  
  nicename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.GlobalVideoInfo.niceName)
}
inline void GlobalVideoInfo::set_nicename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.GlobalVideoInfo.niceName)
}
inline void GlobalVideoInfo::set_nicename(const char* value,
    size_t size) {
  
  nicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.GlobalVideoInfo.niceName)
}
inline std::string* GlobalVideoInfo::_internal_mutable_nicename() {
  
  return nicename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GlobalVideoInfo::release_nicename() {
  // @@protoc_insertion_point(field_release:PlaneWar.GlobalVideoInfo.niceName)
  return nicename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GlobalVideoInfo::set_allocated_nicename(std::string* nicename) {
  if (nicename != nullptr) {
    
  } else {
    
  }
  nicename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nicename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.GlobalVideoInfo.niceName)
}

// bool self = 2;
inline void GlobalVideoInfo::clear_self() {
  self_ = false;
}
inline bool GlobalVideoInfo::_internal_self() const {
  return self_;
}
inline bool GlobalVideoInfo::self() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GlobalVideoInfo.self)
  return _internal_self();
}
inline void GlobalVideoInfo::_internal_set_self(bool value) {
  
  self_ = value;
}
inline void GlobalVideoInfo::set_self(bool value) {
  _internal_set_self(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GlobalVideoInfo.self)
}

// .PlaneWar.VideoCommon common = 3;
inline bool GlobalVideoInfo::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool GlobalVideoInfo::has_common() const {
  return _internal_has_common();
}
inline void GlobalVideoInfo::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::PlaneWar::VideoCommon& GlobalVideoInfo::_internal_common() const {
  const ::PlaneWar::VideoCommon* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::VideoCommon&>(
      ::PlaneWar::_VideoCommon_default_instance_);
}
inline const ::PlaneWar::VideoCommon& GlobalVideoInfo::common() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GlobalVideoInfo.common)
  return _internal_common();
}
inline void GlobalVideoInfo::unsafe_arena_set_allocated_common(
    ::PlaneWar::VideoCommon* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.GlobalVideoInfo.common)
}
inline ::PlaneWar::VideoCommon* GlobalVideoInfo::release_common() {
  
  ::PlaneWar::VideoCommon* temp = common_;
  common_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::VideoCommon* GlobalVideoInfo::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:PlaneWar.GlobalVideoInfo.common)
  
  ::PlaneWar::VideoCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::PlaneWar::VideoCommon* GlobalVideoInfo::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::VideoCommon>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::PlaneWar::VideoCommon* GlobalVideoInfo::mutable_common() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.GlobalVideoInfo.common)
  return _internal_mutable_common();
}
inline void GlobalVideoInfo::set_allocated_common(::PlaneWar::VideoCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.GlobalVideoInfo.common)
}

// -------------------------------------------------------------------

// SelfVideoInfo

// int32 ratio = 1;
inline void SelfVideoInfo::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelfVideoInfo::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelfVideoInfo::ratio() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SelfVideoInfo.ratio)
  return _internal_ratio();
}
inline void SelfVideoInfo::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void SelfVideoInfo::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SelfVideoInfo.ratio)
}

// .PlaneWar.VideoCommon common = 2;
inline bool SelfVideoInfo::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool SelfVideoInfo::has_common() const {
  return _internal_has_common();
}
inline void SelfVideoInfo::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::PlaneWar::VideoCommon& SelfVideoInfo::_internal_common() const {
  const ::PlaneWar::VideoCommon* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::VideoCommon&>(
      ::PlaneWar::_VideoCommon_default_instance_);
}
inline const ::PlaneWar::VideoCommon& SelfVideoInfo::common() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SelfVideoInfo.common)
  return _internal_common();
}
inline void SelfVideoInfo::unsafe_arena_set_allocated_common(
    ::PlaneWar::VideoCommon* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SelfVideoInfo.common)
}
inline ::PlaneWar::VideoCommon* SelfVideoInfo::release_common() {
  
  ::PlaneWar::VideoCommon* temp = common_;
  common_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::VideoCommon* SelfVideoInfo::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:PlaneWar.SelfVideoInfo.common)
  
  ::PlaneWar::VideoCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::PlaneWar::VideoCommon* SelfVideoInfo::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::VideoCommon>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::PlaneWar::VideoCommon* SelfVideoInfo::mutable_common() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SelfVideoInfo.common)
  return _internal_mutable_common();
}
inline void SelfVideoInfo::set_allocated_common(::PlaneWar::VideoCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SelfVideoInfo.common)
}

// -------------------------------------------------------------------

// CSSelfVideoRecord

// int32 from = 1;
inline void CSSelfVideoRecord::clear_from() {
  from_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSelfVideoRecord::_internal_from() const {
  return from_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSelfVideoRecord::from() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSSelfVideoRecord.from)
  return _internal_from();
}
inline void CSSelfVideoRecord::_internal_set_from(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  from_ = value;
}
inline void CSSelfVideoRecord::set_from(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSSelfVideoRecord.from)
}

// int32 to = 2;
inline void CSSelfVideoRecord::clear_to() {
  to_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSelfVideoRecord::_internal_to() const {
  return to_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSelfVideoRecord::to() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSSelfVideoRecord.to)
  return _internal_to();
}
inline void CSSelfVideoRecord::_internal_set_to(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  to_ = value;
}
inline void CSSelfVideoRecord::set_to(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSSelfVideoRecord.to)
}

// -------------------------------------------------------------------

// SCSelfVideoRecord

// repeated .PlaneWar.SelfVideoInfo videoList = 1;
inline int SCSelfVideoRecord::_internal_videolist_size() const {
  return videolist_.size();
}
inline int SCSelfVideoRecord::videolist_size() const {
  return _internal_videolist_size();
}
inline void SCSelfVideoRecord::clear_videolist() {
  videolist_.Clear();
}
inline ::PlaneWar::SelfVideoInfo* SCSelfVideoRecord::mutable_videolist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCSelfVideoRecord.videoList)
  return videolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::SelfVideoInfo >*
SCSelfVideoRecord::mutable_videolist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCSelfVideoRecord.videoList)
  return &videolist_;
}
inline const ::PlaneWar::SelfVideoInfo& SCSelfVideoRecord::_internal_videolist(int index) const {
  return videolist_.Get(index);
}
inline const ::PlaneWar::SelfVideoInfo& SCSelfVideoRecord::videolist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCSelfVideoRecord.videoList)
  return _internal_videolist(index);
}
inline ::PlaneWar::SelfVideoInfo* SCSelfVideoRecord::_internal_add_videolist() {
  return videolist_.Add();
}
inline ::PlaneWar::SelfVideoInfo* SCSelfVideoRecord::add_videolist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCSelfVideoRecord.videoList)
  return _internal_add_videolist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::SelfVideoInfo >&
SCSelfVideoRecord::videolist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCSelfVideoRecord.videoList)
  return videolist_;
}

// int32 refreshTime = 2;
inline void SCSelfVideoRecord::clear_refreshtime() {
  refreshtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSelfVideoRecord::_internal_refreshtime() const {
  return refreshtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSelfVideoRecord::refreshtime() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCSelfVideoRecord.refreshTime)
  return _internal_refreshtime();
}
inline void SCSelfVideoRecord::_internal_set_refreshtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  refreshtime_ = value;
}
inline void SCSelfVideoRecord::set_refreshtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_refreshtime(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCSelfVideoRecord.refreshTime)
}

// -------------------------------------------------------------------

// CSVideoRank

// int32 from = 1;
inline void CSVideoRank::clear_from() {
  from_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVideoRank::_internal_from() const {
  return from_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVideoRank::from() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSVideoRank.from)
  return _internal_from();
}
inline void CSVideoRank::_internal_set_from(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  from_ = value;
}
inline void CSVideoRank::set_from(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSVideoRank.from)
}

// int32 to = 2;
inline void CSVideoRank::clear_to() {
  to_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVideoRank::_internal_to() const {
  return to_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVideoRank::to() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSVideoRank.to)
  return _internal_to();
}
inline void CSVideoRank::_internal_set_to(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  to_ = value;
}
inline void CSVideoRank::set_to(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSVideoRank.to)
}

// -------------------------------------------------------------------

// SCVideoRank

// repeated .PlaneWar.GlobalVideoInfo videoList = 1;
inline int SCVideoRank::_internal_videolist_size() const {
  return videolist_.size();
}
inline int SCVideoRank::videolist_size() const {
  return _internal_videolist_size();
}
inline void SCVideoRank::clear_videolist() {
  videolist_.Clear();
}
inline ::PlaneWar::GlobalVideoInfo* SCVideoRank::mutable_videolist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCVideoRank.videoList)
  return videolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GlobalVideoInfo >*
SCVideoRank::mutable_videolist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCVideoRank.videoList)
  return &videolist_;
}
inline const ::PlaneWar::GlobalVideoInfo& SCVideoRank::_internal_videolist(int index) const {
  return videolist_.Get(index);
}
inline const ::PlaneWar::GlobalVideoInfo& SCVideoRank::videolist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCVideoRank.videoList)
  return _internal_videolist(index);
}
inline ::PlaneWar::GlobalVideoInfo* SCVideoRank::_internal_add_videolist() {
  return videolist_.Add();
}
inline ::PlaneWar::GlobalVideoInfo* SCVideoRank::add_videolist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCVideoRank.videoList)
  return _internal_add_videolist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GlobalVideoInfo >&
SCVideoRank::videolist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCVideoRank.videoList)
  return videolist_;
}

// int32 refreshTime = 2;
inline void SCVideoRank::clear_refreshtime() {
  refreshtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVideoRank::_internal_refreshtime() const {
  return refreshtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVideoRank::refreshtime() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCVideoRank.refreshTime)
  return _internal_refreshtime();
}
inline void SCVideoRank::_internal_set_refreshtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  refreshtime_ = value;
}
inline void SCVideoRank::set_refreshtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_refreshtime(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCVideoRank.refreshTime)
}

// -------------------------------------------------------------------

// ReceiveReward

// int32 propId = 1;
inline void ReceiveReward::clear_propid() {
  propid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReceiveReward::_internal_propid() const {
  return propid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReceiveReward::propid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.ReceiveReward.propId)
  return _internal_propid();
}
inline void ReceiveReward::_internal_set_propid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  propid_ = value;
}
inline void ReceiveReward::set_propid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_propid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.ReceiveReward.propId)
}

// int32 num = 2;
inline void ReceiveReward::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReceiveReward::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReceiveReward::num() const {
  // @@protoc_insertion_point(field_get:PlaneWar.ReceiveReward.num)
  return _internal_num();
}
inline void ReceiveReward::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void ReceiveReward::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:PlaneWar.ReceiveReward.num)
}

// bool advance = 3;
inline void ReceiveReward::clear_advance() {
  advance_ = false;
}
inline bool ReceiveReward::_internal_advance() const {
  return advance_;
}
inline bool ReceiveReward::advance() const {
  // @@protoc_insertion_point(field_get:PlaneWar.ReceiveReward.advance)
  return _internal_advance();
}
inline void ReceiveReward::_internal_set_advance(bool value) {
  
  advance_ = value;
}
inline void ReceiveReward::set_advance(bool value) {
  _internal_set_advance(value);
  // @@protoc_insertion_point(field_set:PlaneWar.ReceiveReward.advance)
}

// int32 minNum = 4;
inline void ReceiveReward::clear_minnum() {
  minnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReceiveReward::_internal_minnum() const {
  return minnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReceiveReward::minnum() const {
  // @@protoc_insertion_point(field_get:PlaneWar.ReceiveReward.minNum)
  return _internal_minnum();
}
inline void ReceiveReward::_internal_set_minnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  minnum_ = value;
}
inline void ReceiveReward::set_minnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_minnum(value);
  // @@protoc_insertion_point(field_set:PlaneWar.ReceiveReward.minNum)
}

// int32 maxNum = 5;
inline void ReceiveReward::clear_maxnum() {
  maxnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReceiveReward::_internal_maxnum() const {
  return maxnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReceiveReward::maxnum() const {
  // @@protoc_insertion_point(field_get:PlaneWar.ReceiveReward.maxNum)
  return _internal_maxnum();
}
inline void ReceiveReward::_internal_set_maxnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxnum_ = value;
}
inline void ReceiveReward::set_maxnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxnum(value);
  // @@protoc_insertion_point(field_set:PlaneWar.ReceiveReward.maxNum)
}

// bool box = 6;
inline void ReceiveReward::clear_box() {
  box_ = false;
}
inline bool ReceiveReward::_internal_box() const {
  return box_;
}
inline bool ReceiveReward::box() const {
  // @@protoc_insertion_point(field_get:PlaneWar.ReceiveReward.box)
  return _internal_box();
}
inline void ReceiveReward::_internal_set_box(bool value) {
  
  box_ = value;
}
inline void ReceiveReward::set_box(bool value) {
  _internal_set_box(value);
  // @@protoc_insertion_point(field_set:PlaneWar.ReceiveReward.box)
}

// int32 uniqueId = 7;
inline void ReceiveReward::clear_uniqueid() {
  uniqueid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReceiveReward::_internal_uniqueid() const {
  return uniqueid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReceiveReward::uniqueid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.ReceiveReward.uniqueId)
  return _internal_uniqueid();
}
inline void ReceiveReward::_internal_set_uniqueid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uniqueid_ = value;
}
inline void ReceiveReward::set_uniqueid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uniqueid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.ReceiveReward.uniqueId)
}

// string desc = 8;
inline void ReceiveReward::clear_desc() {
  desc_.ClearToEmpty();
}
inline const std::string& ReceiveReward::desc() const {
  // @@protoc_insertion_point(field_get:PlaneWar.ReceiveReward.desc)
  return _internal_desc();
}
inline void ReceiveReward::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:PlaneWar.ReceiveReward.desc)
}
inline std::string* ReceiveReward::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.ReceiveReward.desc)
  return _internal_mutable_desc();
}
inline const std::string& ReceiveReward::_internal_desc() const {
  return desc_.Get();
}
inline void ReceiveReward::_internal_set_desc(const std::string& value) {
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReceiveReward::set_desc(std::string&& value) {
  
  desc_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.ReceiveReward.desc)
}
inline void ReceiveReward::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.ReceiveReward.desc)
}
inline void ReceiveReward::set_desc(const char* value,
    size_t size) {
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.ReceiveReward.desc)
}
inline std::string* ReceiveReward::_internal_mutable_desc() {
  
  return desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReceiveReward::release_desc() {
  // @@protoc_insertion_point(field_release:PlaneWar.ReceiveReward.desc)
  return desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReceiveReward::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.ReceiveReward.desc)
}

// int32 timeLimit = 9;
inline void ReceiveReward::clear_timelimit() {
  timelimit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReceiveReward::_internal_timelimit() const {
  return timelimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReceiveReward::timelimit() const {
  // @@protoc_insertion_point(field_get:PlaneWar.ReceiveReward.timeLimit)
  return _internal_timelimit();
}
inline void ReceiveReward::_internal_set_timelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timelimit_ = value;
}
inline void ReceiveReward::set_timelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timelimit(value);
  // @@protoc_insertion_point(field_set:PlaneWar.ReceiveReward.timeLimit)
}

// string title = 10;
inline void ReceiveReward::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& ReceiveReward::title() const {
  // @@protoc_insertion_point(field_get:PlaneWar.ReceiveReward.title)
  return _internal_title();
}
inline void ReceiveReward::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:PlaneWar.ReceiveReward.title)
}
inline std::string* ReceiveReward::mutable_title() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.ReceiveReward.title)
  return _internal_mutable_title();
}
inline const std::string& ReceiveReward::_internal_title() const {
  return title_.Get();
}
inline void ReceiveReward::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReceiveReward::set_title(std::string&& value) {
  
  title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.ReceiveReward.title)
}
inline void ReceiveReward::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.ReceiveReward.title)
}
inline void ReceiveReward::set_title(const char* value,
    size_t size) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.ReceiveReward.title)
}
inline std::string* ReceiveReward::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReceiveReward::release_title() {
  // @@protoc_insertion_point(field_release:PlaneWar.ReceiveReward.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReceiveReward::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.ReceiveReward.title)
}

// int32 propType = 11;
inline void ReceiveReward::clear_proptype() {
  proptype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReceiveReward::_internal_proptype() const {
  return proptype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReceiveReward::proptype() const {
  // @@protoc_insertion_point(field_get:PlaneWar.ReceiveReward.propType)
  return _internal_proptype();
}
inline void ReceiveReward::_internal_set_proptype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  proptype_ = value;
}
inline void ReceiveReward::set_proptype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_proptype(value);
  // @@protoc_insertion_point(field_set:PlaneWar.ReceiveReward.propType)
}

// int32 special = 12;
inline void ReceiveReward::clear_special() {
  special_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReceiveReward::_internal_special() const {
  return special_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReceiveReward::special() const {
  // @@protoc_insertion_point(field_get:PlaneWar.ReceiveReward.special)
  return _internal_special();
}
inline void ReceiveReward::_internal_set_special(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  special_ = value;
}
inline void ReceiveReward::set_special(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_special(value);
  // @@protoc_insertion_point(field_set:PlaneWar.ReceiveReward.special)
}

// -------------------------------------------------------------------

// CSReceiveGradeReward

// -------------------------------------------------------------------

// SCReceiveGradeReward

// repeated .PlaneWar.ReceiveReward receiveRewardList = 1;
inline int SCReceiveGradeReward::_internal_receiverewardlist_size() const {
  return receiverewardlist_.size();
}
inline int SCReceiveGradeReward::receiverewardlist_size() const {
  return _internal_receiverewardlist_size();
}
inline void SCReceiveGradeReward::clear_receiverewardlist() {
  receiverewardlist_.Clear();
}
inline ::PlaneWar::ReceiveReward* SCReceiveGradeReward::mutable_receiverewardlist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCReceiveGradeReward.receiveRewardList)
  return receiverewardlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ReceiveReward >*
SCReceiveGradeReward::mutable_receiverewardlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCReceiveGradeReward.receiveRewardList)
  return &receiverewardlist_;
}
inline const ::PlaneWar::ReceiveReward& SCReceiveGradeReward::_internal_receiverewardlist(int index) const {
  return receiverewardlist_.Get(index);
}
inline const ::PlaneWar::ReceiveReward& SCReceiveGradeReward::receiverewardlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCReceiveGradeReward.receiveRewardList)
  return _internal_receiverewardlist(index);
}
inline ::PlaneWar::ReceiveReward* SCReceiveGradeReward::_internal_add_receiverewardlist() {
  return receiverewardlist_.Add();
}
inline ::PlaneWar::ReceiveReward* SCReceiveGradeReward::add_receiverewardlist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCReceiveGradeReward.receiveRewardList)
  return _internal_add_receiverewardlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ReceiveReward >&
SCReceiveGradeReward::receiverewardlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCReceiveGradeReward.receiveRewardList)
  return receiverewardlist_;
}

// repeated .PlaneWar.ReceiveReward unReceiveRewardList = 2;
inline int SCReceiveGradeReward::_internal_unreceiverewardlist_size() const {
  return unreceiverewardlist_.size();
}
inline int SCReceiveGradeReward::unreceiverewardlist_size() const {
  return _internal_unreceiverewardlist_size();
}
inline void SCReceiveGradeReward::clear_unreceiverewardlist() {
  unreceiverewardlist_.Clear();
}
inline ::PlaneWar::ReceiveReward* SCReceiveGradeReward::mutable_unreceiverewardlist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCReceiveGradeReward.unReceiveRewardList)
  return unreceiverewardlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ReceiveReward >*
SCReceiveGradeReward::mutable_unreceiverewardlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCReceiveGradeReward.unReceiveRewardList)
  return &unreceiverewardlist_;
}
inline const ::PlaneWar::ReceiveReward& SCReceiveGradeReward::_internal_unreceiverewardlist(int index) const {
  return unreceiverewardlist_.Get(index);
}
inline const ::PlaneWar::ReceiveReward& SCReceiveGradeReward::unreceiverewardlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCReceiveGradeReward.unReceiveRewardList)
  return _internal_unreceiverewardlist(index);
}
inline ::PlaneWar::ReceiveReward* SCReceiveGradeReward::_internal_add_unreceiverewardlist() {
  return unreceiverewardlist_.Add();
}
inline ::PlaneWar::ReceiveReward* SCReceiveGradeReward::add_unreceiverewardlist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCReceiveGradeReward.unReceiveRewardList)
  return _internal_add_unreceiverewardlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ReceiveReward >&
SCReceiveGradeReward::unreceiverewardlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCReceiveGradeReward.unReceiveRewardList)
  return unreceiverewardlist_;
}

// bool seasonEnd = 3;
inline void SCReceiveGradeReward::clear_seasonend() {
  seasonend_ = false;
}
inline bool SCReceiveGradeReward::_internal_seasonend() const {
  return seasonend_;
}
inline bool SCReceiveGradeReward::seasonend() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCReceiveGradeReward.seasonEnd)
  return _internal_seasonend();
}
inline void SCReceiveGradeReward::_internal_set_seasonend(bool value) {
  
  seasonend_ = value;
}
inline void SCReceiveGradeReward::set_seasonend(bool value) {
  _internal_set_seasonend(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCReceiveGradeReward.seasonEnd)
}

// -------------------------------------------------------------------

// GradeRewardDetail

// .PlaneWar.ReceiveReward rewardInfo = 1;
inline bool GradeRewardDetail::_internal_has_rewardinfo() const {
  return this != internal_default_instance() && rewardinfo_ != nullptr;
}
inline bool GradeRewardDetail::has_rewardinfo() const {
  return _internal_has_rewardinfo();
}
inline void GradeRewardDetail::clear_rewardinfo() {
  if (GetArena() == nullptr && rewardinfo_ != nullptr) {
    delete rewardinfo_;
  }
  rewardinfo_ = nullptr;
}
inline const ::PlaneWar::ReceiveReward& GradeRewardDetail::_internal_rewardinfo() const {
  const ::PlaneWar::ReceiveReward* p = rewardinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::ReceiveReward&>(
      ::PlaneWar::_ReceiveReward_default_instance_);
}
inline const ::PlaneWar::ReceiveReward& GradeRewardDetail::rewardinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GradeRewardDetail.rewardInfo)
  return _internal_rewardinfo();
}
inline void GradeRewardDetail::unsafe_arena_set_allocated_rewardinfo(
    ::PlaneWar::ReceiveReward* rewardinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rewardinfo_);
  }
  rewardinfo_ = rewardinfo;
  if (rewardinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.GradeRewardDetail.rewardInfo)
}
inline ::PlaneWar::ReceiveReward* GradeRewardDetail::release_rewardinfo() {
  
  ::PlaneWar::ReceiveReward* temp = rewardinfo_;
  rewardinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::ReceiveReward* GradeRewardDetail::unsafe_arena_release_rewardinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.GradeRewardDetail.rewardInfo)
  
  ::PlaneWar::ReceiveReward* temp = rewardinfo_;
  rewardinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::ReceiveReward* GradeRewardDetail::_internal_mutable_rewardinfo() {
  
  if (rewardinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::ReceiveReward>(GetArena());
    rewardinfo_ = p;
  }
  return rewardinfo_;
}
inline ::PlaneWar::ReceiveReward* GradeRewardDetail::mutable_rewardinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.GradeRewardDetail.rewardInfo)
  return _internal_mutable_rewardinfo();
}
inline void GradeRewardDetail::set_allocated_rewardinfo(::PlaneWar::ReceiveReward* rewardinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rewardinfo_;
  }
  if (rewardinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rewardinfo);
    if (message_arena != submessage_arena) {
      rewardinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rewardinfo, submessage_arena);
    }
    
  } else {
    
  }
  rewardinfo_ = rewardinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.GradeRewardDetail.rewardInfo)
}

// bool reach = 2;
inline void GradeRewardDetail::clear_reach() {
  reach_ = false;
}
inline bool GradeRewardDetail::_internal_reach() const {
  return reach_;
}
inline bool GradeRewardDetail::reach() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GradeRewardDetail.reach)
  return _internal_reach();
}
inline void GradeRewardDetail::_internal_set_reach(bool value) {
  
  reach_ = value;
}
inline void GradeRewardDetail::set_reach(bool value) {
  _internal_set_reach(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GradeRewardDetail.reach)
}

// bool receive = 3;
inline void GradeRewardDetail::clear_receive() {
  receive_ = false;
}
inline bool GradeRewardDetail::_internal_receive() const {
  return receive_;
}
inline bool GradeRewardDetail::receive() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GradeRewardDetail.receive)
  return _internal_receive();
}
inline void GradeRewardDetail::_internal_set_receive(bool value) {
  
  receive_ = value;
}
inline void GradeRewardDetail::set_receive(bool value) {
  _internal_set_receive(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GradeRewardDetail.receive)
}

// -------------------------------------------------------------------

// GradeRewardInfo

// string rankName = 1;
inline void GradeRewardInfo::clear_rankname() {
  rankname_.ClearToEmpty();
}
inline const std::string& GradeRewardInfo::rankname() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GradeRewardInfo.rankName)
  return _internal_rankname();
}
inline void GradeRewardInfo::set_rankname(const std::string& value) {
  _internal_set_rankname(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GradeRewardInfo.rankName)
}
inline std::string* GradeRewardInfo::mutable_rankname() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.GradeRewardInfo.rankName)
  return _internal_mutable_rankname();
}
inline const std::string& GradeRewardInfo::_internal_rankname() const {
  return rankname_.Get();
}
inline void GradeRewardInfo::_internal_set_rankname(const std::string& value) {
  
  rankname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GradeRewardInfo::set_rankname(std::string&& value) {
  
  rankname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.GradeRewardInfo.rankName)
}
inline void GradeRewardInfo::set_rankname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rankname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.GradeRewardInfo.rankName)
}
inline void GradeRewardInfo::set_rankname(const char* value,
    size_t size) {
  
  rankname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.GradeRewardInfo.rankName)
}
inline std::string* GradeRewardInfo::_internal_mutable_rankname() {
  
  return rankname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GradeRewardInfo::release_rankname() {
  // @@protoc_insertion_point(field_release:PlaneWar.GradeRewardInfo.rankName)
  return rankname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GradeRewardInfo::set_allocated_rankname(std::string* rankname) {
  if (rankname != nullptr) {
    
  } else {
    
  }
  rankname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rankname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.GradeRewardInfo.rankName)
}

// repeated .PlaneWar.GradeRewardDetail commRewardList = 2;
inline int GradeRewardInfo::_internal_commrewardlist_size() const {
  return commrewardlist_.size();
}
inline int GradeRewardInfo::commrewardlist_size() const {
  return _internal_commrewardlist_size();
}
inline void GradeRewardInfo::clear_commrewardlist() {
  commrewardlist_.Clear();
}
inline ::PlaneWar::GradeRewardDetail* GradeRewardInfo::mutable_commrewardlist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.GradeRewardInfo.commRewardList)
  return commrewardlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GradeRewardDetail >*
GradeRewardInfo::mutable_commrewardlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.GradeRewardInfo.commRewardList)
  return &commrewardlist_;
}
inline const ::PlaneWar::GradeRewardDetail& GradeRewardInfo::_internal_commrewardlist(int index) const {
  return commrewardlist_.Get(index);
}
inline const ::PlaneWar::GradeRewardDetail& GradeRewardInfo::commrewardlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.GradeRewardInfo.commRewardList)
  return _internal_commrewardlist(index);
}
inline ::PlaneWar::GradeRewardDetail* GradeRewardInfo::_internal_add_commrewardlist() {
  return commrewardlist_.Add();
}
inline ::PlaneWar::GradeRewardDetail* GradeRewardInfo::add_commrewardlist() {
  // @@protoc_insertion_point(field_add:PlaneWar.GradeRewardInfo.commRewardList)
  return _internal_add_commrewardlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GradeRewardDetail >&
GradeRewardInfo::commrewardlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.GradeRewardInfo.commRewardList)
  return commrewardlist_;
}

// repeated .PlaneWar.GradeRewardDetail advanceRewardList = 3;
inline int GradeRewardInfo::_internal_advancerewardlist_size() const {
  return advancerewardlist_.size();
}
inline int GradeRewardInfo::advancerewardlist_size() const {
  return _internal_advancerewardlist_size();
}
inline void GradeRewardInfo::clear_advancerewardlist() {
  advancerewardlist_.Clear();
}
inline ::PlaneWar::GradeRewardDetail* GradeRewardInfo::mutable_advancerewardlist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.GradeRewardInfo.advanceRewardList)
  return advancerewardlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GradeRewardDetail >*
GradeRewardInfo::mutable_advancerewardlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.GradeRewardInfo.advanceRewardList)
  return &advancerewardlist_;
}
inline const ::PlaneWar::GradeRewardDetail& GradeRewardInfo::_internal_advancerewardlist(int index) const {
  return advancerewardlist_.Get(index);
}
inline const ::PlaneWar::GradeRewardDetail& GradeRewardInfo::advancerewardlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.GradeRewardInfo.advanceRewardList)
  return _internal_advancerewardlist(index);
}
inline ::PlaneWar::GradeRewardDetail* GradeRewardInfo::_internal_add_advancerewardlist() {
  return advancerewardlist_.Add();
}
inline ::PlaneWar::GradeRewardDetail* GradeRewardInfo::add_advancerewardlist() {
  // @@protoc_insertion_point(field_add:PlaneWar.GradeRewardInfo.advanceRewardList)
  return _internal_add_advancerewardlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GradeRewardDetail >&
GradeRewardInfo::advancerewardlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.GradeRewardInfo.advanceRewardList)
  return advancerewardlist_;
}

// bool first = 4;
inline void GradeRewardInfo::clear_first() {
  first_ = false;
}
inline bool GradeRewardInfo::_internal_first() const {
  return first_;
}
inline bool GradeRewardInfo::first() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GradeRewardInfo.first)
  return _internal_first();
}
inline void GradeRewardInfo::_internal_set_first(bool value) {
  
  first_ = value;
}
inline void GradeRewardInfo::set_first(bool value) {
  _internal_set_first(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GradeRewardInfo.first)
}

// -------------------------------------------------------------------

// GradeRankInfo

// int32 currentRank = 1;
inline void GradeRankInfo::clear_currentrank() {
  currentrank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GradeRankInfo::_internal_currentrank() const {
  return currentrank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GradeRankInfo::currentrank() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GradeRankInfo.currentRank)
  return _internal_currentrank();
}
inline void GradeRankInfo::_internal_set_currentrank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  currentrank_ = value;
}
inline void GradeRankInfo::set_currentrank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_currentrank(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GradeRankInfo.currentRank)
}

// int32 star = 2;
inline void GradeRankInfo::clear_star() {
  star_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GradeRankInfo::_internal_star() const {
  return star_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GradeRankInfo::star() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GradeRankInfo.star)
  return _internal_star();
}
inline void GradeRankInfo::_internal_set_star(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  star_ = value;
}
inline void GradeRankInfo::set_star(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_star(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GradeRankInfo.star)
}

// string rankName = 3;
inline void GradeRankInfo::clear_rankname() {
  rankname_.ClearToEmpty();
}
inline const std::string& GradeRankInfo::rankname() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GradeRankInfo.rankName)
  return _internal_rankname();
}
inline void GradeRankInfo::set_rankname(const std::string& value) {
  _internal_set_rankname(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GradeRankInfo.rankName)
}
inline std::string* GradeRankInfo::mutable_rankname() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.GradeRankInfo.rankName)
  return _internal_mutable_rankname();
}
inline const std::string& GradeRankInfo::_internal_rankname() const {
  return rankname_.Get();
}
inline void GradeRankInfo::_internal_set_rankname(const std::string& value) {
  
  rankname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GradeRankInfo::set_rankname(std::string&& value) {
  
  rankname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.GradeRankInfo.rankName)
}
inline void GradeRankInfo::set_rankname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rankname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.GradeRankInfo.rankName)
}
inline void GradeRankInfo::set_rankname(const char* value,
    size_t size) {
  
  rankname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.GradeRankInfo.rankName)
}
inline std::string* GradeRankInfo::_internal_mutable_rankname() {
  
  return rankname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GradeRankInfo::release_rankname() {
  // @@protoc_insertion_point(field_release:PlaneWar.GradeRankInfo.rankName)
  return rankname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GradeRankInfo::set_allocated_rankname(std::string* rankname) {
  if (rankname != nullptr) {
    
  } else {
    
  }
  rankname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rankname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.GradeRankInfo.rankName)
}

// int32 historyRank = 4;
inline void GradeRankInfo::clear_historyrank() {
  historyrank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GradeRankInfo::_internal_historyrank() const {
  return historyrank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GradeRankInfo::historyrank() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GradeRankInfo.historyRank)
  return _internal_historyrank();
}
inline void GradeRankInfo::_internal_set_historyrank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  historyrank_ = value;
}
inline void GradeRankInfo::set_historyrank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_historyrank(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GradeRankInfo.historyRank)
}

// string historyRankName = 5;
inline void GradeRankInfo::clear_historyrankname() {
  historyrankname_.ClearToEmpty();
}
inline const std::string& GradeRankInfo::historyrankname() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GradeRankInfo.historyRankName)
  return _internal_historyrankname();
}
inline void GradeRankInfo::set_historyrankname(const std::string& value) {
  _internal_set_historyrankname(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GradeRankInfo.historyRankName)
}
inline std::string* GradeRankInfo::mutable_historyrankname() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.GradeRankInfo.historyRankName)
  return _internal_mutable_historyrankname();
}
inline const std::string& GradeRankInfo::_internal_historyrankname() const {
  return historyrankname_.Get();
}
inline void GradeRankInfo::_internal_set_historyrankname(const std::string& value) {
  
  historyrankname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GradeRankInfo::set_historyrankname(std::string&& value) {
  
  historyrankname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.GradeRankInfo.historyRankName)
}
inline void GradeRankInfo::set_historyrankname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  historyrankname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.GradeRankInfo.historyRankName)
}
inline void GradeRankInfo::set_historyrankname(const char* value,
    size_t size) {
  
  historyrankname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.GradeRankInfo.historyRankName)
}
inline std::string* GradeRankInfo::_internal_mutable_historyrankname() {
  
  return historyrankname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GradeRankInfo::release_historyrankname() {
  // @@protoc_insertion_point(field_release:PlaneWar.GradeRankInfo.historyRankName)
  return historyrankname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GradeRankInfo::set_allocated_historyrankname(std::string* historyrankname) {
  if (historyrankname != nullptr) {
    
  } else {
    
  }
  historyrankname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), historyrankname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.GradeRankInfo.historyRankName)
}

// int32 kingTag = 6;
inline void GradeRankInfo::clear_kingtag() {
  kingtag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GradeRankInfo::_internal_kingtag() const {
  return kingtag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GradeRankInfo::kingtag() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GradeRankInfo.kingTag)
  return _internal_kingtag();
}
inline void GradeRankInfo::_internal_set_kingtag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  kingtag_ = value;
}
inline void GradeRankInfo::set_kingtag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_kingtag(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GradeRankInfo.kingTag)
}

// float currentExp = 7;
inline void GradeRankInfo::clear_currentexp() {
  currentexp_ = 0;
}
inline float GradeRankInfo::_internal_currentexp() const {
  return currentexp_;
}
inline float GradeRankInfo::currentexp() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GradeRankInfo.currentExp)
  return _internal_currentexp();
}
inline void GradeRankInfo::_internal_set_currentexp(float value) {
  
  currentexp_ = value;
}
inline void GradeRankInfo::set_currentexp(float value) {
  _internal_set_currentexp(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GradeRankInfo.currentExp)
}

// float nextExp = 8;
inline void GradeRankInfo::clear_nextexp() {
  nextexp_ = 0;
}
inline float GradeRankInfo::_internal_nextexp() const {
  return nextexp_;
}
inline float GradeRankInfo::nextexp() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GradeRankInfo.nextExp)
  return _internal_nextexp();
}
inline void GradeRankInfo::_internal_set_nextexp(float value) {
  
  nextexp_ = value;
}
inline void GradeRankInfo::set_nextexp(float value) {
  _internal_set_nextexp(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GradeRankInfo.nextExp)
}

// float extraExp = 9;
inline void GradeRankInfo::clear_extraexp() {
  extraexp_ = 0;
}
inline float GradeRankInfo::_internal_extraexp() const {
  return extraexp_;
}
inline float GradeRankInfo::extraexp() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GradeRankInfo.extraExp)
  return _internal_extraexp();
}
inline void GradeRankInfo::_internal_set_extraexp(float value) {
  
  extraexp_ = value;
}
inline void GradeRankInfo::set_extraexp(float value) {
  _internal_set_extraexp(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GradeRankInfo.extraExp)
}

// string playerName = 10;
inline void GradeRankInfo::clear_playername() {
  playername_.ClearToEmpty();
}
inline const std::string& GradeRankInfo::playername() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GradeRankInfo.playerName)
  return _internal_playername();
}
inline void GradeRankInfo::set_playername(const std::string& value) {
  _internal_set_playername(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GradeRankInfo.playerName)
}
inline std::string* GradeRankInfo::mutable_playername() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.GradeRankInfo.playerName)
  return _internal_mutable_playername();
}
inline const std::string& GradeRankInfo::_internal_playername() const {
  return playername_.Get();
}
inline void GradeRankInfo::_internal_set_playername(const std::string& value) {
  
  playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GradeRankInfo::set_playername(std::string&& value) {
  
  playername_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.GradeRankInfo.playerName)
}
inline void GradeRankInfo::set_playername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.GradeRankInfo.playerName)
}
inline void GradeRankInfo::set_playername(const char* value,
    size_t size) {
  
  playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.GradeRankInfo.playerName)
}
inline std::string* GradeRankInfo::_internal_mutable_playername() {
  
  return playername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GradeRankInfo::release_playername() {
  // @@protoc_insertion_point(field_release:PlaneWar.GradeRankInfo.playerName)
  return playername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GradeRankInfo::set_allocated_playername(std::string* playername) {
  if (playername != nullptr) {
    
  } else {
    
  }
  playername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.GradeRankInfo.playerName)
}

// int32 availableGift = 11;
inline void GradeRankInfo::clear_availablegift() {
  availablegift_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GradeRankInfo::_internal_availablegift() const {
  return availablegift_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GradeRankInfo::availablegift() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GradeRankInfo.availableGift)
  return _internal_availablegift();
}
inline void GradeRankInfo::_internal_set_availablegift(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  availablegift_ = value;
}
inline void GradeRankInfo::set_availablegift(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_availablegift(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GradeRankInfo.availableGift)
}

// bool isLast = 12;
inline void GradeRankInfo::clear_islast() {
  islast_ = false;
}
inline bool GradeRankInfo::_internal_islast() const {
  return islast_;
}
inline bool GradeRankInfo::islast() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GradeRankInfo.isLast)
  return _internal_islast();
}
inline void GradeRankInfo::_internal_set_islast(bool value) {
  
  islast_ = value;
}
inline void GradeRankInfo::set_islast(bool value) {
  _internal_set_islast(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GradeRankInfo.isLast)
}

// bool isSelf = 13;
inline void GradeRankInfo::clear_isself() {
  isself_ = false;
}
inline bool GradeRankInfo::_internal_isself() const {
  return isself_;
}
inline bool GradeRankInfo::isself() const {
  // @@protoc_insertion_point(field_get:PlaneWar.GradeRankInfo.isSelf)
  return _internal_isself();
}
inline void GradeRankInfo::_internal_set_isself(bool value) {
  
  isself_ = value;
}
inline void GradeRankInfo::set_isself(bool value) {
  _internal_set_isself(value);
  // @@protoc_insertion_point(field_set:PlaneWar.GradeRankInfo.isSelf)
}

// -------------------------------------------------------------------

// CSGetTableUserInfo

// int32 chairId = 1;
inline void CSGetTableUserInfo::clear_chairid() {
  chairid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSGetTableUserInfo::_internal_chairid() const {
  return chairid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSGetTableUserInfo::chairid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSGetTableUserInfo.chairId)
  return _internal_chairid();
}
inline void CSGetTableUserInfo::_internal_set_chairid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chairid_ = value;
}
inline void CSGetTableUserInfo::set_chairid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chairid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSGetTableUserInfo.chairId)
}

// -------------------------------------------------------------------

// SCGetTableUserInfo

// .PlaneWar.PlayerInfo playerInfo = 1;
inline bool SCGetTableUserInfo::_internal_has_playerinfo() const {
  return this != internal_default_instance() && playerinfo_ != nullptr;
}
inline bool SCGetTableUserInfo::has_playerinfo() const {
  return _internal_has_playerinfo();
}
inline void SCGetTableUserInfo::clear_playerinfo() {
  if (GetArena() == nullptr && playerinfo_ != nullptr) {
    delete playerinfo_;
  }
  playerinfo_ = nullptr;
}
inline const ::PlaneWar::PlayerInfo& SCGetTableUserInfo::_internal_playerinfo() const {
  const ::PlaneWar::PlayerInfo* p = playerinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::PlayerInfo&>(
      ::PlaneWar::_PlayerInfo_default_instance_);
}
inline const ::PlaneWar::PlayerInfo& SCGetTableUserInfo::playerinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetTableUserInfo.playerInfo)
  return _internal_playerinfo();
}
inline void SCGetTableUserInfo::unsafe_arena_set_allocated_playerinfo(
    ::PlaneWar::PlayerInfo* playerinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerinfo_);
  }
  playerinfo_ = playerinfo;
  if (playerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCGetTableUserInfo.playerInfo)
}
inline ::PlaneWar::PlayerInfo* SCGetTableUserInfo::release_playerinfo() {
  
  ::PlaneWar::PlayerInfo* temp = playerinfo_;
  playerinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::PlayerInfo* SCGetTableUserInfo::unsafe_arena_release_playerinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCGetTableUserInfo.playerInfo)
  
  ::PlaneWar::PlayerInfo* temp = playerinfo_;
  playerinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::PlayerInfo* SCGetTableUserInfo::_internal_mutable_playerinfo() {
  
  if (playerinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::PlayerInfo>(GetArena());
    playerinfo_ = p;
  }
  return playerinfo_;
}
inline ::PlaneWar::PlayerInfo* SCGetTableUserInfo::mutable_playerinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCGetTableUserInfo.playerInfo)
  return _internal_mutable_playerinfo();
}
inline void SCGetTableUserInfo::set_allocated_playerinfo(::PlaneWar::PlayerInfo* playerinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete playerinfo_;
  }
  if (playerinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(playerinfo);
    if (message_arena != submessage_arena) {
      playerinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerinfo, submessage_arena);
    }
    
  } else {
    
  }
  playerinfo_ = playerinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCGetTableUserInfo.playerInfo)
}

// .PlaneWar.GradeRankInfo gradeRankInfo = 2;
inline bool SCGetTableUserInfo::_internal_has_graderankinfo() const {
  return this != internal_default_instance() && graderankinfo_ != nullptr;
}
inline bool SCGetTableUserInfo::has_graderankinfo() const {
  return _internal_has_graderankinfo();
}
inline void SCGetTableUserInfo::clear_graderankinfo() {
  if (GetArena() == nullptr && graderankinfo_ != nullptr) {
    delete graderankinfo_;
  }
  graderankinfo_ = nullptr;
}
inline const ::PlaneWar::GradeRankInfo& SCGetTableUserInfo::_internal_graderankinfo() const {
  const ::PlaneWar::GradeRankInfo* p = graderankinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::GradeRankInfo&>(
      ::PlaneWar::_GradeRankInfo_default_instance_);
}
inline const ::PlaneWar::GradeRankInfo& SCGetTableUserInfo::graderankinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetTableUserInfo.gradeRankInfo)
  return _internal_graderankinfo();
}
inline void SCGetTableUserInfo::unsafe_arena_set_allocated_graderankinfo(
    ::PlaneWar::GradeRankInfo* graderankinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graderankinfo_);
  }
  graderankinfo_ = graderankinfo;
  if (graderankinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCGetTableUserInfo.gradeRankInfo)
}
inline ::PlaneWar::GradeRankInfo* SCGetTableUserInfo::release_graderankinfo() {
  
  ::PlaneWar::GradeRankInfo* temp = graderankinfo_;
  graderankinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::GradeRankInfo* SCGetTableUserInfo::unsafe_arena_release_graderankinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCGetTableUserInfo.gradeRankInfo)
  
  ::PlaneWar::GradeRankInfo* temp = graderankinfo_;
  graderankinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::GradeRankInfo* SCGetTableUserInfo::_internal_mutable_graderankinfo() {
  
  if (graderankinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::GradeRankInfo>(GetArena());
    graderankinfo_ = p;
  }
  return graderankinfo_;
}
inline ::PlaneWar::GradeRankInfo* SCGetTableUserInfo::mutable_graderankinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCGetTableUserInfo.gradeRankInfo)
  return _internal_mutable_graderankinfo();
}
inline void SCGetTableUserInfo::set_allocated_graderankinfo(::PlaneWar::GradeRankInfo* graderankinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete graderankinfo_;
  }
  if (graderankinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(graderankinfo);
    if (message_arena != submessage_arena) {
      graderankinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graderankinfo, submessage_arena);
    }
    
  } else {
    
  }
  graderankinfo_ = graderankinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCGetTableUserInfo.gradeRankInfo)
}

// -------------------------------------------------------------------

// CSGetGradeRewardInfo

// int32 startIdx = 1;
inline void CSGetGradeRewardInfo::clear_startidx() {
  startidx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSGetGradeRewardInfo::_internal_startidx() const {
  return startidx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSGetGradeRewardInfo::startidx() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSGetGradeRewardInfo.startIdx)
  return _internal_startidx();
}
inline void CSGetGradeRewardInfo::_internal_set_startidx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  startidx_ = value;
}
inline void CSGetGradeRewardInfo::set_startidx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_startidx(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSGetGradeRewardInfo.startIdx)
}

// int32 endIdx = 2;
inline void CSGetGradeRewardInfo::clear_endidx() {
  endidx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSGetGradeRewardInfo::_internal_endidx() const {
  return endidx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSGetGradeRewardInfo::endidx() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSGetGradeRewardInfo.endIdx)
  return _internal_endidx();
}
inline void CSGetGradeRewardInfo::_internal_set_endidx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  endidx_ = value;
}
inline void CSGetGradeRewardInfo::set_endidx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_endidx(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSGetGradeRewardInfo.endIdx)
}

// -------------------------------------------------------------------

// SCGetGradeRewardInfo

// repeated .PlaneWar.GradeRewardInfo gradeRewardInfoList = 1;
inline int SCGetGradeRewardInfo::_internal_graderewardinfolist_size() const {
  return graderewardinfolist_.size();
}
inline int SCGetGradeRewardInfo::graderewardinfolist_size() const {
  return _internal_graderewardinfolist_size();
}
inline void SCGetGradeRewardInfo::clear_graderewardinfolist() {
  graderewardinfolist_.Clear();
}
inline ::PlaneWar::GradeRewardInfo* SCGetGradeRewardInfo::mutable_graderewardinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCGetGradeRewardInfo.gradeRewardInfoList)
  return graderewardinfolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GradeRewardInfo >*
SCGetGradeRewardInfo::mutable_graderewardinfolist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCGetGradeRewardInfo.gradeRewardInfoList)
  return &graderewardinfolist_;
}
inline const ::PlaneWar::GradeRewardInfo& SCGetGradeRewardInfo::_internal_graderewardinfolist(int index) const {
  return graderewardinfolist_.Get(index);
}
inline const ::PlaneWar::GradeRewardInfo& SCGetGradeRewardInfo::graderewardinfolist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetGradeRewardInfo.gradeRewardInfoList)
  return _internal_graderewardinfolist(index);
}
inline ::PlaneWar::GradeRewardInfo* SCGetGradeRewardInfo::_internal_add_graderewardinfolist() {
  return graderewardinfolist_.Add();
}
inline ::PlaneWar::GradeRewardInfo* SCGetGradeRewardInfo::add_graderewardinfolist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCGetGradeRewardInfo.gradeRewardInfoList)
  return _internal_add_graderewardinfolist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GradeRewardInfo >&
SCGetGradeRewardInfo::graderewardinfolist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCGetGradeRewardInfo.gradeRewardInfoList)
  return graderewardinfolist_;
}

// -------------------------------------------------------------------

// CSGetGradeRankInfo

// -------------------------------------------------------------------

// SCGetGradeRankInfo

// .PlaneWar.GradeRankInfo gradeRankInfo = 1;
inline bool SCGetGradeRankInfo::_internal_has_graderankinfo() const {
  return this != internal_default_instance() && graderankinfo_ != nullptr;
}
inline bool SCGetGradeRankInfo::has_graderankinfo() const {
  return _internal_has_graderankinfo();
}
inline void SCGetGradeRankInfo::clear_graderankinfo() {
  if (GetArena() == nullptr && graderankinfo_ != nullptr) {
    delete graderankinfo_;
  }
  graderankinfo_ = nullptr;
}
inline const ::PlaneWar::GradeRankInfo& SCGetGradeRankInfo::_internal_graderankinfo() const {
  const ::PlaneWar::GradeRankInfo* p = graderankinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::GradeRankInfo&>(
      ::PlaneWar::_GradeRankInfo_default_instance_);
}
inline const ::PlaneWar::GradeRankInfo& SCGetGradeRankInfo::graderankinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetGradeRankInfo.gradeRankInfo)
  return _internal_graderankinfo();
}
inline void SCGetGradeRankInfo::unsafe_arena_set_allocated_graderankinfo(
    ::PlaneWar::GradeRankInfo* graderankinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graderankinfo_);
  }
  graderankinfo_ = graderankinfo;
  if (graderankinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCGetGradeRankInfo.gradeRankInfo)
}
inline ::PlaneWar::GradeRankInfo* SCGetGradeRankInfo::release_graderankinfo() {
  
  ::PlaneWar::GradeRankInfo* temp = graderankinfo_;
  graderankinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::GradeRankInfo* SCGetGradeRankInfo::unsafe_arena_release_graderankinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCGetGradeRankInfo.gradeRankInfo)
  
  ::PlaneWar::GradeRankInfo* temp = graderankinfo_;
  graderankinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::GradeRankInfo* SCGetGradeRankInfo::_internal_mutable_graderankinfo() {
  
  if (graderankinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::GradeRankInfo>(GetArena());
    graderankinfo_ = p;
  }
  return graderankinfo_;
}
inline ::PlaneWar::GradeRankInfo* SCGetGradeRankInfo::mutable_graderankinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCGetGradeRankInfo.gradeRankInfo)
  return _internal_mutable_graderankinfo();
}
inline void SCGetGradeRankInfo::set_allocated_graderankinfo(::PlaneWar::GradeRankInfo* graderankinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete graderankinfo_;
  }
  if (graderankinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(graderankinfo);
    if (message_arena != submessage_arena) {
      graderankinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graderankinfo, submessage_arena);
    }
    
  } else {
    
  }
  graderankinfo_ = graderankinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCGetGradeRankInfo.gradeRankInfo)
}

// -------------------------------------------------------------------

// SCRankUpgrade

// .PlaneWar.GradeRankInfo gradeRankInfo = 1;
inline bool SCRankUpgrade::_internal_has_graderankinfo() const {
  return this != internal_default_instance() && graderankinfo_ != nullptr;
}
inline bool SCRankUpgrade::has_graderankinfo() const {
  return _internal_has_graderankinfo();
}
inline void SCRankUpgrade::clear_graderankinfo() {
  if (GetArena() == nullptr && graderankinfo_ != nullptr) {
    delete graderankinfo_;
  }
  graderankinfo_ = nullptr;
}
inline const ::PlaneWar::GradeRankInfo& SCRankUpgrade::_internal_graderankinfo() const {
  const ::PlaneWar::GradeRankInfo* p = graderankinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::GradeRankInfo&>(
      ::PlaneWar::_GradeRankInfo_default_instance_);
}
inline const ::PlaneWar::GradeRankInfo& SCRankUpgrade::graderankinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCRankUpgrade.gradeRankInfo)
  return _internal_graderankinfo();
}
inline void SCRankUpgrade::unsafe_arena_set_allocated_graderankinfo(
    ::PlaneWar::GradeRankInfo* graderankinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graderankinfo_);
  }
  graderankinfo_ = graderankinfo;
  if (graderankinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCRankUpgrade.gradeRankInfo)
}
inline ::PlaneWar::GradeRankInfo* SCRankUpgrade::release_graderankinfo() {
  
  ::PlaneWar::GradeRankInfo* temp = graderankinfo_;
  graderankinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::GradeRankInfo* SCRankUpgrade::unsafe_arena_release_graderankinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCRankUpgrade.gradeRankInfo)
  
  ::PlaneWar::GradeRankInfo* temp = graderankinfo_;
  graderankinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::GradeRankInfo* SCRankUpgrade::_internal_mutable_graderankinfo() {
  
  if (graderankinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::GradeRankInfo>(GetArena());
    graderankinfo_ = p;
  }
  return graderankinfo_;
}
inline ::PlaneWar::GradeRankInfo* SCRankUpgrade::mutable_graderankinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCRankUpgrade.gradeRankInfo)
  return _internal_mutable_graderankinfo();
}
inline void SCRankUpgrade::set_allocated_graderankinfo(::PlaneWar::GradeRankInfo* graderankinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete graderankinfo_;
  }
  if (graderankinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(graderankinfo);
    if (message_arena != submessage_arena) {
      graderankinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graderankinfo, submessage_arena);
    }
    
  } else {
    
  }
  graderankinfo_ = graderankinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCRankUpgrade.gradeRankInfo)
}

// bool advance = 2;
inline void SCRankUpgrade::clear_advance() {
  advance_ = false;
}
inline bool SCRankUpgrade::_internal_advance() const {
  return advance_;
}
inline bool SCRankUpgrade::advance() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCRankUpgrade.advance)
  return _internal_advance();
}
inline void SCRankUpgrade::_internal_set_advance(bool value) {
  
  advance_ = value;
}
inline void SCRankUpgrade::set_advance(bool value) {
  _internal_set_advance(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCRankUpgrade.advance)
}

// int32 chair = 3;
inline void SCRankUpgrade::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRankUpgrade::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRankUpgrade::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCRankUpgrade.chair)
  return _internal_chair();
}
inline void SCRankUpgrade::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCRankUpgrade::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCRankUpgrade.chair)
}

// -------------------------------------------------------------------

// CSRankSeasonStatus

// -------------------------------------------------------------------

// SCRankSeasonStatus

// bool enable = 1;
inline void SCRankSeasonStatus::clear_enable() {
  enable_ = false;
}
inline bool SCRankSeasonStatus::_internal_enable() const {
  return enable_;
}
inline bool SCRankSeasonStatus::enable() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCRankSeasonStatus.enable)
  return _internal_enable();
}
inline void SCRankSeasonStatus::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void SCRankSeasonStatus::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCRankSeasonStatus.enable)
}

// int32 startTime = 2;
inline void SCRankSeasonStatus::clear_starttime() {
  starttime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRankSeasonStatus::_internal_starttime() const {
  return starttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRankSeasonStatus::starttime() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCRankSeasonStatus.startTime)
  return _internal_starttime();
}
inline void SCRankSeasonStatus::_internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  starttime_ = value;
}
inline void SCRankSeasonStatus::set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCRankSeasonStatus.startTime)
}

// int32 endTime = 3;
inline void SCRankSeasonStatus::clear_endtime() {
  endtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRankSeasonStatus::_internal_endtime() const {
  return endtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRankSeasonStatus::endtime() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCRankSeasonStatus.endTime)
  return _internal_endtime();
}
inline void SCRankSeasonStatus::_internal_set_endtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  endtime_ = value;
}
inline void SCRankSeasonStatus::set_endtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCRankSeasonStatus.endTime)
}

// string seasonName = 4;
inline void SCRankSeasonStatus::clear_seasonname() {
  seasonname_.ClearToEmpty();
}
inline const std::string& SCRankSeasonStatus::seasonname() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCRankSeasonStatus.seasonName)
  return _internal_seasonname();
}
inline void SCRankSeasonStatus::set_seasonname(const std::string& value) {
  _internal_set_seasonname(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCRankSeasonStatus.seasonName)
}
inline std::string* SCRankSeasonStatus::mutable_seasonname() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCRankSeasonStatus.seasonName)
  return _internal_mutable_seasonname();
}
inline const std::string& SCRankSeasonStatus::_internal_seasonname() const {
  return seasonname_.Get();
}
inline void SCRankSeasonStatus::_internal_set_seasonname(const std::string& value) {
  
  seasonname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SCRankSeasonStatus::set_seasonname(std::string&& value) {
  
  seasonname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.SCRankSeasonStatus.seasonName)
}
inline void SCRankSeasonStatus::set_seasonname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  seasonname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.SCRankSeasonStatus.seasonName)
}
inline void SCRankSeasonStatus::set_seasonname(const char* value,
    size_t size) {
  
  seasonname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.SCRankSeasonStatus.seasonName)
}
inline std::string* SCRankSeasonStatus::_internal_mutable_seasonname() {
  
  return seasonname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SCRankSeasonStatus::release_seasonname() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCRankSeasonStatus.seasonName)
  return seasonname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SCRankSeasonStatus::set_allocated_seasonname(std::string* seasonname) {
  if (seasonname != nullptr) {
    
  } else {
    
  }
  seasonname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), seasonname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCRankSeasonStatus.seasonName)
}

// int32 season = 5;
inline void SCRankSeasonStatus::clear_season() {
  season_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRankSeasonStatus::_internal_season() const {
  return season_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRankSeasonStatus::season() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCRankSeasonStatus.season)
  return _internal_season();
}
inline void SCRankSeasonStatus::_internal_set_season(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  season_ = value;
}
inline void SCRankSeasonStatus::set_season(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_season(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCRankSeasonStatus.season)
}

// -------------------------------------------------------------------

// SCSyncTime

// int32 time = 1;
inline void SCSyncTime::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncTime::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncTime::time() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCSyncTime.time)
  return _internal_time();
}
inline void SCSyncTime::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void SCSyncTime::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCSyncTime.time)
}

// -------------------------------------------------------------------

// SCNoticePropsOverdue

// int32 propId = 1;
inline void SCNoticePropsOverdue::clear_propid() {
  propid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNoticePropsOverdue::_internal_propid() const {
  return propid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNoticePropsOverdue::propid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCNoticePropsOverdue.propId)
  return _internal_propid();
}
inline void SCNoticePropsOverdue::_internal_set_propid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  propid_ = value;
}
inline void SCNoticePropsOverdue::set_propid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_propid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCNoticePropsOverdue.propId)
}

// -------------------------------------------------------------------

// PurchaseResult

// string wareId = 1;
inline void PurchaseResult::clear_wareid() {
  wareid_.ClearToEmpty();
}
inline const std::string& PurchaseResult::wareid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PurchaseResult.wareId)
  return _internal_wareid();
}
inline void PurchaseResult::set_wareid(const std::string& value) {
  _internal_set_wareid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PurchaseResult.wareId)
}
inline std::string* PurchaseResult::mutable_wareid() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.PurchaseResult.wareId)
  return _internal_mutable_wareid();
}
inline const std::string& PurchaseResult::_internal_wareid() const {
  return wareid_.Get();
}
inline void PurchaseResult::_internal_set_wareid(const std::string& value) {
  
  wareid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PurchaseResult::set_wareid(std::string&& value) {
  
  wareid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.PurchaseResult.wareId)
}
inline void PurchaseResult::set_wareid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  wareid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.PurchaseResult.wareId)
}
inline void PurchaseResult::set_wareid(const char* value,
    size_t size) {
  
  wareid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.PurchaseResult.wareId)
}
inline std::string* PurchaseResult::_internal_mutable_wareid() {
  
  return wareid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PurchaseResult::release_wareid() {
  // @@protoc_insertion_point(field_release:PlaneWar.PurchaseResult.wareId)
  return wareid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PurchaseResult::set_allocated_wareid(std::string* wareid) {
  if (wareid != nullptr) {
    
  } else {
    
  }
  wareid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wareid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.PurchaseResult.wareId)
}

// bool status = 2;
inline void PurchaseResult::clear_status() {
  status_ = false;
}
inline bool PurchaseResult::_internal_status() const {
  return status_;
}
inline bool PurchaseResult::status() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PurchaseResult.status)
  return _internal_status();
}
inline void PurchaseResult::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void PurchaseResult::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PurchaseResult.status)
}

// -------------------------------------------------------------------

// CSQueryPackagePurchase

// repeated int32 wareIdList = 1;
inline int CSQueryPackagePurchase::_internal_wareidlist_size() const {
  return wareidlist_.size();
}
inline int CSQueryPackagePurchase::wareidlist_size() const {
  return _internal_wareidlist_size();
}
inline void CSQueryPackagePurchase::clear_wareidlist() {
  wareidlist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSQueryPackagePurchase::_internal_wareidlist(int index) const {
  return wareidlist_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSQueryPackagePurchase::wareidlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSQueryPackagePurchase.wareIdList)
  return _internal_wareidlist(index);
}
inline void CSQueryPackagePurchase::set_wareidlist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  wareidlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSQueryPackagePurchase.wareIdList)
}
inline void CSQueryPackagePurchase::_internal_add_wareidlist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  wareidlist_.Add(value);
}
inline void CSQueryPackagePurchase::add_wareidlist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_wareidlist(value);
  // @@protoc_insertion_point(field_add:PlaneWar.CSQueryPackagePurchase.wareIdList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CSQueryPackagePurchase::_internal_wareidlist() const {
  return wareidlist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CSQueryPackagePurchase::wareidlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.CSQueryPackagePurchase.wareIdList)
  return _internal_wareidlist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CSQueryPackagePurchase::_internal_mutable_wareidlist() {
  return &wareidlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CSQueryPackagePurchase::mutable_wareidlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.CSQueryPackagePurchase.wareIdList)
  return _internal_mutable_wareidlist();
}

// -------------------------------------------------------------------

// SCQueryPackagePurchase

// repeated .PlaneWar.PurchaseResult purchaseResList = 1;
inline int SCQueryPackagePurchase::_internal_purchasereslist_size() const {
  return purchasereslist_.size();
}
inline int SCQueryPackagePurchase::purchasereslist_size() const {
  return _internal_purchasereslist_size();
}
inline void SCQueryPackagePurchase::clear_purchasereslist() {
  purchasereslist_.Clear();
}
inline ::PlaneWar::PurchaseResult* SCQueryPackagePurchase::mutable_purchasereslist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCQueryPackagePurchase.purchaseResList)
  return purchasereslist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PurchaseResult >*
SCQueryPackagePurchase::mutable_purchasereslist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCQueryPackagePurchase.purchaseResList)
  return &purchasereslist_;
}
inline const ::PlaneWar::PurchaseResult& SCQueryPackagePurchase::_internal_purchasereslist(int index) const {
  return purchasereslist_.Get(index);
}
inline const ::PlaneWar::PurchaseResult& SCQueryPackagePurchase::purchasereslist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCQueryPackagePurchase.purchaseResList)
  return _internal_purchasereslist(index);
}
inline ::PlaneWar::PurchaseResult* SCQueryPackagePurchase::_internal_add_purchasereslist() {
  return purchasereslist_.Add();
}
inline ::PlaneWar::PurchaseResult* SCQueryPackagePurchase::add_purchasereslist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCQueryPackagePurchase.purchaseResList)
  return _internal_add_purchasereslist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PurchaseResult >&
SCQueryPackagePurchase::purchasereslist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCQueryPackagePurchase.purchaseResList)
  return purchasereslist_;
}

// -------------------------------------------------------------------

// PropsInfo

// int32 propId = 1;
inline void PropsInfo::clear_propid() {
  propid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PropsInfo::_internal_propid() const {
  return propid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PropsInfo::propid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PropsInfo.propId)
  return _internal_propid();
}
inline void PropsInfo::_internal_set_propid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  propid_ = value;
}
inline void PropsInfo::set_propid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_propid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PropsInfo.propId)
}

// int32 num = 2;
inline void PropsInfo::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PropsInfo::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PropsInfo::num() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PropsInfo.num)
  return _internal_num();
}
inline void PropsInfo::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void PropsInfo::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PropsInfo.num)
}

// -------------------------------------------------------------------

// SCGamePurchasePush

// repeated .PlaneWar.PropsInfo propsList = 1;
inline int SCGamePurchasePush::_internal_propslist_size() const {
  return propslist_.size();
}
inline int SCGamePurchasePush::propslist_size() const {
  return _internal_propslist_size();
}
inline void SCGamePurchasePush::clear_propslist() {
  propslist_.Clear();
}
inline ::PlaneWar::PropsInfo* SCGamePurchasePush::mutable_propslist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCGamePurchasePush.propsList)
  return propslist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PropsInfo >*
SCGamePurchasePush::mutable_propslist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCGamePurchasePush.propsList)
  return &propslist_;
}
inline const ::PlaneWar::PropsInfo& SCGamePurchasePush::_internal_propslist(int index) const {
  return propslist_.Get(index);
}
inline const ::PlaneWar::PropsInfo& SCGamePurchasePush::propslist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGamePurchasePush.propsList)
  return _internal_propslist(index);
}
inline ::PlaneWar::PropsInfo* SCGamePurchasePush::_internal_add_propslist() {
  return propslist_.Add();
}
inline ::PlaneWar::PropsInfo* SCGamePurchasePush::add_propslist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCGamePurchasePush.propsList)
  return _internal_add_propslist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PropsInfo >&
SCGamePurchasePush::propslist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCGamePurchasePush.propsList)
  return propslist_;
}

// -------------------------------------------------------------------

// PackageMarquee

// string nickname = 1;
inline void PackageMarquee::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& PackageMarquee::nickname() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PackageMarquee.nickname)
  return _internal_nickname();
}
inline void PackageMarquee::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PackageMarquee.nickname)
}
inline std::string* PackageMarquee::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.PackageMarquee.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& PackageMarquee::_internal_nickname() const {
  return nickname_.Get();
}
inline void PackageMarquee::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PackageMarquee::set_nickname(std::string&& value) {
  
  nickname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.PackageMarquee.nickname)
}
inline void PackageMarquee::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.PackageMarquee.nickname)
}
inline void PackageMarquee::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.PackageMarquee.nickname)
}
inline std::string* PackageMarquee::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PackageMarquee::release_nickname() {
  // @@protoc_insertion_point(field_release:PlaneWar.PackageMarquee.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PackageMarquee::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.PackageMarquee.nickname)
}

// string wareId = 2;
inline void PackageMarquee::clear_wareid() {
  wareid_.ClearToEmpty();
}
inline const std::string& PackageMarquee::wareid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PackageMarquee.wareId)
  return _internal_wareid();
}
inline void PackageMarquee::set_wareid(const std::string& value) {
  _internal_set_wareid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.PackageMarquee.wareId)
}
inline std::string* PackageMarquee::mutable_wareid() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.PackageMarquee.wareId)
  return _internal_mutable_wareid();
}
inline const std::string& PackageMarquee::_internal_wareid() const {
  return wareid_.Get();
}
inline void PackageMarquee::_internal_set_wareid(const std::string& value) {
  
  wareid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PackageMarquee::set_wareid(std::string&& value) {
  
  wareid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.PackageMarquee.wareId)
}
inline void PackageMarquee::set_wareid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  wareid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.PackageMarquee.wareId)
}
inline void PackageMarquee::set_wareid(const char* value,
    size_t size) {
  
  wareid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.PackageMarquee.wareId)
}
inline std::string* PackageMarquee::_internal_mutable_wareid() {
  
  return wareid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PackageMarquee::release_wareid() {
  // @@protoc_insertion_point(field_release:PlaneWar.PackageMarquee.wareId)
  return wareid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PackageMarquee::set_allocated_wareid(std::string* wareid) {
  if (wareid != nullptr) {
    
  } else {
    
  }
  wareid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wareid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.PackageMarquee.wareId)
}

// .PlaneWar.PropsInfo props = 3;
inline bool PackageMarquee::_internal_has_props() const {
  return this != internal_default_instance() && props_ != nullptr;
}
inline bool PackageMarquee::has_props() const {
  return _internal_has_props();
}
inline void PackageMarquee::clear_props() {
  if (GetArena() == nullptr && props_ != nullptr) {
    delete props_;
  }
  props_ = nullptr;
}
inline const ::PlaneWar::PropsInfo& PackageMarquee::_internal_props() const {
  const ::PlaneWar::PropsInfo* p = props_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::PropsInfo&>(
      ::PlaneWar::_PropsInfo_default_instance_);
}
inline const ::PlaneWar::PropsInfo& PackageMarquee::props() const {
  // @@protoc_insertion_point(field_get:PlaneWar.PackageMarquee.props)
  return _internal_props();
}
inline void PackageMarquee::unsafe_arena_set_allocated_props(
    ::PlaneWar::PropsInfo* props) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(props_);
  }
  props_ = props;
  if (props) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.PackageMarquee.props)
}
inline ::PlaneWar::PropsInfo* PackageMarquee::release_props() {
  
  ::PlaneWar::PropsInfo* temp = props_;
  props_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::PropsInfo* PackageMarquee::unsafe_arena_release_props() {
  // @@protoc_insertion_point(field_release:PlaneWar.PackageMarquee.props)
  
  ::PlaneWar::PropsInfo* temp = props_;
  props_ = nullptr;
  return temp;
}
inline ::PlaneWar::PropsInfo* PackageMarquee::_internal_mutable_props() {
  
  if (props_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::PropsInfo>(GetArena());
    props_ = p;
  }
  return props_;
}
inline ::PlaneWar::PropsInfo* PackageMarquee::mutable_props() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.PackageMarquee.props)
  return _internal_mutable_props();
}
inline void PackageMarquee::set_allocated_props(::PlaneWar::PropsInfo* props) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete props_;
  }
  if (props) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(props);
    if (message_arena != submessage_arena) {
      props = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, props, submessage_arena);
    }
    
  } else {
    
  }
  props_ = props;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.PackageMarquee.props)
}

// -------------------------------------------------------------------

// CSQueryPackageMarquee

// -------------------------------------------------------------------

// SCQueryPackageMarquee

// string marqueeModel = 1;
inline void SCQueryPackageMarquee::clear_marqueemodel() {
  marqueemodel_.ClearToEmpty();
}
inline const std::string& SCQueryPackageMarquee::marqueemodel() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCQueryPackageMarquee.marqueeModel)
  return _internal_marqueemodel();
}
inline void SCQueryPackageMarquee::set_marqueemodel(const std::string& value) {
  _internal_set_marqueemodel(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCQueryPackageMarquee.marqueeModel)
}
inline std::string* SCQueryPackageMarquee::mutable_marqueemodel() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCQueryPackageMarquee.marqueeModel)
  return _internal_mutable_marqueemodel();
}
inline const std::string& SCQueryPackageMarquee::_internal_marqueemodel() const {
  return marqueemodel_.Get();
}
inline void SCQueryPackageMarquee::_internal_set_marqueemodel(const std::string& value) {
  
  marqueemodel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SCQueryPackageMarquee::set_marqueemodel(std::string&& value) {
  
  marqueemodel_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.SCQueryPackageMarquee.marqueeModel)
}
inline void SCQueryPackageMarquee::set_marqueemodel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  marqueemodel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.SCQueryPackageMarquee.marqueeModel)
}
inline void SCQueryPackageMarquee::set_marqueemodel(const char* value,
    size_t size) {
  
  marqueemodel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.SCQueryPackageMarquee.marqueeModel)
}
inline std::string* SCQueryPackageMarquee::_internal_mutable_marqueemodel() {
  
  return marqueemodel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SCQueryPackageMarquee::release_marqueemodel() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCQueryPackageMarquee.marqueeModel)
  return marqueemodel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SCQueryPackageMarquee::set_allocated_marqueemodel(std::string* marqueemodel) {
  if (marqueemodel != nullptr) {
    
  } else {
    
  }
  marqueemodel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marqueemodel,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCQueryPackageMarquee.marqueeModel)
}

// repeated .PlaneWar.PackageMarquee packageMarqueeList = 2;
inline int SCQueryPackageMarquee::_internal_packagemarqueelist_size() const {
  return packagemarqueelist_.size();
}
inline int SCQueryPackageMarquee::packagemarqueelist_size() const {
  return _internal_packagemarqueelist_size();
}
inline void SCQueryPackageMarquee::clear_packagemarqueelist() {
  packagemarqueelist_.Clear();
}
inline ::PlaneWar::PackageMarquee* SCQueryPackageMarquee::mutable_packagemarqueelist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCQueryPackageMarquee.packageMarqueeList)
  return packagemarqueelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PackageMarquee >*
SCQueryPackageMarquee::mutable_packagemarqueelist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCQueryPackageMarquee.packageMarqueeList)
  return &packagemarqueelist_;
}
inline const ::PlaneWar::PackageMarquee& SCQueryPackageMarquee::_internal_packagemarqueelist(int index) const {
  return packagemarqueelist_.Get(index);
}
inline const ::PlaneWar::PackageMarquee& SCQueryPackageMarquee::packagemarqueelist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCQueryPackageMarquee.packageMarqueeList)
  return _internal_packagemarqueelist(index);
}
inline ::PlaneWar::PackageMarquee* SCQueryPackageMarquee::_internal_add_packagemarqueelist() {
  return packagemarqueelist_.Add();
}
inline ::PlaneWar::PackageMarquee* SCQueryPackageMarquee::add_packagemarqueelist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCQueryPackageMarquee.packageMarqueeList)
  return _internal_add_packagemarqueelist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::PackageMarquee >&
SCQueryPackageMarquee::packagemarqueelist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCQueryPackageMarquee.packageMarqueeList)
  return packagemarqueelist_;
}

// -------------------------------------------------------------------

// CSSetWings

// int32 wingId = 1;
inline void CSSetWings::clear_wingid() {
  wingid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSetWings::_internal_wingid() const {
  return wingid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSetWings::wingid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSSetWings.wingId)
  return _internal_wingid();
}
inline void CSSetWings::_internal_set_wingid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wingid_ = value;
}
inline void CSSetWings::set_wingid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wingid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSSetWings.wingId)
}

// -------------------------------------------------------------------

// SCSetWings

// int32 chair = 1;
inline void SCSetWings::clear_chair() {
  chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetWings::_internal_chair() const {
  return chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetWings::chair() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCSetWings.chair)
  return _internal_chair();
}
inline void SCSetWings::_internal_set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_ = value;
}
inline void SCSetWings::set_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCSetWings.chair)
}

// int32 wingId = 2;
inline void SCSetWings::clear_wingid() {
  wingid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetWings::_internal_wingid() const {
  return wingid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetWings::wingid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCSetWings.wingId)
  return _internal_wingid();
}
inline void SCSetWings::_internal_set_wingid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wingid_ = value;
}
inline void SCSetWings::set_wingid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wingid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCSetWings.wingId)
}

// -------------------------------------------------------------------

// CSVerifySeasonChange

// -------------------------------------------------------------------

// SCVerifySeasonChange

// bool change = 1;
inline void SCVerifySeasonChange::clear_change() {
  change_ = false;
}
inline bool SCVerifySeasonChange::_internal_change() const {
  return change_;
}
inline bool SCVerifySeasonChange::change() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCVerifySeasonChange.change)
  return _internal_change();
}
inline void SCVerifySeasonChange::_internal_set_change(bool value) {
  
  change_ = value;
}
inline void SCVerifySeasonChange::set_change(bool value) {
  _internal_set_change(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCVerifySeasonChange.change)
}

// .PlaneWar.GradeRankInfo beforeGradeRankInfo = 2;
inline bool SCVerifySeasonChange::_internal_has_beforegraderankinfo() const {
  return this != internal_default_instance() && beforegraderankinfo_ != nullptr;
}
inline bool SCVerifySeasonChange::has_beforegraderankinfo() const {
  return _internal_has_beforegraderankinfo();
}
inline void SCVerifySeasonChange::clear_beforegraderankinfo() {
  if (GetArena() == nullptr && beforegraderankinfo_ != nullptr) {
    delete beforegraderankinfo_;
  }
  beforegraderankinfo_ = nullptr;
}
inline const ::PlaneWar::GradeRankInfo& SCVerifySeasonChange::_internal_beforegraderankinfo() const {
  const ::PlaneWar::GradeRankInfo* p = beforegraderankinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::GradeRankInfo&>(
      ::PlaneWar::_GradeRankInfo_default_instance_);
}
inline const ::PlaneWar::GradeRankInfo& SCVerifySeasonChange::beforegraderankinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCVerifySeasonChange.beforeGradeRankInfo)
  return _internal_beforegraderankinfo();
}
inline void SCVerifySeasonChange::unsafe_arena_set_allocated_beforegraderankinfo(
    ::PlaneWar::GradeRankInfo* beforegraderankinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(beforegraderankinfo_);
  }
  beforegraderankinfo_ = beforegraderankinfo;
  if (beforegraderankinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCVerifySeasonChange.beforeGradeRankInfo)
}
inline ::PlaneWar::GradeRankInfo* SCVerifySeasonChange::release_beforegraderankinfo() {
  
  ::PlaneWar::GradeRankInfo* temp = beforegraderankinfo_;
  beforegraderankinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::GradeRankInfo* SCVerifySeasonChange::unsafe_arena_release_beforegraderankinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCVerifySeasonChange.beforeGradeRankInfo)
  
  ::PlaneWar::GradeRankInfo* temp = beforegraderankinfo_;
  beforegraderankinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::GradeRankInfo* SCVerifySeasonChange::_internal_mutable_beforegraderankinfo() {
  
  if (beforegraderankinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::GradeRankInfo>(GetArena());
    beforegraderankinfo_ = p;
  }
  return beforegraderankinfo_;
}
inline ::PlaneWar::GradeRankInfo* SCVerifySeasonChange::mutable_beforegraderankinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCVerifySeasonChange.beforeGradeRankInfo)
  return _internal_mutable_beforegraderankinfo();
}
inline void SCVerifySeasonChange::set_allocated_beforegraderankinfo(::PlaneWar::GradeRankInfo* beforegraderankinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete beforegraderankinfo_;
  }
  if (beforegraderankinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(beforegraderankinfo);
    if (message_arena != submessage_arena) {
      beforegraderankinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, beforegraderankinfo, submessage_arena);
    }
    
  } else {
    
  }
  beforegraderankinfo_ = beforegraderankinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCVerifySeasonChange.beforeGradeRankInfo)
}

// .PlaneWar.GradeRankInfo currentGradeRankInfo = 3;
inline bool SCVerifySeasonChange::_internal_has_currentgraderankinfo() const {
  return this != internal_default_instance() && currentgraderankinfo_ != nullptr;
}
inline bool SCVerifySeasonChange::has_currentgraderankinfo() const {
  return _internal_has_currentgraderankinfo();
}
inline void SCVerifySeasonChange::clear_currentgraderankinfo() {
  if (GetArena() == nullptr && currentgraderankinfo_ != nullptr) {
    delete currentgraderankinfo_;
  }
  currentgraderankinfo_ = nullptr;
}
inline const ::PlaneWar::GradeRankInfo& SCVerifySeasonChange::_internal_currentgraderankinfo() const {
  const ::PlaneWar::GradeRankInfo* p = currentgraderankinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::GradeRankInfo&>(
      ::PlaneWar::_GradeRankInfo_default_instance_);
}
inline const ::PlaneWar::GradeRankInfo& SCVerifySeasonChange::currentgraderankinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCVerifySeasonChange.currentGradeRankInfo)
  return _internal_currentgraderankinfo();
}
inline void SCVerifySeasonChange::unsafe_arena_set_allocated_currentgraderankinfo(
    ::PlaneWar::GradeRankInfo* currentgraderankinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(currentgraderankinfo_);
  }
  currentgraderankinfo_ = currentgraderankinfo;
  if (currentgraderankinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCVerifySeasonChange.currentGradeRankInfo)
}
inline ::PlaneWar::GradeRankInfo* SCVerifySeasonChange::release_currentgraderankinfo() {
  
  ::PlaneWar::GradeRankInfo* temp = currentgraderankinfo_;
  currentgraderankinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::GradeRankInfo* SCVerifySeasonChange::unsafe_arena_release_currentgraderankinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCVerifySeasonChange.currentGradeRankInfo)
  
  ::PlaneWar::GradeRankInfo* temp = currentgraderankinfo_;
  currentgraderankinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::GradeRankInfo* SCVerifySeasonChange::_internal_mutable_currentgraderankinfo() {
  
  if (currentgraderankinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::GradeRankInfo>(GetArena());
    currentgraderankinfo_ = p;
  }
  return currentgraderankinfo_;
}
inline ::PlaneWar::GradeRankInfo* SCVerifySeasonChange::mutable_currentgraderankinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCVerifySeasonChange.currentGradeRankInfo)
  return _internal_mutable_currentgraderankinfo();
}
inline void SCVerifySeasonChange::set_allocated_currentgraderankinfo(::PlaneWar::GradeRankInfo* currentgraderankinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete currentgraderankinfo_;
  }
  if (currentgraderankinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(currentgraderankinfo);
    if (message_arena != submessage_arena) {
      currentgraderankinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, currentgraderankinfo, submessage_arena);
    }
    
  } else {
    
  }
  currentgraderankinfo_ = currentgraderankinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCVerifySeasonChange.currentGradeRankInfo)
}

// int32 beforeSeason = 4;
inline void SCVerifySeasonChange::clear_beforeseason() {
  beforeseason_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVerifySeasonChange::_internal_beforeseason() const {
  return beforeseason_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVerifySeasonChange::beforeseason() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCVerifySeasonChange.beforeSeason)
  return _internal_beforeseason();
}
inline void SCVerifySeasonChange::_internal_set_beforeseason(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  beforeseason_ = value;
}
inline void SCVerifySeasonChange::set_beforeseason(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_beforeseason(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCVerifySeasonChange.beforeSeason)
}

// int32 currentSeason = 5;
inline void SCVerifySeasonChange::clear_currentseason() {
  currentseason_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVerifySeasonChange::_internal_currentseason() const {
  return currentseason_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVerifySeasonChange::currentseason() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCVerifySeasonChange.currentSeason)
  return _internal_currentseason();
}
inline void SCVerifySeasonChange::_internal_set_currentseason(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  currentseason_ = value;
}
inline void SCVerifySeasonChange::set_currentseason(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_currentseason(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCVerifySeasonChange.currentSeason)
}

// -------------------------------------------------------------------

// CSExistUnReceiveRankReward

// -------------------------------------------------------------------

// SCExistUnReceiveRankReward

// bool exist = 1;
inline void SCExistUnReceiveRankReward::clear_exist() {
  exist_ = false;
}
inline bool SCExistUnReceiveRankReward::_internal_exist() const {
  return exist_;
}
inline bool SCExistUnReceiveRankReward::exist() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCExistUnReceiveRankReward.exist)
  return _internal_exist();
}
inline void SCExistUnReceiveRankReward::_internal_set_exist(bool value) {
  
  exist_ = value;
}
inline void SCExistUnReceiveRankReward::set_exist(bool value) {
  _internal_set_exist(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCExistUnReceiveRankReward.exist)
}

// -------------------------------------------------------------------

// CSReceiveExtraGradeReward

// int32 num = 1;
inline void CSReceiveExtraGradeReward::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSReceiveExtraGradeReward::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSReceiveExtraGradeReward::num() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSReceiveExtraGradeReward.num)
  return _internal_num();
}
inline void CSReceiveExtraGradeReward::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void CSReceiveExtraGradeReward::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSReceiveExtraGradeReward.num)
}

// -------------------------------------------------------------------

// SCReceiveExtraGradeReward

// repeated .PlaneWar.ReceiveReward receiveRewardList = 1;
inline int SCReceiveExtraGradeReward::_internal_receiverewardlist_size() const {
  return receiverewardlist_.size();
}
inline int SCReceiveExtraGradeReward::receiverewardlist_size() const {
  return _internal_receiverewardlist_size();
}
inline void SCReceiveExtraGradeReward::clear_receiverewardlist() {
  receiverewardlist_.Clear();
}
inline ::PlaneWar::ReceiveReward* SCReceiveExtraGradeReward::mutable_receiverewardlist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCReceiveExtraGradeReward.receiveRewardList)
  return receiverewardlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ReceiveReward >*
SCReceiveExtraGradeReward::mutable_receiverewardlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCReceiveExtraGradeReward.receiveRewardList)
  return &receiverewardlist_;
}
inline const ::PlaneWar::ReceiveReward& SCReceiveExtraGradeReward::_internal_receiverewardlist(int index) const {
  return receiverewardlist_.Get(index);
}
inline const ::PlaneWar::ReceiveReward& SCReceiveExtraGradeReward::receiverewardlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCReceiveExtraGradeReward.receiveRewardList)
  return _internal_receiverewardlist(index);
}
inline ::PlaneWar::ReceiveReward* SCReceiveExtraGradeReward::_internal_add_receiverewardlist() {
  return receiverewardlist_.Add();
}
inline ::PlaneWar::ReceiveReward* SCReceiveExtraGradeReward::add_receiverewardlist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCReceiveExtraGradeReward.receiveRewardList)
  return _internal_add_receiverewardlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ReceiveReward >&
SCReceiveExtraGradeReward::receiverewardlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCReceiveExtraGradeReward.receiveRewardList)
  return receiverewardlist_;
}

// int32 num = 2;
inline void SCReceiveExtraGradeReward::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCReceiveExtraGradeReward::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCReceiveExtraGradeReward::num() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCReceiveExtraGradeReward.num)
  return _internal_num();
}
inline void SCReceiveExtraGradeReward::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void SCReceiveExtraGradeReward::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCReceiveExtraGradeReward.num)
}

// -------------------------------------------------------------------

// CSGetGradeRankList

// int32 from = 1;
inline void CSGetGradeRankList::clear_from() {
  from_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSGetGradeRankList::_internal_from() const {
  return from_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSGetGradeRankList::from() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSGetGradeRankList.from)
  return _internal_from();
}
inline void CSGetGradeRankList::_internal_set_from(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  from_ = value;
}
inline void CSGetGradeRankList::set_from(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSGetGradeRankList.from)
}

// int32 to = 2;
inline void CSGetGradeRankList::clear_to() {
  to_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSGetGradeRankList::_internal_to() const {
  return to_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSGetGradeRankList::to() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSGetGradeRankList.to)
  return _internal_to();
}
inline void CSGetGradeRankList::_internal_set_to(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  to_ = value;
}
inline void CSGetGradeRankList::set_to(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSGetGradeRankList.to)
}

// int32 season = 3;
inline void CSGetGradeRankList::clear_season() {
  season_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSGetGradeRankList::_internal_season() const {
  return season_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSGetGradeRankList::season() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSGetGradeRankList.season)
  return _internal_season();
}
inline void CSGetGradeRankList::_internal_set_season(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  season_ = value;
}
inline void CSGetGradeRankList::set_season(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_season(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSGetGradeRankList.season)
}

// -------------------------------------------------------------------

// SCGetGradeRankList

// repeated .PlaneWar.GradeRankInfo gradeRankList = 1;
inline int SCGetGradeRankList::_internal_graderanklist_size() const {
  return graderanklist_.size();
}
inline int SCGetGradeRankList::graderanklist_size() const {
  return _internal_graderanklist_size();
}
inline void SCGetGradeRankList::clear_graderanklist() {
  graderanklist_.Clear();
}
inline ::PlaneWar::GradeRankInfo* SCGetGradeRankList::mutable_graderanklist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCGetGradeRankList.gradeRankList)
  return graderanklist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GradeRankInfo >*
SCGetGradeRankList::mutable_graderanklist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCGetGradeRankList.gradeRankList)
  return &graderanklist_;
}
inline const ::PlaneWar::GradeRankInfo& SCGetGradeRankList::_internal_graderanklist(int index) const {
  return graderanklist_.Get(index);
}
inline const ::PlaneWar::GradeRankInfo& SCGetGradeRankList::graderanklist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetGradeRankList.gradeRankList)
  return _internal_graderanklist(index);
}
inline ::PlaneWar::GradeRankInfo* SCGetGradeRankList::_internal_add_graderanklist() {
  return graderanklist_.Add();
}
inline ::PlaneWar::GradeRankInfo* SCGetGradeRankList::add_graderanklist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCGetGradeRankList.gradeRankList)
  return _internal_add_graderanklist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::GradeRankInfo >&
SCGetGradeRankList::graderanklist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCGetGradeRankList.gradeRankList)
  return graderanklist_;
}

// .PlaneWar.GradeRankInfo selfRankInfo = 2;
inline bool SCGetGradeRankList::_internal_has_selfrankinfo() const {
  return this != internal_default_instance() && selfrankinfo_ != nullptr;
}
inline bool SCGetGradeRankList::has_selfrankinfo() const {
  return _internal_has_selfrankinfo();
}
inline void SCGetGradeRankList::clear_selfrankinfo() {
  if (GetArena() == nullptr && selfrankinfo_ != nullptr) {
    delete selfrankinfo_;
  }
  selfrankinfo_ = nullptr;
}
inline const ::PlaneWar::GradeRankInfo& SCGetGradeRankList::_internal_selfrankinfo() const {
  const ::PlaneWar::GradeRankInfo* p = selfrankinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::GradeRankInfo&>(
      ::PlaneWar::_GradeRankInfo_default_instance_);
}
inline const ::PlaneWar::GradeRankInfo& SCGetGradeRankList::selfrankinfo() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetGradeRankList.selfRankInfo)
  return _internal_selfrankinfo();
}
inline void SCGetGradeRankList::unsafe_arena_set_allocated_selfrankinfo(
    ::PlaneWar::GradeRankInfo* selfrankinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selfrankinfo_);
  }
  selfrankinfo_ = selfrankinfo;
  if (selfrankinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.SCGetGradeRankList.selfRankInfo)
}
inline ::PlaneWar::GradeRankInfo* SCGetGradeRankList::release_selfrankinfo() {
  
  ::PlaneWar::GradeRankInfo* temp = selfrankinfo_;
  selfrankinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::GradeRankInfo* SCGetGradeRankList::unsafe_arena_release_selfrankinfo() {
  // @@protoc_insertion_point(field_release:PlaneWar.SCGetGradeRankList.selfRankInfo)
  
  ::PlaneWar::GradeRankInfo* temp = selfrankinfo_;
  selfrankinfo_ = nullptr;
  return temp;
}
inline ::PlaneWar::GradeRankInfo* SCGetGradeRankList::_internal_mutable_selfrankinfo() {
  
  if (selfrankinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::GradeRankInfo>(GetArena());
    selfrankinfo_ = p;
  }
  return selfrankinfo_;
}
inline ::PlaneWar::GradeRankInfo* SCGetGradeRankList::mutable_selfrankinfo() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCGetGradeRankList.selfRankInfo)
  return _internal_mutable_selfrankinfo();
}
inline void SCGetGradeRankList::set_allocated_selfrankinfo(::PlaneWar::GradeRankInfo* selfrankinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete selfrankinfo_;
  }
  if (selfrankinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(selfrankinfo);
    if (message_arena != submessage_arena) {
      selfrankinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selfrankinfo, submessage_arena);
    }
    
  } else {
    
  }
  selfrankinfo_ = selfrankinfo;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.SCGetGradeRankList.selfRankInfo)
}

// int32 ord = 3;
inline void SCGetGradeRankList::clear_ord() {
  ord_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetGradeRankList::_internal_ord() const {
  return ord_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetGradeRankList::ord() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCGetGradeRankList.ord)
  return _internal_ord();
}
inline void SCGetGradeRankList::_internal_set_ord(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ord_ = value;
}
inline void SCGetGradeRankList::set_ord(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ord(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCGetGradeRankList.ord)
}

// -------------------------------------------------------------------

// CSBuyPlane

// int32 plane_id = 1;
inline void CSBuyPlane::clear_plane_id() {
  plane_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBuyPlane::_internal_plane_id() const {
  return plane_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBuyPlane::plane_id() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSBuyPlane.plane_id)
  return _internal_plane_id();
}
inline void CSBuyPlane::_internal_set_plane_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  plane_id_ = value;
}
inline void CSBuyPlane::set_plane_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_plane_id(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSBuyPlane.plane_id)
}

// -------------------------------------------------------------------

// SCBuyPlane

// int32 plane_id = 1;
inline void SCBuyPlane::clear_plane_id() {
  plane_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBuyPlane::_internal_plane_id() const {
  return plane_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBuyPlane::plane_id() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCBuyPlane.plane_id)
  return _internal_plane_id();
}
inline void SCBuyPlane::_internal_set_plane_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  plane_id_ = value;
}
inline void SCBuyPlane::set_plane_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_plane_id(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCBuyPlane.plane_id)
}

// -------------------------------------------------------------------

// CSBuyWings

// int32 wings_id = 1;
inline void CSBuyWings::clear_wings_id() {
  wings_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBuyWings::_internal_wings_id() const {
  return wings_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBuyWings::wings_id() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSBuyWings.wings_id)
  return _internal_wings_id();
}
inline void CSBuyWings::_internal_set_wings_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wings_id_ = value;
}
inline void CSBuyWings::set_wings_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wings_id(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSBuyWings.wings_id)
}

// -------------------------------------------------------------------

// SCBuyWings

// int32 wings_id = 1;
inline void SCBuyWings::clear_wings_id() {
  wings_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBuyWings::_internal_wings_id() const {
  return wings_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBuyWings::wings_id() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCBuyWings.wings_id)
  return _internal_wings_id();
}
inline void SCBuyWings::_internal_set_wings_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wings_id_ = value;
}
inline void SCBuyWings::set_wings_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wings_id(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCBuyWings.wings_id)
}

// -------------------------------------------------------------------

// OpenChestReward

// int32 id = 1;
inline void OpenChestReward::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpenChestReward::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpenChestReward::id() const {
  // @@protoc_insertion_point(field_get:PlaneWar.OpenChestReward.id)
  return _internal_id();
}
inline void OpenChestReward::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void OpenChestReward::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PlaneWar.OpenChestReward.id)
}

// .PlaneWar.Decimal num = 2;
inline bool OpenChestReward::_internal_has_num() const {
  return this != internal_default_instance() && num_ != nullptr;
}
inline bool OpenChestReward::has_num() const {
  return _internal_has_num();
}
inline void OpenChestReward::clear_num() {
  if (GetArena() == nullptr && num_ != nullptr) {
    delete num_;
  }
  num_ = nullptr;
}
inline const ::PlaneWar::Decimal& OpenChestReward::_internal_num() const {
  const ::PlaneWar::Decimal* p = num_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::Decimal&>(
      ::PlaneWar::_Decimal_default_instance_);
}
inline const ::PlaneWar::Decimal& OpenChestReward::num() const {
  // @@protoc_insertion_point(field_get:PlaneWar.OpenChestReward.num)
  return _internal_num();
}
inline void OpenChestReward::unsafe_arena_set_allocated_num(
    ::PlaneWar::Decimal* num) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(num_);
  }
  num_ = num;
  if (num) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.OpenChestReward.num)
}
inline ::PlaneWar::Decimal* OpenChestReward::release_num() {
  
  ::PlaneWar::Decimal* temp = num_;
  num_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::Decimal* OpenChestReward::unsafe_arena_release_num() {
  // @@protoc_insertion_point(field_release:PlaneWar.OpenChestReward.num)
  
  ::PlaneWar::Decimal* temp = num_;
  num_ = nullptr;
  return temp;
}
inline ::PlaneWar::Decimal* OpenChestReward::_internal_mutable_num() {
  
  if (num_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::Decimal>(GetArena());
    num_ = p;
  }
  return num_;
}
inline ::PlaneWar::Decimal* OpenChestReward::mutable_num() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.OpenChestReward.num)
  return _internal_mutable_num();
}
inline void OpenChestReward::set_allocated_num(::PlaneWar::Decimal* num) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete num_;
  }
  if (num) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(num);
    if (message_arena != submessage_arena) {
      num = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, num, submessage_arena);
    }
    
  } else {
    
  }
  num_ = num;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.OpenChestReward.num)
}

// -------------------------------------------------------------------

// SCUpdateChestStatus

// bool is_active = 1;
inline void SCUpdateChestStatus::clear_is_active() {
  is_active_ = false;
}
inline bool SCUpdateChestStatus::_internal_is_active() const {
  return is_active_;
}
inline bool SCUpdateChestStatus::is_active() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUpdateChestStatus.is_active)
  return _internal_is_active();
}
inline void SCUpdateChestStatus::_internal_set_is_active(bool value) {
  
  is_active_ = value;
}
inline void SCUpdateChestStatus::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUpdateChestStatus.is_active)
}

// .PlaneWar.ChestType chest_type = 2;
inline void SCUpdateChestStatus::clear_chest_type() {
  chest_type_ = 0;
}
inline ::PlaneWar::ChestType SCUpdateChestStatus::_internal_chest_type() const {
  return static_cast< ::PlaneWar::ChestType >(chest_type_);
}
inline ::PlaneWar::ChestType SCUpdateChestStatus::chest_type() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUpdateChestStatus.chest_type)
  return _internal_chest_type();
}
inline void SCUpdateChestStatus::_internal_set_chest_type(::PlaneWar::ChestType value) {
  
  chest_type_ = value;
}
inline void SCUpdateChestStatus::set_chest_type(::PlaneWar::ChestType value) {
  _internal_set_chest_type(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUpdateChestStatus.chest_type)
}

// int32 total_progress = 3;
inline void SCUpdateChestStatus::clear_total_progress() {
  total_progress_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpdateChestStatus::_internal_total_progress() const {
  return total_progress_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpdateChestStatus::total_progress() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUpdateChestStatus.total_progress)
  return _internal_total_progress();
}
inline void SCUpdateChestStatus::_internal_set_total_progress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_progress_ = value;
}
inline void SCUpdateChestStatus::set_total_progress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_progress(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUpdateChestStatus.total_progress)
}

// int32 remain_progress = 4;
inline void SCUpdateChestStatus::clear_remain_progress() {
  remain_progress_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpdateChestStatus::_internal_remain_progress() const {
  return remain_progress_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpdateChestStatus::remain_progress() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUpdateChestStatus.remain_progress)
  return _internal_remain_progress();
}
inline void SCUpdateChestStatus::_internal_set_remain_progress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  remain_progress_ = value;
}
inline void SCUpdateChestStatus::set_remain_progress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_remain_progress(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUpdateChestStatus.remain_progress)
}

// bool guide = 5;
inline void SCUpdateChestStatus::clear_guide() {
  guide_ = false;
}
inline bool SCUpdateChestStatus::_internal_guide() const {
  return guide_;
}
inline bool SCUpdateChestStatus::guide() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUpdateChestStatus.guide)
  return _internal_guide();
}
inline void SCUpdateChestStatus::_internal_set_guide(bool value) {
  
  guide_ = value;
}
inline void SCUpdateChestStatus::set_guide(bool value) {
  _internal_set_guide(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUpdateChestStatus.guide)
}

// int32 available_reward = 6;
inline void SCUpdateChestStatus::clear_available_reward() {
  available_reward_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpdateChestStatus::_internal_available_reward() const {
  return available_reward_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpdateChestStatus::available_reward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCUpdateChestStatus.available_reward)
  return _internal_available_reward();
}
inline void SCUpdateChestStatus::_internal_set_available_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  available_reward_ = value;
}
inline void SCUpdateChestStatus::set_available_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_available_reward(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCUpdateChestStatus.available_reward)
}

// -------------------------------------------------------------------

// ChestBrief

// .PlaneWar.ChestType chest_type = 1;
inline void ChestBrief::clear_chest_type() {
  chest_type_ = 0;
}
inline ::PlaneWar::ChestType ChestBrief::_internal_chest_type() const {
  return static_cast< ::PlaneWar::ChestType >(chest_type_);
}
inline ::PlaneWar::ChestType ChestBrief::chest_type() const {
  // @@protoc_insertion_point(field_get:PlaneWar.ChestBrief.chest_type)
  return _internal_chest_type();
}
inline void ChestBrief::_internal_set_chest_type(::PlaneWar::ChestType value) {
  
  chest_type_ = value;
}
inline void ChestBrief::set_chest_type(::PlaneWar::ChestType value) {
  _internal_set_chest_type(value);
  // @@protoc_insertion_point(field_set:PlaneWar.ChestBrief.chest_type)
}

// repeated .PlaneWar.OpenChestReward reward = 2;
inline int ChestBrief::_internal_reward_size() const {
  return reward_.size();
}
inline int ChestBrief::reward_size() const {
  return _internal_reward_size();
}
inline void ChestBrief::clear_reward() {
  reward_.Clear();
}
inline ::PlaneWar::OpenChestReward* ChestBrief::mutable_reward(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.ChestBrief.reward)
  return reward_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::OpenChestReward >*
ChestBrief::mutable_reward() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.ChestBrief.reward)
  return &reward_;
}
inline const ::PlaneWar::OpenChestReward& ChestBrief::_internal_reward(int index) const {
  return reward_.Get(index);
}
inline const ::PlaneWar::OpenChestReward& ChestBrief::reward(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.ChestBrief.reward)
  return _internal_reward(index);
}
inline ::PlaneWar::OpenChestReward* ChestBrief::_internal_add_reward() {
  return reward_.Add();
}
inline ::PlaneWar::OpenChestReward* ChestBrief::add_reward() {
  // @@protoc_insertion_point(field_add:PlaneWar.ChestBrief.reward)
  return _internal_add_reward();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::OpenChestReward >&
ChestBrief::reward() const {
  // @@protoc_insertion_point(field_list:PlaneWar.ChestBrief.reward)
  return reward_;
}

// -------------------------------------------------------------------

// SCChestConfig

// int32 end_time = 1;
inline void SCChestConfig::clear_end_time() {
  end_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCChestConfig::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCChestConfig::end_time() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCChestConfig.end_time)
  return _internal_end_time();
}
inline void SCChestConfig::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_time_ = value;
}
inline void SCChestConfig::set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCChestConfig.end_time)
}

// repeated .PlaneWar.ChestBrief chest_brief_list = 2;
inline int SCChestConfig::_internal_chest_brief_list_size() const {
  return chest_brief_list_.size();
}
inline int SCChestConfig::chest_brief_list_size() const {
  return _internal_chest_brief_list_size();
}
inline void SCChestConfig::clear_chest_brief_list() {
  chest_brief_list_.Clear();
}
inline ::PlaneWar::ChestBrief* SCChestConfig::mutable_chest_brief_list(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCChestConfig.chest_brief_list)
  return chest_brief_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ChestBrief >*
SCChestConfig::mutable_chest_brief_list() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCChestConfig.chest_brief_list)
  return &chest_brief_list_;
}
inline const ::PlaneWar::ChestBrief& SCChestConfig::_internal_chest_brief_list(int index) const {
  return chest_brief_list_.Get(index);
}
inline const ::PlaneWar::ChestBrief& SCChestConfig::chest_brief_list(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCChestConfig.chest_brief_list)
  return _internal_chest_brief_list(index);
}
inline ::PlaneWar::ChestBrief* SCChestConfig::_internal_add_chest_brief_list() {
  return chest_brief_list_.Add();
}
inline ::PlaneWar::ChestBrief* SCChestConfig::add_chest_brief_list() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCChestConfig.chest_brief_list)
  return _internal_add_chest_brief_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::ChestBrief >&
SCChestConfig::chest_brief_list() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCChestConfig.chest_brief_list)
  return chest_brief_list_;
}

// int32 min_ratio = 3;
inline void SCChestConfig::clear_min_ratio() {
  min_ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCChestConfig::_internal_min_ratio() const {
  return min_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCChestConfig::min_ratio() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCChestConfig.min_ratio)
  return _internal_min_ratio();
}
inline void SCChestConfig::_internal_set_min_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_ratio_ = value;
}
inline void SCChestConfig::set_min_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_ratio(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCChestConfig.min_ratio)
}

// bool auto_open = 4;
inline void SCChestConfig::clear_auto_open() {
  auto_open_ = false;
}
inline bool SCChestConfig::_internal_auto_open() const {
  return auto_open_;
}
inline bool SCChestConfig::auto_open() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCChestConfig.auto_open)
  return _internal_auto_open();
}
inline void SCChestConfig::_internal_set_auto_open(bool value) {
  
  auto_open_ = value;
}
inline void SCChestConfig::set_auto_open(bool value) {
  _internal_set_auto_open(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCChestConfig.auto_open)
}

// .PlaneWar.ChestAutoSelectOption auto_option = 5;
inline void SCChestConfig::clear_auto_option() {
  auto_option_ = 0;
}
inline ::PlaneWar::ChestAutoSelectOption SCChestConfig::_internal_auto_option() const {
  return static_cast< ::PlaneWar::ChestAutoSelectOption >(auto_option_);
}
inline ::PlaneWar::ChestAutoSelectOption SCChestConfig::auto_option() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCChestConfig.auto_option)
  return _internal_auto_option();
}
inline void SCChestConfig::_internal_set_auto_option(::PlaneWar::ChestAutoSelectOption value) {
  
  auto_option_ = value;
}
inline void SCChestConfig::set_auto_option(::PlaneWar::ChestAutoSelectOption value) {
  _internal_set_auto_option(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCChestConfig.auto_option)
}

// bool is_enable = 6;
inline void SCChestConfig::clear_is_enable() {
  is_enable_ = false;
}
inline bool SCChestConfig::_internal_is_enable() const {
  return is_enable_;
}
inline bool SCChestConfig::is_enable() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCChestConfig.is_enable)
  return _internal_is_enable();
}
inline void SCChestConfig::_internal_set_is_enable(bool value) {
  
  is_enable_ = value;
}
inline void SCChestConfig::set_is_enable(bool value) {
  _internal_set_is_enable(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCChestConfig.is_enable)
}

// -------------------------------------------------------------------

// SCOpenChest

// repeated .PlaneWar.OpenChestReward reward_list = 1;
inline int SCOpenChest::_internal_reward_list_size() const {
  return reward_list_.size();
}
inline int SCOpenChest::reward_list_size() const {
  return _internal_reward_list_size();
}
inline void SCOpenChest::clear_reward_list() {
  reward_list_.Clear();
}
inline ::PlaneWar::OpenChestReward* SCOpenChest::mutable_reward_list(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCOpenChest.reward_list)
  return reward_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::OpenChestReward >*
SCOpenChest::mutable_reward_list() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCOpenChest.reward_list)
  return &reward_list_;
}
inline const ::PlaneWar::OpenChestReward& SCOpenChest::_internal_reward_list(int index) const {
  return reward_list_.Get(index);
}
inline const ::PlaneWar::OpenChestReward& SCOpenChest::reward_list(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCOpenChest.reward_list)
  return _internal_reward_list(index);
}
inline ::PlaneWar::OpenChestReward* SCOpenChest::_internal_add_reward_list() {
  return reward_list_.Add();
}
inline ::PlaneWar::OpenChestReward* SCOpenChest::add_reward_list() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCOpenChest.reward_list)
  return _internal_add_reward_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::OpenChestReward >&
SCOpenChest::reward_list() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCOpenChest.reward_list)
  return reward_list_;
}

// .PlaneWar.ChestAutoSelectOption auto_option = 2;
inline void SCOpenChest::clear_auto_option() {
  auto_option_ = 0;
}
inline ::PlaneWar::ChestAutoSelectOption SCOpenChest::_internal_auto_option() const {
  return static_cast< ::PlaneWar::ChestAutoSelectOption >(auto_option_);
}
inline ::PlaneWar::ChestAutoSelectOption SCOpenChest::auto_option() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCOpenChest.auto_option)
  return _internal_auto_option();
}
inline void SCOpenChest::_internal_set_auto_option(::PlaneWar::ChestAutoSelectOption value) {
  
  auto_option_ = value;
}
inline void SCOpenChest::set_auto_option(::PlaneWar::ChestAutoSelectOption value) {
  _internal_set_auto_option(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCOpenChest.auto_option)
}

// -------------------------------------------------------------------

// CSSelectChestReward

// int32 select_index = 1;
inline void CSSelectChestReward::clear_select_index() {
  select_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSelectChestReward::_internal_select_index() const {
  return select_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSelectChestReward::select_index() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSSelectChestReward.select_index)
  return _internal_select_index();
}
inline void CSSelectChestReward::_internal_set_select_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  select_index_ = value;
}
inline void CSSelectChestReward::set_select_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_select_index(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSSelectChestReward.select_index)
}

// .PlaneWar.OpenChestReward reward = 2;
inline bool CSSelectChestReward::_internal_has_reward() const {
  return this != internal_default_instance() && reward_ != nullptr;
}
inline bool CSSelectChestReward::has_reward() const {
  return _internal_has_reward();
}
inline void CSSelectChestReward::clear_reward() {
  if (GetArena() == nullptr && reward_ != nullptr) {
    delete reward_;
  }
  reward_ = nullptr;
}
inline const ::PlaneWar::OpenChestReward& CSSelectChestReward::_internal_reward() const {
  const ::PlaneWar::OpenChestReward* p = reward_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlaneWar::OpenChestReward&>(
      ::PlaneWar::_OpenChestReward_default_instance_);
}
inline const ::PlaneWar::OpenChestReward& CSSelectChestReward::reward() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSSelectChestReward.reward)
  return _internal_reward();
}
inline void CSSelectChestReward::unsafe_arena_set_allocated_reward(
    ::PlaneWar::OpenChestReward* reward) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reward_);
  }
  reward_ = reward;
  if (reward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlaneWar.CSSelectChestReward.reward)
}
inline ::PlaneWar::OpenChestReward* CSSelectChestReward::release_reward() {
  
  ::PlaneWar::OpenChestReward* temp = reward_;
  reward_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlaneWar::OpenChestReward* CSSelectChestReward::unsafe_arena_release_reward() {
  // @@protoc_insertion_point(field_release:PlaneWar.CSSelectChestReward.reward)
  
  ::PlaneWar::OpenChestReward* temp = reward_;
  reward_ = nullptr;
  return temp;
}
inline ::PlaneWar::OpenChestReward* CSSelectChestReward::_internal_mutable_reward() {
  
  if (reward_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlaneWar::OpenChestReward>(GetArena());
    reward_ = p;
  }
  return reward_;
}
inline ::PlaneWar::OpenChestReward* CSSelectChestReward::mutable_reward() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.CSSelectChestReward.reward)
  return _internal_mutable_reward();
}
inline void CSSelectChestReward::set_allocated_reward(::PlaneWar::OpenChestReward* reward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reward_;
  }
  if (reward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reward);
    if (message_arena != submessage_arena) {
      reward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reward, submessage_arena);
    }
    
  } else {
    
  }
  reward_ = reward;
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.CSSelectChestReward.reward)
}

// -------------------------------------------------------------------

// CSChestSetAutoSelect

// .PlaneWar.ChestAutoSelectOption auto_option = 1;
inline void CSChestSetAutoSelect::clear_auto_option() {
  auto_option_ = 0;
}
inline ::PlaneWar::ChestAutoSelectOption CSChestSetAutoSelect::_internal_auto_option() const {
  return static_cast< ::PlaneWar::ChestAutoSelectOption >(auto_option_);
}
inline ::PlaneWar::ChestAutoSelectOption CSChestSetAutoSelect::auto_option() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSChestSetAutoSelect.auto_option)
  return _internal_auto_option();
}
inline void CSChestSetAutoSelect::_internal_set_auto_option(::PlaneWar::ChestAutoSelectOption value) {
  
  auto_option_ = value;
}
inline void CSChestSetAutoSelect::set_auto_option(::PlaneWar::ChestAutoSelectOption value) {
  _internal_set_auto_option(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSChestSetAutoSelect.auto_option)
}

// bool auto_open = 2;
inline void CSChestSetAutoSelect::clear_auto_open() {
  auto_open_ = false;
}
inline bool CSChestSetAutoSelect::_internal_auto_open() const {
  return auto_open_;
}
inline bool CSChestSetAutoSelect::auto_open() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSChestSetAutoSelect.auto_open)
  return _internal_auto_open();
}
inline void CSChestSetAutoSelect::_internal_set_auto_open(bool value) {
  
  auto_open_ = value;
}
inline void CSChestSetAutoSelect::set_auto_open(bool value) {
  _internal_set_auto_open(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSChestSetAutoSelect.auto_open)
}

// -------------------------------------------------------------------

// SCChestSetAutoSelect

// .PlaneWar.ChestAutoSelectOption auto_option = 1;
inline void SCChestSetAutoSelect::clear_auto_option() {
  auto_option_ = 0;
}
inline ::PlaneWar::ChestAutoSelectOption SCChestSetAutoSelect::_internal_auto_option() const {
  return static_cast< ::PlaneWar::ChestAutoSelectOption >(auto_option_);
}
inline ::PlaneWar::ChestAutoSelectOption SCChestSetAutoSelect::auto_option() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCChestSetAutoSelect.auto_option)
  return _internal_auto_option();
}
inline void SCChestSetAutoSelect::_internal_set_auto_option(::PlaneWar::ChestAutoSelectOption value) {
  
  auto_option_ = value;
}
inline void SCChestSetAutoSelect::set_auto_option(::PlaneWar::ChestAutoSelectOption value) {
  _internal_set_auto_option(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCChestSetAutoSelect.auto_option)
}

// bool auto_open = 2;
inline void SCChestSetAutoSelect::clear_auto_open() {
  auto_open_ = false;
}
inline bool SCChestSetAutoSelect::_internal_auto_open() const {
  return auto_open_;
}
inline bool SCChestSetAutoSelect::auto_open() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCChestSetAutoSelect.auto_open)
  return _internal_auto_open();
}
inline void SCChestSetAutoSelect::_internal_set_auto_open(bool value) {
  
  auto_open_ = value;
}
inline void SCChestSetAutoSelect::set_auto_open(bool value) {
  _internal_set_auto_open(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCChestSetAutoSelect.auto_open)
}

// -------------------------------------------------------------------

// CSChestSetEnable

// bool is_enable = 1;
inline void CSChestSetEnable::clear_is_enable() {
  is_enable_ = false;
}
inline bool CSChestSetEnable::_internal_is_enable() const {
  return is_enable_;
}
inline bool CSChestSetEnable::is_enable() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSChestSetEnable.is_enable)
  return _internal_is_enable();
}
inline void CSChestSetEnable::_internal_set_is_enable(bool value) {
  
  is_enable_ = value;
}
inline void CSChestSetEnable::set_is_enable(bool value) {
  _internal_set_is_enable(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSChestSetEnable.is_enable)
}

// -------------------------------------------------------------------

// SCChestSetEnable

// bool is_enable = 1;
inline void SCChestSetEnable::clear_is_enable() {
  is_enable_ = false;
}
inline bool SCChestSetEnable::_internal_is_enable() const {
  return is_enable_;
}
inline bool SCChestSetEnable::is_enable() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCChestSetEnable.is_enable)
  return _internal_is_enable();
}
inline void SCChestSetEnable::_internal_set_is_enable(bool value) {
  
  is_enable_ = value;
}
inline void SCChestSetEnable::set_is_enable(bool value) {
  _internal_set_is_enable(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCChestSetEnable.is_enable)
}

// -------------------------------------------------------------------

// SCWaterDropInfo

// bool enable = 1;
inline void SCWaterDropInfo::clear_enable() {
  enable_ = false;
}
inline bool SCWaterDropInfo::_internal_enable() const {
  return enable_;
}
inline bool SCWaterDropInfo::enable() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCWaterDropInfo.enable)
  return _internal_enable();
}
inline void SCWaterDropInfo::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void SCWaterDropInfo::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCWaterDropInfo.enable)
}

// int32 dropCount = 2;
inline void SCWaterDropInfo::clear_dropcount() {
  dropcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCWaterDropInfo::_internal_dropcount() const {
  return dropcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCWaterDropInfo::dropcount() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCWaterDropInfo.dropCount)
  return _internal_dropcount();
}
inline void SCWaterDropInfo::_internal_set_dropcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dropcount_ = value;
}
inline void SCWaterDropInfo::set_dropcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dropcount(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCWaterDropInfo.dropCount)
}

// int32 fragmentCount = 3;
inline void SCWaterDropInfo::clear_fragmentcount() {
  fragmentcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCWaterDropInfo::_internal_fragmentcount() const {
  return fragmentcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCWaterDropInfo::fragmentcount() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCWaterDropInfo.fragmentCount)
  return _internal_fragmentcount();
}
inline void SCWaterDropInfo::_internal_set_fragmentcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fragmentcount_ = value;
}
inline void SCWaterDropInfo::set_fragmentcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fragmentcount(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCWaterDropInfo.fragmentCount)
}

// -------------------------------------------------------------------

// TextInfo

// int32 index = 1;
inline void TextInfo::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TextInfo::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TextInfo::index() const {
  // @@protoc_insertion_point(field_get:PlaneWar.TextInfo.index)
  return _internal_index();
}
inline void TextInfo::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void TextInfo::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:PlaneWar.TextInfo.index)
}

// string text = 2;
inline void TextInfo::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& TextInfo::text() const {
  // @@protoc_insertion_point(field_get:PlaneWar.TextInfo.text)
  return _internal_text();
}
inline void TextInfo::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:PlaneWar.TextInfo.text)
}
inline std::string* TextInfo::mutable_text() {
  // @@protoc_insertion_point(field_mutable:PlaneWar.TextInfo.text)
  return _internal_mutable_text();
}
inline const std::string& TextInfo::_internal_text() const {
  return text_.Get();
}
inline void TextInfo::_internal_set_text(const std::string& value) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TextInfo::set_text(std::string&& value) {
  
  text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlaneWar.TextInfo.text)
}
inline void TextInfo::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlaneWar.TextInfo.text)
}
inline void TextInfo::set_text(const char* value,
    size_t size) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlaneWar.TextInfo.text)
}
inline std::string* TextInfo::_internal_mutable_text() {
  
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TextInfo::release_text() {
  // @@protoc_insertion_point(field_release:PlaneWar.TextInfo.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TextInfo::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlaneWar.TextInfo.text)
}

// -------------------------------------------------------------------

// CSSyncTextConfig

// int32 startIdx = 1;
inline void CSSyncTextConfig::clear_startidx() {
  startidx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncTextConfig::_internal_startidx() const {
  return startidx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncTextConfig::startidx() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSSyncTextConfig.startIdx)
  return _internal_startidx();
}
inline void CSSyncTextConfig::_internal_set_startidx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  startidx_ = value;
}
inline void CSSyncTextConfig::set_startidx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_startidx(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSSyncTextConfig.startIdx)
}

// int32 endIdx = 2;
inline void CSSyncTextConfig::clear_endidx() {
  endidx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncTextConfig::_internal_endidx() const {
  return endidx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncTextConfig::endidx() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSSyncTextConfig.endIdx)
  return _internal_endidx();
}
inline void CSSyncTextConfig::_internal_set_endidx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  endidx_ = value;
}
inline void CSSyncTextConfig::set_endidx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_endidx(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSSyncTextConfig.endIdx)
}

// -------------------------------------------------------------------

// SCSyncTextConfig

// repeated .PlaneWar.TextInfo textList = 1;
inline int SCSyncTextConfig::_internal_textlist_size() const {
  return textlist_.size();
}
inline int SCSyncTextConfig::textlist_size() const {
  return _internal_textlist_size();
}
inline void SCSyncTextConfig::clear_textlist() {
  textlist_.Clear();
}
inline ::PlaneWar::TextInfo* SCSyncTextConfig::mutable_textlist(int index) {
  // @@protoc_insertion_point(field_mutable:PlaneWar.SCSyncTextConfig.textList)
  return textlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::TextInfo >*
SCSyncTextConfig::mutable_textlist() {
  // @@protoc_insertion_point(field_mutable_list:PlaneWar.SCSyncTextConfig.textList)
  return &textlist_;
}
inline const ::PlaneWar::TextInfo& SCSyncTextConfig::_internal_textlist(int index) const {
  return textlist_.Get(index);
}
inline const ::PlaneWar::TextInfo& SCSyncTextConfig::textlist(int index) const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCSyncTextConfig.textList)
  return _internal_textlist(index);
}
inline ::PlaneWar::TextInfo* SCSyncTextConfig::_internal_add_textlist() {
  return textlist_.Add();
}
inline ::PlaneWar::TextInfo* SCSyncTextConfig::add_textlist() {
  // @@protoc_insertion_point(field_add:PlaneWar.SCSyncTextConfig.textList)
  return _internal_add_textlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlaneWar::TextInfo >&
SCSyncTextConfig::textlist() const {
  // @@protoc_insertion_point(field_list:PlaneWar.SCSyncTextConfig.textList)
  return textlist_;
}

// -------------------------------------------------------------------

// CSExtraMul

// bool extra_mul = 1;
inline void CSExtraMul::clear_extra_mul() {
  extra_mul_ = false;
}
inline bool CSExtraMul::_internal_extra_mul() const {
  return extra_mul_;
}
inline bool CSExtraMul::extra_mul() const {
  // @@protoc_insertion_point(field_get:PlaneWar.CSExtraMul.extra_mul)
  return _internal_extra_mul();
}
inline void CSExtraMul::_internal_set_extra_mul(bool value) {
  
  extra_mul_ = value;
}
inline void CSExtraMul::set_extra_mul(bool value) {
  _internal_set_extra_mul(value);
  // @@protoc_insertion_point(field_set:PlaneWar.CSExtraMul.extra_mul)
}

// -------------------------------------------------------------------

// SCExtraMul

// int32 chairId = 1;
inline void SCExtraMul::clear_chairid() {
  chairid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCExtraMul::_internal_chairid() const {
  return chairid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCExtraMul::chairid() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCExtraMul.chairId)
  return _internal_chairid();
}
inline void SCExtraMul::_internal_set_chairid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chairid_ = value;
}
inline void SCExtraMul::set_chairid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chairid(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCExtraMul.chairId)
}

// bool extra_mul = 2;
inline void SCExtraMul::clear_extra_mul() {
  extra_mul_ = false;
}
inline bool SCExtraMul::_internal_extra_mul() const {
  return extra_mul_;
}
inline bool SCExtraMul::extra_mul() const {
  // @@protoc_insertion_point(field_get:PlaneWar.SCExtraMul.extra_mul)
  return _internal_extra_mul();
}
inline void SCExtraMul::_internal_set_extra_mul(bool value) {
  
  extra_mul_ = value;
}
inline void SCExtraMul::set_extra_mul(bool value) {
  _internal_set_extra_mul(value);
  // @@protoc_insertion_point(field_set:PlaneWar.SCExtraMul.extra_mul)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PlaneWar

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::PlaneWar::EMsgIDSubGame> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PlaneWar::EMsgIDSubGame>() {
  return ::PlaneWar::EMsgIDSubGame_descriptor();
}
template <> struct is_proto_enum< ::PlaneWar::ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PlaneWar::ErrorCode>() {
  return ::PlaneWar::ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::PlaneWar::RedOpenStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PlaneWar::RedOpenStatus>() {
  return ::PlaneWar::RedOpenStatus_descriptor();
}
template <> struct is_proto_enum< ::PlaneWar::UpgradeRedResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PlaneWar::UpgradeRedResult>() {
  return ::PlaneWar::UpgradeRedResult_descriptor();
}
template <> struct is_proto_enum< ::PlaneWar::GrantRedStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PlaneWar::GrantRedStatus>() {
  return ::PlaneWar::GrantRedStatus_descriptor();
}
template <> struct is_proto_enum< ::PlaneWar::RedOpStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PlaneWar::RedOpStatus>() {
  return ::PlaneWar::RedOpStatus_descriptor();
}
template <> struct is_proto_enum< ::PlaneWar::ChestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PlaneWar::ChestType>() {
  return ::PlaneWar::ChestType_descriptor();
}
template <> struct is_proto_enum< ::PlaneWar::ChestAutoSelectOption> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PlaneWar::ChestAutoSelectOption>() {
  return ::PlaneWar::ChestAutoSelectOption_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PlaneWar_2eproto
