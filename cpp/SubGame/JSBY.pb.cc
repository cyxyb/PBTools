// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: JSBY.proto

#include "JSBY.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_JSBY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivityInfo_JSBY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_JSBY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelTowerMonster_JSBY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_JSBY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnectMonster_JSBY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_JSBY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DragonProps_JSBY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_JSBY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeroMoney_JSBY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_JSBY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LockTargetInfo_JSBY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_JSBY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MaterialsInfo_JSBY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_JSBY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PoisonBombLocation_JSBY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_JSBY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PoisonbombConvert_JSBY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_JSBY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PoisonbombType_JSBY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_JSBY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PropsInfo_JSBY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_JSBY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RewardInfo_JSBY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_JSBY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShopInfo_JSBY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_JSBY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpecialAttackInfo_JSBY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_JSBY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpecialMonsterAttack_JSBY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_JSBY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SwitchInfo_JSBY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_JSBY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TablePlayerInfo_JSBY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_JSBY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableState_JSBY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_JSBY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TowerGuideInfo_JSBY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_JSBY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TowerHeroAtkInfo_JSBY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_JSBY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TowerHeroInfo_JSBY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_JSBY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TowerMonster_JSBY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_JSBY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrusteeshipInfo_JSBY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_JSBY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrusteeshipMoney_JSBY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_JSBY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserBomTimes_JSBY_2eproto;
class HeroInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeroInfo> _instance;
} _HeroInfo_default_instance_;
class CSLoginGameWithTokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSLoginGameWithToken> _instance;
} _CSLoginGameWithToken_default_instance_;
class SCLoginGameWithTokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCLoginGameWithToken> _instance;
} _SCLoginGameWithToken_default_instance_;
class UserBomTimesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserBomTimes> _instance;
} _UserBomTimes_default_instance_;
class SpecialMonsterAttackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpecialMonsterAttack> _instance;
} _SpecialMonsterAttack_default_instance_;
class CSRequestAttackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSRequestAttack> _instance;
} _CSRequestAttack_default_instance_;
class SCRequestAttackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCRequestAttack> _instance;
} _SCRequestAttack_default_instance_;
class SpecialAttackInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpecialAttackInfo> _instance;
} _SpecialAttackInfo_default_instance_;
class SCSyncMoneyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSyncMoney> _instance;
} _SCSyncMoney_default_instance_;
class SCPoisonBomTimesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPoisonBomTimes> _instance;
} _SCPoisonBomTimes_default_instance_;
class CSChangePoisonBomTimesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSChangePoisonBomTimes> _instance;
} _CSChangePoisonBomTimes_default_instance_;
class SCChangePoisonBomTimesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCChangePoisonBomTimes> _instance;
} _SCChangePoisonBomTimes_default_instance_;
class CSEnterStageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSEnterStage> _instance;
} _CSEnterStage_default_instance_;
class SCEnterStageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCEnterStage> _instance;
} _SCEnterStage_default_instance_;
class CSKeepRatioDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSKeepRatio> _instance;
} _CSKeepRatio_default_instance_;
class SCKeepRatioDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCKeepRatio> _instance;
} _SCKeepRatio_default_instance_;
class TrusteeshipInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrusteeshipInfo> _instance;
} _TrusteeshipInfo_default_instance_;
class CSGetTrusteeshipDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSGetTrusteeship> _instance;
} _CSGetTrusteeship_default_instance_;
class SCGetTrusteeshipDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGetTrusteeship> _instance;
} _SCGetTrusteeship_default_instance_;
class CSSetTrusteeshipDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSetTrusteeship> _instance;
} _CSSetTrusteeship_default_instance_;
class SCSetTrusteeshipDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSetTrusteeship> _instance;
} _SCSetTrusteeship_default_instance_;
class TrusteeshipMoneyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrusteeshipMoney> _instance;
} _TrusteeshipMoney_default_instance_;
class CSEndTrusteeshipDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSEndTrusteeship> _instance;
} _CSEndTrusteeship_default_instance_;
class SCEndTrusteeshipDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCEndTrusteeship> _instance;
} _SCEndTrusteeship_default_instance_;
class CSGetVersionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSGetVersion> _instance;
} _CSGetVersion_default_instance_;
class SCGetVersionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGetVersion> _instance;
} _SCGetVersion_default_instance_;
class ActivityInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivityInfo> _instance;
} _ActivityInfo_default_instance_;
class CSActivityInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSActivityInfo> _instance;
} _CSActivityInfo_default_instance_;
class SCActivityInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCActivityInfo> _instance;
} _SCActivityInfo_default_instance_;
class SCNotifyActivityInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCNotifyActivityInfo> _instance;
} _SCNotifyActivityInfo_default_instance_;
class CSGetActivityAwardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSGetActivityAward> _instance;
} _CSGetActivityAward_default_instance_;
class SCGetActivityAwardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGetActivityAward> _instance;
} _SCGetActivityAward_default_instance_;
class CSButtonRecordsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSButtonRecords> _instance;
} _CSButtonRecords_default_instance_;
class SCButtonRecordsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCButtonRecords> _instance;
} _SCButtonRecords_default_instance_;
class TowerHeroInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TowerHeroInfo> _instance;
} _TowerHeroInfo_default_instance_;
class TowerHeroAtkInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TowerHeroAtkInfo> _instance;
} _TowerHeroAtkInfo_default_instance_;
class TablePlayerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TablePlayerInfo> _instance;
} _TablePlayerInfo_default_instance_;
class SCNotifyTowerTablePlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCNotifyTowerTablePlayer> _instance;
} _SCNotifyTowerTablePlayer_default_instance_;
class SCLeaveTowerTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCLeaveTowerTable> _instance;
} _SCLeaveTowerTable_default_instance_;
class TowerMonsterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TowerMonster> _instance;
} _TowerMonster_default_instance_;
class ChannelTowerMonsterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelTowerMonster> _instance;
} _ChannelTowerMonster_default_instance_;
class SCGetTowerMonsterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGetTowerMonster> _instance;
} _SCGetTowerMonster_default_instance_;
class CSGetTowerMonsterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSGetTowerMonster> _instance;
} _CSGetTowerMonster_default_instance_;
class SCSyncGetTowerMonsterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSyncGetTowerMonster> _instance;
} _SCSyncGetTowerMonster_default_instance_;
class SCTowerMonsterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCTowerMonster> _instance;
} _SCTowerMonster_default_instance_;
class CSTowerHeroAtkInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSTowerHeroAtkInfo> _instance;
} _CSTowerHeroAtkInfo_default_instance_;
class SCTowerHeroAtkInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCTowerHeroAtkInfo> _instance;
} _SCTowerHeroAtkInfo_default_instance_;
class CSTowerUpdateHeroDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSTowerUpdateHero> _instance;
} _CSTowerUpdateHero_default_instance_;
class SCTowerUpdateHeroDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCTowerUpdateHero> _instance;
} _SCTowerUpdateHero_default_instance_;
class SCPushTowerUpdateHeroDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPushTowerUpdateHero> _instance;
} _SCPushTowerUpdateHero_default_instance_;
class LockTargetInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LockTargetInfo> _instance;
} _LockTargetInfo_default_instance_;
class CSTowerPlayerLockTargetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSTowerPlayerLockTarget> _instance;
} _CSTowerPlayerLockTarget_default_instance_;
class SCTowerPlayerLockTargetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCTowerPlayerLockTarget> _instance;
} _SCTowerPlayerLockTarget_default_instance_;
class CSChangeBackgroundDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSChangeBackground> _instance;
} _CSChangeBackground_default_instance_;
class SCChangeBackgroundDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCChangeBackground> _instance;
} _SCChangeBackground_default_instance_;
class CSTowerMonsterExitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSTowerMonsterExit> _instance;
} _CSTowerMonsterExit_default_instance_;
class SCTowerMonsterExitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCTowerMonsterExit> _instance;
} _SCTowerMonsterExit_default_instance_;
class CSGetCurrentTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSGetCurrentTime> _instance;
} _CSGetCurrentTime_default_instance_;
class SCGetCurrentTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGetCurrentTime> _instance;
} _SCGetCurrentTime_default_instance_;
class TowerGuideInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TowerGuideInfo> _instance;
} _TowerGuideInfo_default_instance_;
class CSGetTowerStepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSGetTowerStep> _instance;
} _CSGetTowerStep_default_instance_;
class SCGetTowerGuideDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGetTowerGuide> _instance;
} _SCGetTowerGuide_default_instance_;
class CSSetTowerStepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSetTowerStep> _instance;
} _CSSetTowerStep_default_instance_;
class SCSetTowerStepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSetTowerStep> _instance;
} _SCSetTowerStep_default_instance_;
class CSTowerExchangeHeroDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSTowerExchangeHero> _instance;
} _CSTowerExchangeHero_default_instance_;
class SCTowerExchangeHeroDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCTowerExchangeHero> _instance;
} _SCTowerExchangeHero_default_instance_;
class SCLeaveTowerTableCountdownDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCLeaveTowerTableCountdown> _instance;
} _SCLeaveTowerTableCountdown_default_instance_;
class PoisonBombLocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PoisonBombLocation> _instance;
} _PoisonBombLocation_default_instance_;
class CSPoisonBombLocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSPoisonBombLocation> _instance;
} _CSPoisonBombLocation_default_instance_;
class SCPoisonBombLocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPoisonBombLocation> _instance;
} _SCPoisonBombLocation_default_instance_;
class PoisonbombConvertDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PoisonbombConvert> _instance;
} _PoisonbombConvert_default_instance_;
class SCPoisonBombConvertDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPoisonBombConvert> _instance;
} _SCPoisonBombConvert_default_instance_;
class PoisonbombTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PoisonbombType> _instance;
} _PoisonbombType_default_instance_;
class SCPoisonbombTypesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPoisonbombTypes> _instance;
} _SCPoisonbombTypes_default_instance_;
class CSDragonReleaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSDragonRelease> _instance;
} _CSDragonRelease_default_instance_;
class SCDragonReleaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCDragonRelease> _instance;
} _SCDragonRelease_default_instance_;
class SCPushDragonReleaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPushDragonRelease> _instance;
} _SCPushDragonRelease_default_instance_;
class SCPushDragonEndDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPushDragonEnd> _instance;
} _SCPushDragonEnd_default_instance_;
class SCPushSelfDragonStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPushSelfDragonState> _instance;
} _SCPushSelfDragonState_default_instance_;
class CSOneKeyUpdateHeroDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSOneKeyUpdateHero> _instance;
} _CSOneKeyUpdateHero_default_instance_;
class SCOneKeyUpdateHeroDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCOneKeyUpdateHero> _instance;
} _SCOneKeyUpdateHero_default_instance_;
class SCPushGhostDragonReleaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPushGhostDragonRelease> _instance;
} _SCPushGhostDragonRelease_default_instance_;
class SCPushGhostDragonEndDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPushGhostDragonEnd> _instance;
} _SCPushGhostDragonEnd_default_instance_;
class SCPushSelfGhostDragonStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPushSelfGhostDragonState> _instance;
} _SCPushSelfGhostDragonState_default_instance_;
class HeroMoneyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeroMoney> _instance;
} _HeroMoney_default_instance_;
class SCPushSyncHeroMoneyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPushSyncHeroMoney> _instance;
} _SCPushSyncHeroMoney_default_instance_;
class SCPushMonsterDeadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPushMonsterDead> _instance;
} _SCPushMonsterDead_default_instance_;
class CSDebugDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSDebugData> _instance;
} _CSDebugData_default_instance_;
class SCDebugDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCDebugData> _instance;
} _SCDebugData_default_instance_;
class SCPushMonsterBuffDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPushMonsterBuff> _instance;
} _SCPushMonsterBuff_default_instance_;
class TableStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TableState> _instance;
} _TableState_default_instance_;
class CSGetTableIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSGetTableId> _instance;
} _CSGetTableId_default_instance_;
class SCGetTableIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGetTableId> _instance;
} _SCGetTableId_default_instance_;
class SCPlayerVipLevelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPlayerVipLevel> _instance;
} _SCPlayerVipLevel_default_instance_;
class DragonPropsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DragonProps> _instance;
} _DragonProps_default_instance_;
class CSGetDragonPropsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSGetDragonProps> _instance;
} _CSGetDragonProps_default_instance_;
class SCGetDragonPropsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGetDragonProps> _instance;
} _SCGetDragonProps_default_instance_;
class CSEquipDragonPropsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSEquipDragonProps> _instance;
} _CSEquipDragonProps_default_instance_;
class SCEquipDragonPropsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCEquipDragonProps> _instance;
} _SCEquipDragonProps_default_instance_;
class SCPushDragonPropsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPushDragonProps> _instance;
} _SCPushDragonProps_default_instance_;
class ShopInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShopInfo> _instance;
} _ShopInfo_default_instance_;
class CSGetShopInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSGetShopInfo> _instance;
} _CSGetShopInfo_default_instance_;
class SCGetShopInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGetShopInfo> _instance;
} _SCGetShopInfo_default_instance_;
class PropsInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PropsInfo> _instance;
} _PropsInfo_default_instance_;
class SCPushPropsInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPushPropsInfo> _instance;
} _SCPushPropsInfo_default_instance_;
class CSGetMaterialsInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSGetMaterialsInfo> _instance;
} _CSGetMaterialsInfo_default_instance_;
class SCGetMaterialsInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGetMaterialsInfo> _instance;
} _SCGetMaterialsInfo_default_instance_;
class CSExchangeBoxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSExchangeBox> _instance;
} _CSExchangeBox_default_instance_;
class RewardInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RewardInfo> _instance;
} _RewardInfo_default_instance_;
class SCExchangeBoxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCExchangeBox> _instance;
} _SCExchangeBox_default_instance_;
class CSDoublingBoxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSDoublingBox> _instance;
} _CSDoublingBox_default_instance_;
class SCDoublingBoxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCDoublingBox> _instance;
} _SCDoublingBox_default_instance_;
class CSShopBuyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSShopBuy> _instance;
} _CSShopBuy_default_instance_;
class SCShopBuyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCShopBuy> _instance;
} _SCShopBuy_default_instance_;
class MaterialsInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MaterialsInfo> _instance;
} _MaterialsInfo_default_instance_;
class SCPushDropMaterialsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPushDropMaterials> _instance;
} _SCPushDropMaterials_default_instance_;
class SCPushBalloonTimesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPushBalloonTimes> _instance;
} _SCPushBalloonTimes_default_instance_;
class SwitchInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SwitchInfo> _instance;
} _SwitchInfo_default_instance_;
class SCFunctionSwitchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCFunctionSwitch> _instance;
} _SCFunctionSwitch_default_instance_;
class CSSealConvertMoneyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSealConvertMoney> _instance;
} _CSSealConvertMoney_default_instance_;
class SCSealConvertMoneyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSealConvertMoney> _instance;
} _SCSealConvertMoney_default_instance_;
class ConnectMonsterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectMonster> _instance;
} _ConnectMonster_default_instance_;
class SCPushConnectMonsterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPushConnectMonster> _instance;
} _SCPushConnectMonster_default_instance_;
class SCGiantUpgradeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGiantUpgrade> _instance;
} _SCGiantUpgrade_default_instance_;
class SCPushGiantEndDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPushGiantEnd> _instance;
} _SCPushGiantEnd_default_instance_;
class SCDropCardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCDropCard> _instance;
} _SCDropCard_default_instance_;
class SCAcquireSealDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCAcquireSeal> _instance;
} _SCAcquireSeal_default_instance_;
class FreshMoneyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FreshMoney> _instance;
} _FreshMoney_default_instance_;
class ShutdownServiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShutdownService> _instance;
} _ShutdownService_default_instance_;
static void InitDefaultsscc_info_ActivityInfo_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ActivityInfo_default_instance_;
    new (ptr) ::ActivityInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivityInfo_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActivityInfo_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_CSActivityInfo_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSActivityInfo_default_instance_;
    new (ptr) ::CSActivityInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSActivityInfo_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSActivityInfo_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_CSButtonRecords_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSButtonRecords_default_instance_;
    new (ptr) ::CSButtonRecords();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSButtonRecords_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSButtonRecords_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_CSChangeBackground_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSChangeBackground_default_instance_;
    new (ptr) ::CSChangeBackground();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSChangeBackground_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSChangeBackground_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_CSChangePoisonBomTimes_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSChangePoisonBomTimes_default_instance_;
    new (ptr) ::CSChangePoisonBomTimes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSChangePoisonBomTimes_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSChangePoisonBomTimes_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_CSDebugData_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSDebugData_default_instance_;
    new (ptr) ::CSDebugData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSDebugData_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSDebugData_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_CSDoublingBox_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSDoublingBox_default_instance_;
    new (ptr) ::CSDoublingBox();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSDoublingBox_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSDoublingBox_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_CSDragonRelease_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSDragonRelease_default_instance_;
    new (ptr) ::CSDragonRelease();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSDragonRelease_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSDragonRelease_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_CSEndTrusteeship_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSEndTrusteeship_default_instance_;
    new (ptr) ::CSEndTrusteeship();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSEndTrusteeship_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSEndTrusteeship_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_CSEnterStage_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSEnterStage_default_instance_;
    new (ptr) ::CSEnterStage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSEnterStage_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSEnterStage_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_CSEquipDragonProps_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSEquipDragonProps_default_instance_;
    new (ptr) ::CSEquipDragonProps();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSEquipDragonProps_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSEquipDragonProps_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_CSExchangeBox_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSExchangeBox_default_instance_;
    new (ptr) ::CSExchangeBox();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSExchangeBox_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSExchangeBox_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_CSGetActivityAward_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSGetActivityAward_default_instance_;
    new (ptr) ::CSGetActivityAward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSGetActivityAward_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSGetActivityAward_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_CSGetCurrentTime_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSGetCurrentTime_default_instance_;
    new (ptr) ::CSGetCurrentTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSGetCurrentTime_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSGetCurrentTime_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_CSGetDragonProps_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSGetDragonProps_default_instance_;
    new (ptr) ::CSGetDragonProps();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSGetDragonProps_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSGetDragonProps_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_CSGetMaterialsInfo_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSGetMaterialsInfo_default_instance_;
    new (ptr) ::CSGetMaterialsInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSGetMaterialsInfo_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSGetMaterialsInfo_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_CSGetShopInfo_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSGetShopInfo_default_instance_;
    new (ptr) ::CSGetShopInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSGetShopInfo_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSGetShopInfo_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_CSGetTableId_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSGetTableId_default_instance_;
    new (ptr) ::CSGetTableId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSGetTableId_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSGetTableId_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_CSGetTowerMonster_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSGetTowerMonster_default_instance_;
    new (ptr) ::CSGetTowerMonster();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CSGetTowerMonster_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CSGetTowerMonster_JSBY_2eproto}, {
      &scc_info_ChannelTowerMonster_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_CSGetTowerStep_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSGetTowerStep_default_instance_;
    new (ptr) ::CSGetTowerStep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSGetTowerStep_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSGetTowerStep_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_CSGetTrusteeship_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSGetTrusteeship_default_instance_;
    new (ptr) ::CSGetTrusteeship();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSGetTrusteeship_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSGetTrusteeship_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_CSGetVersion_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSGetVersion_default_instance_;
    new (ptr) ::CSGetVersion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSGetVersion_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSGetVersion_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_CSKeepRatio_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSKeepRatio_default_instance_;
    new (ptr) ::CSKeepRatio();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSKeepRatio_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSKeepRatio_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_CSLoginGameWithToken_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSLoginGameWithToken_default_instance_;
    new (ptr) ::CSLoginGameWithToken();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSLoginGameWithToken_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSLoginGameWithToken_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_CSOneKeyUpdateHero_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSOneKeyUpdateHero_default_instance_;
    new (ptr) ::CSOneKeyUpdateHero();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSOneKeyUpdateHero_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSOneKeyUpdateHero_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_CSPoisonBombLocation_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSPoisonBombLocation_default_instance_;
    new (ptr) ::CSPoisonBombLocation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CSPoisonBombLocation_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CSPoisonBombLocation_JSBY_2eproto}, {
      &scc_info_PoisonBombLocation_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_CSRequestAttack_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSRequestAttack_default_instance_;
    new (ptr) ::CSRequestAttack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CSRequestAttack_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CSRequestAttack_JSBY_2eproto}, {
      &scc_info_SpecialMonsterAttack_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_CSSealConvertMoney_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSSealConvertMoney_default_instance_;
    new (ptr) ::CSSealConvertMoney();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSSealConvertMoney_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSSealConvertMoney_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_CSSetTowerStep_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSSetTowerStep_default_instance_;
    new (ptr) ::CSSetTowerStep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CSSetTowerStep_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CSSetTowerStep_JSBY_2eproto}, {
      &scc_info_TowerGuideInfo_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_CSSetTrusteeship_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSSetTrusteeship_default_instance_;
    new (ptr) ::CSSetTrusteeship();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CSSetTrusteeship_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CSSetTrusteeship_JSBY_2eproto}, {
      &scc_info_TrusteeshipInfo_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_CSShopBuy_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSShopBuy_default_instance_;
    new (ptr) ::CSShopBuy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSShopBuy_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSShopBuy_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_CSTowerExchangeHero_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSTowerExchangeHero_default_instance_;
    new (ptr) ::CSTowerExchangeHero();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSTowerExchangeHero_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSTowerExchangeHero_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_CSTowerHeroAtkInfo_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSTowerHeroAtkInfo_default_instance_;
    new (ptr) ::CSTowerHeroAtkInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CSTowerHeroAtkInfo_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CSTowerHeroAtkInfo_JSBY_2eproto}, {
      &scc_info_TowerHeroAtkInfo_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_CSTowerMonsterExit_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSTowerMonsterExit_default_instance_;
    new (ptr) ::CSTowerMonsterExit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSTowerMonsterExit_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSTowerMonsterExit_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_CSTowerPlayerLockTarget_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSTowerPlayerLockTarget_default_instance_;
    new (ptr) ::CSTowerPlayerLockTarget();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CSTowerPlayerLockTarget_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CSTowerPlayerLockTarget_JSBY_2eproto}, {
      &scc_info_LockTargetInfo_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_CSTowerUpdateHero_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSTowerUpdateHero_default_instance_;
    new (ptr) ::CSTowerUpdateHero();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CSTowerUpdateHero_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CSTowerUpdateHero_JSBY_2eproto}, {
      &scc_info_TowerHeroInfo_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_ChannelTowerMonster_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ChannelTowerMonster_default_instance_;
    new (ptr) ::ChannelTowerMonster();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelTowerMonster_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChannelTowerMonster_JSBY_2eproto}, {
      &scc_info_TowerMonster_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_ConnectMonster_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConnectMonster_default_instance_;
    new (ptr) ::ConnectMonster();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnectMonster_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConnectMonster_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_DragonProps_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DragonProps_default_instance_;
    new (ptr) ::DragonProps();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DragonProps_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DragonProps_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_FreshMoney_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FreshMoney_default_instance_;
    new (ptr) ::FreshMoney();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FreshMoney_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FreshMoney_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_HeroInfo_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HeroInfo_default_instance_;
    new (ptr) ::HeroInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeroInfo_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HeroInfo_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_HeroMoney_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HeroMoney_default_instance_;
    new (ptr) ::HeroMoney();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeroMoney_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HeroMoney_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_LockTargetInfo_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LockTargetInfo_default_instance_;
    new (ptr) ::LockTargetInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LockTargetInfo_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LockTargetInfo_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_MaterialsInfo_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MaterialsInfo_default_instance_;
    new (ptr) ::MaterialsInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MaterialsInfo_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MaterialsInfo_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_PoisonBombLocation_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PoisonBombLocation_default_instance_;
    new (ptr) ::PoisonBombLocation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PoisonBombLocation_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PoisonBombLocation_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_PoisonbombConvert_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PoisonbombConvert_default_instance_;
    new (ptr) ::PoisonbombConvert();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PoisonbombConvert_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PoisonbombConvert_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_PoisonbombType_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PoisonbombType_default_instance_;
    new (ptr) ::PoisonbombType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PoisonbombType_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PoisonbombType_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_PropsInfo_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PropsInfo_default_instance_;
    new (ptr) ::PropsInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PropsInfo_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PropsInfo_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_RewardInfo_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RewardInfo_default_instance_;
    new (ptr) ::RewardInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RewardInfo_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RewardInfo_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SCAcquireSeal_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCAcquireSeal_default_instance_;
    new (ptr) ::SCAcquireSeal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCAcquireSeal_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCAcquireSeal_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SCActivityInfo_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCActivityInfo_default_instance_;
    new (ptr) ::SCActivityInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCActivityInfo_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCActivityInfo_JSBY_2eproto}, {
      &scc_info_ActivityInfo_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCButtonRecords_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCButtonRecords_default_instance_;
    new (ptr) ::SCButtonRecords();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCButtonRecords_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCButtonRecords_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SCChangeBackground_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCChangeBackground_default_instance_;
    new (ptr) ::SCChangeBackground();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCChangeBackground_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCChangeBackground_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SCChangePoisonBomTimes_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCChangePoisonBomTimes_default_instance_;
    new (ptr) ::SCChangePoisonBomTimes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCChangePoisonBomTimes_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCChangePoisonBomTimes_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SCDebugData_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCDebugData_default_instance_;
    new (ptr) ::SCDebugData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCDebugData_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCDebugData_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SCDoublingBox_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCDoublingBox_default_instance_;
    new (ptr) ::SCDoublingBox();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCDoublingBox_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCDoublingBox_JSBY_2eproto}, {
      &scc_info_RewardInfo_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCDragonRelease_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCDragonRelease_default_instance_;
    new (ptr) ::SCDragonRelease();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCDragonRelease_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCDragonRelease_JSBY_2eproto}, {
      &scc_info_SpecialAttackInfo_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCDropCard_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCDropCard_default_instance_;
    new (ptr) ::SCDropCard();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCDropCard_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCDropCard_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SCEndTrusteeship_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCEndTrusteeship_default_instance_;
    new (ptr) ::SCEndTrusteeship();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCEndTrusteeship_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCEndTrusteeship_JSBY_2eproto}, {
      &scc_info_TrusteeshipMoney_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCEnterStage_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCEnterStage_default_instance_;
    new (ptr) ::SCEnterStage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCEnterStage_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCEnterStage_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SCEquipDragonProps_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCEquipDragonProps_default_instance_;
    new (ptr) ::SCEquipDragonProps();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCEquipDragonProps_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCEquipDragonProps_JSBY_2eproto}, {
      &scc_info_DragonProps_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCExchangeBox_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCExchangeBox_default_instance_;
    new (ptr) ::SCExchangeBox();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCExchangeBox_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCExchangeBox_JSBY_2eproto}, {
      &scc_info_RewardInfo_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCFunctionSwitch_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCFunctionSwitch_default_instance_;
    new (ptr) ::SCFunctionSwitch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCFunctionSwitch_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCFunctionSwitch_JSBY_2eproto}, {
      &scc_info_SwitchInfo_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCGetActivityAward_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCGetActivityAward_default_instance_;
    new (ptr) ::SCGetActivityAward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCGetActivityAward_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCGetActivityAward_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SCGetCurrentTime_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCGetCurrentTime_default_instance_;
    new (ptr) ::SCGetCurrentTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCGetCurrentTime_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCGetCurrentTime_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SCGetDragonProps_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCGetDragonProps_default_instance_;
    new (ptr) ::SCGetDragonProps();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCGetDragonProps_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCGetDragonProps_JSBY_2eproto}, {
      &scc_info_DragonProps_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCGetMaterialsInfo_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCGetMaterialsInfo_default_instance_;
    new (ptr) ::SCGetMaterialsInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCGetMaterialsInfo_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCGetMaterialsInfo_JSBY_2eproto}, {
      &scc_info_PropsInfo_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCGetShopInfo_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCGetShopInfo_default_instance_;
    new (ptr) ::SCGetShopInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCGetShopInfo_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCGetShopInfo_JSBY_2eproto}, {
      &scc_info_ShopInfo_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCGetTableId_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCGetTableId_default_instance_;
    new (ptr) ::SCGetTableId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCGetTableId_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCGetTableId_JSBY_2eproto}, {
      &scc_info_TableState_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCGetTowerGuide_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCGetTowerGuide_default_instance_;
    new (ptr) ::SCGetTowerGuide();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCGetTowerGuide_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCGetTowerGuide_JSBY_2eproto}, {
      &scc_info_TowerGuideInfo_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCGetTowerMonster_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCGetTowerMonster_default_instance_;
    new (ptr) ::SCGetTowerMonster();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCGetTowerMonster_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCGetTowerMonster_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SCGetTrusteeship_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCGetTrusteeship_default_instance_;
    new (ptr) ::SCGetTrusteeship();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCGetTrusteeship_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCGetTrusteeship_JSBY_2eproto}, {
      &scc_info_TrusteeshipInfo_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCGetVersion_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCGetVersion_default_instance_;
    new (ptr) ::SCGetVersion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCGetVersion_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCGetVersion_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SCGiantUpgrade_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCGiantUpgrade_default_instance_;
    new (ptr) ::SCGiantUpgrade();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCGiantUpgrade_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCGiantUpgrade_JSBY_2eproto}, {
      &scc_info_SpecialAttackInfo_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCKeepRatio_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCKeepRatio_default_instance_;
    new (ptr) ::SCKeepRatio();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCKeepRatio_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCKeepRatio_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SCLeaveTowerTable_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCLeaveTowerTable_default_instance_;
    new (ptr) ::SCLeaveTowerTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCLeaveTowerTable_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCLeaveTowerTable_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SCLeaveTowerTableCountdown_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCLeaveTowerTableCountdown_default_instance_;
    new (ptr) ::SCLeaveTowerTableCountdown();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCLeaveTowerTableCountdown_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCLeaveTowerTableCountdown_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SCLoginGameWithToken_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCLoginGameWithToken_default_instance_;
    new (ptr) ::SCLoginGameWithToken();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCLoginGameWithToken_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCLoginGameWithToken_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SCNotifyActivityInfo_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCNotifyActivityInfo_default_instance_;
    new (ptr) ::SCNotifyActivityInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCNotifyActivityInfo_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCNotifyActivityInfo_JSBY_2eproto}, {
      &scc_info_ActivityInfo_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCNotifyTowerTablePlayer_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCNotifyTowerTablePlayer_default_instance_;
    new (ptr) ::SCNotifyTowerTablePlayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCNotifyTowerTablePlayer_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCNotifyTowerTablePlayer_JSBY_2eproto}, {
      &scc_info_TablePlayerInfo_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCOneKeyUpdateHero_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCOneKeyUpdateHero_default_instance_;
    new (ptr) ::SCOneKeyUpdateHero();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCOneKeyUpdateHero_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCOneKeyUpdateHero_JSBY_2eproto}, {
      &scc_info_TowerHeroInfo_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCPlayerVipLevel_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCPlayerVipLevel_default_instance_;
    new (ptr) ::SCPlayerVipLevel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCPlayerVipLevel_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCPlayerVipLevel_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SCPoisonBomTimes_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCPoisonBomTimes_default_instance_;
    new (ptr) ::SCPoisonBomTimes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCPoisonBomTimes_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCPoisonBomTimes_JSBY_2eproto}, {
      &scc_info_SpecialAttackInfo_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCPoisonBombConvert_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCPoisonBombConvert_default_instance_;
    new (ptr) ::SCPoisonBombConvert();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCPoisonBombConvert_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCPoisonBombConvert_JSBY_2eproto}, {
      &scc_info_PoisonbombConvert_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCPoisonBombLocation_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCPoisonBombLocation_default_instance_;
    new (ptr) ::SCPoisonBombLocation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCPoisonBombLocation_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCPoisonBombLocation_JSBY_2eproto}, {
      &scc_info_PoisonBombLocation_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCPoisonbombTypes_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCPoisonbombTypes_default_instance_;
    new (ptr) ::SCPoisonbombTypes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCPoisonbombTypes_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCPoisonbombTypes_JSBY_2eproto}, {
      &scc_info_PoisonbombType_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCPushBalloonTimes_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCPushBalloonTimes_default_instance_;
    new (ptr) ::SCPushBalloonTimes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCPushBalloonTimes_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCPushBalloonTimes_JSBY_2eproto}, {
      &scc_info_SpecialAttackInfo_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCPushConnectMonster_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCPushConnectMonster_default_instance_;
    new (ptr) ::SCPushConnectMonster();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCPushConnectMonster_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCPushConnectMonster_JSBY_2eproto}, {
      &scc_info_ConnectMonster_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCPushDragonEnd_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCPushDragonEnd_default_instance_;
    new (ptr) ::SCPushDragonEnd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCPushDragonEnd_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCPushDragonEnd_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SCPushDragonProps_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCPushDragonProps_default_instance_;
    new (ptr) ::SCPushDragonProps();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCPushDragonProps_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCPushDragonProps_JSBY_2eproto}, {
      &scc_info_DragonProps_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCPushDragonRelease_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCPushDragonRelease_default_instance_;
    new (ptr) ::SCPushDragonRelease();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCPushDragonRelease_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCPushDragonRelease_JSBY_2eproto}, {
      &scc_info_SpecialAttackInfo_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCPushDropMaterials_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCPushDropMaterials_default_instance_;
    new (ptr) ::SCPushDropMaterials();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCPushDropMaterials_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCPushDropMaterials_JSBY_2eproto}, {
      &scc_info_MaterialsInfo_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCPushGhostDragonEnd_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCPushGhostDragonEnd_default_instance_;
    new (ptr) ::SCPushGhostDragonEnd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCPushGhostDragonEnd_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCPushGhostDragonEnd_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SCPushGhostDragonRelease_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCPushGhostDragonRelease_default_instance_;
    new (ptr) ::SCPushGhostDragonRelease();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCPushGhostDragonRelease_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCPushGhostDragonRelease_JSBY_2eproto}, {
      &scc_info_SpecialAttackInfo_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCPushGiantEnd_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCPushGiantEnd_default_instance_;
    new (ptr) ::SCPushGiantEnd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCPushGiantEnd_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCPushGiantEnd_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SCPushMonsterBuff_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCPushMonsterBuff_default_instance_;
    new (ptr) ::SCPushMonsterBuff();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCPushMonsterBuff_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCPushMonsterBuff_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SCPushMonsterDead_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCPushMonsterDead_default_instance_;
    new (ptr) ::SCPushMonsterDead();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCPushMonsterDead_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCPushMonsterDead_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SCPushPropsInfo_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCPushPropsInfo_default_instance_;
    new (ptr) ::SCPushPropsInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCPushPropsInfo_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCPushPropsInfo_JSBY_2eproto}, {
      &scc_info_PropsInfo_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCPushSelfDragonState_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCPushSelfDragonState_default_instance_;
    new (ptr) ::SCPushSelfDragonState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCPushSelfDragonState_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCPushSelfDragonState_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SCPushSelfGhostDragonState_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCPushSelfGhostDragonState_default_instance_;
    new (ptr) ::SCPushSelfGhostDragonState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCPushSelfGhostDragonState_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCPushSelfGhostDragonState_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SCPushSyncHeroMoney_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCPushSyncHeroMoney_default_instance_;
    new (ptr) ::SCPushSyncHeroMoney();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCPushSyncHeroMoney_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCPushSyncHeroMoney_JSBY_2eproto}, {
      &scc_info_HeroMoney_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCPushTowerUpdateHero_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCPushTowerUpdateHero_default_instance_;
    new (ptr) ::SCPushTowerUpdateHero();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCPushTowerUpdateHero_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCPushTowerUpdateHero_JSBY_2eproto}, {
      &scc_info_TowerHeroInfo_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCRequestAttack_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCRequestAttack_default_instance_;
    new (ptr) ::SCRequestAttack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCRequestAttack_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCRequestAttack_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SCSealConvertMoney_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCSealConvertMoney_default_instance_;
    new (ptr) ::SCSealConvertMoney();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCSealConvertMoney_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCSealConvertMoney_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SCSetTowerStep_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCSetTowerStep_default_instance_;
    new (ptr) ::SCSetTowerStep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCSetTowerStep_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCSetTowerStep_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SCSetTrusteeship_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCSetTrusteeship_default_instance_;
    new (ptr) ::SCSetTrusteeship();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCSetTrusteeship_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCSetTrusteeship_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SCShopBuy_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCShopBuy_default_instance_;
    new (ptr) ::SCShopBuy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCShopBuy_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCShopBuy_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SCSyncGetTowerMonster_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCSyncGetTowerMonster_default_instance_;
    new (ptr) ::SCSyncGetTowerMonster();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCSyncGetTowerMonster_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCSyncGetTowerMonster_JSBY_2eproto}, {
      &scc_info_ChannelTowerMonster_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCSyncMoney_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCSyncMoney_default_instance_;
    new (ptr) ::SCSyncMoney();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SCSyncMoney_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SCSyncMoney_JSBY_2eproto}, {
      &scc_info_UserBomTimes_JSBY_2eproto.base,
      &scc_info_SpecialAttackInfo_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCTowerExchangeHero_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCTowerExchangeHero_default_instance_;
    new (ptr) ::SCTowerExchangeHero();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCTowerExchangeHero_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCTowerExchangeHero_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SCTowerHeroAtkInfo_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCTowerHeroAtkInfo_default_instance_;
    new (ptr) ::SCTowerHeroAtkInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCTowerHeroAtkInfo_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCTowerHeroAtkInfo_JSBY_2eproto}, {
      &scc_info_TowerHeroAtkInfo_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCTowerMonster_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCTowerMonster_default_instance_;
    new (ptr) ::SCTowerMonster();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCTowerMonster_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCTowerMonster_JSBY_2eproto}, {
      &scc_info_ChannelTowerMonster_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCTowerMonsterExit_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCTowerMonsterExit_default_instance_;
    new (ptr) ::SCTowerMonsterExit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCTowerMonsterExit_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCTowerMonsterExit_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SCTowerPlayerLockTarget_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCTowerPlayerLockTarget_default_instance_;
    new (ptr) ::SCTowerPlayerLockTarget();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCTowerPlayerLockTarget_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCTowerPlayerLockTarget_JSBY_2eproto}, {
      &scc_info_LockTargetInfo_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_SCTowerUpdateHero_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SCTowerUpdateHero_default_instance_;
    new (ptr) ::SCTowerUpdateHero();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCTowerUpdateHero_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCTowerUpdateHero_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_ShopInfo_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ShopInfo_default_instance_;
    new (ptr) ::ShopInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShopInfo_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShopInfo_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_ShutdownService_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ShutdownService_default_instance_;
    new (ptr) ::ShutdownService();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShutdownService_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShutdownService_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SpecialAttackInfo_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpecialAttackInfo_default_instance_;
    new (ptr) ::SpecialAttackInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpecialAttackInfo_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpecialAttackInfo_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SpecialMonsterAttack_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpecialMonsterAttack_default_instance_;
    new (ptr) ::SpecialMonsterAttack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpecialMonsterAttack_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpecialMonsterAttack_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_SwitchInfo_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SwitchInfo_default_instance_;
    new (ptr) ::SwitchInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SwitchInfo_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SwitchInfo_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_TablePlayerInfo_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TablePlayerInfo_default_instance_;
    new (ptr) ::TablePlayerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TablePlayerInfo_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TablePlayerInfo_JSBY_2eproto}, {
      &scc_info_TowerHeroInfo_JSBY_2eproto.base,}};

static void InitDefaultsscc_info_TableState_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TableState_default_instance_;
    new (ptr) ::TableState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableState_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TableState_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_TowerGuideInfo_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TowerGuideInfo_default_instance_;
    new (ptr) ::TowerGuideInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TowerGuideInfo_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TowerGuideInfo_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_TowerHeroAtkInfo_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TowerHeroAtkInfo_default_instance_;
    new (ptr) ::TowerHeroAtkInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TowerHeroAtkInfo_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TowerHeroAtkInfo_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_TowerHeroInfo_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TowerHeroInfo_default_instance_;
    new (ptr) ::TowerHeroInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TowerHeroInfo_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TowerHeroInfo_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_TowerMonster_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TowerMonster_default_instance_;
    new (ptr) ::TowerMonster();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TowerMonster_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TowerMonster_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_TrusteeshipInfo_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TrusteeshipInfo_default_instance_;
    new (ptr) ::TrusteeshipInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrusteeshipInfo_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrusteeshipInfo_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_TrusteeshipMoney_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TrusteeshipMoney_default_instance_;
    new (ptr) ::TrusteeshipMoney();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrusteeshipMoney_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrusteeshipMoney_JSBY_2eproto}, {}};

static void InitDefaultsscc_info_UserBomTimes_JSBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UserBomTimes_default_instance_;
    new (ptr) ::UserBomTimes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserBomTimes_JSBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserBomTimes_JSBY_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_JSBY_2eproto[129];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_JSBY_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_JSBY_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_JSBY_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HeroInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HeroInfo, id_),
  PROTOBUF_FIELD_OFFSET(::HeroInfo, level_),
  PROTOBUF_FIELD_OFFSET(::HeroInfo, position_),
  PROTOBUF_FIELD_OFFSET(::HeroInfo, unlock_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSLoginGameWithToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSLoginGameWithToken, playerid_),
  PROTOBUF_FIELD_OFFSET(::CSLoginGameWithToken, token_),
  PROTOBUF_FIELD_OFFSET(::CSLoginGameWithToken, clientversion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCLoginGameWithToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCLoginGameWithToken, money_),
  PROTOBUF_FIELD_OFFSET(::SCLoginGameWithToken, isfirstlogin_),
  PROTOBUF_FIELD_OFFSET(::SCLoginGameWithToken, useratio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserBomTimes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UserBomTimes, usepositionid_),
  PROTOBUF_FIELD_OFFSET(::UserBomTimes, usepositiontimes_),
  PROTOBUF_FIELD_OFFSET(::UserBomTimes, overbom_),
  PROTOBUF_FIELD_OFFSET(::UserBomTimes, allover_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpecialMonsterAttack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpecialMonsterAttack, positionid_),
  PROTOBUF_FIELD_OFFSET(::SpecialMonsterAttack, monsterid_),
  PROTOBUF_FIELD_OFFSET(::SpecialMonsterAttack, channelid_),
  PROTOBUF_FIELD_OFFSET(::SpecialMonsterAttack, processtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSRequestAttack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSRequestAttack, ratio_),
  PROTOBUF_FIELD_OFFSET(::CSRequestAttack, mode_),
  PROTOBUF_FIELD_OFFSET(::CSRequestAttack, monsterid_),
  PROTOBUF_FIELD_OFFSET(::CSRequestAttack, positionid_),
  PROTOBUF_FIELD_OFFSET(::CSRequestAttack, usepositionid_),
  PROTOBUF_FIELD_OFFSET(::CSRequestAttack, usepositiontimes_),
  PROTOBUF_FIELD_OFFSET(::CSRequestAttack, specialtype_),
  PROTOBUF_FIELD_OFFSET(::CSRequestAttack, specialinfo_),
  PROTOBUF_FIELD_OFFSET(::CSRequestAttack, dragonend_),
  PROTOBUF_FIELD_OFFSET(::CSRequestAttack, herouniqueid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCRequestAttack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpecialAttackInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpecialAttackInfo, killid_),
  PROTOBUF_FIELD_OFFSET(::SpecialAttackInfo, selfid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCSyncMoney, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCSyncMoney, money_),
  PROTOBUF_FIELD_OFFSET(::SCSyncMoney, monsterid_),
  PROTOBUF_FIELD_OFFSET(::SCSyncMoney, positionid_),
  PROTOBUF_FIELD_OFFSET(::SCSyncMoney, type_),
  PROTOBUF_FIELD_OFFSET(::SCSyncMoney, ratio_),
  PROTOBUF_FIELD_OFFSET(::SCSyncMoney, playerid_),
  PROTOBUF_FIELD_OFFSET(::SCSyncMoney, moneyvariation_),
  PROTOBUF_FIELD_OFFSET(::SCSyncMoney, bom_),
  PROTOBUF_FIELD_OFFSET(::SCSyncMoney, herouniqueid_),
  PROTOBUF_FIELD_OFFSET(::SCSyncMoney, attackinfo_),
  PROTOBUF_FIELD_OFFSET(::SCSyncMoney, eared_),
  PROTOBUF_FIELD_OFFSET(::SCSyncMoney, addratio_),
  PROTOBUF_FIELD_OFFSET(::SCSyncMoney, balloonratio_),
  PROTOBUF_FIELD_OFFSET(::SCSyncMoney, others_),
  PROTOBUF_FIELD_OFFSET(::SCSyncMoney, gianthitpower_),
  PROTOBUF_FIELD_OFFSET(::SCSyncMoney, mxlsealmoney_),
  PROTOBUF_FIELD_OFFSET(::SCSyncMoney, mxlsealaddawardratio_),
  PROTOBUF_FIELD_OFFSET(::SCSyncMoney, bearmultiple_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCPoisonBomTimes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCPoisonBomTimes, positionid_),
  PROTOBUF_FIELD_OFFSET(::SCPoisonBomTimes, times_),
  PROTOBUF_FIELD_OFFSET(::SCPoisonBomTimes, ratio_),
  PROTOBUF_FIELD_OFFSET(::SCPoisonBomTimes, addtimes_),
  PROTOBUF_FIELD_OFFSET(::SCPoisonBomTimes, killplayerid_),
  PROTOBUF_FIELD_OFFSET(::SCPoisonBomTimes, herouniqueid_),
  PROTOBUF_FIELD_OFFSET(::SCPoisonBomTimes, attackinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSChangePoisonBomTimes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSChangePoisonBomTimes, positionid_),
  PROTOBUF_FIELD_OFFSET(::CSChangePoisonBomTimes, usepositiontimes_),
  PROTOBUF_FIELD_OFFSET(::CSChangePoisonBomTimes, newpositionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCChangePoisonBomTimes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSEnterStage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSEnterStage, enter_),
  PROTOBUF_FIELD_OFFSET(::CSEnterStage, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCEnterStage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCEnterStage, useratio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSKeepRatio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSKeepRatio, ratio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCKeepRatio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TrusteeshipInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TrusteeshipInfo, istrusteeship_),
  PROTOBUF_FIELD_OFFSET(::TrusteeshipInfo, highsetvalue_),
  PROTOBUF_FIELD_OFFSET(::TrusteeshipInfo, highsetopen_),
  PROTOBUF_FIELD_OFFSET(::TrusteeshipInfo, lowsetvalue_),
  PROTOBUF_FIELD_OFFSET(::TrusteeshipInfo, lowsetopen_),
  PROTOBUF_FIELD_OFFSET(::TrusteeshipInfo, timesetvalue_),
  PROTOBUF_FIELD_OFFSET(::TrusteeshipInfo, timesetopen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSGetTrusteeship, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCGetTrusteeship, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCGetTrusteeship, info_),
  PROTOBUF_FIELD_OFFSET(::SCGetTrusteeship, lefttime_),
  PROTOBUF_FIELD_OFFSET(::SCGetTrusteeship, viplevel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSSetTrusteeship, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSSetTrusteeship, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCSetTrusteeship, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TrusteeshipMoney, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TrusteeshipMoney, monstertype_),
  PROTOBUF_FIELD_OFFSET(::TrusteeshipMoney, money_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSEndTrusteeship, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSEndTrusteeship, notify_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCEndTrusteeship, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCEndTrusteeship, info_),
  PROTOBUF_FIELD_OFFSET(::SCEndTrusteeship, totalmoney_),
  PROTOBUF_FIELD_OFFSET(::SCEndTrusteeship, totaltime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSGetVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCGetVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCGetVersion, isnew_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ActivityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ActivityInfo, id_),
  PROTOBUF_FIELD_OFFSET(::ActivityInfo, money_),
  PROTOBUF_FIELD_OFFSET(::ActivityInfo, enzyme_),
  PROTOBUF_FIELD_OFFSET(::ActivityInfo, name_),
  PROTOBUF_FIELD_OFFSET(::ActivityInfo, flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSActivityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCActivityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCActivityInfo, info_),
  PROTOBUF_FIELD_OFFSET(::SCActivityInfo, lefttime_),
  PROTOBUF_FIELD_OFFSET(::SCActivityInfo, begint32ime_),
  PROTOBUF_FIELD_OFFSET(::SCActivityInfo, endtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCNotifyActivityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCNotifyActivityInfo, info_),
  PROTOBUF_FIELD_OFFSET(::SCNotifyActivityInfo, lefttime_),
  PROTOBUF_FIELD_OFFSET(::SCNotifyActivityInfo, begint32ime_),
  PROTOBUF_FIELD_OFFSET(::SCNotifyActivityInfo, endtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSGetActivityAward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSGetActivityAward, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCGetActivityAward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCGetActivityAward, id_),
  PROTOBUF_FIELD_OFFSET(::SCGetActivityAward, flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSButtonRecords, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSButtonRecords, id_),
  PROTOBUF_FIELD_OFFSET(::CSButtonRecords, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCButtonRecords, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TowerHeroInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TowerHeroInfo, heroid_),
  PROTOBUF_FIELD_OFFSET(::TowerHeroInfo, positionid_),
  PROTOBUF_FIELD_OFFSET(::TowerHeroInfo, isatk_),
  PROTOBUF_FIELD_OFFSET(::TowerHeroInfo, timestamp_),
  PROTOBUF_FIELD_OFFSET(::TowerHeroInfo, targetpositionid_),
  PROTOBUF_FIELD_OFFSET(::TowerHeroInfo, uniqueid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TowerHeroAtkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TowerHeroAtkInfo, heropositionid_),
  PROTOBUF_FIELD_OFFSET(::TowerHeroAtkInfo, isatk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TablePlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TablePlayerInfo, chairid_),
  PROTOBUF_FIELD_OFFSET(::TablePlayerInfo, playerid_),
  PROTOBUF_FIELD_OFFSET(::TablePlayerInfo, money_),
  PROTOBUF_FIELD_OFFSET(::TablePlayerInfo, sex_),
  PROTOBUF_FIELD_OFFSET(::TablePlayerInfo, name_),
  PROTOBUF_FIELD_OFFSET(::TablePlayerInfo, head_),
  PROTOBUF_FIELD_OFFSET(::TablePlayerInfo, info_),
  PROTOBUF_FIELD_OFFSET(::TablePlayerInfo, moneyvariation_),
  PROTOBUF_FIELD_OFFSET(::TablePlayerInfo, viplevel_),
  PROTOBUF_FIELD_OFFSET(::TablePlayerInfo, isvip_),
  PROTOBUF_FIELD_OFFSET(::TablePlayerInfo, background_),
  PROTOBUF_FIELD_OFFSET(::TablePlayerInfo, effect_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCNotifyTowerTablePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCNotifyTowerTablePlayer, info_),
  PROTOBUF_FIELD_OFFSET(::SCNotifyTowerTablePlayer, tableid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCLeaveTowerTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCLeaveTowerTable, playerid_),
  PROTOBUF_FIELD_OFFSET(::SCLeaveTowerTable, isagainenter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TowerMonster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TowerMonster, position_),
  PROTOBUF_FIELD_OFFSET(::TowerMonster, processtime_),
  PROTOBUF_FIELD_OFFSET(::TowerMonster, readytime_),
  PROTOBUF_FIELD_OFFSET(::TowerMonster, monsterid_),
  PROTOBUF_FIELD_OFFSET(::TowerMonster, buff_),
  PROTOBUF_FIELD_OFFSET(::TowerMonster, isconnect_),
  PROTOBUF_FIELD_OFFSET(::TowerMonster, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChannelTowerMonster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChannelTowerMonster, channelid_),
  PROTOBUF_FIELD_OFFSET(::ChannelTowerMonster, channelinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCGetTowerMonster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCGetTowerMonster, reqplayerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSGetTowerMonster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSGetTowerMonster, reqplayerid_),
  PROTOBUF_FIELD_OFFSET(::CSGetTowerMonster, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCSyncGetTowerMonster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCSyncGetTowerMonster, tableid_),
  PROTOBUF_FIELD_OFFSET(::SCSyncGetTowerMonster, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCTowerMonster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCTowerMonster, tableid_),
  PROTOBUF_FIELD_OFFSET(::SCTowerMonster, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSTowerHeroAtkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSTowerHeroAtkInfo, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCTowerHeroAtkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCTowerHeroAtkInfo, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSTowerUpdateHero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSTowerUpdateHero, info_),
  PROTOBUF_FIELD_OFFSET(::CSTowerUpdateHero, leave_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCTowerUpdateHero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCTowerUpdateHero, uniqueid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCPushTowerUpdateHero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCPushTowerUpdateHero, info_),
  PROTOBUF_FIELD_OFFSET(::SCPushTowerUpdateHero, reqplayerid_),
  PROTOBUF_FIELD_OFFSET(::SCPushTowerUpdateHero, leave_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LockTargetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LockTargetInfo, positionid_),
  PROTOBUF_FIELD_OFFSET(::LockTargetInfo, targetpositionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSTowerPlayerLockTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSTowerPlayerLockTarget, lockinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCTowerPlayerLockTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCTowerPlayerLockTarget, lockinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSChangeBackground, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSChangeBackground, isback_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCChangeBackground, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSTowerMonsterExit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSTowerMonsterExit, positionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCTowerMonsterExit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSGetCurrentTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCGetCurrentTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCGetCurrentTime, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TowerGuideInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TowerGuideInfo, guidestep_),
  PROTOBUF_FIELD_OFFSET(::TowerGuideInfo, isfinsh_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSGetTowerStep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCGetTowerGuide, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCGetTowerGuide, guideinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSSetTowerStep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSSetTowerStep, guideinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCSetTowerStep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSTowerExchangeHero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSTowerExchangeHero, newpositionid_),
  PROTOBUF_FIELD_OFFSET(::CSTowerExchangeHero, oldpositionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCTowerExchangeHero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCTowerExchangeHero, newpositionid_),
  PROTOBUF_FIELD_OFFSET(::SCTowerExchangeHero, oldpositionid_),
  PROTOBUF_FIELD_OFFSET(::SCTowerExchangeHero, reqplayerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCLeaveTowerTableCountdown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCLeaveTowerTableCountdown, tableid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PoisonBombLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PoisonBombLocation, id_),
  PROTOBUF_FIELD_OFFSET(::PoisonBombLocation, x_),
  PROTOBUF_FIELD_OFFSET(::PoisonBombLocation, y_),
  PROTOBUF_FIELD_OFFSET(::PoisonBombLocation, angle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSPoisonBombLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSPoisonBombLocation, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCPoisonBombLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCPoisonBombLocation, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PoisonbombConvert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PoisonbombConvert, monsterid_),
  PROTOBUF_FIELD_OFFSET(::PoisonbombConvert, positionid_),
  PROTOBUF_FIELD_OFFSET(::PoisonbombConvert, poisonbombid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCPoisonBombConvert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCPoisonBombConvert, poisonbombid_),
  PROTOBUF_FIELD_OFFSET(::SCPoisonBombConvert, info_),
  PROTOBUF_FIELD_OFFSET(::SCPoisonBombConvert, killplayerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PoisonbombType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PoisonbombType, monsterid_),
  PROTOBUF_FIELD_OFFSET(::PoisonbombType, masterpoisonbombid_),
  PROTOBUF_FIELD_OFFSET(::PoisonbombType, poisonbombid_),
  PROTOBUF_FIELD_OFFSET(::PoisonbombType, killplayerid_),
  PROTOBUF_FIELD_OFFSET(::PoisonbombType, channelid_),
  PROTOBUF_FIELD_OFFSET(::PoisonbombType, processtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCPoisonbombTypes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCPoisonbombTypes, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSDragonRelease, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSDragonRelease, ratio_),
  PROTOBUF_FIELD_OFFSET(::CSDragonRelease, propsid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCDragonRelease, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCDragonRelease, starttime_),
  PROTOBUF_FIELD_OFFSET(::SCDragonRelease, playerid_),
  PROTOBUF_FIELD_OFFSET(::SCDragonRelease, attackinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCPushDragonRelease, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCPushDragonRelease, starttime_),
  PROTOBUF_FIELD_OFFSET(::SCPushDragonRelease, playerid_),
  PROTOBUF_FIELD_OFFSET(::SCPushDragonRelease, attackinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCPushDragonEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCPushDragonEnd, playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCPushSelfDragonState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCPushSelfDragonState, progressbarcount_),
  PROTOBUF_FIELD_OFFSET(::SCPushSelfDragonState, progressbar_),
  PROTOBUF_FIELD_OFFSET(::SCPushSelfDragonState, propsid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSOneKeyUpdateHero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOneKeyUpdateHero, heroid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCOneKeyUpdateHero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCOneKeyUpdateHero, playerid_),
  PROTOBUF_FIELD_OFFSET(::SCOneKeyUpdateHero, leaveinfo_),
  PROTOBUF_FIELD_OFFSET(::SCOneKeyUpdateHero, updateinfo_),
  PROTOBUF_FIELD_OFFSET(::SCOneKeyUpdateHero, tableid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCPushGhostDragonRelease, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCPushGhostDragonRelease, starttime_),
  PROTOBUF_FIELD_OFFSET(::SCPushGhostDragonRelease, playerid_),
  PROTOBUF_FIELD_OFFSET(::SCPushGhostDragonRelease, positionid_),
  PROTOBUF_FIELD_OFFSET(::SCPushGhostDragonRelease, attackcount_),
  PROTOBUF_FIELD_OFFSET(::SCPushGhostDragonRelease, usecount_),
  PROTOBUF_FIELD_OFFSET(::SCPushGhostDragonRelease, ratio_),
  PROTOBUF_FIELD_OFFSET(::SCPushGhostDragonRelease, attackinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCPushGhostDragonEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCPushGhostDragonEnd, playerid_),
  PROTOBUF_FIELD_OFFSET(::SCPushGhostDragonEnd, tableid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCPushSelfGhostDragonState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCPushSelfGhostDragonState, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HeroMoney, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HeroMoney, uniqueid_),
  PROTOBUF_FIELD_OFFSET(::HeroMoney, playerid_),
  PROTOBUF_FIELD_OFFSET(::HeroMoney, money_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCPushSyncHeroMoney, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCPushSyncHeroMoney, heromoney_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCPushMonsterDead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCPushMonsterDead, positionid_),
  PROTOBUF_FIELD_OFFSET(::SCPushMonsterDead, tableid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSDebugData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSDebugData, debugdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCDebugData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCPushMonsterBuff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCPushMonsterBuff, positionid_),
  PROTOBUF_FIELD_OFFSET(::SCPushMonsterBuff, bufftype_),
  PROTOBUF_FIELD_OFFSET(::SCPushMonsterBuff, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TableState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TableState, tableid_),
  PROTOBUF_FIELD_OFFSET(::TableState, tableplayer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSGetTableId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCGetTableId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCGetTableId, tableid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCPlayerVipLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCPlayerVipLevel, playerid_),
  PROTOBUF_FIELD_OFFSET(::SCPlayerVipLevel, level_),
  PROTOBUF_FIELD_OFFSET(::SCPlayerVipLevel, isvip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DragonProps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DragonProps, progressbarcount_),
  PROTOBUF_FIELD_OFFSET(::DragonProps, progressbar_),
  PROTOBUF_FIELD_OFFSET(::DragonProps, propsid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSGetDragonProps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCGetDragonProps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCGetDragonProps, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSEquipDragonProps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSEquipDragonProps, propsid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCEquipDragonProps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCEquipDragonProps, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCPushDragonProps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCPushDragonProps, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ShopInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ShopInfo, shopid_),
  PROTOBUF_FIELD_OFFSET(::ShopInfo, name_),
  PROTOBUF_FIELD_OFFSET(::ShopInfo, value_),
  PROTOBUF_FIELD_OFFSET(::ShopInfo, currencytype_),
  PROTOBUF_FIELD_OFFSET(::ShopInfo, price_),
  PROTOBUF_FIELD_OFFSET(::ShopInfo, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSGetShopInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSGetShopInfo, shopinfotype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCGetShopInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCGetShopInfo, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PropsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PropsInfo, propsid_),
  PROTOBUF_FIELD_OFFSET(::PropsInfo, totalnum_),
  PROTOBUF_FIELD_OFFSET(::PropsInfo, addnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCPushPropsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCPushPropsInfo, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSGetMaterialsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCGetMaterialsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCGetMaterialsInfo, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSExchangeBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSExchangeBox, typeid__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RewardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RewardInfo, propid_),
  PROTOBUF_FIELD_OFFSET(::RewardInfo, propnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCExchangeBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCExchangeBox, typeid__),
  PROTOBUF_FIELD_OFFSET(::SCExchangeBox, id_),
  PROTOBUF_FIELD_OFFSET(::SCExchangeBox, reward_),
  PROTOBUF_FIELD_OFFSET(::SCExchangeBox, addreward_),
  PROTOBUF_FIELD_OFFSET(::SCExchangeBox, doublingcost_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSDoublingBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSDoublingBox, isdoubling_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCDoublingBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCDoublingBox, isdouble_),
  PROTOBUF_FIELD_OFFSET(::SCDoublingBox, id_),
  PROTOBUF_FIELD_OFFSET(::SCDoublingBox, reward_),
  PROTOBUF_FIELD_OFFSET(::SCDoublingBox, addreward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSShopBuy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSShopBuy, propsid_),
  PROTOBUF_FIELD_OFFSET(::CSShopBuy, propsnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCShopBuy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCShopBuy, propsid_),
  PROTOBUF_FIELD_OFFSET(::SCShopBuy, propsnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MaterialsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MaterialsInfo, positionid_),
  PROTOBUF_FIELD_OFFSET(::MaterialsInfo, propsid_),
  PROTOBUF_FIELD_OFFSET(::MaterialsInfo, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCPushDropMaterials, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCPushDropMaterials, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCPushBalloonTimes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCPushBalloonTimes, positionid_),
  PROTOBUF_FIELD_OFFSET(::SCPushBalloonTimes, playerid_),
  PROTOBUF_FIELD_OFFSET(::SCPushBalloonTimes, freetimes_),
  PROTOBUF_FIELD_OFFSET(::SCPushBalloonTimes, ratio_),
  PROTOBUF_FIELD_OFFSET(::SCPushBalloonTimes, starttime_),
  PROTOBUF_FIELD_OFFSET(::SCPushBalloonTimes, attackcount_),
  PROTOBUF_FIELD_OFFSET(::SCPushBalloonTimes, attackinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SwitchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SwitchInfo, id_),
  PROTOBUF_FIELD_OFFSET(::SwitchInfo, open_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCFunctionSwitch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCFunctionSwitch, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSSealConvertMoney, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCSealConvertMoney, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCSealConvertMoney, playerid_),
  PROTOBUF_FIELD_OFFSET(::SCSealConvertMoney, seal_),
  PROTOBUF_FIELD_OFFSET(::SCSealConvertMoney, money_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConnectMonster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConnectMonster, positionid_),
  PROTOBUF_FIELD_OFFSET(::ConnectMonster, monsterid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCPushConnectMonster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCPushConnectMonster, connect_),
  PROTOBUF_FIELD_OFFSET(::SCPushConnectMonster, connectid_),
  PROTOBUF_FIELD_OFFSET(::SCPushConnectMonster, attackpositionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCGiantUpgrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCGiantUpgrade, playerid_),
  PROTOBUF_FIELD_OFFSET(::SCGiantUpgrade, positionid_),
  PROTOBUF_FIELD_OFFSET(::SCGiantUpgrade, level_),
  PROTOBUF_FIELD_OFFSET(::SCGiantUpgrade, attacktimes_),
  PROTOBUF_FIELD_OFFSET(::SCGiantUpgrade, attackinfo_),
  PROTOBUF_FIELD_OFFSET(::SCGiantUpgrade, isover_),
  PROTOBUF_FIELD_OFFSET(::SCGiantUpgrade, ratio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCPushGiantEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCPushGiantEnd, playerid_),
  PROTOBUF_FIELD_OFFSET(::SCPushGiantEnd, positionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCDropCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCDropCard, id_),
  PROTOBUF_FIELD_OFFSET(::SCDropCard, typeid__),
  PROTOBUF_FIELD_OFFSET(::SCDropCard, quality_),
  PROTOBUF_FIELD_OFFSET(::SCDropCard, basepower_),
  PROTOBUF_FIELD_OFFSET(::SCDropCard, extendpower_),
  PROTOBUF_FIELD_OFFSET(::SCDropCard, equip_),
  PROTOBUF_FIELD_OFFSET(::SCDropCard, positionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCAcquireSeal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SCAcquireSeal, playerid_),
  PROTOBUF_FIELD_OFFSET(::SCAcquireSeal, mxlsealaddawardratio_),
  PROTOBUF_FIELD_OFFSET(::SCAcquireSeal, heropositionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FreshMoney, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FreshMoney, playerid_),
  PROTOBUF_FIELD_OFFSET(::FreshMoney, fee_),
  PROTOBUF_FIELD_OFFSET(::FreshMoney, gameid_),
  PROTOBUF_FIELD_OFFSET(::FreshMoney, cymoney_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ShutdownService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ShutdownService, gameid_),
  PROTOBUF_FIELD_OFFSET(::ShutdownService, arenaid_),
  PROTOBUF_FIELD_OFFSET(::ShutdownService, serverid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::HeroInfo)},
  { 9, -1, sizeof(::CSLoginGameWithToken)},
  { 17, -1, sizeof(::SCLoginGameWithToken)},
  { 25, -1, sizeof(::UserBomTimes)},
  { 34, -1, sizeof(::SpecialMonsterAttack)},
  { 43, -1, sizeof(::CSRequestAttack)},
  { 58, -1, sizeof(::SCRequestAttack)},
  { 63, -1, sizeof(::SpecialAttackInfo)},
  { 70, -1, sizeof(::SCSyncMoney)},
  { 93, -1, sizeof(::SCPoisonBomTimes)},
  { 105, -1, sizeof(::CSChangePoisonBomTimes)},
  { 113, -1, sizeof(::SCChangePoisonBomTimes)},
  { 118, -1, sizeof(::CSEnterStage)},
  { 125, -1, sizeof(::SCEnterStage)},
  { 131, -1, sizeof(::CSKeepRatio)},
  { 137, -1, sizeof(::SCKeepRatio)},
  { 142, -1, sizeof(::TrusteeshipInfo)},
  { 154, -1, sizeof(::CSGetTrusteeship)},
  { 159, -1, sizeof(::SCGetTrusteeship)},
  { 167, -1, sizeof(::CSSetTrusteeship)},
  { 173, -1, sizeof(::SCSetTrusteeship)},
  { 178, -1, sizeof(::TrusteeshipMoney)},
  { 185, -1, sizeof(::CSEndTrusteeship)},
  { 191, -1, sizeof(::SCEndTrusteeship)},
  { 199, -1, sizeof(::CSGetVersion)},
  { 204, -1, sizeof(::SCGetVersion)},
  { 210, -1, sizeof(::ActivityInfo)},
  { 220, -1, sizeof(::CSActivityInfo)},
  { 225, -1, sizeof(::SCActivityInfo)},
  { 234, -1, sizeof(::SCNotifyActivityInfo)},
  { 243, -1, sizeof(::CSGetActivityAward)},
  { 249, -1, sizeof(::SCGetActivityAward)},
  { 256, -1, sizeof(::CSButtonRecords)},
  { 263, -1, sizeof(::SCButtonRecords)},
  { 268, -1, sizeof(::TowerHeroInfo)},
  { 279, -1, sizeof(::TowerHeroAtkInfo)},
  { 286, -1, sizeof(::TablePlayerInfo)},
  { 303, -1, sizeof(::SCNotifyTowerTablePlayer)},
  { 310, -1, sizeof(::SCLeaveTowerTable)},
  { 317, -1, sizeof(::TowerMonster)},
  { 329, -1, sizeof(::ChannelTowerMonster)},
  { 336, -1, sizeof(::SCGetTowerMonster)},
  { 342, -1, sizeof(::CSGetTowerMonster)},
  { 349, -1, sizeof(::SCSyncGetTowerMonster)},
  { 356, -1, sizeof(::SCTowerMonster)},
  { 363, -1, sizeof(::CSTowerHeroAtkInfo)},
  { 369, -1, sizeof(::SCTowerHeroAtkInfo)},
  { 375, -1, sizeof(::CSTowerUpdateHero)},
  { 382, -1, sizeof(::SCTowerUpdateHero)},
  { 388, -1, sizeof(::SCPushTowerUpdateHero)},
  { 396, -1, sizeof(::LockTargetInfo)},
  { 403, -1, sizeof(::CSTowerPlayerLockTarget)},
  { 409, -1, sizeof(::SCTowerPlayerLockTarget)},
  { 415, -1, sizeof(::CSChangeBackground)},
  { 421, -1, sizeof(::SCChangeBackground)},
  { 426, -1, sizeof(::CSTowerMonsterExit)},
  { 432, -1, sizeof(::SCTowerMonsterExit)},
  { 437, -1, sizeof(::CSGetCurrentTime)},
  { 442, -1, sizeof(::SCGetCurrentTime)},
  { 448, -1, sizeof(::TowerGuideInfo)},
  { 455, -1, sizeof(::CSGetTowerStep)},
  { 460, -1, sizeof(::SCGetTowerGuide)},
  { 466, -1, sizeof(::CSSetTowerStep)},
  { 472, -1, sizeof(::SCSetTowerStep)},
  { 477, -1, sizeof(::CSTowerExchangeHero)},
  { 484, -1, sizeof(::SCTowerExchangeHero)},
  { 492, -1, sizeof(::SCLeaveTowerTableCountdown)},
  { 498, -1, sizeof(::PoisonBombLocation)},
  { 507, -1, sizeof(::CSPoisonBombLocation)},
  { 513, -1, sizeof(::SCPoisonBombLocation)},
  { 519, -1, sizeof(::PoisonbombConvert)},
  { 527, -1, sizeof(::SCPoisonBombConvert)},
  { 535, -1, sizeof(::PoisonbombType)},
  { 546, -1, sizeof(::SCPoisonbombTypes)},
  { 552, -1, sizeof(::CSDragonRelease)},
  { 559, -1, sizeof(::SCDragonRelease)},
  { 567, -1, sizeof(::SCPushDragonRelease)},
  { 575, -1, sizeof(::SCPushDragonEnd)},
  { 581, -1, sizeof(::SCPushSelfDragonState)},
  { 589, -1, sizeof(::CSOneKeyUpdateHero)},
  { 595, -1, sizeof(::SCOneKeyUpdateHero)},
  { 604, -1, sizeof(::SCPushGhostDragonRelease)},
  { 616, -1, sizeof(::SCPushGhostDragonEnd)},
  { 623, -1, sizeof(::SCPushSelfGhostDragonState)},
  { 629, -1, sizeof(::HeroMoney)},
  { 637, -1, sizeof(::SCPushSyncHeroMoney)},
  { 643, -1, sizeof(::SCPushMonsterDead)},
  { 650, -1, sizeof(::CSDebugData)},
  { 656, -1, sizeof(::SCDebugData)},
  { 661, -1, sizeof(::SCPushMonsterBuff)},
  { 669, -1, sizeof(::TableState)},
  { 676, -1, sizeof(::CSGetTableId)},
  { 681, -1, sizeof(::SCGetTableId)},
  { 687, -1, sizeof(::SCPlayerVipLevel)},
  { 695, -1, sizeof(::DragonProps)},
  { 703, -1, sizeof(::CSGetDragonProps)},
  { 708, -1, sizeof(::SCGetDragonProps)},
  { 714, -1, sizeof(::CSEquipDragonProps)},
  { 720, -1, sizeof(::SCEquipDragonProps)},
  { 726, -1, sizeof(::SCPushDragonProps)},
  { 732, -1, sizeof(::ShopInfo)},
  { 743, -1, sizeof(::CSGetShopInfo)},
  { 749, -1, sizeof(::SCGetShopInfo)},
  { 755, -1, sizeof(::PropsInfo)},
  { 763, -1, sizeof(::SCPushPropsInfo)},
  { 769, -1, sizeof(::CSGetMaterialsInfo)},
  { 774, -1, sizeof(::SCGetMaterialsInfo)},
  { 780, -1, sizeof(::CSExchangeBox)},
  { 786, -1, sizeof(::RewardInfo)},
  { 793, -1, sizeof(::SCExchangeBox)},
  { 803, -1, sizeof(::CSDoublingBox)},
  { 809, -1, sizeof(::SCDoublingBox)},
  { 818, -1, sizeof(::CSShopBuy)},
  { 825, -1, sizeof(::SCShopBuy)},
  { 832, -1, sizeof(::MaterialsInfo)},
  { 840, -1, sizeof(::SCPushDropMaterials)},
  { 846, -1, sizeof(::SCPushBalloonTimes)},
  { 858, -1, sizeof(::SwitchInfo)},
  { 865, -1, sizeof(::SCFunctionSwitch)},
  { 871, -1, sizeof(::CSSealConvertMoney)},
  { 876, -1, sizeof(::SCSealConvertMoney)},
  { 884, -1, sizeof(::ConnectMonster)},
  { 891, -1, sizeof(::SCPushConnectMonster)},
  { 899, -1, sizeof(::SCGiantUpgrade)},
  { 911, -1, sizeof(::SCPushGiantEnd)},
  { 918, -1, sizeof(::SCDropCard)},
  { 930, -1, sizeof(::SCAcquireSeal)},
  { 938, -1, sizeof(::FreshMoney)},
  { 947, -1, sizeof(::ShutdownService)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HeroInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSLoginGameWithToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCLoginGameWithToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UserBomTimes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpecialMonsterAttack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSRequestAttack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCRequestAttack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpecialAttackInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCSyncMoney_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCPoisonBomTimes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSChangePoisonBomTimes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCChangePoisonBomTimes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSEnterStage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCEnterStage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSKeepRatio_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCKeepRatio_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TrusteeshipInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSGetTrusteeship_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCGetTrusteeship_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSSetTrusteeship_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCSetTrusteeship_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TrusteeshipMoney_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSEndTrusteeship_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCEndTrusteeship_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSGetVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCGetVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ActivityInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSActivityInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCActivityInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCNotifyActivityInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSGetActivityAward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCGetActivityAward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSButtonRecords_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCButtonRecords_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TowerHeroInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TowerHeroAtkInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TablePlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCNotifyTowerTablePlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCLeaveTowerTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TowerMonster_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ChannelTowerMonster_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCGetTowerMonster_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSGetTowerMonster_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCSyncGetTowerMonster_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCTowerMonster_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSTowerHeroAtkInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCTowerHeroAtkInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSTowerUpdateHero_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCTowerUpdateHero_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCPushTowerUpdateHero_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LockTargetInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSTowerPlayerLockTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCTowerPlayerLockTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSChangeBackground_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCChangeBackground_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSTowerMonsterExit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCTowerMonsterExit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSGetCurrentTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCGetCurrentTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TowerGuideInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSGetTowerStep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCGetTowerGuide_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSSetTowerStep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCSetTowerStep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSTowerExchangeHero_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCTowerExchangeHero_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCLeaveTowerTableCountdown_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PoisonBombLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSPoisonBombLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCPoisonBombLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PoisonbombConvert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCPoisonBombConvert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PoisonbombType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCPoisonbombTypes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSDragonRelease_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCDragonRelease_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCPushDragonRelease_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCPushDragonEnd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCPushSelfDragonState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOneKeyUpdateHero_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCOneKeyUpdateHero_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCPushGhostDragonRelease_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCPushGhostDragonEnd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCPushSelfGhostDragonState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HeroMoney_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCPushSyncHeroMoney_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCPushMonsterDead_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSDebugData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCDebugData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCPushMonsterBuff_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TableState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSGetTableId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCGetTableId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCPlayerVipLevel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DragonProps_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSGetDragonProps_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCGetDragonProps_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSEquipDragonProps_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCEquipDragonProps_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCPushDragonProps_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ShopInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSGetShopInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCGetShopInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PropsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCPushPropsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSGetMaterialsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCGetMaterialsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSExchangeBox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RewardInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCExchangeBox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSDoublingBox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCDoublingBox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSShopBuy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCShopBuy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MaterialsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCPushDropMaterials_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCPushBalloonTimes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SwitchInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCFunctionSwitch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSSealConvertMoney_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCSealConvertMoney_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConnectMonster_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCPushConnectMonster_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCGiantUpgrade_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCPushGiantEnd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCDropCard_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SCAcquireSeal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FreshMoney_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ShutdownService_default_instance_),
};

const char descriptor_table_protodef_JSBY_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nJSBY.proto\"G\n\010HeroInfo\022\n\n\002ID\030\001 \001(\005\022\r\n\005"
  "Level\030\002 \001(\005\022\020\n\010Position\030\003 \001(\005\022\016\n\006Unlock\030"
  "\004 \001(\005\"N\n\024CSLoginGameWithToken\022\020\n\010PlayerI"
  "d\030\001 \001(\005\022\r\n\005Token\030\002 \001(\t\022\025\n\rClientVersion\030"
  "\003 \001(\t\"M\n\024SCLoginGameWithToken\022\r\n\005Money\030\001"
  " \001(\005\022\024\n\014IsFirstLogin\030\002 \001(\005\022\020\n\010UseRatio\030\003"
  " \001(\005\"a\n\014UserBomTimes\022\025\n\rUsePositionId\030\001 "
  "\001(\005\022\030\n\020UsePositionTimes\030\002 \001(\005\022\017\n\007OverBom"
  "\030\003 \001(\010\022\017\n\007AllOver\030\004 \001(\010\"e\n\024SpecialMonste"
  "rAttack\022\022\n\nPositionId\030\001 \001(\005\022\021\n\tMonsterId"
  "\030\002 \001(\005\022\021\n\tChannelId\030\003 \001(\005\022\023\n\013ProcessTime"
  "\030\004 \001(\005\"\360\001\n\017CSRequestAttack\022\r\n\005Ratio\030\001 \001("
  "\005\022\014\n\004Mode\030\002 \001(\005\022\021\n\tMonsterId\030\003 \001(\005\022\022\n\nPo"
  "sitionId\030\004 \001(\005\022\025\n\rUsePositionId\030\005 \001(\005\022\030\n"
  "\020UsePositionTimes\030\006 \001(\005\022\023\n\013SpecialType\030\007"
  " \001(\005\022*\n\013SpecialInfo\030\010 \001(\0132\025.SpecialMonst"
  "erAttack\022\021\n\tDragonEnd\030\t \001(\010\022\024\n\014HeroUniqu"
  "eId\030\n \001(\005\"\021\n\017SCRequestAttack\"3\n\021SpecialA"
  "ttackInfo\022\016\n\006KillID\030\001 \001(\005\022\016\n\006SelfID\030\002 \001("
  "\005\"\214\003\n\013SCSyncMoney\022\r\n\005Money\030\001 \001(\005\022\021\n\tMons"
  "terId\030\002 \001(\005\022\022\n\nPositionId\030\003 \001(\005\022\014\n\004Type\030"
  "\004 \001(\005\022\r\n\005Ratio\030\005 \001(\005\022\020\n\010PlayerId\030\006 \001(\005\022\026"
  "\n\016MoneyVariation\030\007 \001(\005\022\032\n\003Bom\030\010 \001(\0132\r.Us"
  "erBomTimes\022\024\n\014HeroUniqueId\030\t \001(\005\022&\n\nAtta"
  "ckInfo\030\n \001(\0132\022.SpecialAttackInfo\022\r\n\005Eare"
  "d\030\013 \001(\005\022\020\n\010AddRatio\030\014 \001(\005\022\024\n\014BalloonRati"
  "o\030\r \001(\005\022\016\n\006Others\030\016 \001(\t\022\025\n\rGiantHitPower"
  "\030\017 \001(\005\022\024\n\014MxlSealMoney\030\020 \001(\005\022\034\n\024MxlSealA"
  "ddAwardRatio\030\021 \001(\005\022\024\n\014BearMultiple\030\022 \001(\t"
  "\"\252\001\n\020SCPoisonBomTimes\022\022\n\nPositionId\030\001 \001("
  "\005\022\r\n\005Times\030\002 \001(\005\022\r\n\005Ratio\030\003 \001(\005\022\020\n\010AddTi"
  "mes\030\004 \003(\005\022\024\n\014KillPlayerId\030\005 \001(\005\022\024\n\014HeroU"
  "niqueId\030\006 \001(\005\022&\n\nAttackInfo\030\007 \001(\0132\022.Spec"
  "ialAttackInfo\"]\n\026CSChangePoisonBomTimes\022"
  "\022\n\nPositionId\030\001 \001(\005\022\030\n\020UsePositionTimes\030"
  "\002 \001(\005\022\025\n\rNewPositionId\030\003 \001(\005\"\030\n\026SCChange"
  "PoisonBomTimes\"6\n\014CSEnterStage\022\r\n\005Enter\030"
  "\001 \001(\010\022\027\n\004Mode\030\002 \001(\0162\t.ModeType\" \n\014SCEnte"
  "rStage\022\020\n\010UseRatio\030\001 \001(\005\"\034\n\013CSKeepRatio\022"
  "\r\n\005Ratio\030\001 \001(\005\"\r\n\013SCKeepRatio\"\247\001\n\017Truste"
  "eshipInfo\022\025\n\rIsTrusteeship\030\001 \001(\010\022\024\n\014High"
  "SetValue\030\002 \001(\005\022\023\n\013HighSetOpen\030\003 \001(\010\022\023\n\013L"
  "owSetValue\030\004 \001(\005\022\022\n\nLowSetOpen\030\005 \001(\010\022\024\n\014"
  "TimeSetValue\030\006 \001(\002\022\023\n\013TimeSetOpen\030\007 \001(\010\""
  "\022\n\020CSGetTrusteeship\"V\n\020SCGetTrusteeship\022"
  "\036\n\004Info\030\001 \001(\0132\020.TrusteeshipInfo\022\020\n\010LeftT"
  "ime\030\002 \001(\005\022\020\n\010VIPLevel\030\003 \001(\005\"2\n\020CSSetTrus"
  "teeship\022\036\n\004Info\030\001 \001(\0132\020.TrusteeshipInfo\""
  "\022\n\020SCSetTrusteeship\"6\n\020TrusteeshipMoney\022"
  "\023\n\013MonsterType\030\001 \001(\005\022\r\n\005Money\030\002 \001(\005\"\"\n\020C"
  "SEndTrusteeship\022\016\n\006Notify\030\001 \001(\010\"Z\n\020SCEnd"
  "Trusteeship\022\037\n\004Info\030\001 \001(\0132\021.TrusteeshipM"
  "oney\022\022\n\nTotalMoney\030\002 \001(\005\022\021\n\tTotalTime\030\003 "
  "\001(\005\"\016\n\014CSGetVersion\"\035\n\014SCGetVersion\022\r\n\005I"
  "sNew\030\001 \001(\010\"U\n\014ActivityInfo\022\n\n\002ID\030\001 \001(\005\022\r"
  "\n\005Money\030\002 \001(\005\022\016\n\006Enzyme\030\003 \001(\005\022\014\n\004Name\030\004 "
  "\001(\t\022\014\n\004Flag\030\005 \001(\005\"\020\n\016CSActivityInfo\"e\n\016S"
  "CActivityInfo\022\033\n\004Info\030\001 \001(\0132\r.ActivityIn"
  "fo\022\020\n\010LeftTime\030\002 \001(\005\022\023\n\013Begint32ime\030\003 \001("
  "\t\022\017\n\007EndTime\030\004 \001(\t\"k\n\024SCNotifyActivityIn"
  "fo\022\033\n\004Info\030\001 \001(\0132\r.ActivityInfo\022\020\n\010LeftT"
  "ime\030\002 \001(\005\022\023\n\013Begint32ime\030\003 \001(\t\022\017\n\007EndTim"
  "e\030\004 \001(\t\" \n\022CSGetActivityAward\022\n\n\002ID\030\001 \001("
  "\005\".\n\022SCGetActivityAward\022\n\n\002ID\030\001 \001(\005\022\014\n\004F"
  "lag\030\002 \001(\005\"+\n\017CSButtonRecords\022\n\n\002ID\030\001 \001(\005"
  "\022\014\n\004Mode\030\002 \001(\005\"\021\n\017SCButtonRecords\"\201\001\n\rTo"
  "werHeroInfo\022\016\n\006HeroId\030\001 \001(\005\022\022\n\nPositionI"
  "d\030\002 \001(\005\022\r\n\005IsAtk\030\003 \001(\010\022\021\n\tTimestamp\030\004 \001("
  "\005\022\030\n\020TargetPositionId\030\005 \001(\005\022\020\n\010UniqueId\030"
  "\006 \001(\005\"9\n\020TowerHeroAtkInfo\022\026\n\016HeroPositio"
  "nId\030\001 \001(\005\022\r\n\005IsAtk\030\002 \001(\010\"\347\001\n\017TablePlayer"
  "Info\022\017\n\007ChairId\030\001 \001(\005\022\020\n\010PlayerId\030\002 \001(\005\022"
  "\r\n\005Money\030\003 \001(\005\022\013\n\003Sex\030\004 \001(\005\022\014\n\004Name\030\005 \001("
  "\t\022\014\n\004Head\030\006 \001(\t\022\034\n\004Info\030\007 \001(\0132\016.TowerHer"
  "oInfo\022\026\n\016MoneyVariation\030\010 \001(\005\022\020\n\010VipLeve"
  "l\030\t \001(\005\022\r\n\005IsVip\030\n \001(\010\022\022\n\nBackground\030\013 \001"
  "(\005\022\016\n\006Effect\030\014 \001(\005\"K\n\030SCNotifyTowerTable"
  "Player\022\036\n\004Info\030\001 \001(\0132\020.TablePlayerInfo\022\017"
  "\n\007TableID\030\002 \001(\005\";\n\021SCLeaveTowerTable\022\020\n\010"
  "PlayerId\030\001 \001(\005\022\024\n\014IsAgainEnter\030\002 \001(\010\"\213\001\n"
  "\014TowerMonster\022\020\n\010Position\030\001 \001(\005\022\023\n\013Proce"
  "ssTime\030\002 \001(\005\022\021\n\tReadyTime\030\003 \001(\005\022\021\n\tMonst"
  "erID\030\004 \001(\005\022\014\n\004Buff\030\005 \003(\005\022\021\n\tIsConnect\030\006 "
  "\001(\010\022\r\n\005Level\030\007 \001(\005\"L\n\023ChannelTowerMonste"
  "r\022\021\n\tChannelId\030\001 \001(\005\022\"\n\013ChannelInfo\030\002 \001("
  "\0132\r.TowerMonster\"(\n\021SCGetTowerMonster\022\023\n"
  "\013ReqPlayerId\030\001 \001(\005\"L\n\021CSGetTowerMonster\022"
  "\023\n\013ReqPlayerId\030\001 \001(\005\022\"\n\004Info\030\002 \001(\0132\024.Cha"
  "nnelTowerMonster\"L\n\025SCSyncGetTowerMonste"
  "r\022\017\n\007TableID\030\001 \001(\005\022\"\n\004Info\030\002 \001(\0132\024.Chann"
  "elTowerMonster\"E\n\016SCTowerMonster\022\017\n\007Tabl"
  "eID\030\001 \001(\005\022\"\n\004Info\030\002 \001(\0132\024.ChannelTowerMo"
  "nster\"5\n\022CSTowerHeroAtkInfo\022\037\n\004Info\030\001 \001("
  "\0132\021.TowerHeroAtkInfo\"5\n\022SCTowerHeroAtkIn"
  "fo\022\037\n\004Info\030\001 \001(\0132\021.TowerHeroAtkInfo\"@\n\021C"
  "STowerUpdateHero\022\034\n\004Info\030\001 \001(\0132\016.TowerHe"
  "roInfo\022\r\n\005Leave\030\002 \001(\010\"%\n\021SCTowerUpdateHe"
  "ro\022\020\n\010UniqueId\030\001 \001(\005\"Y\n\025SCPushTowerUpdat"
  "eHero\022\034\n\004Info\030\001 \001(\0132\016.TowerHeroInfo\022\023\n\013R"
  "eqPlayerId\030\002 \001(\005\022\r\n\005Leave\030\003 \001(\010\">\n\016LockT"
  "argetInfo\022\022\n\nPositionId\030\001 \001(\005\022\030\n\020TargetP"
  "ositionId\030\002 \001(\005\"<\n\027CSTowerPlayerLockTarg"
  "et\022!\n\010LockInfo\030\001 \001(\0132\017.LockTargetInfo\"<\n"
  "\027SCTowerPlayerLockTarget\022!\n\010LockInfo\030\001 \001"
  "(\0132\017.LockTargetInfo\"$\n\022CSChangeBackgroun"
  "d\022\016\n\006IsBack\030\001 \001(\010\"\024\n\022SCChangeBackground\""
  "(\n\022CSTowerMonsterExit\022\022\n\nPositionId\030\001 \001("
  "\005\"\024\n\022SCTowerMonsterExit\"\022\n\020CSGetCurrentT"
  "ime\"%\n\020SCGetCurrentTime\022\021\n\tTimestamp\030\001 \001"
  "(\005\"4\n\016TowerGuideInfo\022\021\n\tGuideStep\030\001 \001(\005\022"
  "\017\n\007IsFinsh\030\002 \001(\010\"\020\n\016CSGetTowerStep\"5\n\017SC"
  "GetTowerGuide\022\"\n\tGuideInfo\030\001 \001(\0132\017.Tower"
  "GuideInfo\"4\n\016CSSetTowerStep\022\"\n\tGuideInfo"
  "\030\001 \001(\0132\017.TowerGuideInfo\"\020\n\016SCSetTowerSte"
  "p\"C\n\023CSTowerExchangeHero\022\025\n\rNewPositionI"
  "d\030\001 \001(\005\022\025\n\rOldPositionId\030\002 \001(\005\"X\n\023SCTowe"
  "rExchangeHero\022\025\n\rNewPositionId\030\001 \001(\005\022\025\n\r"
  "OldPositionId\030\002 \001(\005\022\023\n\013ReqPlayerId\030\003 \001(\005"
  "\"-\n\032SCLeaveTowerTableCountdown\022\017\n\007TableI"
  "D\030\001 \001(\005\"E\n\022PoisonBombLocation\022\n\n\002ID\030\001 \001("
  "\005\022\t\n\001X\030\002 \001(\005\022\t\n\001Y\030\003 \001(\005\022\r\n\005Angle\030\004 \001(\005\"9"
  "\n\024CSPoisonBombLocation\022!\n\004Info\030\001 \001(\0132\023.P"
  "oisonBombLocation\"9\n\024SCPoisonBombLocatio"
  "n\022!\n\004Info\030\001 \001(\0132\023.PoisonBombLocation\"P\n\021"
  "PoisonbombConvert\022\021\n\tMonsterId\030\001 \001(\005\022\022\n\n"
  "PositionId\030\002 \001(\005\022\024\n\014PoisonBombId\030\003 \001(\005\"c"
  "\n\023SCPoisonBombConvert\022\024\n\014PoisonBombId\030\001 "
  "\001(\005\022 \n\004Info\030\002 \001(\0132\022.PoisonbombConvert\022\024\n"
  "\014KillPlayerID\030\003 \001(\005\"\223\001\n\016PoisonbombType\022\021"
  "\n\tMonsterId\030\001 \001(\005\022\032\n\022MasterPoisonBombId\030"
  "\002 \001(\005\022\024\n\014PoisonBombId\030\003 \001(\005\022\024\n\014KillPlaye"
  "rId\030\004 \001(\005\022\021\n\tChannelId\030\005 \001(\005\022\023\n\013ProcessT"
  "ime\030\006 \001(\005\"2\n\021SCPoisonbombTypes\022\035\n\004Info\030\001"
  " \001(\0132\017.PoisonbombType\"1\n\017CSDragonRelease"
  "\022\r\n\005Ratio\030\001 \001(\005\022\017\n\007PropsID\030\002 \001(\005\"^\n\017SCDr"
  "agonRelease\022\021\n\tStartTime\030\001 \001(\005\022\020\n\010Player"
  "Id\030\002 \001(\005\022&\n\nAttackInfo\030\003 \001(\0132\022.SpecialAt"
  "tackInfo\"b\n\023SCPushDragonRelease\022\021\n\tStart"
  "Time\030\001 \001(\005\022\020\n\010PlayerId\030\002 \001(\005\022&\n\nAttackIn"
  "fo\030\003 \001(\0132\022.SpecialAttackInfo\"#\n\017SCPushDr"
  "agonEnd\022\020\n\010PlayerId\030\001 \001(\005\"W\n\025SCPushSelfD"
  "ragonState\022\030\n\020ProgressBarCount\030\001 \001(\005\022\023\n\013"
  "ProgressBar\030\002 \001(\005\022\017\n\007PropsID\030\003 \001(\005\"$\n\022CS"
  "OneKeyUpdateHero\022\016\n\006HeroId\030\001 \003(\005\"~\n\022SCOn"
  "eKeyUpdateHero\022\020\n\010PlayerId\030\001 \001(\005\022!\n\tLeav"
  "eInfo\030\002 \001(\0132\016.TowerHeroInfo\022\"\n\nupdateInf"
  "o\030\003 \001(\0132\016.TowerHeroInfo\022\017\n\007TableId\030\004 \001(\005"
  "\"\261\001\n\030SCPushGhostDragonRelease\022\021\n\tStartTi"
  "me\030\001 \001(\005\022\020\n\010PlayerId\030\002 \001(\005\022\022\n\nPositionId"
  "\030\003 \001(\005\022\023\n\013AttackCount\030\004 \001(\005\022\020\n\010UseCount\030"
  "\005 \001(\005\022\r\n\005Ratio\030\006 \001(\005\022&\n\nAttackInfo\030\007 \001(\013"
  "2\022.SpecialAttackInfo\"9\n\024SCPushGhostDrago"
  "nEnd\022\020\n\010PlayerId\030\001 \001(\005\022\017\n\007TableID\030\002 \001(\005\""
  "+\n\032SCPushSelfGhostDragonState\022\r\n\005Count\030\001"
  " \001(\005\">\n\tHeroMoney\022\020\n\010UniqueId\030\001 \001(\005\022\020\n\010P"
  "layerId\030\002 \001(\005\022\r\n\005Money\030\003 \001(\005\"4\n\023SCPushSy"
  "ncHeroMoney\022\035\n\tHeroMoney\030\001 \001(\0132\n.HeroMon"
  "ey\"8\n\021SCPushMonsterDead\022\022\n\nPositionID\030\001 "
  "\001(\005\022\017\n\007TableID\030\002 \001(\005\" \n\013CSDebugData\022\021\n\tD"
  "ebugData\030\001 \001(\t\"\r\n\013SCDebugData\"H\n\021SCPushM"
  "onsterBuff\022\022\n\nPositionID\030\001 \001(\005\022\020\n\010BuffTy"
  "pe\030\002 \001(\005\022\r\n\005State\030\003 \001(\005\"2\n\nTableState\022\017\n"
  "\007TableId\030\001 \001(\005\022\023\n\013TablePlayer\030\002 \001(\005\"\016\n\014C"
  "SGetTableId\",\n\014SCGetTableId\022\034\n\007TableId\030\001"
  " \001(\0132\013.TableState\"B\n\020SCPlayerVipLevel\022\020\n"
  "\010PlayerId\030\001 \001(\005\022\r\n\005Level\030\002 \001(\005\022\r\n\005IsVip\030"
  "\003 \001(\010\"M\n\013DragonProps\022\030\n\020ProgressBarCount"
  "\030\001 \001(\005\022\023\n\013ProgressBar\030\002 \001(\005\022\017\n\007PropsID\030\003"
  " \001(\005\"\022\n\020CSGetDragonProps\".\n\020SCGetDragonP"
  "rops\022\032\n\004Info\030\001 \001(\0132\014.DragonProps\"%\n\022CSEq"
  "uipDragonProps\022\017\n\007PropsID\030\001 \001(\005\"0\n\022SCEqu"
  "ipDragonProps\022\032\n\004Info\030\001 \001(\0132\014.DragonProp"
  "s\"/\n\021SCPushDragonProps\022\032\n\004Info\030\001 \001(\0132\014.D"
  "ragonProps\"i\n\010ShopInfo\022\016\n\006ShopID\030\001 \001(\005\022\014"
  "\n\004Name\030\002 \001(\t\022\r\n\005Value\030\003 \001(\005\022\024\n\014CurrencyT"
  "ype\030\004 \001(\005\022\r\n\005Price\030\005 \001(\005\022\013\n\003Num\030\006 \001(\005\"0\n"
  "\rCSGetShopInfo\022\037\n\014ShopInfoType\030\001 \001(\0162\t.S"
  "hopType\"(\n\rSCGetShopInfo\022\027\n\004Info\030\001 \001(\0132\t"
  ".ShopInfo\">\n\tPropsInfo\022\017\n\007PropsID\030\001 \001(\005\022"
  "\020\n\010TotalNum\030\002 \001(\005\022\016\n\006AddNum\030\003 \001(\005\"+\n\017SCP"
  "ushPropsInfo\022\030\n\004Info\030\001 \001(\0132\n.PropsInfo\"\024"
  "\n\022CSGetMaterialsInfo\".\n\022SCGetMaterialsIn"
  "fo\022\030\n\004Info\030\001 \001(\0132\n.PropsInfo\"\037\n\rCSExchan"
  "geBox\022\016\n\006TypeID\030\001 \001(\005\"-\n\nRewardInfo\022\016\n\006P"
  "ropID\030\001 \001(\005\022\017\n\007PropNum\030\002 \001(\005\"~\n\rSCExchan"
  "geBox\022\016\n\006TypeID\030\001 \001(\005\022\n\n\002ID\030\002 \001(\005\022\033\n\006Rew"
  "ard\030\003 \001(\0132\013.RewardInfo\022\036\n\tAddReward\030\004 \001("
  "\0132\013.RewardInfo\022\024\n\014DoublingCost\030\005 \001(\005\"#\n\r"
  "CSDoublingBox\022\022\n\nIsDoubling\030\001 \001(\010\"j\n\rSCD"
  "oublingBox\022\020\n\010IsDouble\030\001 \001(\010\022\n\n\002ID\030\002 \001(\005"
  "\022\033\n\006Reward\030\003 \001(\0132\013.RewardInfo\022\036\n\tAddRewa"
  "rd\030\004 \001(\0132\013.RewardInfo\".\n\tCSShopBuy\022\017\n\007Pr"
  "opsID\030\001 \001(\005\022\020\n\010PropsNum\030\002 \001(\005\".\n\tSCShopB"
  "uy\022\017\n\007PropsID\030\001 \001(\005\022\020\n\010PropsNum\030\002 \001(\005\"A\n"
  "\rMaterialsInfo\022\022\n\nPositionId\030\001 \001(\005\022\017\n\007Pr"
  "opsID\030\002 \001(\005\022\013\n\003Num\030\003 \001(\005\"3\n\023SCPushDropMa"
  "terials\022\034\n\004Info\030\001 \001(\0132\016.MaterialsInfo\"\254\001"
  "\n\022SCPushBalloonTimes\022\022\n\nPositionId\030\001 \001(\005"
  "\022\020\n\010PlayerId\030\002 \001(\005\022\021\n\tFreeTimes\030\003 \001(\005\022\r\n"
  "\005Ratio\030\004 \001(\005\022\021\n\tStartTime\030\005 \001(\005\022\023\n\013Attac"
  "kCount\030\006 \001(\005\022&\n\nAttackInfo\030\007 \001(\0132\022.Speci"
  "alAttackInfo\"&\n\nSwitchInfo\022\n\n\002Id\030\001 \001(\005\022\014"
  "\n\004Open\030\002 \001(\010\"-\n\020SCFunctionSwitch\022\031\n\004Info"
  "\030\001 \001(\0132\013.SwitchInfo\"\024\n\022CSSealConvertMone"
  "y\"C\n\022SCSealConvertMoney\022\020\n\010PlayerId\030\001 \001("
  "\005\022\014\n\004Seal\030\002 \001(\005\022\r\n\005Money\030\003 \001(\005\"7\n\016Connec"
  "tMonster\022\022\n\nPositionID\030\001 \001(\005\022\021\n\tMonsterI"
  "D\030\002 \001(\005\"e\n\024SCPushConnectMonster\022 \n\007Conne"
  "ct\030\001 \001(\0132\017.ConnectMonster\022\021\n\tConnectID\030\002"
  " \001(\005\022\030\n\020AttackPositionID\030\003 \001(\005\"\241\001\n\016SCGia"
  "ntUpgrade\022\020\n\010PlayerId\030\001 \001(\005\022\022\n\nPositionI"
  "d\030\002 \001(\005\022\r\n\005Level\030\003 \001(\005\022\023\n\013AttackTimes\030\004 "
  "\001(\005\022&\n\nAttackInfo\030\005 \001(\0132\022.SpecialAttackI"
  "nfo\022\016\n\006IsOver\030\006 \001(\010\022\r\n\005Ratio\030\007 \001(\005\"6\n\016SC"
  "PushGiantEnd\022\020\n\010PlayerId\030\001 \001(\005\022\022\n\nPositi"
  "onId\030\002 \001(\005\"\204\001\n\nSCDropCard\022\n\n\002ID\030\001 \001(\005\022\016\n"
  "\006TypeID\030\002 \001(\005\022\017\n\007Quality\030\003 \001(\005\022\021\n\tBasePo"
  "wer\030\004 \001(\005\022\023\n\013ExtendPower\030\005 \001(\005\022\r\n\005Equip\030"
  "\006 \001(\005\022\022\n\nPositionID\030\007 \001(\005\"W\n\rSCAcquireSe"
  "al\022\020\n\010PlayerId\030\001 \001(\005\022\034\n\024MxlSealAddAwardR"
  "atio\030\002 \001(\005\022\026\n\016HeroPositionId\030\003 \001(\005\"L\n\nFr"
  "eshMoney\022\020\n\010PlayerId\030\001 \001(\005\022\013\n\003Fee\030\002 \001(\005\022"
  "\016\n\006GameID\030\003 \001(\005\022\017\n\007CYMoney\030\004 \001(\005\"D\n\017Shut"
  "downService\022\016\n\006GameID\030\001 \001(\005\022\017\n\007ArenaID\030\002"
  " \001(\005\022\020\n\010ServerID\030\003 \001(\005*\252\020\n\rEMsgIDSubGame"
  "\022\017\n\013Req_Invalid\020\000\022\r\n\010Req_Ping\020\350\007\022\033\n\026Req_"
  "LoginGameWithToken\020\351\007\022\023\n\016Req_LogoutGame\020"
  "\352\007\022\024\n\017Push_LogoutGame\020\353\007\022\026\n\021Req_RequestA"
  "ttack\020\354\007\022\023\n\016Push_SyncMoney\020\355\007\022\027\n\022Push_Sy"
  "ncFreeTimes\020\356\007\022\027\n\022Req_UpdateHeroInfo\020\357\007\022"
  "\030\n\023Req_UpgradeHeroInfo\020\360\007\022\023\n\016Req_EnterSt"
  "age\020\361\007\022\030\n\023Push_PoisonBomTimes\020\204\010\022\027\n\022Req_"
  "GetTrusteeship\020\205\010\022\027\n\022Req_SetTrusteeship\020"
  "\206\010\022\027\n\022Req_EndTrusteeship\020\207\010\022\030\n\023Push_EndT"
  "rusteeship\020\210\010\022\023\n\016Req_GetVersion\020\217\010\022\035\n\030Re"
  "q_ChangePoisonBomTimes\020\220\010\022\022\n\rReq_KeepRat"
  "io\020\224\010\022\031\n\024Push_LeaveTowerTable\020\226\010\022 \n\033Push"
  "_NotifyTowerTablePlayer\020\227\010\022\031\n\024Push_GetTo"
  "werMonster\020\230\010\022\030\n\023Req_GetTowerMonster\020\231\010\022"
  "\026\n\021Push_TowerMonster\020\232\010\022\031\n\024Req_TowerHero"
  "AtkInfo\020\233\010\022\032\n\025Push_TowerHeroAtkInfo\020\234\010\022\030"
  "\n\023Req_TowerUpdateHero\020\235\010\022\031\n\024Push_TowerUp"
  "dateHero\020\236\010\022\036\n\031Req_TowerPlayerLockTarget"
  "\020\237\010\022\037\n\032Push_TowerPlayerLockTarget\020\240\010\022\031\n\024"
  "Req_ChangeBackground\020\241\010\022\027\n\022Req_GetCurren"
  "tTime\020\242\010\022\035\n\030Push_SyncGetTowerMonster\020\256\010\022"
  "\031\n\024Req_TowerMonsterExit\020\267\010\022\031\n\024Req_GetTow"
  "erNewGuide\020\271\010\022\031\n\024Req_SetTowerNewGuide\020\272\010"
  "\022\025\n\020Req_ActivityInfo\020\273\010\022\034\n\027Push_NotifyAc"
  "tivityInfo\020\274\010\022\031\n\024Req_GetActivityAward\020\275\010"
  "\022\032\n\025Req_TowerExchangeHero\020\301\010\022\033\n\026Push_Tow"
  "erExchangeHero\020\313\010\022\026\n\021Req_ButtonRecords\020\314"
  "\010\022\033\n\026Push_SyncBatBulletInfo\020\315\010\022\"\n\035Push_L"
  "eaveTowerTableCountdown\020\316\010\022\033\n\026Req_Poison"
  "BombLocation\020\317\010\022\034\n\027Push_PoisonBombLocati"
  "on\020\320\010\022\033\n\026Push_PoisonBombConvert\020\321\010\022\030\n\023Pu"
  "sh_PoisonBombType\020\322\010\022\026\n\021Req_DragonReleas"
  "e\020\323\010\022\027\n\022Push_DragonRelease\020\324\010\022\023\n\016Push_Dr"
  "agonEnd\020\325\010\022\031\n\024Push_SelfDragonState\020\326\010\022\031\n"
  "\024Req_OneKeyUpdateHero\020\327\010\022\032\n\025Push_OneKeyU"
  "pdateHero\020\330\010\022\034\n\027Push_GhostDragonRelease\020"
  "\331\010\022\030\n\023Push_GhostDragonEnd\020\332\010\022\036\n\031Push_Sel"
  "fGhostDragonState\020\333\010\022\027\n\022Push_SyncHeroMon"
  "ey\020\334\010\022\031\n\024Push_PushMonsterDead\020\335\010\022\022\n\rReq_"
  "DebugData\020\336\010\022\031\n\024Push_PushMonsterBuff\020\337\010\022"
  "\023\n\016Req_GetTableId\020\340\010\022\030\n\023Push_PlayerVipLe"
  "vel\020\341\010\022\027\n\022Req_GetDragonProps\020\342\010\022\031\n\024Req_E"
  "quipDragonProps\020\343\010\022\025\n\020Push_DragonProps\020\344"
  "\010\022\024\n\017Req_GetShopInfo\020\345\010\022\023\n\016Push_PropsInf"
  "o\020\346\010\022\031\n\024Req_GetMaterialsInfo\020\347\010\022\024\n\017Req_E"
  "xchangeBox\020\350\010\022\024\n\017Req_DoublingBox\020\351\010\022\020\n\013R"
  "eq_ShopBuy\020\352\010\022\027\n\022Push_DropMaterials\020\353\010\022\026"
  "\n\021Push_BalloonTimes\020\354\010\022\030\n\023Push_FunctionS"
  "witch\020\355\010\022\030\n\023Push_ConnectMonster\020\356\010\022\026\n\021Pu"
  "sh_GiantUpgrade\020\364\010\022\026\n\021Push_PushGiantEnd\020"
  "\365\010\022\022\n\rPush_DropCard\020\366\010\022\030\n\023Push_AcquireMx"
  "lSeal\020\367\010\022\031\n\024Req_SealConvertMoney\020\370\010*\246\025\n\007"
  "ErrCode\022\013\n\007Success\020\000\022\027\n\022EnterRoomIsClosi"
  "ng\020\347\007\022\026\n\021QPEnterRoomFailed\020\221N\022\034\n\027QPBaseU"
  "serInfoGetFailed\020\222N\022\025\n\020QPReadGoldFailed\020"
  "\223N\022\026\n\021LackMoneyInServer\020\224N\022\031\n\024LoadPlayer"
  "DataFailed\020\225N\022\025\n\020ParameterIsWrong\020\226N\022\020\n\013"
  "LackOfMoney\020\227N\022\026\n\021DeserializeFailed\020\230N\022\027"
  "\n\022CreatePlayerFailed\020\231N\022\023\n\016PlayerNotExis"
  "t\020\232N\022\027\n\022PlayerAlreadyLogin\020\233N\022\024\n\017ConfigN"
  "oHasHero\020\234N\022\024\n\017PlayerNoHasHero\020\235N\022\026\n\021Her"
  "oPositionError\020\236N\022\033\n\026HeroHasUpgradeMaxLe"
  "vel\020\237N\022\027\n\022HasNotEnoughEnzyme\020\240N\022\027\n\022Confi"
  "gNoHasMonster\020\241N\022\025\n\020HeroUpdateFailed\020\242N\022"
  "\021\n\014HeroHasExist\020\243N\022\030\n\023AttackMonsterFaile"
  "d\020\244N\022\024\n\017MonsterScoreErr\020\245N\022\032\n\025NotFindLiq"
  "uidMedicine\020\246N\022\037\n\032HasNotEnoughLiquidMedi"
  "cine\020\247N\022\026\n\021NotFindLaboratory\020\250N\022\036\n\031Labor"
  "atoryUpgradeMaxLevel\020\251N\022\037\n\032NotFindLevelU"
  "nlockEquation\020\252N\022\031\n\024UnlockParameterError"
  "\020\253N\022\030\n\023LaboratoryNotUnlock\020\254N\022\032\n\025NotFind"
  "EnzymeEquation\020\255N\022\"\n\035LaboratoryNotReachU"
  "nlockLevel\020\256N\022\030\n\023LaboratoryHasUnlock\020\257N\022"
  "\025\n\020NotFindDailyTask\020\260N\022\030\n\023NotFindDailyTa"
  "skCfg\020\261N\022\031\n\024HasGetDailyTaskAward\020\262N\022\036\n\031N"
  "oReachDailyTaskCondition\020\263N\022\035\n\030NoReachDa"
  "ilyTaskSchedule\020\264N\022\025\n\020DailyTaskIDError\020\265"
  "N\022\027\n\022ReachDailyTaskOver\020\266N\022\023\n\016IsNotStage"
  "Mode\020\267N\022\027\n\022ModeNotExistMoster\020\270N\022\026\n\021NoEx"
  "istGhostLoong\020\271N\022\036\n\031BuyLiquidMedicineMax"
  "Times\020\272N\022\034\n\027HighModeMonsterSetError\020\273N\022\023"
  "\n\016MonsterHasKill\020\274N\022\025\n\020TrusteeshipIsEnd\020"
  "\275N\022\030\n\023TrusteeshipCfgError\020\276N\022\032\n\025Trustees"
  "hipNoVIPLevel\020\277N\022\025\n\020NotUseSameLiquid\020\300N\022"
  "\031\n\024PlayerNotTrusteeship\020\301N\022\024\n\017ExistWaitP"
  "layer\020\302N\022\030\n\023SendProtoFrequently\020\303N\022\035\n\030Po"
  "isonBomPositionIdError\020\304N\022\032\n\025PoisonBomTi"
  "mesNotFind\020\305N\022\035\n\030NotReachUnlockCondition"
  "s\020\306N\022\030\n\023HasGetScheduleAward\020\307N\022\027\n\022NotFin"
  "dScheduleCfg\020\310N\022\034\n\027BuyNostrumLiquidOnlyO"
  "ne\020\311N\022\027\n\022HeroLevelNotUnlock\020\312N\022\026\n\021NoExis"
  "tMergeSkill\020\313N\022\026\n\021HasNotEnoughStone\020\314N\022\035"
  "\n\030HasNotEnoughCrystalStone\020\315N\022\035\n\030NotKill"
  "ingEnoughMonsters\020\316N\022\025\n\020Notint32owerMode"
  "\020\317N\022\024\n\017Notint32hisMode\020\320N\022\024\n\017NotExistMon"
  "ster\020\321N\022\032\n\025HasHeroOfOtherPlayers\020\322N\022\026\n\021H"
  "asNotEnoughScore\020\323N\022\026\n\021PositionNoHasHero"
  "\020\324N\022\023\n\016PassNoNotExist\020\325N\022\023\n\016NotInMultiMo"
  "de\020\326N\022\031\n\024HighModeMonsterNoCfg\020\327N\022\030\n\023Nigh"
  "tKingBossHasMax\020\330N\022\026\n\021HeroAppearedIsMax\020"
  "\331N\022\030\n\023FailureToEnterStage\020\332N\022\032\n\025Position"
  "IsOtherPlayer\020\333N\022\031\n\024MultiTableStateError"
  "\020\334N\022\020\n\013InOtherMode\020\335N\022\026\n\021NotEnoughStageN"
  "um\020\336N\022\031\n\024NewGuideHasCompleted\020\337N\022\025\n\020Acti"
  "vityNotExist\020\340N\022\031\n\024ActivityNotCondition\020"
  "\341N\022\030\n\023ActivityHasGetAward\020\342N\022\030\n\023Activity"
  "IsNotWeChat\020\343N\022\021\n\014HasOtherHero\020\344N\022\025\n\020Bat"
  "BulletNotFind\020\345N\022\025\n\020DragonNotRelease\020\346N\022"
  "\025\n\020DragonNowRelease\020\347N\022\023\n\016DragonCoolDown"
  "\020\350N\022\037\n\032TrusteeshipDragonNotRealse\020\351N\022\033\n\026"
  "DragonAttackConfigWron\020\352N\022\032\n\025GhostDragon"
  "NotRelease\020\353N\022\021\n\014InvalidToken\020\354N\022\036\n\031Load"
  "PlayerWithPropsFailed\020\355N\022\025\n\020PlayerDataFa"
  "iled\020\356N\022\030\n\023EnterGameNotifyHall\020\357N\022\023\n\016Not"
  "DragonProps\020\360N\022\024\n\017VipPropsExpired\020\361N\022\030\n\023"
  "UseHeroNeedVipProps\020\362N\022\026\n\021NotEnoughVipLe"
  "vel\020\363N\022\027\n\022NotEnoughMaterials\020\364N\022\026\n\021NotEn"
  "oughDiamonds\020\365N\022\025\n\020NotFindGragonBox\020\366N\022\021"
  "\n\014NotFindGoods\020\367N\022\022\n\rGoodsNumError\020\370N\022\026\n"
  "\021NotAttackSameType\020\371N\022\025\n\020HeroMxlOverLimi"
  "t\020\372N*H\n\010ModeType\022\t\n\005Stage\020\000\022\010\n\004High\020\001\022\t\n"
  "\005Tower\020\002\022\t\n\005Multi\020\003\022\010\n\004None\020\004\022\007\n\003Max\020\005*N"
  "\n\010StepType\022\014\n\010StepHigh\020\000\022\023\n\017StepUpgradeH"
  "ero\020\001\022\022\n\016StepGhostLoong\020\002\022\013\n\007StepMax\020\003*8"
  "\n\010ShopType\022\014\n\010NoneType\020\000\022\r\n\tMaterials\020\001\022"
  "\017\n\013MaxShopType\020\002*\211\004\n\013HallMsgCode\022\017\n\013HMC_"
  "Invalid\020\000\022\014\n\010HMC_CHat\020\001\022\024\n\020HMC_ServerUpd"
  "ate\020\002\022\023\n\017HMC_MailPublish\020\007\022\027\n\023HMC_AwardG"
  "oldUpdate\020\010\022\035\n\031HMC_TriggerArenaAwardGold"
  "\020\t\022\037\n\033HMC_AwardGoldPoolTriggerLog\020\n\022\022\n\016H"
  "MC_FreshMoney\020\013\022\034\n\030HMC_BplUpdateJackpotP"
  "ool\020\014\022\036\n\032HMC_BplInsertJackpotRecord\020\r\022#\n"
  "\037HMC_AddArenaAwardGoldPoolNotify\020\016\022\014\n\010HM"
  "C_Ping\020\017\022\027\n\023HMC_ShutdownService\020\020\022\032\n\026HMC"
  "_TransferToCelint32\020\021\022\030\n\024HMC_CheckWeChat"
  "Login\020\022\022\035\n\031HMC_UserInfoUserEnterGame\020\023\022\034"
  "\n\030HMC_UserInfoUserExitGame\020\024\022\022\n\016HMC_Anti"
  "nDulge\020\025\022\027\n\023HMC_TurntableRecord\020\026\022\031\n\025HMC"
  "_GetAwardGoldValue\020\027*\274\001\n\020HallMsgErrorCod"
  "e\022\020\n\014HMEC_Invalid\020\000\022\016\n\nHMEC_Param\020\001\022\021\n\rH"
  "MEC_Register\020\002\022\017\n\013HMEC_Sucess\020\003\022\027\n\023HMEC_"
  "PlayerNotExist\020\004\022\032\n\026HMEC_DeserializeFail"
  "ed\020\005\022\027\n\023HMEC_FreshUserMoney\020\006\022\024\n\020HMEC_Sy"
  "stemError\020\007b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_JSBY_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_JSBY_2eproto_sccs[129] = {
  &scc_info_ActivityInfo_JSBY_2eproto.base,
  &scc_info_CSActivityInfo_JSBY_2eproto.base,
  &scc_info_CSButtonRecords_JSBY_2eproto.base,
  &scc_info_CSChangeBackground_JSBY_2eproto.base,
  &scc_info_CSChangePoisonBomTimes_JSBY_2eproto.base,
  &scc_info_CSDebugData_JSBY_2eproto.base,
  &scc_info_CSDoublingBox_JSBY_2eproto.base,
  &scc_info_CSDragonRelease_JSBY_2eproto.base,
  &scc_info_CSEndTrusteeship_JSBY_2eproto.base,
  &scc_info_CSEnterStage_JSBY_2eproto.base,
  &scc_info_CSEquipDragonProps_JSBY_2eproto.base,
  &scc_info_CSExchangeBox_JSBY_2eproto.base,
  &scc_info_CSGetActivityAward_JSBY_2eproto.base,
  &scc_info_CSGetCurrentTime_JSBY_2eproto.base,
  &scc_info_CSGetDragonProps_JSBY_2eproto.base,
  &scc_info_CSGetMaterialsInfo_JSBY_2eproto.base,
  &scc_info_CSGetShopInfo_JSBY_2eproto.base,
  &scc_info_CSGetTableId_JSBY_2eproto.base,
  &scc_info_CSGetTowerMonster_JSBY_2eproto.base,
  &scc_info_CSGetTowerStep_JSBY_2eproto.base,
  &scc_info_CSGetTrusteeship_JSBY_2eproto.base,
  &scc_info_CSGetVersion_JSBY_2eproto.base,
  &scc_info_CSKeepRatio_JSBY_2eproto.base,
  &scc_info_CSLoginGameWithToken_JSBY_2eproto.base,
  &scc_info_CSOneKeyUpdateHero_JSBY_2eproto.base,
  &scc_info_CSPoisonBombLocation_JSBY_2eproto.base,
  &scc_info_CSRequestAttack_JSBY_2eproto.base,
  &scc_info_CSSealConvertMoney_JSBY_2eproto.base,
  &scc_info_CSSetTowerStep_JSBY_2eproto.base,
  &scc_info_CSSetTrusteeship_JSBY_2eproto.base,
  &scc_info_CSShopBuy_JSBY_2eproto.base,
  &scc_info_CSTowerExchangeHero_JSBY_2eproto.base,
  &scc_info_CSTowerHeroAtkInfo_JSBY_2eproto.base,
  &scc_info_CSTowerMonsterExit_JSBY_2eproto.base,
  &scc_info_CSTowerPlayerLockTarget_JSBY_2eproto.base,
  &scc_info_CSTowerUpdateHero_JSBY_2eproto.base,
  &scc_info_ChannelTowerMonster_JSBY_2eproto.base,
  &scc_info_ConnectMonster_JSBY_2eproto.base,
  &scc_info_DragonProps_JSBY_2eproto.base,
  &scc_info_FreshMoney_JSBY_2eproto.base,
  &scc_info_HeroInfo_JSBY_2eproto.base,
  &scc_info_HeroMoney_JSBY_2eproto.base,
  &scc_info_LockTargetInfo_JSBY_2eproto.base,
  &scc_info_MaterialsInfo_JSBY_2eproto.base,
  &scc_info_PoisonBombLocation_JSBY_2eproto.base,
  &scc_info_PoisonbombConvert_JSBY_2eproto.base,
  &scc_info_PoisonbombType_JSBY_2eproto.base,
  &scc_info_PropsInfo_JSBY_2eproto.base,
  &scc_info_RewardInfo_JSBY_2eproto.base,
  &scc_info_SCAcquireSeal_JSBY_2eproto.base,
  &scc_info_SCActivityInfo_JSBY_2eproto.base,
  &scc_info_SCButtonRecords_JSBY_2eproto.base,
  &scc_info_SCChangeBackground_JSBY_2eproto.base,
  &scc_info_SCChangePoisonBomTimes_JSBY_2eproto.base,
  &scc_info_SCDebugData_JSBY_2eproto.base,
  &scc_info_SCDoublingBox_JSBY_2eproto.base,
  &scc_info_SCDragonRelease_JSBY_2eproto.base,
  &scc_info_SCDropCard_JSBY_2eproto.base,
  &scc_info_SCEndTrusteeship_JSBY_2eproto.base,
  &scc_info_SCEnterStage_JSBY_2eproto.base,
  &scc_info_SCEquipDragonProps_JSBY_2eproto.base,
  &scc_info_SCExchangeBox_JSBY_2eproto.base,
  &scc_info_SCFunctionSwitch_JSBY_2eproto.base,
  &scc_info_SCGetActivityAward_JSBY_2eproto.base,
  &scc_info_SCGetCurrentTime_JSBY_2eproto.base,
  &scc_info_SCGetDragonProps_JSBY_2eproto.base,
  &scc_info_SCGetMaterialsInfo_JSBY_2eproto.base,
  &scc_info_SCGetShopInfo_JSBY_2eproto.base,
  &scc_info_SCGetTableId_JSBY_2eproto.base,
  &scc_info_SCGetTowerGuide_JSBY_2eproto.base,
  &scc_info_SCGetTowerMonster_JSBY_2eproto.base,
  &scc_info_SCGetTrusteeship_JSBY_2eproto.base,
  &scc_info_SCGetVersion_JSBY_2eproto.base,
  &scc_info_SCGiantUpgrade_JSBY_2eproto.base,
  &scc_info_SCKeepRatio_JSBY_2eproto.base,
  &scc_info_SCLeaveTowerTable_JSBY_2eproto.base,
  &scc_info_SCLeaveTowerTableCountdown_JSBY_2eproto.base,
  &scc_info_SCLoginGameWithToken_JSBY_2eproto.base,
  &scc_info_SCNotifyActivityInfo_JSBY_2eproto.base,
  &scc_info_SCNotifyTowerTablePlayer_JSBY_2eproto.base,
  &scc_info_SCOneKeyUpdateHero_JSBY_2eproto.base,
  &scc_info_SCPlayerVipLevel_JSBY_2eproto.base,
  &scc_info_SCPoisonBomTimes_JSBY_2eproto.base,
  &scc_info_SCPoisonBombConvert_JSBY_2eproto.base,
  &scc_info_SCPoisonBombLocation_JSBY_2eproto.base,
  &scc_info_SCPoisonbombTypes_JSBY_2eproto.base,
  &scc_info_SCPushBalloonTimes_JSBY_2eproto.base,
  &scc_info_SCPushConnectMonster_JSBY_2eproto.base,
  &scc_info_SCPushDragonEnd_JSBY_2eproto.base,
  &scc_info_SCPushDragonProps_JSBY_2eproto.base,
  &scc_info_SCPushDragonRelease_JSBY_2eproto.base,
  &scc_info_SCPushDropMaterials_JSBY_2eproto.base,
  &scc_info_SCPushGhostDragonEnd_JSBY_2eproto.base,
  &scc_info_SCPushGhostDragonRelease_JSBY_2eproto.base,
  &scc_info_SCPushGiantEnd_JSBY_2eproto.base,
  &scc_info_SCPushMonsterBuff_JSBY_2eproto.base,
  &scc_info_SCPushMonsterDead_JSBY_2eproto.base,
  &scc_info_SCPushPropsInfo_JSBY_2eproto.base,
  &scc_info_SCPushSelfDragonState_JSBY_2eproto.base,
  &scc_info_SCPushSelfGhostDragonState_JSBY_2eproto.base,
  &scc_info_SCPushSyncHeroMoney_JSBY_2eproto.base,
  &scc_info_SCPushTowerUpdateHero_JSBY_2eproto.base,
  &scc_info_SCRequestAttack_JSBY_2eproto.base,
  &scc_info_SCSealConvertMoney_JSBY_2eproto.base,
  &scc_info_SCSetTowerStep_JSBY_2eproto.base,
  &scc_info_SCSetTrusteeship_JSBY_2eproto.base,
  &scc_info_SCShopBuy_JSBY_2eproto.base,
  &scc_info_SCSyncGetTowerMonster_JSBY_2eproto.base,
  &scc_info_SCSyncMoney_JSBY_2eproto.base,
  &scc_info_SCTowerExchangeHero_JSBY_2eproto.base,
  &scc_info_SCTowerHeroAtkInfo_JSBY_2eproto.base,
  &scc_info_SCTowerMonster_JSBY_2eproto.base,
  &scc_info_SCTowerMonsterExit_JSBY_2eproto.base,
  &scc_info_SCTowerPlayerLockTarget_JSBY_2eproto.base,
  &scc_info_SCTowerUpdateHero_JSBY_2eproto.base,
  &scc_info_ShopInfo_JSBY_2eproto.base,
  &scc_info_ShutdownService_JSBY_2eproto.base,
  &scc_info_SpecialAttackInfo_JSBY_2eproto.base,
  &scc_info_SpecialMonsterAttack_JSBY_2eproto.base,
  &scc_info_SwitchInfo_JSBY_2eproto.base,
  &scc_info_TablePlayerInfo_JSBY_2eproto.base,
  &scc_info_TableState_JSBY_2eproto.base,
  &scc_info_TowerGuideInfo_JSBY_2eproto.base,
  &scc_info_TowerHeroAtkInfo_JSBY_2eproto.base,
  &scc_info_TowerHeroInfo_JSBY_2eproto.base,
  &scc_info_TowerMonster_JSBY_2eproto.base,
  &scc_info_TrusteeshipInfo_JSBY_2eproto.base,
  &scc_info_TrusteeshipMoney_JSBY_2eproto.base,
  &scc_info_UserBomTimes_JSBY_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_JSBY_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_JSBY_2eproto = {
  false, false, descriptor_table_protodef_JSBY_2eproto, "JSBY.proto", 14739,
  &descriptor_table_JSBY_2eproto_once, descriptor_table_JSBY_2eproto_sccs, descriptor_table_JSBY_2eproto_deps, 129, 0,
  schemas, file_default_instances, TableStruct_JSBY_2eproto::offsets,
  file_level_metadata_JSBY_2eproto, 129, file_level_enum_descriptors_JSBY_2eproto, file_level_service_descriptors_JSBY_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_JSBY_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_JSBY_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDSubGame_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_JSBY_2eproto);
  return file_level_enum_descriptors_JSBY_2eproto[0];
}
bool EMsgIDSubGame_IsValid(int value) {
  switch (value) {
    case 0:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1028:
    case 1029:
    case 1030:
    case 1031:
    case 1032:
    case 1039:
    case 1040:
    case 1044:
    case 1046:
    case 1047:
    case 1048:
    case 1049:
    case 1050:
    case 1051:
    case 1052:
    case 1053:
    case 1054:
    case 1055:
    case 1056:
    case 1057:
    case 1058:
    case 1070:
    case 1079:
    case 1081:
    case 1082:
    case 1083:
    case 1084:
    case 1085:
    case 1089:
    case 1099:
    case 1100:
    case 1101:
    case 1102:
    case 1103:
    case 1104:
    case 1105:
    case 1106:
    case 1107:
    case 1108:
    case 1109:
    case 1110:
    case 1111:
    case 1112:
    case 1113:
    case 1114:
    case 1115:
    case 1116:
    case 1117:
    case 1118:
    case 1119:
    case 1120:
    case 1121:
    case 1122:
    case 1123:
    case 1124:
    case 1125:
    case 1126:
    case 1127:
    case 1128:
    case 1129:
    case 1130:
    case 1131:
    case 1132:
    case 1133:
    case 1134:
    case 1140:
    case 1141:
    case 1142:
    case 1143:
    case 1144:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_JSBY_2eproto);
  return file_level_enum_descriptors_JSBY_2eproto[1];
}
bool ErrCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 999:
    case 10001:
    case 10002:
    case 10003:
    case 10004:
    case 10005:
    case 10006:
    case 10007:
    case 10008:
    case 10009:
    case 10010:
    case 10011:
    case 10012:
    case 10013:
    case 10014:
    case 10015:
    case 10016:
    case 10017:
    case 10018:
    case 10019:
    case 10020:
    case 10021:
    case 10022:
    case 10023:
    case 10024:
    case 10025:
    case 10026:
    case 10027:
    case 10028:
    case 10029:
    case 10030:
    case 10031:
    case 10032:
    case 10033:
    case 10034:
    case 10035:
    case 10036:
    case 10037:
    case 10038:
    case 10039:
    case 10040:
    case 10041:
    case 10042:
    case 10043:
    case 10044:
    case 10045:
    case 10046:
    case 10047:
    case 10048:
    case 10049:
    case 10050:
    case 10051:
    case 10052:
    case 10053:
    case 10054:
    case 10055:
    case 10056:
    case 10057:
    case 10058:
    case 10059:
    case 10060:
    case 10061:
    case 10062:
    case 10063:
    case 10064:
    case 10065:
    case 10066:
    case 10067:
    case 10068:
    case 10069:
    case 10070:
    case 10071:
    case 10072:
    case 10073:
    case 10074:
    case 10075:
    case 10076:
    case 10077:
    case 10078:
    case 10079:
    case 10080:
    case 10081:
    case 10082:
    case 10083:
    case 10084:
    case 10085:
    case 10086:
    case 10087:
    case 10088:
    case 10089:
    case 10090:
    case 10091:
    case 10092:
    case 10093:
    case 10094:
    case 10095:
    case 10096:
    case 10097:
    case 10098:
    case 10099:
    case 10100:
    case 10101:
    case 10102:
    case 10103:
    case 10104:
    case 10105:
    case 10106:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_JSBY_2eproto);
  return file_level_enum_descriptors_JSBY_2eproto[2];
}
bool ModeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StepType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_JSBY_2eproto);
  return file_level_enum_descriptors_JSBY_2eproto[3];
}
bool StepType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShopType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_JSBY_2eproto);
  return file_level_enum_descriptors_JSBY_2eproto[4];
}
bool ShopType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HallMsgCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_JSBY_2eproto);
  return file_level_enum_descriptors_JSBY_2eproto[5];
}
bool HallMsgCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HallMsgErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_JSBY_2eproto);
  return file_level_enum_descriptors_JSBY_2eproto[6];
}
bool HallMsgErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class HeroInfo::_Internal {
 public:
};

HeroInfo::HeroInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HeroInfo)
}
HeroInfo::HeroInfo(const HeroInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&unlock_) -
    reinterpret_cast<char*>(&id_)) + sizeof(unlock_));
  // @@protoc_insertion_point(copy_constructor:HeroInfo)
}

void HeroInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&unlock_) -
      reinterpret_cast<char*>(&id_)) + sizeof(unlock_));
}

HeroInfo::~HeroInfo() {
  // @@protoc_insertion_point(destructor:HeroInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HeroInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HeroInfo::ArenaDtor(void* object) {
  HeroInfo* _this = reinterpret_cast< HeroInfo* >(object);
  (void)_this;
}
void HeroInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeroInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeroInfo& HeroInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeroInfo_JSBY_2eproto.base);
  return *internal_default_instance();
}


void HeroInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:HeroInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unlock_) -
      reinterpret_cast<char*>(&id_)) + sizeof(unlock_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeroInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Unlock = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          unlock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeroInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HeroInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 Level = 2;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  // int32 Position = 3;
  if (this->position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_position(), target);
  }

  // int32 Unlock = 4;
  if (this->unlock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_unlock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HeroInfo)
  return target;
}

size_t HeroInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HeroInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 Level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int32 Position = 3;
  if (this->position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_position());
  }

  // int32 Unlock = 4;
  if (this->unlock() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unlock());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeroInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HeroInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const HeroInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeroInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HeroInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HeroInfo)
    MergeFrom(*source);
  }
}

void HeroInfo::MergeFrom(const HeroInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HeroInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.position() != 0) {
    _internal_set_position(from._internal_position());
  }
  if (from.unlock() != 0) {
    _internal_set_unlock(from._internal_unlock());
  }
}

void HeroInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HeroInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroInfo::CopyFrom(const HeroInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HeroInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroInfo::IsInitialized() const {
  return true;
}

void HeroInfo::InternalSwap(HeroInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeroInfo, unlock_)
      + sizeof(HeroInfo::unlock_)
      - PROTOBUF_FIELD_OFFSET(HeroInfo, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeroInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSLoginGameWithToken::_Internal {
 public:
};

CSLoginGameWithToken::CSLoginGameWithToken(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSLoginGameWithToken)
}
CSLoginGameWithToken::CSLoginGameWithToken(const CSLoginGameWithToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  clientversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientversion().empty()) {
    clientversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clientversion(), 
      GetArena());
  }
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:CSLoginGameWithToken)
}

void CSLoginGameWithToken::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSLoginGameWithToken_JSBY_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_ = 0;
}

CSLoginGameWithToken::~CSLoginGameWithToken() {
  // @@protoc_insertion_point(destructor:CSLoginGameWithToken)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSLoginGameWithToken::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSLoginGameWithToken::ArenaDtor(void* object) {
  CSLoginGameWithToken* _this = reinterpret_cast< CSLoginGameWithToken* >(object);
  (void)_this;
}
void CSLoginGameWithToken::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSLoginGameWithToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSLoginGameWithToken& CSLoginGameWithToken::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSLoginGameWithToken_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSLoginGameWithToken::Clear() {
// @@protoc_insertion_point(message_clear_start:CSLoginGameWithToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty();
  clientversion_.ClearToEmpty();
  playerid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSLoginGameWithToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 PlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSLoginGameWithToken.Token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ClientVersion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_clientversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSLoginGameWithToken.ClientVersion"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSLoginGameWithToken::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSLoginGameWithToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PlayerId = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // string Token = 2;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CSLoginGameWithToken.Token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  // string ClientVersion = 3;
  if (this->clientversion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientversion().data(), static_cast<int>(this->_internal_clientversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CSLoginGameWithToken.ClientVersion");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_clientversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSLoginGameWithToken)
  return target;
}

size_t CSLoginGameWithToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSLoginGameWithToken)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string ClientVersion = 3;
  if (this->clientversion().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientversion());
  }

  // int32 PlayerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSLoginGameWithToken::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSLoginGameWithToken)
  GOOGLE_DCHECK_NE(&from, this);
  const CSLoginGameWithToken* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSLoginGameWithToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSLoginGameWithToken)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSLoginGameWithToken)
    MergeFrom(*source);
  }
}

void CSLoginGameWithToken::MergeFrom(const CSLoginGameWithToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSLoginGameWithToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.clientversion().size() > 0) {
    _internal_set_clientversion(from._internal_clientversion());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
}

void CSLoginGameWithToken::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSLoginGameWithToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLoginGameWithToken::CopyFrom(const CSLoginGameWithToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSLoginGameWithToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLoginGameWithToken::IsInitialized() const {
  return true;
}

void CSLoginGameWithToken::InternalSwap(CSLoginGameWithToken* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clientversion_.Swap(&other->clientversion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(playerid_, other->playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSLoginGameWithToken::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCLoginGameWithToken::_Internal {
 public:
};

SCLoginGameWithToken::SCLoginGameWithToken(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCLoginGameWithToken)
}
SCLoginGameWithToken::SCLoginGameWithToken(const SCLoginGameWithToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&money_, &from.money_,
    static_cast<size_t>(reinterpret_cast<char*>(&useratio_) -
    reinterpret_cast<char*>(&money_)) + sizeof(useratio_));
  // @@protoc_insertion_point(copy_constructor:SCLoginGameWithToken)
}

void SCLoginGameWithToken::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&money_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&useratio_) -
      reinterpret_cast<char*>(&money_)) + sizeof(useratio_));
}

SCLoginGameWithToken::~SCLoginGameWithToken() {
  // @@protoc_insertion_point(destructor:SCLoginGameWithToken)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCLoginGameWithToken::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCLoginGameWithToken::ArenaDtor(void* object) {
  SCLoginGameWithToken* _this = reinterpret_cast< SCLoginGameWithToken* >(object);
  (void)_this;
}
void SCLoginGameWithToken::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCLoginGameWithToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCLoginGameWithToken& SCLoginGameWithToken::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCLoginGameWithToken_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCLoginGameWithToken::Clear() {
// @@protoc_insertion_point(message_clear_start:SCLoginGameWithToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&money_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&useratio_) -
      reinterpret_cast<char*>(&money_)) + sizeof(useratio_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCLoginGameWithToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Money = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 IsFirstLogin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isfirstlogin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 UseRatio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          useratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCLoginGameWithToken::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCLoginGameWithToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Money = 1;
  if (this->money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_money(), target);
  }

  // int32 IsFirstLogin = 2;
  if (this->isfirstlogin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_isfirstlogin(), target);
  }

  // int32 UseRatio = 3;
  if (this->useratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_useratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCLoginGameWithToken)
  return target;
}

size_t SCLoginGameWithToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCLoginGameWithToken)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Money = 1;
  if (this->money() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_money());
  }

  // int32 IsFirstLogin = 2;
  if (this->isfirstlogin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_isfirstlogin());
  }

  // int32 UseRatio = 3;
  if (this->useratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_useratio());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCLoginGameWithToken::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCLoginGameWithToken)
  GOOGLE_DCHECK_NE(&from, this);
  const SCLoginGameWithToken* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCLoginGameWithToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCLoginGameWithToken)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCLoginGameWithToken)
    MergeFrom(*source);
  }
}

void SCLoginGameWithToken::MergeFrom(const SCLoginGameWithToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCLoginGameWithToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.money() != 0) {
    _internal_set_money(from._internal_money());
  }
  if (from.isfirstlogin() != 0) {
    _internal_set_isfirstlogin(from._internal_isfirstlogin());
  }
  if (from.useratio() != 0) {
    _internal_set_useratio(from._internal_useratio());
  }
}

void SCLoginGameWithToken::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCLoginGameWithToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCLoginGameWithToken::CopyFrom(const SCLoginGameWithToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCLoginGameWithToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCLoginGameWithToken::IsInitialized() const {
  return true;
}

void SCLoginGameWithToken::InternalSwap(SCLoginGameWithToken* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCLoginGameWithToken, useratio_)
      + sizeof(SCLoginGameWithToken::useratio_)
      - PROTOBUF_FIELD_OFFSET(SCLoginGameWithToken, money_)>(
          reinterpret_cast<char*>(&money_),
          reinterpret_cast<char*>(&other->money_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCLoginGameWithToken::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserBomTimes::_Internal {
 public:
};

UserBomTimes::UserBomTimes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UserBomTimes)
}
UserBomTimes::UserBomTimes(const UserBomTimes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&usepositionid_, &from.usepositionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&allover_) -
    reinterpret_cast<char*>(&usepositionid_)) + sizeof(allover_));
  // @@protoc_insertion_point(copy_constructor:UserBomTimes)
}

void UserBomTimes::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&usepositionid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&allover_) -
      reinterpret_cast<char*>(&usepositionid_)) + sizeof(allover_));
}

UserBomTimes::~UserBomTimes() {
  // @@protoc_insertion_point(destructor:UserBomTimes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserBomTimes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserBomTimes::ArenaDtor(void* object) {
  UserBomTimes* _this = reinterpret_cast< UserBomTimes* >(object);
  (void)_this;
}
void UserBomTimes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserBomTimes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserBomTimes& UserBomTimes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserBomTimes_JSBY_2eproto.base);
  return *internal_default_instance();
}


void UserBomTimes::Clear() {
// @@protoc_insertion_point(message_clear_start:UserBomTimes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&usepositionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allover_) -
      reinterpret_cast<char*>(&usepositionid_)) + sizeof(allover_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserBomTimes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 UsePositionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          usepositionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 UsePositionTimes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          usepositiontimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool OverBom = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          overbom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool AllOver = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          allover_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserBomTimes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserBomTimes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 UsePositionId = 1;
  if (this->usepositionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_usepositionid(), target);
  }

  // int32 UsePositionTimes = 2;
  if (this->usepositiontimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_usepositiontimes(), target);
  }

  // bool OverBom = 3;
  if (this->overbom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_overbom(), target);
  }

  // bool AllOver = 4;
  if (this->allover() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_allover(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserBomTimes)
  return target;
}

size_t UserBomTimes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserBomTimes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 UsePositionId = 1;
  if (this->usepositionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_usepositionid());
  }

  // int32 UsePositionTimes = 2;
  if (this->usepositiontimes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_usepositiontimes());
  }

  // bool OverBom = 3;
  if (this->overbom() != 0) {
    total_size += 1 + 1;
  }

  // bool AllOver = 4;
  if (this->allover() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserBomTimes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UserBomTimes)
  GOOGLE_DCHECK_NE(&from, this);
  const UserBomTimes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserBomTimes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UserBomTimes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UserBomTimes)
    MergeFrom(*source);
  }
}

void UserBomTimes::MergeFrom(const UserBomTimes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserBomTimes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.usepositionid() != 0) {
    _internal_set_usepositionid(from._internal_usepositionid());
  }
  if (from.usepositiontimes() != 0) {
    _internal_set_usepositiontimes(from._internal_usepositiontimes());
  }
  if (from.overbom() != 0) {
    _internal_set_overbom(from._internal_overbom());
  }
  if (from.allover() != 0) {
    _internal_set_allover(from._internal_allover());
  }
}

void UserBomTimes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UserBomTimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBomTimes::CopyFrom(const UserBomTimes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserBomTimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBomTimes::IsInitialized() const {
  return true;
}

void UserBomTimes::InternalSwap(UserBomTimes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserBomTimes, allover_)
      + sizeof(UserBomTimes::allover_)
      - PROTOBUF_FIELD_OFFSET(UserBomTimes, usepositionid_)>(
          reinterpret_cast<char*>(&usepositionid_),
          reinterpret_cast<char*>(&other->usepositionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserBomTimes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SpecialMonsterAttack::_Internal {
 public:
};

SpecialMonsterAttack::SpecialMonsterAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpecialMonsterAttack)
}
SpecialMonsterAttack::SpecialMonsterAttack(const SpecialMonsterAttack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&positionid_, &from.positionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&processtime_) -
    reinterpret_cast<char*>(&positionid_)) + sizeof(processtime_));
  // @@protoc_insertion_point(copy_constructor:SpecialMonsterAttack)
}

void SpecialMonsterAttack::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&positionid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&processtime_) -
      reinterpret_cast<char*>(&positionid_)) + sizeof(processtime_));
}

SpecialMonsterAttack::~SpecialMonsterAttack() {
  // @@protoc_insertion_point(destructor:SpecialMonsterAttack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpecialMonsterAttack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpecialMonsterAttack::ArenaDtor(void* object) {
  SpecialMonsterAttack* _this = reinterpret_cast< SpecialMonsterAttack* >(object);
  (void)_this;
}
void SpecialMonsterAttack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecialMonsterAttack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpecialMonsterAttack& SpecialMonsterAttack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpecialMonsterAttack_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SpecialMonsterAttack::Clear() {
// @@protoc_insertion_point(message_clear_start:SpecialMonsterAttack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&positionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&processtime_) -
      reinterpret_cast<char*>(&positionid_)) + sizeof(processtime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecialMonsterAttack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 PositionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          positionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MonsterId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          monsterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ChannelId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          channelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ProcessTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          processtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecialMonsterAttack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpecialMonsterAttack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PositionId = 1;
  if (this->positionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_positionid(), target);
  }

  // int32 MonsterId = 2;
  if (this->monsterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_monsterid(), target);
  }

  // int32 ChannelId = 3;
  if (this->channelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_channelid(), target);
  }

  // int32 ProcessTime = 4;
  if (this->processtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_processtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpecialMonsterAttack)
  return target;
}

size_t SpecialMonsterAttack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpecialMonsterAttack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PositionId = 1;
  if (this->positionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_positionid());
  }

  // int32 MonsterId = 2;
  if (this->monsterid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_monsterid());
  }

  // int32 ChannelId = 3;
  if (this->channelid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channelid());
  }

  // int32 ProcessTime = 4;
  if (this->processtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_processtime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecialMonsterAttack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpecialMonsterAttack)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecialMonsterAttack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecialMonsterAttack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpecialMonsterAttack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpecialMonsterAttack)
    MergeFrom(*source);
  }
}

void SpecialMonsterAttack::MergeFrom(const SpecialMonsterAttack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpecialMonsterAttack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.positionid() != 0) {
    _internal_set_positionid(from._internal_positionid());
  }
  if (from.monsterid() != 0) {
    _internal_set_monsterid(from._internal_monsterid());
  }
  if (from.channelid() != 0) {
    _internal_set_channelid(from._internal_channelid());
  }
  if (from.processtime() != 0) {
    _internal_set_processtime(from._internal_processtime());
  }
}

void SpecialMonsterAttack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpecialMonsterAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecialMonsterAttack::CopyFrom(const SpecialMonsterAttack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpecialMonsterAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialMonsterAttack::IsInitialized() const {
  return true;
}

void SpecialMonsterAttack::InternalSwap(SpecialMonsterAttack* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpecialMonsterAttack, processtime_)
      + sizeof(SpecialMonsterAttack::processtime_)
      - PROTOBUF_FIELD_OFFSET(SpecialMonsterAttack, positionid_)>(
          reinterpret_cast<char*>(&positionid_),
          reinterpret_cast<char*>(&other->positionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecialMonsterAttack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSRequestAttack::_Internal {
 public:
  static const ::SpecialMonsterAttack& specialinfo(const CSRequestAttack* msg);
};

const ::SpecialMonsterAttack&
CSRequestAttack::_Internal::specialinfo(const CSRequestAttack* msg) {
  return *msg->specialinfo_;
}
CSRequestAttack::CSRequestAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSRequestAttack)
}
CSRequestAttack::CSRequestAttack(const CSRequestAttack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_specialinfo()) {
    specialinfo_ = new ::SpecialMonsterAttack(*from.specialinfo_);
  } else {
    specialinfo_ = nullptr;
  }
  ::memcpy(&ratio_, &from.ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&herouniqueid_) -
    reinterpret_cast<char*>(&ratio_)) + sizeof(herouniqueid_));
  // @@protoc_insertion_point(copy_constructor:CSRequestAttack)
}

void CSRequestAttack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSRequestAttack_JSBY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&specialinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&herouniqueid_) -
      reinterpret_cast<char*>(&specialinfo_)) + sizeof(herouniqueid_));
}

CSRequestAttack::~CSRequestAttack() {
  // @@protoc_insertion_point(destructor:CSRequestAttack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSRequestAttack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete specialinfo_;
}

void CSRequestAttack::ArenaDtor(void* object) {
  CSRequestAttack* _this = reinterpret_cast< CSRequestAttack* >(object);
  (void)_this;
}
void CSRequestAttack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSRequestAttack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSRequestAttack& CSRequestAttack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSRequestAttack_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSRequestAttack::Clear() {
// @@protoc_insertion_point(message_clear_start:CSRequestAttack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && specialinfo_ != nullptr) {
    delete specialinfo_;
  }
  specialinfo_ = nullptr;
  ::memset(&ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&herouniqueid_) -
      reinterpret_cast<char*>(&ratio_)) + sizeof(herouniqueid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRequestAttack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Ratio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MonsterId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          monsterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PositionId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          positionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 UsePositionId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          usepositionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 UsePositionTimes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          usepositiontimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 SpecialType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          specialtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SpecialMonsterAttack SpecialInfo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_specialinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool DragonEnd = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          dragonend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 HeroUniqueId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          herouniqueid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSRequestAttack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSRequestAttack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Ratio = 1;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ratio(), target);
  }

  // int32 Mode = 2;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mode(), target);
  }

  // int32 MonsterId = 3;
  if (this->monsterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_monsterid(), target);
  }

  // int32 PositionId = 4;
  if (this->positionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_positionid(), target);
  }

  // int32 UsePositionId = 5;
  if (this->usepositionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_usepositionid(), target);
  }

  // int32 UsePositionTimes = 6;
  if (this->usepositiontimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_usepositiontimes(), target);
  }

  // int32 SpecialType = 7;
  if (this->specialtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_specialtype(), target);
  }

  // .SpecialMonsterAttack SpecialInfo = 8;
  if (this->has_specialinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::specialinfo(this), target, stream);
  }

  // bool DragonEnd = 9;
  if (this->dragonend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_dragonend(), target);
  }

  // int32 HeroUniqueId = 10;
  if (this->herouniqueid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_herouniqueid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSRequestAttack)
  return target;
}

size_t CSRequestAttack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSRequestAttack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SpecialMonsterAttack SpecialInfo = 8;
  if (this->has_specialinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *specialinfo_);
  }

  // int32 Ratio = 1;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // int32 Mode = 2;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mode());
  }

  // int32 MonsterId = 3;
  if (this->monsterid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_monsterid());
  }

  // int32 PositionId = 4;
  if (this->positionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_positionid());
  }

  // int32 UsePositionId = 5;
  if (this->usepositionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_usepositionid());
  }

  // int32 UsePositionTimes = 6;
  if (this->usepositiontimes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_usepositiontimes());
  }

  // int32 SpecialType = 7;
  if (this->specialtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_specialtype());
  }

  // bool DragonEnd = 9;
  if (this->dragonend() != 0) {
    total_size += 1 + 1;
  }

  // int32 HeroUniqueId = 10;
  if (this->herouniqueid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_herouniqueid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSRequestAttack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSRequestAttack)
  GOOGLE_DCHECK_NE(&from, this);
  const CSRequestAttack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSRequestAttack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSRequestAttack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSRequestAttack)
    MergeFrom(*source);
  }
}

void CSRequestAttack::MergeFrom(const CSRequestAttack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSRequestAttack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_specialinfo()) {
    _internal_mutable_specialinfo()->::SpecialMonsterAttack::MergeFrom(from._internal_specialinfo());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.monsterid() != 0) {
    _internal_set_monsterid(from._internal_monsterid());
  }
  if (from.positionid() != 0) {
    _internal_set_positionid(from._internal_positionid());
  }
  if (from.usepositionid() != 0) {
    _internal_set_usepositionid(from._internal_usepositionid());
  }
  if (from.usepositiontimes() != 0) {
    _internal_set_usepositiontimes(from._internal_usepositiontimes());
  }
  if (from.specialtype() != 0) {
    _internal_set_specialtype(from._internal_specialtype());
  }
  if (from.dragonend() != 0) {
    _internal_set_dragonend(from._internal_dragonend());
  }
  if (from.herouniqueid() != 0) {
    _internal_set_herouniqueid(from._internal_herouniqueid());
  }
}

void CSRequestAttack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSRequestAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRequestAttack::CopyFrom(const CSRequestAttack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSRequestAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRequestAttack::IsInitialized() const {
  return true;
}

void CSRequestAttack::InternalSwap(CSRequestAttack* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSRequestAttack, herouniqueid_)
      + sizeof(CSRequestAttack::herouniqueid_)
      - PROTOBUF_FIELD_OFFSET(CSRequestAttack, specialinfo_)>(
          reinterpret_cast<char*>(&specialinfo_),
          reinterpret_cast<char*>(&other->specialinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRequestAttack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCRequestAttack::_Internal {
 public:
};

SCRequestAttack::SCRequestAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCRequestAttack)
}
SCRequestAttack::SCRequestAttack(const SCRequestAttack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SCRequestAttack)
}

void SCRequestAttack::SharedCtor() {
}

SCRequestAttack::~SCRequestAttack() {
  // @@protoc_insertion_point(destructor:SCRequestAttack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCRequestAttack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCRequestAttack::ArenaDtor(void* object) {
  SCRequestAttack* _this = reinterpret_cast< SCRequestAttack* >(object);
  (void)_this;
}
void SCRequestAttack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCRequestAttack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCRequestAttack& SCRequestAttack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCRequestAttack_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCRequestAttack::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRequestAttack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCRequestAttack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCRequestAttack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCRequestAttack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRequestAttack)
  return target;
}

size_t SCRequestAttack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRequestAttack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCRequestAttack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRequestAttack)
  GOOGLE_DCHECK_NE(&from, this);
  const SCRequestAttack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCRequestAttack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRequestAttack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRequestAttack)
    MergeFrom(*source);
  }
}

void SCRequestAttack::MergeFrom(const SCRequestAttack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRequestAttack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SCRequestAttack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRequestAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCRequestAttack::CopyFrom(const SCRequestAttack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRequestAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCRequestAttack::IsInitialized() const {
  return true;
}

void SCRequestAttack::InternalSwap(SCRequestAttack* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCRequestAttack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SpecialAttackInfo::_Internal {
 public:
};

SpecialAttackInfo::SpecialAttackInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpecialAttackInfo)
}
SpecialAttackInfo::SpecialAttackInfo(const SpecialAttackInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&killid_, &from.killid_,
    static_cast<size_t>(reinterpret_cast<char*>(&selfid_) -
    reinterpret_cast<char*>(&killid_)) + sizeof(selfid_));
  // @@protoc_insertion_point(copy_constructor:SpecialAttackInfo)
}

void SpecialAttackInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&killid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&selfid_) -
      reinterpret_cast<char*>(&killid_)) + sizeof(selfid_));
}

SpecialAttackInfo::~SpecialAttackInfo() {
  // @@protoc_insertion_point(destructor:SpecialAttackInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpecialAttackInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpecialAttackInfo::ArenaDtor(void* object) {
  SpecialAttackInfo* _this = reinterpret_cast< SpecialAttackInfo* >(object);
  (void)_this;
}
void SpecialAttackInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecialAttackInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpecialAttackInfo& SpecialAttackInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpecialAttackInfo_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SpecialAttackInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SpecialAttackInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&killid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&selfid_) -
      reinterpret_cast<char*>(&killid_)) + sizeof(selfid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecialAttackInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 KillID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          killid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 SelfID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          selfid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecialAttackInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpecialAttackInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 KillID = 1;
  if (this->killid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_killid(), target);
  }

  // int32 SelfID = 2;
  if (this->selfid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_selfid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpecialAttackInfo)
  return target;
}

size_t SpecialAttackInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpecialAttackInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 KillID = 1;
  if (this->killid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_killid());
  }

  // int32 SelfID = 2;
  if (this->selfid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_selfid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecialAttackInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpecialAttackInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecialAttackInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecialAttackInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpecialAttackInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpecialAttackInfo)
    MergeFrom(*source);
  }
}

void SpecialAttackInfo::MergeFrom(const SpecialAttackInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpecialAttackInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.killid() != 0) {
    _internal_set_killid(from._internal_killid());
  }
  if (from.selfid() != 0) {
    _internal_set_selfid(from._internal_selfid());
  }
}

void SpecialAttackInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpecialAttackInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecialAttackInfo::CopyFrom(const SpecialAttackInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpecialAttackInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialAttackInfo::IsInitialized() const {
  return true;
}

void SpecialAttackInfo::InternalSwap(SpecialAttackInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpecialAttackInfo, selfid_)
      + sizeof(SpecialAttackInfo::selfid_)
      - PROTOBUF_FIELD_OFFSET(SpecialAttackInfo, killid_)>(
          reinterpret_cast<char*>(&killid_),
          reinterpret_cast<char*>(&other->killid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecialAttackInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSyncMoney::_Internal {
 public:
  static const ::UserBomTimes& bom(const SCSyncMoney* msg);
  static const ::SpecialAttackInfo& attackinfo(const SCSyncMoney* msg);
};

const ::UserBomTimes&
SCSyncMoney::_Internal::bom(const SCSyncMoney* msg) {
  return *msg->bom_;
}
const ::SpecialAttackInfo&
SCSyncMoney::_Internal::attackinfo(const SCSyncMoney* msg) {
  return *msg->attackinfo_;
}
SCSyncMoney::SCSyncMoney(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCSyncMoney)
}
SCSyncMoney::SCSyncMoney(const SCSyncMoney& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  others_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_others().empty()) {
    others_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_others(), 
      GetArena());
  }
  bearmultiple_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bearmultiple().empty()) {
    bearmultiple_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bearmultiple(), 
      GetArena());
  }
  if (from._internal_has_bom()) {
    bom_ = new ::UserBomTimes(*from.bom_);
  } else {
    bom_ = nullptr;
  }
  if (from._internal_has_attackinfo()) {
    attackinfo_ = new ::SpecialAttackInfo(*from.attackinfo_);
  } else {
    attackinfo_ = nullptr;
  }
  ::memcpy(&money_, &from.money_,
    static_cast<size_t>(reinterpret_cast<char*>(&mxlsealaddawardratio_) -
    reinterpret_cast<char*>(&money_)) + sizeof(mxlsealaddawardratio_));
  // @@protoc_insertion_point(copy_constructor:SCSyncMoney)
}

void SCSyncMoney::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCSyncMoney_JSBY_2eproto.base);
  others_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bearmultiple_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bom_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&mxlsealaddawardratio_) -
      reinterpret_cast<char*>(&bom_)) + sizeof(mxlsealaddawardratio_));
}

SCSyncMoney::~SCSyncMoney() {
  // @@protoc_insertion_point(destructor:SCSyncMoney)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSyncMoney::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  others_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bearmultiple_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bom_;
  if (this != internal_default_instance()) delete attackinfo_;
}

void SCSyncMoney::ArenaDtor(void* object) {
  SCSyncMoney* _this = reinterpret_cast< SCSyncMoney* >(object);
  (void)_this;
}
void SCSyncMoney::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSyncMoney::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSyncMoney& SCSyncMoney::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSyncMoney_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCSyncMoney::Clear() {
// @@protoc_insertion_point(message_clear_start:SCSyncMoney)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  others_.ClearToEmpty();
  bearmultiple_.ClearToEmpty();
  if (GetArena() == nullptr && bom_ != nullptr) {
    delete bom_;
  }
  bom_ = nullptr;
  if (GetArena() == nullptr && attackinfo_ != nullptr) {
    delete attackinfo_;
  }
  attackinfo_ = nullptr;
  ::memset(&money_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mxlsealaddawardratio_) -
      reinterpret_cast<char*>(&money_)) + sizeof(mxlsealaddawardratio_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSyncMoney::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Money = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MonsterId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          monsterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PositionId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          positionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Ratio = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PlayerId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MoneyVariation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          moneyvariation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .UserBomTimes Bom = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_bom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 HeroUniqueId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          herouniqueid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SpecialAttackInfo AttackInfo = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_attackinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Eared = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          eared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 AddRatio = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          addratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 BalloonRatio = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          balloonratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Others = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_others();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SCSyncMoney.Others"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 GiantHitPower = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          gianthitpower_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MxlSealMoney = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          mxlsealmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MxlSealAddAwardRatio = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          mxlsealaddawardratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string BearMultiple = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_bearmultiple();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SCSyncMoney.BearMultiple"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSyncMoney::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCSyncMoney)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Money = 1;
  if (this->money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_money(), target);
  }

  // int32 MonsterId = 2;
  if (this->monsterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_monsterid(), target);
  }

  // int32 PositionId = 3;
  if (this->positionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_positionid(), target);
  }

  // int32 Type = 4;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_type(), target);
  }

  // int32 Ratio = 5;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_ratio(), target);
  }

  // int32 PlayerId = 6;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_playerid(), target);
  }

  // int32 MoneyVariation = 7;
  if (this->moneyvariation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_moneyvariation(), target);
  }

  // .UserBomTimes Bom = 8;
  if (this->has_bom()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::bom(this), target, stream);
  }

  // int32 HeroUniqueId = 9;
  if (this->herouniqueid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_herouniqueid(), target);
  }

  // .SpecialAttackInfo AttackInfo = 10;
  if (this->has_attackinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::attackinfo(this), target, stream);
  }

  // int32 Eared = 11;
  if (this->eared() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_eared(), target);
  }

  // int32 AddRatio = 12;
  if (this->addratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_addratio(), target);
  }

  // int32 BalloonRatio = 13;
  if (this->balloonratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_balloonratio(), target);
  }

  // string Others = 14;
  if (this->others().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_others().data(), static_cast<int>(this->_internal_others().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SCSyncMoney.Others");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_others(), target);
  }

  // int32 GiantHitPower = 15;
  if (this->gianthitpower() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_gianthitpower(), target);
  }

  // int32 MxlSealMoney = 16;
  if (this->mxlsealmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_mxlsealmoney(), target);
  }

  // int32 MxlSealAddAwardRatio = 17;
  if (this->mxlsealaddawardratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_mxlsealaddawardratio(), target);
  }

  // string BearMultiple = 18;
  if (this->bearmultiple().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bearmultiple().data(), static_cast<int>(this->_internal_bearmultiple().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SCSyncMoney.BearMultiple");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_bearmultiple(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCSyncMoney)
  return target;
}

size_t SCSyncMoney::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCSyncMoney)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Others = 14;
  if (this->others().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_others());
  }

  // string BearMultiple = 18;
  if (this->bearmultiple().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bearmultiple());
  }

  // .UserBomTimes Bom = 8;
  if (this->has_bom()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bom_);
  }

  // .SpecialAttackInfo AttackInfo = 10;
  if (this->has_attackinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attackinfo_);
  }

  // int32 Money = 1;
  if (this->money() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_money());
  }

  // int32 MonsterId = 2;
  if (this->monsterid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_monsterid());
  }

  // int32 PositionId = 3;
  if (this->positionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_positionid());
  }

  // int32 Type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 Ratio = 5;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // int32 PlayerId = 6;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  // int32 MoneyVariation = 7;
  if (this->moneyvariation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_moneyvariation());
  }

  // int32 HeroUniqueId = 9;
  if (this->herouniqueid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_herouniqueid());
  }

  // int32 Eared = 11;
  if (this->eared() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_eared());
  }

  // int32 AddRatio = 12;
  if (this->addratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_addratio());
  }

  // int32 BalloonRatio = 13;
  if (this->balloonratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_balloonratio());
  }

  // int32 GiantHitPower = 15;
  if (this->gianthitpower() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gianthitpower());
  }

  // int32 MxlSealMoney = 16;
  if (this->mxlsealmoney() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mxlsealmoney());
  }

  // int32 MxlSealAddAwardRatio = 17;
  if (this->mxlsealaddawardratio() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mxlsealaddawardratio());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSyncMoney::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCSyncMoney)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSyncMoney* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSyncMoney>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCSyncMoney)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCSyncMoney)
    MergeFrom(*source);
  }
}

void SCSyncMoney::MergeFrom(const SCSyncMoney& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCSyncMoney)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.others().size() > 0) {
    _internal_set_others(from._internal_others());
  }
  if (from.bearmultiple().size() > 0) {
    _internal_set_bearmultiple(from._internal_bearmultiple());
  }
  if (from.has_bom()) {
    _internal_mutable_bom()->::UserBomTimes::MergeFrom(from._internal_bom());
  }
  if (from.has_attackinfo()) {
    _internal_mutable_attackinfo()->::SpecialAttackInfo::MergeFrom(from._internal_attackinfo());
  }
  if (from.money() != 0) {
    _internal_set_money(from._internal_money());
  }
  if (from.monsterid() != 0) {
    _internal_set_monsterid(from._internal_monsterid());
  }
  if (from.positionid() != 0) {
    _internal_set_positionid(from._internal_positionid());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.moneyvariation() != 0) {
    _internal_set_moneyvariation(from._internal_moneyvariation());
  }
  if (from.herouniqueid() != 0) {
    _internal_set_herouniqueid(from._internal_herouniqueid());
  }
  if (from.eared() != 0) {
    _internal_set_eared(from._internal_eared());
  }
  if (from.addratio() != 0) {
    _internal_set_addratio(from._internal_addratio());
  }
  if (from.balloonratio() != 0) {
    _internal_set_balloonratio(from._internal_balloonratio());
  }
  if (from.gianthitpower() != 0) {
    _internal_set_gianthitpower(from._internal_gianthitpower());
  }
  if (from.mxlsealmoney() != 0) {
    _internal_set_mxlsealmoney(from._internal_mxlsealmoney());
  }
  if (from.mxlsealaddawardratio() != 0) {
    _internal_set_mxlsealaddawardratio(from._internal_mxlsealaddawardratio());
  }
}

void SCSyncMoney::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCSyncMoney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSyncMoney::CopyFrom(const SCSyncMoney& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCSyncMoney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSyncMoney::IsInitialized() const {
  return true;
}

void SCSyncMoney::InternalSwap(SCSyncMoney* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  others_.Swap(&other->others_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bearmultiple_.Swap(&other->bearmultiple_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCSyncMoney, mxlsealaddawardratio_)
      + sizeof(SCSyncMoney::mxlsealaddawardratio_)
      - PROTOBUF_FIELD_OFFSET(SCSyncMoney, bom_)>(
          reinterpret_cast<char*>(&bom_),
          reinterpret_cast<char*>(&other->bom_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSyncMoney::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPoisonBomTimes::_Internal {
 public:
  static const ::SpecialAttackInfo& attackinfo(const SCPoisonBomTimes* msg);
};

const ::SpecialAttackInfo&
SCPoisonBomTimes::_Internal::attackinfo(const SCPoisonBomTimes* msg) {
  return *msg->attackinfo_;
}
SCPoisonBomTimes::SCPoisonBomTimes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  addtimes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCPoisonBomTimes)
}
SCPoisonBomTimes::SCPoisonBomTimes(const SCPoisonBomTimes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      addtimes_(from.addtimes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attackinfo()) {
    attackinfo_ = new ::SpecialAttackInfo(*from.attackinfo_);
  } else {
    attackinfo_ = nullptr;
  }
  ::memcpy(&positionid_, &from.positionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&herouniqueid_) -
    reinterpret_cast<char*>(&positionid_)) + sizeof(herouniqueid_));
  // @@protoc_insertion_point(copy_constructor:SCPoisonBomTimes)
}

void SCPoisonBomTimes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCPoisonBomTimes_JSBY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&attackinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&herouniqueid_) -
      reinterpret_cast<char*>(&attackinfo_)) + sizeof(herouniqueid_));
}

SCPoisonBomTimes::~SCPoisonBomTimes() {
  // @@protoc_insertion_point(destructor:SCPoisonBomTimes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPoisonBomTimes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete attackinfo_;
}

void SCPoisonBomTimes::ArenaDtor(void* object) {
  SCPoisonBomTimes* _this = reinterpret_cast< SCPoisonBomTimes* >(object);
  (void)_this;
}
void SCPoisonBomTimes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPoisonBomTimes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPoisonBomTimes& SCPoisonBomTimes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPoisonBomTimes_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCPoisonBomTimes::Clear() {
// @@protoc_insertion_point(message_clear_start:SCPoisonBomTimes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addtimes_.Clear();
  if (GetArena() == nullptr && attackinfo_ != nullptr) {
    delete attackinfo_;
  }
  attackinfo_ = nullptr;
  ::memset(&positionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&herouniqueid_) -
      reinterpret_cast<char*>(&positionid_)) + sizeof(herouniqueid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPoisonBomTimes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 PositionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          positionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 AddTimes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_addtimes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_addtimes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 KillPlayerId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          killplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 HeroUniqueId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          herouniqueid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SpecialAttackInfo AttackInfo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_attackinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPoisonBomTimes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCPoisonBomTimes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PositionId = 1;
  if (this->positionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_positionid(), target);
  }

  // int32 Times = 2;
  if (this->times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_times(), target);
  }

  // int32 Ratio = 3;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ratio(), target);
  }

  // repeated int32 AddTimes = 4;
  {
    int byte_size = _addtimes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_addtimes(), byte_size, target);
    }
  }

  // int32 KillPlayerId = 5;
  if (this->killplayerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_killplayerid(), target);
  }

  // int32 HeroUniqueId = 6;
  if (this->herouniqueid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_herouniqueid(), target);
  }

  // .SpecialAttackInfo AttackInfo = 7;
  if (this->has_attackinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::attackinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCPoisonBomTimes)
  return target;
}

size_t SCPoisonBomTimes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCPoisonBomTimes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 AddTimes = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->addtimes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _addtimes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .SpecialAttackInfo AttackInfo = 7;
  if (this->has_attackinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attackinfo_);
  }

  // int32 PositionId = 1;
  if (this->positionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_positionid());
  }

  // int32 Times = 2;
  if (this->times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_times());
  }

  // int32 Ratio = 3;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // int32 KillPlayerId = 5;
  if (this->killplayerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_killplayerid());
  }

  // int32 HeroUniqueId = 6;
  if (this->herouniqueid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_herouniqueid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPoisonBomTimes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCPoisonBomTimes)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPoisonBomTimes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPoisonBomTimes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCPoisonBomTimes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCPoisonBomTimes)
    MergeFrom(*source);
  }
}

void SCPoisonBomTimes::MergeFrom(const SCPoisonBomTimes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCPoisonBomTimes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addtimes_.MergeFrom(from.addtimes_);
  if (from.has_attackinfo()) {
    _internal_mutable_attackinfo()->::SpecialAttackInfo::MergeFrom(from._internal_attackinfo());
  }
  if (from.positionid() != 0) {
    _internal_set_positionid(from._internal_positionid());
  }
  if (from.times() != 0) {
    _internal_set_times(from._internal_times());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.killplayerid() != 0) {
    _internal_set_killplayerid(from._internal_killplayerid());
  }
  if (from.herouniqueid() != 0) {
    _internal_set_herouniqueid(from._internal_herouniqueid());
  }
}

void SCPoisonBomTimes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCPoisonBomTimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPoisonBomTimes::CopyFrom(const SCPoisonBomTimes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCPoisonBomTimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPoisonBomTimes::IsInitialized() const {
  return true;
}

void SCPoisonBomTimes::InternalSwap(SCPoisonBomTimes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  addtimes_.InternalSwap(&other->addtimes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCPoisonBomTimes, herouniqueid_)
      + sizeof(SCPoisonBomTimes::herouniqueid_)
      - PROTOBUF_FIELD_OFFSET(SCPoisonBomTimes, attackinfo_)>(
          reinterpret_cast<char*>(&attackinfo_),
          reinterpret_cast<char*>(&other->attackinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPoisonBomTimes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSChangePoisonBomTimes::_Internal {
 public:
};

CSChangePoisonBomTimes::CSChangePoisonBomTimes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSChangePoisonBomTimes)
}
CSChangePoisonBomTimes::CSChangePoisonBomTimes(const CSChangePoisonBomTimes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&positionid_, &from.positionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&newpositionid_) -
    reinterpret_cast<char*>(&positionid_)) + sizeof(newpositionid_));
  // @@protoc_insertion_point(copy_constructor:CSChangePoisonBomTimes)
}

void CSChangePoisonBomTimes::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&positionid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&newpositionid_) -
      reinterpret_cast<char*>(&positionid_)) + sizeof(newpositionid_));
}

CSChangePoisonBomTimes::~CSChangePoisonBomTimes() {
  // @@protoc_insertion_point(destructor:CSChangePoisonBomTimes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSChangePoisonBomTimes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSChangePoisonBomTimes::ArenaDtor(void* object) {
  CSChangePoisonBomTimes* _this = reinterpret_cast< CSChangePoisonBomTimes* >(object);
  (void)_this;
}
void CSChangePoisonBomTimes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSChangePoisonBomTimes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSChangePoisonBomTimes& CSChangePoisonBomTimes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSChangePoisonBomTimes_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSChangePoisonBomTimes::Clear() {
// @@protoc_insertion_point(message_clear_start:CSChangePoisonBomTimes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&positionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&newpositionid_) -
      reinterpret_cast<char*>(&positionid_)) + sizeof(newpositionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSChangePoisonBomTimes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 PositionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          positionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 UsePositionTimes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          usepositiontimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 NewPositionId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          newpositionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSChangePoisonBomTimes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSChangePoisonBomTimes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PositionId = 1;
  if (this->positionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_positionid(), target);
  }

  // int32 UsePositionTimes = 2;
  if (this->usepositiontimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_usepositiontimes(), target);
  }

  // int32 NewPositionId = 3;
  if (this->newpositionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_newpositionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSChangePoisonBomTimes)
  return target;
}

size_t CSChangePoisonBomTimes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSChangePoisonBomTimes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PositionId = 1;
  if (this->positionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_positionid());
  }

  // int32 UsePositionTimes = 2;
  if (this->usepositiontimes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_usepositiontimes());
  }

  // int32 NewPositionId = 3;
  if (this->newpositionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_newpositionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSChangePoisonBomTimes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSChangePoisonBomTimes)
  GOOGLE_DCHECK_NE(&from, this);
  const CSChangePoisonBomTimes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSChangePoisonBomTimes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSChangePoisonBomTimes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSChangePoisonBomTimes)
    MergeFrom(*source);
  }
}

void CSChangePoisonBomTimes::MergeFrom(const CSChangePoisonBomTimes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSChangePoisonBomTimes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.positionid() != 0) {
    _internal_set_positionid(from._internal_positionid());
  }
  if (from.usepositiontimes() != 0) {
    _internal_set_usepositiontimes(from._internal_usepositiontimes());
  }
  if (from.newpositionid() != 0) {
    _internal_set_newpositionid(from._internal_newpositionid());
  }
}

void CSChangePoisonBomTimes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSChangePoisonBomTimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSChangePoisonBomTimes::CopyFrom(const CSChangePoisonBomTimes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSChangePoisonBomTimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSChangePoisonBomTimes::IsInitialized() const {
  return true;
}

void CSChangePoisonBomTimes::InternalSwap(CSChangePoisonBomTimes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSChangePoisonBomTimes, newpositionid_)
      + sizeof(CSChangePoisonBomTimes::newpositionid_)
      - PROTOBUF_FIELD_OFFSET(CSChangePoisonBomTimes, positionid_)>(
          reinterpret_cast<char*>(&positionid_),
          reinterpret_cast<char*>(&other->positionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSChangePoisonBomTimes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCChangePoisonBomTimes::_Internal {
 public:
};

SCChangePoisonBomTimes::SCChangePoisonBomTimes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCChangePoisonBomTimes)
}
SCChangePoisonBomTimes::SCChangePoisonBomTimes(const SCChangePoisonBomTimes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SCChangePoisonBomTimes)
}

void SCChangePoisonBomTimes::SharedCtor() {
}

SCChangePoisonBomTimes::~SCChangePoisonBomTimes() {
  // @@protoc_insertion_point(destructor:SCChangePoisonBomTimes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCChangePoisonBomTimes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCChangePoisonBomTimes::ArenaDtor(void* object) {
  SCChangePoisonBomTimes* _this = reinterpret_cast< SCChangePoisonBomTimes* >(object);
  (void)_this;
}
void SCChangePoisonBomTimes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCChangePoisonBomTimes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCChangePoisonBomTimes& SCChangePoisonBomTimes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCChangePoisonBomTimes_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCChangePoisonBomTimes::Clear() {
// @@protoc_insertion_point(message_clear_start:SCChangePoisonBomTimes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCChangePoisonBomTimes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCChangePoisonBomTimes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCChangePoisonBomTimes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCChangePoisonBomTimes)
  return target;
}

size_t SCChangePoisonBomTimes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCChangePoisonBomTimes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCChangePoisonBomTimes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCChangePoisonBomTimes)
  GOOGLE_DCHECK_NE(&from, this);
  const SCChangePoisonBomTimes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCChangePoisonBomTimes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCChangePoisonBomTimes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCChangePoisonBomTimes)
    MergeFrom(*source);
  }
}

void SCChangePoisonBomTimes::MergeFrom(const SCChangePoisonBomTimes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCChangePoisonBomTimes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SCChangePoisonBomTimes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCChangePoisonBomTimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCChangePoisonBomTimes::CopyFrom(const SCChangePoisonBomTimes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCChangePoisonBomTimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCChangePoisonBomTimes::IsInitialized() const {
  return true;
}

void SCChangePoisonBomTimes::InternalSwap(SCChangePoisonBomTimes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCChangePoisonBomTimes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSEnterStage::_Internal {
 public:
};

CSEnterStage::CSEnterStage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSEnterStage)
}
CSEnterStage::CSEnterStage(const CSEnterStage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enter_, &from.enter_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&enter_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:CSEnterStage)
}

void CSEnterStage::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&enter_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&enter_)) + sizeof(mode_));
}

CSEnterStage::~CSEnterStage() {
  // @@protoc_insertion_point(destructor:CSEnterStage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSEnterStage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSEnterStage::ArenaDtor(void* object) {
  CSEnterStage* _this = reinterpret_cast< CSEnterStage* >(object);
  (void)_this;
}
void CSEnterStage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSEnterStage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSEnterStage& CSEnterStage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSEnterStage_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSEnterStage::Clear() {
// @@protoc_insertion_point(message_clear_start:CSEnterStage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&enter_)) + sizeof(mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSEnterStage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool Enter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ModeType Mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::ModeType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSEnterStage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSEnterStage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Enter = 1;
  if (this->enter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enter(), target);
  }

  // .ModeType Mode = 2;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSEnterStage)
  return target;
}

size_t CSEnterStage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSEnterStage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool Enter = 1;
  if (this->enter() != 0) {
    total_size += 1 + 1;
  }

  // .ModeType Mode = 2;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSEnterStage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSEnterStage)
  GOOGLE_DCHECK_NE(&from, this);
  const CSEnterStage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSEnterStage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSEnterStage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSEnterStage)
    MergeFrom(*source);
  }
}

void CSEnterStage::MergeFrom(const CSEnterStage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSEnterStage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enter() != 0) {
    _internal_set_enter(from._internal_enter());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
}

void CSEnterStage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSEnterStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSEnterStage::CopyFrom(const CSEnterStage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSEnterStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEnterStage::IsInitialized() const {
  return true;
}

void CSEnterStage::InternalSwap(CSEnterStage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSEnterStage, mode_)
      + sizeof(CSEnterStage::mode_)
      - PROTOBUF_FIELD_OFFSET(CSEnterStage, enter_)>(
          reinterpret_cast<char*>(&enter_),
          reinterpret_cast<char*>(&other->enter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSEnterStage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCEnterStage::_Internal {
 public:
};

SCEnterStage::SCEnterStage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCEnterStage)
}
SCEnterStage::SCEnterStage(const SCEnterStage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  useratio_ = from.useratio_;
  // @@protoc_insertion_point(copy_constructor:SCEnterStage)
}

void SCEnterStage::SharedCtor() {
  useratio_ = 0;
}

SCEnterStage::~SCEnterStage() {
  // @@protoc_insertion_point(destructor:SCEnterStage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCEnterStage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCEnterStage::ArenaDtor(void* object) {
  SCEnterStage* _this = reinterpret_cast< SCEnterStage* >(object);
  (void)_this;
}
void SCEnterStage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCEnterStage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCEnterStage& SCEnterStage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCEnterStage_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCEnterStage::Clear() {
// @@protoc_insertion_point(message_clear_start:SCEnterStage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  useratio_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCEnterStage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 UseRatio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          useratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCEnterStage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCEnterStage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 UseRatio = 1;
  if (this->useratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_useratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCEnterStage)
  return target;
}

size_t SCEnterStage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCEnterStage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 UseRatio = 1;
  if (this->useratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_useratio());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCEnterStage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCEnterStage)
  GOOGLE_DCHECK_NE(&from, this);
  const SCEnterStage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCEnterStage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCEnterStage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCEnterStage)
    MergeFrom(*source);
  }
}

void SCEnterStage::MergeFrom(const SCEnterStage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCEnterStage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.useratio() != 0) {
    _internal_set_useratio(from._internal_useratio());
  }
}

void SCEnterStage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCEnterStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCEnterStage::CopyFrom(const SCEnterStage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCEnterStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCEnterStage::IsInitialized() const {
  return true;
}

void SCEnterStage::InternalSwap(SCEnterStage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(useratio_, other->useratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCEnterStage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSKeepRatio::_Internal {
 public:
};

CSKeepRatio::CSKeepRatio(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSKeepRatio)
}
CSKeepRatio::CSKeepRatio(const CSKeepRatio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ratio_ = from.ratio_;
  // @@protoc_insertion_point(copy_constructor:CSKeepRatio)
}

void CSKeepRatio::SharedCtor() {
  ratio_ = 0;
}

CSKeepRatio::~CSKeepRatio() {
  // @@protoc_insertion_point(destructor:CSKeepRatio)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSKeepRatio::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSKeepRatio::ArenaDtor(void* object) {
  CSKeepRatio* _this = reinterpret_cast< CSKeepRatio* >(object);
  (void)_this;
}
void CSKeepRatio::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSKeepRatio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSKeepRatio& CSKeepRatio::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSKeepRatio_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSKeepRatio::Clear() {
// @@protoc_insertion_point(message_clear_start:CSKeepRatio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ratio_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSKeepRatio::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Ratio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSKeepRatio::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSKeepRatio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Ratio = 1;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSKeepRatio)
  return target;
}

size_t CSKeepRatio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSKeepRatio)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Ratio = 1;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSKeepRatio::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSKeepRatio)
  GOOGLE_DCHECK_NE(&from, this);
  const CSKeepRatio* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSKeepRatio>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSKeepRatio)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSKeepRatio)
    MergeFrom(*source);
  }
}

void CSKeepRatio::MergeFrom(const CSKeepRatio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSKeepRatio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
}

void CSKeepRatio::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSKeepRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSKeepRatio::CopyFrom(const CSKeepRatio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSKeepRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSKeepRatio::IsInitialized() const {
  return true;
}

void CSKeepRatio::InternalSwap(CSKeepRatio* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ratio_, other->ratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSKeepRatio::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCKeepRatio::_Internal {
 public:
};

SCKeepRatio::SCKeepRatio(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCKeepRatio)
}
SCKeepRatio::SCKeepRatio(const SCKeepRatio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SCKeepRatio)
}

void SCKeepRatio::SharedCtor() {
}

SCKeepRatio::~SCKeepRatio() {
  // @@protoc_insertion_point(destructor:SCKeepRatio)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCKeepRatio::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCKeepRatio::ArenaDtor(void* object) {
  SCKeepRatio* _this = reinterpret_cast< SCKeepRatio* >(object);
  (void)_this;
}
void SCKeepRatio::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCKeepRatio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCKeepRatio& SCKeepRatio::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCKeepRatio_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCKeepRatio::Clear() {
// @@protoc_insertion_point(message_clear_start:SCKeepRatio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCKeepRatio::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCKeepRatio::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCKeepRatio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCKeepRatio)
  return target;
}

size_t SCKeepRatio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCKeepRatio)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCKeepRatio::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCKeepRatio)
  GOOGLE_DCHECK_NE(&from, this);
  const SCKeepRatio* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCKeepRatio>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCKeepRatio)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCKeepRatio)
    MergeFrom(*source);
  }
}

void SCKeepRatio::MergeFrom(const SCKeepRatio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCKeepRatio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SCKeepRatio::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCKeepRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCKeepRatio::CopyFrom(const SCKeepRatio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCKeepRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCKeepRatio::IsInitialized() const {
  return true;
}

void SCKeepRatio::InternalSwap(SCKeepRatio* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCKeepRatio::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TrusteeshipInfo::_Internal {
 public:
};

TrusteeshipInfo::TrusteeshipInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TrusteeshipInfo)
}
TrusteeshipInfo::TrusteeshipInfo(const TrusteeshipInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&highsetvalue_, &from.highsetvalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&timesetvalue_) -
    reinterpret_cast<char*>(&highsetvalue_)) + sizeof(timesetvalue_));
  // @@protoc_insertion_point(copy_constructor:TrusteeshipInfo)
}

void TrusteeshipInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&highsetvalue_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&timesetvalue_) -
      reinterpret_cast<char*>(&highsetvalue_)) + sizeof(timesetvalue_));
}

TrusteeshipInfo::~TrusteeshipInfo() {
  // @@protoc_insertion_point(destructor:TrusteeshipInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrusteeshipInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrusteeshipInfo::ArenaDtor(void* object) {
  TrusteeshipInfo* _this = reinterpret_cast< TrusteeshipInfo* >(object);
  (void)_this;
}
void TrusteeshipInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrusteeshipInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrusteeshipInfo& TrusteeshipInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrusteeshipInfo_JSBY_2eproto.base);
  return *internal_default_instance();
}


void TrusteeshipInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TrusteeshipInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&highsetvalue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timesetvalue_) -
      reinterpret_cast<char*>(&highsetvalue_)) + sizeof(timesetvalue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrusteeshipInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool IsTrusteeship = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          istrusteeship_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 HighSetValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          highsetvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool HighSetOpen = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          highsetopen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 LowSetValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lowsetvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool LowSetOpen = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          lowsetopen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float TimeSetValue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          timesetvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool TimeSetOpen = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          timesetopen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrusteeshipInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TrusteeshipInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool IsTrusteeship = 1;
  if (this->istrusteeship() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_istrusteeship(), target);
  }

  // int32 HighSetValue = 2;
  if (this->highsetvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_highsetvalue(), target);
  }

  // bool HighSetOpen = 3;
  if (this->highsetopen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_highsetopen(), target);
  }

  // int32 LowSetValue = 4;
  if (this->lowsetvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_lowsetvalue(), target);
  }

  // bool LowSetOpen = 5;
  if (this->lowsetopen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_lowsetopen(), target);
  }

  // float TimeSetValue = 6;
  if (!(this->timesetvalue() <= 0 && this->timesetvalue() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_timesetvalue(), target);
  }

  // bool TimeSetOpen = 7;
  if (this->timesetopen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_timesetopen(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrusteeshipInfo)
  return target;
}

size_t TrusteeshipInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TrusteeshipInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 HighSetValue = 2;
  if (this->highsetvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_highsetvalue());
  }

  // int32 LowSetValue = 4;
  if (this->lowsetvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lowsetvalue());
  }

  // bool IsTrusteeship = 1;
  if (this->istrusteeship() != 0) {
    total_size += 1 + 1;
  }

  // bool HighSetOpen = 3;
  if (this->highsetopen() != 0) {
    total_size += 1 + 1;
  }

  // bool LowSetOpen = 5;
  if (this->lowsetopen() != 0) {
    total_size += 1 + 1;
  }

  // bool TimeSetOpen = 7;
  if (this->timesetopen() != 0) {
    total_size += 1 + 1;
  }

  // float TimeSetValue = 6;
  if (!(this->timesetvalue() <= 0 && this->timesetvalue() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrusteeshipInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TrusteeshipInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TrusteeshipInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrusteeshipInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TrusteeshipInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TrusteeshipInfo)
    MergeFrom(*source);
  }
}

void TrusteeshipInfo::MergeFrom(const TrusteeshipInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TrusteeshipInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.highsetvalue() != 0) {
    _internal_set_highsetvalue(from._internal_highsetvalue());
  }
  if (from.lowsetvalue() != 0) {
    _internal_set_lowsetvalue(from._internal_lowsetvalue());
  }
  if (from.istrusteeship() != 0) {
    _internal_set_istrusteeship(from._internal_istrusteeship());
  }
  if (from.highsetopen() != 0) {
    _internal_set_highsetopen(from._internal_highsetopen());
  }
  if (from.lowsetopen() != 0) {
    _internal_set_lowsetopen(from._internal_lowsetopen());
  }
  if (from.timesetopen() != 0) {
    _internal_set_timesetopen(from._internal_timesetopen());
  }
  if (!(from.timesetvalue() <= 0 && from.timesetvalue() >= 0)) {
    _internal_set_timesetvalue(from._internal_timesetvalue());
  }
}

void TrusteeshipInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TrusteeshipInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrusteeshipInfo::CopyFrom(const TrusteeshipInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TrusteeshipInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrusteeshipInfo::IsInitialized() const {
  return true;
}

void TrusteeshipInfo::InternalSwap(TrusteeshipInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrusteeshipInfo, timesetvalue_)
      + sizeof(TrusteeshipInfo::timesetvalue_)
      - PROTOBUF_FIELD_OFFSET(TrusteeshipInfo, highsetvalue_)>(
          reinterpret_cast<char*>(&highsetvalue_),
          reinterpret_cast<char*>(&other->highsetvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrusteeshipInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSGetTrusteeship::_Internal {
 public:
};

CSGetTrusteeship::CSGetTrusteeship(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSGetTrusteeship)
}
CSGetTrusteeship::CSGetTrusteeship(const CSGetTrusteeship& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSGetTrusteeship)
}

void CSGetTrusteeship::SharedCtor() {
}

CSGetTrusteeship::~CSGetTrusteeship() {
  // @@protoc_insertion_point(destructor:CSGetTrusteeship)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSGetTrusteeship::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSGetTrusteeship::ArenaDtor(void* object) {
  CSGetTrusteeship* _this = reinterpret_cast< CSGetTrusteeship* >(object);
  (void)_this;
}
void CSGetTrusteeship::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSGetTrusteeship::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSGetTrusteeship& CSGetTrusteeship::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSGetTrusteeship_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSGetTrusteeship::Clear() {
// @@protoc_insertion_point(message_clear_start:CSGetTrusteeship)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSGetTrusteeship::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSGetTrusteeship::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSGetTrusteeship)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSGetTrusteeship)
  return target;
}

size_t CSGetTrusteeship::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSGetTrusteeship)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSGetTrusteeship::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSGetTrusteeship)
  GOOGLE_DCHECK_NE(&from, this);
  const CSGetTrusteeship* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSGetTrusteeship>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSGetTrusteeship)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSGetTrusteeship)
    MergeFrom(*source);
  }
}

void CSGetTrusteeship::MergeFrom(const CSGetTrusteeship& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSGetTrusteeship)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSGetTrusteeship::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSGetTrusteeship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetTrusteeship::CopyFrom(const CSGetTrusteeship& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSGetTrusteeship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetTrusteeship::IsInitialized() const {
  return true;
}

void CSGetTrusteeship::InternalSwap(CSGetTrusteeship* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSGetTrusteeship::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGetTrusteeship::_Internal {
 public:
  static const ::TrusteeshipInfo& info(const SCGetTrusteeship* msg);
};

const ::TrusteeshipInfo&
SCGetTrusteeship::_Internal::info(const SCGetTrusteeship* msg) {
  return *msg->info_;
}
SCGetTrusteeship::SCGetTrusteeship(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCGetTrusteeship)
}
SCGetTrusteeship::SCGetTrusteeship(const SCGetTrusteeship& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::TrusteeshipInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  ::memcpy(&lefttime_, &from.lefttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&viplevel_) -
    reinterpret_cast<char*>(&lefttime_)) + sizeof(viplevel_));
  // @@protoc_insertion_point(copy_constructor:SCGetTrusteeship)
}

void SCGetTrusteeship::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCGetTrusteeship_JSBY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&viplevel_) -
      reinterpret_cast<char*>(&info_)) + sizeof(viplevel_));
}

SCGetTrusteeship::~SCGetTrusteeship() {
  // @@protoc_insertion_point(destructor:SCGetTrusteeship)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGetTrusteeship::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void SCGetTrusteeship::ArenaDtor(void* object) {
  SCGetTrusteeship* _this = reinterpret_cast< SCGetTrusteeship* >(object);
  (void)_this;
}
void SCGetTrusteeship::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGetTrusteeship::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGetTrusteeship& SCGetTrusteeship::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGetTrusteeship_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCGetTrusteeship::Clear() {
// @@protoc_insertion_point(message_clear_start:SCGetTrusteeship)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  ::memset(&lefttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&viplevel_) -
      reinterpret_cast<char*>(&lefttime_)) + sizeof(viplevel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGetTrusteeship::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TrusteeshipInfo Info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 LeftTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lefttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 VIPLevel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          viplevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGetTrusteeship::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCGetTrusteeship)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TrusteeshipInfo Info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  // int32 LeftTime = 2;
  if (this->lefttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_lefttime(), target);
  }

  // int32 VIPLevel = 3;
  if (this->viplevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_viplevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCGetTrusteeship)
  return target;
}

size_t SCGetTrusteeship::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCGetTrusteeship)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TrusteeshipInfo Info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // int32 LeftTime = 2;
  if (this->lefttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lefttime());
  }

  // int32 VIPLevel = 3;
  if (this->viplevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_viplevel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGetTrusteeship::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCGetTrusteeship)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGetTrusteeship* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGetTrusteeship>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCGetTrusteeship)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCGetTrusteeship)
    MergeFrom(*source);
  }
}

void SCGetTrusteeship::MergeFrom(const SCGetTrusteeship& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCGetTrusteeship)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::TrusteeshipInfo::MergeFrom(from._internal_info());
  }
  if (from.lefttime() != 0) {
    _internal_set_lefttime(from._internal_lefttime());
  }
  if (from.viplevel() != 0) {
    _internal_set_viplevel(from._internal_viplevel());
  }
}

void SCGetTrusteeship::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCGetTrusteeship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGetTrusteeship::CopyFrom(const SCGetTrusteeship& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCGetTrusteeship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGetTrusteeship::IsInitialized() const {
  return true;
}

void SCGetTrusteeship::InternalSwap(SCGetTrusteeship* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCGetTrusteeship, viplevel_)
      + sizeof(SCGetTrusteeship::viplevel_)
      - PROTOBUF_FIELD_OFFSET(SCGetTrusteeship, info_)>(
          reinterpret_cast<char*>(&info_),
          reinterpret_cast<char*>(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGetTrusteeship::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSetTrusteeship::_Internal {
 public:
  static const ::TrusteeshipInfo& info(const CSSetTrusteeship* msg);
};

const ::TrusteeshipInfo&
CSSetTrusteeship::_Internal::info(const CSSetTrusteeship* msg) {
  return *msg->info_;
}
CSSetTrusteeship::CSSetTrusteeship(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSSetTrusteeship)
}
CSSetTrusteeship::CSSetTrusteeship(const CSSetTrusteeship& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::TrusteeshipInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CSSetTrusteeship)
}

void CSSetTrusteeship::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSSetTrusteeship_JSBY_2eproto.base);
  info_ = nullptr;
}

CSSetTrusteeship::~CSSetTrusteeship() {
  // @@protoc_insertion_point(destructor:CSSetTrusteeship)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSetTrusteeship::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void CSSetTrusteeship::ArenaDtor(void* object) {
  CSSetTrusteeship* _this = reinterpret_cast< CSSetTrusteeship* >(object);
  (void)_this;
}
void CSSetTrusteeship::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSetTrusteeship::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSetTrusteeship& CSSetTrusteeship::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSetTrusteeship_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSSetTrusteeship::Clear() {
// @@protoc_insertion_point(message_clear_start:CSSetTrusteeship)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSetTrusteeship::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TrusteeshipInfo Info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSetTrusteeship::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSSetTrusteeship)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TrusteeshipInfo Info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSSetTrusteeship)
  return target;
}

size_t CSSetTrusteeship::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSSetTrusteeship)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TrusteeshipInfo Info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSetTrusteeship::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSSetTrusteeship)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSetTrusteeship* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSetTrusteeship>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSSetTrusteeship)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSSetTrusteeship)
    MergeFrom(*source);
  }
}

void CSSetTrusteeship::MergeFrom(const CSSetTrusteeship& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSSetTrusteeship)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::TrusteeshipInfo::MergeFrom(from._internal_info());
  }
}

void CSSetTrusteeship::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSSetTrusteeship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSetTrusteeship::CopyFrom(const CSSetTrusteeship& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSSetTrusteeship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSetTrusteeship::IsInitialized() const {
  return true;
}

void CSSetTrusteeship::InternalSwap(CSSetTrusteeship* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSetTrusteeship::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSetTrusteeship::_Internal {
 public:
};

SCSetTrusteeship::SCSetTrusteeship(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCSetTrusteeship)
}
SCSetTrusteeship::SCSetTrusteeship(const SCSetTrusteeship& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SCSetTrusteeship)
}

void SCSetTrusteeship::SharedCtor() {
}

SCSetTrusteeship::~SCSetTrusteeship() {
  // @@protoc_insertion_point(destructor:SCSetTrusteeship)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSetTrusteeship::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSetTrusteeship::ArenaDtor(void* object) {
  SCSetTrusteeship* _this = reinterpret_cast< SCSetTrusteeship* >(object);
  (void)_this;
}
void SCSetTrusteeship::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSetTrusteeship::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSetTrusteeship& SCSetTrusteeship::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSetTrusteeship_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCSetTrusteeship::Clear() {
// @@protoc_insertion_point(message_clear_start:SCSetTrusteeship)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSetTrusteeship::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSetTrusteeship::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCSetTrusteeship)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCSetTrusteeship)
  return target;
}

size_t SCSetTrusteeship::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCSetTrusteeship)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSetTrusteeship::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCSetTrusteeship)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSetTrusteeship* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSetTrusteeship>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCSetTrusteeship)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCSetTrusteeship)
    MergeFrom(*source);
  }
}

void SCSetTrusteeship::MergeFrom(const SCSetTrusteeship& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCSetTrusteeship)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SCSetTrusteeship::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCSetTrusteeship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSetTrusteeship::CopyFrom(const SCSetTrusteeship& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCSetTrusteeship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSetTrusteeship::IsInitialized() const {
  return true;
}

void SCSetTrusteeship::InternalSwap(SCSetTrusteeship* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSetTrusteeship::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TrusteeshipMoney::_Internal {
 public:
};

TrusteeshipMoney::TrusteeshipMoney(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TrusteeshipMoney)
}
TrusteeshipMoney::TrusteeshipMoney(const TrusteeshipMoney& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&monstertype_, &from.monstertype_,
    static_cast<size_t>(reinterpret_cast<char*>(&money_) -
    reinterpret_cast<char*>(&monstertype_)) + sizeof(money_));
  // @@protoc_insertion_point(copy_constructor:TrusteeshipMoney)
}

void TrusteeshipMoney::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&monstertype_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&money_) -
      reinterpret_cast<char*>(&monstertype_)) + sizeof(money_));
}

TrusteeshipMoney::~TrusteeshipMoney() {
  // @@protoc_insertion_point(destructor:TrusteeshipMoney)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrusteeshipMoney::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrusteeshipMoney::ArenaDtor(void* object) {
  TrusteeshipMoney* _this = reinterpret_cast< TrusteeshipMoney* >(object);
  (void)_this;
}
void TrusteeshipMoney::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrusteeshipMoney::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrusteeshipMoney& TrusteeshipMoney::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrusteeshipMoney_JSBY_2eproto.base);
  return *internal_default_instance();
}


void TrusteeshipMoney::Clear() {
// @@protoc_insertion_point(message_clear_start:TrusteeshipMoney)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&monstertype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&money_) -
      reinterpret_cast<char*>(&monstertype_)) + sizeof(money_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrusteeshipMoney::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 MonsterType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          monstertype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Money = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrusteeshipMoney::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TrusteeshipMoney)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 MonsterType = 1;
  if (this->monstertype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_monstertype(), target);
  }

  // int32 Money = 2;
  if (this->money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_money(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrusteeshipMoney)
  return target;
}

size_t TrusteeshipMoney::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TrusteeshipMoney)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 MonsterType = 1;
  if (this->monstertype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_monstertype());
  }

  // int32 Money = 2;
  if (this->money() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_money());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrusteeshipMoney::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TrusteeshipMoney)
  GOOGLE_DCHECK_NE(&from, this);
  const TrusteeshipMoney* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrusteeshipMoney>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TrusteeshipMoney)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TrusteeshipMoney)
    MergeFrom(*source);
  }
}

void TrusteeshipMoney::MergeFrom(const TrusteeshipMoney& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TrusteeshipMoney)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.monstertype() != 0) {
    _internal_set_monstertype(from._internal_monstertype());
  }
  if (from.money() != 0) {
    _internal_set_money(from._internal_money());
  }
}

void TrusteeshipMoney::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TrusteeshipMoney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrusteeshipMoney::CopyFrom(const TrusteeshipMoney& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TrusteeshipMoney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrusteeshipMoney::IsInitialized() const {
  return true;
}

void TrusteeshipMoney::InternalSwap(TrusteeshipMoney* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrusteeshipMoney, money_)
      + sizeof(TrusteeshipMoney::money_)
      - PROTOBUF_FIELD_OFFSET(TrusteeshipMoney, monstertype_)>(
          reinterpret_cast<char*>(&monstertype_),
          reinterpret_cast<char*>(&other->monstertype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrusteeshipMoney::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSEndTrusteeship::_Internal {
 public:
};

CSEndTrusteeship::CSEndTrusteeship(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSEndTrusteeship)
}
CSEndTrusteeship::CSEndTrusteeship(const CSEndTrusteeship& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  notify_ = from.notify_;
  // @@protoc_insertion_point(copy_constructor:CSEndTrusteeship)
}

void CSEndTrusteeship::SharedCtor() {
  notify_ = false;
}

CSEndTrusteeship::~CSEndTrusteeship() {
  // @@protoc_insertion_point(destructor:CSEndTrusteeship)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSEndTrusteeship::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSEndTrusteeship::ArenaDtor(void* object) {
  CSEndTrusteeship* _this = reinterpret_cast< CSEndTrusteeship* >(object);
  (void)_this;
}
void CSEndTrusteeship::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSEndTrusteeship::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSEndTrusteeship& CSEndTrusteeship::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSEndTrusteeship_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSEndTrusteeship::Clear() {
// @@protoc_insertion_point(message_clear_start:CSEndTrusteeship)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notify_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSEndTrusteeship::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool Notify = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          notify_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSEndTrusteeship::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSEndTrusteeship)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Notify = 1;
  if (this->notify() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_notify(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSEndTrusteeship)
  return target;
}

size_t CSEndTrusteeship::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSEndTrusteeship)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool Notify = 1;
  if (this->notify() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSEndTrusteeship::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSEndTrusteeship)
  GOOGLE_DCHECK_NE(&from, this);
  const CSEndTrusteeship* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSEndTrusteeship>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSEndTrusteeship)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSEndTrusteeship)
    MergeFrom(*source);
  }
}

void CSEndTrusteeship::MergeFrom(const CSEndTrusteeship& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSEndTrusteeship)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.notify() != 0) {
    _internal_set_notify(from._internal_notify());
  }
}

void CSEndTrusteeship::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSEndTrusteeship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSEndTrusteeship::CopyFrom(const CSEndTrusteeship& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSEndTrusteeship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEndTrusteeship::IsInitialized() const {
  return true;
}

void CSEndTrusteeship::InternalSwap(CSEndTrusteeship* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(notify_, other->notify_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSEndTrusteeship::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCEndTrusteeship::_Internal {
 public:
  static const ::TrusteeshipMoney& info(const SCEndTrusteeship* msg);
};

const ::TrusteeshipMoney&
SCEndTrusteeship::_Internal::info(const SCEndTrusteeship* msg) {
  return *msg->info_;
}
SCEndTrusteeship::SCEndTrusteeship(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCEndTrusteeship)
}
SCEndTrusteeship::SCEndTrusteeship(const SCEndTrusteeship& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::TrusteeshipMoney(*from.info_);
  } else {
    info_ = nullptr;
  }
  ::memcpy(&totalmoney_, &from.totalmoney_,
    static_cast<size_t>(reinterpret_cast<char*>(&totaltime_) -
    reinterpret_cast<char*>(&totalmoney_)) + sizeof(totaltime_));
  // @@protoc_insertion_point(copy_constructor:SCEndTrusteeship)
}

void SCEndTrusteeship::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCEndTrusteeship_JSBY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&totaltime_) -
      reinterpret_cast<char*>(&info_)) + sizeof(totaltime_));
}

SCEndTrusteeship::~SCEndTrusteeship() {
  // @@protoc_insertion_point(destructor:SCEndTrusteeship)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCEndTrusteeship::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void SCEndTrusteeship::ArenaDtor(void* object) {
  SCEndTrusteeship* _this = reinterpret_cast< SCEndTrusteeship* >(object);
  (void)_this;
}
void SCEndTrusteeship::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCEndTrusteeship::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCEndTrusteeship& SCEndTrusteeship::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCEndTrusteeship_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCEndTrusteeship::Clear() {
// @@protoc_insertion_point(message_clear_start:SCEndTrusteeship)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  ::memset(&totalmoney_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totaltime_) -
      reinterpret_cast<char*>(&totalmoney_)) + sizeof(totaltime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCEndTrusteeship::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TrusteeshipMoney Info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 TotalMoney = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          totalmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 TotalTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          totaltime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCEndTrusteeship::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCEndTrusteeship)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TrusteeshipMoney Info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  // int32 TotalMoney = 2;
  if (this->totalmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_totalmoney(), target);
  }

  // int32 TotalTime = 3;
  if (this->totaltime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_totaltime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCEndTrusteeship)
  return target;
}

size_t SCEndTrusteeship::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCEndTrusteeship)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TrusteeshipMoney Info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // int32 TotalMoney = 2;
  if (this->totalmoney() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_totalmoney());
  }

  // int32 TotalTime = 3;
  if (this->totaltime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_totaltime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCEndTrusteeship::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCEndTrusteeship)
  GOOGLE_DCHECK_NE(&from, this);
  const SCEndTrusteeship* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCEndTrusteeship>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCEndTrusteeship)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCEndTrusteeship)
    MergeFrom(*source);
  }
}

void SCEndTrusteeship::MergeFrom(const SCEndTrusteeship& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCEndTrusteeship)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::TrusteeshipMoney::MergeFrom(from._internal_info());
  }
  if (from.totalmoney() != 0) {
    _internal_set_totalmoney(from._internal_totalmoney());
  }
  if (from.totaltime() != 0) {
    _internal_set_totaltime(from._internal_totaltime());
  }
}

void SCEndTrusteeship::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCEndTrusteeship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCEndTrusteeship::CopyFrom(const SCEndTrusteeship& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCEndTrusteeship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCEndTrusteeship::IsInitialized() const {
  return true;
}

void SCEndTrusteeship::InternalSwap(SCEndTrusteeship* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCEndTrusteeship, totaltime_)
      + sizeof(SCEndTrusteeship::totaltime_)
      - PROTOBUF_FIELD_OFFSET(SCEndTrusteeship, info_)>(
          reinterpret_cast<char*>(&info_),
          reinterpret_cast<char*>(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCEndTrusteeship::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSGetVersion::_Internal {
 public:
};

CSGetVersion::CSGetVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSGetVersion)
}
CSGetVersion::CSGetVersion(const CSGetVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSGetVersion)
}

void CSGetVersion::SharedCtor() {
}

CSGetVersion::~CSGetVersion() {
  // @@protoc_insertion_point(destructor:CSGetVersion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSGetVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSGetVersion::ArenaDtor(void* object) {
  CSGetVersion* _this = reinterpret_cast< CSGetVersion* >(object);
  (void)_this;
}
void CSGetVersion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSGetVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSGetVersion& CSGetVersion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSGetVersion_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSGetVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:CSGetVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSGetVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSGetVersion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSGetVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSGetVersion)
  return target;
}

size_t CSGetVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSGetVersion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSGetVersion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSGetVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const CSGetVersion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSGetVersion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSGetVersion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSGetVersion)
    MergeFrom(*source);
  }
}

void CSGetVersion::MergeFrom(const CSGetVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSGetVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSGetVersion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSGetVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetVersion::CopyFrom(const CSGetVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSGetVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetVersion::IsInitialized() const {
  return true;
}

void CSGetVersion::InternalSwap(CSGetVersion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSGetVersion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGetVersion::_Internal {
 public:
};

SCGetVersion::SCGetVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCGetVersion)
}
SCGetVersion::SCGetVersion(const SCGetVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  isnew_ = from.isnew_;
  // @@protoc_insertion_point(copy_constructor:SCGetVersion)
}

void SCGetVersion::SharedCtor() {
  isnew_ = false;
}

SCGetVersion::~SCGetVersion() {
  // @@protoc_insertion_point(destructor:SCGetVersion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGetVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCGetVersion::ArenaDtor(void* object) {
  SCGetVersion* _this = reinterpret_cast< SCGetVersion* >(object);
  (void)_this;
}
void SCGetVersion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGetVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGetVersion& SCGetVersion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGetVersion_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCGetVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:SCGetVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isnew_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGetVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool IsNew = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isnew_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGetVersion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCGetVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool IsNew = 1;
  if (this->isnew() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isnew(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCGetVersion)
  return target;
}

size_t SCGetVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCGetVersion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool IsNew = 1;
  if (this->isnew() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGetVersion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCGetVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGetVersion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGetVersion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCGetVersion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCGetVersion)
    MergeFrom(*source);
  }
}

void SCGetVersion::MergeFrom(const SCGetVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCGetVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.isnew() != 0) {
    _internal_set_isnew(from._internal_isnew());
  }
}

void SCGetVersion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCGetVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGetVersion::CopyFrom(const SCGetVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCGetVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGetVersion::IsInitialized() const {
  return true;
}

void SCGetVersion::InternalSwap(SCGetVersion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(isnew_, other->isnew_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGetVersion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ActivityInfo::_Internal {
 public:
};

ActivityInfo::ActivityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ActivityInfo)
}
ActivityInfo::ActivityInfo(const ActivityInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&id_)) + sizeof(flag_));
  // @@protoc_insertion_point(copy_constructor:ActivityInfo)
}

void ActivityInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActivityInfo_JSBY_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&id_)) + sizeof(flag_));
}

ActivityInfo::~ActivityInfo() {
  // @@protoc_insertion_point(destructor:ActivityInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActivityInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActivityInfo::ArenaDtor(void* object) {
  ActivityInfo* _this = reinterpret_cast< ActivityInfo* >(object);
  (void)_this;
}
void ActivityInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActivityInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivityInfo& ActivityInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivityInfo_JSBY_2eproto.base);
  return *internal_default_instance();
}


void ActivityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ActivityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&id_)) + sizeof(flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Money = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Enzyme = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          enzyme_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ActivityInfo.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Flag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivityInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActivityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 Money = 2;
  if (this->money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_money(), target);
  }

  // int32 Enzyme = 3;
  if (this->enzyme() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_enzyme(), target);
  }

  // string Name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ActivityInfo.Name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // int32 Flag = 5;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivityInfo)
  return target;
}

size_t ActivityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActivityInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 Money = 2;
  if (this->money() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_money());
  }

  // int32 Enzyme = 3;
  if (this->enzyme() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_enzyme());
  }

  // int32 Flag = 5;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivityInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ActivityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivityInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivityInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ActivityInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ActivityInfo)
    MergeFrom(*source);
  }
}

void ActivityInfo::MergeFrom(const ActivityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActivityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.money() != 0) {
    _internal_set_money(from._internal_money());
  }
  if (from.enzyme() != 0) {
    _internal_set_enzyme(from._internal_enzyme());
  }
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
}

void ActivityInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ActivityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityInfo::CopyFrom(const ActivityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActivityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityInfo::IsInitialized() const {
  return true;
}

void ActivityInfo::InternalSwap(ActivityInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActivityInfo, flag_)
      + sizeof(ActivityInfo::flag_)
      - PROTOBUF_FIELD_OFFSET(ActivityInfo, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSActivityInfo::_Internal {
 public:
};

CSActivityInfo::CSActivityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSActivityInfo)
}
CSActivityInfo::CSActivityInfo(const CSActivityInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSActivityInfo)
}

void CSActivityInfo::SharedCtor() {
}

CSActivityInfo::~CSActivityInfo() {
  // @@protoc_insertion_point(destructor:CSActivityInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSActivityInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSActivityInfo::ArenaDtor(void* object) {
  CSActivityInfo* _this = reinterpret_cast< CSActivityInfo* >(object);
  (void)_this;
}
void CSActivityInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSActivityInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSActivityInfo& CSActivityInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSActivityInfo_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSActivityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CSActivityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSActivityInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSActivityInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSActivityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSActivityInfo)
  return target;
}

size_t CSActivityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSActivityInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSActivityInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSActivityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSActivityInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSActivityInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSActivityInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSActivityInfo)
    MergeFrom(*source);
  }
}

void CSActivityInfo::MergeFrom(const CSActivityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSActivityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSActivityInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSActivityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSActivityInfo::CopyFrom(const CSActivityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSActivityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSActivityInfo::IsInitialized() const {
  return true;
}

void CSActivityInfo::InternalSwap(CSActivityInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSActivityInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCActivityInfo::_Internal {
 public:
  static const ::ActivityInfo& info(const SCActivityInfo* msg);
};

const ::ActivityInfo&
SCActivityInfo::_Internal::info(const SCActivityInfo* msg) {
  return *msg->info_;
}
SCActivityInfo::SCActivityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCActivityInfo)
}
SCActivityInfo::SCActivityInfo(const SCActivityInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  begint32ime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_begint32ime().empty()) {
    begint32ime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_begint32ime(), 
      GetArena());
  }
  endtime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_endtime().empty()) {
    endtime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_endtime(), 
      GetArena());
  }
  if (from._internal_has_info()) {
    info_ = new ::ActivityInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  lefttime_ = from.lefttime_;
  // @@protoc_insertion_point(copy_constructor:SCActivityInfo)
}

void SCActivityInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCActivityInfo_JSBY_2eproto.base);
  begint32ime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endtime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lefttime_) -
      reinterpret_cast<char*>(&info_)) + sizeof(lefttime_));
}

SCActivityInfo::~SCActivityInfo() {
  // @@protoc_insertion_point(destructor:SCActivityInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCActivityInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  begint32ime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endtime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete info_;
}

void SCActivityInfo::ArenaDtor(void* object) {
  SCActivityInfo* _this = reinterpret_cast< SCActivityInfo* >(object);
  (void)_this;
}
void SCActivityInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCActivityInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCActivityInfo& SCActivityInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCActivityInfo_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCActivityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SCActivityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  begint32ime_.ClearToEmpty();
  endtime_.ClearToEmpty();
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  lefttime_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCActivityInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ActivityInfo Info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 LeftTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lefttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Begint32ime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_begint32ime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SCActivityInfo.Begint32ime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string EndTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_endtime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SCActivityInfo.EndTime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCActivityInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCActivityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ActivityInfo Info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  // int32 LeftTime = 2;
  if (this->lefttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_lefttime(), target);
  }

  // string Begint32ime = 3;
  if (this->begint32ime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_begint32ime().data(), static_cast<int>(this->_internal_begint32ime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SCActivityInfo.Begint32ime");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_begint32ime(), target);
  }

  // string EndTime = 4;
  if (this->endtime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_endtime().data(), static_cast<int>(this->_internal_endtime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SCActivityInfo.EndTime");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_endtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCActivityInfo)
  return target;
}

size_t SCActivityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCActivityInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Begint32ime = 3;
  if (this->begint32ime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_begint32ime());
  }

  // string EndTime = 4;
  if (this->endtime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endtime());
  }

  // .ActivityInfo Info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // int32 LeftTime = 2;
  if (this->lefttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lefttime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCActivityInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCActivityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCActivityInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCActivityInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCActivityInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCActivityInfo)
    MergeFrom(*source);
  }
}

void SCActivityInfo::MergeFrom(const SCActivityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCActivityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.begint32ime().size() > 0) {
    _internal_set_begint32ime(from._internal_begint32ime());
  }
  if (from.endtime().size() > 0) {
    _internal_set_endtime(from._internal_endtime());
  }
  if (from.has_info()) {
    _internal_mutable_info()->::ActivityInfo::MergeFrom(from._internal_info());
  }
  if (from.lefttime() != 0) {
    _internal_set_lefttime(from._internal_lefttime());
  }
}

void SCActivityInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCActivityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCActivityInfo::CopyFrom(const SCActivityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCActivityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCActivityInfo::IsInitialized() const {
  return true;
}

void SCActivityInfo::InternalSwap(SCActivityInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  begint32ime_.Swap(&other->begint32ime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  endtime_.Swap(&other->endtime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCActivityInfo, lefttime_)
      + sizeof(SCActivityInfo::lefttime_)
      - PROTOBUF_FIELD_OFFSET(SCActivityInfo, info_)>(
          reinterpret_cast<char*>(&info_),
          reinterpret_cast<char*>(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCActivityInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCNotifyActivityInfo::_Internal {
 public:
  static const ::ActivityInfo& info(const SCNotifyActivityInfo* msg);
};

const ::ActivityInfo&
SCNotifyActivityInfo::_Internal::info(const SCNotifyActivityInfo* msg) {
  return *msg->info_;
}
SCNotifyActivityInfo::SCNotifyActivityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCNotifyActivityInfo)
}
SCNotifyActivityInfo::SCNotifyActivityInfo(const SCNotifyActivityInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  begint32ime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_begint32ime().empty()) {
    begint32ime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_begint32ime(), 
      GetArena());
  }
  endtime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_endtime().empty()) {
    endtime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_endtime(), 
      GetArena());
  }
  if (from._internal_has_info()) {
    info_ = new ::ActivityInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  lefttime_ = from.lefttime_;
  // @@protoc_insertion_point(copy_constructor:SCNotifyActivityInfo)
}

void SCNotifyActivityInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCNotifyActivityInfo_JSBY_2eproto.base);
  begint32ime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endtime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lefttime_) -
      reinterpret_cast<char*>(&info_)) + sizeof(lefttime_));
}

SCNotifyActivityInfo::~SCNotifyActivityInfo() {
  // @@protoc_insertion_point(destructor:SCNotifyActivityInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCNotifyActivityInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  begint32ime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endtime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete info_;
}

void SCNotifyActivityInfo::ArenaDtor(void* object) {
  SCNotifyActivityInfo* _this = reinterpret_cast< SCNotifyActivityInfo* >(object);
  (void)_this;
}
void SCNotifyActivityInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCNotifyActivityInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCNotifyActivityInfo& SCNotifyActivityInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCNotifyActivityInfo_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCNotifyActivityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SCNotifyActivityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  begint32ime_.ClearToEmpty();
  endtime_.ClearToEmpty();
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  lefttime_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCNotifyActivityInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ActivityInfo Info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 LeftTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lefttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Begint32ime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_begint32ime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SCNotifyActivityInfo.Begint32ime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string EndTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_endtime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SCNotifyActivityInfo.EndTime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCNotifyActivityInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCNotifyActivityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ActivityInfo Info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  // int32 LeftTime = 2;
  if (this->lefttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_lefttime(), target);
  }

  // string Begint32ime = 3;
  if (this->begint32ime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_begint32ime().data(), static_cast<int>(this->_internal_begint32ime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SCNotifyActivityInfo.Begint32ime");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_begint32ime(), target);
  }

  // string EndTime = 4;
  if (this->endtime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_endtime().data(), static_cast<int>(this->_internal_endtime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SCNotifyActivityInfo.EndTime");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_endtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCNotifyActivityInfo)
  return target;
}

size_t SCNotifyActivityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCNotifyActivityInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Begint32ime = 3;
  if (this->begint32ime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_begint32ime());
  }

  // string EndTime = 4;
  if (this->endtime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endtime());
  }

  // .ActivityInfo Info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // int32 LeftTime = 2;
  if (this->lefttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lefttime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCNotifyActivityInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCNotifyActivityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCNotifyActivityInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCNotifyActivityInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCNotifyActivityInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCNotifyActivityInfo)
    MergeFrom(*source);
  }
}

void SCNotifyActivityInfo::MergeFrom(const SCNotifyActivityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCNotifyActivityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.begint32ime().size() > 0) {
    _internal_set_begint32ime(from._internal_begint32ime());
  }
  if (from.endtime().size() > 0) {
    _internal_set_endtime(from._internal_endtime());
  }
  if (from.has_info()) {
    _internal_mutable_info()->::ActivityInfo::MergeFrom(from._internal_info());
  }
  if (from.lefttime() != 0) {
    _internal_set_lefttime(from._internal_lefttime());
  }
}

void SCNotifyActivityInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCNotifyActivityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCNotifyActivityInfo::CopyFrom(const SCNotifyActivityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCNotifyActivityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCNotifyActivityInfo::IsInitialized() const {
  return true;
}

void SCNotifyActivityInfo::InternalSwap(SCNotifyActivityInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  begint32ime_.Swap(&other->begint32ime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  endtime_.Swap(&other->endtime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCNotifyActivityInfo, lefttime_)
      + sizeof(SCNotifyActivityInfo::lefttime_)
      - PROTOBUF_FIELD_OFFSET(SCNotifyActivityInfo, info_)>(
          reinterpret_cast<char*>(&info_),
          reinterpret_cast<char*>(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCNotifyActivityInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSGetActivityAward::_Internal {
 public:
};

CSGetActivityAward::CSGetActivityAward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSGetActivityAward)
}
CSGetActivityAward::CSGetActivityAward(const CSGetActivityAward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:CSGetActivityAward)
}

void CSGetActivityAward::SharedCtor() {
  id_ = 0;
}

CSGetActivityAward::~CSGetActivityAward() {
  // @@protoc_insertion_point(destructor:CSGetActivityAward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSGetActivityAward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSGetActivityAward::ArenaDtor(void* object) {
  CSGetActivityAward* _this = reinterpret_cast< CSGetActivityAward* >(object);
  (void)_this;
}
void CSGetActivityAward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSGetActivityAward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSGetActivityAward& CSGetActivityAward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSGetActivityAward_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSGetActivityAward::Clear() {
// @@protoc_insertion_point(message_clear_start:CSGetActivityAward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSGetActivityAward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSGetActivityAward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSGetActivityAward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSGetActivityAward)
  return target;
}

size_t CSGetActivityAward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSGetActivityAward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSGetActivityAward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSGetActivityAward)
  GOOGLE_DCHECK_NE(&from, this);
  const CSGetActivityAward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSGetActivityAward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSGetActivityAward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSGetActivityAward)
    MergeFrom(*source);
  }
}

void CSGetActivityAward::MergeFrom(const CSGetActivityAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSGetActivityAward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void CSGetActivityAward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSGetActivityAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetActivityAward::CopyFrom(const CSGetActivityAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSGetActivityAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetActivityAward::IsInitialized() const {
  return true;
}

void CSGetActivityAward::InternalSwap(CSGetActivityAward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSGetActivityAward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGetActivityAward::_Internal {
 public:
};

SCGetActivityAward::SCGetActivityAward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCGetActivityAward)
}
SCGetActivityAward::SCGetActivityAward(const SCGetActivityAward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&id_)) + sizeof(flag_));
  // @@protoc_insertion_point(copy_constructor:SCGetActivityAward)
}

void SCGetActivityAward::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&id_)) + sizeof(flag_));
}

SCGetActivityAward::~SCGetActivityAward() {
  // @@protoc_insertion_point(destructor:SCGetActivityAward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGetActivityAward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCGetActivityAward::ArenaDtor(void* object) {
  SCGetActivityAward* _this = reinterpret_cast< SCGetActivityAward* >(object);
  (void)_this;
}
void SCGetActivityAward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGetActivityAward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGetActivityAward& SCGetActivityAward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGetActivityAward_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCGetActivityAward::Clear() {
// @@protoc_insertion_point(message_clear_start:SCGetActivityAward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&id_)) + sizeof(flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGetActivityAward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGetActivityAward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCGetActivityAward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 Flag = 2;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCGetActivityAward)
  return target;
}

size_t SCGetActivityAward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCGetActivityAward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 Flag = 2;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGetActivityAward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCGetActivityAward)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGetActivityAward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGetActivityAward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCGetActivityAward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCGetActivityAward)
    MergeFrom(*source);
  }
}

void SCGetActivityAward::MergeFrom(const SCGetActivityAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCGetActivityAward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
}

void SCGetActivityAward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCGetActivityAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGetActivityAward::CopyFrom(const SCGetActivityAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCGetActivityAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGetActivityAward::IsInitialized() const {
  return true;
}

void SCGetActivityAward::InternalSwap(SCGetActivityAward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCGetActivityAward, flag_)
      + sizeof(SCGetActivityAward::flag_)
      - PROTOBUF_FIELD_OFFSET(SCGetActivityAward, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGetActivityAward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSButtonRecords::_Internal {
 public:
};

CSButtonRecords::CSButtonRecords(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSButtonRecords)
}
CSButtonRecords::CSButtonRecords(const CSButtonRecords& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&id_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:CSButtonRecords)
}

void CSButtonRecords::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&id_)) + sizeof(mode_));
}

CSButtonRecords::~CSButtonRecords() {
  // @@protoc_insertion_point(destructor:CSButtonRecords)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSButtonRecords::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSButtonRecords::ArenaDtor(void* object) {
  CSButtonRecords* _this = reinterpret_cast< CSButtonRecords* >(object);
  (void)_this;
}
void CSButtonRecords::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSButtonRecords::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSButtonRecords& CSButtonRecords::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSButtonRecords_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSButtonRecords::Clear() {
// @@protoc_insertion_point(message_clear_start:CSButtonRecords)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&id_)) + sizeof(mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSButtonRecords::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSButtonRecords::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSButtonRecords)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 Mode = 2;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSButtonRecords)
  return target;
}

size_t CSButtonRecords::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSButtonRecords)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 Mode = 2;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSButtonRecords::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSButtonRecords)
  GOOGLE_DCHECK_NE(&from, this);
  const CSButtonRecords* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSButtonRecords>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSButtonRecords)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSButtonRecords)
    MergeFrom(*source);
  }
}

void CSButtonRecords::MergeFrom(const CSButtonRecords& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSButtonRecords)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
}

void CSButtonRecords::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSButtonRecords)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSButtonRecords::CopyFrom(const CSButtonRecords& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSButtonRecords)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSButtonRecords::IsInitialized() const {
  return true;
}

void CSButtonRecords::InternalSwap(CSButtonRecords* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSButtonRecords, mode_)
      + sizeof(CSButtonRecords::mode_)
      - PROTOBUF_FIELD_OFFSET(CSButtonRecords, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSButtonRecords::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCButtonRecords::_Internal {
 public:
};

SCButtonRecords::SCButtonRecords(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCButtonRecords)
}
SCButtonRecords::SCButtonRecords(const SCButtonRecords& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SCButtonRecords)
}

void SCButtonRecords::SharedCtor() {
}

SCButtonRecords::~SCButtonRecords() {
  // @@protoc_insertion_point(destructor:SCButtonRecords)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCButtonRecords::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCButtonRecords::ArenaDtor(void* object) {
  SCButtonRecords* _this = reinterpret_cast< SCButtonRecords* >(object);
  (void)_this;
}
void SCButtonRecords::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCButtonRecords::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCButtonRecords& SCButtonRecords::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCButtonRecords_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCButtonRecords::Clear() {
// @@protoc_insertion_point(message_clear_start:SCButtonRecords)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCButtonRecords::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCButtonRecords::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCButtonRecords)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCButtonRecords)
  return target;
}

size_t SCButtonRecords::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCButtonRecords)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCButtonRecords::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCButtonRecords)
  GOOGLE_DCHECK_NE(&from, this);
  const SCButtonRecords* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCButtonRecords>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCButtonRecords)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCButtonRecords)
    MergeFrom(*source);
  }
}

void SCButtonRecords::MergeFrom(const SCButtonRecords& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCButtonRecords)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SCButtonRecords::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCButtonRecords)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCButtonRecords::CopyFrom(const SCButtonRecords& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCButtonRecords)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCButtonRecords::IsInitialized() const {
  return true;
}

void SCButtonRecords::InternalSwap(SCButtonRecords* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCButtonRecords::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TowerHeroInfo::_Internal {
 public:
};

TowerHeroInfo::TowerHeroInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TowerHeroInfo)
}
TowerHeroInfo::TowerHeroInfo(const TowerHeroInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&heroid_, &from.heroid_,
    static_cast<size_t>(reinterpret_cast<char*>(&uniqueid_) -
    reinterpret_cast<char*>(&heroid_)) + sizeof(uniqueid_));
  // @@protoc_insertion_point(copy_constructor:TowerHeroInfo)
}

void TowerHeroInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&heroid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&uniqueid_) -
      reinterpret_cast<char*>(&heroid_)) + sizeof(uniqueid_));
}

TowerHeroInfo::~TowerHeroInfo() {
  // @@protoc_insertion_point(destructor:TowerHeroInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TowerHeroInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TowerHeroInfo::ArenaDtor(void* object) {
  TowerHeroInfo* _this = reinterpret_cast< TowerHeroInfo* >(object);
  (void)_this;
}
void TowerHeroInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TowerHeroInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TowerHeroInfo& TowerHeroInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TowerHeroInfo_JSBY_2eproto.base);
  return *internal_default_instance();
}


void TowerHeroInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TowerHeroInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&heroid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uniqueid_) -
      reinterpret_cast<char*>(&heroid_)) + sizeof(uniqueid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TowerHeroInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 HeroId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          heroid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PositionId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          positionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool IsAtk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          isatk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 TargetPositionId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          targetpositionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 UniqueId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          uniqueid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TowerHeroInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TowerHeroInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 HeroId = 1;
  if (this->heroid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_heroid(), target);
  }

  // int32 PositionId = 2;
  if (this->positionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_positionid(), target);
  }

  // bool IsAtk = 3;
  if (this->isatk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_isatk(), target);
  }

  // int32 Timestamp = 4;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_timestamp(), target);
  }

  // int32 TargetPositionId = 5;
  if (this->targetpositionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_targetpositionid(), target);
  }

  // int32 UniqueId = 6;
  if (this->uniqueid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_uniqueid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TowerHeroInfo)
  return target;
}

size_t TowerHeroInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TowerHeroInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 HeroId = 1;
  if (this->heroid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_heroid());
  }

  // int32 PositionId = 2;
  if (this->positionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_positionid());
  }

  // bool IsAtk = 3;
  if (this->isatk() != 0) {
    total_size += 1 + 1;
  }

  // int32 Timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timestamp());
  }

  // int32 TargetPositionId = 5;
  if (this->targetpositionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_targetpositionid());
  }

  // int32 UniqueId = 6;
  if (this->uniqueid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uniqueid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TowerHeroInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TowerHeroInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TowerHeroInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TowerHeroInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TowerHeroInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TowerHeroInfo)
    MergeFrom(*source);
  }
}

void TowerHeroInfo::MergeFrom(const TowerHeroInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TowerHeroInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.heroid() != 0) {
    _internal_set_heroid(from._internal_heroid());
  }
  if (from.positionid() != 0) {
    _internal_set_positionid(from._internal_positionid());
  }
  if (from.isatk() != 0) {
    _internal_set_isatk(from._internal_isatk());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.targetpositionid() != 0) {
    _internal_set_targetpositionid(from._internal_targetpositionid());
  }
  if (from.uniqueid() != 0) {
    _internal_set_uniqueid(from._internal_uniqueid());
  }
}

void TowerHeroInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TowerHeroInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TowerHeroInfo::CopyFrom(const TowerHeroInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TowerHeroInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TowerHeroInfo::IsInitialized() const {
  return true;
}

void TowerHeroInfo::InternalSwap(TowerHeroInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TowerHeroInfo, uniqueid_)
      + sizeof(TowerHeroInfo::uniqueid_)
      - PROTOBUF_FIELD_OFFSET(TowerHeroInfo, heroid_)>(
          reinterpret_cast<char*>(&heroid_),
          reinterpret_cast<char*>(&other->heroid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TowerHeroInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TowerHeroAtkInfo::_Internal {
 public:
};

TowerHeroAtkInfo::TowerHeroAtkInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TowerHeroAtkInfo)
}
TowerHeroAtkInfo::TowerHeroAtkInfo(const TowerHeroAtkInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&heropositionid_, &from.heropositionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isatk_) -
    reinterpret_cast<char*>(&heropositionid_)) + sizeof(isatk_));
  // @@protoc_insertion_point(copy_constructor:TowerHeroAtkInfo)
}

void TowerHeroAtkInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&heropositionid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isatk_) -
      reinterpret_cast<char*>(&heropositionid_)) + sizeof(isatk_));
}

TowerHeroAtkInfo::~TowerHeroAtkInfo() {
  // @@protoc_insertion_point(destructor:TowerHeroAtkInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TowerHeroAtkInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TowerHeroAtkInfo::ArenaDtor(void* object) {
  TowerHeroAtkInfo* _this = reinterpret_cast< TowerHeroAtkInfo* >(object);
  (void)_this;
}
void TowerHeroAtkInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TowerHeroAtkInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TowerHeroAtkInfo& TowerHeroAtkInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TowerHeroAtkInfo_JSBY_2eproto.base);
  return *internal_default_instance();
}


void TowerHeroAtkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TowerHeroAtkInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&heropositionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isatk_) -
      reinterpret_cast<char*>(&heropositionid_)) + sizeof(isatk_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TowerHeroAtkInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 HeroPositionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          heropositionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool IsAtk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isatk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TowerHeroAtkInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TowerHeroAtkInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 HeroPositionId = 1;
  if (this->heropositionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_heropositionid(), target);
  }

  // bool IsAtk = 2;
  if (this->isatk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isatk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TowerHeroAtkInfo)
  return target;
}

size_t TowerHeroAtkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TowerHeroAtkInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 HeroPositionId = 1;
  if (this->heropositionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_heropositionid());
  }

  // bool IsAtk = 2;
  if (this->isatk() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TowerHeroAtkInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TowerHeroAtkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TowerHeroAtkInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TowerHeroAtkInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TowerHeroAtkInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TowerHeroAtkInfo)
    MergeFrom(*source);
  }
}

void TowerHeroAtkInfo::MergeFrom(const TowerHeroAtkInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TowerHeroAtkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.heropositionid() != 0) {
    _internal_set_heropositionid(from._internal_heropositionid());
  }
  if (from.isatk() != 0) {
    _internal_set_isatk(from._internal_isatk());
  }
}

void TowerHeroAtkInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TowerHeroAtkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TowerHeroAtkInfo::CopyFrom(const TowerHeroAtkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TowerHeroAtkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TowerHeroAtkInfo::IsInitialized() const {
  return true;
}

void TowerHeroAtkInfo::InternalSwap(TowerHeroAtkInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TowerHeroAtkInfo, isatk_)
      + sizeof(TowerHeroAtkInfo::isatk_)
      - PROTOBUF_FIELD_OFFSET(TowerHeroAtkInfo, heropositionid_)>(
          reinterpret_cast<char*>(&heropositionid_),
          reinterpret_cast<char*>(&other->heropositionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TowerHeroAtkInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TablePlayerInfo::_Internal {
 public:
  static const ::TowerHeroInfo& info(const TablePlayerInfo* msg);
};

const ::TowerHeroInfo&
TablePlayerInfo::_Internal::info(const TablePlayerInfo* msg) {
  return *msg->info_;
}
TablePlayerInfo::TablePlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TablePlayerInfo)
}
TablePlayerInfo::TablePlayerInfo(const TablePlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  head_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_head().empty()) {
    head_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_head(), 
      GetArena());
  }
  if (from._internal_has_info()) {
    info_ = new ::TowerHeroInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  ::memcpy(&chairid_, &from.chairid_,
    static_cast<size_t>(reinterpret_cast<char*>(&effect_) -
    reinterpret_cast<char*>(&chairid_)) + sizeof(effect_));
  // @@protoc_insertion_point(copy_constructor:TablePlayerInfo)
}

void TablePlayerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TablePlayerInfo_JSBY_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  head_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&effect_) -
      reinterpret_cast<char*>(&info_)) + sizeof(effect_));
}

TablePlayerInfo::~TablePlayerInfo() {
  // @@protoc_insertion_point(destructor:TablePlayerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TablePlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  head_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete info_;
}

void TablePlayerInfo::ArenaDtor(void* object) {
  TablePlayerInfo* _this = reinterpret_cast< TablePlayerInfo* >(object);
  (void)_this;
}
void TablePlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TablePlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TablePlayerInfo& TablePlayerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TablePlayerInfo_JSBY_2eproto.base);
  return *internal_default_instance();
}


void TablePlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TablePlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  head_.ClearToEmpty();
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  ::memset(&chairid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&effect_) -
      reinterpret_cast<char*>(&chairid_)) + sizeof(effect_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TablePlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ChairId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chairid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PlayerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Money = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Sex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TablePlayerInfo.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Head = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_head();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TablePlayerInfo.Head"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TowerHeroInfo Info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MoneyVariation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          moneyvariation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 VipLevel = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          viplevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool IsVip = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          isvip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Background = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          background_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Effect = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          effect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TablePlayerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TablePlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ChairId = 1;
  if (this->chairid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chairid(), target);
  }

  // int32 PlayerId = 2;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_playerid(), target);
  }

  // int32 Money = 3;
  if (this->money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_money(), target);
  }

  // int32 Sex = 4;
  if (this->sex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_sex(), target);
  }

  // string Name = 5;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TablePlayerInfo.Name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // string Head = 6;
  if (this->head().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_head().data(), static_cast<int>(this->_internal_head().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TablePlayerInfo.Head");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_head(), target);
  }

  // .TowerHeroInfo Info = 7;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::info(this), target, stream);
  }

  // int32 MoneyVariation = 8;
  if (this->moneyvariation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_moneyvariation(), target);
  }

  // int32 VipLevel = 9;
  if (this->viplevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_viplevel(), target);
  }

  // bool IsVip = 10;
  if (this->isvip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_isvip(), target);
  }

  // int32 Background = 11;
  if (this->background() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_background(), target);
  }

  // int32 Effect = 12;
  if (this->effect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_effect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TablePlayerInfo)
  return target;
}

size_t TablePlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TablePlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string Head = 6;
  if (this->head().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_head());
  }

  // .TowerHeroInfo Info = 7;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // int32 ChairId = 1;
  if (this->chairid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chairid());
  }

  // int32 PlayerId = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  // int32 Money = 3;
  if (this->money() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_money());
  }

  // int32 Sex = 4;
  if (this->sex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sex());
  }

  // int32 MoneyVariation = 8;
  if (this->moneyvariation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_moneyvariation());
  }

  // int32 VipLevel = 9;
  if (this->viplevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_viplevel());
  }

  // bool IsVip = 10;
  if (this->isvip() != 0) {
    total_size += 1 + 1;
  }

  // int32 Background = 11;
  if (this->background() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_background());
  }

  // int32 Effect = 12;
  if (this->effect() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_effect());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TablePlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TablePlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TablePlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TablePlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TablePlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TablePlayerInfo)
    MergeFrom(*source);
  }
}

void TablePlayerInfo::MergeFrom(const TablePlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TablePlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.head().size() > 0) {
    _internal_set_head(from._internal_head());
  }
  if (from.has_info()) {
    _internal_mutable_info()->::TowerHeroInfo::MergeFrom(from._internal_info());
  }
  if (from.chairid() != 0) {
    _internal_set_chairid(from._internal_chairid());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.money() != 0) {
    _internal_set_money(from._internal_money());
  }
  if (from.sex() != 0) {
    _internal_set_sex(from._internal_sex());
  }
  if (from.moneyvariation() != 0) {
    _internal_set_moneyvariation(from._internal_moneyvariation());
  }
  if (from.viplevel() != 0) {
    _internal_set_viplevel(from._internal_viplevel());
  }
  if (from.isvip() != 0) {
    _internal_set_isvip(from._internal_isvip());
  }
  if (from.background() != 0) {
    _internal_set_background(from._internal_background());
  }
  if (from.effect() != 0) {
    _internal_set_effect(from._internal_effect());
  }
}

void TablePlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TablePlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TablePlayerInfo::CopyFrom(const TablePlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TablePlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TablePlayerInfo::IsInitialized() const {
  return true;
}

void TablePlayerInfo::InternalSwap(TablePlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  head_.Swap(&other->head_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TablePlayerInfo, effect_)
      + sizeof(TablePlayerInfo::effect_)
      - PROTOBUF_FIELD_OFFSET(TablePlayerInfo, info_)>(
          reinterpret_cast<char*>(&info_),
          reinterpret_cast<char*>(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TablePlayerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCNotifyTowerTablePlayer::_Internal {
 public:
  static const ::TablePlayerInfo& info(const SCNotifyTowerTablePlayer* msg);
};

const ::TablePlayerInfo&
SCNotifyTowerTablePlayer::_Internal::info(const SCNotifyTowerTablePlayer* msg) {
  return *msg->info_;
}
SCNotifyTowerTablePlayer::SCNotifyTowerTablePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCNotifyTowerTablePlayer)
}
SCNotifyTowerTablePlayer::SCNotifyTowerTablePlayer(const SCNotifyTowerTablePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::TablePlayerInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  tableid_ = from.tableid_;
  // @@protoc_insertion_point(copy_constructor:SCNotifyTowerTablePlayer)
}

void SCNotifyTowerTablePlayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCNotifyTowerTablePlayer_JSBY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&tableid_) -
      reinterpret_cast<char*>(&info_)) + sizeof(tableid_));
}

SCNotifyTowerTablePlayer::~SCNotifyTowerTablePlayer() {
  // @@protoc_insertion_point(destructor:SCNotifyTowerTablePlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCNotifyTowerTablePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void SCNotifyTowerTablePlayer::ArenaDtor(void* object) {
  SCNotifyTowerTablePlayer* _this = reinterpret_cast< SCNotifyTowerTablePlayer* >(object);
  (void)_this;
}
void SCNotifyTowerTablePlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCNotifyTowerTablePlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCNotifyTowerTablePlayer& SCNotifyTowerTablePlayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCNotifyTowerTablePlayer_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCNotifyTowerTablePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:SCNotifyTowerTablePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  tableid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCNotifyTowerTablePlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TablePlayerInfo Info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 TableID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tableid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCNotifyTowerTablePlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCNotifyTowerTablePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TablePlayerInfo Info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  // int32 TableID = 2;
  if (this->tableid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_tableid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCNotifyTowerTablePlayer)
  return target;
}

size_t SCNotifyTowerTablePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCNotifyTowerTablePlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TablePlayerInfo Info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // int32 TableID = 2;
  if (this->tableid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tableid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCNotifyTowerTablePlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCNotifyTowerTablePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const SCNotifyTowerTablePlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCNotifyTowerTablePlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCNotifyTowerTablePlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCNotifyTowerTablePlayer)
    MergeFrom(*source);
  }
}

void SCNotifyTowerTablePlayer::MergeFrom(const SCNotifyTowerTablePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCNotifyTowerTablePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::TablePlayerInfo::MergeFrom(from._internal_info());
  }
  if (from.tableid() != 0) {
    _internal_set_tableid(from._internal_tableid());
  }
}

void SCNotifyTowerTablePlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCNotifyTowerTablePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCNotifyTowerTablePlayer::CopyFrom(const SCNotifyTowerTablePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCNotifyTowerTablePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCNotifyTowerTablePlayer::IsInitialized() const {
  return true;
}

void SCNotifyTowerTablePlayer::InternalSwap(SCNotifyTowerTablePlayer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCNotifyTowerTablePlayer, tableid_)
      + sizeof(SCNotifyTowerTablePlayer::tableid_)
      - PROTOBUF_FIELD_OFFSET(SCNotifyTowerTablePlayer, info_)>(
          reinterpret_cast<char*>(&info_),
          reinterpret_cast<char*>(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCNotifyTowerTablePlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCLeaveTowerTable::_Internal {
 public:
};

SCLeaveTowerTable::SCLeaveTowerTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCLeaveTowerTable)
}
SCLeaveTowerTable::SCLeaveTowerTable(const SCLeaveTowerTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isagainenter_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(isagainenter_));
  // @@protoc_insertion_point(copy_constructor:SCLeaveTowerTable)
}

void SCLeaveTowerTable::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isagainenter_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(isagainenter_));
}

SCLeaveTowerTable::~SCLeaveTowerTable() {
  // @@protoc_insertion_point(destructor:SCLeaveTowerTable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCLeaveTowerTable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCLeaveTowerTable::ArenaDtor(void* object) {
  SCLeaveTowerTable* _this = reinterpret_cast< SCLeaveTowerTable* >(object);
  (void)_this;
}
void SCLeaveTowerTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCLeaveTowerTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCLeaveTowerTable& SCLeaveTowerTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCLeaveTowerTable_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCLeaveTowerTable::Clear() {
// @@protoc_insertion_point(message_clear_start:SCLeaveTowerTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isagainenter_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(isagainenter_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCLeaveTowerTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 PlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool IsAgainEnter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isagainenter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCLeaveTowerTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCLeaveTowerTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PlayerId = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // bool IsAgainEnter = 2;
  if (this->isagainenter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isagainenter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCLeaveTowerTable)
  return target;
}

size_t SCLeaveTowerTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCLeaveTowerTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PlayerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  // bool IsAgainEnter = 2;
  if (this->isagainenter() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCLeaveTowerTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCLeaveTowerTable)
  GOOGLE_DCHECK_NE(&from, this);
  const SCLeaveTowerTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCLeaveTowerTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCLeaveTowerTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCLeaveTowerTable)
    MergeFrom(*source);
  }
}

void SCLeaveTowerTable::MergeFrom(const SCLeaveTowerTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCLeaveTowerTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.isagainenter() != 0) {
    _internal_set_isagainenter(from._internal_isagainenter());
  }
}

void SCLeaveTowerTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCLeaveTowerTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCLeaveTowerTable::CopyFrom(const SCLeaveTowerTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCLeaveTowerTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCLeaveTowerTable::IsInitialized() const {
  return true;
}

void SCLeaveTowerTable::InternalSwap(SCLeaveTowerTable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCLeaveTowerTable, isagainenter_)
      + sizeof(SCLeaveTowerTable::isagainenter_)
      - PROTOBUF_FIELD_OFFSET(SCLeaveTowerTable, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCLeaveTowerTable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TowerMonster::_Internal {
 public:
};

TowerMonster::TowerMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  buff_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TowerMonster)
}
TowerMonster::TowerMonster(const TowerMonster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      buff_(from.buff_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&position_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:TowerMonster)
}

void TowerMonster::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&position_)) + sizeof(level_));
}

TowerMonster::~TowerMonster() {
  // @@protoc_insertion_point(destructor:TowerMonster)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TowerMonster::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TowerMonster::ArenaDtor(void* object) {
  TowerMonster* _this = reinterpret_cast< TowerMonster* >(object);
  (void)_this;
}
void TowerMonster::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TowerMonster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TowerMonster& TowerMonster::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TowerMonster_JSBY_2eproto.base);
  return *internal_default_instance();
}


void TowerMonster::Clear() {
// @@protoc_insertion_point(message_clear_start:TowerMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buff_.Clear();
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&position_)) + sizeof(level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TowerMonster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ProcessTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          processtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ReadyTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          readytime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MonsterID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          monsterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 Buff = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_buff(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_buff(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool IsConnect = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          isconnect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TowerMonster::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TowerMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Position = 1;
  if (this->position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_position(), target);
  }

  // int32 ProcessTime = 2;
  if (this->processtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_processtime(), target);
  }

  // int32 ReadyTime = 3;
  if (this->readytime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_readytime(), target);
  }

  // int32 MonsterID = 4;
  if (this->monsterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_monsterid(), target);
  }

  // repeated int32 Buff = 5;
  {
    int byte_size = _buff_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_buff(), byte_size, target);
    }
  }

  // bool IsConnect = 6;
  if (this->isconnect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_isconnect(), target);
  }

  // int32 Level = 7;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TowerMonster)
  return target;
}

size_t TowerMonster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TowerMonster)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Buff = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->buff_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _buff_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 Position = 1;
  if (this->position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_position());
  }

  // int32 ProcessTime = 2;
  if (this->processtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_processtime());
  }

  // int32 ReadyTime = 3;
  if (this->readytime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_readytime());
  }

  // int32 MonsterID = 4;
  if (this->monsterid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_monsterid());
  }

  // bool IsConnect = 6;
  if (this->isconnect() != 0) {
    total_size += 1 + 1;
  }

  // int32 Level = 7;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TowerMonster::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TowerMonster)
  GOOGLE_DCHECK_NE(&from, this);
  const TowerMonster* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TowerMonster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TowerMonster)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TowerMonster)
    MergeFrom(*source);
  }
}

void TowerMonster::MergeFrom(const TowerMonster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TowerMonster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buff_.MergeFrom(from.buff_);
  if (from.position() != 0) {
    _internal_set_position(from._internal_position());
  }
  if (from.processtime() != 0) {
    _internal_set_processtime(from._internal_processtime());
  }
  if (from.readytime() != 0) {
    _internal_set_readytime(from._internal_readytime());
  }
  if (from.monsterid() != 0) {
    _internal_set_monsterid(from._internal_monsterid());
  }
  if (from.isconnect() != 0) {
    _internal_set_isconnect(from._internal_isconnect());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void TowerMonster::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TowerMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TowerMonster::CopyFrom(const TowerMonster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TowerMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TowerMonster::IsInitialized() const {
  return true;
}

void TowerMonster::InternalSwap(TowerMonster* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  buff_.InternalSwap(&other->buff_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TowerMonster, level_)
      + sizeof(TowerMonster::level_)
      - PROTOBUF_FIELD_OFFSET(TowerMonster, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TowerMonster::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChannelTowerMonster::_Internal {
 public:
  static const ::TowerMonster& channelinfo(const ChannelTowerMonster* msg);
};

const ::TowerMonster&
ChannelTowerMonster::_Internal::channelinfo(const ChannelTowerMonster* msg) {
  return *msg->channelinfo_;
}
ChannelTowerMonster::ChannelTowerMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChannelTowerMonster)
}
ChannelTowerMonster::ChannelTowerMonster(const ChannelTowerMonster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_channelinfo()) {
    channelinfo_ = new ::TowerMonster(*from.channelinfo_);
  } else {
    channelinfo_ = nullptr;
  }
  channelid_ = from.channelid_;
  // @@protoc_insertion_point(copy_constructor:ChannelTowerMonster)
}

void ChannelTowerMonster::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelTowerMonster_JSBY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&channelinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&channelid_) -
      reinterpret_cast<char*>(&channelinfo_)) + sizeof(channelid_));
}

ChannelTowerMonster::~ChannelTowerMonster() {
  // @@protoc_insertion_point(destructor:ChannelTowerMonster)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelTowerMonster::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete channelinfo_;
}

void ChannelTowerMonster::ArenaDtor(void* object) {
  ChannelTowerMonster* _this = reinterpret_cast< ChannelTowerMonster* >(object);
  (void)_this;
}
void ChannelTowerMonster::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelTowerMonster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelTowerMonster& ChannelTowerMonster::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelTowerMonster_JSBY_2eproto.base);
  return *internal_default_instance();
}


void ChannelTowerMonster::Clear() {
// @@protoc_insertion_point(message_clear_start:ChannelTowerMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && channelinfo_ != nullptr) {
    delete channelinfo_;
  }
  channelinfo_ = nullptr;
  channelid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelTowerMonster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ChannelId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          channelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TowerMonster ChannelInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channelinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelTowerMonster::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChannelTowerMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ChannelId = 1;
  if (this->channelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_channelid(), target);
  }

  // .TowerMonster ChannelInfo = 2;
  if (this->has_channelinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::channelinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChannelTowerMonster)
  return target;
}

size_t ChannelTowerMonster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChannelTowerMonster)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TowerMonster ChannelInfo = 2;
  if (this->has_channelinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channelinfo_);
  }

  // int32 ChannelId = 1;
  if (this->channelid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channelid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelTowerMonster::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChannelTowerMonster)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelTowerMonster* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelTowerMonster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChannelTowerMonster)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChannelTowerMonster)
    MergeFrom(*source);
  }
}

void ChannelTowerMonster::MergeFrom(const ChannelTowerMonster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChannelTowerMonster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_channelinfo()) {
    _internal_mutable_channelinfo()->::TowerMonster::MergeFrom(from._internal_channelinfo());
  }
  if (from.channelid() != 0) {
    _internal_set_channelid(from._internal_channelid());
  }
}

void ChannelTowerMonster::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChannelTowerMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelTowerMonster::CopyFrom(const ChannelTowerMonster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChannelTowerMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelTowerMonster::IsInitialized() const {
  return true;
}

void ChannelTowerMonster::InternalSwap(ChannelTowerMonster* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelTowerMonster, channelid_)
      + sizeof(ChannelTowerMonster::channelid_)
      - PROTOBUF_FIELD_OFFSET(ChannelTowerMonster, channelinfo_)>(
          reinterpret_cast<char*>(&channelinfo_),
          reinterpret_cast<char*>(&other->channelinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelTowerMonster::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGetTowerMonster::_Internal {
 public:
};

SCGetTowerMonster::SCGetTowerMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCGetTowerMonster)
}
SCGetTowerMonster::SCGetTowerMonster(const SCGetTowerMonster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reqplayerid_ = from.reqplayerid_;
  // @@protoc_insertion_point(copy_constructor:SCGetTowerMonster)
}

void SCGetTowerMonster::SharedCtor() {
  reqplayerid_ = 0;
}

SCGetTowerMonster::~SCGetTowerMonster() {
  // @@protoc_insertion_point(destructor:SCGetTowerMonster)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGetTowerMonster::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCGetTowerMonster::ArenaDtor(void* object) {
  SCGetTowerMonster* _this = reinterpret_cast< SCGetTowerMonster* >(object);
  (void)_this;
}
void SCGetTowerMonster::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGetTowerMonster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGetTowerMonster& SCGetTowerMonster::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGetTowerMonster_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCGetTowerMonster::Clear() {
// @@protoc_insertion_point(message_clear_start:SCGetTowerMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reqplayerid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGetTowerMonster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ReqPlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reqplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGetTowerMonster::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCGetTowerMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ReqPlayerId = 1;
  if (this->reqplayerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_reqplayerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCGetTowerMonster)
  return target;
}

size_t SCGetTowerMonster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCGetTowerMonster)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ReqPlayerId = 1;
  if (this->reqplayerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reqplayerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGetTowerMonster::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCGetTowerMonster)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGetTowerMonster* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGetTowerMonster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCGetTowerMonster)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCGetTowerMonster)
    MergeFrom(*source);
  }
}

void SCGetTowerMonster::MergeFrom(const SCGetTowerMonster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCGetTowerMonster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reqplayerid() != 0) {
    _internal_set_reqplayerid(from._internal_reqplayerid());
  }
}

void SCGetTowerMonster::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCGetTowerMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGetTowerMonster::CopyFrom(const SCGetTowerMonster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCGetTowerMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGetTowerMonster::IsInitialized() const {
  return true;
}

void SCGetTowerMonster::InternalSwap(SCGetTowerMonster* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(reqplayerid_, other->reqplayerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGetTowerMonster::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSGetTowerMonster::_Internal {
 public:
  static const ::ChannelTowerMonster& info(const CSGetTowerMonster* msg);
};

const ::ChannelTowerMonster&
CSGetTowerMonster::_Internal::info(const CSGetTowerMonster* msg) {
  return *msg->info_;
}
CSGetTowerMonster::CSGetTowerMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSGetTowerMonster)
}
CSGetTowerMonster::CSGetTowerMonster(const CSGetTowerMonster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::ChannelTowerMonster(*from.info_);
  } else {
    info_ = nullptr;
  }
  reqplayerid_ = from.reqplayerid_;
  // @@protoc_insertion_point(copy_constructor:CSGetTowerMonster)
}

void CSGetTowerMonster::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSGetTowerMonster_JSBY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&reqplayerid_) -
      reinterpret_cast<char*>(&info_)) + sizeof(reqplayerid_));
}

CSGetTowerMonster::~CSGetTowerMonster() {
  // @@protoc_insertion_point(destructor:CSGetTowerMonster)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSGetTowerMonster::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void CSGetTowerMonster::ArenaDtor(void* object) {
  CSGetTowerMonster* _this = reinterpret_cast< CSGetTowerMonster* >(object);
  (void)_this;
}
void CSGetTowerMonster::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSGetTowerMonster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSGetTowerMonster& CSGetTowerMonster::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSGetTowerMonster_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSGetTowerMonster::Clear() {
// @@protoc_insertion_point(message_clear_start:CSGetTowerMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  reqplayerid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSGetTowerMonster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ReqPlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reqplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ChannelTowerMonster Info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSGetTowerMonster::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSGetTowerMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ReqPlayerId = 1;
  if (this->reqplayerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_reqplayerid(), target);
  }

  // .ChannelTowerMonster Info = 2;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSGetTowerMonster)
  return target;
}

size_t CSGetTowerMonster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSGetTowerMonster)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChannelTowerMonster Info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // int32 ReqPlayerId = 1;
  if (this->reqplayerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reqplayerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSGetTowerMonster::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSGetTowerMonster)
  GOOGLE_DCHECK_NE(&from, this);
  const CSGetTowerMonster* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSGetTowerMonster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSGetTowerMonster)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSGetTowerMonster)
    MergeFrom(*source);
  }
}

void CSGetTowerMonster::MergeFrom(const CSGetTowerMonster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSGetTowerMonster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::ChannelTowerMonster::MergeFrom(from._internal_info());
  }
  if (from.reqplayerid() != 0) {
    _internal_set_reqplayerid(from._internal_reqplayerid());
  }
}

void CSGetTowerMonster::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSGetTowerMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetTowerMonster::CopyFrom(const CSGetTowerMonster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSGetTowerMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetTowerMonster::IsInitialized() const {
  return true;
}

void CSGetTowerMonster::InternalSwap(CSGetTowerMonster* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSGetTowerMonster, reqplayerid_)
      + sizeof(CSGetTowerMonster::reqplayerid_)
      - PROTOBUF_FIELD_OFFSET(CSGetTowerMonster, info_)>(
          reinterpret_cast<char*>(&info_),
          reinterpret_cast<char*>(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSGetTowerMonster::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSyncGetTowerMonster::_Internal {
 public:
  static const ::ChannelTowerMonster& info(const SCSyncGetTowerMonster* msg);
};

const ::ChannelTowerMonster&
SCSyncGetTowerMonster::_Internal::info(const SCSyncGetTowerMonster* msg) {
  return *msg->info_;
}
SCSyncGetTowerMonster::SCSyncGetTowerMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCSyncGetTowerMonster)
}
SCSyncGetTowerMonster::SCSyncGetTowerMonster(const SCSyncGetTowerMonster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::ChannelTowerMonster(*from.info_);
  } else {
    info_ = nullptr;
  }
  tableid_ = from.tableid_;
  // @@protoc_insertion_point(copy_constructor:SCSyncGetTowerMonster)
}

void SCSyncGetTowerMonster::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCSyncGetTowerMonster_JSBY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&tableid_) -
      reinterpret_cast<char*>(&info_)) + sizeof(tableid_));
}

SCSyncGetTowerMonster::~SCSyncGetTowerMonster() {
  // @@protoc_insertion_point(destructor:SCSyncGetTowerMonster)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSyncGetTowerMonster::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void SCSyncGetTowerMonster::ArenaDtor(void* object) {
  SCSyncGetTowerMonster* _this = reinterpret_cast< SCSyncGetTowerMonster* >(object);
  (void)_this;
}
void SCSyncGetTowerMonster::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSyncGetTowerMonster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSyncGetTowerMonster& SCSyncGetTowerMonster::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSyncGetTowerMonster_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCSyncGetTowerMonster::Clear() {
// @@protoc_insertion_point(message_clear_start:SCSyncGetTowerMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  tableid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSyncGetTowerMonster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 TableID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tableid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ChannelTowerMonster Info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSyncGetTowerMonster::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCSyncGetTowerMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 TableID = 1;
  if (this->tableid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tableid(), target);
  }

  // .ChannelTowerMonster Info = 2;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCSyncGetTowerMonster)
  return target;
}

size_t SCSyncGetTowerMonster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCSyncGetTowerMonster)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChannelTowerMonster Info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // int32 TableID = 1;
  if (this->tableid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tableid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSyncGetTowerMonster::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCSyncGetTowerMonster)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSyncGetTowerMonster* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSyncGetTowerMonster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCSyncGetTowerMonster)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCSyncGetTowerMonster)
    MergeFrom(*source);
  }
}

void SCSyncGetTowerMonster::MergeFrom(const SCSyncGetTowerMonster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCSyncGetTowerMonster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::ChannelTowerMonster::MergeFrom(from._internal_info());
  }
  if (from.tableid() != 0) {
    _internal_set_tableid(from._internal_tableid());
  }
}

void SCSyncGetTowerMonster::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCSyncGetTowerMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSyncGetTowerMonster::CopyFrom(const SCSyncGetTowerMonster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCSyncGetTowerMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSyncGetTowerMonster::IsInitialized() const {
  return true;
}

void SCSyncGetTowerMonster::InternalSwap(SCSyncGetTowerMonster* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCSyncGetTowerMonster, tableid_)
      + sizeof(SCSyncGetTowerMonster::tableid_)
      - PROTOBUF_FIELD_OFFSET(SCSyncGetTowerMonster, info_)>(
          reinterpret_cast<char*>(&info_),
          reinterpret_cast<char*>(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSyncGetTowerMonster::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCTowerMonster::_Internal {
 public:
  static const ::ChannelTowerMonster& info(const SCTowerMonster* msg);
};

const ::ChannelTowerMonster&
SCTowerMonster::_Internal::info(const SCTowerMonster* msg) {
  return *msg->info_;
}
SCTowerMonster::SCTowerMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCTowerMonster)
}
SCTowerMonster::SCTowerMonster(const SCTowerMonster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::ChannelTowerMonster(*from.info_);
  } else {
    info_ = nullptr;
  }
  tableid_ = from.tableid_;
  // @@protoc_insertion_point(copy_constructor:SCTowerMonster)
}

void SCTowerMonster::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCTowerMonster_JSBY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&tableid_) -
      reinterpret_cast<char*>(&info_)) + sizeof(tableid_));
}

SCTowerMonster::~SCTowerMonster() {
  // @@protoc_insertion_point(destructor:SCTowerMonster)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCTowerMonster::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void SCTowerMonster::ArenaDtor(void* object) {
  SCTowerMonster* _this = reinterpret_cast< SCTowerMonster* >(object);
  (void)_this;
}
void SCTowerMonster::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCTowerMonster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCTowerMonster& SCTowerMonster::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCTowerMonster_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCTowerMonster::Clear() {
// @@protoc_insertion_point(message_clear_start:SCTowerMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  tableid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCTowerMonster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 TableID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tableid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ChannelTowerMonster Info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCTowerMonster::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCTowerMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 TableID = 1;
  if (this->tableid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tableid(), target);
  }

  // .ChannelTowerMonster Info = 2;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCTowerMonster)
  return target;
}

size_t SCTowerMonster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCTowerMonster)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChannelTowerMonster Info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // int32 TableID = 1;
  if (this->tableid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tableid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCTowerMonster::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCTowerMonster)
  GOOGLE_DCHECK_NE(&from, this);
  const SCTowerMonster* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCTowerMonster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCTowerMonster)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCTowerMonster)
    MergeFrom(*source);
  }
}

void SCTowerMonster::MergeFrom(const SCTowerMonster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCTowerMonster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::ChannelTowerMonster::MergeFrom(from._internal_info());
  }
  if (from.tableid() != 0) {
    _internal_set_tableid(from._internal_tableid());
  }
}

void SCTowerMonster::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCTowerMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCTowerMonster::CopyFrom(const SCTowerMonster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCTowerMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCTowerMonster::IsInitialized() const {
  return true;
}

void SCTowerMonster::InternalSwap(SCTowerMonster* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCTowerMonster, tableid_)
      + sizeof(SCTowerMonster::tableid_)
      - PROTOBUF_FIELD_OFFSET(SCTowerMonster, info_)>(
          reinterpret_cast<char*>(&info_),
          reinterpret_cast<char*>(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCTowerMonster::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSTowerHeroAtkInfo::_Internal {
 public:
  static const ::TowerHeroAtkInfo& info(const CSTowerHeroAtkInfo* msg);
};

const ::TowerHeroAtkInfo&
CSTowerHeroAtkInfo::_Internal::info(const CSTowerHeroAtkInfo* msg) {
  return *msg->info_;
}
CSTowerHeroAtkInfo::CSTowerHeroAtkInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSTowerHeroAtkInfo)
}
CSTowerHeroAtkInfo::CSTowerHeroAtkInfo(const CSTowerHeroAtkInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::TowerHeroAtkInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CSTowerHeroAtkInfo)
}

void CSTowerHeroAtkInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSTowerHeroAtkInfo_JSBY_2eproto.base);
  info_ = nullptr;
}

CSTowerHeroAtkInfo::~CSTowerHeroAtkInfo() {
  // @@protoc_insertion_point(destructor:CSTowerHeroAtkInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSTowerHeroAtkInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void CSTowerHeroAtkInfo::ArenaDtor(void* object) {
  CSTowerHeroAtkInfo* _this = reinterpret_cast< CSTowerHeroAtkInfo* >(object);
  (void)_this;
}
void CSTowerHeroAtkInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSTowerHeroAtkInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSTowerHeroAtkInfo& CSTowerHeroAtkInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSTowerHeroAtkInfo_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSTowerHeroAtkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CSTowerHeroAtkInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSTowerHeroAtkInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TowerHeroAtkInfo Info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSTowerHeroAtkInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSTowerHeroAtkInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TowerHeroAtkInfo Info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSTowerHeroAtkInfo)
  return target;
}

size_t CSTowerHeroAtkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSTowerHeroAtkInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TowerHeroAtkInfo Info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSTowerHeroAtkInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSTowerHeroAtkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSTowerHeroAtkInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSTowerHeroAtkInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSTowerHeroAtkInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSTowerHeroAtkInfo)
    MergeFrom(*source);
  }
}

void CSTowerHeroAtkInfo::MergeFrom(const CSTowerHeroAtkInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSTowerHeroAtkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::TowerHeroAtkInfo::MergeFrom(from._internal_info());
  }
}

void CSTowerHeroAtkInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSTowerHeroAtkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTowerHeroAtkInfo::CopyFrom(const CSTowerHeroAtkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSTowerHeroAtkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTowerHeroAtkInfo::IsInitialized() const {
  return true;
}

void CSTowerHeroAtkInfo::InternalSwap(CSTowerHeroAtkInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSTowerHeroAtkInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCTowerHeroAtkInfo::_Internal {
 public:
  static const ::TowerHeroAtkInfo& info(const SCTowerHeroAtkInfo* msg);
};

const ::TowerHeroAtkInfo&
SCTowerHeroAtkInfo::_Internal::info(const SCTowerHeroAtkInfo* msg) {
  return *msg->info_;
}
SCTowerHeroAtkInfo::SCTowerHeroAtkInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCTowerHeroAtkInfo)
}
SCTowerHeroAtkInfo::SCTowerHeroAtkInfo(const SCTowerHeroAtkInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::TowerHeroAtkInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SCTowerHeroAtkInfo)
}

void SCTowerHeroAtkInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCTowerHeroAtkInfo_JSBY_2eproto.base);
  info_ = nullptr;
}

SCTowerHeroAtkInfo::~SCTowerHeroAtkInfo() {
  // @@protoc_insertion_point(destructor:SCTowerHeroAtkInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCTowerHeroAtkInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void SCTowerHeroAtkInfo::ArenaDtor(void* object) {
  SCTowerHeroAtkInfo* _this = reinterpret_cast< SCTowerHeroAtkInfo* >(object);
  (void)_this;
}
void SCTowerHeroAtkInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCTowerHeroAtkInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCTowerHeroAtkInfo& SCTowerHeroAtkInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCTowerHeroAtkInfo_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCTowerHeroAtkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SCTowerHeroAtkInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCTowerHeroAtkInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TowerHeroAtkInfo Info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCTowerHeroAtkInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCTowerHeroAtkInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TowerHeroAtkInfo Info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCTowerHeroAtkInfo)
  return target;
}

size_t SCTowerHeroAtkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCTowerHeroAtkInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TowerHeroAtkInfo Info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCTowerHeroAtkInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCTowerHeroAtkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCTowerHeroAtkInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCTowerHeroAtkInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCTowerHeroAtkInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCTowerHeroAtkInfo)
    MergeFrom(*source);
  }
}

void SCTowerHeroAtkInfo::MergeFrom(const SCTowerHeroAtkInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCTowerHeroAtkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::TowerHeroAtkInfo::MergeFrom(from._internal_info());
  }
}

void SCTowerHeroAtkInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCTowerHeroAtkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCTowerHeroAtkInfo::CopyFrom(const SCTowerHeroAtkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCTowerHeroAtkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCTowerHeroAtkInfo::IsInitialized() const {
  return true;
}

void SCTowerHeroAtkInfo::InternalSwap(SCTowerHeroAtkInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCTowerHeroAtkInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSTowerUpdateHero::_Internal {
 public:
  static const ::TowerHeroInfo& info(const CSTowerUpdateHero* msg);
};

const ::TowerHeroInfo&
CSTowerUpdateHero::_Internal::info(const CSTowerUpdateHero* msg) {
  return *msg->info_;
}
CSTowerUpdateHero::CSTowerUpdateHero(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSTowerUpdateHero)
}
CSTowerUpdateHero::CSTowerUpdateHero(const CSTowerUpdateHero& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::TowerHeroInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  leave_ = from.leave_;
  // @@protoc_insertion_point(copy_constructor:CSTowerUpdateHero)
}

void CSTowerUpdateHero::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSTowerUpdateHero_JSBY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&leave_) -
      reinterpret_cast<char*>(&info_)) + sizeof(leave_));
}

CSTowerUpdateHero::~CSTowerUpdateHero() {
  // @@protoc_insertion_point(destructor:CSTowerUpdateHero)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSTowerUpdateHero::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void CSTowerUpdateHero::ArenaDtor(void* object) {
  CSTowerUpdateHero* _this = reinterpret_cast< CSTowerUpdateHero* >(object);
  (void)_this;
}
void CSTowerUpdateHero::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSTowerUpdateHero::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSTowerUpdateHero& CSTowerUpdateHero::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSTowerUpdateHero_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSTowerUpdateHero::Clear() {
// @@protoc_insertion_point(message_clear_start:CSTowerUpdateHero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  leave_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSTowerUpdateHero::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TowerHeroInfo Info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Leave = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          leave_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSTowerUpdateHero::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSTowerUpdateHero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TowerHeroInfo Info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  // bool Leave = 2;
  if (this->leave() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_leave(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSTowerUpdateHero)
  return target;
}

size_t CSTowerUpdateHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSTowerUpdateHero)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TowerHeroInfo Info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // bool Leave = 2;
  if (this->leave() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSTowerUpdateHero::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSTowerUpdateHero)
  GOOGLE_DCHECK_NE(&from, this);
  const CSTowerUpdateHero* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSTowerUpdateHero>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSTowerUpdateHero)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSTowerUpdateHero)
    MergeFrom(*source);
  }
}

void CSTowerUpdateHero::MergeFrom(const CSTowerUpdateHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSTowerUpdateHero)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::TowerHeroInfo::MergeFrom(from._internal_info());
  }
  if (from.leave() != 0) {
    _internal_set_leave(from._internal_leave());
  }
}

void CSTowerUpdateHero::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSTowerUpdateHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTowerUpdateHero::CopyFrom(const CSTowerUpdateHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSTowerUpdateHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTowerUpdateHero::IsInitialized() const {
  return true;
}

void CSTowerUpdateHero::InternalSwap(CSTowerUpdateHero* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSTowerUpdateHero, leave_)
      + sizeof(CSTowerUpdateHero::leave_)
      - PROTOBUF_FIELD_OFFSET(CSTowerUpdateHero, info_)>(
          reinterpret_cast<char*>(&info_),
          reinterpret_cast<char*>(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSTowerUpdateHero::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCTowerUpdateHero::_Internal {
 public:
};

SCTowerUpdateHero::SCTowerUpdateHero(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCTowerUpdateHero)
}
SCTowerUpdateHero::SCTowerUpdateHero(const SCTowerUpdateHero& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uniqueid_ = from.uniqueid_;
  // @@protoc_insertion_point(copy_constructor:SCTowerUpdateHero)
}

void SCTowerUpdateHero::SharedCtor() {
  uniqueid_ = 0;
}

SCTowerUpdateHero::~SCTowerUpdateHero() {
  // @@protoc_insertion_point(destructor:SCTowerUpdateHero)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCTowerUpdateHero::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCTowerUpdateHero::ArenaDtor(void* object) {
  SCTowerUpdateHero* _this = reinterpret_cast< SCTowerUpdateHero* >(object);
  (void)_this;
}
void SCTowerUpdateHero::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCTowerUpdateHero::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCTowerUpdateHero& SCTowerUpdateHero::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCTowerUpdateHero_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCTowerUpdateHero::Clear() {
// @@protoc_insertion_point(message_clear_start:SCTowerUpdateHero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uniqueid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCTowerUpdateHero::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 UniqueId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uniqueid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCTowerUpdateHero::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCTowerUpdateHero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 UniqueId = 1;
  if (this->uniqueid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uniqueid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCTowerUpdateHero)
  return target;
}

size_t SCTowerUpdateHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCTowerUpdateHero)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 UniqueId = 1;
  if (this->uniqueid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uniqueid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCTowerUpdateHero::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCTowerUpdateHero)
  GOOGLE_DCHECK_NE(&from, this);
  const SCTowerUpdateHero* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCTowerUpdateHero>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCTowerUpdateHero)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCTowerUpdateHero)
    MergeFrom(*source);
  }
}

void SCTowerUpdateHero::MergeFrom(const SCTowerUpdateHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCTowerUpdateHero)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uniqueid() != 0) {
    _internal_set_uniqueid(from._internal_uniqueid());
  }
}

void SCTowerUpdateHero::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCTowerUpdateHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCTowerUpdateHero::CopyFrom(const SCTowerUpdateHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCTowerUpdateHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCTowerUpdateHero::IsInitialized() const {
  return true;
}

void SCTowerUpdateHero::InternalSwap(SCTowerUpdateHero* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(uniqueid_, other->uniqueid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCTowerUpdateHero::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPushTowerUpdateHero::_Internal {
 public:
  static const ::TowerHeroInfo& info(const SCPushTowerUpdateHero* msg);
};

const ::TowerHeroInfo&
SCPushTowerUpdateHero::_Internal::info(const SCPushTowerUpdateHero* msg) {
  return *msg->info_;
}
SCPushTowerUpdateHero::SCPushTowerUpdateHero(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCPushTowerUpdateHero)
}
SCPushTowerUpdateHero::SCPushTowerUpdateHero(const SCPushTowerUpdateHero& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::TowerHeroInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  ::memcpy(&reqplayerid_, &from.reqplayerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&leave_) -
    reinterpret_cast<char*>(&reqplayerid_)) + sizeof(leave_));
  // @@protoc_insertion_point(copy_constructor:SCPushTowerUpdateHero)
}

void SCPushTowerUpdateHero::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCPushTowerUpdateHero_JSBY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&leave_) -
      reinterpret_cast<char*>(&info_)) + sizeof(leave_));
}

SCPushTowerUpdateHero::~SCPushTowerUpdateHero() {
  // @@protoc_insertion_point(destructor:SCPushTowerUpdateHero)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPushTowerUpdateHero::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void SCPushTowerUpdateHero::ArenaDtor(void* object) {
  SCPushTowerUpdateHero* _this = reinterpret_cast< SCPushTowerUpdateHero* >(object);
  (void)_this;
}
void SCPushTowerUpdateHero::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPushTowerUpdateHero::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPushTowerUpdateHero& SCPushTowerUpdateHero::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPushTowerUpdateHero_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCPushTowerUpdateHero::Clear() {
// @@protoc_insertion_point(message_clear_start:SCPushTowerUpdateHero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  ::memset(&reqplayerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leave_) -
      reinterpret_cast<char*>(&reqplayerid_)) + sizeof(leave_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPushTowerUpdateHero::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TowerHeroInfo Info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ReqPlayerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          reqplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Leave = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          leave_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPushTowerUpdateHero::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCPushTowerUpdateHero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TowerHeroInfo Info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  // int32 ReqPlayerId = 2;
  if (this->reqplayerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_reqplayerid(), target);
  }

  // bool Leave = 3;
  if (this->leave() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_leave(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCPushTowerUpdateHero)
  return target;
}

size_t SCPushTowerUpdateHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCPushTowerUpdateHero)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TowerHeroInfo Info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // int32 ReqPlayerId = 2;
  if (this->reqplayerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reqplayerid());
  }

  // bool Leave = 3;
  if (this->leave() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPushTowerUpdateHero::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCPushTowerUpdateHero)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPushTowerUpdateHero* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPushTowerUpdateHero>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCPushTowerUpdateHero)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCPushTowerUpdateHero)
    MergeFrom(*source);
  }
}

void SCPushTowerUpdateHero::MergeFrom(const SCPushTowerUpdateHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCPushTowerUpdateHero)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::TowerHeroInfo::MergeFrom(from._internal_info());
  }
  if (from.reqplayerid() != 0) {
    _internal_set_reqplayerid(from._internal_reqplayerid());
  }
  if (from.leave() != 0) {
    _internal_set_leave(from._internal_leave());
  }
}

void SCPushTowerUpdateHero::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCPushTowerUpdateHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPushTowerUpdateHero::CopyFrom(const SCPushTowerUpdateHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCPushTowerUpdateHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPushTowerUpdateHero::IsInitialized() const {
  return true;
}

void SCPushTowerUpdateHero::InternalSwap(SCPushTowerUpdateHero* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCPushTowerUpdateHero, leave_)
      + sizeof(SCPushTowerUpdateHero::leave_)
      - PROTOBUF_FIELD_OFFSET(SCPushTowerUpdateHero, info_)>(
          reinterpret_cast<char*>(&info_),
          reinterpret_cast<char*>(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPushTowerUpdateHero::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LockTargetInfo::_Internal {
 public:
};

LockTargetInfo::LockTargetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LockTargetInfo)
}
LockTargetInfo::LockTargetInfo(const LockTargetInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&positionid_, &from.positionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&targetpositionid_) -
    reinterpret_cast<char*>(&positionid_)) + sizeof(targetpositionid_));
  // @@protoc_insertion_point(copy_constructor:LockTargetInfo)
}

void LockTargetInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&positionid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&targetpositionid_) -
      reinterpret_cast<char*>(&positionid_)) + sizeof(targetpositionid_));
}

LockTargetInfo::~LockTargetInfo() {
  // @@protoc_insertion_point(destructor:LockTargetInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LockTargetInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LockTargetInfo::ArenaDtor(void* object) {
  LockTargetInfo* _this = reinterpret_cast< LockTargetInfo* >(object);
  (void)_this;
}
void LockTargetInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LockTargetInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LockTargetInfo& LockTargetInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LockTargetInfo_JSBY_2eproto.base);
  return *internal_default_instance();
}


void LockTargetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:LockTargetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&positionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&targetpositionid_) -
      reinterpret_cast<char*>(&positionid_)) + sizeof(targetpositionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LockTargetInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 PositionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          positionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 TargetPositionId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          targetpositionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LockTargetInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LockTargetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PositionId = 1;
  if (this->positionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_positionid(), target);
  }

  // int32 TargetPositionId = 2;
  if (this->targetpositionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_targetpositionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LockTargetInfo)
  return target;
}

size_t LockTargetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LockTargetInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PositionId = 1;
  if (this->positionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_positionid());
  }

  // int32 TargetPositionId = 2;
  if (this->targetpositionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_targetpositionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LockTargetInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LockTargetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LockTargetInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LockTargetInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LockTargetInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LockTargetInfo)
    MergeFrom(*source);
  }
}

void LockTargetInfo::MergeFrom(const LockTargetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LockTargetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.positionid() != 0) {
    _internal_set_positionid(from._internal_positionid());
  }
  if (from.targetpositionid() != 0) {
    _internal_set_targetpositionid(from._internal_targetpositionid());
  }
}

void LockTargetInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LockTargetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockTargetInfo::CopyFrom(const LockTargetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LockTargetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockTargetInfo::IsInitialized() const {
  return true;
}

void LockTargetInfo::InternalSwap(LockTargetInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LockTargetInfo, targetpositionid_)
      + sizeof(LockTargetInfo::targetpositionid_)
      - PROTOBUF_FIELD_OFFSET(LockTargetInfo, positionid_)>(
          reinterpret_cast<char*>(&positionid_),
          reinterpret_cast<char*>(&other->positionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LockTargetInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSTowerPlayerLockTarget::_Internal {
 public:
  static const ::LockTargetInfo& lockinfo(const CSTowerPlayerLockTarget* msg);
};

const ::LockTargetInfo&
CSTowerPlayerLockTarget::_Internal::lockinfo(const CSTowerPlayerLockTarget* msg) {
  return *msg->lockinfo_;
}
CSTowerPlayerLockTarget::CSTowerPlayerLockTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSTowerPlayerLockTarget)
}
CSTowerPlayerLockTarget::CSTowerPlayerLockTarget(const CSTowerPlayerLockTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lockinfo()) {
    lockinfo_ = new ::LockTargetInfo(*from.lockinfo_);
  } else {
    lockinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CSTowerPlayerLockTarget)
}

void CSTowerPlayerLockTarget::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSTowerPlayerLockTarget_JSBY_2eproto.base);
  lockinfo_ = nullptr;
}

CSTowerPlayerLockTarget::~CSTowerPlayerLockTarget() {
  // @@protoc_insertion_point(destructor:CSTowerPlayerLockTarget)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSTowerPlayerLockTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete lockinfo_;
}

void CSTowerPlayerLockTarget::ArenaDtor(void* object) {
  CSTowerPlayerLockTarget* _this = reinterpret_cast< CSTowerPlayerLockTarget* >(object);
  (void)_this;
}
void CSTowerPlayerLockTarget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSTowerPlayerLockTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSTowerPlayerLockTarget& CSTowerPlayerLockTarget::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSTowerPlayerLockTarget_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSTowerPlayerLockTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:CSTowerPlayerLockTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && lockinfo_ != nullptr) {
    delete lockinfo_;
  }
  lockinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSTowerPlayerLockTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .LockTargetInfo LockInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lockinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSTowerPlayerLockTarget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSTowerPlayerLockTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LockTargetInfo LockInfo = 1;
  if (this->has_lockinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lockinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSTowerPlayerLockTarget)
  return target;
}

size_t CSTowerPlayerLockTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSTowerPlayerLockTarget)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LockTargetInfo LockInfo = 1;
  if (this->has_lockinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lockinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSTowerPlayerLockTarget::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSTowerPlayerLockTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const CSTowerPlayerLockTarget* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSTowerPlayerLockTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSTowerPlayerLockTarget)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSTowerPlayerLockTarget)
    MergeFrom(*source);
  }
}

void CSTowerPlayerLockTarget::MergeFrom(const CSTowerPlayerLockTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSTowerPlayerLockTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lockinfo()) {
    _internal_mutable_lockinfo()->::LockTargetInfo::MergeFrom(from._internal_lockinfo());
  }
}

void CSTowerPlayerLockTarget::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSTowerPlayerLockTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTowerPlayerLockTarget::CopyFrom(const CSTowerPlayerLockTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSTowerPlayerLockTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTowerPlayerLockTarget::IsInitialized() const {
  return true;
}

void CSTowerPlayerLockTarget::InternalSwap(CSTowerPlayerLockTarget* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(lockinfo_, other->lockinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSTowerPlayerLockTarget::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCTowerPlayerLockTarget::_Internal {
 public:
  static const ::LockTargetInfo& lockinfo(const SCTowerPlayerLockTarget* msg);
};

const ::LockTargetInfo&
SCTowerPlayerLockTarget::_Internal::lockinfo(const SCTowerPlayerLockTarget* msg) {
  return *msg->lockinfo_;
}
SCTowerPlayerLockTarget::SCTowerPlayerLockTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCTowerPlayerLockTarget)
}
SCTowerPlayerLockTarget::SCTowerPlayerLockTarget(const SCTowerPlayerLockTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lockinfo()) {
    lockinfo_ = new ::LockTargetInfo(*from.lockinfo_);
  } else {
    lockinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SCTowerPlayerLockTarget)
}

void SCTowerPlayerLockTarget::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCTowerPlayerLockTarget_JSBY_2eproto.base);
  lockinfo_ = nullptr;
}

SCTowerPlayerLockTarget::~SCTowerPlayerLockTarget() {
  // @@protoc_insertion_point(destructor:SCTowerPlayerLockTarget)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCTowerPlayerLockTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete lockinfo_;
}

void SCTowerPlayerLockTarget::ArenaDtor(void* object) {
  SCTowerPlayerLockTarget* _this = reinterpret_cast< SCTowerPlayerLockTarget* >(object);
  (void)_this;
}
void SCTowerPlayerLockTarget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCTowerPlayerLockTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCTowerPlayerLockTarget& SCTowerPlayerLockTarget::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCTowerPlayerLockTarget_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCTowerPlayerLockTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:SCTowerPlayerLockTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && lockinfo_ != nullptr) {
    delete lockinfo_;
  }
  lockinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCTowerPlayerLockTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .LockTargetInfo LockInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lockinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCTowerPlayerLockTarget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCTowerPlayerLockTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LockTargetInfo LockInfo = 1;
  if (this->has_lockinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lockinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCTowerPlayerLockTarget)
  return target;
}

size_t SCTowerPlayerLockTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCTowerPlayerLockTarget)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LockTargetInfo LockInfo = 1;
  if (this->has_lockinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lockinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCTowerPlayerLockTarget::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCTowerPlayerLockTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const SCTowerPlayerLockTarget* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCTowerPlayerLockTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCTowerPlayerLockTarget)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCTowerPlayerLockTarget)
    MergeFrom(*source);
  }
}

void SCTowerPlayerLockTarget::MergeFrom(const SCTowerPlayerLockTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCTowerPlayerLockTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lockinfo()) {
    _internal_mutable_lockinfo()->::LockTargetInfo::MergeFrom(from._internal_lockinfo());
  }
}

void SCTowerPlayerLockTarget::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCTowerPlayerLockTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCTowerPlayerLockTarget::CopyFrom(const SCTowerPlayerLockTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCTowerPlayerLockTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCTowerPlayerLockTarget::IsInitialized() const {
  return true;
}

void SCTowerPlayerLockTarget::InternalSwap(SCTowerPlayerLockTarget* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(lockinfo_, other->lockinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCTowerPlayerLockTarget::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSChangeBackground::_Internal {
 public:
};

CSChangeBackground::CSChangeBackground(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSChangeBackground)
}
CSChangeBackground::CSChangeBackground(const CSChangeBackground& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  isback_ = from.isback_;
  // @@protoc_insertion_point(copy_constructor:CSChangeBackground)
}

void CSChangeBackground::SharedCtor() {
  isback_ = false;
}

CSChangeBackground::~CSChangeBackground() {
  // @@protoc_insertion_point(destructor:CSChangeBackground)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSChangeBackground::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSChangeBackground::ArenaDtor(void* object) {
  CSChangeBackground* _this = reinterpret_cast< CSChangeBackground* >(object);
  (void)_this;
}
void CSChangeBackground::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSChangeBackground::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSChangeBackground& CSChangeBackground::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSChangeBackground_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSChangeBackground::Clear() {
// @@protoc_insertion_point(message_clear_start:CSChangeBackground)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isback_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSChangeBackground::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool IsBack = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSChangeBackground::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSChangeBackground)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool IsBack = 1;
  if (this->isback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isback(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSChangeBackground)
  return target;
}

size_t CSChangeBackground::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSChangeBackground)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool IsBack = 1;
  if (this->isback() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSChangeBackground::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSChangeBackground)
  GOOGLE_DCHECK_NE(&from, this);
  const CSChangeBackground* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSChangeBackground>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSChangeBackground)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSChangeBackground)
    MergeFrom(*source);
  }
}

void CSChangeBackground::MergeFrom(const CSChangeBackground& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSChangeBackground)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.isback() != 0) {
    _internal_set_isback(from._internal_isback());
  }
}

void CSChangeBackground::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSChangeBackground)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSChangeBackground::CopyFrom(const CSChangeBackground& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSChangeBackground)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSChangeBackground::IsInitialized() const {
  return true;
}

void CSChangeBackground::InternalSwap(CSChangeBackground* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(isback_, other->isback_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSChangeBackground::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCChangeBackground::_Internal {
 public:
};

SCChangeBackground::SCChangeBackground(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCChangeBackground)
}
SCChangeBackground::SCChangeBackground(const SCChangeBackground& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SCChangeBackground)
}

void SCChangeBackground::SharedCtor() {
}

SCChangeBackground::~SCChangeBackground() {
  // @@protoc_insertion_point(destructor:SCChangeBackground)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCChangeBackground::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCChangeBackground::ArenaDtor(void* object) {
  SCChangeBackground* _this = reinterpret_cast< SCChangeBackground* >(object);
  (void)_this;
}
void SCChangeBackground::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCChangeBackground::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCChangeBackground& SCChangeBackground::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCChangeBackground_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCChangeBackground::Clear() {
// @@protoc_insertion_point(message_clear_start:SCChangeBackground)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCChangeBackground::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCChangeBackground::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCChangeBackground)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCChangeBackground)
  return target;
}

size_t SCChangeBackground::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCChangeBackground)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCChangeBackground::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCChangeBackground)
  GOOGLE_DCHECK_NE(&from, this);
  const SCChangeBackground* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCChangeBackground>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCChangeBackground)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCChangeBackground)
    MergeFrom(*source);
  }
}

void SCChangeBackground::MergeFrom(const SCChangeBackground& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCChangeBackground)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SCChangeBackground::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCChangeBackground)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCChangeBackground::CopyFrom(const SCChangeBackground& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCChangeBackground)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCChangeBackground::IsInitialized() const {
  return true;
}

void SCChangeBackground::InternalSwap(SCChangeBackground* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCChangeBackground::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSTowerMonsterExit::_Internal {
 public:
};

CSTowerMonsterExit::CSTowerMonsterExit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSTowerMonsterExit)
}
CSTowerMonsterExit::CSTowerMonsterExit(const CSTowerMonsterExit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  positionid_ = from.positionid_;
  // @@protoc_insertion_point(copy_constructor:CSTowerMonsterExit)
}

void CSTowerMonsterExit::SharedCtor() {
  positionid_ = 0;
}

CSTowerMonsterExit::~CSTowerMonsterExit() {
  // @@protoc_insertion_point(destructor:CSTowerMonsterExit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSTowerMonsterExit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSTowerMonsterExit::ArenaDtor(void* object) {
  CSTowerMonsterExit* _this = reinterpret_cast< CSTowerMonsterExit* >(object);
  (void)_this;
}
void CSTowerMonsterExit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSTowerMonsterExit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSTowerMonsterExit& CSTowerMonsterExit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSTowerMonsterExit_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSTowerMonsterExit::Clear() {
// @@protoc_insertion_point(message_clear_start:CSTowerMonsterExit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positionid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSTowerMonsterExit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 PositionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          positionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSTowerMonsterExit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSTowerMonsterExit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PositionId = 1;
  if (this->positionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_positionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSTowerMonsterExit)
  return target;
}

size_t CSTowerMonsterExit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSTowerMonsterExit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PositionId = 1;
  if (this->positionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_positionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSTowerMonsterExit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSTowerMonsterExit)
  GOOGLE_DCHECK_NE(&from, this);
  const CSTowerMonsterExit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSTowerMonsterExit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSTowerMonsterExit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSTowerMonsterExit)
    MergeFrom(*source);
  }
}

void CSTowerMonsterExit::MergeFrom(const CSTowerMonsterExit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSTowerMonsterExit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.positionid() != 0) {
    _internal_set_positionid(from._internal_positionid());
  }
}

void CSTowerMonsterExit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSTowerMonsterExit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTowerMonsterExit::CopyFrom(const CSTowerMonsterExit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSTowerMonsterExit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTowerMonsterExit::IsInitialized() const {
  return true;
}

void CSTowerMonsterExit::InternalSwap(CSTowerMonsterExit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(positionid_, other->positionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSTowerMonsterExit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCTowerMonsterExit::_Internal {
 public:
};

SCTowerMonsterExit::SCTowerMonsterExit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCTowerMonsterExit)
}
SCTowerMonsterExit::SCTowerMonsterExit(const SCTowerMonsterExit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SCTowerMonsterExit)
}

void SCTowerMonsterExit::SharedCtor() {
}

SCTowerMonsterExit::~SCTowerMonsterExit() {
  // @@protoc_insertion_point(destructor:SCTowerMonsterExit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCTowerMonsterExit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCTowerMonsterExit::ArenaDtor(void* object) {
  SCTowerMonsterExit* _this = reinterpret_cast< SCTowerMonsterExit* >(object);
  (void)_this;
}
void SCTowerMonsterExit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCTowerMonsterExit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCTowerMonsterExit& SCTowerMonsterExit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCTowerMonsterExit_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCTowerMonsterExit::Clear() {
// @@protoc_insertion_point(message_clear_start:SCTowerMonsterExit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCTowerMonsterExit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCTowerMonsterExit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCTowerMonsterExit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCTowerMonsterExit)
  return target;
}

size_t SCTowerMonsterExit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCTowerMonsterExit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCTowerMonsterExit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCTowerMonsterExit)
  GOOGLE_DCHECK_NE(&from, this);
  const SCTowerMonsterExit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCTowerMonsterExit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCTowerMonsterExit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCTowerMonsterExit)
    MergeFrom(*source);
  }
}

void SCTowerMonsterExit::MergeFrom(const SCTowerMonsterExit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCTowerMonsterExit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SCTowerMonsterExit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCTowerMonsterExit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCTowerMonsterExit::CopyFrom(const SCTowerMonsterExit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCTowerMonsterExit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCTowerMonsterExit::IsInitialized() const {
  return true;
}

void SCTowerMonsterExit::InternalSwap(SCTowerMonsterExit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCTowerMonsterExit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSGetCurrentTime::_Internal {
 public:
};

CSGetCurrentTime::CSGetCurrentTime(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSGetCurrentTime)
}
CSGetCurrentTime::CSGetCurrentTime(const CSGetCurrentTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSGetCurrentTime)
}

void CSGetCurrentTime::SharedCtor() {
}

CSGetCurrentTime::~CSGetCurrentTime() {
  // @@protoc_insertion_point(destructor:CSGetCurrentTime)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSGetCurrentTime::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSGetCurrentTime::ArenaDtor(void* object) {
  CSGetCurrentTime* _this = reinterpret_cast< CSGetCurrentTime* >(object);
  (void)_this;
}
void CSGetCurrentTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSGetCurrentTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSGetCurrentTime& CSGetCurrentTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSGetCurrentTime_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSGetCurrentTime::Clear() {
// @@protoc_insertion_point(message_clear_start:CSGetCurrentTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSGetCurrentTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSGetCurrentTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSGetCurrentTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSGetCurrentTime)
  return target;
}

size_t CSGetCurrentTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSGetCurrentTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSGetCurrentTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSGetCurrentTime)
  GOOGLE_DCHECK_NE(&from, this);
  const CSGetCurrentTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSGetCurrentTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSGetCurrentTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSGetCurrentTime)
    MergeFrom(*source);
  }
}

void CSGetCurrentTime::MergeFrom(const CSGetCurrentTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSGetCurrentTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSGetCurrentTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSGetCurrentTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetCurrentTime::CopyFrom(const CSGetCurrentTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSGetCurrentTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetCurrentTime::IsInitialized() const {
  return true;
}

void CSGetCurrentTime::InternalSwap(CSGetCurrentTime* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSGetCurrentTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGetCurrentTime::_Internal {
 public:
};

SCGetCurrentTime::SCGetCurrentTime(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCGetCurrentTime)
}
SCGetCurrentTime::SCGetCurrentTime(const SCGetCurrentTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:SCGetCurrentTime)
}

void SCGetCurrentTime::SharedCtor() {
  timestamp_ = 0;
}

SCGetCurrentTime::~SCGetCurrentTime() {
  // @@protoc_insertion_point(destructor:SCGetCurrentTime)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGetCurrentTime::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCGetCurrentTime::ArenaDtor(void* object) {
  SCGetCurrentTime* _this = reinterpret_cast< SCGetCurrentTime* >(object);
  (void)_this;
}
void SCGetCurrentTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGetCurrentTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGetCurrentTime& SCGetCurrentTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGetCurrentTime_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCGetCurrentTime::Clear() {
// @@protoc_insertion_point(message_clear_start:SCGetCurrentTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGetCurrentTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGetCurrentTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCGetCurrentTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCGetCurrentTime)
  return target;
}

size_t SCGetCurrentTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCGetCurrentTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGetCurrentTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCGetCurrentTime)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGetCurrentTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGetCurrentTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCGetCurrentTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCGetCurrentTime)
    MergeFrom(*source);
  }
}

void SCGetCurrentTime::MergeFrom(const SCGetCurrentTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCGetCurrentTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void SCGetCurrentTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCGetCurrentTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGetCurrentTime::CopyFrom(const SCGetCurrentTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCGetCurrentTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGetCurrentTime::IsInitialized() const {
  return true;
}

void SCGetCurrentTime::InternalSwap(SCGetCurrentTime* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGetCurrentTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TowerGuideInfo::_Internal {
 public:
};

TowerGuideInfo::TowerGuideInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TowerGuideInfo)
}
TowerGuideInfo::TowerGuideInfo(const TowerGuideInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guidestep_, &from.guidestep_,
    static_cast<size_t>(reinterpret_cast<char*>(&isfinsh_) -
    reinterpret_cast<char*>(&guidestep_)) + sizeof(isfinsh_));
  // @@protoc_insertion_point(copy_constructor:TowerGuideInfo)
}

void TowerGuideInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&guidestep_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isfinsh_) -
      reinterpret_cast<char*>(&guidestep_)) + sizeof(isfinsh_));
}

TowerGuideInfo::~TowerGuideInfo() {
  // @@protoc_insertion_point(destructor:TowerGuideInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TowerGuideInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TowerGuideInfo::ArenaDtor(void* object) {
  TowerGuideInfo* _this = reinterpret_cast< TowerGuideInfo* >(object);
  (void)_this;
}
void TowerGuideInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TowerGuideInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TowerGuideInfo& TowerGuideInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TowerGuideInfo_JSBY_2eproto.base);
  return *internal_default_instance();
}


void TowerGuideInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TowerGuideInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guidestep_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isfinsh_) -
      reinterpret_cast<char*>(&guidestep_)) + sizeof(isfinsh_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TowerGuideInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 GuideStep = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guidestep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool IsFinsh = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isfinsh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TowerGuideInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TowerGuideInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 GuideStep = 1;
  if (this->guidestep() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_guidestep(), target);
  }

  // bool IsFinsh = 2;
  if (this->isfinsh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isfinsh(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TowerGuideInfo)
  return target;
}

size_t TowerGuideInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TowerGuideInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 GuideStep = 1;
  if (this->guidestep() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_guidestep());
  }

  // bool IsFinsh = 2;
  if (this->isfinsh() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TowerGuideInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TowerGuideInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TowerGuideInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TowerGuideInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TowerGuideInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TowerGuideInfo)
    MergeFrom(*source);
  }
}

void TowerGuideInfo::MergeFrom(const TowerGuideInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TowerGuideInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guidestep() != 0) {
    _internal_set_guidestep(from._internal_guidestep());
  }
  if (from.isfinsh() != 0) {
    _internal_set_isfinsh(from._internal_isfinsh());
  }
}

void TowerGuideInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TowerGuideInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TowerGuideInfo::CopyFrom(const TowerGuideInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TowerGuideInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TowerGuideInfo::IsInitialized() const {
  return true;
}

void TowerGuideInfo::InternalSwap(TowerGuideInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TowerGuideInfo, isfinsh_)
      + sizeof(TowerGuideInfo::isfinsh_)
      - PROTOBUF_FIELD_OFFSET(TowerGuideInfo, guidestep_)>(
          reinterpret_cast<char*>(&guidestep_),
          reinterpret_cast<char*>(&other->guidestep_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TowerGuideInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSGetTowerStep::_Internal {
 public:
};

CSGetTowerStep::CSGetTowerStep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSGetTowerStep)
}
CSGetTowerStep::CSGetTowerStep(const CSGetTowerStep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSGetTowerStep)
}

void CSGetTowerStep::SharedCtor() {
}

CSGetTowerStep::~CSGetTowerStep() {
  // @@protoc_insertion_point(destructor:CSGetTowerStep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSGetTowerStep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSGetTowerStep::ArenaDtor(void* object) {
  CSGetTowerStep* _this = reinterpret_cast< CSGetTowerStep* >(object);
  (void)_this;
}
void CSGetTowerStep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSGetTowerStep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSGetTowerStep& CSGetTowerStep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSGetTowerStep_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSGetTowerStep::Clear() {
// @@protoc_insertion_point(message_clear_start:CSGetTowerStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSGetTowerStep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSGetTowerStep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSGetTowerStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSGetTowerStep)
  return target;
}

size_t CSGetTowerStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSGetTowerStep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSGetTowerStep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSGetTowerStep)
  GOOGLE_DCHECK_NE(&from, this);
  const CSGetTowerStep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSGetTowerStep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSGetTowerStep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSGetTowerStep)
    MergeFrom(*source);
  }
}

void CSGetTowerStep::MergeFrom(const CSGetTowerStep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSGetTowerStep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSGetTowerStep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSGetTowerStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetTowerStep::CopyFrom(const CSGetTowerStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSGetTowerStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetTowerStep::IsInitialized() const {
  return true;
}

void CSGetTowerStep::InternalSwap(CSGetTowerStep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSGetTowerStep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGetTowerGuide::_Internal {
 public:
  static const ::TowerGuideInfo& guideinfo(const SCGetTowerGuide* msg);
};

const ::TowerGuideInfo&
SCGetTowerGuide::_Internal::guideinfo(const SCGetTowerGuide* msg) {
  return *msg->guideinfo_;
}
SCGetTowerGuide::SCGetTowerGuide(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCGetTowerGuide)
}
SCGetTowerGuide::SCGetTowerGuide(const SCGetTowerGuide& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_guideinfo()) {
    guideinfo_ = new ::TowerGuideInfo(*from.guideinfo_);
  } else {
    guideinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SCGetTowerGuide)
}

void SCGetTowerGuide::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCGetTowerGuide_JSBY_2eproto.base);
  guideinfo_ = nullptr;
}

SCGetTowerGuide::~SCGetTowerGuide() {
  // @@protoc_insertion_point(destructor:SCGetTowerGuide)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGetTowerGuide::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete guideinfo_;
}

void SCGetTowerGuide::ArenaDtor(void* object) {
  SCGetTowerGuide* _this = reinterpret_cast< SCGetTowerGuide* >(object);
  (void)_this;
}
void SCGetTowerGuide::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGetTowerGuide::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGetTowerGuide& SCGetTowerGuide::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGetTowerGuide_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCGetTowerGuide::Clear() {
// @@protoc_insertion_point(message_clear_start:SCGetTowerGuide)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && guideinfo_ != nullptr) {
    delete guideinfo_;
  }
  guideinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGetTowerGuide::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TowerGuideInfo GuideInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_guideinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGetTowerGuide::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCGetTowerGuide)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TowerGuideInfo GuideInfo = 1;
  if (this->has_guideinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::guideinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCGetTowerGuide)
  return target;
}

size_t SCGetTowerGuide::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCGetTowerGuide)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TowerGuideInfo GuideInfo = 1;
  if (this->has_guideinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *guideinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGetTowerGuide::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCGetTowerGuide)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGetTowerGuide* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGetTowerGuide>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCGetTowerGuide)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCGetTowerGuide)
    MergeFrom(*source);
  }
}

void SCGetTowerGuide::MergeFrom(const SCGetTowerGuide& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCGetTowerGuide)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_guideinfo()) {
    _internal_mutable_guideinfo()->::TowerGuideInfo::MergeFrom(from._internal_guideinfo());
  }
}

void SCGetTowerGuide::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCGetTowerGuide)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGetTowerGuide::CopyFrom(const SCGetTowerGuide& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCGetTowerGuide)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGetTowerGuide::IsInitialized() const {
  return true;
}

void SCGetTowerGuide::InternalSwap(SCGetTowerGuide* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(guideinfo_, other->guideinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGetTowerGuide::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSetTowerStep::_Internal {
 public:
  static const ::TowerGuideInfo& guideinfo(const CSSetTowerStep* msg);
};

const ::TowerGuideInfo&
CSSetTowerStep::_Internal::guideinfo(const CSSetTowerStep* msg) {
  return *msg->guideinfo_;
}
CSSetTowerStep::CSSetTowerStep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSSetTowerStep)
}
CSSetTowerStep::CSSetTowerStep(const CSSetTowerStep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_guideinfo()) {
    guideinfo_ = new ::TowerGuideInfo(*from.guideinfo_);
  } else {
    guideinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CSSetTowerStep)
}

void CSSetTowerStep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSSetTowerStep_JSBY_2eproto.base);
  guideinfo_ = nullptr;
}

CSSetTowerStep::~CSSetTowerStep() {
  // @@protoc_insertion_point(destructor:CSSetTowerStep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSetTowerStep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete guideinfo_;
}

void CSSetTowerStep::ArenaDtor(void* object) {
  CSSetTowerStep* _this = reinterpret_cast< CSSetTowerStep* >(object);
  (void)_this;
}
void CSSetTowerStep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSetTowerStep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSetTowerStep& CSSetTowerStep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSetTowerStep_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSSetTowerStep::Clear() {
// @@protoc_insertion_point(message_clear_start:CSSetTowerStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && guideinfo_ != nullptr) {
    delete guideinfo_;
  }
  guideinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSetTowerStep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TowerGuideInfo GuideInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_guideinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSetTowerStep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSSetTowerStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TowerGuideInfo GuideInfo = 1;
  if (this->has_guideinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::guideinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSSetTowerStep)
  return target;
}

size_t CSSetTowerStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSSetTowerStep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TowerGuideInfo GuideInfo = 1;
  if (this->has_guideinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *guideinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSetTowerStep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSSetTowerStep)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSetTowerStep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSetTowerStep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSSetTowerStep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSSetTowerStep)
    MergeFrom(*source);
  }
}

void CSSetTowerStep::MergeFrom(const CSSetTowerStep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSSetTowerStep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_guideinfo()) {
    _internal_mutable_guideinfo()->::TowerGuideInfo::MergeFrom(from._internal_guideinfo());
  }
}

void CSSetTowerStep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSSetTowerStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSetTowerStep::CopyFrom(const CSSetTowerStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSSetTowerStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSetTowerStep::IsInitialized() const {
  return true;
}

void CSSetTowerStep::InternalSwap(CSSetTowerStep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(guideinfo_, other->guideinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSetTowerStep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSetTowerStep::_Internal {
 public:
};

SCSetTowerStep::SCSetTowerStep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCSetTowerStep)
}
SCSetTowerStep::SCSetTowerStep(const SCSetTowerStep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SCSetTowerStep)
}

void SCSetTowerStep::SharedCtor() {
}

SCSetTowerStep::~SCSetTowerStep() {
  // @@protoc_insertion_point(destructor:SCSetTowerStep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSetTowerStep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSetTowerStep::ArenaDtor(void* object) {
  SCSetTowerStep* _this = reinterpret_cast< SCSetTowerStep* >(object);
  (void)_this;
}
void SCSetTowerStep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSetTowerStep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSetTowerStep& SCSetTowerStep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSetTowerStep_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCSetTowerStep::Clear() {
// @@protoc_insertion_point(message_clear_start:SCSetTowerStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSetTowerStep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSetTowerStep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCSetTowerStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCSetTowerStep)
  return target;
}

size_t SCSetTowerStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCSetTowerStep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSetTowerStep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCSetTowerStep)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSetTowerStep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSetTowerStep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCSetTowerStep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCSetTowerStep)
    MergeFrom(*source);
  }
}

void SCSetTowerStep::MergeFrom(const SCSetTowerStep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCSetTowerStep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SCSetTowerStep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCSetTowerStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSetTowerStep::CopyFrom(const SCSetTowerStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCSetTowerStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSetTowerStep::IsInitialized() const {
  return true;
}

void SCSetTowerStep::InternalSwap(SCSetTowerStep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSetTowerStep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSTowerExchangeHero::_Internal {
 public:
};

CSTowerExchangeHero::CSTowerExchangeHero(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSTowerExchangeHero)
}
CSTowerExchangeHero::CSTowerExchangeHero(const CSTowerExchangeHero& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&newpositionid_, &from.newpositionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&oldpositionid_) -
    reinterpret_cast<char*>(&newpositionid_)) + sizeof(oldpositionid_));
  // @@protoc_insertion_point(copy_constructor:CSTowerExchangeHero)
}

void CSTowerExchangeHero::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&newpositionid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&oldpositionid_) -
      reinterpret_cast<char*>(&newpositionid_)) + sizeof(oldpositionid_));
}

CSTowerExchangeHero::~CSTowerExchangeHero() {
  // @@protoc_insertion_point(destructor:CSTowerExchangeHero)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSTowerExchangeHero::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSTowerExchangeHero::ArenaDtor(void* object) {
  CSTowerExchangeHero* _this = reinterpret_cast< CSTowerExchangeHero* >(object);
  (void)_this;
}
void CSTowerExchangeHero::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSTowerExchangeHero::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSTowerExchangeHero& CSTowerExchangeHero::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSTowerExchangeHero_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSTowerExchangeHero::Clear() {
// @@protoc_insertion_point(message_clear_start:CSTowerExchangeHero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&newpositionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oldpositionid_) -
      reinterpret_cast<char*>(&newpositionid_)) + sizeof(oldpositionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSTowerExchangeHero::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 NewPositionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          newpositionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 OldPositionId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          oldpositionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSTowerExchangeHero::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSTowerExchangeHero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NewPositionId = 1;
  if (this->newpositionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_newpositionid(), target);
  }

  // int32 OldPositionId = 2;
  if (this->oldpositionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_oldpositionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSTowerExchangeHero)
  return target;
}

size_t CSTowerExchangeHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSTowerExchangeHero)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 NewPositionId = 1;
  if (this->newpositionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_newpositionid());
  }

  // int32 OldPositionId = 2;
  if (this->oldpositionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_oldpositionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSTowerExchangeHero::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSTowerExchangeHero)
  GOOGLE_DCHECK_NE(&from, this);
  const CSTowerExchangeHero* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSTowerExchangeHero>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSTowerExchangeHero)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSTowerExchangeHero)
    MergeFrom(*source);
  }
}

void CSTowerExchangeHero::MergeFrom(const CSTowerExchangeHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSTowerExchangeHero)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.newpositionid() != 0) {
    _internal_set_newpositionid(from._internal_newpositionid());
  }
  if (from.oldpositionid() != 0) {
    _internal_set_oldpositionid(from._internal_oldpositionid());
  }
}

void CSTowerExchangeHero::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSTowerExchangeHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTowerExchangeHero::CopyFrom(const CSTowerExchangeHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSTowerExchangeHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTowerExchangeHero::IsInitialized() const {
  return true;
}

void CSTowerExchangeHero::InternalSwap(CSTowerExchangeHero* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSTowerExchangeHero, oldpositionid_)
      + sizeof(CSTowerExchangeHero::oldpositionid_)
      - PROTOBUF_FIELD_OFFSET(CSTowerExchangeHero, newpositionid_)>(
          reinterpret_cast<char*>(&newpositionid_),
          reinterpret_cast<char*>(&other->newpositionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSTowerExchangeHero::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCTowerExchangeHero::_Internal {
 public:
};

SCTowerExchangeHero::SCTowerExchangeHero(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCTowerExchangeHero)
}
SCTowerExchangeHero::SCTowerExchangeHero(const SCTowerExchangeHero& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&newpositionid_, &from.newpositionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reqplayerid_) -
    reinterpret_cast<char*>(&newpositionid_)) + sizeof(reqplayerid_));
  // @@protoc_insertion_point(copy_constructor:SCTowerExchangeHero)
}

void SCTowerExchangeHero::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&newpositionid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&reqplayerid_) -
      reinterpret_cast<char*>(&newpositionid_)) + sizeof(reqplayerid_));
}

SCTowerExchangeHero::~SCTowerExchangeHero() {
  // @@protoc_insertion_point(destructor:SCTowerExchangeHero)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCTowerExchangeHero::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCTowerExchangeHero::ArenaDtor(void* object) {
  SCTowerExchangeHero* _this = reinterpret_cast< SCTowerExchangeHero* >(object);
  (void)_this;
}
void SCTowerExchangeHero::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCTowerExchangeHero::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCTowerExchangeHero& SCTowerExchangeHero::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCTowerExchangeHero_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCTowerExchangeHero::Clear() {
// @@protoc_insertion_point(message_clear_start:SCTowerExchangeHero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&newpositionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reqplayerid_) -
      reinterpret_cast<char*>(&newpositionid_)) + sizeof(reqplayerid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCTowerExchangeHero::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 NewPositionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          newpositionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 OldPositionId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          oldpositionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ReqPlayerId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          reqplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCTowerExchangeHero::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCTowerExchangeHero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NewPositionId = 1;
  if (this->newpositionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_newpositionid(), target);
  }

  // int32 OldPositionId = 2;
  if (this->oldpositionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_oldpositionid(), target);
  }

  // int32 ReqPlayerId = 3;
  if (this->reqplayerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_reqplayerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCTowerExchangeHero)
  return target;
}

size_t SCTowerExchangeHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCTowerExchangeHero)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 NewPositionId = 1;
  if (this->newpositionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_newpositionid());
  }

  // int32 OldPositionId = 2;
  if (this->oldpositionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_oldpositionid());
  }

  // int32 ReqPlayerId = 3;
  if (this->reqplayerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reqplayerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCTowerExchangeHero::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCTowerExchangeHero)
  GOOGLE_DCHECK_NE(&from, this);
  const SCTowerExchangeHero* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCTowerExchangeHero>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCTowerExchangeHero)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCTowerExchangeHero)
    MergeFrom(*source);
  }
}

void SCTowerExchangeHero::MergeFrom(const SCTowerExchangeHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCTowerExchangeHero)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.newpositionid() != 0) {
    _internal_set_newpositionid(from._internal_newpositionid());
  }
  if (from.oldpositionid() != 0) {
    _internal_set_oldpositionid(from._internal_oldpositionid());
  }
  if (from.reqplayerid() != 0) {
    _internal_set_reqplayerid(from._internal_reqplayerid());
  }
}

void SCTowerExchangeHero::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCTowerExchangeHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCTowerExchangeHero::CopyFrom(const SCTowerExchangeHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCTowerExchangeHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCTowerExchangeHero::IsInitialized() const {
  return true;
}

void SCTowerExchangeHero::InternalSwap(SCTowerExchangeHero* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCTowerExchangeHero, reqplayerid_)
      + sizeof(SCTowerExchangeHero::reqplayerid_)
      - PROTOBUF_FIELD_OFFSET(SCTowerExchangeHero, newpositionid_)>(
          reinterpret_cast<char*>(&newpositionid_),
          reinterpret_cast<char*>(&other->newpositionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCTowerExchangeHero::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCLeaveTowerTableCountdown::_Internal {
 public:
};

SCLeaveTowerTableCountdown::SCLeaveTowerTableCountdown(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCLeaveTowerTableCountdown)
}
SCLeaveTowerTableCountdown::SCLeaveTowerTableCountdown(const SCLeaveTowerTableCountdown& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tableid_ = from.tableid_;
  // @@protoc_insertion_point(copy_constructor:SCLeaveTowerTableCountdown)
}

void SCLeaveTowerTableCountdown::SharedCtor() {
  tableid_ = 0;
}

SCLeaveTowerTableCountdown::~SCLeaveTowerTableCountdown() {
  // @@protoc_insertion_point(destructor:SCLeaveTowerTableCountdown)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCLeaveTowerTableCountdown::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCLeaveTowerTableCountdown::ArenaDtor(void* object) {
  SCLeaveTowerTableCountdown* _this = reinterpret_cast< SCLeaveTowerTableCountdown* >(object);
  (void)_this;
}
void SCLeaveTowerTableCountdown::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCLeaveTowerTableCountdown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCLeaveTowerTableCountdown& SCLeaveTowerTableCountdown::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCLeaveTowerTableCountdown_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCLeaveTowerTableCountdown::Clear() {
// @@protoc_insertion_point(message_clear_start:SCLeaveTowerTableCountdown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tableid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCLeaveTowerTableCountdown::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 TableID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tableid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCLeaveTowerTableCountdown::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCLeaveTowerTableCountdown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 TableID = 1;
  if (this->tableid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tableid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCLeaveTowerTableCountdown)
  return target;
}

size_t SCLeaveTowerTableCountdown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCLeaveTowerTableCountdown)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 TableID = 1;
  if (this->tableid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tableid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCLeaveTowerTableCountdown::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCLeaveTowerTableCountdown)
  GOOGLE_DCHECK_NE(&from, this);
  const SCLeaveTowerTableCountdown* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCLeaveTowerTableCountdown>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCLeaveTowerTableCountdown)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCLeaveTowerTableCountdown)
    MergeFrom(*source);
  }
}

void SCLeaveTowerTableCountdown::MergeFrom(const SCLeaveTowerTableCountdown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCLeaveTowerTableCountdown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tableid() != 0) {
    _internal_set_tableid(from._internal_tableid());
  }
}

void SCLeaveTowerTableCountdown::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCLeaveTowerTableCountdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCLeaveTowerTableCountdown::CopyFrom(const SCLeaveTowerTableCountdown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCLeaveTowerTableCountdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCLeaveTowerTableCountdown::IsInitialized() const {
  return true;
}

void SCLeaveTowerTableCountdown::InternalSwap(SCLeaveTowerTableCountdown* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(tableid_, other->tableid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCLeaveTowerTableCountdown::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PoisonBombLocation::_Internal {
 public:
};

PoisonBombLocation::PoisonBombLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PoisonBombLocation)
}
PoisonBombLocation::PoisonBombLocation(const PoisonBombLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&id_)) + sizeof(angle_));
  // @@protoc_insertion_point(copy_constructor:PoisonBombLocation)
}

void PoisonBombLocation::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&id_)) + sizeof(angle_));
}

PoisonBombLocation::~PoisonBombLocation() {
  // @@protoc_insertion_point(destructor:PoisonBombLocation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PoisonBombLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PoisonBombLocation::ArenaDtor(void* object) {
  PoisonBombLocation* _this = reinterpret_cast< PoisonBombLocation* >(object);
  (void)_this;
}
void PoisonBombLocation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PoisonBombLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoisonBombLocation& PoisonBombLocation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PoisonBombLocation_JSBY_2eproto.base);
  return *internal_default_instance();
}


void PoisonBombLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:PoisonBombLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&id_)) + sizeof(angle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoisonBombLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 X = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Angle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoisonBombLocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PoisonBombLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 X = 2;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // int32 Y = 3;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  // int32 Angle = 4;
  if (this->angle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PoisonBombLocation)
  return target;
}

size_t PoisonBombLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PoisonBombLocation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 X = 2;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 Y = 3;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  // int32 Angle = 4;
  if (this->angle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_angle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoisonBombLocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PoisonBombLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const PoisonBombLocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PoisonBombLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PoisonBombLocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PoisonBombLocation)
    MergeFrom(*source);
  }
}

void PoisonBombLocation::MergeFrom(const PoisonBombLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PoisonBombLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from.angle() != 0) {
    _internal_set_angle(from._internal_angle());
  }
}

void PoisonBombLocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PoisonBombLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoisonBombLocation::CopyFrom(const PoisonBombLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PoisonBombLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoisonBombLocation::IsInitialized() const {
  return true;
}

void PoisonBombLocation::InternalSwap(PoisonBombLocation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PoisonBombLocation, angle_)
      + sizeof(PoisonBombLocation::angle_)
      - PROTOBUF_FIELD_OFFSET(PoisonBombLocation, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PoisonBombLocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSPoisonBombLocation::_Internal {
 public:
  static const ::PoisonBombLocation& info(const CSPoisonBombLocation* msg);
};

const ::PoisonBombLocation&
CSPoisonBombLocation::_Internal::info(const CSPoisonBombLocation* msg) {
  return *msg->info_;
}
CSPoisonBombLocation::CSPoisonBombLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSPoisonBombLocation)
}
CSPoisonBombLocation::CSPoisonBombLocation(const CSPoisonBombLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::PoisonBombLocation(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CSPoisonBombLocation)
}

void CSPoisonBombLocation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSPoisonBombLocation_JSBY_2eproto.base);
  info_ = nullptr;
}

CSPoisonBombLocation::~CSPoisonBombLocation() {
  // @@protoc_insertion_point(destructor:CSPoisonBombLocation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSPoisonBombLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void CSPoisonBombLocation::ArenaDtor(void* object) {
  CSPoisonBombLocation* _this = reinterpret_cast< CSPoisonBombLocation* >(object);
  (void)_this;
}
void CSPoisonBombLocation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSPoisonBombLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSPoisonBombLocation& CSPoisonBombLocation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSPoisonBombLocation_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSPoisonBombLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:CSPoisonBombLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSPoisonBombLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PoisonBombLocation Info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSPoisonBombLocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSPoisonBombLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PoisonBombLocation Info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSPoisonBombLocation)
  return target;
}

size_t CSPoisonBombLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSPoisonBombLocation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PoisonBombLocation Info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSPoisonBombLocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSPoisonBombLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const CSPoisonBombLocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSPoisonBombLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSPoisonBombLocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSPoisonBombLocation)
    MergeFrom(*source);
  }
}

void CSPoisonBombLocation::MergeFrom(const CSPoisonBombLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSPoisonBombLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::PoisonBombLocation::MergeFrom(from._internal_info());
  }
}

void CSPoisonBombLocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSPoisonBombLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPoisonBombLocation::CopyFrom(const CSPoisonBombLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSPoisonBombLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPoisonBombLocation::IsInitialized() const {
  return true;
}

void CSPoisonBombLocation::InternalSwap(CSPoisonBombLocation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSPoisonBombLocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPoisonBombLocation::_Internal {
 public:
  static const ::PoisonBombLocation& info(const SCPoisonBombLocation* msg);
};

const ::PoisonBombLocation&
SCPoisonBombLocation::_Internal::info(const SCPoisonBombLocation* msg) {
  return *msg->info_;
}
SCPoisonBombLocation::SCPoisonBombLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCPoisonBombLocation)
}
SCPoisonBombLocation::SCPoisonBombLocation(const SCPoisonBombLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::PoisonBombLocation(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SCPoisonBombLocation)
}

void SCPoisonBombLocation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCPoisonBombLocation_JSBY_2eproto.base);
  info_ = nullptr;
}

SCPoisonBombLocation::~SCPoisonBombLocation() {
  // @@protoc_insertion_point(destructor:SCPoisonBombLocation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPoisonBombLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void SCPoisonBombLocation::ArenaDtor(void* object) {
  SCPoisonBombLocation* _this = reinterpret_cast< SCPoisonBombLocation* >(object);
  (void)_this;
}
void SCPoisonBombLocation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPoisonBombLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPoisonBombLocation& SCPoisonBombLocation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPoisonBombLocation_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCPoisonBombLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:SCPoisonBombLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPoisonBombLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PoisonBombLocation Info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPoisonBombLocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCPoisonBombLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PoisonBombLocation Info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCPoisonBombLocation)
  return target;
}

size_t SCPoisonBombLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCPoisonBombLocation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PoisonBombLocation Info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPoisonBombLocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCPoisonBombLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPoisonBombLocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPoisonBombLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCPoisonBombLocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCPoisonBombLocation)
    MergeFrom(*source);
  }
}

void SCPoisonBombLocation::MergeFrom(const SCPoisonBombLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCPoisonBombLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::PoisonBombLocation::MergeFrom(from._internal_info());
  }
}

void SCPoisonBombLocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCPoisonBombLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPoisonBombLocation::CopyFrom(const SCPoisonBombLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCPoisonBombLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPoisonBombLocation::IsInitialized() const {
  return true;
}

void SCPoisonBombLocation::InternalSwap(SCPoisonBombLocation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPoisonBombLocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PoisonbombConvert::_Internal {
 public:
};

PoisonbombConvert::PoisonbombConvert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PoisonbombConvert)
}
PoisonbombConvert::PoisonbombConvert(const PoisonbombConvert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&monsterid_, &from.monsterid_,
    static_cast<size_t>(reinterpret_cast<char*>(&poisonbombid_) -
    reinterpret_cast<char*>(&monsterid_)) + sizeof(poisonbombid_));
  // @@protoc_insertion_point(copy_constructor:PoisonbombConvert)
}

void PoisonbombConvert::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&monsterid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&poisonbombid_) -
      reinterpret_cast<char*>(&monsterid_)) + sizeof(poisonbombid_));
}

PoisonbombConvert::~PoisonbombConvert() {
  // @@protoc_insertion_point(destructor:PoisonbombConvert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PoisonbombConvert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PoisonbombConvert::ArenaDtor(void* object) {
  PoisonbombConvert* _this = reinterpret_cast< PoisonbombConvert* >(object);
  (void)_this;
}
void PoisonbombConvert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PoisonbombConvert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoisonbombConvert& PoisonbombConvert::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PoisonbombConvert_JSBY_2eproto.base);
  return *internal_default_instance();
}


void PoisonbombConvert::Clear() {
// @@protoc_insertion_point(message_clear_start:PoisonbombConvert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&monsterid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&poisonbombid_) -
      reinterpret_cast<char*>(&monsterid_)) + sizeof(poisonbombid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoisonbombConvert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 MonsterId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          monsterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PositionId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          positionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PoisonBombId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          poisonbombid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoisonbombConvert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PoisonbombConvert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 MonsterId = 1;
  if (this->monsterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_monsterid(), target);
  }

  // int32 PositionId = 2;
  if (this->positionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_positionid(), target);
  }

  // int32 PoisonBombId = 3;
  if (this->poisonbombid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_poisonbombid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PoisonbombConvert)
  return target;
}

size_t PoisonbombConvert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PoisonbombConvert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 MonsterId = 1;
  if (this->monsterid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_monsterid());
  }

  // int32 PositionId = 2;
  if (this->positionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_positionid());
  }

  // int32 PoisonBombId = 3;
  if (this->poisonbombid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_poisonbombid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoisonbombConvert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PoisonbombConvert)
  GOOGLE_DCHECK_NE(&from, this);
  const PoisonbombConvert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PoisonbombConvert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PoisonbombConvert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PoisonbombConvert)
    MergeFrom(*source);
  }
}

void PoisonbombConvert::MergeFrom(const PoisonbombConvert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PoisonbombConvert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.monsterid() != 0) {
    _internal_set_monsterid(from._internal_monsterid());
  }
  if (from.positionid() != 0) {
    _internal_set_positionid(from._internal_positionid());
  }
  if (from.poisonbombid() != 0) {
    _internal_set_poisonbombid(from._internal_poisonbombid());
  }
}

void PoisonbombConvert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PoisonbombConvert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoisonbombConvert::CopyFrom(const PoisonbombConvert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PoisonbombConvert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoisonbombConvert::IsInitialized() const {
  return true;
}

void PoisonbombConvert::InternalSwap(PoisonbombConvert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PoisonbombConvert, poisonbombid_)
      + sizeof(PoisonbombConvert::poisonbombid_)
      - PROTOBUF_FIELD_OFFSET(PoisonbombConvert, monsterid_)>(
          reinterpret_cast<char*>(&monsterid_),
          reinterpret_cast<char*>(&other->monsterid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PoisonbombConvert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPoisonBombConvert::_Internal {
 public:
  static const ::PoisonbombConvert& info(const SCPoisonBombConvert* msg);
};

const ::PoisonbombConvert&
SCPoisonBombConvert::_Internal::info(const SCPoisonBombConvert* msg) {
  return *msg->info_;
}
SCPoisonBombConvert::SCPoisonBombConvert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCPoisonBombConvert)
}
SCPoisonBombConvert::SCPoisonBombConvert(const SCPoisonBombConvert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::PoisonbombConvert(*from.info_);
  } else {
    info_ = nullptr;
  }
  ::memcpy(&poisonbombid_, &from.poisonbombid_,
    static_cast<size_t>(reinterpret_cast<char*>(&killplayerid_) -
    reinterpret_cast<char*>(&poisonbombid_)) + sizeof(killplayerid_));
  // @@protoc_insertion_point(copy_constructor:SCPoisonBombConvert)
}

void SCPoisonBombConvert::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCPoisonBombConvert_JSBY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&killplayerid_) -
      reinterpret_cast<char*>(&info_)) + sizeof(killplayerid_));
}

SCPoisonBombConvert::~SCPoisonBombConvert() {
  // @@protoc_insertion_point(destructor:SCPoisonBombConvert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPoisonBombConvert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void SCPoisonBombConvert::ArenaDtor(void* object) {
  SCPoisonBombConvert* _this = reinterpret_cast< SCPoisonBombConvert* >(object);
  (void)_this;
}
void SCPoisonBombConvert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPoisonBombConvert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPoisonBombConvert& SCPoisonBombConvert::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPoisonBombConvert_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCPoisonBombConvert::Clear() {
// @@protoc_insertion_point(message_clear_start:SCPoisonBombConvert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  ::memset(&poisonbombid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&killplayerid_) -
      reinterpret_cast<char*>(&poisonbombid_)) + sizeof(killplayerid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPoisonBombConvert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 PoisonBombId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          poisonbombid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PoisonbombConvert Info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 KillPlayerID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          killplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPoisonBombConvert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCPoisonBombConvert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PoisonBombId = 1;
  if (this->poisonbombid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_poisonbombid(), target);
  }

  // .PoisonbombConvert Info = 2;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::info(this), target, stream);
  }

  // int32 KillPlayerID = 3;
  if (this->killplayerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_killplayerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCPoisonBombConvert)
  return target;
}

size_t SCPoisonBombConvert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCPoisonBombConvert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PoisonbombConvert Info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // int32 PoisonBombId = 1;
  if (this->poisonbombid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_poisonbombid());
  }

  // int32 KillPlayerID = 3;
  if (this->killplayerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_killplayerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPoisonBombConvert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCPoisonBombConvert)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPoisonBombConvert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPoisonBombConvert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCPoisonBombConvert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCPoisonBombConvert)
    MergeFrom(*source);
  }
}

void SCPoisonBombConvert::MergeFrom(const SCPoisonBombConvert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCPoisonBombConvert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::PoisonbombConvert::MergeFrom(from._internal_info());
  }
  if (from.poisonbombid() != 0) {
    _internal_set_poisonbombid(from._internal_poisonbombid());
  }
  if (from.killplayerid() != 0) {
    _internal_set_killplayerid(from._internal_killplayerid());
  }
}

void SCPoisonBombConvert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCPoisonBombConvert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPoisonBombConvert::CopyFrom(const SCPoisonBombConvert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCPoisonBombConvert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPoisonBombConvert::IsInitialized() const {
  return true;
}

void SCPoisonBombConvert::InternalSwap(SCPoisonBombConvert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCPoisonBombConvert, killplayerid_)
      + sizeof(SCPoisonBombConvert::killplayerid_)
      - PROTOBUF_FIELD_OFFSET(SCPoisonBombConvert, info_)>(
          reinterpret_cast<char*>(&info_),
          reinterpret_cast<char*>(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPoisonBombConvert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PoisonbombType::_Internal {
 public:
};

PoisonbombType::PoisonbombType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PoisonbombType)
}
PoisonbombType::PoisonbombType(const PoisonbombType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&monsterid_, &from.monsterid_,
    static_cast<size_t>(reinterpret_cast<char*>(&processtime_) -
    reinterpret_cast<char*>(&monsterid_)) + sizeof(processtime_));
  // @@protoc_insertion_point(copy_constructor:PoisonbombType)
}

void PoisonbombType::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&monsterid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&processtime_) -
      reinterpret_cast<char*>(&monsterid_)) + sizeof(processtime_));
}

PoisonbombType::~PoisonbombType() {
  // @@protoc_insertion_point(destructor:PoisonbombType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PoisonbombType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PoisonbombType::ArenaDtor(void* object) {
  PoisonbombType* _this = reinterpret_cast< PoisonbombType* >(object);
  (void)_this;
}
void PoisonbombType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PoisonbombType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoisonbombType& PoisonbombType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PoisonbombType_JSBY_2eproto.base);
  return *internal_default_instance();
}


void PoisonbombType::Clear() {
// @@protoc_insertion_point(message_clear_start:PoisonbombType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&monsterid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&processtime_) -
      reinterpret_cast<char*>(&monsterid_)) + sizeof(processtime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoisonbombType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 MonsterId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          monsterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MasterPoisonBombId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          masterpoisonbombid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PoisonBombId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          poisonbombid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 KillPlayerId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          killplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ChannelId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          channelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ProcessTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          processtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoisonbombType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PoisonbombType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 MonsterId = 1;
  if (this->monsterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_monsterid(), target);
  }

  // int32 MasterPoisonBombId = 2;
  if (this->masterpoisonbombid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_masterpoisonbombid(), target);
  }

  // int32 PoisonBombId = 3;
  if (this->poisonbombid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_poisonbombid(), target);
  }

  // int32 KillPlayerId = 4;
  if (this->killplayerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_killplayerid(), target);
  }

  // int32 ChannelId = 5;
  if (this->channelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_channelid(), target);
  }

  // int32 ProcessTime = 6;
  if (this->processtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_processtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PoisonbombType)
  return target;
}

size_t PoisonbombType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PoisonbombType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 MonsterId = 1;
  if (this->monsterid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_monsterid());
  }

  // int32 MasterPoisonBombId = 2;
  if (this->masterpoisonbombid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_masterpoisonbombid());
  }

  // int32 PoisonBombId = 3;
  if (this->poisonbombid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_poisonbombid());
  }

  // int32 KillPlayerId = 4;
  if (this->killplayerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_killplayerid());
  }

  // int32 ChannelId = 5;
  if (this->channelid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channelid());
  }

  // int32 ProcessTime = 6;
  if (this->processtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_processtime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoisonbombType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PoisonbombType)
  GOOGLE_DCHECK_NE(&from, this);
  const PoisonbombType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PoisonbombType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PoisonbombType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PoisonbombType)
    MergeFrom(*source);
  }
}

void PoisonbombType::MergeFrom(const PoisonbombType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PoisonbombType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.monsterid() != 0) {
    _internal_set_monsterid(from._internal_monsterid());
  }
  if (from.masterpoisonbombid() != 0) {
    _internal_set_masterpoisonbombid(from._internal_masterpoisonbombid());
  }
  if (from.poisonbombid() != 0) {
    _internal_set_poisonbombid(from._internal_poisonbombid());
  }
  if (from.killplayerid() != 0) {
    _internal_set_killplayerid(from._internal_killplayerid());
  }
  if (from.channelid() != 0) {
    _internal_set_channelid(from._internal_channelid());
  }
  if (from.processtime() != 0) {
    _internal_set_processtime(from._internal_processtime());
  }
}

void PoisonbombType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PoisonbombType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoisonbombType::CopyFrom(const PoisonbombType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PoisonbombType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoisonbombType::IsInitialized() const {
  return true;
}

void PoisonbombType::InternalSwap(PoisonbombType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PoisonbombType, processtime_)
      + sizeof(PoisonbombType::processtime_)
      - PROTOBUF_FIELD_OFFSET(PoisonbombType, monsterid_)>(
          reinterpret_cast<char*>(&monsterid_),
          reinterpret_cast<char*>(&other->monsterid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PoisonbombType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPoisonbombTypes::_Internal {
 public:
  static const ::PoisonbombType& info(const SCPoisonbombTypes* msg);
};

const ::PoisonbombType&
SCPoisonbombTypes::_Internal::info(const SCPoisonbombTypes* msg) {
  return *msg->info_;
}
SCPoisonbombTypes::SCPoisonbombTypes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCPoisonbombTypes)
}
SCPoisonbombTypes::SCPoisonbombTypes(const SCPoisonbombTypes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::PoisonbombType(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SCPoisonbombTypes)
}

void SCPoisonbombTypes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCPoisonbombTypes_JSBY_2eproto.base);
  info_ = nullptr;
}

SCPoisonbombTypes::~SCPoisonbombTypes() {
  // @@protoc_insertion_point(destructor:SCPoisonbombTypes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPoisonbombTypes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void SCPoisonbombTypes::ArenaDtor(void* object) {
  SCPoisonbombTypes* _this = reinterpret_cast< SCPoisonbombTypes* >(object);
  (void)_this;
}
void SCPoisonbombTypes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPoisonbombTypes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPoisonbombTypes& SCPoisonbombTypes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPoisonbombTypes_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCPoisonbombTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:SCPoisonbombTypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPoisonbombTypes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PoisonbombType Info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPoisonbombTypes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCPoisonbombTypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PoisonbombType Info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCPoisonbombTypes)
  return target;
}

size_t SCPoisonbombTypes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCPoisonbombTypes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PoisonbombType Info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPoisonbombTypes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCPoisonbombTypes)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPoisonbombTypes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPoisonbombTypes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCPoisonbombTypes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCPoisonbombTypes)
    MergeFrom(*source);
  }
}

void SCPoisonbombTypes::MergeFrom(const SCPoisonbombTypes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCPoisonbombTypes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::PoisonbombType::MergeFrom(from._internal_info());
  }
}

void SCPoisonbombTypes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCPoisonbombTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPoisonbombTypes::CopyFrom(const SCPoisonbombTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCPoisonbombTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPoisonbombTypes::IsInitialized() const {
  return true;
}

void SCPoisonbombTypes::InternalSwap(SCPoisonbombTypes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPoisonbombTypes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSDragonRelease::_Internal {
 public:
};

CSDragonRelease::CSDragonRelease(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSDragonRelease)
}
CSDragonRelease::CSDragonRelease(const CSDragonRelease& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ratio_, &from.ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&propsid_) -
    reinterpret_cast<char*>(&ratio_)) + sizeof(propsid_));
  // @@protoc_insertion_point(copy_constructor:CSDragonRelease)
}

void CSDragonRelease::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ratio_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&propsid_) -
      reinterpret_cast<char*>(&ratio_)) + sizeof(propsid_));
}

CSDragonRelease::~CSDragonRelease() {
  // @@protoc_insertion_point(destructor:CSDragonRelease)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSDragonRelease::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSDragonRelease::ArenaDtor(void* object) {
  CSDragonRelease* _this = reinterpret_cast< CSDragonRelease* >(object);
  (void)_this;
}
void CSDragonRelease::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSDragonRelease::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSDragonRelease& CSDragonRelease::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSDragonRelease_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSDragonRelease::Clear() {
// @@protoc_insertion_point(message_clear_start:CSDragonRelease)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&propsid_) -
      reinterpret_cast<char*>(&ratio_)) + sizeof(propsid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDragonRelease::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Ratio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PropsID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          propsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSDragonRelease::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSDragonRelease)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Ratio = 1;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ratio(), target);
  }

  // int32 PropsID = 2;
  if (this->propsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_propsid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSDragonRelease)
  return target;
}

size_t CSDragonRelease::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSDragonRelease)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Ratio = 1;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // int32 PropsID = 2;
  if (this->propsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_propsid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSDragonRelease::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSDragonRelease)
  GOOGLE_DCHECK_NE(&from, this);
  const CSDragonRelease* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSDragonRelease>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSDragonRelease)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSDragonRelease)
    MergeFrom(*source);
  }
}

void CSDragonRelease::MergeFrom(const CSDragonRelease& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSDragonRelease)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.propsid() != 0) {
    _internal_set_propsid(from._internal_propsid());
  }
}

void CSDragonRelease::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSDragonRelease)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDragonRelease::CopyFrom(const CSDragonRelease& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSDragonRelease)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDragonRelease::IsInitialized() const {
  return true;
}

void CSDragonRelease::InternalSwap(CSDragonRelease* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDragonRelease, propsid_)
      + sizeof(CSDragonRelease::propsid_)
      - PROTOBUF_FIELD_OFFSET(CSDragonRelease, ratio_)>(
          reinterpret_cast<char*>(&ratio_),
          reinterpret_cast<char*>(&other->ratio_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDragonRelease::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCDragonRelease::_Internal {
 public:
  static const ::SpecialAttackInfo& attackinfo(const SCDragonRelease* msg);
};

const ::SpecialAttackInfo&
SCDragonRelease::_Internal::attackinfo(const SCDragonRelease* msg) {
  return *msg->attackinfo_;
}
SCDragonRelease::SCDragonRelease(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCDragonRelease)
}
SCDragonRelease::SCDragonRelease(const SCDragonRelease& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attackinfo()) {
    attackinfo_ = new ::SpecialAttackInfo(*from.attackinfo_);
  } else {
    attackinfo_ = nullptr;
  }
  ::memcpy(&starttime_, &from.starttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&starttime_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:SCDragonRelease)
}

void SCDragonRelease::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCDragonRelease_JSBY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&attackinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&attackinfo_)) + sizeof(playerid_));
}

SCDragonRelease::~SCDragonRelease() {
  // @@protoc_insertion_point(destructor:SCDragonRelease)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCDragonRelease::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete attackinfo_;
}

void SCDragonRelease::ArenaDtor(void* object) {
  SCDragonRelease* _this = reinterpret_cast< SCDragonRelease* >(object);
  (void)_this;
}
void SCDragonRelease::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCDragonRelease::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCDragonRelease& SCDragonRelease::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCDragonRelease_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCDragonRelease::Clear() {
// @@protoc_insertion_point(message_clear_start:SCDragonRelease)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && attackinfo_ != nullptr) {
    delete attackinfo_;
  }
  attackinfo_ = nullptr;
  ::memset(&starttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&starttime_)) + sizeof(playerid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCDragonRelease::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 StartTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PlayerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SpecialAttackInfo AttackInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_attackinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCDragonRelease::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCDragonRelease)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 StartTime = 1;
  if (this->starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_starttime(), target);
  }

  // int32 PlayerId = 2;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_playerid(), target);
  }

  // .SpecialAttackInfo AttackInfo = 3;
  if (this->has_attackinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::attackinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCDragonRelease)
  return target;
}

size_t SCDragonRelease::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCDragonRelease)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SpecialAttackInfo AttackInfo = 3;
  if (this->has_attackinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attackinfo_);
  }

  // int32 StartTime = 1;
  if (this->starttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_starttime());
  }

  // int32 PlayerId = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCDragonRelease::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCDragonRelease)
  GOOGLE_DCHECK_NE(&from, this);
  const SCDragonRelease* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCDragonRelease>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCDragonRelease)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCDragonRelease)
    MergeFrom(*source);
  }
}

void SCDragonRelease::MergeFrom(const SCDragonRelease& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCDragonRelease)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_attackinfo()) {
    _internal_mutable_attackinfo()->::SpecialAttackInfo::MergeFrom(from._internal_attackinfo());
  }
  if (from.starttime() != 0) {
    _internal_set_starttime(from._internal_starttime());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
}

void SCDragonRelease::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCDragonRelease)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCDragonRelease::CopyFrom(const SCDragonRelease& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCDragonRelease)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCDragonRelease::IsInitialized() const {
  return true;
}

void SCDragonRelease::InternalSwap(SCDragonRelease* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCDragonRelease, playerid_)
      + sizeof(SCDragonRelease::playerid_)
      - PROTOBUF_FIELD_OFFSET(SCDragonRelease, attackinfo_)>(
          reinterpret_cast<char*>(&attackinfo_),
          reinterpret_cast<char*>(&other->attackinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCDragonRelease::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPushDragonRelease::_Internal {
 public:
  static const ::SpecialAttackInfo& attackinfo(const SCPushDragonRelease* msg);
};

const ::SpecialAttackInfo&
SCPushDragonRelease::_Internal::attackinfo(const SCPushDragonRelease* msg) {
  return *msg->attackinfo_;
}
SCPushDragonRelease::SCPushDragonRelease(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCPushDragonRelease)
}
SCPushDragonRelease::SCPushDragonRelease(const SCPushDragonRelease& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attackinfo()) {
    attackinfo_ = new ::SpecialAttackInfo(*from.attackinfo_);
  } else {
    attackinfo_ = nullptr;
  }
  ::memcpy(&starttime_, &from.starttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&starttime_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:SCPushDragonRelease)
}

void SCPushDragonRelease::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCPushDragonRelease_JSBY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&attackinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&attackinfo_)) + sizeof(playerid_));
}

SCPushDragonRelease::~SCPushDragonRelease() {
  // @@protoc_insertion_point(destructor:SCPushDragonRelease)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPushDragonRelease::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete attackinfo_;
}

void SCPushDragonRelease::ArenaDtor(void* object) {
  SCPushDragonRelease* _this = reinterpret_cast< SCPushDragonRelease* >(object);
  (void)_this;
}
void SCPushDragonRelease::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPushDragonRelease::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPushDragonRelease& SCPushDragonRelease::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPushDragonRelease_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCPushDragonRelease::Clear() {
// @@protoc_insertion_point(message_clear_start:SCPushDragonRelease)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && attackinfo_ != nullptr) {
    delete attackinfo_;
  }
  attackinfo_ = nullptr;
  ::memset(&starttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&starttime_)) + sizeof(playerid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPushDragonRelease::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 StartTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PlayerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SpecialAttackInfo AttackInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_attackinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPushDragonRelease::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCPushDragonRelease)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 StartTime = 1;
  if (this->starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_starttime(), target);
  }

  // int32 PlayerId = 2;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_playerid(), target);
  }

  // .SpecialAttackInfo AttackInfo = 3;
  if (this->has_attackinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::attackinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCPushDragonRelease)
  return target;
}

size_t SCPushDragonRelease::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCPushDragonRelease)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SpecialAttackInfo AttackInfo = 3;
  if (this->has_attackinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attackinfo_);
  }

  // int32 StartTime = 1;
  if (this->starttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_starttime());
  }

  // int32 PlayerId = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPushDragonRelease::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCPushDragonRelease)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPushDragonRelease* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPushDragonRelease>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCPushDragonRelease)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCPushDragonRelease)
    MergeFrom(*source);
  }
}

void SCPushDragonRelease::MergeFrom(const SCPushDragonRelease& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCPushDragonRelease)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_attackinfo()) {
    _internal_mutable_attackinfo()->::SpecialAttackInfo::MergeFrom(from._internal_attackinfo());
  }
  if (from.starttime() != 0) {
    _internal_set_starttime(from._internal_starttime());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
}

void SCPushDragonRelease::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCPushDragonRelease)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPushDragonRelease::CopyFrom(const SCPushDragonRelease& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCPushDragonRelease)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPushDragonRelease::IsInitialized() const {
  return true;
}

void SCPushDragonRelease::InternalSwap(SCPushDragonRelease* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCPushDragonRelease, playerid_)
      + sizeof(SCPushDragonRelease::playerid_)
      - PROTOBUF_FIELD_OFFSET(SCPushDragonRelease, attackinfo_)>(
          reinterpret_cast<char*>(&attackinfo_),
          reinterpret_cast<char*>(&other->attackinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPushDragonRelease::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPushDragonEnd::_Internal {
 public:
};

SCPushDragonEnd::SCPushDragonEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCPushDragonEnd)
}
SCPushDragonEnd::SCPushDragonEnd(const SCPushDragonEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:SCPushDragonEnd)
}

void SCPushDragonEnd::SharedCtor() {
  playerid_ = 0;
}

SCPushDragonEnd::~SCPushDragonEnd() {
  // @@protoc_insertion_point(destructor:SCPushDragonEnd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPushDragonEnd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCPushDragonEnd::ArenaDtor(void* object) {
  SCPushDragonEnd* _this = reinterpret_cast< SCPushDragonEnd* >(object);
  (void)_this;
}
void SCPushDragonEnd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPushDragonEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPushDragonEnd& SCPushDragonEnd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPushDragonEnd_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCPushDragonEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:SCPushDragonEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPushDragonEnd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 PlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPushDragonEnd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCPushDragonEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PlayerId = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCPushDragonEnd)
  return target;
}

size_t SCPushDragonEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCPushDragonEnd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PlayerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPushDragonEnd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCPushDragonEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPushDragonEnd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPushDragonEnd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCPushDragonEnd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCPushDragonEnd)
    MergeFrom(*source);
  }
}

void SCPushDragonEnd::MergeFrom(const SCPushDragonEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCPushDragonEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
}

void SCPushDragonEnd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCPushDragonEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPushDragonEnd::CopyFrom(const SCPushDragonEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCPushDragonEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPushDragonEnd::IsInitialized() const {
  return true;
}

void SCPushDragonEnd::InternalSwap(SCPushDragonEnd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(playerid_, other->playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPushDragonEnd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPushSelfDragonState::_Internal {
 public:
};

SCPushSelfDragonState::SCPushSelfDragonState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCPushSelfDragonState)
}
SCPushSelfDragonState::SCPushSelfDragonState(const SCPushSelfDragonState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&progressbarcount_, &from.progressbarcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&propsid_) -
    reinterpret_cast<char*>(&progressbarcount_)) + sizeof(propsid_));
  // @@protoc_insertion_point(copy_constructor:SCPushSelfDragonState)
}

void SCPushSelfDragonState::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&progressbarcount_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&propsid_) -
      reinterpret_cast<char*>(&progressbarcount_)) + sizeof(propsid_));
}

SCPushSelfDragonState::~SCPushSelfDragonState() {
  // @@protoc_insertion_point(destructor:SCPushSelfDragonState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPushSelfDragonState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCPushSelfDragonState::ArenaDtor(void* object) {
  SCPushSelfDragonState* _this = reinterpret_cast< SCPushSelfDragonState* >(object);
  (void)_this;
}
void SCPushSelfDragonState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPushSelfDragonState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPushSelfDragonState& SCPushSelfDragonState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPushSelfDragonState_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCPushSelfDragonState::Clear() {
// @@protoc_insertion_point(message_clear_start:SCPushSelfDragonState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&progressbarcount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&propsid_) -
      reinterpret_cast<char*>(&progressbarcount_)) + sizeof(propsid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPushSelfDragonState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ProgressBarCount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          progressbarcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ProgressBar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          progressbar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PropsID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          propsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPushSelfDragonState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCPushSelfDragonState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ProgressBarCount = 1;
  if (this->progressbarcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_progressbarcount(), target);
  }

  // int32 ProgressBar = 2;
  if (this->progressbar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_progressbar(), target);
  }

  // int32 PropsID = 3;
  if (this->propsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_propsid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCPushSelfDragonState)
  return target;
}

size_t SCPushSelfDragonState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCPushSelfDragonState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ProgressBarCount = 1;
  if (this->progressbarcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_progressbarcount());
  }

  // int32 ProgressBar = 2;
  if (this->progressbar() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_progressbar());
  }

  // int32 PropsID = 3;
  if (this->propsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_propsid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPushSelfDragonState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCPushSelfDragonState)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPushSelfDragonState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPushSelfDragonState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCPushSelfDragonState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCPushSelfDragonState)
    MergeFrom(*source);
  }
}

void SCPushSelfDragonState::MergeFrom(const SCPushSelfDragonState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCPushSelfDragonState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.progressbarcount() != 0) {
    _internal_set_progressbarcount(from._internal_progressbarcount());
  }
  if (from.progressbar() != 0) {
    _internal_set_progressbar(from._internal_progressbar());
  }
  if (from.propsid() != 0) {
    _internal_set_propsid(from._internal_propsid());
  }
}

void SCPushSelfDragonState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCPushSelfDragonState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPushSelfDragonState::CopyFrom(const SCPushSelfDragonState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCPushSelfDragonState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPushSelfDragonState::IsInitialized() const {
  return true;
}

void SCPushSelfDragonState::InternalSwap(SCPushSelfDragonState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCPushSelfDragonState, propsid_)
      + sizeof(SCPushSelfDragonState::propsid_)
      - PROTOBUF_FIELD_OFFSET(SCPushSelfDragonState, progressbarcount_)>(
          reinterpret_cast<char*>(&progressbarcount_),
          reinterpret_cast<char*>(&other->progressbarcount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPushSelfDragonState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSOneKeyUpdateHero::_Internal {
 public:
};

CSOneKeyUpdateHero::CSOneKeyUpdateHero(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  heroid_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOneKeyUpdateHero)
}
CSOneKeyUpdateHero::CSOneKeyUpdateHero(const CSOneKeyUpdateHero& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      heroid_(from.heroid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSOneKeyUpdateHero)
}

void CSOneKeyUpdateHero::SharedCtor() {
}

CSOneKeyUpdateHero::~CSOneKeyUpdateHero() {
  // @@protoc_insertion_point(destructor:CSOneKeyUpdateHero)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOneKeyUpdateHero::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSOneKeyUpdateHero::ArenaDtor(void* object) {
  CSOneKeyUpdateHero* _this = reinterpret_cast< CSOneKeyUpdateHero* >(object);
  (void)_this;
}
void CSOneKeyUpdateHero::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOneKeyUpdateHero::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSOneKeyUpdateHero& CSOneKeyUpdateHero::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSOneKeyUpdateHero_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSOneKeyUpdateHero::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOneKeyUpdateHero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  heroid_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOneKeyUpdateHero::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 HeroId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_heroid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_heroid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOneKeyUpdateHero::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOneKeyUpdateHero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 HeroId = 1;
  {
    int byte_size = _heroid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_heroid(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOneKeyUpdateHero)
  return target;
}

size_t CSOneKeyUpdateHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOneKeyUpdateHero)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 HeroId = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->heroid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _heroid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOneKeyUpdateHero::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOneKeyUpdateHero)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOneKeyUpdateHero* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOneKeyUpdateHero>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOneKeyUpdateHero)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOneKeyUpdateHero)
    MergeFrom(*source);
  }
}

void CSOneKeyUpdateHero::MergeFrom(const CSOneKeyUpdateHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOneKeyUpdateHero)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  heroid_.MergeFrom(from.heroid_);
}

void CSOneKeyUpdateHero::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOneKeyUpdateHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOneKeyUpdateHero::CopyFrom(const CSOneKeyUpdateHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOneKeyUpdateHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOneKeyUpdateHero::IsInitialized() const {
  return true;
}

void CSOneKeyUpdateHero::InternalSwap(CSOneKeyUpdateHero* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  heroid_.InternalSwap(&other->heroid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOneKeyUpdateHero::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCOneKeyUpdateHero::_Internal {
 public:
  static const ::TowerHeroInfo& leaveinfo(const SCOneKeyUpdateHero* msg);
  static const ::TowerHeroInfo& updateinfo(const SCOneKeyUpdateHero* msg);
};

const ::TowerHeroInfo&
SCOneKeyUpdateHero::_Internal::leaveinfo(const SCOneKeyUpdateHero* msg) {
  return *msg->leaveinfo_;
}
const ::TowerHeroInfo&
SCOneKeyUpdateHero::_Internal::updateinfo(const SCOneKeyUpdateHero* msg) {
  return *msg->updateinfo_;
}
SCOneKeyUpdateHero::SCOneKeyUpdateHero(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCOneKeyUpdateHero)
}
SCOneKeyUpdateHero::SCOneKeyUpdateHero(const SCOneKeyUpdateHero& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_leaveinfo()) {
    leaveinfo_ = new ::TowerHeroInfo(*from.leaveinfo_);
  } else {
    leaveinfo_ = nullptr;
  }
  if (from._internal_has_updateinfo()) {
    updateinfo_ = new ::TowerHeroInfo(*from.updateinfo_);
  } else {
    updateinfo_ = nullptr;
  }
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tableid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(tableid_));
  // @@protoc_insertion_point(copy_constructor:SCOneKeyUpdateHero)
}

void SCOneKeyUpdateHero::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCOneKeyUpdateHero_JSBY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&leaveinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&tableid_) -
      reinterpret_cast<char*>(&leaveinfo_)) + sizeof(tableid_));
}

SCOneKeyUpdateHero::~SCOneKeyUpdateHero() {
  // @@protoc_insertion_point(destructor:SCOneKeyUpdateHero)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCOneKeyUpdateHero::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete leaveinfo_;
  if (this != internal_default_instance()) delete updateinfo_;
}

void SCOneKeyUpdateHero::ArenaDtor(void* object) {
  SCOneKeyUpdateHero* _this = reinterpret_cast< SCOneKeyUpdateHero* >(object);
  (void)_this;
}
void SCOneKeyUpdateHero::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCOneKeyUpdateHero::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCOneKeyUpdateHero& SCOneKeyUpdateHero::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCOneKeyUpdateHero_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCOneKeyUpdateHero::Clear() {
// @@protoc_insertion_point(message_clear_start:SCOneKeyUpdateHero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && leaveinfo_ != nullptr) {
    delete leaveinfo_;
  }
  leaveinfo_ = nullptr;
  if (GetArena() == nullptr && updateinfo_ != nullptr) {
    delete updateinfo_;
  }
  updateinfo_ = nullptr;
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tableid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(tableid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCOneKeyUpdateHero::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 PlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TowerHeroInfo LeaveInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_leaveinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TowerHeroInfo updateInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_updateinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 TableId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          tableid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCOneKeyUpdateHero::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCOneKeyUpdateHero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PlayerId = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // .TowerHeroInfo LeaveInfo = 2;
  if (this->has_leaveinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::leaveinfo(this), target, stream);
  }

  // .TowerHeroInfo updateInfo = 3;
  if (this->has_updateinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::updateinfo(this), target, stream);
  }

  // int32 TableId = 4;
  if (this->tableid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_tableid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCOneKeyUpdateHero)
  return target;
}

size_t SCOneKeyUpdateHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCOneKeyUpdateHero)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TowerHeroInfo LeaveInfo = 2;
  if (this->has_leaveinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leaveinfo_);
  }

  // .TowerHeroInfo updateInfo = 3;
  if (this->has_updateinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updateinfo_);
  }

  // int32 PlayerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  // int32 TableId = 4;
  if (this->tableid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tableid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCOneKeyUpdateHero::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCOneKeyUpdateHero)
  GOOGLE_DCHECK_NE(&from, this);
  const SCOneKeyUpdateHero* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCOneKeyUpdateHero>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCOneKeyUpdateHero)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCOneKeyUpdateHero)
    MergeFrom(*source);
  }
}

void SCOneKeyUpdateHero::MergeFrom(const SCOneKeyUpdateHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCOneKeyUpdateHero)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_leaveinfo()) {
    _internal_mutable_leaveinfo()->::TowerHeroInfo::MergeFrom(from._internal_leaveinfo());
  }
  if (from.has_updateinfo()) {
    _internal_mutable_updateinfo()->::TowerHeroInfo::MergeFrom(from._internal_updateinfo());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.tableid() != 0) {
    _internal_set_tableid(from._internal_tableid());
  }
}

void SCOneKeyUpdateHero::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCOneKeyUpdateHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCOneKeyUpdateHero::CopyFrom(const SCOneKeyUpdateHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCOneKeyUpdateHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCOneKeyUpdateHero::IsInitialized() const {
  return true;
}

void SCOneKeyUpdateHero::InternalSwap(SCOneKeyUpdateHero* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCOneKeyUpdateHero, tableid_)
      + sizeof(SCOneKeyUpdateHero::tableid_)
      - PROTOBUF_FIELD_OFFSET(SCOneKeyUpdateHero, leaveinfo_)>(
          reinterpret_cast<char*>(&leaveinfo_),
          reinterpret_cast<char*>(&other->leaveinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCOneKeyUpdateHero::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPushGhostDragonRelease::_Internal {
 public:
  static const ::SpecialAttackInfo& attackinfo(const SCPushGhostDragonRelease* msg);
};

const ::SpecialAttackInfo&
SCPushGhostDragonRelease::_Internal::attackinfo(const SCPushGhostDragonRelease* msg) {
  return *msg->attackinfo_;
}
SCPushGhostDragonRelease::SCPushGhostDragonRelease(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCPushGhostDragonRelease)
}
SCPushGhostDragonRelease::SCPushGhostDragonRelease(const SCPushGhostDragonRelease& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attackinfo()) {
    attackinfo_ = new ::SpecialAttackInfo(*from.attackinfo_);
  } else {
    attackinfo_ = nullptr;
  }
  ::memcpy(&starttime_, &from.starttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&ratio_) -
    reinterpret_cast<char*>(&starttime_)) + sizeof(ratio_));
  // @@protoc_insertion_point(copy_constructor:SCPushGhostDragonRelease)
}

void SCPushGhostDragonRelease::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCPushGhostDragonRelease_JSBY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&attackinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ratio_) -
      reinterpret_cast<char*>(&attackinfo_)) + sizeof(ratio_));
}

SCPushGhostDragonRelease::~SCPushGhostDragonRelease() {
  // @@protoc_insertion_point(destructor:SCPushGhostDragonRelease)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPushGhostDragonRelease::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete attackinfo_;
}

void SCPushGhostDragonRelease::ArenaDtor(void* object) {
  SCPushGhostDragonRelease* _this = reinterpret_cast< SCPushGhostDragonRelease* >(object);
  (void)_this;
}
void SCPushGhostDragonRelease::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPushGhostDragonRelease::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPushGhostDragonRelease& SCPushGhostDragonRelease::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPushGhostDragonRelease_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCPushGhostDragonRelease::Clear() {
// @@protoc_insertion_point(message_clear_start:SCPushGhostDragonRelease)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && attackinfo_ != nullptr) {
    delete attackinfo_;
  }
  attackinfo_ = nullptr;
  ::memset(&starttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ratio_) -
      reinterpret_cast<char*>(&starttime_)) + sizeof(ratio_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPushGhostDragonRelease::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 StartTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PlayerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PositionId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          positionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 AttackCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          attackcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 UseCount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          usecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Ratio = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SpecialAttackInfo AttackInfo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_attackinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPushGhostDragonRelease::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCPushGhostDragonRelease)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 StartTime = 1;
  if (this->starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_starttime(), target);
  }

  // int32 PlayerId = 2;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_playerid(), target);
  }

  // int32 PositionId = 3;
  if (this->positionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_positionid(), target);
  }

  // int32 AttackCount = 4;
  if (this->attackcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_attackcount(), target);
  }

  // int32 UseCount = 5;
  if (this->usecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_usecount(), target);
  }

  // int32 Ratio = 6;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_ratio(), target);
  }

  // .SpecialAttackInfo AttackInfo = 7;
  if (this->has_attackinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::attackinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCPushGhostDragonRelease)
  return target;
}

size_t SCPushGhostDragonRelease::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCPushGhostDragonRelease)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SpecialAttackInfo AttackInfo = 7;
  if (this->has_attackinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attackinfo_);
  }

  // int32 StartTime = 1;
  if (this->starttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_starttime());
  }

  // int32 PlayerId = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  // int32 PositionId = 3;
  if (this->positionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_positionid());
  }

  // int32 AttackCount = 4;
  if (this->attackcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attackcount());
  }

  // int32 UseCount = 5;
  if (this->usecount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_usecount());
  }

  // int32 Ratio = 6;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPushGhostDragonRelease::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCPushGhostDragonRelease)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPushGhostDragonRelease* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPushGhostDragonRelease>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCPushGhostDragonRelease)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCPushGhostDragonRelease)
    MergeFrom(*source);
  }
}

void SCPushGhostDragonRelease::MergeFrom(const SCPushGhostDragonRelease& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCPushGhostDragonRelease)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_attackinfo()) {
    _internal_mutable_attackinfo()->::SpecialAttackInfo::MergeFrom(from._internal_attackinfo());
  }
  if (from.starttime() != 0) {
    _internal_set_starttime(from._internal_starttime());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.positionid() != 0) {
    _internal_set_positionid(from._internal_positionid());
  }
  if (from.attackcount() != 0) {
    _internal_set_attackcount(from._internal_attackcount());
  }
  if (from.usecount() != 0) {
    _internal_set_usecount(from._internal_usecount());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
}

void SCPushGhostDragonRelease::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCPushGhostDragonRelease)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPushGhostDragonRelease::CopyFrom(const SCPushGhostDragonRelease& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCPushGhostDragonRelease)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPushGhostDragonRelease::IsInitialized() const {
  return true;
}

void SCPushGhostDragonRelease::InternalSwap(SCPushGhostDragonRelease* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCPushGhostDragonRelease, ratio_)
      + sizeof(SCPushGhostDragonRelease::ratio_)
      - PROTOBUF_FIELD_OFFSET(SCPushGhostDragonRelease, attackinfo_)>(
          reinterpret_cast<char*>(&attackinfo_),
          reinterpret_cast<char*>(&other->attackinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPushGhostDragonRelease::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPushGhostDragonEnd::_Internal {
 public:
};

SCPushGhostDragonEnd::SCPushGhostDragonEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCPushGhostDragonEnd)
}
SCPushGhostDragonEnd::SCPushGhostDragonEnd(const SCPushGhostDragonEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tableid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(tableid_));
  // @@protoc_insertion_point(copy_constructor:SCPushGhostDragonEnd)
}

void SCPushGhostDragonEnd::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&tableid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(tableid_));
}

SCPushGhostDragonEnd::~SCPushGhostDragonEnd() {
  // @@protoc_insertion_point(destructor:SCPushGhostDragonEnd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPushGhostDragonEnd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCPushGhostDragonEnd::ArenaDtor(void* object) {
  SCPushGhostDragonEnd* _this = reinterpret_cast< SCPushGhostDragonEnd* >(object);
  (void)_this;
}
void SCPushGhostDragonEnd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPushGhostDragonEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPushGhostDragonEnd& SCPushGhostDragonEnd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPushGhostDragonEnd_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCPushGhostDragonEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:SCPushGhostDragonEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tableid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(tableid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPushGhostDragonEnd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 PlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 TableID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tableid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPushGhostDragonEnd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCPushGhostDragonEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PlayerId = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // int32 TableID = 2;
  if (this->tableid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_tableid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCPushGhostDragonEnd)
  return target;
}

size_t SCPushGhostDragonEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCPushGhostDragonEnd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PlayerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  // int32 TableID = 2;
  if (this->tableid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tableid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPushGhostDragonEnd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCPushGhostDragonEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPushGhostDragonEnd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPushGhostDragonEnd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCPushGhostDragonEnd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCPushGhostDragonEnd)
    MergeFrom(*source);
  }
}

void SCPushGhostDragonEnd::MergeFrom(const SCPushGhostDragonEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCPushGhostDragonEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.tableid() != 0) {
    _internal_set_tableid(from._internal_tableid());
  }
}

void SCPushGhostDragonEnd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCPushGhostDragonEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPushGhostDragonEnd::CopyFrom(const SCPushGhostDragonEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCPushGhostDragonEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPushGhostDragonEnd::IsInitialized() const {
  return true;
}

void SCPushGhostDragonEnd::InternalSwap(SCPushGhostDragonEnd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCPushGhostDragonEnd, tableid_)
      + sizeof(SCPushGhostDragonEnd::tableid_)
      - PROTOBUF_FIELD_OFFSET(SCPushGhostDragonEnd, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPushGhostDragonEnd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPushSelfGhostDragonState::_Internal {
 public:
};

SCPushSelfGhostDragonState::SCPushSelfGhostDragonState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCPushSelfGhostDragonState)
}
SCPushSelfGhostDragonState::SCPushSelfGhostDragonState(const SCPushSelfGhostDragonState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:SCPushSelfGhostDragonState)
}

void SCPushSelfGhostDragonState::SharedCtor() {
  count_ = 0;
}

SCPushSelfGhostDragonState::~SCPushSelfGhostDragonState() {
  // @@protoc_insertion_point(destructor:SCPushSelfGhostDragonState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPushSelfGhostDragonState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCPushSelfGhostDragonState::ArenaDtor(void* object) {
  SCPushSelfGhostDragonState* _this = reinterpret_cast< SCPushSelfGhostDragonState* >(object);
  (void)_this;
}
void SCPushSelfGhostDragonState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPushSelfGhostDragonState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPushSelfGhostDragonState& SCPushSelfGhostDragonState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPushSelfGhostDragonState_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCPushSelfGhostDragonState::Clear() {
// @@protoc_insertion_point(message_clear_start:SCPushSelfGhostDragonState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPushSelfGhostDragonState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPushSelfGhostDragonState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCPushSelfGhostDragonState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Count = 1;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCPushSelfGhostDragonState)
  return target;
}

size_t SCPushSelfGhostDragonState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCPushSelfGhostDragonState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPushSelfGhostDragonState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCPushSelfGhostDragonState)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPushSelfGhostDragonState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPushSelfGhostDragonState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCPushSelfGhostDragonState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCPushSelfGhostDragonState)
    MergeFrom(*source);
  }
}

void SCPushSelfGhostDragonState::MergeFrom(const SCPushSelfGhostDragonState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCPushSelfGhostDragonState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void SCPushSelfGhostDragonState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCPushSelfGhostDragonState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPushSelfGhostDragonState::CopyFrom(const SCPushSelfGhostDragonState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCPushSelfGhostDragonState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPushSelfGhostDragonState::IsInitialized() const {
  return true;
}

void SCPushSelfGhostDragonState::InternalSwap(SCPushSelfGhostDragonState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPushSelfGhostDragonState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HeroMoney::_Internal {
 public:
};

HeroMoney::HeroMoney(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HeroMoney)
}
HeroMoney::HeroMoney(const HeroMoney& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&uniqueid_, &from.uniqueid_,
    static_cast<size_t>(reinterpret_cast<char*>(&money_) -
    reinterpret_cast<char*>(&uniqueid_)) + sizeof(money_));
  // @@protoc_insertion_point(copy_constructor:HeroMoney)
}

void HeroMoney::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&uniqueid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&money_) -
      reinterpret_cast<char*>(&uniqueid_)) + sizeof(money_));
}

HeroMoney::~HeroMoney() {
  // @@protoc_insertion_point(destructor:HeroMoney)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HeroMoney::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HeroMoney::ArenaDtor(void* object) {
  HeroMoney* _this = reinterpret_cast< HeroMoney* >(object);
  (void)_this;
}
void HeroMoney::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeroMoney::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeroMoney& HeroMoney::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeroMoney_JSBY_2eproto.base);
  return *internal_default_instance();
}


void HeroMoney::Clear() {
// @@protoc_insertion_point(message_clear_start:HeroMoney)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uniqueid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&money_) -
      reinterpret_cast<char*>(&uniqueid_)) + sizeof(money_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeroMoney::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 UniqueId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uniqueid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PlayerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Money = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeroMoney::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HeroMoney)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 UniqueId = 1;
  if (this->uniqueid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uniqueid(), target);
  }

  // int32 PlayerId = 2;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_playerid(), target);
  }

  // int32 Money = 3;
  if (this->money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_money(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HeroMoney)
  return target;
}

size_t HeroMoney::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HeroMoney)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 UniqueId = 1;
  if (this->uniqueid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uniqueid());
  }

  // int32 PlayerId = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  // int32 Money = 3;
  if (this->money() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_money());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeroMoney::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HeroMoney)
  GOOGLE_DCHECK_NE(&from, this);
  const HeroMoney* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeroMoney>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HeroMoney)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HeroMoney)
    MergeFrom(*source);
  }
}

void HeroMoney::MergeFrom(const HeroMoney& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HeroMoney)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uniqueid() != 0) {
    _internal_set_uniqueid(from._internal_uniqueid());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.money() != 0) {
    _internal_set_money(from._internal_money());
  }
}

void HeroMoney::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HeroMoney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroMoney::CopyFrom(const HeroMoney& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HeroMoney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroMoney::IsInitialized() const {
  return true;
}

void HeroMoney::InternalSwap(HeroMoney* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeroMoney, money_)
      + sizeof(HeroMoney::money_)
      - PROTOBUF_FIELD_OFFSET(HeroMoney, uniqueid_)>(
          reinterpret_cast<char*>(&uniqueid_),
          reinterpret_cast<char*>(&other->uniqueid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeroMoney::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPushSyncHeroMoney::_Internal {
 public:
  static const ::HeroMoney& heromoney(const SCPushSyncHeroMoney* msg);
};

const ::HeroMoney&
SCPushSyncHeroMoney::_Internal::heromoney(const SCPushSyncHeroMoney* msg) {
  return *msg->heromoney_;
}
SCPushSyncHeroMoney::SCPushSyncHeroMoney(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCPushSyncHeroMoney)
}
SCPushSyncHeroMoney::SCPushSyncHeroMoney(const SCPushSyncHeroMoney& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_heromoney()) {
    heromoney_ = new ::HeroMoney(*from.heromoney_);
  } else {
    heromoney_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SCPushSyncHeroMoney)
}

void SCPushSyncHeroMoney::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCPushSyncHeroMoney_JSBY_2eproto.base);
  heromoney_ = nullptr;
}

SCPushSyncHeroMoney::~SCPushSyncHeroMoney() {
  // @@protoc_insertion_point(destructor:SCPushSyncHeroMoney)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPushSyncHeroMoney::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete heromoney_;
}

void SCPushSyncHeroMoney::ArenaDtor(void* object) {
  SCPushSyncHeroMoney* _this = reinterpret_cast< SCPushSyncHeroMoney* >(object);
  (void)_this;
}
void SCPushSyncHeroMoney::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPushSyncHeroMoney::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPushSyncHeroMoney& SCPushSyncHeroMoney::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPushSyncHeroMoney_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCPushSyncHeroMoney::Clear() {
// @@protoc_insertion_point(message_clear_start:SCPushSyncHeroMoney)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && heromoney_ != nullptr) {
    delete heromoney_;
  }
  heromoney_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPushSyncHeroMoney::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .HeroMoney HeroMoney = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_heromoney(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPushSyncHeroMoney::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCPushSyncHeroMoney)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .HeroMoney HeroMoney = 1;
  if (this->has_heromoney()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::heromoney(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCPushSyncHeroMoney)
  return target;
}

size_t SCPushSyncHeroMoney::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCPushSyncHeroMoney)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .HeroMoney HeroMoney = 1;
  if (this->has_heromoney()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heromoney_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPushSyncHeroMoney::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCPushSyncHeroMoney)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPushSyncHeroMoney* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPushSyncHeroMoney>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCPushSyncHeroMoney)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCPushSyncHeroMoney)
    MergeFrom(*source);
  }
}

void SCPushSyncHeroMoney::MergeFrom(const SCPushSyncHeroMoney& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCPushSyncHeroMoney)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_heromoney()) {
    _internal_mutable_heromoney()->::HeroMoney::MergeFrom(from._internal_heromoney());
  }
}

void SCPushSyncHeroMoney::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCPushSyncHeroMoney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPushSyncHeroMoney::CopyFrom(const SCPushSyncHeroMoney& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCPushSyncHeroMoney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPushSyncHeroMoney::IsInitialized() const {
  return true;
}

void SCPushSyncHeroMoney::InternalSwap(SCPushSyncHeroMoney* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(heromoney_, other->heromoney_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPushSyncHeroMoney::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPushMonsterDead::_Internal {
 public:
};

SCPushMonsterDead::SCPushMonsterDead(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCPushMonsterDead)
}
SCPushMonsterDead::SCPushMonsterDead(const SCPushMonsterDead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&positionid_, &from.positionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tableid_) -
    reinterpret_cast<char*>(&positionid_)) + sizeof(tableid_));
  // @@protoc_insertion_point(copy_constructor:SCPushMonsterDead)
}

void SCPushMonsterDead::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&positionid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&tableid_) -
      reinterpret_cast<char*>(&positionid_)) + sizeof(tableid_));
}

SCPushMonsterDead::~SCPushMonsterDead() {
  // @@protoc_insertion_point(destructor:SCPushMonsterDead)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPushMonsterDead::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCPushMonsterDead::ArenaDtor(void* object) {
  SCPushMonsterDead* _this = reinterpret_cast< SCPushMonsterDead* >(object);
  (void)_this;
}
void SCPushMonsterDead::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPushMonsterDead::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPushMonsterDead& SCPushMonsterDead::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPushMonsterDead_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCPushMonsterDead::Clear() {
// @@protoc_insertion_point(message_clear_start:SCPushMonsterDead)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&positionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tableid_) -
      reinterpret_cast<char*>(&positionid_)) + sizeof(tableid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPushMonsterDead::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 PositionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          positionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 TableID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tableid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPushMonsterDead::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCPushMonsterDead)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PositionID = 1;
  if (this->positionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_positionid(), target);
  }

  // int32 TableID = 2;
  if (this->tableid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_tableid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCPushMonsterDead)
  return target;
}

size_t SCPushMonsterDead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCPushMonsterDead)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PositionID = 1;
  if (this->positionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_positionid());
  }

  // int32 TableID = 2;
  if (this->tableid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tableid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPushMonsterDead::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCPushMonsterDead)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPushMonsterDead* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPushMonsterDead>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCPushMonsterDead)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCPushMonsterDead)
    MergeFrom(*source);
  }
}

void SCPushMonsterDead::MergeFrom(const SCPushMonsterDead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCPushMonsterDead)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.positionid() != 0) {
    _internal_set_positionid(from._internal_positionid());
  }
  if (from.tableid() != 0) {
    _internal_set_tableid(from._internal_tableid());
  }
}

void SCPushMonsterDead::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCPushMonsterDead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPushMonsterDead::CopyFrom(const SCPushMonsterDead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCPushMonsterDead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPushMonsterDead::IsInitialized() const {
  return true;
}

void SCPushMonsterDead::InternalSwap(SCPushMonsterDead* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCPushMonsterDead, tableid_)
      + sizeof(SCPushMonsterDead::tableid_)
      - PROTOBUF_FIELD_OFFSET(SCPushMonsterDead, positionid_)>(
          reinterpret_cast<char*>(&positionid_),
          reinterpret_cast<char*>(&other->positionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPushMonsterDead::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSDebugData::_Internal {
 public:
};

CSDebugData::CSDebugData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSDebugData)
}
CSDebugData::CSDebugData(const CSDebugData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  debugdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_debugdata().empty()) {
    debugdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_debugdata(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CSDebugData)
}

void CSDebugData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSDebugData_JSBY_2eproto.base);
  debugdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CSDebugData::~CSDebugData() {
  // @@protoc_insertion_point(destructor:CSDebugData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSDebugData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  debugdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSDebugData::ArenaDtor(void* object) {
  CSDebugData* _this = reinterpret_cast< CSDebugData* >(object);
  (void)_this;
}
void CSDebugData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSDebugData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSDebugData& CSDebugData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSDebugData_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSDebugData::Clear() {
// @@protoc_insertion_point(message_clear_start:CSDebugData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  debugdata_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDebugData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string DebugData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_debugdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSDebugData.DebugData"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSDebugData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSDebugData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string DebugData = 1;
  if (this->debugdata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_debugdata().data(), static_cast<int>(this->_internal_debugdata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CSDebugData.DebugData");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_debugdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSDebugData)
  return target;
}

size_t CSDebugData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSDebugData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string DebugData = 1;
  if (this->debugdata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_debugdata());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSDebugData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSDebugData)
  GOOGLE_DCHECK_NE(&from, this);
  const CSDebugData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSDebugData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSDebugData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSDebugData)
    MergeFrom(*source);
  }
}

void CSDebugData::MergeFrom(const CSDebugData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSDebugData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.debugdata().size() > 0) {
    _internal_set_debugdata(from._internal_debugdata());
  }
}

void CSDebugData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSDebugData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDebugData::CopyFrom(const CSDebugData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSDebugData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDebugData::IsInitialized() const {
  return true;
}

void CSDebugData::InternalSwap(CSDebugData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  debugdata_.Swap(&other->debugdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDebugData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCDebugData::_Internal {
 public:
};

SCDebugData::SCDebugData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCDebugData)
}
SCDebugData::SCDebugData(const SCDebugData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SCDebugData)
}

void SCDebugData::SharedCtor() {
}

SCDebugData::~SCDebugData() {
  // @@protoc_insertion_point(destructor:SCDebugData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCDebugData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCDebugData::ArenaDtor(void* object) {
  SCDebugData* _this = reinterpret_cast< SCDebugData* >(object);
  (void)_this;
}
void SCDebugData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCDebugData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCDebugData& SCDebugData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCDebugData_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCDebugData::Clear() {
// @@protoc_insertion_point(message_clear_start:SCDebugData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCDebugData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCDebugData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCDebugData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCDebugData)
  return target;
}

size_t SCDebugData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCDebugData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCDebugData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCDebugData)
  GOOGLE_DCHECK_NE(&from, this);
  const SCDebugData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCDebugData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCDebugData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCDebugData)
    MergeFrom(*source);
  }
}

void SCDebugData::MergeFrom(const SCDebugData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCDebugData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SCDebugData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCDebugData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCDebugData::CopyFrom(const SCDebugData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCDebugData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCDebugData::IsInitialized() const {
  return true;
}

void SCDebugData::InternalSwap(SCDebugData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCDebugData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPushMonsterBuff::_Internal {
 public:
};

SCPushMonsterBuff::SCPushMonsterBuff(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCPushMonsterBuff)
}
SCPushMonsterBuff::SCPushMonsterBuff(const SCPushMonsterBuff& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&positionid_, &from.positionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&positionid_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:SCPushMonsterBuff)
}

void SCPushMonsterBuff::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&positionid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&positionid_)) + sizeof(state_));
}

SCPushMonsterBuff::~SCPushMonsterBuff() {
  // @@protoc_insertion_point(destructor:SCPushMonsterBuff)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPushMonsterBuff::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCPushMonsterBuff::ArenaDtor(void* object) {
  SCPushMonsterBuff* _this = reinterpret_cast< SCPushMonsterBuff* >(object);
  (void)_this;
}
void SCPushMonsterBuff::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPushMonsterBuff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPushMonsterBuff& SCPushMonsterBuff::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPushMonsterBuff_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCPushMonsterBuff::Clear() {
// @@protoc_insertion_point(message_clear_start:SCPushMonsterBuff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&positionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&positionid_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPushMonsterBuff::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 PositionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          positionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 BuffType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bufftype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 State = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPushMonsterBuff::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCPushMonsterBuff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PositionID = 1;
  if (this->positionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_positionid(), target);
  }

  // int32 BuffType = 2;
  if (this->bufftype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bufftype(), target);
  }

  // int32 State = 3;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCPushMonsterBuff)
  return target;
}

size_t SCPushMonsterBuff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCPushMonsterBuff)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PositionID = 1;
  if (this->positionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_positionid());
  }

  // int32 BuffType = 2;
  if (this->bufftype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bufftype());
  }

  // int32 State = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPushMonsterBuff::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCPushMonsterBuff)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPushMonsterBuff* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPushMonsterBuff>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCPushMonsterBuff)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCPushMonsterBuff)
    MergeFrom(*source);
  }
}

void SCPushMonsterBuff::MergeFrom(const SCPushMonsterBuff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCPushMonsterBuff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.positionid() != 0) {
    _internal_set_positionid(from._internal_positionid());
  }
  if (from.bufftype() != 0) {
    _internal_set_bufftype(from._internal_bufftype());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SCPushMonsterBuff::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCPushMonsterBuff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPushMonsterBuff::CopyFrom(const SCPushMonsterBuff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCPushMonsterBuff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPushMonsterBuff::IsInitialized() const {
  return true;
}

void SCPushMonsterBuff::InternalSwap(SCPushMonsterBuff* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCPushMonsterBuff, state_)
      + sizeof(SCPushMonsterBuff::state_)
      - PROTOBUF_FIELD_OFFSET(SCPushMonsterBuff, positionid_)>(
          reinterpret_cast<char*>(&positionid_),
          reinterpret_cast<char*>(&other->positionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPushMonsterBuff::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TableState::_Internal {
 public:
};

TableState::TableState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TableState)
}
TableState::TableState(const TableState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tableid_, &from.tableid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tableplayer_) -
    reinterpret_cast<char*>(&tableid_)) + sizeof(tableplayer_));
  // @@protoc_insertion_point(copy_constructor:TableState)
}

void TableState::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&tableid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&tableplayer_) -
      reinterpret_cast<char*>(&tableid_)) + sizeof(tableplayer_));
}

TableState::~TableState() {
  // @@protoc_insertion_point(destructor:TableState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TableState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TableState::ArenaDtor(void* object) {
  TableState* _this = reinterpret_cast< TableState* >(object);
  (void)_this;
}
void TableState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TableState& TableState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TableState_JSBY_2eproto.base);
  return *internal_default_instance();
}


void TableState::Clear() {
// @@protoc_insertion_point(message_clear_start:TableState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tableid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tableplayer_) -
      reinterpret_cast<char*>(&tableid_)) + sizeof(tableplayer_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 TableId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tableid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 TablePlayer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tableplayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TableState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 TableId = 1;
  if (this->tableid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tableid(), target);
  }

  // int32 TablePlayer = 2;
  if (this->tableplayer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_tableplayer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TableState)
  return target;
}

size_t TableState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TableState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 TableId = 1;
  if (this->tableid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tableid());
  }

  // int32 TablePlayer = 2;
  if (this->tableplayer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tableplayer());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TableState)
  GOOGLE_DCHECK_NE(&from, this);
  const TableState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TableState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TableState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TableState)
    MergeFrom(*source);
  }
}

void TableState::MergeFrom(const TableState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TableState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tableid() != 0) {
    _internal_set_tableid(from._internal_tableid());
  }
  if (from.tableplayer() != 0) {
    _internal_set_tableplayer(from._internal_tableplayer());
  }
}

void TableState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TableState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableState::CopyFrom(const TableState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TableState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableState::IsInitialized() const {
  return true;
}

void TableState::InternalSwap(TableState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableState, tableplayer_)
      + sizeof(TableState::tableplayer_)
      - PROTOBUF_FIELD_OFFSET(TableState, tableid_)>(
          reinterpret_cast<char*>(&tableid_),
          reinterpret_cast<char*>(&other->tableid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSGetTableId::_Internal {
 public:
};

CSGetTableId::CSGetTableId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSGetTableId)
}
CSGetTableId::CSGetTableId(const CSGetTableId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSGetTableId)
}

void CSGetTableId::SharedCtor() {
}

CSGetTableId::~CSGetTableId() {
  // @@protoc_insertion_point(destructor:CSGetTableId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSGetTableId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSGetTableId::ArenaDtor(void* object) {
  CSGetTableId* _this = reinterpret_cast< CSGetTableId* >(object);
  (void)_this;
}
void CSGetTableId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSGetTableId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSGetTableId& CSGetTableId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSGetTableId_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSGetTableId::Clear() {
// @@protoc_insertion_point(message_clear_start:CSGetTableId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSGetTableId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSGetTableId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSGetTableId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSGetTableId)
  return target;
}

size_t CSGetTableId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSGetTableId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSGetTableId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSGetTableId)
  GOOGLE_DCHECK_NE(&from, this);
  const CSGetTableId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSGetTableId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSGetTableId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSGetTableId)
    MergeFrom(*source);
  }
}

void CSGetTableId::MergeFrom(const CSGetTableId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSGetTableId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSGetTableId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSGetTableId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetTableId::CopyFrom(const CSGetTableId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSGetTableId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetTableId::IsInitialized() const {
  return true;
}

void CSGetTableId::InternalSwap(CSGetTableId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSGetTableId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGetTableId::_Internal {
 public:
  static const ::TableState& tableid(const SCGetTableId* msg);
};

const ::TableState&
SCGetTableId::_Internal::tableid(const SCGetTableId* msg) {
  return *msg->tableid_;
}
SCGetTableId::SCGetTableId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCGetTableId)
}
SCGetTableId::SCGetTableId(const SCGetTableId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tableid()) {
    tableid_ = new ::TableState(*from.tableid_);
  } else {
    tableid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SCGetTableId)
}

void SCGetTableId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCGetTableId_JSBY_2eproto.base);
  tableid_ = nullptr;
}

SCGetTableId::~SCGetTableId() {
  // @@protoc_insertion_point(destructor:SCGetTableId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGetTableId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tableid_;
}

void SCGetTableId::ArenaDtor(void* object) {
  SCGetTableId* _this = reinterpret_cast< SCGetTableId* >(object);
  (void)_this;
}
void SCGetTableId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGetTableId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGetTableId& SCGetTableId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGetTableId_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCGetTableId::Clear() {
// @@protoc_insertion_point(message_clear_start:SCGetTableId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && tableid_ != nullptr) {
    delete tableid_;
  }
  tableid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGetTableId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TableState TableId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tableid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGetTableId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCGetTableId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TableState TableId = 1;
  if (this->has_tableid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tableid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCGetTableId)
  return target;
}

size_t SCGetTableId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCGetTableId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TableState TableId = 1;
  if (this->has_tableid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tableid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGetTableId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCGetTableId)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGetTableId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGetTableId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCGetTableId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCGetTableId)
    MergeFrom(*source);
  }
}

void SCGetTableId::MergeFrom(const SCGetTableId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCGetTableId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tableid()) {
    _internal_mutable_tableid()->::TableState::MergeFrom(from._internal_tableid());
  }
}

void SCGetTableId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCGetTableId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGetTableId::CopyFrom(const SCGetTableId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCGetTableId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGetTableId::IsInitialized() const {
  return true;
}

void SCGetTableId::InternalSwap(SCGetTableId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(tableid_, other->tableid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGetTableId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPlayerVipLevel::_Internal {
 public:
};

SCPlayerVipLevel::SCPlayerVipLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCPlayerVipLevel)
}
SCPlayerVipLevel::SCPlayerVipLevel(const SCPlayerVipLevel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isvip_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(isvip_));
  // @@protoc_insertion_point(copy_constructor:SCPlayerVipLevel)
}

void SCPlayerVipLevel::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isvip_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(isvip_));
}

SCPlayerVipLevel::~SCPlayerVipLevel() {
  // @@protoc_insertion_point(destructor:SCPlayerVipLevel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPlayerVipLevel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCPlayerVipLevel::ArenaDtor(void* object) {
  SCPlayerVipLevel* _this = reinterpret_cast< SCPlayerVipLevel* >(object);
  (void)_this;
}
void SCPlayerVipLevel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPlayerVipLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPlayerVipLevel& SCPlayerVipLevel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPlayerVipLevel_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCPlayerVipLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:SCPlayerVipLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isvip_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(isvip_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPlayerVipLevel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 PlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool IsVip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          isvip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPlayerVipLevel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCPlayerVipLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PlayerId = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // int32 Level = 2;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  // bool IsVip = 3;
  if (this->isvip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_isvip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCPlayerVipLevel)
  return target;
}

size_t SCPlayerVipLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCPlayerVipLevel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PlayerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  // int32 Level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // bool IsVip = 3;
  if (this->isvip() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPlayerVipLevel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCPlayerVipLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPlayerVipLevel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPlayerVipLevel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCPlayerVipLevel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCPlayerVipLevel)
    MergeFrom(*source);
  }
}

void SCPlayerVipLevel::MergeFrom(const SCPlayerVipLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCPlayerVipLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.isvip() != 0) {
    _internal_set_isvip(from._internal_isvip());
  }
}

void SCPlayerVipLevel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCPlayerVipLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPlayerVipLevel::CopyFrom(const SCPlayerVipLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCPlayerVipLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPlayerVipLevel::IsInitialized() const {
  return true;
}

void SCPlayerVipLevel::InternalSwap(SCPlayerVipLevel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCPlayerVipLevel, isvip_)
      + sizeof(SCPlayerVipLevel::isvip_)
      - PROTOBUF_FIELD_OFFSET(SCPlayerVipLevel, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPlayerVipLevel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DragonProps::_Internal {
 public:
};

DragonProps::DragonProps(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DragonProps)
}
DragonProps::DragonProps(const DragonProps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&progressbarcount_, &from.progressbarcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&propsid_) -
    reinterpret_cast<char*>(&progressbarcount_)) + sizeof(propsid_));
  // @@protoc_insertion_point(copy_constructor:DragonProps)
}

void DragonProps::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&progressbarcount_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&propsid_) -
      reinterpret_cast<char*>(&progressbarcount_)) + sizeof(propsid_));
}

DragonProps::~DragonProps() {
  // @@protoc_insertion_point(destructor:DragonProps)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DragonProps::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DragonProps::ArenaDtor(void* object) {
  DragonProps* _this = reinterpret_cast< DragonProps* >(object);
  (void)_this;
}
void DragonProps::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DragonProps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DragonProps& DragonProps::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DragonProps_JSBY_2eproto.base);
  return *internal_default_instance();
}


void DragonProps::Clear() {
// @@protoc_insertion_point(message_clear_start:DragonProps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&progressbarcount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&propsid_) -
      reinterpret_cast<char*>(&progressbarcount_)) + sizeof(propsid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DragonProps::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ProgressBarCount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          progressbarcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ProgressBar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          progressbar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PropsID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          propsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DragonProps::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DragonProps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ProgressBarCount = 1;
  if (this->progressbarcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_progressbarcount(), target);
  }

  // int32 ProgressBar = 2;
  if (this->progressbar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_progressbar(), target);
  }

  // int32 PropsID = 3;
  if (this->propsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_propsid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DragonProps)
  return target;
}

size_t DragonProps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DragonProps)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ProgressBarCount = 1;
  if (this->progressbarcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_progressbarcount());
  }

  // int32 ProgressBar = 2;
  if (this->progressbar() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_progressbar());
  }

  // int32 PropsID = 3;
  if (this->propsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_propsid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DragonProps::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DragonProps)
  GOOGLE_DCHECK_NE(&from, this);
  const DragonProps* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DragonProps>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DragonProps)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DragonProps)
    MergeFrom(*source);
  }
}

void DragonProps::MergeFrom(const DragonProps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DragonProps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.progressbarcount() != 0) {
    _internal_set_progressbarcount(from._internal_progressbarcount());
  }
  if (from.progressbar() != 0) {
    _internal_set_progressbar(from._internal_progressbar());
  }
  if (from.propsid() != 0) {
    _internal_set_propsid(from._internal_propsid());
  }
}

void DragonProps::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DragonProps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DragonProps::CopyFrom(const DragonProps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DragonProps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DragonProps::IsInitialized() const {
  return true;
}

void DragonProps::InternalSwap(DragonProps* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DragonProps, propsid_)
      + sizeof(DragonProps::propsid_)
      - PROTOBUF_FIELD_OFFSET(DragonProps, progressbarcount_)>(
          reinterpret_cast<char*>(&progressbarcount_),
          reinterpret_cast<char*>(&other->progressbarcount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DragonProps::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSGetDragonProps::_Internal {
 public:
};

CSGetDragonProps::CSGetDragonProps(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSGetDragonProps)
}
CSGetDragonProps::CSGetDragonProps(const CSGetDragonProps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSGetDragonProps)
}

void CSGetDragonProps::SharedCtor() {
}

CSGetDragonProps::~CSGetDragonProps() {
  // @@protoc_insertion_point(destructor:CSGetDragonProps)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSGetDragonProps::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSGetDragonProps::ArenaDtor(void* object) {
  CSGetDragonProps* _this = reinterpret_cast< CSGetDragonProps* >(object);
  (void)_this;
}
void CSGetDragonProps::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSGetDragonProps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSGetDragonProps& CSGetDragonProps::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSGetDragonProps_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSGetDragonProps::Clear() {
// @@protoc_insertion_point(message_clear_start:CSGetDragonProps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSGetDragonProps::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSGetDragonProps::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSGetDragonProps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSGetDragonProps)
  return target;
}

size_t CSGetDragonProps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSGetDragonProps)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSGetDragonProps::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSGetDragonProps)
  GOOGLE_DCHECK_NE(&from, this);
  const CSGetDragonProps* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSGetDragonProps>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSGetDragonProps)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSGetDragonProps)
    MergeFrom(*source);
  }
}

void CSGetDragonProps::MergeFrom(const CSGetDragonProps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSGetDragonProps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSGetDragonProps::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSGetDragonProps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetDragonProps::CopyFrom(const CSGetDragonProps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSGetDragonProps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetDragonProps::IsInitialized() const {
  return true;
}

void CSGetDragonProps::InternalSwap(CSGetDragonProps* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSGetDragonProps::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGetDragonProps::_Internal {
 public:
  static const ::DragonProps& info(const SCGetDragonProps* msg);
};

const ::DragonProps&
SCGetDragonProps::_Internal::info(const SCGetDragonProps* msg) {
  return *msg->info_;
}
SCGetDragonProps::SCGetDragonProps(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCGetDragonProps)
}
SCGetDragonProps::SCGetDragonProps(const SCGetDragonProps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::DragonProps(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SCGetDragonProps)
}

void SCGetDragonProps::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCGetDragonProps_JSBY_2eproto.base);
  info_ = nullptr;
}

SCGetDragonProps::~SCGetDragonProps() {
  // @@protoc_insertion_point(destructor:SCGetDragonProps)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGetDragonProps::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void SCGetDragonProps::ArenaDtor(void* object) {
  SCGetDragonProps* _this = reinterpret_cast< SCGetDragonProps* >(object);
  (void)_this;
}
void SCGetDragonProps::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGetDragonProps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGetDragonProps& SCGetDragonProps::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGetDragonProps_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCGetDragonProps::Clear() {
// @@protoc_insertion_point(message_clear_start:SCGetDragonProps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGetDragonProps::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DragonProps Info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGetDragonProps::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCGetDragonProps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DragonProps Info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCGetDragonProps)
  return target;
}

size_t SCGetDragonProps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCGetDragonProps)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DragonProps Info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGetDragonProps::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCGetDragonProps)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGetDragonProps* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGetDragonProps>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCGetDragonProps)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCGetDragonProps)
    MergeFrom(*source);
  }
}

void SCGetDragonProps::MergeFrom(const SCGetDragonProps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCGetDragonProps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::DragonProps::MergeFrom(from._internal_info());
  }
}

void SCGetDragonProps::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCGetDragonProps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGetDragonProps::CopyFrom(const SCGetDragonProps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCGetDragonProps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGetDragonProps::IsInitialized() const {
  return true;
}

void SCGetDragonProps::InternalSwap(SCGetDragonProps* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGetDragonProps::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSEquipDragonProps::_Internal {
 public:
};

CSEquipDragonProps::CSEquipDragonProps(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSEquipDragonProps)
}
CSEquipDragonProps::CSEquipDragonProps(const CSEquipDragonProps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  propsid_ = from.propsid_;
  // @@protoc_insertion_point(copy_constructor:CSEquipDragonProps)
}

void CSEquipDragonProps::SharedCtor() {
  propsid_ = 0;
}

CSEquipDragonProps::~CSEquipDragonProps() {
  // @@protoc_insertion_point(destructor:CSEquipDragonProps)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSEquipDragonProps::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSEquipDragonProps::ArenaDtor(void* object) {
  CSEquipDragonProps* _this = reinterpret_cast< CSEquipDragonProps* >(object);
  (void)_this;
}
void CSEquipDragonProps::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSEquipDragonProps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSEquipDragonProps& CSEquipDragonProps::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSEquipDragonProps_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSEquipDragonProps::Clear() {
// @@protoc_insertion_point(message_clear_start:CSEquipDragonProps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  propsid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSEquipDragonProps::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 PropsID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          propsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSEquipDragonProps::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSEquipDragonProps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PropsID = 1;
  if (this->propsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_propsid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSEquipDragonProps)
  return target;
}

size_t CSEquipDragonProps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSEquipDragonProps)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PropsID = 1;
  if (this->propsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_propsid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSEquipDragonProps::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSEquipDragonProps)
  GOOGLE_DCHECK_NE(&from, this);
  const CSEquipDragonProps* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSEquipDragonProps>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSEquipDragonProps)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSEquipDragonProps)
    MergeFrom(*source);
  }
}

void CSEquipDragonProps::MergeFrom(const CSEquipDragonProps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSEquipDragonProps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.propsid() != 0) {
    _internal_set_propsid(from._internal_propsid());
  }
}

void CSEquipDragonProps::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSEquipDragonProps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSEquipDragonProps::CopyFrom(const CSEquipDragonProps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSEquipDragonProps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEquipDragonProps::IsInitialized() const {
  return true;
}

void CSEquipDragonProps::InternalSwap(CSEquipDragonProps* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(propsid_, other->propsid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSEquipDragonProps::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCEquipDragonProps::_Internal {
 public:
  static const ::DragonProps& info(const SCEquipDragonProps* msg);
};

const ::DragonProps&
SCEquipDragonProps::_Internal::info(const SCEquipDragonProps* msg) {
  return *msg->info_;
}
SCEquipDragonProps::SCEquipDragonProps(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCEquipDragonProps)
}
SCEquipDragonProps::SCEquipDragonProps(const SCEquipDragonProps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::DragonProps(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SCEquipDragonProps)
}

void SCEquipDragonProps::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCEquipDragonProps_JSBY_2eproto.base);
  info_ = nullptr;
}

SCEquipDragonProps::~SCEquipDragonProps() {
  // @@protoc_insertion_point(destructor:SCEquipDragonProps)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCEquipDragonProps::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void SCEquipDragonProps::ArenaDtor(void* object) {
  SCEquipDragonProps* _this = reinterpret_cast< SCEquipDragonProps* >(object);
  (void)_this;
}
void SCEquipDragonProps::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCEquipDragonProps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCEquipDragonProps& SCEquipDragonProps::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCEquipDragonProps_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCEquipDragonProps::Clear() {
// @@protoc_insertion_point(message_clear_start:SCEquipDragonProps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCEquipDragonProps::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DragonProps Info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCEquipDragonProps::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCEquipDragonProps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DragonProps Info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCEquipDragonProps)
  return target;
}

size_t SCEquipDragonProps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCEquipDragonProps)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DragonProps Info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCEquipDragonProps::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCEquipDragonProps)
  GOOGLE_DCHECK_NE(&from, this);
  const SCEquipDragonProps* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCEquipDragonProps>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCEquipDragonProps)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCEquipDragonProps)
    MergeFrom(*source);
  }
}

void SCEquipDragonProps::MergeFrom(const SCEquipDragonProps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCEquipDragonProps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::DragonProps::MergeFrom(from._internal_info());
  }
}

void SCEquipDragonProps::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCEquipDragonProps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCEquipDragonProps::CopyFrom(const SCEquipDragonProps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCEquipDragonProps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCEquipDragonProps::IsInitialized() const {
  return true;
}

void SCEquipDragonProps::InternalSwap(SCEquipDragonProps* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCEquipDragonProps::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPushDragonProps::_Internal {
 public:
  static const ::DragonProps& info(const SCPushDragonProps* msg);
};

const ::DragonProps&
SCPushDragonProps::_Internal::info(const SCPushDragonProps* msg) {
  return *msg->info_;
}
SCPushDragonProps::SCPushDragonProps(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCPushDragonProps)
}
SCPushDragonProps::SCPushDragonProps(const SCPushDragonProps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::DragonProps(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SCPushDragonProps)
}

void SCPushDragonProps::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCPushDragonProps_JSBY_2eproto.base);
  info_ = nullptr;
}

SCPushDragonProps::~SCPushDragonProps() {
  // @@protoc_insertion_point(destructor:SCPushDragonProps)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPushDragonProps::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void SCPushDragonProps::ArenaDtor(void* object) {
  SCPushDragonProps* _this = reinterpret_cast< SCPushDragonProps* >(object);
  (void)_this;
}
void SCPushDragonProps::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPushDragonProps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPushDragonProps& SCPushDragonProps::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPushDragonProps_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCPushDragonProps::Clear() {
// @@protoc_insertion_point(message_clear_start:SCPushDragonProps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPushDragonProps::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DragonProps Info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPushDragonProps::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCPushDragonProps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DragonProps Info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCPushDragonProps)
  return target;
}

size_t SCPushDragonProps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCPushDragonProps)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DragonProps Info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPushDragonProps::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCPushDragonProps)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPushDragonProps* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPushDragonProps>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCPushDragonProps)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCPushDragonProps)
    MergeFrom(*source);
  }
}

void SCPushDragonProps::MergeFrom(const SCPushDragonProps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCPushDragonProps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::DragonProps::MergeFrom(from._internal_info());
  }
}

void SCPushDragonProps::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCPushDragonProps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPushDragonProps::CopyFrom(const SCPushDragonProps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCPushDragonProps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPushDragonProps::IsInitialized() const {
  return true;
}

void SCPushDragonProps::InternalSwap(SCPushDragonProps* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPushDragonProps::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ShopInfo::_Internal {
 public:
};

ShopInfo::ShopInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ShopInfo)
}
ShopInfo::ShopInfo(const ShopInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&shopid_, &from.shopid_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&shopid_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:ShopInfo)
}

void ShopInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShopInfo_JSBY_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&shopid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&shopid_)) + sizeof(num_));
}

ShopInfo::~ShopInfo() {
  // @@protoc_insertion_point(destructor:ShopInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShopInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShopInfo::ArenaDtor(void* object) {
  ShopInfo* _this = reinterpret_cast< ShopInfo* >(object);
  (void)_this;
}
void ShopInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShopInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShopInfo& ShopInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShopInfo_JSBY_2eproto.base);
  return *internal_default_instance();
}


void ShopInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ShopInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&shopid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&shopid_)) + sizeof(num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShopInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ShopID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          shopid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ShopInfo.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CurrencyType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          currencytype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Num = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShopInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShopInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ShopID = 1;
  if (this->shopid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_shopid(), target);
  }

  // string Name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ShopInfo.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 Value = 3;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_value(), target);
  }

  // int32 CurrencyType = 4;
  if (this->currencytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_currencytype(), target);
  }

  // int32 Price = 5;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_price(), target);
  }

  // int32 Num = 6;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShopInfo)
  return target;
}

size_t ShopInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShopInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 ShopID = 1;
  if (this->shopid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shopid());
  }

  // int32 Value = 3;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }

  // int32 CurrencyType = 4;
  if (this->currencytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_currencytype());
  }

  // int32 Price = 5;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_price());
  }

  // int32 Num = 6;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShopInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ShopInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ShopInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShopInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ShopInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ShopInfo)
    MergeFrom(*source);
  }
}

void ShopInfo::MergeFrom(const ShopInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShopInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.shopid() != 0) {
    _internal_set_shopid(from._internal_shopid());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.currencytype() != 0) {
    _internal_set_currencytype(from._internal_currencytype());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
}

void ShopInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ShopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopInfo::CopyFrom(const ShopInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopInfo::IsInitialized() const {
  return true;
}

void ShopInfo::InternalSwap(ShopInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShopInfo, num_)
      + sizeof(ShopInfo::num_)
      - PROTOBUF_FIELD_OFFSET(ShopInfo, shopid_)>(
          reinterpret_cast<char*>(&shopid_),
          reinterpret_cast<char*>(&other->shopid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShopInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSGetShopInfo::_Internal {
 public:
};

CSGetShopInfo::CSGetShopInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSGetShopInfo)
}
CSGetShopInfo::CSGetShopInfo(const CSGetShopInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  shopinfotype_ = from.shopinfotype_;
  // @@protoc_insertion_point(copy_constructor:CSGetShopInfo)
}

void CSGetShopInfo::SharedCtor() {
  shopinfotype_ = 0;
}

CSGetShopInfo::~CSGetShopInfo() {
  // @@protoc_insertion_point(destructor:CSGetShopInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSGetShopInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSGetShopInfo::ArenaDtor(void* object) {
  CSGetShopInfo* _this = reinterpret_cast< CSGetShopInfo* >(object);
  (void)_this;
}
void CSGetShopInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSGetShopInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSGetShopInfo& CSGetShopInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSGetShopInfo_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSGetShopInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CSGetShopInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shopinfotype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSGetShopInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ShopType ShopInfoType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_shopinfotype(static_cast<::ShopType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSGetShopInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSGetShopInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ShopType ShopInfoType = 1;
  if (this->shopinfotype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_shopinfotype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSGetShopInfo)
  return target;
}

size_t CSGetShopInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSGetShopInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ShopType ShopInfoType = 1;
  if (this->shopinfotype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_shopinfotype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSGetShopInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSGetShopInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSGetShopInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSGetShopInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSGetShopInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSGetShopInfo)
    MergeFrom(*source);
  }
}

void CSGetShopInfo::MergeFrom(const CSGetShopInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSGetShopInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.shopinfotype() != 0) {
    _internal_set_shopinfotype(from._internal_shopinfotype());
  }
}

void CSGetShopInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSGetShopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetShopInfo::CopyFrom(const CSGetShopInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSGetShopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetShopInfo::IsInitialized() const {
  return true;
}

void CSGetShopInfo::InternalSwap(CSGetShopInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(shopinfotype_, other->shopinfotype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSGetShopInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGetShopInfo::_Internal {
 public:
  static const ::ShopInfo& info(const SCGetShopInfo* msg);
};

const ::ShopInfo&
SCGetShopInfo::_Internal::info(const SCGetShopInfo* msg) {
  return *msg->info_;
}
SCGetShopInfo::SCGetShopInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCGetShopInfo)
}
SCGetShopInfo::SCGetShopInfo(const SCGetShopInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::ShopInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SCGetShopInfo)
}

void SCGetShopInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCGetShopInfo_JSBY_2eproto.base);
  info_ = nullptr;
}

SCGetShopInfo::~SCGetShopInfo() {
  // @@protoc_insertion_point(destructor:SCGetShopInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGetShopInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void SCGetShopInfo::ArenaDtor(void* object) {
  SCGetShopInfo* _this = reinterpret_cast< SCGetShopInfo* >(object);
  (void)_this;
}
void SCGetShopInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGetShopInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGetShopInfo& SCGetShopInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGetShopInfo_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCGetShopInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SCGetShopInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGetShopInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ShopInfo Info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGetShopInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCGetShopInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ShopInfo Info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCGetShopInfo)
  return target;
}

size_t SCGetShopInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCGetShopInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ShopInfo Info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGetShopInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCGetShopInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGetShopInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGetShopInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCGetShopInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCGetShopInfo)
    MergeFrom(*source);
  }
}

void SCGetShopInfo::MergeFrom(const SCGetShopInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCGetShopInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::ShopInfo::MergeFrom(from._internal_info());
  }
}

void SCGetShopInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCGetShopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGetShopInfo::CopyFrom(const SCGetShopInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCGetShopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGetShopInfo::IsInitialized() const {
  return true;
}

void SCGetShopInfo::InternalSwap(SCGetShopInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGetShopInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PropsInfo::_Internal {
 public:
};

PropsInfo::PropsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PropsInfo)
}
PropsInfo::PropsInfo(const PropsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&propsid_, &from.propsid_,
    static_cast<size_t>(reinterpret_cast<char*>(&addnum_) -
    reinterpret_cast<char*>(&propsid_)) + sizeof(addnum_));
  // @@protoc_insertion_point(copy_constructor:PropsInfo)
}

void PropsInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&propsid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&addnum_) -
      reinterpret_cast<char*>(&propsid_)) + sizeof(addnum_));
}

PropsInfo::~PropsInfo() {
  // @@protoc_insertion_point(destructor:PropsInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PropsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PropsInfo::ArenaDtor(void* object) {
  PropsInfo* _this = reinterpret_cast< PropsInfo* >(object);
  (void)_this;
}
void PropsInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PropsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PropsInfo& PropsInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PropsInfo_JSBY_2eproto.base);
  return *internal_default_instance();
}


void PropsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PropsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&propsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&addnum_) -
      reinterpret_cast<char*>(&propsid_)) + sizeof(addnum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 PropsID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          propsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 TotalNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          totalnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 AddNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          addnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PropsInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PropsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PropsID = 1;
  if (this->propsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_propsid(), target);
  }

  // int32 TotalNum = 2;
  if (this->totalnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_totalnum(), target);
  }

  // int32 AddNum = 3;
  if (this->addnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_addnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PropsInfo)
  return target;
}

size_t PropsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PropsInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PropsID = 1;
  if (this->propsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_propsid());
  }

  // int32 TotalNum = 2;
  if (this->totalnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_totalnum());
  }

  // int32 AddNum = 3;
  if (this->addnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_addnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropsInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PropsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PropsInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropsInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PropsInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PropsInfo)
    MergeFrom(*source);
  }
}

void PropsInfo::MergeFrom(const PropsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PropsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.propsid() != 0) {
    _internal_set_propsid(from._internal_propsid());
  }
  if (from.totalnum() != 0) {
    _internal_set_totalnum(from._internal_totalnum());
  }
  if (from.addnum() != 0) {
    _internal_set_addnum(from._internal_addnum());
  }
}

void PropsInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PropsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropsInfo::CopyFrom(const PropsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PropsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropsInfo::IsInitialized() const {
  return true;
}

void PropsInfo::InternalSwap(PropsInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PropsInfo, addnum_)
      + sizeof(PropsInfo::addnum_)
      - PROTOBUF_FIELD_OFFSET(PropsInfo, propsid_)>(
          reinterpret_cast<char*>(&propsid_),
          reinterpret_cast<char*>(&other->propsid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PropsInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPushPropsInfo::_Internal {
 public:
  static const ::PropsInfo& info(const SCPushPropsInfo* msg);
};

const ::PropsInfo&
SCPushPropsInfo::_Internal::info(const SCPushPropsInfo* msg) {
  return *msg->info_;
}
SCPushPropsInfo::SCPushPropsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCPushPropsInfo)
}
SCPushPropsInfo::SCPushPropsInfo(const SCPushPropsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::PropsInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SCPushPropsInfo)
}

void SCPushPropsInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCPushPropsInfo_JSBY_2eproto.base);
  info_ = nullptr;
}

SCPushPropsInfo::~SCPushPropsInfo() {
  // @@protoc_insertion_point(destructor:SCPushPropsInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPushPropsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void SCPushPropsInfo::ArenaDtor(void* object) {
  SCPushPropsInfo* _this = reinterpret_cast< SCPushPropsInfo* >(object);
  (void)_this;
}
void SCPushPropsInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPushPropsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPushPropsInfo& SCPushPropsInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPushPropsInfo_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCPushPropsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SCPushPropsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPushPropsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PropsInfo Info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPushPropsInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCPushPropsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PropsInfo Info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCPushPropsInfo)
  return target;
}

size_t SCPushPropsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCPushPropsInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PropsInfo Info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPushPropsInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCPushPropsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPushPropsInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPushPropsInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCPushPropsInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCPushPropsInfo)
    MergeFrom(*source);
  }
}

void SCPushPropsInfo::MergeFrom(const SCPushPropsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCPushPropsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::PropsInfo::MergeFrom(from._internal_info());
  }
}

void SCPushPropsInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCPushPropsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPushPropsInfo::CopyFrom(const SCPushPropsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCPushPropsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPushPropsInfo::IsInitialized() const {
  return true;
}

void SCPushPropsInfo::InternalSwap(SCPushPropsInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPushPropsInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSGetMaterialsInfo::_Internal {
 public:
};

CSGetMaterialsInfo::CSGetMaterialsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSGetMaterialsInfo)
}
CSGetMaterialsInfo::CSGetMaterialsInfo(const CSGetMaterialsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSGetMaterialsInfo)
}

void CSGetMaterialsInfo::SharedCtor() {
}

CSGetMaterialsInfo::~CSGetMaterialsInfo() {
  // @@protoc_insertion_point(destructor:CSGetMaterialsInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSGetMaterialsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSGetMaterialsInfo::ArenaDtor(void* object) {
  CSGetMaterialsInfo* _this = reinterpret_cast< CSGetMaterialsInfo* >(object);
  (void)_this;
}
void CSGetMaterialsInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSGetMaterialsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSGetMaterialsInfo& CSGetMaterialsInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSGetMaterialsInfo_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSGetMaterialsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CSGetMaterialsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSGetMaterialsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSGetMaterialsInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSGetMaterialsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSGetMaterialsInfo)
  return target;
}

size_t CSGetMaterialsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSGetMaterialsInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSGetMaterialsInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSGetMaterialsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSGetMaterialsInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSGetMaterialsInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSGetMaterialsInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSGetMaterialsInfo)
    MergeFrom(*source);
  }
}

void CSGetMaterialsInfo::MergeFrom(const CSGetMaterialsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSGetMaterialsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSGetMaterialsInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSGetMaterialsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetMaterialsInfo::CopyFrom(const CSGetMaterialsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSGetMaterialsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetMaterialsInfo::IsInitialized() const {
  return true;
}

void CSGetMaterialsInfo::InternalSwap(CSGetMaterialsInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSGetMaterialsInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGetMaterialsInfo::_Internal {
 public:
  static const ::PropsInfo& info(const SCGetMaterialsInfo* msg);
};

const ::PropsInfo&
SCGetMaterialsInfo::_Internal::info(const SCGetMaterialsInfo* msg) {
  return *msg->info_;
}
SCGetMaterialsInfo::SCGetMaterialsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCGetMaterialsInfo)
}
SCGetMaterialsInfo::SCGetMaterialsInfo(const SCGetMaterialsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::PropsInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SCGetMaterialsInfo)
}

void SCGetMaterialsInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCGetMaterialsInfo_JSBY_2eproto.base);
  info_ = nullptr;
}

SCGetMaterialsInfo::~SCGetMaterialsInfo() {
  // @@protoc_insertion_point(destructor:SCGetMaterialsInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGetMaterialsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void SCGetMaterialsInfo::ArenaDtor(void* object) {
  SCGetMaterialsInfo* _this = reinterpret_cast< SCGetMaterialsInfo* >(object);
  (void)_this;
}
void SCGetMaterialsInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGetMaterialsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGetMaterialsInfo& SCGetMaterialsInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGetMaterialsInfo_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCGetMaterialsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SCGetMaterialsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGetMaterialsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PropsInfo Info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGetMaterialsInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCGetMaterialsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PropsInfo Info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCGetMaterialsInfo)
  return target;
}

size_t SCGetMaterialsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCGetMaterialsInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PropsInfo Info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGetMaterialsInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCGetMaterialsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGetMaterialsInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGetMaterialsInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCGetMaterialsInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCGetMaterialsInfo)
    MergeFrom(*source);
  }
}

void SCGetMaterialsInfo::MergeFrom(const SCGetMaterialsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCGetMaterialsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::PropsInfo::MergeFrom(from._internal_info());
  }
}

void SCGetMaterialsInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCGetMaterialsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGetMaterialsInfo::CopyFrom(const SCGetMaterialsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCGetMaterialsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGetMaterialsInfo::IsInitialized() const {
  return true;
}

void SCGetMaterialsInfo::InternalSwap(SCGetMaterialsInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGetMaterialsInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSExchangeBox::_Internal {
 public:
};

CSExchangeBox::CSExchangeBox(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSExchangeBox)
}
CSExchangeBox::CSExchangeBox(const CSExchangeBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  typeid__ = from.typeid__;
  // @@protoc_insertion_point(copy_constructor:CSExchangeBox)
}

void CSExchangeBox::SharedCtor() {
  typeid__ = 0;
}

CSExchangeBox::~CSExchangeBox() {
  // @@protoc_insertion_point(destructor:CSExchangeBox)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSExchangeBox::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSExchangeBox::ArenaDtor(void* object) {
  CSExchangeBox* _this = reinterpret_cast< CSExchangeBox* >(object);
  (void)_this;
}
void CSExchangeBox::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSExchangeBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSExchangeBox& CSExchangeBox::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSExchangeBox_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSExchangeBox::Clear() {
// @@protoc_insertion_point(message_clear_start:CSExchangeBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  typeid__ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSExchangeBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 TypeID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          typeid__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSExchangeBox::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSExchangeBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 TypeID = 1;
  if (this->typeid_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_typeid_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSExchangeBox)
  return target;
}

size_t CSExchangeBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSExchangeBox)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 TypeID = 1;
  if (this->typeid_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_typeid_());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSExchangeBox::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSExchangeBox)
  GOOGLE_DCHECK_NE(&from, this);
  const CSExchangeBox* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSExchangeBox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSExchangeBox)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSExchangeBox)
    MergeFrom(*source);
  }
}

void CSExchangeBox::MergeFrom(const CSExchangeBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSExchangeBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.typeid_() != 0) {
    _internal_set_typeid_(from._internal_typeid_());
  }
}

void CSExchangeBox::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSExchangeBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSExchangeBox::CopyFrom(const CSExchangeBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSExchangeBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSExchangeBox::IsInitialized() const {
  return true;
}

void CSExchangeBox::InternalSwap(CSExchangeBox* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(typeid__, other->typeid__);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSExchangeBox::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RewardInfo::_Internal {
 public:
};

RewardInfo::RewardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RewardInfo)
}
RewardInfo::RewardInfo(const RewardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&propid_, &from.propid_,
    static_cast<size_t>(reinterpret_cast<char*>(&propnum_) -
    reinterpret_cast<char*>(&propid_)) + sizeof(propnum_));
  // @@protoc_insertion_point(copy_constructor:RewardInfo)
}

void RewardInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&propid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&propnum_) -
      reinterpret_cast<char*>(&propid_)) + sizeof(propnum_));
}

RewardInfo::~RewardInfo() {
  // @@protoc_insertion_point(destructor:RewardInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RewardInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RewardInfo::ArenaDtor(void* object) {
  RewardInfo* _this = reinterpret_cast< RewardInfo* >(object);
  (void)_this;
}
void RewardInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RewardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RewardInfo& RewardInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RewardInfo_JSBY_2eproto.base);
  return *internal_default_instance();
}


void RewardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:RewardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&propid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&propnum_) -
      reinterpret_cast<char*>(&propid_)) + sizeof(propnum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RewardInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 PropID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          propid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PropNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          propnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RewardInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RewardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PropID = 1;
  if (this->propid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_propid(), target);
  }

  // int32 PropNum = 2;
  if (this->propnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_propnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RewardInfo)
  return target;
}

size_t RewardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RewardInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PropID = 1;
  if (this->propid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_propid());
  }

  // int32 PropNum = 2;
  if (this->propnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_propnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RewardInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RewardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RewardInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RewardInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RewardInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RewardInfo)
    MergeFrom(*source);
  }
}

void RewardInfo::MergeFrom(const RewardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RewardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.propid() != 0) {
    _internal_set_propid(from._internal_propid());
  }
  if (from.propnum() != 0) {
    _internal_set_propnum(from._internal_propnum());
  }
}

void RewardInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RewardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardInfo::CopyFrom(const RewardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RewardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardInfo::IsInitialized() const {
  return true;
}

void RewardInfo::InternalSwap(RewardInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RewardInfo, propnum_)
      + sizeof(RewardInfo::propnum_)
      - PROTOBUF_FIELD_OFFSET(RewardInfo, propid_)>(
          reinterpret_cast<char*>(&propid_),
          reinterpret_cast<char*>(&other->propid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RewardInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCExchangeBox::_Internal {
 public:
  static const ::RewardInfo& reward(const SCExchangeBox* msg);
  static const ::RewardInfo& addreward(const SCExchangeBox* msg);
};

const ::RewardInfo&
SCExchangeBox::_Internal::reward(const SCExchangeBox* msg) {
  return *msg->reward_;
}
const ::RewardInfo&
SCExchangeBox::_Internal::addreward(const SCExchangeBox* msg) {
  return *msg->addreward_;
}
SCExchangeBox::SCExchangeBox(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCExchangeBox)
}
SCExchangeBox::SCExchangeBox(const SCExchangeBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reward()) {
    reward_ = new ::RewardInfo(*from.reward_);
  } else {
    reward_ = nullptr;
  }
  if (from._internal_has_addreward()) {
    addreward_ = new ::RewardInfo(*from.addreward_);
  } else {
    addreward_ = nullptr;
  }
  ::memcpy(&typeid__, &from.typeid__,
    static_cast<size_t>(reinterpret_cast<char*>(&doublingcost_) -
    reinterpret_cast<char*>(&typeid__)) + sizeof(doublingcost_));
  // @@protoc_insertion_point(copy_constructor:SCExchangeBox)
}

void SCExchangeBox::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCExchangeBox_JSBY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&reward_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&doublingcost_) -
      reinterpret_cast<char*>(&reward_)) + sizeof(doublingcost_));
}

SCExchangeBox::~SCExchangeBox() {
  // @@protoc_insertion_point(destructor:SCExchangeBox)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCExchangeBox::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete reward_;
  if (this != internal_default_instance()) delete addreward_;
}

void SCExchangeBox::ArenaDtor(void* object) {
  SCExchangeBox* _this = reinterpret_cast< SCExchangeBox* >(object);
  (void)_this;
}
void SCExchangeBox::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCExchangeBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCExchangeBox& SCExchangeBox::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCExchangeBox_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCExchangeBox::Clear() {
// @@protoc_insertion_point(message_clear_start:SCExchangeBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && reward_ != nullptr) {
    delete reward_;
  }
  reward_ = nullptr;
  if (GetArena() == nullptr && addreward_ != nullptr) {
    delete addreward_;
  }
  addreward_ = nullptr;
  ::memset(&typeid__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&doublingcost_) -
      reinterpret_cast<char*>(&typeid__)) + sizeof(doublingcost_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCExchangeBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 TypeID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          typeid__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RewardInfo Reward = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_reward(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RewardInfo AddReward = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_addreward(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 DoublingCost = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          doublingcost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCExchangeBox::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCExchangeBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 TypeID = 1;
  if (this->typeid_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_typeid_(), target);
  }

  // int32 ID = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // .RewardInfo Reward = 3;
  if (this->has_reward()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::reward(this), target, stream);
  }

  // .RewardInfo AddReward = 4;
  if (this->has_addreward()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::addreward(this), target, stream);
  }

  // int32 DoublingCost = 5;
  if (this->doublingcost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_doublingcost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCExchangeBox)
  return target;
}

size_t SCExchangeBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCExchangeBox)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .RewardInfo Reward = 3;
  if (this->has_reward()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reward_);
  }

  // .RewardInfo AddReward = 4;
  if (this->has_addreward()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *addreward_);
  }

  // int32 TypeID = 1;
  if (this->typeid_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_typeid_());
  }

  // int32 ID = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 DoublingCost = 5;
  if (this->doublingcost() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_doublingcost());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCExchangeBox::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCExchangeBox)
  GOOGLE_DCHECK_NE(&from, this);
  const SCExchangeBox* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCExchangeBox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCExchangeBox)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCExchangeBox)
    MergeFrom(*source);
  }
}

void SCExchangeBox::MergeFrom(const SCExchangeBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCExchangeBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_reward()) {
    _internal_mutable_reward()->::RewardInfo::MergeFrom(from._internal_reward());
  }
  if (from.has_addreward()) {
    _internal_mutable_addreward()->::RewardInfo::MergeFrom(from._internal_addreward());
  }
  if (from.typeid_() != 0) {
    _internal_set_typeid_(from._internal_typeid_());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.doublingcost() != 0) {
    _internal_set_doublingcost(from._internal_doublingcost());
  }
}

void SCExchangeBox::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCExchangeBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCExchangeBox::CopyFrom(const SCExchangeBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCExchangeBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCExchangeBox::IsInitialized() const {
  return true;
}

void SCExchangeBox::InternalSwap(SCExchangeBox* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCExchangeBox, doublingcost_)
      + sizeof(SCExchangeBox::doublingcost_)
      - PROTOBUF_FIELD_OFFSET(SCExchangeBox, reward_)>(
          reinterpret_cast<char*>(&reward_),
          reinterpret_cast<char*>(&other->reward_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCExchangeBox::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSDoublingBox::_Internal {
 public:
};

CSDoublingBox::CSDoublingBox(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSDoublingBox)
}
CSDoublingBox::CSDoublingBox(const CSDoublingBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  isdoubling_ = from.isdoubling_;
  // @@protoc_insertion_point(copy_constructor:CSDoublingBox)
}

void CSDoublingBox::SharedCtor() {
  isdoubling_ = false;
}

CSDoublingBox::~CSDoublingBox() {
  // @@protoc_insertion_point(destructor:CSDoublingBox)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSDoublingBox::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSDoublingBox::ArenaDtor(void* object) {
  CSDoublingBox* _this = reinterpret_cast< CSDoublingBox* >(object);
  (void)_this;
}
void CSDoublingBox::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSDoublingBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSDoublingBox& CSDoublingBox::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSDoublingBox_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSDoublingBox::Clear() {
// @@protoc_insertion_point(message_clear_start:CSDoublingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isdoubling_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDoublingBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool IsDoubling = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isdoubling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSDoublingBox::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSDoublingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool IsDoubling = 1;
  if (this->isdoubling() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isdoubling(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSDoublingBox)
  return target;
}

size_t CSDoublingBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSDoublingBox)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool IsDoubling = 1;
  if (this->isdoubling() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSDoublingBox::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSDoublingBox)
  GOOGLE_DCHECK_NE(&from, this);
  const CSDoublingBox* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSDoublingBox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSDoublingBox)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSDoublingBox)
    MergeFrom(*source);
  }
}

void CSDoublingBox::MergeFrom(const CSDoublingBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSDoublingBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.isdoubling() != 0) {
    _internal_set_isdoubling(from._internal_isdoubling());
  }
}

void CSDoublingBox::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSDoublingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDoublingBox::CopyFrom(const CSDoublingBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSDoublingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDoublingBox::IsInitialized() const {
  return true;
}

void CSDoublingBox::InternalSwap(CSDoublingBox* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(isdoubling_, other->isdoubling_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDoublingBox::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCDoublingBox::_Internal {
 public:
  static const ::RewardInfo& reward(const SCDoublingBox* msg);
  static const ::RewardInfo& addreward(const SCDoublingBox* msg);
};

const ::RewardInfo&
SCDoublingBox::_Internal::reward(const SCDoublingBox* msg) {
  return *msg->reward_;
}
const ::RewardInfo&
SCDoublingBox::_Internal::addreward(const SCDoublingBox* msg) {
  return *msg->addreward_;
}
SCDoublingBox::SCDoublingBox(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCDoublingBox)
}
SCDoublingBox::SCDoublingBox(const SCDoublingBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reward()) {
    reward_ = new ::RewardInfo(*from.reward_);
  } else {
    reward_ = nullptr;
  }
  if (from._internal_has_addreward()) {
    addreward_ = new ::RewardInfo(*from.addreward_);
  } else {
    addreward_ = nullptr;
  }
  ::memcpy(&isdouble_, &from.isdouble_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&isdouble_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:SCDoublingBox)
}

void SCDoublingBox::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCDoublingBox_JSBY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&reward_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&reward_)) + sizeof(id_));
}

SCDoublingBox::~SCDoublingBox() {
  // @@protoc_insertion_point(destructor:SCDoublingBox)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCDoublingBox::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete reward_;
  if (this != internal_default_instance()) delete addreward_;
}

void SCDoublingBox::ArenaDtor(void* object) {
  SCDoublingBox* _this = reinterpret_cast< SCDoublingBox* >(object);
  (void)_this;
}
void SCDoublingBox::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCDoublingBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCDoublingBox& SCDoublingBox::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCDoublingBox_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCDoublingBox::Clear() {
// @@protoc_insertion_point(message_clear_start:SCDoublingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && reward_ != nullptr) {
    delete reward_;
  }
  reward_ = nullptr;
  if (GetArena() == nullptr && addreward_ != nullptr) {
    delete addreward_;
  }
  addreward_ = nullptr;
  ::memset(&isdouble_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&isdouble_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCDoublingBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool IsDouble = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isdouble_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RewardInfo Reward = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_reward(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RewardInfo AddReward = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_addreward(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCDoublingBox::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCDoublingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool IsDouble = 1;
  if (this->isdouble() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isdouble(), target);
  }

  // int32 ID = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // .RewardInfo Reward = 3;
  if (this->has_reward()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::reward(this), target, stream);
  }

  // .RewardInfo AddReward = 4;
  if (this->has_addreward()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::addreward(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCDoublingBox)
  return target;
}

size_t SCDoublingBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCDoublingBox)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .RewardInfo Reward = 3;
  if (this->has_reward()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reward_);
  }

  // .RewardInfo AddReward = 4;
  if (this->has_addreward()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *addreward_);
  }

  // bool IsDouble = 1;
  if (this->isdouble() != 0) {
    total_size += 1 + 1;
  }

  // int32 ID = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCDoublingBox::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCDoublingBox)
  GOOGLE_DCHECK_NE(&from, this);
  const SCDoublingBox* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCDoublingBox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCDoublingBox)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCDoublingBox)
    MergeFrom(*source);
  }
}

void SCDoublingBox::MergeFrom(const SCDoublingBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCDoublingBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_reward()) {
    _internal_mutable_reward()->::RewardInfo::MergeFrom(from._internal_reward());
  }
  if (from.has_addreward()) {
    _internal_mutable_addreward()->::RewardInfo::MergeFrom(from._internal_addreward());
  }
  if (from.isdouble() != 0) {
    _internal_set_isdouble(from._internal_isdouble());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void SCDoublingBox::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCDoublingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCDoublingBox::CopyFrom(const SCDoublingBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCDoublingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCDoublingBox::IsInitialized() const {
  return true;
}

void SCDoublingBox::InternalSwap(SCDoublingBox* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCDoublingBox, id_)
      + sizeof(SCDoublingBox::id_)
      - PROTOBUF_FIELD_OFFSET(SCDoublingBox, reward_)>(
          reinterpret_cast<char*>(&reward_),
          reinterpret_cast<char*>(&other->reward_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCDoublingBox::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSShopBuy::_Internal {
 public:
};

CSShopBuy::CSShopBuy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSShopBuy)
}
CSShopBuy::CSShopBuy(const CSShopBuy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&propsid_, &from.propsid_,
    static_cast<size_t>(reinterpret_cast<char*>(&propsnum_) -
    reinterpret_cast<char*>(&propsid_)) + sizeof(propsnum_));
  // @@protoc_insertion_point(copy_constructor:CSShopBuy)
}

void CSShopBuy::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&propsid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&propsnum_) -
      reinterpret_cast<char*>(&propsid_)) + sizeof(propsnum_));
}

CSShopBuy::~CSShopBuy() {
  // @@protoc_insertion_point(destructor:CSShopBuy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSShopBuy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSShopBuy::ArenaDtor(void* object) {
  CSShopBuy* _this = reinterpret_cast< CSShopBuy* >(object);
  (void)_this;
}
void CSShopBuy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSShopBuy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSShopBuy& CSShopBuy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSShopBuy_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSShopBuy::Clear() {
// @@protoc_insertion_point(message_clear_start:CSShopBuy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&propsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&propsnum_) -
      reinterpret_cast<char*>(&propsid_)) + sizeof(propsnum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSShopBuy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 PropsID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          propsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PropsNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          propsnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSShopBuy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSShopBuy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PropsID = 1;
  if (this->propsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_propsid(), target);
  }

  // int32 PropsNum = 2;
  if (this->propsnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_propsnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSShopBuy)
  return target;
}

size_t CSShopBuy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSShopBuy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PropsID = 1;
  if (this->propsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_propsid());
  }

  // int32 PropsNum = 2;
  if (this->propsnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_propsnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSShopBuy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSShopBuy)
  GOOGLE_DCHECK_NE(&from, this);
  const CSShopBuy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSShopBuy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSShopBuy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSShopBuy)
    MergeFrom(*source);
  }
}

void CSShopBuy::MergeFrom(const CSShopBuy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSShopBuy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.propsid() != 0) {
    _internal_set_propsid(from._internal_propsid());
  }
  if (from.propsnum() != 0) {
    _internal_set_propsnum(from._internal_propsnum());
  }
}

void CSShopBuy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSShopBuy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSShopBuy::CopyFrom(const CSShopBuy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSShopBuy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSShopBuy::IsInitialized() const {
  return true;
}

void CSShopBuy::InternalSwap(CSShopBuy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSShopBuy, propsnum_)
      + sizeof(CSShopBuy::propsnum_)
      - PROTOBUF_FIELD_OFFSET(CSShopBuy, propsid_)>(
          reinterpret_cast<char*>(&propsid_),
          reinterpret_cast<char*>(&other->propsid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSShopBuy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCShopBuy::_Internal {
 public:
};

SCShopBuy::SCShopBuy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCShopBuy)
}
SCShopBuy::SCShopBuy(const SCShopBuy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&propsid_, &from.propsid_,
    static_cast<size_t>(reinterpret_cast<char*>(&propsnum_) -
    reinterpret_cast<char*>(&propsid_)) + sizeof(propsnum_));
  // @@protoc_insertion_point(copy_constructor:SCShopBuy)
}

void SCShopBuy::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&propsid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&propsnum_) -
      reinterpret_cast<char*>(&propsid_)) + sizeof(propsnum_));
}

SCShopBuy::~SCShopBuy() {
  // @@protoc_insertion_point(destructor:SCShopBuy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCShopBuy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCShopBuy::ArenaDtor(void* object) {
  SCShopBuy* _this = reinterpret_cast< SCShopBuy* >(object);
  (void)_this;
}
void SCShopBuy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCShopBuy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCShopBuy& SCShopBuy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCShopBuy_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCShopBuy::Clear() {
// @@protoc_insertion_point(message_clear_start:SCShopBuy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&propsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&propsnum_) -
      reinterpret_cast<char*>(&propsid_)) + sizeof(propsnum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCShopBuy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 PropsID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          propsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PropsNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          propsnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCShopBuy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCShopBuy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PropsID = 1;
  if (this->propsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_propsid(), target);
  }

  // int32 PropsNum = 2;
  if (this->propsnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_propsnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCShopBuy)
  return target;
}

size_t SCShopBuy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCShopBuy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PropsID = 1;
  if (this->propsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_propsid());
  }

  // int32 PropsNum = 2;
  if (this->propsnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_propsnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCShopBuy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCShopBuy)
  GOOGLE_DCHECK_NE(&from, this);
  const SCShopBuy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCShopBuy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCShopBuy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCShopBuy)
    MergeFrom(*source);
  }
}

void SCShopBuy::MergeFrom(const SCShopBuy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCShopBuy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.propsid() != 0) {
    _internal_set_propsid(from._internal_propsid());
  }
  if (from.propsnum() != 0) {
    _internal_set_propsnum(from._internal_propsnum());
  }
}

void SCShopBuy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCShopBuy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCShopBuy::CopyFrom(const SCShopBuy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCShopBuy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCShopBuy::IsInitialized() const {
  return true;
}

void SCShopBuy::InternalSwap(SCShopBuy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCShopBuy, propsnum_)
      + sizeof(SCShopBuy::propsnum_)
      - PROTOBUF_FIELD_OFFSET(SCShopBuy, propsid_)>(
          reinterpret_cast<char*>(&propsid_),
          reinterpret_cast<char*>(&other->propsid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCShopBuy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MaterialsInfo::_Internal {
 public:
};

MaterialsInfo::MaterialsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MaterialsInfo)
}
MaterialsInfo::MaterialsInfo(const MaterialsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&positionid_, &from.positionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&positionid_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:MaterialsInfo)
}

void MaterialsInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&positionid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&positionid_)) + sizeof(num_));
}

MaterialsInfo::~MaterialsInfo() {
  // @@protoc_insertion_point(destructor:MaterialsInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MaterialsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MaterialsInfo::ArenaDtor(void* object) {
  MaterialsInfo* _this = reinterpret_cast< MaterialsInfo* >(object);
  (void)_this;
}
void MaterialsInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MaterialsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MaterialsInfo& MaterialsInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MaterialsInfo_JSBY_2eproto.base);
  return *internal_default_instance();
}


void MaterialsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MaterialsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&positionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&positionid_)) + sizeof(num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaterialsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 PositionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          positionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PropsID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          propsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MaterialsInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaterialsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PositionId = 1;
  if (this->positionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_positionid(), target);
  }

  // int32 PropsID = 2;
  if (this->propsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_propsid(), target);
  }

  // int32 Num = 3;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaterialsInfo)
  return target;
}

size_t MaterialsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MaterialsInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PositionId = 1;
  if (this->positionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_positionid());
  }

  // int32 PropsID = 2;
  if (this->propsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_propsid());
  }

  // int32 Num = 3;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaterialsInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MaterialsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MaterialsInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MaterialsInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MaterialsInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MaterialsInfo)
    MergeFrom(*source);
  }
}

void MaterialsInfo::MergeFrom(const MaterialsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MaterialsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.positionid() != 0) {
    _internal_set_positionid(from._internal_positionid());
  }
  if (from.propsid() != 0) {
    _internal_set_propsid(from._internal_propsid());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
}

void MaterialsInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MaterialsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaterialsInfo::CopyFrom(const MaterialsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MaterialsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaterialsInfo::IsInitialized() const {
  return true;
}

void MaterialsInfo::InternalSwap(MaterialsInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaterialsInfo, num_)
      + sizeof(MaterialsInfo::num_)
      - PROTOBUF_FIELD_OFFSET(MaterialsInfo, positionid_)>(
          reinterpret_cast<char*>(&positionid_),
          reinterpret_cast<char*>(&other->positionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MaterialsInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPushDropMaterials::_Internal {
 public:
  static const ::MaterialsInfo& info(const SCPushDropMaterials* msg);
};

const ::MaterialsInfo&
SCPushDropMaterials::_Internal::info(const SCPushDropMaterials* msg) {
  return *msg->info_;
}
SCPushDropMaterials::SCPushDropMaterials(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCPushDropMaterials)
}
SCPushDropMaterials::SCPushDropMaterials(const SCPushDropMaterials& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::MaterialsInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SCPushDropMaterials)
}

void SCPushDropMaterials::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCPushDropMaterials_JSBY_2eproto.base);
  info_ = nullptr;
}

SCPushDropMaterials::~SCPushDropMaterials() {
  // @@protoc_insertion_point(destructor:SCPushDropMaterials)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPushDropMaterials::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void SCPushDropMaterials::ArenaDtor(void* object) {
  SCPushDropMaterials* _this = reinterpret_cast< SCPushDropMaterials* >(object);
  (void)_this;
}
void SCPushDropMaterials::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPushDropMaterials::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPushDropMaterials& SCPushDropMaterials::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPushDropMaterials_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCPushDropMaterials::Clear() {
// @@protoc_insertion_point(message_clear_start:SCPushDropMaterials)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPushDropMaterials::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MaterialsInfo Info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPushDropMaterials::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCPushDropMaterials)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MaterialsInfo Info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCPushDropMaterials)
  return target;
}

size_t SCPushDropMaterials::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCPushDropMaterials)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MaterialsInfo Info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPushDropMaterials::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCPushDropMaterials)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPushDropMaterials* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPushDropMaterials>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCPushDropMaterials)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCPushDropMaterials)
    MergeFrom(*source);
  }
}

void SCPushDropMaterials::MergeFrom(const SCPushDropMaterials& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCPushDropMaterials)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::MaterialsInfo::MergeFrom(from._internal_info());
  }
}

void SCPushDropMaterials::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCPushDropMaterials)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPushDropMaterials::CopyFrom(const SCPushDropMaterials& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCPushDropMaterials)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPushDropMaterials::IsInitialized() const {
  return true;
}

void SCPushDropMaterials::InternalSwap(SCPushDropMaterials* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPushDropMaterials::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPushBalloonTimes::_Internal {
 public:
  static const ::SpecialAttackInfo& attackinfo(const SCPushBalloonTimes* msg);
};

const ::SpecialAttackInfo&
SCPushBalloonTimes::_Internal::attackinfo(const SCPushBalloonTimes* msg) {
  return *msg->attackinfo_;
}
SCPushBalloonTimes::SCPushBalloonTimes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCPushBalloonTimes)
}
SCPushBalloonTimes::SCPushBalloonTimes(const SCPushBalloonTimes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attackinfo()) {
    attackinfo_ = new ::SpecialAttackInfo(*from.attackinfo_);
  } else {
    attackinfo_ = nullptr;
  }
  ::memcpy(&positionid_, &from.positionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&attackcount_) -
    reinterpret_cast<char*>(&positionid_)) + sizeof(attackcount_));
  // @@protoc_insertion_point(copy_constructor:SCPushBalloonTimes)
}

void SCPushBalloonTimes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCPushBalloonTimes_JSBY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&attackinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&attackcount_) -
      reinterpret_cast<char*>(&attackinfo_)) + sizeof(attackcount_));
}

SCPushBalloonTimes::~SCPushBalloonTimes() {
  // @@protoc_insertion_point(destructor:SCPushBalloonTimes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPushBalloonTimes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete attackinfo_;
}

void SCPushBalloonTimes::ArenaDtor(void* object) {
  SCPushBalloonTimes* _this = reinterpret_cast< SCPushBalloonTimes* >(object);
  (void)_this;
}
void SCPushBalloonTimes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPushBalloonTimes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPushBalloonTimes& SCPushBalloonTimes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPushBalloonTimes_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCPushBalloonTimes::Clear() {
// @@protoc_insertion_point(message_clear_start:SCPushBalloonTimes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && attackinfo_ != nullptr) {
    delete attackinfo_;
  }
  attackinfo_ = nullptr;
  ::memset(&positionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attackcount_) -
      reinterpret_cast<char*>(&positionid_)) + sizeof(attackcount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPushBalloonTimes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 PositionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          positionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PlayerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 FreeTimes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          freetimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Ratio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 StartTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 AttackCount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          attackcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SpecialAttackInfo AttackInfo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_attackinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPushBalloonTimes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCPushBalloonTimes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PositionId = 1;
  if (this->positionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_positionid(), target);
  }

  // int32 PlayerId = 2;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_playerid(), target);
  }

  // int32 FreeTimes = 3;
  if (this->freetimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_freetimes(), target);
  }

  // int32 Ratio = 4;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ratio(), target);
  }

  // int32 StartTime = 5;
  if (this->starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_starttime(), target);
  }

  // int32 AttackCount = 6;
  if (this->attackcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_attackcount(), target);
  }

  // .SpecialAttackInfo AttackInfo = 7;
  if (this->has_attackinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::attackinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCPushBalloonTimes)
  return target;
}

size_t SCPushBalloonTimes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCPushBalloonTimes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SpecialAttackInfo AttackInfo = 7;
  if (this->has_attackinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attackinfo_);
  }

  // int32 PositionId = 1;
  if (this->positionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_positionid());
  }

  // int32 PlayerId = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  // int32 FreeTimes = 3;
  if (this->freetimes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_freetimes());
  }

  // int32 Ratio = 4;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // int32 StartTime = 5;
  if (this->starttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_starttime());
  }

  // int32 AttackCount = 6;
  if (this->attackcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attackcount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPushBalloonTimes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCPushBalloonTimes)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPushBalloonTimes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPushBalloonTimes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCPushBalloonTimes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCPushBalloonTimes)
    MergeFrom(*source);
  }
}

void SCPushBalloonTimes::MergeFrom(const SCPushBalloonTimes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCPushBalloonTimes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_attackinfo()) {
    _internal_mutable_attackinfo()->::SpecialAttackInfo::MergeFrom(from._internal_attackinfo());
  }
  if (from.positionid() != 0) {
    _internal_set_positionid(from._internal_positionid());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.freetimes() != 0) {
    _internal_set_freetimes(from._internal_freetimes());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.starttime() != 0) {
    _internal_set_starttime(from._internal_starttime());
  }
  if (from.attackcount() != 0) {
    _internal_set_attackcount(from._internal_attackcount());
  }
}

void SCPushBalloonTimes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCPushBalloonTimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPushBalloonTimes::CopyFrom(const SCPushBalloonTimes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCPushBalloonTimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPushBalloonTimes::IsInitialized() const {
  return true;
}

void SCPushBalloonTimes::InternalSwap(SCPushBalloonTimes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCPushBalloonTimes, attackcount_)
      + sizeof(SCPushBalloonTimes::attackcount_)
      - PROTOBUF_FIELD_OFFSET(SCPushBalloonTimes, attackinfo_)>(
          reinterpret_cast<char*>(&attackinfo_),
          reinterpret_cast<char*>(&other->attackinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPushBalloonTimes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SwitchInfo::_Internal {
 public:
};

SwitchInfo::SwitchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SwitchInfo)
}
SwitchInfo::SwitchInfo(const SwitchInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&open_) -
    reinterpret_cast<char*>(&id_)) + sizeof(open_));
  // @@protoc_insertion_point(copy_constructor:SwitchInfo)
}

void SwitchInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&open_) -
      reinterpret_cast<char*>(&id_)) + sizeof(open_));
}

SwitchInfo::~SwitchInfo() {
  // @@protoc_insertion_point(destructor:SwitchInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SwitchInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SwitchInfo::ArenaDtor(void* object) {
  SwitchInfo* _this = reinterpret_cast< SwitchInfo* >(object);
  (void)_this;
}
void SwitchInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SwitchInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SwitchInfo& SwitchInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SwitchInfo_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SwitchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SwitchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&open_) -
      reinterpret_cast<char*>(&id_)) + sizeof(open_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwitchInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Open = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SwitchInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SwitchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // bool Open = 2;
  if (this->open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_open(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SwitchInfo)
  return target;
}

size_t SwitchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SwitchInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // bool Open = 2;
  if (this->open() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwitchInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SwitchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SwitchInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SwitchInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SwitchInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SwitchInfo)
    MergeFrom(*source);
  }
}

void SwitchInfo::MergeFrom(const SwitchInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SwitchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.open() != 0) {
    _internal_set_open(from._internal_open());
  }
}

void SwitchInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SwitchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwitchInfo::CopyFrom(const SwitchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SwitchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchInfo::IsInitialized() const {
  return true;
}

void SwitchInfo::InternalSwap(SwitchInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwitchInfo, open_)
      + sizeof(SwitchInfo::open_)
      - PROTOBUF_FIELD_OFFSET(SwitchInfo, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwitchInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCFunctionSwitch::_Internal {
 public:
  static const ::SwitchInfo& info(const SCFunctionSwitch* msg);
};

const ::SwitchInfo&
SCFunctionSwitch::_Internal::info(const SCFunctionSwitch* msg) {
  return *msg->info_;
}
SCFunctionSwitch::SCFunctionSwitch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCFunctionSwitch)
}
SCFunctionSwitch::SCFunctionSwitch(const SCFunctionSwitch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::SwitchInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SCFunctionSwitch)
}

void SCFunctionSwitch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCFunctionSwitch_JSBY_2eproto.base);
  info_ = nullptr;
}

SCFunctionSwitch::~SCFunctionSwitch() {
  // @@protoc_insertion_point(destructor:SCFunctionSwitch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCFunctionSwitch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void SCFunctionSwitch::ArenaDtor(void* object) {
  SCFunctionSwitch* _this = reinterpret_cast< SCFunctionSwitch* >(object);
  (void)_this;
}
void SCFunctionSwitch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCFunctionSwitch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCFunctionSwitch& SCFunctionSwitch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCFunctionSwitch_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCFunctionSwitch::Clear() {
// @@protoc_insertion_point(message_clear_start:SCFunctionSwitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCFunctionSwitch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SwitchInfo Info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCFunctionSwitch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCFunctionSwitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SwitchInfo Info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCFunctionSwitch)
  return target;
}

size_t SCFunctionSwitch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCFunctionSwitch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SwitchInfo Info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCFunctionSwitch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCFunctionSwitch)
  GOOGLE_DCHECK_NE(&from, this);
  const SCFunctionSwitch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCFunctionSwitch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCFunctionSwitch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCFunctionSwitch)
    MergeFrom(*source);
  }
}

void SCFunctionSwitch::MergeFrom(const SCFunctionSwitch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCFunctionSwitch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::SwitchInfo::MergeFrom(from._internal_info());
  }
}

void SCFunctionSwitch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCFunctionSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCFunctionSwitch::CopyFrom(const SCFunctionSwitch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCFunctionSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCFunctionSwitch::IsInitialized() const {
  return true;
}

void SCFunctionSwitch::InternalSwap(SCFunctionSwitch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCFunctionSwitch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSealConvertMoney::_Internal {
 public:
};

CSSealConvertMoney::CSSealConvertMoney(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSSealConvertMoney)
}
CSSealConvertMoney::CSSealConvertMoney(const CSSealConvertMoney& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSSealConvertMoney)
}

void CSSealConvertMoney::SharedCtor() {
}

CSSealConvertMoney::~CSSealConvertMoney() {
  // @@protoc_insertion_point(destructor:CSSealConvertMoney)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSealConvertMoney::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSSealConvertMoney::ArenaDtor(void* object) {
  CSSealConvertMoney* _this = reinterpret_cast< CSSealConvertMoney* >(object);
  (void)_this;
}
void CSSealConvertMoney::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSealConvertMoney::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSealConvertMoney& CSSealConvertMoney::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSealConvertMoney_JSBY_2eproto.base);
  return *internal_default_instance();
}


void CSSealConvertMoney::Clear() {
// @@protoc_insertion_point(message_clear_start:CSSealConvertMoney)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSealConvertMoney::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSealConvertMoney::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSSealConvertMoney)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSSealConvertMoney)
  return target;
}

size_t CSSealConvertMoney::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSSealConvertMoney)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSealConvertMoney::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSSealConvertMoney)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSealConvertMoney* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSealConvertMoney>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSSealConvertMoney)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSSealConvertMoney)
    MergeFrom(*source);
  }
}

void CSSealConvertMoney::MergeFrom(const CSSealConvertMoney& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSSealConvertMoney)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSSealConvertMoney::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSSealConvertMoney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSealConvertMoney::CopyFrom(const CSSealConvertMoney& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSSealConvertMoney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSealConvertMoney::IsInitialized() const {
  return true;
}

void CSSealConvertMoney::InternalSwap(CSSealConvertMoney* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSealConvertMoney::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSealConvertMoney::_Internal {
 public:
};

SCSealConvertMoney::SCSealConvertMoney(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCSealConvertMoney)
}
SCSealConvertMoney::SCSealConvertMoney(const SCSealConvertMoney& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&money_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(money_));
  // @@protoc_insertion_point(copy_constructor:SCSealConvertMoney)
}

void SCSealConvertMoney::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&money_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(money_));
}

SCSealConvertMoney::~SCSealConvertMoney() {
  // @@protoc_insertion_point(destructor:SCSealConvertMoney)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSealConvertMoney::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSealConvertMoney::ArenaDtor(void* object) {
  SCSealConvertMoney* _this = reinterpret_cast< SCSealConvertMoney* >(object);
  (void)_this;
}
void SCSealConvertMoney::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSealConvertMoney::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSealConvertMoney& SCSealConvertMoney::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSealConvertMoney_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCSealConvertMoney::Clear() {
// @@protoc_insertion_point(message_clear_start:SCSealConvertMoney)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&money_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(money_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSealConvertMoney::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 PlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Seal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          seal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Money = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSealConvertMoney::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCSealConvertMoney)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PlayerId = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // int32 Seal = 2;
  if (this->seal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_seal(), target);
  }

  // int32 Money = 3;
  if (this->money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_money(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCSealConvertMoney)
  return target;
}

size_t SCSealConvertMoney::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCSealConvertMoney)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PlayerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  // int32 Seal = 2;
  if (this->seal() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seal());
  }

  // int32 Money = 3;
  if (this->money() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_money());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSealConvertMoney::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCSealConvertMoney)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSealConvertMoney* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSealConvertMoney>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCSealConvertMoney)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCSealConvertMoney)
    MergeFrom(*source);
  }
}

void SCSealConvertMoney::MergeFrom(const SCSealConvertMoney& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCSealConvertMoney)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.seal() != 0) {
    _internal_set_seal(from._internal_seal());
  }
  if (from.money() != 0) {
    _internal_set_money(from._internal_money());
  }
}

void SCSealConvertMoney::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCSealConvertMoney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSealConvertMoney::CopyFrom(const SCSealConvertMoney& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCSealConvertMoney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSealConvertMoney::IsInitialized() const {
  return true;
}

void SCSealConvertMoney::InternalSwap(SCSealConvertMoney* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCSealConvertMoney, money_)
      + sizeof(SCSealConvertMoney::money_)
      - PROTOBUF_FIELD_OFFSET(SCSealConvertMoney, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSealConvertMoney::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConnectMonster::_Internal {
 public:
};

ConnectMonster::ConnectMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ConnectMonster)
}
ConnectMonster::ConnectMonster(const ConnectMonster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&positionid_, &from.positionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&monsterid_) -
    reinterpret_cast<char*>(&positionid_)) + sizeof(monsterid_));
  // @@protoc_insertion_point(copy_constructor:ConnectMonster)
}

void ConnectMonster::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&positionid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&monsterid_) -
      reinterpret_cast<char*>(&positionid_)) + sizeof(monsterid_));
}

ConnectMonster::~ConnectMonster() {
  // @@protoc_insertion_point(destructor:ConnectMonster)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConnectMonster::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ConnectMonster::ArenaDtor(void* object) {
  ConnectMonster* _this = reinterpret_cast< ConnectMonster* >(object);
  (void)_this;
}
void ConnectMonster::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectMonster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectMonster& ConnectMonster::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectMonster_JSBY_2eproto.base);
  return *internal_default_instance();
}


void ConnectMonster::Clear() {
// @@protoc_insertion_point(message_clear_start:ConnectMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&positionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&monsterid_) -
      reinterpret_cast<char*>(&positionid_)) + sizeof(monsterid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectMonster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 PositionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          positionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MonsterID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          monsterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectMonster::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConnectMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PositionID = 1;
  if (this->positionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_positionid(), target);
  }

  // int32 MonsterID = 2;
  if (this->monsterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_monsterid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConnectMonster)
  return target;
}

size_t ConnectMonster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConnectMonster)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PositionID = 1;
  if (this->positionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_positionid());
  }

  // int32 MonsterID = 2;
  if (this->monsterid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_monsterid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectMonster::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConnectMonster)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectMonster* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectMonster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConnectMonster)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConnectMonster)
    MergeFrom(*source);
  }
}

void ConnectMonster::MergeFrom(const ConnectMonster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConnectMonster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.positionid() != 0) {
    _internal_set_positionid(from._internal_positionid());
  }
  if (from.monsterid() != 0) {
    _internal_set_monsterid(from._internal_monsterid());
  }
}

void ConnectMonster::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConnectMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectMonster::CopyFrom(const ConnectMonster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConnectMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectMonster::IsInitialized() const {
  return true;
}

void ConnectMonster::InternalSwap(ConnectMonster* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConnectMonster, monsterid_)
      + sizeof(ConnectMonster::monsterid_)
      - PROTOBUF_FIELD_OFFSET(ConnectMonster, positionid_)>(
          reinterpret_cast<char*>(&positionid_),
          reinterpret_cast<char*>(&other->positionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectMonster::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPushConnectMonster::_Internal {
 public:
  static const ::ConnectMonster& connect(const SCPushConnectMonster* msg);
};

const ::ConnectMonster&
SCPushConnectMonster::_Internal::connect(const SCPushConnectMonster* msg) {
  return *msg->connect_;
}
SCPushConnectMonster::SCPushConnectMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCPushConnectMonster)
}
SCPushConnectMonster::SCPushConnectMonster(const SCPushConnectMonster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_connect()) {
    connect_ = new ::ConnectMonster(*from.connect_);
  } else {
    connect_ = nullptr;
  }
  ::memcpy(&connectid_, &from.connectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&attackpositionid_) -
    reinterpret_cast<char*>(&connectid_)) + sizeof(attackpositionid_));
  // @@protoc_insertion_point(copy_constructor:SCPushConnectMonster)
}

void SCPushConnectMonster::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCPushConnectMonster_JSBY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&connect_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&attackpositionid_) -
      reinterpret_cast<char*>(&connect_)) + sizeof(attackpositionid_));
}

SCPushConnectMonster::~SCPushConnectMonster() {
  // @@protoc_insertion_point(destructor:SCPushConnectMonster)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPushConnectMonster::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete connect_;
}

void SCPushConnectMonster::ArenaDtor(void* object) {
  SCPushConnectMonster* _this = reinterpret_cast< SCPushConnectMonster* >(object);
  (void)_this;
}
void SCPushConnectMonster::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPushConnectMonster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPushConnectMonster& SCPushConnectMonster::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPushConnectMonster_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCPushConnectMonster::Clear() {
// @@protoc_insertion_point(message_clear_start:SCPushConnectMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && connect_ != nullptr) {
    delete connect_;
  }
  connect_ = nullptr;
  ::memset(&connectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attackpositionid_) -
      reinterpret_cast<char*>(&connectid_)) + sizeof(attackpositionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPushConnectMonster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ConnectMonster Connect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_connect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ConnectID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          connectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 AttackPositionID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          attackpositionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPushConnectMonster::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCPushConnectMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConnectMonster Connect = 1;
  if (this->has_connect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::connect(this), target, stream);
  }

  // int32 ConnectID = 2;
  if (this->connectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_connectid(), target);
  }

  // int32 AttackPositionID = 3;
  if (this->attackpositionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_attackpositionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCPushConnectMonster)
  return target;
}

size_t SCPushConnectMonster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCPushConnectMonster)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ConnectMonster Connect = 1;
  if (this->has_connect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *connect_);
  }

  // int32 ConnectID = 2;
  if (this->connectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_connectid());
  }

  // int32 AttackPositionID = 3;
  if (this->attackpositionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attackpositionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPushConnectMonster::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCPushConnectMonster)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPushConnectMonster* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPushConnectMonster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCPushConnectMonster)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCPushConnectMonster)
    MergeFrom(*source);
  }
}

void SCPushConnectMonster::MergeFrom(const SCPushConnectMonster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCPushConnectMonster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_connect()) {
    _internal_mutable_connect()->::ConnectMonster::MergeFrom(from._internal_connect());
  }
  if (from.connectid() != 0) {
    _internal_set_connectid(from._internal_connectid());
  }
  if (from.attackpositionid() != 0) {
    _internal_set_attackpositionid(from._internal_attackpositionid());
  }
}

void SCPushConnectMonster::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCPushConnectMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPushConnectMonster::CopyFrom(const SCPushConnectMonster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCPushConnectMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPushConnectMonster::IsInitialized() const {
  return true;
}

void SCPushConnectMonster::InternalSwap(SCPushConnectMonster* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCPushConnectMonster, attackpositionid_)
      + sizeof(SCPushConnectMonster::attackpositionid_)
      - PROTOBUF_FIELD_OFFSET(SCPushConnectMonster, connect_)>(
          reinterpret_cast<char*>(&connect_),
          reinterpret_cast<char*>(&other->connect_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPushConnectMonster::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGiantUpgrade::_Internal {
 public:
  static const ::SpecialAttackInfo& attackinfo(const SCGiantUpgrade* msg);
};

const ::SpecialAttackInfo&
SCGiantUpgrade::_Internal::attackinfo(const SCGiantUpgrade* msg) {
  return *msg->attackinfo_;
}
SCGiantUpgrade::SCGiantUpgrade(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCGiantUpgrade)
}
SCGiantUpgrade::SCGiantUpgrade(const SCGiantUpgrade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attackinfo()) {
    attackinfo_ = new ::SpecialAttackInfo(*from.attackinfo_);
  } else {
    attackinfo_ = nullptr;
  }
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ratio_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(ratio_));
  // @@protoc_insertion_point(copy_constructor:SCGiantUpgrade)
}

void SCGiantUpgrade::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCGiantUpgrade_JSBY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&attackinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ratio_) -
      reinterpret_cast<char*>(&attackinfo_)) + sizeof(ratio_));
}

SCGiantUpgrade::~SCGiantUpgrade() {
  // @@protoc_insertion_point(destructor:SCGiantUpgrade)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGiantUpgrade::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete attackinfo_;
}

void SCGiantUpgrade::ArenaDtor(void* object) {
  SCGiantUpgrade* _this = reinterpret_cast< SCGiantUpgrade* >(object);
  (void)_this;
}
void SCGiantUpgrade::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGiantUpgrade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGiantUpgrade& SCGiantUpgrade::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGiantUpgrade_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCGiantUpgrade::Clear() {
// @@protoc_insertion_point(message_clear_start:SCGiantUpgrade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && attackinfo_ != nullptr) {
    delete attackinfo_;
  }
  attackinfo_ = nullptr;
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ratio_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(ratio_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGiantUpgrade::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 PlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PositionId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          positionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 AttackTimes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          attacktimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SpecialAttackInfo AttackInfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_attackinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool IsOver = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          isover_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Ratio = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGiantUpgrade::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCGiantUpgrade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PlayerId = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // int32 PositionId = 2;
  if (this->positionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_positionid(), target);
  }

  // int32 Level = 3;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_level(), target);
  }

  // int32 AttackTimes = 4;
  if (this->attacktimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_attacktimes(), target);
  }

  // .SpecialAttackInfo AttackInfo = 5;
  if (this->has_attackinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::attackinfo(this), target, stream);
  }

  // bool IsOver = 6;
  if (this->isover() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_isover(), target);
  }

  // int32 Ratio = 7;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCGiantUpgrade)
  return target;
}

size_t SCGiantUpgrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCGiantUpgrade)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SpecialAttackInfo AttackInfo = 5;
  if (this->has_attackinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attackinfo_);
  }

  // int32 PlayerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  // int32 PositionId = 2;
  if (this->positionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_positionid());
  }

  // int32 Level = 3;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int32 AttackTimes = 4;
  if (this->attacktimes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attacktimes());
  }

  // bool IsOver = 6;
  if (this->isover() != 0) {
    total_size += 1 + 1;
  }

  // int32 Ratio = 7;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGiantUpgrade::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCGiantUpgrade)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGiantUpgrade* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGiantUpgrade>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCGiantUpgrade)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCGiantUpgrade)
    MergeFrom(*source);
  }
}

void SCGiantUpgrade::MergeFrom(const SCGiantUpgrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCGiantUpgrade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_attackinfo()) {
    _internal_mutable_attackinfo()->::SpecialAttackInfo::MergeFrom(from._internal_attackinfo());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.positionid() != 0) {
    _internal_set_positionid(from._internal_positionid());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.attacktimes() != 0) {
    _internal_set_attacktimes(from._internal_attacktimes());
  }
  if (from.isover() != 0) {
    _internal_set_isover(from._internal_isover());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
}

void SCGiantUpgrade::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCGiantUpgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGiantUpgrade::CopyFrom(const SCGiantUpgrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCGiantUpgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGiantUpgrade::IsInitialized() const {
  return true;
}

void SCGiantUpgrade::InternalSwap(SCGiantUpgrade* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCGiantUpgrade, ratio_)
      + sizeof(SCGiantUpgrade::ratio_)
      - PROTOBUF_FIELD_OFFSET(SCGiantUpgrade, attackinfo_)>(
          reinterpret_cast<char*>(&attackinfo_),
          reinterpret_cast<char*>(&other->attackinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGiantUpgrade::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPushGiantEnd::_Internal {
 public:
};

SCPushGiantEnd::SCPushGiantEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCPushGiantEnd)
}
SCPushGiantEnd::SCPushGiantEnd(const SCPushGiantEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&positionid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(positionid_));
  // @@protoc_insertion_point(copy_constructor:SCPushGiantEnd)
}

void SCPushGiantEnd::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&positionid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(positionid_));
}

SCPushGiantEnd::~SCPushGiantEnd() {
  // @@protoc_insertion_point(destructor:SCPushGiantEnd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPushGiantEnd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCPushGiantEnd::ArenaDtor(void* object) {
  SCPushGiantEnd* _this = reinterpret_cast< SCPushGiantEnd* >(object);
  (void)_this;
}
void SCPushGiantEnd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPushGiantEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPushGiantEnd& SCPushGiantEnd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPushGiantEnd_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCPushGiantEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:SCPushGiantEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&positionid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(positionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPushGiantEnd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 PlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PositionId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          positionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPushGiantEnd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCPushGiantEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PlayerId = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // int32 PositionId = 2;
  if (this->positionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_positionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCPushGiantEnd)
  return target;
}

size_t SCPushGiantEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCPushGiantEnd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PlayerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  // int32 PositionId = 2;
  if (this->positionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_positionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPushGiantEnd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCPushGiantEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPushGiantEnd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPushGiantEnd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCPushGiantEnd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCPushGiantEnd)
    MergeFrom(*source);
  }
}

void SCPushGiantEnd::MergeFrom(const SCPushGiantEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCPushGiantEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.positionid() != 0) {
    _internal_set_positionid(from._internal_positionid());
  }
}

void SCPushGiantEnd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCPushGiantEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPushGiantEnd::CopyFrom(const SCPushGiantEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCPushGiantEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPushGiantEnd::IsInitialized() const {
  return true;
}

void SCPushGiantEnd::InternalSwap(SCPushGiantEnd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCPushGiantEnd, positionid_)
      + sizeof(SCPushGiantEnd::positionid_)
      - PROTOBUF_FIELD_OFFSET(SCPushGiantEnd, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPushGiantEnd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCDropCard::_Internal {
 public:
};

SCDropCard::SCDropCard(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCDropCard)
}
SCDropCard::SCDropCard(const SCDropCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&positionid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(positionid_));
  // @@protoc_insertion_point(copy_constructor:SCDropCard)
}

void SCDropCard::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&positionid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(positionid_));
}

SCDropCard::~SCDropCard() {
  // @@protoc_insertion_point(destructor:SCDropCard)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCDropCard::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCDropCard::ArenaDtor(void* object) {
  SCDropCard* _this = reinterpret_cast< SCDropCard* >(object);
  (void)_this;
}
void SCDropCard::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCDropCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCDropCard& SCDropCard::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCDropCard_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCDropCard::Clear() {
// @@protoc_insertion_point(message_clear_start:SCDropCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&positionid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(positionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCDropCard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 TypeID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          typeid__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Quality = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 BasePower = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          basepower_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ExtendPower = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          extendpower_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Equip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          equip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PositionID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          positionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCDropCard::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCDropCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 TypeID = 2;
  if (this->typeid_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_typeid_(), target);
  }

  // int32 Quality = 3;
  if (this->quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_quality(), target);
  }

  // int32 BasePower = 4;
  if (this->basepower() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_basepower(), target);
  }

  // int32 ExtendPower = 5;
  if (this->extendpower() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_extendpower(), target);
  }

  // int32 Equip = 6;
  if (this->equip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_equip(), target);
  }

  // int32 PositionID = 7;
  if (this->positionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_positionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCDropCard)
  return target;
}

size_t SCDropCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCDropCard)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 TypeID = 2;
  if (this->typeid_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_typeid_());
  }

  // int32 Quality = 3;
  if (this->quality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_quality());
  }

  // int32 BasePower = 4;
  if (this->basepower() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_basepower());
  }

  // int32 ExtendPower = 5;
  if (this->extendpower() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_extendpower());
  }

  // int32 Equip = 6;
  if (this->equip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_equip());
  }

  // int32 PositionID = 7;
  if (this->positionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_positionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCDropCard::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCDropCard)
  GOOGLE_DCHECK_NE(&from, this);
  const SCDropCard* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCDropCard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCDropCard)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCDropCard)
    MergeFrom(*source);
  }
}

void SCDropCard::MergeFrom(const SCDropCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCDropCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.typeid_() != 0) {
    _internal_set_typeid_(from._internal_typeid_());
  }
  if (from.quality() != 0) {
    _internal_set_quality(from._internal_quality());
  }
  if (from.basepower() != 0) {
    _internal_set_basepower(from._internal_basepower());
  }
  if (from.extendpower() != 0) {
    _internal_set_extendpower(from._internal_extendpower());
  }
  if (from.equip() != 0) {
    _internal_set_equip(from._internal_equip());
  }
  if (from.positionid() != 0) {
    _internal_set_positionid(from._internal_positionid());
  }
}

void SCDropCard::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCDropCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCDropCard::CopyFrom(const SCDropCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCDropCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCDropCard::IsInitialized() const {
  return true;
}

void SCDropCard::InternalSwap(SCDropCard* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCDropCard, positionid_)
      + sizeof(SCDropCard::positionid_)
      - PROTOBUF_FIELD_OFFSET(SCDropCard, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCDropCard::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCAcquireSeal::_Internal {
 public:
};

SCAcquireSeal::SCAcquireSeal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SCAcquireSeal)
}
SCAcquireSeal::SCAcquireSeal(const SCAcquireSeal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&heropositionid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(heropositionid_));
  // @@protoc_insertion_point(copy_constructor:SCAcquireSeal)
}

void SCAcquireSeal::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&heropositionid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(heropositionid_));
}

SCAcquireSeal::~SCAcquireSeal() {
  // @@protoc_insertion_point(destructor:SCAcquireSeal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCAcquireSeal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCAcquireSeal::ArenaDtor(void* object) {
  SCAcquireSeal* _this = reinterpret_cast< SCAcquireSeal* >(object);
  (void)_this;
}
void SCAcquireSeal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCAcquireSeal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCAcquireSeal& SCAcquireSeal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCAcquireSeal_JSBY_2eproto.base);
  return *internal_default_instance();
}


void SCAcquireSeal::Clear() {
// @@protoc_insertion_point(message_clear_start:SCAcquireSeal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heropositionid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(heropositionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCAcquireSeal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 PlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MxlSealAddAwardRatio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mxlsealaddawardratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 HeroPositionId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          heropositionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCAcquireSeal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCAcquireSeal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PlayerId = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // int32 MxlSealAddAwardRatio = 2;
  if (this->mxlsealaddawardratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mxlsealaddawardratio(), target);
  }

  // int32 HeroPositionId = 3;
  if (this->heropositionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_heropositionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCAcquireSeal)
  return target;
}

size_t SCAcquireSeal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCAcquireSeal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PlayerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  // int32 MxlSealAddAwardRatio = 2;
  if (this->mxlsealaddawardratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mxlsealaddawardratio());
  }

  // int32 HeroPositionId = 3;
  if (this->heropositionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_heropositionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCAcquireSeal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCAcquireSeal)
  GOOGLE_DCHECK_NE(&from, this);
  const SCAcquireSeal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCAcquireSeal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCAcquireSeal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCAcquireSeal)
    MergeFrom(*source);
  }
}

void SCAcquireSeal::MergeFrom(const SCAcquireSeal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCAcquireSeal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.mxlsealaddawardratio() != 0) {
    _internal_set_mxlsealaddawardratio(from._internal_mxlsealaddawardratio());
  }
  if (from.heropositionid() != 0) {
    _internal_set_heropositionid(from._internal_heropositionid());
  }
}

void SCAcquireSeal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCAcquireSeal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCAcquireSeal::CopyFrom(const SCAcquireSeal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCAcquireSeal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCAcquireSeal::IsInitialized() const {
  return true;
}

void SCAcquireSeal::InternalSwap(SCAcquireSeal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCAcquireSeal, heropositionid_)
      + sizeof(SCAcquireSeal::heropositionid_)
      - PROTOBUF_FIELD_OFFSET(SCAcquireSeal, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCAcquireSeal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FreshMoney::_Internal {
 public:
};

FreshMoney::FreshMoney(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FreshMoney)
}
FreshMoney::FreshMoney(const FreshMoney& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cymoney_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(cymoney_));
  // @@protoc_insertion_point(copy_constructor:FreshMoney)
}

void FreshMoney::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cymoney_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(cymoney_));
}

FreshMoney::~FreshMoney() {
  // @@protoc_insertion_point(destructor:FreshMoney)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FreshMoney::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FreshMoney::ArenaDtor(void* object) {
  FreshMoney* _this = reinterpret_cast< FreshMoney* >(object);
  (void)_this;
}
void FreshMoney::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FreshMoney::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FreshMoney& FreshMoney::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FreshMoney_JSBY_2eproto.base);
  return *internal_default_instance();
}


void FreshMoney::Clear() {
// @@protoc_insertion_point(message_clear_start:FreshMoney)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cymoney_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(cymoney_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FreshMoney::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 PlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Fee = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 GameID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CYMoney = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cymoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FreshMoney::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FreshMoney)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PlayerId = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // int32 Fee = 2;
  if (this->fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fee(), target);
  }

  // int32 GameID = 3;
  if (this->gameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_gameid(), target);
  }

  // int32 CYMoney = 4;
  if (this->cymoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_cymoney(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FreshMoney)
  return target;
}

size_t FreshMoney::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FreshMoney)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PlayerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  // int32 Fee = 2;
  if (this->fee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fee());
  }

  // int32 GameID = 3;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gameid());
  }

  // int32 CYMoney = 4;
  if (this->cymoney() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cymoney());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FreshMoney::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FreshMoney)
  GOOGLE_DCHECK_NE(&from, this);
  const FreshMoney* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FreshMoney>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FreshMoney)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FreshMoney)
    MergeFrom(*source);
  }
}

void FreshMoney::MergeFrom(const FreshMoney& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FreshMoney)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.fee() != 0) {
    _internal_set_fee(from._internal_fee());
  }
  if (from.gameid() != 0) {
    _internal_set_gameid(from._internal_gameid());
  }
  if (from.cymoney() != 0) {
    _internal_set_cymoney(from._internal_cymoney());
  }
}

void FreshMoney::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FreshMoney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreshMoney::CopyFrom(const FreshMoney& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FreshMoney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreshMoney::IsInitialized() const {
  return true;
}

void FreshMoney::InternalSwap(FreshMoney* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FreshMoney, cymoney_)
      + sizeof(FreshMoney::cymoney_)
      - PROTOBUF_FIELD_OFFSET(FreshMoney, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FreshMoney::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ShutdownService::_Internal {
 public:
};

ShutdownService::ShutdownService(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ShutdownService)
}
ShutdownService::ShutdownService(const ShutdownService& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(serverid_));
  // @@protoc_insertion_point(copy_constructor:ShutdownService)
}

void ShutdownService::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gameid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(serverid_));
}

ShutdownService::~ShutdownService() {
  // @@protoc_insertion_point(destructor:ShutdownService)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShutdownService::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShutdownService::ArenaDtor(void* object) {
  ShutdownService* _this = reinterpret_cast< ShutdownService* >(object);
  (void)_this;
}
void ShutdownService::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShutdownService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShutdownService& ShutdownService::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShutdownService_JSBY_2eproto.base);
  return *internal_default_instance();
}


void ShutdownService::Clear() {
// @@protoc_insertion_point(message_clear_start:ShutdownService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverid_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(serverid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShutdownService::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 GameID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ArenaID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          arenaid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ServerID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShutdownService::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShutdownService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 GameID = 1;
  if (this->gameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gameid(), target);
  }

  // int32 ArenaID = 2;
  if (this->arenaid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_arenaid(), target);
  }

  // int32 ServerID = 3;
  if (this->serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_serverid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShutdownService)
  return target;
}

size_t ShutdownService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShutdownService)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 GameID = 1;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gameid());
  }

  // int32 ArenaID = 2;
  if (this->arenaid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_arenaid());
  }

  // int32 ServerID = 3;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serverid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShutdownService::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ShutdownService)
  GOOGLE_DCHECK_NE(&from, this);
  const ShutdownService* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShutdownService>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ShutdownService)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ShutdownService)
    MergeFrom(*source);
  }
}

void ShutdownService::MergeFrom(const ShutdownService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShutdownService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gameid() != 0) {
    _internal_set_gameid(from._internal_gameid());
  }
  if (from.arenaid() != 0) {
    _internal_set_arenaid(from._internal_arenaid());
  }
  if (from.serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
}

void ShutdownService::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ShutdownService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutdownService::CopyFrom(const ShutdownService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShutdownService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownService::IsInitialized() const {
  return true;
}

void ShutdownService::InternalSwap(ShutdownService* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShutdownService, serverid_)
      + sizeof(ShutdownService::serverid_)
      - PROTOBUF_FIELD_OFFSET(ShutdownService, gameid_)>(
          reinterpret_cast<char*>(&gameid_),
          reinterpret_cast<char*>(&other->gameid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShutdownService::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::HeroInfo* Arena::CreateMaybeMessage< ::HeroInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HeroInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CSLoginGameWithToken* Arena::CreateMaybeMessage< ::CSLoginGameWithToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSLoginGameWithToken >(arena);
}
template<> PROTOBUF_NOINLINE ::SCLoginGameWithToken* Arena::CreateMaybeMessage< ::SCLoginGameWithToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCLoginGameWithToken >(arena);
}
template<> PROTOBUF_NOINLINE ::UserBomTimes* Arena::CreateMaybeMessage< ::UserBomTimes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserBomTimes >(arena);
}
template<> PROTOBUF_NOINLINE ::SpecialMonsterAttack* Arena::CreateMaybeMessage< ::SpecialMonsterAttack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpecialMonsterAttack >(arena);
}
template<> PROTOBUF_NOINLINE ::CSRequestAttack* Arena::CreateMaybeMessage< ::CSRequestAttack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSRequestAttack >(arena);
}
template<> PROTOBUF_NOINLINE ::SCRequestAttack* Arena::CreateMaybeMessage< ::SCRequestAttack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCRequestAttack >(arena);
}
template<> PROTOBUF_NOINLINE ::SpecialAttackInfo* Arena::CreateMaybeMessage< ::SpecialAttackInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpecialAttackInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SCSyncMoney* Arena::CreateMaybeMessage< ::SCSyncMoney >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCSyncMoney >(arena);
}
template<> PROTOBUF_NOINLINE ::SCPoisonBomTimes* Arena::CreateMaybeMessage< ::SCPoisonBomTimes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCPoisonBomTimes >(arena);
}
template<> PROTOBUF_NOINLINE ::CSChangePoisonBomTimes* Arena::CreateMaybeMessage< ::CSChangePoisonBomTimes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSChangePoisonBomTimes >(arena);
}
template<> PROTOBUF_NOINLINE ::SCChangePoisonBomTimes* Arena::CreateMaybeMessage< ::SCChangePoisonBomTimes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCChangePoisonBomTimes >(arena);
}
template<> PROTOBUF_NOINLINE ::CSEnterStage* Arena::CreateMaybeMessage< ::CSEnterStage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSEnterStage >(arena);
}
template<> PROTOBUF_NOINLINE ::SCEnterStage* Arena::CreateMaybeMessage< ::SCEnterStage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCEnterStage >(arena);
}
template<> PROTOBUF_NOINLINE ::CSKeepRatio* Arena::CreateMaybeMessage< ::CSKeepRatio >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSKeepRatio >(arena);
}
template<> PROTOBUF_NOINLINE ::SCKeepRatio* Arena::CreateMaybeMessage< ::SCKeepRatio >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCKeepRatio >(arena);
}
template<> PROTOBUF_NOINLINE ::TrusteeshipInfo* Arena::CreateMaybeMessage< ::TrusteeshipInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TrusteeshipInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CSGetTrusteeship* Arena::CreateMaybeMessage< ::CSGetTrusteeship >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSGetTrusteeship >(arena);
}
template<> PROTOBUF_NOINLINE ::SCGetTrusteeship* Arena::CreateMaybeMessage< ::SCGetTrusteeship >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCGetTrusteeship >(arena);
}
template<> PROTOBUF_NOINLINE ::CSSetTrusteeship* Arena::CreateMaybeMessage< ::CSSetTrusteeship >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSSetTrusteeship >(arena);
}
template<> PROTOBUF_NOINLINE ::SCSetTrusteeship* Arena::CreateMaybeMessage< ::SCSetTrusteeship >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCSetTrusteeship >(arena);
}
template<> PROTOBUF_NOINLINE ::TrusteeshipMoney* Arena::CreateMaybeMessage< ::TrusteeshipMoney >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TrusteeshipMoney >(arena);
}
template<> PROTOBUF_NOINLINE ::CSEndTrusteeship* Arena::CreateMaybeMessage< ::CSEndTrusteeship >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSEndTrusteeship >(arena);
}
template<> PROTOBUF_NOINLINE ::SCEndTrusteeship* Arena::CreateMaybeMessage< ::SCEndTrusteeship >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCEndTrusteeship >(arena);
}
template<> PROTOBUF_NOINLINE ::CSGetVersion* Arena::CreateMaybeMessage< ::CSGetVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSGetVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::SCGetVersion* Arena::CreateMaybeMessage< ::SCGetVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCGetVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::ActivityInfo* Arena::CreateMaybeMessage< ::ActivityInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ActivityInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CSActivityInfo* Arena::CreateMaybeMessage< ::CSActivityInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSActivityInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SCActivityInfo* Arena::CreateMaybeMessage< ::SCActivityInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCActivityInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SCNotifyActivityInfo* Arena::CreateMaybeMessage< ::SCNotifyActivityInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCNotifyActivityInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CSGetActivityAward* Arena::CreateMaybeMessage< ::CSGetActivityAward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSGetActivityAward >(arena);
}
template<> PROTOBUF_NOINLINE ::SCGetActivityAward* Arena::CreateMaybeMessage< ::SCGetActivityAward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCGetActivityAward >(arena);
}
template<> PROTOBUF_NOINLINE ::CSButtonRecords* Arena::CreateMaybeMessage< ::CSButtonRecords >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSButtonRecords >(arena);
}
template<> PROTOBUF_NOINLINE ::SCButtonRecords* Arena::CreateMaybeMessage< ::SCButtonRecords >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCButtonRecords >(arena);
}
template<> PROTOBUF_NOINLINE ::TowerHeroInfo* Arena::CreateMaybeMessage< ::TowerHeroInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TowerHeroInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TowerHeroAtkInfo* Arena::CreateMaybeMessage< ::TowerHeroAtkInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TowerHeroAtkInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TablePlayerInfo* Arena::CreateMaybeMessage< ::TablePlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TablePlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SCNotifyTowerTablePlayer* Arena::CreateMaybeMessage< ::SCNotifyTowerTablePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCNotifyTowerTablePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::SCLeaveTowerTable* Arena::CreateMaybeMessage< ::SCLeaveTowerTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCLeaveTowerTable >(arena);
}
template<> PROTOBUF_NOINLINE ::TowerMonster* Arena::CreateMaybeMessage< ::TowerMonster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TowerMonster >(arena);
}
template<> PROTOBUF_NOINLINE ::ChannelTowerMonster* Arena::CreateMaybeMessage< ::ChannelTowerMonster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChannelTowerMonster >(arena);
}
template<> PROTOBUF_NOINLINE ::SCGetTowerMonster* Arena::CreateMaybeMessage< ::SCGetTowerMonster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCGetTowerMonster >(arena);
}
template<> PROTOBUF_NOINLINE ::CSGetTowerMonster* Arena::CreateMaybeMessage< ::CSGetTowerMonster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSGetTowerMonster >(arena);
}
template<> PROTOBUF_NOINLINE ::SCSyncGetTowerMonster* Arena::CreateMaybeMessage< ::SCSyncGetTowerMonster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCSyncGetTowerMonster >(arena);
}
template<> PROTOBUF_NOINLINE ::SCTowerMonster* Arena::CreateMaybeMessage< ::SCTowerMonster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCTowerMonster >(arena);
}
template<> PROTOBUF_NOINLINE ::CSTowerHeroAtkInfo* Arena::CreateMaybeMessage< ::CSTowerHeroAtkInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSTowerHeroAtkInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SCTowerHeroAtkInfo* Arena::CreateMaybeMessage< ::SCTowerHeroAtkInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCTowerHeroAtkInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CSTowerUpdateHero* Arena::CreateMaybeMessage< ::CSTowerUpdateHero >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSTowerUpdateHero >(arena);
}
template<> PROTOBUF_NOINLINE ::SCTowerUpdateHero* Arena::CreateMaybeMessage< ::SCTowerUpdateHero >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCTowerUpdateHero >(arena);
}
template<> PROTOBUF_NOINLINE ::SCPushTowerUpdateHero* Arena::CreateMaybeMessage< ::SCPushTowerUpdateHero >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCPushTowerUpdateHero >(arena);
}
template<> PROTOBUF_NOINLINE ::LockTargetInfo* Arena::CreateMaybeMessage< ::LockTargetInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LockTargetInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CSTowerPlayerLockTarget* Arena::CreateMaybeMessage< ::CSTowerPlayerLockTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSTowerPlayerLockTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::SCTowerPlayerLockTarget* Arena::CreateMaybeMessage< ::SCTowerPlayerLockTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCTowerPlayerLockTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::CSChangeBackground* Arena::CreateMaybeMessage< ::CSChangeBackground >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSChangeBackground >(arena);
}
template<> PROTOBUF_NOINLINE ::SCChangeBackground* Arena::CreateMaybeMessage< ::SCChangeBackground >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCChangeBackground >(arena);
}
template<> PROTOBUF_NOINLINE ::CSTowerMonsterExit* Arena::CreateMaybeMessage< ::CSTowerMonsterExit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSTowerMonsterExit >(arena);
}
template<> PROTOBUF_NOINLINE ::SCTowerMonsterExit* Arena::CreateMaybeMessage< ::SCTowerMonsterExit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCTowerMonsterExit >(arena);
}
template<> PROTOBUF_NOINLINE ::CSGetCurrentTime* Arena::CreateMaybeMessage< ::CSGetCurrentTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSGetCurrentTime >(arena);
}
template<> PROTOBUF_NOINLINE ::SCGetCurrentTime* Arena::CreateMaybeMessage< ::SCGetCurrentTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCGetCurrentTime >(arena);
}
template<> PROTOBUF_NOINLINE ::TowerGuideInfo* Arena::CreateMaybeMessage< ::TowerGuideInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TowerGuideInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CSGetTowerStep* Arena::CreateMaybeMessage< ::CSGetTowerStep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSGetTowerStep >(arena);
}
template<> PROTOBUF_NOINLINE ::SCGetTowerGuide* Arena::CreateMaybeMessage< ::SCGetTowerGuide >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCGetTowerGuide >(arena);
}
template<> PROTOBUF_NOINLINE ::CSSetTowerStep* Arena::CreateMaybeMessage< ::CSSetTowerStep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSSetTowerStep >(arena);
}
template<> PROTOBUF_NOINLINE ::SCSetTowerStep* Arena::CreateMaybeMessage< ::SCSetTowerStep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCSetTowerStep >(arena);
}
template<> PROTOBUF_NOINLINE ::CSTowerExchangeHero* Arena::CreateMaybeMessage< ::CSTowerExchangeHero >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSTowerExchangeHero >(arena);
}
template<> PROTOBUF_NOINLINE ::SCTowerExchangeHero* Arena::CreateMaybeMessage< ::SCTowerExchangeHero >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCTowerExchangeHero >(arena);
}
template<> PROTOBUF_NOINLINE ::SCLeaveTowerTableCountdown* Arena::CreateMaybeMessage< ::SCLeaveTowerTableCountdown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCLeaveTowerTableCountdown >(arena);
}
template<> PROTOBUF_NOINLINE ::PoisonBombLocation* Arena::CreateMaybeMessage< ::PoisonBombLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PoisonBombLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::CSPoisonBombLocation* Arena::CreateMaybeMessage< ::CSPoisonBombLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSPoisonBombLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::SCPoisonBombLocation* Arena::CreateMaybeMessage< ::SCPoisonBombLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCPoisonBombLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::PoisonbombConvert* Arena::CreateMaybeMessage< ::PoisonbombConvert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PoisonbombConvert >(arena);
}
template<> PROTOBUF_NOINLINE ::SCPoisonBombConvert* Arena::CreateMaybeMessage< ::SCPoisonBombConvert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCPoisonBombConvert >(arena);
}
template<> PROTOBUF_NOINLINE ::PoisonbombType* Arena::CreateMaybeMessage< ::PoisonbombType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PoisonbombType >(arena);
}
template<> PROTOBUF_NOINLINE ::SCPoisonbombTypes* Arena::CreateMaybeMessage< ::SCPoisonbombTypes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCPoisonbombTypes >(arena);
}
template<> PROTOBUF_NOINLINE ::CSDragonRelease* Arena::CreateMaybeMessage< ::CSDragonRelease >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSDragonRelease >(arena);
}
template<> PROTOBUF_NOINLINE ::SCDragonRelease* Arena::CreateMaybeMessage< ::SCDragonRelease >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCDragonRelease >(arena);
}
template<> PROTOBUF_NOINLINE ::SCPushDragonRelease* Arena::CreateMaybeMessage< ::SCPushDragonRelease >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCPushDragonRelease >(arena);
}
template<> PROTOBUF_NOINLINE ::SCPushDragonEnd* Arena::CreateMaybeMessage< ::SCPushDragonEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCPushDragonEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::SCPushSelfDragonState* Arena::CreateMaybeMessage< ::SCPushSelfDragonState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCPushSelfDragonState >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOneKeyUpdateHero* Arena::CreateMaybeMessage< ::CSOneKeyUpdateHero >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOneKeyUpdateHero >(arena);
}
template<> PROTOBUF_NOINLINE ::SCOneKeyUpdateHero* Arena::CreateMaybeMessage< ::SCOneKeyUpdateHero >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCOneKeyUpdateHero >(arena);
}
template<> PROTOBUF_NOINLINE ::SCPushGhostDragonRelease* Arena::CreateMaybeMessage< ::SCPushGhostDragonRelease >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCPushGhostDragonRelease >(arena);
}
template<> PROTOBUF_NOINLINE ::SCPushGhostDragonEnd* Arena::CreateMaybeMessage< ::SCPushGhostDragonEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCPushGhostDragonEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::SCPushSelfGhostDragonState* Arena::CreateMaybeMessage< ::SCPushSelfGhostDragonState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCPushSelfGhostDragonState >(arena);
}
template<> PROTOBUF_NOINLINE ::HeroMoney* Arena::CreateMaybeMessage< ::HeroMoney >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HeroMoney >(arena);
}
template<> PROTOBUF_NOINLINE ::SCPushSyncHeroMoney* Arena::CreateMaybeMessage< ::SCPushSyncHeroMoney >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCPushSyncHeroMoney >(arena);
}
template<> PROTOBUF_NOINLINE ::SCPushMonsterDead* Arena::CreateMaybeMessage< ::SCPushMonsterDead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCPushMonsterDead >(arena);
}
template<> PROTOBUF_NOINLINE ::CSDebugData* Arena::CreateMaybeMessage< ::CSDebugData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSDebugData >(arena);
}
template<> PROTOBUF_NOINLINE ::SCDebugData* Arena::CreateMaybeMessage< ::SCDebugData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCDebugData >(arena);
}
template<> PROTOBUF_NOINLINE ::SCPushMonsterBuff* Arena::CreateMaybeMessage< ::SCPushMonsterBuff >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCPushMonsterBuff >(arena);
}
template<> PROTOBUF_NOINLINE ::TableState* Arena::CreateMaybeMessage< ::TableState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TableState >(arena);
}
template<> PROTOBUF_NOINLINE ::CSGetTableId* Arena::CreateMaybeMessage< ::CSGetTableId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSGetTableId >(arena);
}
template<> PROTOBUF_NOINLINE ::SCGetTableId* Arena::CreateMaybeMessage< ::SCGetTableId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCGetTableId >(arena);
}
template<> PROTOBUF_NOINLINE ::SCPlayerVipLevel* Arena::CreateMaybeMessage< ::SCPlayerVipLevel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCPlayerVipLevel >(arena);
}
template<> PROTOBUF_NOINLINE ::DragonProps* Arena::CreateMaybeMessage< ::DragonProps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DragonProps >(arena);
}
template<> PROTOBUF_NOINLINE ::CSGetDragonProps* Arena::CreateMaybeMessage< ::CSGetDragonProps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSGetDragonProps >(arena);
}
template<> PROTOBUF_NOINLINE ::SCGetDragonProps* Arena::CreateMaybeMessage< ::SCGetDragonProps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCGetDragonProps >(arena);
}
template<> PROTOBUF_NOINLINE ::CSEquipDragonProps* Arena::CreateMaybeMessage< ::CSEquipDragonProps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSEquipDragonProps >(arena);
}
template<> PROTOBUF_NOINLINE ::SCEquipDragonProps* Arena::CreateMaybeMessage< ::SCEquipDragonProps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCEquipDragonProps >(arena);
}
template<> PROTOBUF_NOINLINE ::SCPushDragonProps* Arena::CreateMaybeMessage< ::SCPushDragonProps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCPushDragonProps >(arena);
}
template<> PROTOBUF_NOINLINE ::ShopInfo* Arena::CreateMaybeMessage< ::ShopInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShopInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CSGetShopInfo* Arena::CreateMaybeMessage< ::CSGetShopInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSGetShopInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SCGetShopInfo* Arena::CreateMaybeMessage< ::SCGetShopInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCGetShopInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PropsInfo* Arena::CreateMaybeMessage< ::PropsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PropsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SCPushPropsInfo* Arena::CreateMaybeMessage< ::SCPushPropsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCPushPropsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CSGetMaterialsInfo* Arena::CreateMaybeMessage< ::CSGetMaterialsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSGetMaterialsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SCGetMaterialsInfo* Arena::CreateMaybeMessage< ::SCGetMaterialsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCGetMaterialsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CSExchangeBox* Arena::CreateMaybeMessage< ::CSExchangeBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSExchangeBox >(arena);
}
template<> PROTOBUF_NOINLINE ::RewardInfo* Arena::CreateMaybeMessage< ::RewardInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RewardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SCExchangeBox* Arena::CreateMaybeMessage< ::SCExchangeBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCExchangeBox >(arena);
}
template<> PROTOBUF_NOINLINE ::CSDoublingBox* Arena::CreateMaybeMessage< ::CSDoublingBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSDoublingBox >(arena);
}
template<> PROTOBUF_NOINLINE ::SCDoublingBox* Arena::CreateMaybeMessage< ::SCDoublingBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCDoublingBox >(arena);
}
template<> PROTOBUF_NOINLINE ::CSShopBuy* Arena::CreateMaybeMessage< ::CSShopBuy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSShopBuy >(arena);
}
template<> PROTOBUF_NOINLINE ::SCShopBuy* Arena::CreateMaybeMessage< ::SCShopBuy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCShopBuy >(arena);
}
template<> PROTOBUF_NOINLINE ::MaterialsInfo* Arena::CreateMaybeMessage< ::MaterialsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MaterialsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SCPushDropMaterials* Arena::CreateMaybeMessage< ::SCPushDropMaterials >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCPushDropMaterials >(arena);
}
template<> PROTOBUF_NOINLINE ::SCPushBalloonTimes* Arena::CreateMaybeMessage< ::SCPushBalloonTimes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCPushBalloonTimes >(arena);
}
template<> PROTOBUF_NOINLINE ::SwitchInfo* Arena::CreateMaybeMessage< ::SwitchInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SwitchInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SCFunctionSwitch* Arena::CreateMaybeMessage< ::SCFunctionSwitch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCFunctionSwitch >(arena);
}
template<> PROTOBUF_NOINLINE ::CSSealConvertMoney* Arena::CreateMaybeMessage< ::CSSealConvertMoney >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSSealConvertMoney >(arena);
}
template<> PROTOBUF_NOINLINE ::SCSealConvertMoney* Arena::CreateMaybeMessage< ::SCSealConvertMoney >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCSealConvertMoney >(arena);
}
template<> PROTOBUF_NOINLINE ::ConnectMonster* Arena::CreateMaybeMessage< ::ConnectMonster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ConnectMonster >(arena);
}
template<> PROTOBUF_NOINLINE ::SCPushConnectMonster* Arena::CreateMaybeMessage< ::SCPushConnectMonster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCPushConnectMonster >(arena);
}
template<> PROTOBUF_NOINLINE ::SCGiantUpgrade* Arena::CreateMaybeMessage< ::SCGiantUpgrade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCGiantUpgrade >(arena);
}
template<> PROTOBUF_NOINLINE ::SCPushGiantEnd* Arena::CreateMaybeMessage< ::SCPushGiantEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCPushGiantEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::SCDropCard* Arena::CreateMaybeMessage< ::SCDropCard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCDropCard >(arena);
}
template<> PROTOBUF_NOINLINE ::SCAcquireSeal* Arena::CreateMaybeMessage< ::SCAcquireSeal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCAcquireSeal >(arena);
}
template<> PROTOBUF_NOINLINE ::FreshMoney* Arena::CreateMaybeMessage< ::FreshMoney >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FreshMoney >(arena);
}
template<> PROTOBUF_NOINLINE ::ShutdownService* Arena::CreateMaybeMessage< ::ShutdownService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShutdownService >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
