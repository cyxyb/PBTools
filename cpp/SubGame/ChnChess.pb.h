// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChnChess.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ChnChess_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ChnChess_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ChnChess_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ChnChess_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ChnChess_2eproto;
namespace ChnChess {
class CMD_Chess_MOVE_CHESS;
class CMD_Chess_MOVE_CHESSDefaultTypeInternal;
extern CMD_Chess_MOVE_CHESSDefaultTypeInternal _CMD_Chess_MOVE_CHESS_default_instance_;
class CMD_Common;
class CMD_CommonDefaultTypeInternal;
extern CMD_CommonDefaultTypeInternal _CMD_Common_default_instance_;
class CMD_Make_Rule;
class CMD_Make_RuleDefaultTypeInternal;
extern CMD_Make_RuleDefaultTypeInternal _CMD_Make_Rule_default_instance_;
class Chess_Manual;
class Chess_ManualDefaultTypeInternal;
extern Chess_ManualDefaultTypeInternal _Chess_Manual_default_instance_;
class Chess_Manual_Item;
class Chess_Manual_ItemDefaultTypeInternal;
extern Chess_Manual_ItemDefaultTypeInternal _Chess_Manual_Item_default_instance_;
class GameEnd;
class GameEndDefaultTypeInternal;
extern GameEndDefaultTypeInternal _GameEnd_default_instance_;
class Notify_Timer;
class Notify_TimerDefaultTypeInternal;
extern Notify_TimerDefaultTypeInternal _Notify_Timer_default_instance_;
class RegretResult;
class RegretResultDefaultTypeInternal;
extern RegretResultDefaultTypeInternal _RegretResult_default_instance_;
class SC_SceneInfo;
class SC_SceneInfoDefaultTypeInternal;
extern SC_SceneInfoDefaultTypeInternal _SC_SceneInfo_default_instance_;
}  // namespace ChnChess
PROTOBUF_NAMESPACE_OPEN
template<> ::ChnChess::CMD_Chess_MOVE_CHESS* Arena::CreateMaybeMessage<::ChnChess::CMD_Chess_MOVE_CHESS>(Arena*);
template<> ::ChnChess::CMD_Common* Arena::CreateMaybeMessage<::ChnChess::CMD_Common>(Arena*);
template<> ::ChnChess::CMD_Make_Rule* Arena::CreateMaybeMessage<::ChnChess::CMD_Make_Rule>(Arena*);
template<> ::ChnChess::Chess_Manual* Arena::CreateMaybeMessage<::ChnChess::Chess_Manual>(Arena*);
template<> ::ChnChess::Chess_Manual_Item* Arena::CreateMaybeMessage<::ChnChess::Chess_Manual_Item>(Arena*);
template<> ::ChnChess::GameEnd* Arena::CreateMaybeMessage<::ChnChess::GameEnd>(Arena*);
template<> ::ChnChess::Notify_Timer* Arena::CreateMaybeMessage<::ChnChess::Notify_Timer>(Arena*);
template<> ::ChnChess::RegretResult* Arena::CreateMaybeMessage<::ChnChess::RegretResult>(Arena*);
template<> ::ChnChess::SC_SceneInfo* Arena::CreateMaybeMessage<::ChnChess::SC_SceneInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ChnChess {

enum EMsgIDSubGame : int {
  CMD_Chess_SUB_C_REGRET_REQ = 0,
  CMD_Chess_SUB_C_REGRET_ANSWER = 1,
  CMD_Chess_SUB_C_GIVEUP_REQ = 2,
  CMD_Chess_SUB_C_PEACE_REQ = 3,
  CMD_Chess_SUB_C_PEACE_ANSWER = 4,
  CMD_Chess_SUB_C_MOVE_CHESS = 5,
  CMD_Chess_SUB_C_KICK_PLAYER = 6,
  CMD_Chess_SUB_C_SET_RULE = 7,
  CMD_Chess_SUB_C_MAKE_RULE = 8,
  CMD_Chess_SUB_C_NOTIFY_READY = 9,
  CMD_Chess_SUB_C_NOTIFY_START = 10,
  CMD_Chess_SUB_C_CONTINUE = 11,
  CMD_Chess_SUB_S_GAME_START = 12,
  CMD_Chess_SUB_S_MOVE_CHESS = 13,
  CMD_Chess_SUB_S_REGRET_REQ = 14,
  CMD_Chess_SUB_S_REGRET_FAILE = 15,
  CMD_Chess_SUB_S_REGRET_RESULT = 16,
  CMD_Chess_SUB_S_PEACE_REQ = 17,
  CMD_Chess_SUB_S_PEACE_ANSWER = 18,
  CMD_Chess_SUB_S_GAME_END = 19,
  CMD_Chess_SUB_S_CHESS_MANUAL = 20,
  CMD_Chess_SUB_S_REQ_SET_RULE = 21,
  CMD_Chess_SUB_S_REQ_AGREE_RULE = 22,
  CMD_Chess_SUB_S_KICK_PLAYER = 23,
  CMD_Chess_SUB_S_NOTIFY_TIMER = 24,
  CMD_Chess_SUB_S_NOTIFY_ROOM_OWNER = 25,
  CMD_Chess_SUB_S_NOTIFY_SET_RULE = 26,
  CMD_Chess_SUB_S_SET_RULE = 27,
  CMD_Chess_SUB_S_MAKE_RULE = 28,
  CMD_Chess_SUB_S_NOTIFY_READY = 29,
  CMD_Chess_SUB_S_NOTIFY_START = 30,
  CMD_Chess_SUB_S_CONTINUE = 31,
  EMsgIDSubGame_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EMsgIDSubGame_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EMsgIDSubGame_IsValid(int value);
constexpr EMsgIDSubGame EMsgIDSubGame_MIN = CMD_Chess_SUB_C_REGRET_REQ;
constexpr EMsgIDSubGame EMsgIDSubGame_MAX = CMD_Chess_SUB_S_CONTINUE;
constexpr int EMsgIDSubGame_ARRAYSIZE = EMsgIDSubGame_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDSubGame_descriptor();
template<typename T>
inline const std::string& EMsgIDSubGame_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMsgIDSubGame>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMsgIDSubGame_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMsgIDSubGame_descriptor(), enum_t_value);
}
inline bool EMsgIDSubGame_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMsgIDSubGame* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMsgIDSubGame>(
    EMsgIDSubGame_descriptor(), name, value);
}
// ===================================================================

class SC_SceneInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChnChess.SC_SceneInfo) */ {
 public:
  inline SC_SceneInfo() : SC_SceneInfo(nullptr) {}
  virtual ~SC_SceneInfo();

  SC_SceneInfo(const SC_SceneInfo& from);
  SC_SceneInfo(SC_SceneInfo&& from) noexcept
    : SC_SceneInfo() {
    *this = ::std::move(from);
  }

  inline SC_SceneInfo& operator=(const SC_SceneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_SceneInfo& operator=(SC_SceneInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_SceneInfo& default_instance();

  static inline const SC_SceneInfo* internal_default_instance() {
    return reinterpret_cast<const SC_SceneInfo*>(
               &_SC_SceneInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SC_SceneInfo& a, SC_SceneInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_SceneInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_SceneInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_SceneInfo* New() const final {
    return CreateMaybeMessage<SC_SceneInfo>(nullptr);
  }

  SC_SceneInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_SceneInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_SceneInfo& from);
  void MergeFrom(const SC_SceneInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_SceneInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChnChess.SC_SceneInfo";
  }
  protected:
  explicit SC_SceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChnChess_2eproto);
    return ::descriptor_table_ChnChess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBetFieldNumber = 3,
    kFreeCountFieldNumber = 1,
    kCurrenBetFieldNumber = 2,
    kRerunFieldNumber = 4,
  };
  // repeated int32 bet = 3;
  int bet_size() const;
  private:
  int _internal_bet_size() const;
  public:
  void clear_bet();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bet(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_bet() const;
  void _internal_add_bet(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_bet();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 bet(int index) const;
  void set_bet(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_bet(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      bet() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_bet();

  // int32 free_count = 1;
  void clear_free_count();
  ::PROTOBUF_NAMESPACE_ID::int32 free_count() const;
  void set_free_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_free_count() const;
  void _internal_set_free_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 curren_bet = 2;
  void clear_curren_bet();
  ::PROTOBUF_NAMESPACE_ID::int32 curren_bet() const;
  void set_curren_bet(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curren_bet() const;
  void _internal_set_curren_bet(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rerun = 4;
  void clear_rerun();
  ::PROTOBUF_NAMESPACE_ID::int32 rerun() const;
  void set_rerun(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rerun() const;
  void _internal_set_rerun(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChnChess.SC_SceneInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > bet_;
  mutable std::atomic<int> _bet_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 free_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 curren_bet_;
  ::PROTOBUF_NAMESPACE_ID::int32 rerun_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChnChess_2eproto;
};
// -------------------------------------------------------------------

class CMD_Chess_MOVE_CHESS PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChnChess.CMD_Chess_MOVE_CHESS) */ {
 public:
  inline CMD_Chess_MOVE_CHESS() : CMD_Chess_MOVE_CHESS(nullptr) {}
  virtual ~CMD_Chess_MOVE_CHESS();

  CMD_Chess_MOVE_CHESS(const CMD_Chess_MOVE_CHESS& from);
  CMD_Chess_MOVE_CHESS(CMD_Chess_MOVE_CHESS&& from) noexcept
    : CMD_Chess_MOVE_CHESS() {
    *this = ::std::move(from);
  }

  inline CMD_Chess_MOVE_CHESS& operator=(const CMD_Chess_MOVE_CHESS& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMD_Chess_MOVE_CHESS& operator=(CMD_Chess_MOVE_CHESS&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMD_Chess_MOVE_CHESS& default_instance();

  static inline const CMD_Chess_MOVE_CHESS* internal_default_instance() {
    return reinterpret_cast<const CMD_Chess_MOVE_CHESS*>(
               &_CMD_Chess_MOVE_CHESS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMD_Chess_MOVE_CHESS& a, CMD_Chess_MOVE_CHESS& b) {
    a.Swap(&b);
  }
  inline void Swap(CMD_Chess_MOVE_CHESS* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMD_Chess_MOVE_CHESS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMD_Chess_MOVE_CHESS* New() const final {
    return CreateMaybeMessage<CMD_Chess_MOVE_CHESS>(nullptr);
  }

  CMD_Chess_MOVE_CHESS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMD_Chess_MOVE_CHESS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMD_Chess_MOVE_CHESS& from);
  void MergeFrom(const CMD_Chess_MOVE_CHESS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMD_Chess_MOVE_CHESS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChnChess.CMD_Chess_MOVE_CHESS";
  }
  protected:
  explicit CMD_Chess_MOVE_CHESS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChnChess_2eproto);
    return ::descriptor_table_ChnChess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCbXSourcePosFieldNumber = 1,
    kCbYSourcePosFieldNumber = 2,
    kCbXTargetPosFieldNumber = 3,
    kCbYTargetPosFieldNumber = 4,
    kWCurrentUserFieldNumber = 5,
  };
  // int32 cbXSourcePos = 1;
  void clear_cbxsourcepos();
  ::PROTOBUF_NAMESPACE_ID::int32 cbxsourcepos() const;
  void set_cbxsourcepos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cbxsourcepos() const;
  void _internal_set_cbxsourcepos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cbYSourcePos = 2;
  void clear_cbysourcepos();
  ::PROTOBUF_NAMESPACE_ID::int32 cbysourcepos() const;
  void set_cbysourcepos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cbysourcepos() const;
  void _internal_set_cbysourcepos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cbXTargetPos = 3;
  void clear_cbxtargetpos();
  ::PROTOBUF_NAMESPACE_ID::int32 cbxtargetpos() const;
  void set_cbxtargetpos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cbxtargetpos() const;
  void _internal_set_cbxtargetpos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cbYTargetPos = 4;
  void clear_cbytargetpos();
  ::PROTOBUF_NAMESPACE_ID::int32 cbytargetpos() const;
  void set_cbytargetpos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cbytargetpos() const;
  void _internal_set_cbytargetpos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 wCurrentUser = 5;
  void clear_wcurrentuser();
  ::PROTOBUF_NAMESPACE_ID::int32 wcurrentuser() const;
  void set_wcurrentuser(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wcurrentuser() const;
  void _internal_set_wcurrentuser(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChnChess.CMD_Chess_MOVE_CHESS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 cbxsourcepos_;
  ::PROTOBUF_NAMESPACE_ID::int32 cbysourcepos_;
  ::PROTOBUF_NAMESPACE_ID::int32 cbxtargetpos_;
  ::PROTOBUF_NAMESPACE_ID::int32 cbytargetpos_;
  ::PROTOBUF_NAMESPACE_ID::int32 wcurrentuser_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChnChess_2eproto;
};
// -------------------------------------------------------------------

class RegretResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChnChess.RegretResult) */ {
 public:
  inline RegretResult() : RegretResult(nullptr) {}
  virtual ~RegretResult();

  RegretResult(const RegretResult& from);
  RegretResult(RegretResult&& from) noexcept
    : RegretResult() {
    *this = ::std::move(from);
  }

  inline RegretResult& operator=(const RegretResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegretResult& operator=(RegretResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegretResult& default_instance();

  static inline const RegretResult* internal_default_instance() {
    return reinterpret_cast<const RegretResult*>(
               &_RegretResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegretResult& a, RegretResult& b) {
    a.Swap(&b);
  }
  inline void Swap(RegretResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegretResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegretResult* New() const final {
    return CreateMaybeMessage<RegretResult>(nullptr);
  }

  RegretResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegretResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegretResult& from);
  void MergeFrom(const RegretResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegretResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChnChess.RegretResult";
  }
  protected:
  explicit RegretResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChnChess_2eproto);
    return ::descriptor_table_ChnChess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWRegretUserFieldNumber = 1,
    kWCurrentUserFieldNumber = 2,
    kCbRegretCountFieldNumber = 3,
  };
  // int32 wRegretUser = 1;
  void clear_wregretuser();
  ::PROTOBUF_NAMESPACE_ID::int32 wregretuser() const;
  void set_wregretuser(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wregretuser() const;
  void _internal_set_wregretuser(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 wCurrentUser = 2;
  void clear_wcurrentuser();
  ::PROTOBUF_NAMESPACE_ID::int32 wcurrentuser() const;
  void set_wcurrentuser(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wcurrentuser() const;
  void _internal_set_wcurrentuser(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cbRegretCount = 3;
  void clear_cbregretcount();
  ::PROTOBUF_NAMESPACE_ID::int32 cbregretcount() const;
  void set_cbregretcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cbregretcount() const;
  void _internal_set_cbregretcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChnChess.RegretResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 wregretuser_;
  ::PROTOBUF_NAMESPACE_ID::int32 wcurrentuser_;
  ::PROTOBUF_NAMESPACE_ID::int32 cbregretcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChnChess_2eproto;
};
// -------------------------------------------------------------------

class CMD_Common PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChnChess.CMD_Common) */ {
 public:
  inline CMD_Common() : CMD_Common(nullptr) {}
  virtual ~CMD_Common();

  CMD_Common(const CMD_Common& from);
  CMD_Common(CMD_Common&& from) noexcept
    : CMD_Common() {
    *this = ::std::move(from);
  }

  inline CMD_Common& operator=(const CMD_Common& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMD_Common& operator=(CMD_Common&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMD_Common& default_instance();

  static inline const CMD_Common* internal_default_instance() {
    return reinterpret_cast<const CMD_Common*>(
               &_CMD_Common_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMD_Common& a, CMD_Common& b) {
    a.Swap(&b);
  }
  inline void Swap(CMD_Common* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMD_Common* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMD_Common* New() const final {
    return CreateMaybeMessage<CMD_Common>(nullptr);
  }

  CMD_Common* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMD_Common>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMD_Common& from);
  void MergeFrom(const CMD_Common& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMD_Common* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChnChess.CMD_Common";
  }
  protected:
  explicit CMD_Common(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChnChess_2eproto);
    return ::descriptor_table_ChnChess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpIndexFieldNumber = 1,
    kWaitTimeFieldNumber = 2,
  };
  // int32 opIndex = 1;
  void clear_opindex();
  ::PROTOBUF_NAMESPACE_ID::int32 opindex() const;
  void set_opindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_opindex() const;
  void _internal_set_opindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 waitTime = 2;
  void clear_waittime();
  ::PROTOBUF_NAMESPACE_ID::int32 waittime() const;
  void set_waittime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_waittime() const;
  void _internal_set_waittime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChnChess.CMD_Common)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 opindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 waittime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChnChess_2eproto;
};
// -------------------------------------------------------------------

class GameEnd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChnChess.GameEnd) */ {
 public:
  inline GameEnd() : GameEnd(nullptr) {}
  virtual ~GameEnd();

  GameEnd(const GameEnd& from);
  GameEnd(GameEnd&& from) noexcept
    : GameEnd() {
    *this = ::std::move(from);
  }

  inline GameEnd& operator=(const GameEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEnd& operator=(GameEnd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameEnd& default_instance();

  static inline const GameEnd* internal_default_instance() {
    return reinterpret_cast<const GameEnd*>(
               &_GameEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GameEnd& a, GameEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(GameEnd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEnd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameEnd* New() const final {
    return CreateMaybeMessage<GameEnd>(nullptr);
  }

  GameEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameEnd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameEnd& from);
  void MergeFrom(const GameEnd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEnd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChnChess.GameEnd";
  }
  protected:
  explicit GameEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChnChess_2eproto);
    return ::descriptor_table_ChnChess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLUserScoreFieldNumber = 2,
    kWWinUserFieldNumber = 1,
  };
  // repeated int64 lUserScore = 2;
  int luserscore_size() const;
  private:
  int _internal_luserscore_size() const;
  public:
  void clear_luserscore();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_luserscore(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_luserscore() const;
  void _internal_add_luserscore(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_luserscore();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 luserscore(int index) const;
  void set_luserscore(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_luserscore(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      luserscore() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_luserscore();

  // int32 wWinUser = 1;
  void clear_wwinuser();
  ::PROTOBUF_NAMESPACE_ID::int32 wwinuser() const;
  void set_wwinuser(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wwinuser() const;
  void _internal_set_wwinuser(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChnChess.GameEnd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > luserscore_;
  mutable std::atomic<int> _luserscore_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 wwinuser_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChnChess_2eproto;
};
// -------------------------------------------------------------------

class Chess_Manual_Item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChnChess.Chess_Manual_Item) */ {
 public:
  inline Chess_Manual_Item() : Chess_Manual_Item(nullptr) {}
  virtual ~Chess_Manual_Item();

  Chess_Manual_Item(const Chess_Manual_Item& from);
  Chess_Manual_Item(Chess_Manual_Item&& from) noexcept
    : Chess_Manual_Item() {
    *this = ::std::move(from);
  }

  inline Chess_Manual_Item& operator=(const Chess_Manual_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chess_Manual_Item& operator=(Chess_Manual_Item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Chess_Manual_Item& default_instance();

  static inline const Chess_Manual_Item* internal_default_instance() {
    return reinterpret_cast<const Chess_Manual_Item*>(
               &_Chess_Manual_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Chess_Manual_Item& a, Chess_Manual_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(Chess_Manual_Item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chess_Manual_Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chess_Manual_Item* New() const final {
    return CreateMaybeMessage<Chess_Manual_Item>(nullptr);
  }

  Chess_Manual_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chess_Manual_Item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chess_Manual_Item& from);
  void MergeFrom(const Chess_Manual_Item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chess_Manual_Item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChnChess.Chess_Manual_Item";
  }
  protected:
  explicit Chess_Manual_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChnChess_2eproto);
    return ::descriptor_table_ChnChess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCbXSourceChessPosFieldNumber = 1,
    kCbYSourceChessPosFieldNumber = 2,
    kCbXTargetChessPosFieldNumber = 3,
    kCbYTargetChessPosFieldNumber = 4,
    kCbUniteChessFieldNumber = 5,
    kCbSourceColorFieldNumber = 6,
  };
  // int32 cbXSourceChessPos = 1;
  void clear_cbxsourcechesspos();
  ::PROTOBUF_NAMESPACE_ID::int32 cbxsourcechesspos() const;
  void set_cbxsourcechesspos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cbxsourcechesspos() const;
  void _internal_set_cbxsourcechesspos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cbYSourceChessPos = 2;
  void clear_cbysourcechesspos();
  ::PROTOBUF_NAMESPACE_ID::int32 cbysourcechesspos() const;
  void set_cbysourcechesspos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cbysourcechesspos() const;
  void _internal_set_cbysourcechesspos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cbXTargetChessPos = 3;
  void clear_cbxtargetchesspos();
  ::PROTOBUF_NAMESPACE_ID::int32 cbxtargetchesspos() const;
  void set_cbxtargetchesspos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cbxtargetchesspos() const;
  void _internal_set_cbxtargetchesspos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cbYTargetChessPos = 4;
  void clear_cbytargetchesspos();
  ::PROTOBUF_NAMESPACE_ID::int32 cbytargetchesspos() const;
  void set_cbytargetchesspos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cbytargetchesspos() const;
  void _internal_set_cbytargetchesspos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cbUniteChess = 5;
  void clear_cbunitechess();
  ::PROTOBUF_NAMESPACE_ID::int32 cbunitechess() const;
  void set_cbunitechess(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cbunitechess() const;
  void _internal_set_cbunitechess(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cbSourceColor = 6;
  void clear_cbsourcecolor();
  ::PROTOBUF_NAMESPACE_ID::int32 cbsourcecolor() const;
  void set_cbsourcecolor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cbsourcecolor() const;
  void _internal_set_cbsourcecolor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChnChess.Chess_Manual_Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 cbxsourcechesspos_;
  ::PROTOBUF_NAMESPACE_ID::int32 cbysourcechesspos_;
  ::PROTOBUF_NAMESPACE_ID::int32 cbxtargetchesspos_;
  ::PROTOBUF_NAMESPACE_ID::int32 cbytargetchesspos_;
  ::PROTOBUF_NAMESPACE_ID::int32 cbunitechess_;
  ::PROTOBUF_NAMESPACE_ID::int32 cbsourcecolor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChnChess_2eproto;
};
// -------------------------------------------------------------------

class Chess_Manual PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChnChess.Chess_Manual) */ {
 public:
  inline Chess_Manual() : Chess_Manual(nullptr) {}
  virtual ~Chess_Manual();

  Chess_Manual(const Chess_Manual& from);
  Chess_Manual(Chess_Manual&& from) noexcept
    : Chess_Manual() {
    *this = ::std::move(from);
  }

  inline Chess_Manual& operator=(const Chess_Manual& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chess_Manual& operator=(Chess_Manual&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Chess_Manual& default_instance();

  static inline const Chess_Manual* internal_default_instance() {
    return reinterpret_cast<const Chess_Manual*>(
               &_Chess_Manual_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Chess_Manual& a, Chess_Manual& b) {
    a.Swap(&b);
  }
  inline void Swap(Chess_Manual* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chess_Manual* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chess_Manual* New() const final {
    return CreateMaybeMessage<Chess_Manual>(nullptr);
  }

  Chess_Manual* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chess_Manual>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chess_Manual& from);
  void MergeFrom(const Chess_Manual& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chess_Manual* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChnChess.Chess_Manual";
  }
  protected:
  explicit Chess_Manual(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChnChess_2eproto);
    return ::descriptor_table_ChnChess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .ChnChess.Chess_Manual_Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::ChnChess::Chess_Manual_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChnChess::Chess_Manual_Item >*
      mutable_items();
  private:
  const ::ChnChess::Chess_Manual_Item& _internal_items(int index) const;
  ::ChnChess::Chess_Manual_Item* _internal_add_items();
  public:
  const ::ChnChess::Chess_Manual_Item& items(int index) const;
  ::ChnChess::Chess_Manual_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChnChess::Chess_Manual_Item >&
      items() const;

  // @@protoc_insertion_point(class_scope:ChnChess.Chess_Manual)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChnChess::Chess_Manual_Item > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChnChess_2eproto;
};
// -------------------------------------------------------------------

class Notify_Timer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChnChess.Notify_Timer) */ {
 public:
  inline Notify_Timer() : Notify_Timer(nullptr) {}
  virtual ~Notify_Timer();

  Notify_Timer(const Notify_Timer& from);
  Notify_Timer(Notify_Timer&& from) noexcept
    : Notify_Timer() {
    *this = ::std::move(from);
  }

  inline Notify_Timer& operator=(const Notify_Timer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Notify_Timer& operator=(Notify_Timer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Notify_Timer& default_instance();

  static inline const Notify_Timer* internal_default_instance() {
    return reinterpret_cast<const Notify_Timer*>(
               &_Notify_Timer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Notify_Timer& a, Notify_Timer& b) {
    a.Swap(&b);
  }
  inline void Swap(Notify_Timer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Notify_Timer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Notify_Timer* New() const final {
    return CreateMaybeMessage<Notify_Timer>(nullptr);
  }

  Notify_Timer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Notify_Timer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Notify_Timer& from);
  void MergeFrom(const Notify_Timer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Notify_Timer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChnChess.Notify_Timer";
  }
  protected:
  explicit Notify_Timer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChnChess_2eproto);
    return ::descriptor_table_ChnChess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWaitTimeFieldNumber = 1,
    kRoomTypeFieldNumber = 2,
  };
  // int32 waitTime = 1;
  void clear_waittime();
  ::PROTOBUF_NAMESPACE_ID::int32 waittime() const;
  void set_waittime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_waittime() const;
  void _internal_set_waittime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 roomType = 2;
  void clear_roomtype();
  ::PROTOBUF_NAMESPACE_ID::int32 roomtype() const;
  void set_roomtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomtype() const;
  void _internal_set_roomtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChnChess.Notify_Timer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 waittime_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChnChess_2eproto;
};
// -------------------------------------------------------------------

class CMD_Make_Rule PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChnChess.CMD_Make_Rule) */ {
 public:
  inline CMD_Make_Rule() : CMD_Make_Rule(nullptr) {}
  virtual ~CMD_Make_Rule();

  CMD_Make_Rule(const CMD_Make_Rule& from);
  CMD_Make_Rule(CMD_Make_Rule&& from) noexcept
    : CMD_Make_Rule() {
    *this = ::std::move(from);
  }

  inline CMD_Make_Rule& operator=(const CMD_Make_Rule& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMD_Make_Rule& operator=(CMD_Make_Rule&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMD_Make_Rule& default_instance();

  static inline const CMD_Make_Rule* internal_default_instance() {
    return reinterpret_cast<const CMD_Make_Rule*>(
               &_CMD_Make_Rule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMD_Make_Rule& a, CMD_Make_Rule& b) {
    a.Swap(&b);
  }
  inline void Swap(CMD_Make_Rule* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMD_Make_Rule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMD_Make_Rule* New() const final {
    return CreateMaybeMessage<CMD_Make_Rule>(nullptr);
  }

  CMD_Make_Rule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMD_Make_Rule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMD_Make_Rule& from);
  void MergeFrom(const CMD_Make_Rule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMD_Make_Rule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChnChess.CMD_Make_Rule";
  }
  protected:
  explicit CMD_Make_Rule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChnChess_2eproto);
    return ::descriptor_table_ChnChess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScoreFieldNumber = 2,
    kErrorIDFieldNumber = 1,
  };
  // int64 score = 2;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int64 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 errorID = 1;
  void clear_errorid();
  ::PROTOBUF_NAMESPACE_ID::int32 errorid() const;
  void set_errorid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errorid() const;
  void _internal_set_errorid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChnChess.CMD_Make_Rule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 errorid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChnChess_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SC_SceneInfo

// int32 free_count = 1;
inline void SC_SceneInfo::clear_free_count() {
  free_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_free_count() const {
  return free_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::free_count() const {
  // @@protoc_insertion_point(field_get:ChnChess.SC_SceneInfo.free_count)
  return _internal_free_count();
}
inline void SC_SceneInfo::_internal_set_free_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  free_count_ = value;
}
inline void SC_SceneInfo::set_free_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_free_count(value);
  // @@protoc_insertion_point(field_set:ChnChess.SC_SceneInfo.free_count)
}

// int32 curren_bet = 2;
inline void SC_SceneInfo::clear_curren_bet() {
  curren_bet_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_curren_bet() const {
  return curren_bet_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::curren_bet() const {
  // @@protoc_insertion_point(field_get:ChnChess.SC_SceneInfo.curren_bet)
  return _internal_curren_bet();
}
inline void SC_SceneInfo::_internal_set_curren_bet(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curren_bet_ = value;
}
inline void SC_SceneInfo::set_curren_bet(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curren_bet(value);
  // @@protoc_insertion_point(field_set:ChnChess.SC_SceneInfo.curren_bet)
}

// repeated int32 bet = 3;
inline int SC_SceneInfo::_internal_bet_size() const {
  return bet_.size();
}
inline int SC_SceneInfo::bet_size() const {
  return _internal_bet_size();
}
inline void SC_SceneInfo::clear_bet() {
  bet_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_bet(int index) const {
  return bet_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::bet(int index) const {
  // @@protoc_insertion_point(field_get:ChnChess.SC_SceneInfo.bet)
  return _internal_bet(index);
}
inline void SC_SceneInfo::set_bet(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  bet_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChnChess.SC_SceneInfo.bet)
}
inline void SC_SceneInfo::_internal_add_bet(::PROTOBUF_NAMESPACE_ID::int32 value) {
  bet_.Add(value);
}
inline void SC_SceneInfo::add_bet(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_bet(value);
  // @@protoc_insertion_point(field_add:ChnChess.SC_SceneInfo.bet)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_SceneInfo::_internal_bet() const {
  return bet_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_SceneInfo::bet() const {
  // @@protoc_insertion_point(field_list:ChnChess.SC_SceneInfo.bet)
  return _internal_bet();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_SceneInfo::_internal_mutable_bet() {
  return &bet_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_SceneInfo::mutable_bet() {
  // @@protoc_insertion_point(field_mutable_list:ChnChess.SC_SceneInfo.bet)
  return _internal_mutable_bet();
}

// int32 rerun = 4;
inline void SC_SceneInfo::clear_rerun() {
  rerun_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_rerun() const {
  return rerun_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::rerun() const {
  // @@protoc_insertion_point(field_get:ChnChess.SC_SceneInfo.rerun)
  return _internal_rerun();
}
inline void SC_SceneInfo::_internal_set_rerun(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rerun_ = value;
}
inline void SC_SceneInfo::set_rerun(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rerun(value);
  // @@protoc_insertion_point(field_set:ChnChess.SC_SceneInfo.rerun)
}

// -------------------------------------------------------------------

// CMD_Chess_MOVE_CHESS

// int32 cbXSourcePos = 1;
inline void CMD_Chess_MOVE_CHESS::clear_cbxsourcepos() {
  cbxsourcepos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_Chess_MOVE_CHESS::_internal_cbxsourcepos() const {
  return cbxsourcepos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_Chess_MOVE_CHESS::cbxsourcepos() const {
  // @@protoc_insertion_point(field_get:ChnChess.CMD_Chess_MOVE_CHESS.cbXSourcePos)
  return _internal_cbxsourcepos();
}
inline void CMD_Chess_MOVE_CHESS::_internal_set_cbxsourcepos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cbxsourcepos_ = value;
}
inline void CMD_Chess_MOVE_CHESS::set_cbxsourcepos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cbxsourcepos(value);
  // @@protoc_insertion_point(field_set:ChnChess.CMD_Chess_MOVE_CHESS.cbXSourcePos)
}

// int32 cbYSourcePos = 2;
inline void CMD_Chess_MOVE_CHESS::clear_cbysourcepos() {
  cbysourcepos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_Chess_MOVE_CHESS::_internal_cbysourcepos() const {
  return cbysourcepos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_Chess_MOVE_CHESS::cbysourcepos() const {
  // @@protoc_insertion_point(field_get:ChnChess.CMD_Chess_MOVE_CHESS.cbYSourcePos)
  return _internal_cbysourcepos();
}
inline void CMD_Chess_MOVE_CHESS::_internal_set_cbysourcepos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cbysourcepos_ = value;
}
inline void CMD_Chess_MOVE_CHESS::set_cbysourcepos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cbysourcepos(value);
  // @@protoc_insertion_point(field_set:ChnChess.CMD_Chess_MOVE_CHESS.cbYSourcePos)
}

// int32 cbXTargetPos = 3;
inline void CMD_Chess_MOVE_CHESS::clear_cbxtargetpos() {
  cbxtargetpos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_Chess_MOVE_CHESS::_internal_cbxtargetpos() const {
  return cbxtargetpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_Chess_MOVE_CHESS::cbxtargetpos() const {
  // @@protoc_insertion_point(field_get:ChnChess.CMD_Chess_MOVE_CHESS.cbXTargetPos)
  return _internal_cbxtargetpos();
}
inline void CMD_Chess_MOVE_CHESS::_internal_set_cbxtargetpos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cbxtargetpos_ = value;
}
inline void CMD_Chess_MOVE_CHESS::set_cbxtargetpos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cbxtargetpos(value);
  // @@protoc_insertion_point(field_set:ChnChess.CMD_Chess_MOVE_CHESS.cbXTargetPos)
}

// int32 cbYTargetPos = 4;
inline void CMD_Chess_MOVE_CHESS::clear_cbytargetpos() {
  cbytargetpos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_Chess_MOVE_CHESS::_internal_cbytargetpos() const {
  return cbytargetpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_Chess_MOVE_CHESS::cbytargetpos() const {
  // @@protoc_insertion_point(field_get:ChnChess.CMD_Chess_MOVE_CHESS.cbYTargetPos)
  return _internal_cbytargetpos();
}
inline void CMD_Chess_MOVE_CHESS::_internal_set_cbytargetpos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cbytargetpos_ = value;
}
inline void CMD_Chess_MOVE_CHESS::set_cbytargetpos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cbytargetpos(value);
  // @@protoc_insertion_point(field_set:ChnChess.CMD_Chess_MOVE_CHESS.cbYTargetPos)
}

// int32 wCurrentUser = 5;
inline void CMD_Chess_MOVE_CHESS::clear_wcurrentuser() {
  wcurrentuser_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_Chess_MOVE_CHESS::_internal_wcurrentuser() const {
  return wcurrentuser_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_Chess_MOVE_CHESS::wcurrentuser() const {
  // @@protoc_insertion_point(field_get:ChnChess.CMD_Chess_MOVE_CHESS.wCurrentUser)
  return _internal_wcurrentuser();
}
inline void CMD_Chess_MOVE_CHESS::_internal_set_wcurrentuser(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wcurrentuser_ = value;
}
inline void CMD_Chess_MOVE_CHESS::set_wcurrentuser(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wcurrentuser(value);
  // @@protoc_insertion_point(field_set:ChnChess.CMD_Chess_MOVE_CHESS.wCurrentUser)
}

// -------------------------------------------------------------------

// RegretResult

// int32 wRegretUser = 1;
inline void RegretResult::clear_wregretuser() {
  wregretuser_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegretResult::_internal_wregretuser() const {
  return wregretuser_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegretResult::wregretuser() const {
  // @@protoc_insertion_point(field_get:ChnChess.RegretResult.wRegretUser)
  return _internal_wregretuser();
}
inline void RegretResult::_internal_set_wregretuser(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wregretuser_ = value;
}
inline void RegretResult::set_wregretuser(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wregretuser(value);
  // @@protoc_insertion_point(field_set:ChnChess.RegretResult.wRegretUser)
}

// int32 wCurrentUser = 2;
inline void RegretResult::clear_wcurrentuser() {
  wcurrentuser_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegretResult::_internal_wcurrentuser() const {
  return wcurrentuser_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegretResult::wcurrentuser() const {
  // @@protoc_insertion_point(field_get:ChnChess.RegretResult.wCurrentUser)
  return _internal_wcurrentuser();
}
inline void RegretResult::_internal_set_wcurrentuser(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wcurrentuser_ = value;
}
inline void RegretResult::set_wcurrentuser(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wcurrentuser(value);
  // @@protoc_insertion_point(field_set:ChnChess.RegretResult.wCurrentUser)
}

// int32 cbRegretCount = 3;
inline void RegretResult::clear_cbregretcount() {
  cbregretcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegretResult::_internal_cbregretcount() const {
  return cbregretcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegretResult::cbregretcount() const {
  // @@protoc_insertion_point(field_get:ChnChess.RegretResult.cbRegretCount)
  return _internal_cbregretcount();
}
inline void RegretResult::_internal_set_cbregretcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cbregretcount_ = value;
}
inline void RegretResult::set_cbregretcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cbregretcount(value);
  // @@protoc_insertion_point(field_set:ChnChess.RegretResult.cbRegretCount)
}

// -------------------------------------------------------------------

// CMD_Common

// int32 opIndex = 1;
inline void CMD_Common::clear_opindex() {
  opindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_Common::_internal_opindex() const {
  return opindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_Common::opindex() const {
  // @@protoc_insertion_point(field_get:ChnChess.CMD_Common.opIndex)
  return _internal_opindex();
}
inline void CMD_Common::_internal_set_opindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  opindex_ = value;
}
inline void CMD_Common::set_opindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_opindex(value);
  // @@protoc_insertion_point(field_set:ChnChess.CMD_Common.opIndex)
}

// int32 waitTime = 2;
inline void CMD_Common::clear_waittime() {
  waittime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_Common::_internal_waittime() const {
  return waittime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_Common::waittime() const {
  // @@protoc_insertion_point(field_get:ChnChess.CMD_Common.waitTime)
  return _internal_waittime();
}
inline void CMD_Common::_internal_set_waittime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  waittime_ = value;
}
inline void CMD_Common::set_waittime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_waittime(value);
  // @@protoc_insertion_point(field_set:ChnChess.CMD_Common.waitTime)
}

// -------------------------------------------------------------------

// GameEnd

// int32 wWinUser = 1;
inline void GameEnd::clear_wwinuser() {
  wwinuser_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameEnd::_internal_wwinuser() const {
  return wwinuser_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameEnd::wwinuser() const {
  // @@protoc_insertion_point(field_get:ChnChess.GameEnd.wWinUser)
  return _internal_wwinuser();
}
inline void GameEnd::_internal_set_wwinuser(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wwinuser_ = value;
}
inline void GameEnd::set_wwinuser(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wwinuser(value);
  // @@protoc_insertion_point(field_set:ChnChess.GameEnd.wWinUser)
}

// repeated int64 lUserScore = 2;
inline int GameEnd::_internal_luserscore_size() const {
  return luserscore_.size();
}
inline int GameEnd::luserscore_size() const {
  return _internal_luserscore_size();
}
inline void GameEnd::clear_luserscore() {
  luserscore_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameEnd::_internal_luserscore(int index) const {
  return luserscore_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameEnd::luserscore(int index) const {
  // @@protoc_insertion_point(field_get:ChnChess.GameEnd.lUserScore)
  return _internal_luserscore(index);
}
inline void GameEnd::set_luserscore(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  luserscore_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChnChess.GameEnd.lUserScore)
}
inline void GameEnd::_internal_add_luserscore(::PROTOBUF_NAMESPACE_ID::int64 value) {
  luserscore_.Add(value);
}
inline void GameEnd::add_luserscore(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_luserscore(value);
  // @@protoc_insertion_point(field_add:ChnChess.GameEnd.lUserScore)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
GameEnd::_internal_luserscore() const {
  return luserscore_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
GameEnd::luserscore() const {
  // @@protoc_insertion_point(field_list:ChnChess.GameEnd.lUserScore)
  return _internal_luserscore();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
GameEnd::_internal_mutable_luserscore() {
  return &luserscore_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
GameEnd::mutable_luserscore() {
  // @@protoc_insertion_point(field_mutable_list:ChnChess.GameEnd.lUserScore)
  return _internal_mutable_luserscore();
}

// -------------------------------------------------------------------

// Chess_Manual_Item

// int32 cbXSourceChessPos = 1;
inline void Chess_Manual_Item::clear_cbxsourcechesspos() {
  cbxsourcechesspos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chess_Manual_Item::_internal_cbxsourcechesspos() const {
  return cbxsourcechesspos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chess_Manual_Item::cbxsourcechesspos() const {
  // @@protoc_insertion_point(field_get:ChnChess.Chess_Manual_Item.cbXSourceChessPos)
  return _internal_cbxsourcechesspos();
}
inline void Chess_Manual_Item::_internal_set_cbxsourcechesspos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cbxsourcechesspos_ = value;
}
inline void Chess_Manual_Item::set_cbxsourcechesspos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cbxsourcechesspos(value);
  // @@protoc_insertion_point(field_set:ChnChess.Chess_Manual_Item.cbXSourceChessPos)
}

// int32 cbYSourceChessPos = 2;
inline void Chess_Manual_Item::clear_cbysourcechesspos() {
  cbysourcechesspos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chess_Manual_Item::_internal_cbysourcechesspos() const {
  return cbysourcechesspos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chess_Manual_Item::cbysourcechesspos() const {
  // @@protoc_insertion_point(field_get:ChnChess.Chess_Manual_Item.cbYSourceChessPos)
  return _internal_cbysourcechesspos();
}
inline void Chess_Manual_Item::_internal_set_cbysourcechesspos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cbysourcechesspos_ = value;
}
inline void Chess_Manual_Item::set_cbysourcechesspos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cbysourcechesspos(value);
  // @@protoc_insertion_point(field_set:ChnChess.Chess_Manual_Item.cbYSourceChessPos)
}

// int32 cbXTargetChessPos = 3;
inline void Chess_Manual_Item::clear_cbxtargetchesspos() {
  cbxtargetchesspos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chess_Manual_Item::_internal_cbxtargetchesspos() const {
  return cbxtargetchesspos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chess_Manual_Item::cbxtargetchesspos() const {
  // @@protoc_insertion_point(field_get:ChnChess.Chess_Manual_Item.cbXTargetChessPos)
  return _internal_cbxtargetchesspos();
}
inline void Chess_Manual_Item::_internal_set_cbxtargetchesspos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cbxtargetchesspos_ = value;
}
inline void Chess_Manual_Item::set_cbxtargetchesspos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cbxtargetchesspos(value);
  // @@protoc_insertion_point(field_set:ChnChess.Chess_Manual_Item.cbXTargetChessPos)
}

// int32 cbYTargetChessPos = 4;
inline void Chess_Manual_Item::clear_cbytargetchesspos() {
  cbytargetchesspos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chess_Manual_Item::_internal_cbytargetchesspos() const {
  return cbytargetchesspos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chess_Manual_Item::cbytargetchesspos() const {
  // @@protoc_insertion_point(field_get:ChnChess.Chess_Manual_Item.cbYTargetChessPos)
  return _internal_cbytargetchesspos();
}
inline void Chess_Manual_Item::_internal_set_cbytargetchesspos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cbytargetchesspos_ = value;
}
inline void Chess_Manual_Item::set_cbytargetchesspos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cbytargetchesspos(value);
  // @@protoc_insertion_point(field_set:ChnChess.Chess_Manual_Item.cbYTargetChessPos)
}

// int32 cbUniteChess = 5;
inline void Chess_Manual_Item::clear_cbunitechess() {
  cbunitechess_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chess_Manual_Item::_internal_cbunitechess() const {
  return cbunitechess_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chess_Manual_Item::cbunitechess() const {
  // @@protoc_insertion_point(field_get:ChnChess.Chess_Manual_Item.cbUniteChess)
  return _internal_cbunitechess();
}
inline void Chess_Manual_Item::_internal_set_cbunitechess(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cbunitechess_ = value;
}
inline void Chess_Manual_Item::set_cbunitechess(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cbunitechess(value);
  // @@protoc_insertion_point(field_set:ChnChess.Chess_Manual_Item.cbUniteChess)
}

// int32 cbSourceColor = 6;
inline void Chess_Manual_Item::clear_cbsourcecolor() {
  cbsourcecolor_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chess_Manual_Item::_internal_cbsourcecolor() const {
  return cbsourcecolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chess_Manual_Item::cbsourcecolor() const {
  // @@protoc_insertion_point(field_get:ChnChess.Chess_Manual_Item.cbSourceColor)
  return _internal_cbsourcecolor();
}
inline void Chess_Manual_Item::_internal_set_cbsourcecolor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cbsourcecolor_ = value;
}
inline void Chess_Manual_Item::set_cbsourcecolor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cbsourcecolor(value);
  // @@protoc_insertion_point(field_set:ChnChess.Chess_Manual_Item.cbSourceColor)
}

// -------------------------------------------------------------------

// Chess_Manual

// repeated .ChnChess.Chess_Manual_Item items = 1;
inline int Chess_Manual::_internal_items_size() const {
  return items_.size();
}
inline int Chess_Manual::items_size() const {
  return _internal_items_size();
}
inline void Chess_Manual::clear_items() {
  items_.Clear();
}
inline ::ChnChess::Chess_Manual_Item* Chess_Manual::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ChnChess.Chess_Manual.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChnChess::Chess_Manual_Item >*
Chess_Manual::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ChnChess.Chess_Manual.items)
  return &items_;
}
inline const ::ChnChess::Chess_Manual_Item& Chess_Manual::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::ChnChess::Chess_Manual_Item& Chess_Manual::items(int index) const {
  // @@protoc_insertion_point(field_get:ChnChess.Chess_Manual.items)
  return _internal_items(index);
}
inline ::ChnChess::Chess_Manual_Item* Chess_Manual::_internal_add_items() {
  return items_.Add();
}
inline ::ChnChess::Chess_Manual_Item* Chess_Manual::add_items() {
  // @@protoc_insertion_point(field_add:ChnChess.Chess_Manual.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChnChess::Chess_Manual_Item >&
Chess_Manual::items() const {
  // @@protoc_insertion_point(field_list:ChnChess.Chess_Manual.items)
  return items_;
}

// -------------------------------------------------------------------

// Notify_Timer

// int32 waitTime = 1;
inline void Notify_Timer::clear_waittime() {
  waittime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Notify_Timer::_internal_waittime() const {
  return waittime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Notify_Timer::waittime() const {
  // @@protoc_insertion_point(field_get:ChnChess.Notify_Timer.waitTime)
  return _internal_waittime();
}
inline void Notify_Timer::_internal_set_waittime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  waittime_ = value;
}
inline void Notify_Timer::set_waittime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_waittime(value);
  // @@protoc_insertion_point(field_set:ChnChess.Notify_Timer.waitTime)
}

// int32 roomType = 2;
inline void Notify_Timer::clear_roomtype() {
  roomtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Notify_Timer::_internal_roomtype() const {
  return roomtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Notify_Timer::roomtype() const {
  // @@protoc_insertion_point(field_get:ChnChess.Notify_Timer.roomType)
  return _internal_roomtype();
}
inline void Notify_Timer::_internal_set_roomtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomtype_ = value;
}
inline void Notify_Timer::set_roomtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomtype(value);
  // @@protoc_insertion_point(field_set:ChnChess.Notify_Timer.roomType)
}

// -------------------------------------------------------------------

// CMD_Make_Rule

// int32 errorID = 1;
inline void CMD_Make_Rule::clear_errorid() {
  errorid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_Make_Rule::_internal_errorid() const {
  return errorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_Make_Rule::errorid() const {
  // @@protoc_insertion_point(field_get:ChnChess.CMD_Make_Rule.errorID)
  return _internal_errorid();
}
inline void CMD_Make_Rule::_internal_set_errorid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errorid_ = value;
}
inline void CMD_Make_Rule::set_errorid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errorid(value);
  // @@protoc_insertion_point(field_set:ChnChess.CMD_Make_Rule.errorID)
}

// int64 score = 2;
inline void CMD_Make_Rule::clear_score() {
  score_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CMD_Make_Rule::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CMD_Make_Rule::score() const {
  // @@protoc_insertion_point(field_get:ChnChess.CMD_Make_Rule.score)
  return _internal_score();
}
inline void CMD_Make_Rule::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  score_ = value;
}
inline void CMD_Make_Rule::set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:ChnChess.CMD_Make_Rule.score)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ChnChess

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ChnChess::EMsgIDSubGame> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChnChess::EMsgIDSubGame>() {
  return ::ChnChess::EMsgIDSubGame_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ChnChess_2eproto
