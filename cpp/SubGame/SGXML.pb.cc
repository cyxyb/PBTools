// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SGXML.proto

#include "SGXML.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace SGXML {
class SC_CheckOutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_CheckOut> _instance;
} _SC_CheckOut_default_instance_;
class CS_StartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_Start> _instance;
} _CS_Start_default_instance_;
class SC_SyncGoldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_SyncGold> _instance;
} _SC_SyncGold_default_instance_;
class SC_SceneInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_SceneInfo> _instance;
} _SC_SceneInfo_default_instance_;
class SC_stSmallGameInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_stSmallGameInfo> _instance;
} _SC_stSmallGameInfo_default_instance_;
}  // namespace SGXML
static void InitDefaultsscc_info_CS_Start_SGXML_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SGXML::_CS_Start_default_instance_;
    new (ptr) ::SGXML::CS_Start();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_Start_SGXML_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_Start_SGXML_2eproto}, {}};

static void InitDefaultsscc_info_SC_CheckOut_SGXML_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SGXML::_SC_CheckOut_default_instance_;
    new (ptr) ::SGXML::SC_CheckOut();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_CheckOut_SGXML_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_CheckOut_SGXML_2eproto}, {}};

static void InitDefaultsscc_info_SC_SceneInfo_SGXML_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SGXML::_SC_SceneInfo_default_instance_;
    new (ptr) ::SGXML::SC_SceneInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_SceneInfo_SGXML_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_SceneInfo_SGXML_2eproto}, {}};

static void InitDefaultsscc_info_SC_SyncGold_SGXML_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SGXML::_SC_SyncGold_default_instance_;
    new (ptr) ::SGXML::SC_SyncGold();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_SyncGold_SGXML_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_SyncGold_SGXML_2eproto}, {}};

static void InitDefaultsscc_info_SC_stSmallGameInfo_SGXML_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SGXML::_SC_stSmallGameInfo_default_instance_;
    new (ptr) ::SGXML::SC_stSmallGameInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_stSmallGameInfo_SGXML_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_stSmallGameInfo_SGXML_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_SGXML_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_SGXML_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_SGXML_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_SGXML_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SGXML::SC_CheckOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SGXML::SC_CheckOut, result_),
  PROTOBUF_FIELD_OFFSET(::SGXML::SC_CheckOut, reward_line_fruit_count_),
  PROTOBUF_FIELD_OFFSET(::SGXML::SC_CheckOut, win_pei_lv_),
  PROTOBUF_FIELD_OFFSET(::SGXML::SC_CheckOut, cur_gold_),
  PROTOBUF_FIELD_OFFSET(::SGXML::SC_CheckOut, win_gold_),
  PROTOBUF_FIELD_OFFSET(::SGXML::SC_CheckOut, total_win_gold_),
  PROTOBUF_FIELD_OFFSET(::SGXML::SC_CheckOut, free_times_),
  PROTOBUF_FIELD_OFFSET(::SGXML::SC_CheckOut, multiple_),
  PROTOBUF_FIELD_OFFSET(::SGXML::SC_CheckOut, jackpot_value_),
  PROTOBUF_FIELD_OFFSET(::SGXML::SC_CheckOut, small_game_times_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SGXML::CS_Start, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SGXML::CS_Start, line_num_),
  PROTOBUF_FIELD_OFFSET(::SGXML::CS_Start, line_gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SGXML::SC_SyncGold, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SGXML::SC_SyncGold, gold_),
  PROTOBUF_FIELD_OFFSET(::SGXML::SC_SyncGold, last_win_gold_),
  PROTOBUF_FIELD_OFFSET(::SGXML::SC_SyncGold, total_win_gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SGXML::SC_SceneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SGXML::SC_SceneInfo, left_free_game_cnt_),
  PROTOBUF_FIELD_OFFSET(::SGXML::SC_SceneInfo, multiple_),
  PROTOBUF_FIELD_OFFSET(::SGXML::SC_SceneInfo, beton_gold_),
  PROTOBUF_FIELD_OFFSET(::SGXML::SC_SceneInfo, free_game_cot_total_),
  PROTOBUF_FIELD_OFFSET(::SGXML::SC_SceneInfo, free_game_gold_),
  PROTOBUF_FIELD_OFFSET(::SGXML::SC_SceneInfo, small_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SGXML::SC_stSmallGameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SGXML::SC_stSmallGameInfo, small_game_tatol_conut_),
  PROTOBUF_FIELD_OFFSET(::SGXML::SC_stSmallGameInfo, small_game_conut_),
  PROTOBUF_FIELD_OFFSET(::SGXML::SC_stSmallGameInfo, game_tatol_gold_),
  PROTOBUF_FIELD_OFFSET(::SGXML::SC_stSmallGameInfo, icon_type_),
  PROTOBUF_FIELD_OFFSET(::SGXML::SC_stSmallGameInfo, icon_type_conut_),
  PROTOBUF_FIELD_OFFSET(::SGXML::SC_stSmallGameInfo, icon_type4_),
  PROTOBUF_FIELD_OFFSET(::SGXML::SC_stSmallGameInfo, game_gold_),
  PROTOBUF_FIELD_OFFSET(::SGXML::SC_stSmallGameInfo, game_end_),
  PROTOBUF_FIELD_OFFSET(::SGXML::SC_stSmallGameInfo, line_gold_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SGXML::SC_CheckOut)},
  { 15, -1, sizeof(::SGXML::CS_Start)},
  { 22, -1, sizeof(::SGXML::SC_SyncGold)},
  { 30, -1, sizeof(::SGXML::SC_SceneInfo)},
  { 41, -1, sizeof(::SGXML::SC_stSmallGameInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SGXML::_SC_CheckOut_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SGXML::_CS_Start_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SGXML::_SC_SyncGold_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SGXML::_SC_SceneInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SGXML::_SC_stSmallGameInfo_default_instance_),
};

const char descriptor_table_protodef_SGXML_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013SGXML.proto\022\005SGXML\"\345\001\n\013SC_CheckOut\022\016\n\006"
  "result\030\001 \003(\005\022\037\n\027reward_line_fruit_count\030"
  "\002 \003(\005\022\022\n\nwin_pei_lv\030\003 \001(\005\022\020\n\010cur_gold\030\004 "
  "\001(\003\022\020\n\010win_gold\030\005 \001(\005\022\026\n\016total_win_gold\030"
  "\006 \001(\005\022\022\n\nfree_times\030\007 \001(\005\022\020\n\010multiple\030\010 "
  "\001(\005\022\025\n\rjackpot_value\030\t \001(\005\022\030\n\020small_game"
  "_times\030\n \001(\005\"/\n\010CS_Start\022\020\n\010line_num\030\001 \001"
  "(\005\022\021\n\tline_gold\030\002 \001(\005\"J\n\013SC_SyncGold\022\014\n\004"
  "gold\030\001 \001(\003\022\025\n\rlast_win_gold\030\002 \001(\005\022\026\n\016tot"
  "al_win_gold\030\003 \001(\005\"\232\001\n\014SC_SceneInfo\022\032\n\022le"
  "ft_free_game_cnt\030\001 \001(\005\022\020\n\010multiple\030\002 \001(\005"
  "\022\022\n\nbeton_gold\030\004 \003(\005\022\033\n\023free_game_cot_to"
  "tal\030\005 \001(\005\022\026\n\016free_game_gold\030\006 \001(\005\022\023\n\013sma"
  "ll_count\030\007 \001(\005\"\337\001\n\022SC_stSmallGameInfo\022\036\n"
  "\026small_game_tatol_conut\030\001 \001(\005\022\030\n\020small_g"
  "ame_conut\030\002 \001(\005\022\027\n\017game_tatol_gold\030\003 \001(\005"
  "\022\021\n\ticon_type\030\004 \001(\005\022\027\n\017icon_type_conut\030\005"
  " \001(\005\022\022\n\nicon_type4\030\006 \003(\005\022\021\n\tgame_gold\030\007 "
  "\001(\005\022\020\n\010game_end\030\010 \001(\010\022\021\n\tline_gold\030\t \001(\005"
  "*\311\001\n\tEMsgIDXML\022\025\n\021LABA_MSG_CS_START\020\000\022\032\n"
  "\026LABA_MSG_CS_SMALL_GAME\020\001\022\025\n\021LABA_MSG_SC"
  "_START\020\002\022\030\n\024LABA_MSG_SC_CHECKOUT\020\003\022\031\n\025LA"
  "BA_MSG_SC_SYNC_GOLD\020\004\022\032\n\026LABA_MSG_SC_SMA"
  "LL_GAME\020\005\022!\n\035LABA_MSG_SC_UPDATE_PRIZE_PO"
  "OL\020\006b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_SGXML_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_SGXML_2eproto_sccs[5] = {
  &scc_info_CS_Start_SGXML_2eproto.base,
  &scc_info_SC_CheckOut_SGXML_2eproto.base,
  &scc_info_SC_SceneInfo_SGXML_2eproto.base,
  &scc_info_SC_SyncGold_SGXML_2eproto.base,
  &scc_info_SC_stSmallGameInfo_SGXML_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_SGXML_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SGXML_2eproto = {
  false, false, descriptor_table_protodef_SGXML_2eproto, "SGXML.proto", 972,
  &descriptor_table_SGXML_2eproto_once, descriptor_table_SGXML_2eproto_sccs, descriptor_table_SGXML_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_SGXML_2eproto::offsets,
  file_level_metadata_SGXML_2eproto, 5, file_level_enum_descriptors_SGXML_2eproto, file_level_service_descriptors_SGXML_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_SGXML_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_SGXML_2eproto)), true);
namespace SGXML {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDXML_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGXML_2eproto);
  return file_level_enum_descriptors_SGXML_2eproto[0];
}
bool EMsgIDXML_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SC_CheckOut::_Internal {
 public:
};

SC_CheckOut::SC_CheckOut(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  result_(arena),
  reward_line_fruit_count_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SGXML.SC_CheckOut)
}
SC_CheckOut::SC_CheckOut(const SC_CheckOut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      result_(from.result_),
      reward_line_fruit_count_(from.reward_line_fruit_count_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cur_gold_, &from.cur_gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&small_game_times_) -
    reinterpret_cast<char*>(&cur_gold_)) + sizeof(small_game_times_));
  // @@protoc_insertion_point(copy_constructor:SGXML.SC_CheckOut)
}

void SC_CheckOut::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cur_gold_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&small_game_times_) -
      reinterpret_cast<char*>(&cur_gold_)) + sizeof(small_game_times_));
}

SC_CheckOut::~SC_CheckOut() {
  // @@protoc_insertion_point(destructor:SGXML.SC_CheckOut)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SC_CheckOut::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SC_CheckOut::ArenaDtor(void* object) {
  SC_CheckOut* _this = reinterpret_cast< SC_CheckOut* >(object);
  (void)_this;
}
void SC_CheckOut::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SC_CheckOut::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_CheckOut& SC_CheckOut::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_CheckOut_SGXML_2eproto.base);
  return *internal_default_instance();
}


void SC_CheckOut::Clear() {
// @@protoc_insertion_point(message_clear_start:SGXML.SC_CheckOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.Clear();
  reward_line_fruit_count_.Clear();
  ::memset(&cur_gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&small_game_times_) -
      reinterpret_cast<char*>(&cur_gold_)) + sizeof(small_game_times_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_CheckOut::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_result(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_result(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 reward_line_fruit_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_reward_line_fruit_count(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_reward_line_fruit_count(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 win_pei_lv = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          win_pei_lv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cur_gold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cur_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 win_gold = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          win_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_win_gold = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          total_win_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 free_times = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          free_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 multiple = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 jackpot_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          jackpot_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 small_game_times = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          small_game_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_CheckOut::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SGXML.SC_CheckOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 result = 1;
  {
    int byte_size = _result_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_result(), byte_size, target);
    }
  }

  // repeated int32 reward_line_fruit_count = 2;
  {
    int byte_size = _reward_line_fruit_count_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_reward_line_fruit_count(), byte_size, target);
    }
  }

  // int32 win_pei_lv = 3;
  if (this->win_pei_lv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_win_pei_lv(), target);
  }

  // int64 cur_gold = 4;
  if (this->cur_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_cur_gold(), target);
  }

  // int32 win_gold = 5;
  if (this->win_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_win_gold(), target);
  }

  // int32 total_win_gold = 6;
  if (this->total_win_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_total_win_gold(), target);
  }

  // int32 free_times = 7;
  if (this->free_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_free_times(), target);
  }

  // int32 multiple = 8;
  if (this->multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_multiple(), target);
  }

  // int32 jackpot_value = 9;
  if (this->jackpot_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_jackpot_value(), target);
  }

  // int32 small_game_times = 10;
  if (this->small_game_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_small_game_times(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SGXML.SC_CheckOut)
  return target;
}

size_t SC_CheckOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SGXML.SC_CheckOut)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 result = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->result_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _result_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 reward_line_fruit_count = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->reward_line_fruit_count_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _reward_line_fruit_count_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 cur_gold = 4;
  if (this->cur_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cur_gold());
  }

  // int32 win_pei_lv = 3;
  if (this->win_pei_lv() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_win_pei_lv());
  }

  // int32 win_gold = 5;
  if (this->win_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_win_gold());
  }

  // int32 total_win_gold = 6;
  if (this->total_win_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_win_gold());
  }

  // int32 free_times = 7;
  if (this->free_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_free_times());
  }

  // int32 multiple = 8;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_multiple());
  }

  // int32 jackpot_value = 9;
  if (this->jackpot_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_jackpot_value());
  }

  // int32 small_game_times = 10;
  if (this->small_game_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_small_game_times());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_CheckOut::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SGXML.SC_CheckOut)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_CheckOut* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_CheckOut>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SGXML.SC_CheckOut)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SGXML.SC_CheckOut)
    MergeFrom(*source);
  }
}

void SC_CheckOut::MergeFrom(const SC_CheckOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SGXML.SC_CheckOut)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  result_.MergeFrom(from.result_);
  reward_line_fruit_count_.MergeFrom(from.reward_line_fruit_count_);
  if (from.cur_gold() != 0) {
    _internal_set_cur_gold(from._internal_cur_gold());
  }
  if (from.win_pei_lv() != 0) {
    _internal_set_win_pei_lv(from._internal_win_pei_lv());
  }
  if (from.win_gold() != 0) {
    _internal_set_win_gold(from._internal_win_gold());
  }
  if (from.total_win_gold() != 0) {
    _internal_set_total_win_gold(from._internal_total_win_gold());
  }
  if (from.free_times() != 0) {
    _internal_set_free_times(from._internal_free_times());
  }
  if (from.multiple() != 0) {
    _internal_set_multiple(from._internal_multiple());
  }
  if (from.jackpot_value() != 0) {
    _internal_set_jackpot_value(from._internal_jackpot_value());
  }
  if (from.small_game_times() != 0) {
    _internal_set_small_game_times(from._internal_small_game_times());
  }
}

void SC_CheckOut::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SGXML.SC_CheckOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_CheckOut::CopyFrom(const SC_CheckOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SGXML.SC_CheckOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_CheckOut::IsInitialized() const {
  return true;
}

void SC_CheckOut::InternalSwap(SC_CheckOut* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  result_.InternalSwap(&other->result_);
  reward_line_fruit_count_.InternalSwap(&other->reward_line_fruit_count_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_CheckOut, small_game_times_)
      + sizeof(SC_CheckOut::small_game_times_)
      - PROTOBUF_FIELD_OFFSET(SC_CheckOut, cur_gold_)>(
          reinterpret_cast<char*>(&cur_gold_),
          reinterpret_cast<char*>(&other->cur_gold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_CheckOut::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CS_Start::_Internal {
 public:
};

CS_Start::CS_Start(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SGXML.CS_Start)
}
CS_Start::CS_Start(const CS_Start& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&line_num_, &from.line_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&line_gold_) -
    reinterpret_cast<char*>(&line_num_)) + sizeof(line_gold_));
  // @@protoc_insertion_point(copy_constructor:SGXML.CS_Start)
}

void CS_Start::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&line_num_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&line_gold_) -
      reinterpret_cast<char*>(&line_num_)) + sizeof(line_gold_));
}

CS_Start::~CS_Start() {
  // @@protoc_insertion_point(destructor:SGXML.CS_Start)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CS_Start::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CS_Start::ArenaDtor(void* object) {
  CS_Start* _this = reinterpret_cast< CS_Start* >(object);
  (void)_this;
}
void CS_Start::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CS_Start::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_Start& CS_Start::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_Start_SGXML_2eproto.base);
  return *internal_default_instance();
}


void CS_Start::Clear() {
// @@protoc_insertion_point(message_clear_start:SGXML.CS_Start)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&line_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&line_gold_) -
      reinterpret_cast<char*>(&line_num_)) + sizeof(line_gold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_Start::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 line_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          line_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 line_gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          line_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_Start::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SGXML.CS_Start)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 line_num = 1;
  if (this->line_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_line_num(), target);
  }

  // int32 line_gold = 2;
  if (this->line_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_line_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SGXML.CS_Start)
  return target;
}

size_t CS_Start::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SGXML.CS_Start)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 line_num = 1;
  if (this->line_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_line_num());
  }

  // int32 line_gold = 2;
  if (this->line_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_line_gold());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_Start::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SGXML.CS_Start)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_Start* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_Start>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SGXML.CS_Start)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SGXML.CS_Start)
    MergeFrom(*source);
  }
}

void CS_Start::MergeFrom(const CS_Start& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SGXML.CS_Start)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.line_num() != 0) {
    _internal_set_line_num(from._internal_line_num());
  }
  if (from.line_gold() != 0) {
    _internal_set_line_gold(from._internal_line_gold());
  }
}

void CS_Start::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SGXML.CS_Start)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_Start::CopyFrom(const CS_Start& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SGXML.CS_Start)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_Start::IsInitialized() const {
  return true;
}

void CS_Start::InternalSwap(CS_Start* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CS_Start, line_gold_)
      + sizeof(CS_Start::line_gold_)
      - PROTOBUF_FIELD_OFFSET(CS_Start, line_num_)>(
          reinterpret_cast<char*>(&line_num_),
          reinterpret_cast<char*>(&other->line_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_Start::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SC_SyncGold::_Internal {
 public:
};

SC_SyncGold::SC_SyncGold(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SGXML.SC_SyncGold)
}
SC_SyncGold::SC_SyncGold(const SC_SyncGold& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gold_, &from.gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_win_gold_) -
    reinterpret_cast<char*>(&gold_)) + sizeof(total_win_gold_));
  // @@protoc_insertion_point(copy_constructor:SGXML.SC_SyncGold)
}

void SC_SyncGold::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gold_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&total_win_gold_) -
      reinterpret_cast<char*>(&gold_)) + sizeof(total_win_gold_));
}

SC_SyncGold::~SC_SyncGold() {
  // @@protoc_insertion_point(destructor:SGXML.SC_SyncGold)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SC_SyncGold::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SC_SyncGold::ArenaDtor(void* object) {
  SC_SyncGold* _this = reinterpret_cast< SC_SyncGold* >(object);
  (void)_this;
}
void SC_SyncGold::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SC_SyncGold::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_SyncGold& SC_SyncGold::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_SyncGold_SGXML_2eproto.base);
  return *internal_default_instance();
}


void SC_SyncGold::Clear() {
// @@protoc_insertion_point(message_clear_start:SGXML.SC_SyncGold)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_win_gold_) -
      reinterpret_cast<char*>(&gold_)) + sizeof(total_win_gold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_SyncGold::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 gold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 last_win_gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          last_win_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_win_gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_win_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_SyncGold::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SGXML.SC_SyncGold)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 gold = 1;
  if (this->gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_gold(), target);
  }

  // int32 last_win_gold = 2;
  if (this->last_win_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_last_win_gold(), target);
  }

  // int32 total_win_gold = 3;
  if (this->total_win_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_win_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SGXML.SC_SyncGold)
  return target;
}

size_t SC_SyncGold::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SGXML.SC_SyncGold)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 gold = 1;
  if (this->gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_gold());
  }

  // int32 last_win_gold = 2;
  if (this->last_win_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_last_win_gold());
  }

  // int32 total_win_gold = 3;
  if (this->total_win_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_win_gold());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_SyncGold::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SGXML.SC_SyncGold)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SyncGold* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_SyncGold>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SGXML.SC_SyncGold)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SGXML.SC_SyncGold)
    MergeFrom(*source);
  }
}

void SC_SyncGold::MergeFrom(const SC_SyncGold& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SGXML.SC_SyncGold)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  if (from.last_win_gold() != 0) {
    _internal_set_last_win_gold(from._internal_last_win_gold());
  }
  if (from.total_win_gold() != 0) {
    _internal_set_total_win_gold(from._internal_total_win_gold());
  }
}

void SC_SyncGold::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SGXML.SC_SyncGold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SyncGold::CopyFrom(const SC_SyncGold& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SGXML.SC_SyncGold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SyncGold::IsInitialized() const {
  return true;
}

void SC_SyncGold::InternalSwap(SC_SyncGold* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_SyncGold, total_win_gold_)
      + sizeof(SC_SyncGold::total_win_gold_)
      - PROTOBUF_FIELD_OFFSET(SC_SyncGold, gold_)>(
          reinterpret_cast<char*>(&gold_),
          reinterpret_cast<char*>(&other->gold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_SyncGold::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SC_SceneInfo::_Internal {
 public:
};

SC_SceneInfo::SC_SceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  beton_gold_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SGXML.SC_SceneInfo)
}
SC_SceneInfo::SC_SceneInfo(const SC_SceneInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      beton_gold_(from.beton_gold_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&left_free_game_cnt_, &from.left_free_game_cnt_,
    static_cast<size_t>(reinterpret_cast<char*>(&small_count_) -
    reinterpret_cast<char*>(&left_free_game_cnt_)) + sizeof(small_count_));
  // @@protoc_insertion_point(copy_constructor:SGXML.SC_SceneInfo)
}

void SC_SceneInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&left_free_game_cnt_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&small_count_) -
      reinterpret_cast<char*>(&left_free_game_cnt_)) + sizeof(small_count_));
}

SC_SceneInfo::~SC_SceneInfo() {
  // @@protoc_insertion_point(destructor:SGXML.SC_SceneInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SC_SceneInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SC_SceneInfo::ArenaDtor(void* object) {
  SC_SceneInfo* _this = reinterpret_cast< SC_SceneInfo* >(object);
  (void)_this;
}
void SC_SceneInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SC_SceneInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_SceneInfo& SC_SceneInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_SceneInfo_SGXML_2eproto.base);
  return *internal_default_instance();
}


void SC_SceneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SGXML.SC_SceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  beton_gold_.Clear();
  ::memset(&left_free_game_cnt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&small_count_) -
      reinterpret_cast<char*>(&left_free_game_cnt_)) + sizeof(small_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_SceneInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 left_free_game_cnt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          left_free_game_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 multiple = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 beton_gold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_beton_gold(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_beton_gold(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 free_game_cot_total = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          free_game_cot_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 free_game_gold = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          free_game_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 small_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          small_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_SceneInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SGXML.SC_SceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 left_free_game_cnt = 1;
  if (this->left_free_game_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_left_free_game_cnt(), target);
  }

  // int32 multiple = 2;
  if (this->multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_multiple(), target);
  }

  // repeated int32 beton_gold = 4;
  {
    int byte_size = _beton_gold_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_beton_gold(), byte_size, target);
    }
  }

  // int32 free_game_cot_total = 5;
  if (this->free_game_cot_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_free_game_cot_total(), target);
  }

  // int32 free_game_gold = 6;
  if (this->free_game_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_free_game_gold(), target);
  }

  // int32 small_count = 7;
  if (this->small_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_small_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SGXML.SC_SceneInfo)
  return target;
}

size_t SC_SceneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SGXML.SC_SceneInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 beton_gold = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->beton_gold_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _beton_gold_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 left_free_game_cnt = 1;
  if (this->left_free_game_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_left_free_game_cnt());
  }

  // int32 multiple = 2;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_multiple());
  }

  // int32 free_game_cot_total = 5;
  if (this->free_game_cot_total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_free_game_cot_total());
  }

  // int32 free_game_gold = 6;
  if (this->free_game_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_free_game_gold());
  }

  // int32 small_count = 7;
  if (this->small_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_small_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_SceneInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SGXML.SC_SceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SceneInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_SceneInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SGXML.SC_SceneInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SGXML.SC_SceneInfo)
    MergeFrom(*source);
  }
}

void SC_SceneInfo::MergeFrom(const SC_SceneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SGXML.SC_SceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  beton_gold_.MergeFrom(from.beton_gold_);
  if (from.left_free_game_cnt() != 0) {
    _internal_set_left_free_game_cnt(from._internal_left_free_game_cnt());
  }
  if (from.multiple() != 0) {
    _internal_set_multiple(from._internal_multiple());
  }
  if (from.free_game_cot_total() != 0) {
    _internal_set_free_game_cot_total(from._internal_free_game_cot_total());
  }
  if (from.free_game_gold() != 0) {
    _internal_set_free_game_gold(from._internal_free_game_gold());
  }
  if (from.small_count() != 0) {
    _internal_set_small_count(from._internal_small_count());
  }
}

void SC_SceneInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SGXML.SC_SceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SceneInfo::CopyFrom(const SC_SceneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SGXML.SC_SceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SceneInfo::IsInitialized() const {
  return true;
}

void SC_SceneInfo::InternalSwap(SC_SceneInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  beton_gold_.InternalSwap(&other->beton_gold_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_SceneInfo, small_count_)
      + sizeof(SC_SceneInfo::small_count_)
      - PROTOBUF_FIELD_OFFSET(SC_SceneInfo, left_free_game_cnt_)>(
          reinterpret_cast<char*>(&left_free_game_cnt_),
          reinterpret_cast<char*>(&other->left_free_game_cnt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_SceneInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SC_stSmallGameInfo::_Internal {
 public:
};

SC_stSmallGameInfo::SC_stSmallGameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  icon_type4_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SGXML.SC_stSmallGameInfo)
}
SC_stSmallGameInfo::SC_stSmallGameInfo(const SC_stSmallGameInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      icon_type4_(from.icon_type4_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&small_game_tatol_conut_, &from.small_game_tatol_conut_,
    static_cast<size_t>(reinterpret_cast<char*>(&line_gold_) -
    reinterpret_cast<char*>(&small_game_tatol_conut_)) + sizeof(line_gold_));
  // @@protoc_insertion_point(copy_constructor:SGXML.SC_stSmallGameInfo)
}

void SC_stSmallGameInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&small_game_tatol_conut_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&line_gold_) -
      reinterpret_cast<char*>(&small_game_tatol_conut_)) + sizeof(line_gold_));
}

SC_stSmallGameInfo::~SC_stSmallGameInfo() {
  // @@protoc_insertion_point(destructor:SGXML.SC_stSmallGameInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SC_stSmallGameInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SC_stSmallGameInfo::ArenaDtor(void* object) {
  SC_stSmallGameInfo* _this = reinterpret_cast< SC_stSmallGameInfo* >(object);
  (void)_this;
}
void SC_stSmallGameInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SC_stSmallGameInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_stSmallGameInfo& SC_stSmallGameInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_stSmallGameInfo_SGXML_2eproto.base);
  return *internal_default_instance();
}


void SC_stSmallGameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SGXML.SC_stSmallGameInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  icon_type4_.Clear();
  ::memset(&small_game_tatol_conut_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&line_gold_) -
      reinterpret_cast<char*>(&small_game_tatol_conut_)) + sizeof(line_gold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_stSmallGameInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 small_game_tatol_conut = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          small_game_tatol_conut_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 small_game_conut = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          small_game_conut_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 game_tatol_gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          game_tatol_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 icon_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          icon_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 icon_type_conut = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          icon_type_conut_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 icon_type4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_icon_type4(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_icon_type4(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 game_gold = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          game_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool game_end = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          game_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 line_gold = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          line_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_stSmallGameInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SGXML.SC_stSmallGameInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 small_game_tatol_conut = 1;
  if (this->small_game_tatol_conut() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_small_game_tatol_conut(), target);
  }

  // int32 small_game_conut = 2;
  if (this->small_game_conut() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_small_game_conut(), target);
  }

  // int32 game_tatol_gold = 3;
  if (this->game_tatol_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_game_tatol_gold(), target);
  }

  // int32 icon_type = 4;
  if (this->icon_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_icon_type(), target);
  }

  // int32 icon_type_conut = 5;
  if (this->icon_type_conut() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_icon_type_conut(), target);
  }

  // repeated int32 icon_type4 = 6;
  {
    int byte_size = _icon_type4_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_icon_type4(), byte_size, target);
    }
  }

  // int32 game_gold = 7;
  if (this->game_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_game_gold(), target);
  }

  // bool game_end = 8;
  if (this->game_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_game_end(), target);
  }

  // int32 line_gold = 9;
  if (this->line_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_line_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SGXML.SC_stSmallGameInfo)
  return target;
}

size_t SC_stSmallGameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SGXML.SC_stSmallGameInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 icon_type4 = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->icon_type4_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _icon_type4_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 small_game_tatol_conut = 1;
  if (this->small_game_tatol_conut() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_small_game_tatol_conut());
  }

  // int32 small_game_conut = 2;
  if (this->small_game_conut() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_small_game_conut());
  }

  // int32 game_tatol_gold = 3;
  if (this->game_tatol_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_tatol_gold());
  }

  // int32 icon_type = 4;
  if (this->icon_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_icon_type());
  }

  // int32 icon_type_conut = 5;
  if (this->icon_type_conut() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_icon_type_conut());
  }

  // int32 game_gold = 7;
  if (this->game_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_gold());
  }

  // bool game_end = 8;
  if (this->game_end() != 0) {
    total_size += 1 + 1;
  }

  // int32 line_gold = 9;
  if (this->line_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_line_gold());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_stSmallGameInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SGXML.SC_stSmallGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_stSmallGameInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_stSmallGameInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SGXML.SC_stSmallGameInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SGXML.SC_stSmallGameInfo)
    MergeFrom(*source);
  }
}

void SC_stSmallGameInfo::MergeFrom(const SC_stSmallGameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SGXML.SC_stSmallGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  icon_type4_.MergeFrom(from.icon_type4_);
  if (from.small_game_tatol_conut() != 0) {
    _internal_set_small_game_tatol_conut(from._internal_small_game_tatol_conut());
  }
  if (from.small_game_conut() != 0) {
    _internal_set_small_game_conut(from._internal_small_game_conut());
  }
  if (from.game_tatol_gold() != 0) {
    _internal_set_game_tatol_gold(from._internal_game_tatol_gold());
  }
  if (from.icon_type() != 0) {
    _internal_set_icon_type(from._internal_icon_type());
  }
  if (from.icon_type_conut() != 0) {
    _internal_set_icon_type_conut(from._internal_icon_type_conut());
  }
  if (from.game_gold() != 0) {
    _internal_set_game_gold(from._internal_game_gold());
  }
  if (from.game_end() != 0) {
    _internal_set_game_end(from._internal_game_end());
  }
  if (from.line_gold() != 0) {
    _internal_set_line_gold(from._internal_line_gold());
  }
}

void SC_stSmallGameInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SGXML.SC_stSmallGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_stSmallGameInfo::CopyFrom(const SC_stSmallGameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SGXML.SC_stSmallGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_stSmallGameInfo::IsInitialized() const {
  return true;
}

void SC_stSmallGameInfo::InternalSwap(SC_stSmallGameInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  icon_type4_.InternalSwap(&other->icon_type4_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_stSmallGameInfo, line_gold_)
      + sizeof(SC_stSmallGameInfo::line_gold_)
      - PROTOBUF_FIELD_OFFSET(SC_stSmallGameInfo, small_game_tatol_conut_)>(
          reinterpret_cast<char*>(&small_game_tatol_conut_),
          reinterpret_cast<char*>(&other->small_game_tatol_conut_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_stSmallGameInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SGXML
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SGXML::SC_CheckOut* Arena::CreateMaybeMessage< ::SGXML::SC_CheckOut >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SGXML::SC_CheckOut >(arena);
}
template<> PROTOBUF_NOINLINE ::SGXML::CS_Start* Arena::CreateMaybeMessage< ::SGXML::CS_Start >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SGXML::CS_Start >(arena);
}
template<> PROTOBUF_NOINLINE ::SGXML::SC_SyncGold* Arena::CreateMaybeMessage< ::SGXML::SC_SyncGold >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SGXML::SC_SyncGold >(arena);
}
template<> PROTOBUF_NOINLINE ::SGXML::SC_SceneInfo* Arena::CreateMaybeMessage< ::SGXML::SC_SceneInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SGXML::SC_SceneInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SGXML::SC_stSmallGameInfo* Arena::CreateMaybeMessage< ::SGXML::SC_stSmallGameInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SGXML::SC_stSmallGameInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
