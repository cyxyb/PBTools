// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DZNZ.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DZNZ_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DZNZ_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DZNZ_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DZNZ_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DZNZ_2eproto;
namespace DZNZ {
class CMD_CS_Bet;
class CMD_CS_BetDefaultTypeInternal;
extern CMD_CS_BetDefaultTypeInternal _CMD_CS_Bet_default_instance_;
class CMD_CS_BetAgain;
class CMD_CS_BetAgainDefaultTypeInternal;
extern CMD_CS_BetAgainDefaultTypeInternal _CMD_CS_BetAgain_default_instance_;
class CMD_SC_BetAgainProto;
class CMD_SC_BetAgainProtoDefaultTypeInternal;
extern CMD_SC_BetAgainProtoDefaultTypeInternal _CMD_SC_BetAgainProto_default_instance_;
class CMD_SC_BetProto;
class CMD_SC_BetProtoDefaultTypeInternal;
extern CMD_SC_BetProtoDefaultTypeInternal _CMD_SC_BetProto_default_instance_;
class CMD_SC_GameResultProto;
class CMD_SC_GameResultProtoDefaultTypeInternal;
extern CMD_SC_GameResultProtoDefaultTypeInternal _CMD_SC_GameResultProto_default_instance_;
class CMD_SC_NotifyStatusProto;
class CMD_SC_NotifyStatusProtoDefaultTypeInternal;
extern CMD_SC_NotifyStatusProtoDefaultTypeInternal _CMD_SC_NotifyStatusProto_default_instance_;
class PlayerGameData;
class PlayerGameDataDefaultTypeInternal;
extern PlayerGameDataDefaultTypeInternal _PlayerGameData_default_instance_;
class PlayerInfoProto;
class PlayerInfoProtoDefaultTypeInternal;
extern PlayerInfoProtoDefaultTypeInternal _PlayerInfoProto_default_instance_;
class RecodeProto;
class RecodeProtoDefaultTypeInternal;
extern RecodeProtoDefaultTypeInternal _RecodeProto_default_instance_;
class SC_SceneInfoProto;
class SC_SceneInfoProtoDefaultTypeInternal;
extern SC_SceneInfoProtoDefaultTypeInternal _SC_SceneInfoProto_default_instance_;
class WheelInfoProto;
class WheelInfoProtoDefaultTypeInternal;
extern WheelInfoProtoDefaultTypeInternal _WheelInfoProto_default_instance_;
}  // namespace DZNZ
PROTOBUF_NAMESPACE_OPEN
template<> ::DZNZ::CMD_CS_Bet* Arena::CreateMaybeMessage<::DZNZ::CMD_CS_Bet>(Arena*);
template<> ::DZNZ::CMD_CS_BetAgain* Arena::CreateMaybeMessage<::DZNZ::CMD_CS_BetAgain>(Arena*);
template<> ::DZNZ::CMD_SC_BetAgainProto* Arena::CreateMaybeMessage<::DZNZ::CMD_SC_BetAgainProto>(Arena*);
template<> ::DZNZ::CMD_SC_BetProto* Arena::CreateMaybeMessage<::DZNZ::CMD_SC_BetProto>(Arena*);
template<> ::DZNZ::CMD_SC_GameResultProto* Arena::CreateMaybeMessage<::DZNZ::CMD_SC_GameResultProto>(Arena*);
template<> ::DZNZ::CMD_SC_NotifyStatusProto* Arena::CreateMaybeMessage<::DZNZ::CMD_SC_NotifyStatusProto>(Arena*);
template<> ::DZNZ::PlayerGameData* Arena::CreateMaybeMessage<::DZNZ::PlayerGameData>(Arena*);
template<> ::DZNZ::PlayerInfoProto* Arena::CreateMaybeMessage<::DZNZ::PlayerInfoProto>(Arena*);
template<> ::DZNZ::RecodeProto* Arena::CreateMaybeMessage<::DZNZ::RecodeProto>(Arena*);
template<> ::DZNZ::SC_SceneInfoProto* Arena::CreateMaybeMessage<::DZNZ::SC_SceneInfoProto>(Arena*);
template<> ::DZNZ::WheelInfoProto* Arena::CreateMaybeMessage<::DZNZ::WheelInfoProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DZNZ {

enum EMsgIDDZNZ : int {
  CMD_CS_BET = 0,
  CMD_CS_BETAGAIN = 1,
  CMD_SC_BET = 2,
  CMD_SC_GAMERESULT = 3,
  CMD_SC_BETAGAIN = 4,
  CMD_SC_NOTIFYSTATU = 5,
  CMD_SC_PLAYERINFOS = 6,
  CMD_SC_AI_BET = 7,
  CMD_SC_GAME_RECORD = 8,
  EMsgIDDZNZ_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EMsgIDDZNZ_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EMsgIDDZNZ_IsValid(int value);
constexpr EMsgIDDZNZ EMsgIDDZNZ_MIN = CMD_CS_BET;
constexpr EMsgIDDZNZ EMsgIDDZNZ_MAX = CMD_SC_GAME_RECORD;
constexpr int EMsgIDDZNZ_ARRAYSIZE = EMsgIDDZNZ_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDDZNZ_descriptor();
template<typename T>
inline const std::string& EMsgIDDZNZ_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMsgIDDZNZ>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMsgIDDZNZ_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMsgIDDZNZ_descriptor(), enum_t_value);
}
inline bool EMsgIDDZNZ_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMsgIDDZNZ* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMsgIDDZNZ>(
    EMsgIDDZNZ_descriptor(), name, value);
}
// ===================================================================

class RecodeProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DZNZ.RecodeProto) */ {
 public:
  inline RecodeProto() : RecodeProto(nullptr) {}
  virtual ~RecodeProto();

  RecodeProto(const RecodeProto& from);
  RecodeProto(RecodeProto&& from) noexcept
    : RecodeProto() {
    *this = ::std::move(from);
  }

  inline RecodeProto& operator=(const RecodeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecodeProto& operator=(RecodeProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecodeProto& default_instance();

  static inline const RecodeProto* internal_default_instance() {
    return reinterpret_cast<const RecodeProto*>(
               &_RecodeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RecodeProto& a, RecodeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RecodeProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecodeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecodeProto* New() const final {
    return CreateMaybeMessage<RecodeProto>(nullptr);
  }

  RecodeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecodeProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecodeProto& from);
  void MergeFrom(const RecodeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecodeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DZNZ.RecodeProto";
  }
  protected:
  explicit RecodeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DZNZ_2eproto);
    return ::descriptor_table_DZNZ_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameRecodeFieldNumber = 1,
  };
  // repeated int32 game_recode = 1;
  int game_recode_size() const;
  private:
  int _internal_game_recode_size() const;
  public:
  void clear_game_recode();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_recode(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_game_recode() const;
  void _internal_add_game_recode(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_game_recode();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 game_recode(int index) const;
  void set_game_recode(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_game_recode(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      game_recode() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_game_recode();

  // @@protoc_insertion_point(class_scope:DZNZ.RecodeProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > game_recode_;
  mutable std::atomic<int> _game_recode_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DZNZ_2eproto;
};
// -------------------------------------------------------------------

class PlayerInfoProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DZNZ.PlayerInfoProto) */ {
 public:
  inline PlayerInfoProto() : PlayerInfoProto(nullptr) {}
  virtual ~PlayerInfoProto();

  PlayerInfoProto(const PlayerInfoProto& from);
  PlayerInfoProto(PlayerInfoProto&& from) noexcept
    : PlayerInfoProto() {
    *this = ::std::move(from);
  }

  inline PlayerInfoProto& operator=(const PlayerInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInfoProto& operator=(PlayerInfoProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerInfoProto& default_instance();

  static inline const PlayerInfoProto* internal_default_instance() {
    return reinterpret_cast<const PlayerInfoProto*>(
               &_PlayerInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlayerInfoProto& a, PlayerInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInfoProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInfoProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerInfoProto* New() const final {
    return CreateMaybeMessage<PlayerInfoProto>(nullptr);
  }

  PlayerInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInfoProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerInfoProto& from);
  void MergeFrom(const PlayerInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DZNZ.PlayerInfoProto";
  }
  protected:
  explicit PlayerInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DZNZ_2eproto);
    return ::descriptor_table_DZNZ_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBetInfoFieldNumber = 4,
    kPlayerBetFieldNumber = 2,
    kTotalWinFieldNumber = 3,
    kWinCountFieldNumber = 1,
  };
  // repeated int32 bet_info = 4;
  int bet_info_size() const;
  private:
  int _internal_bet_info_size() const;
  public:
  void clear_bet_info();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bet_info(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_bet_info() const;
  void _internal_add_bet_info(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_bet_info();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 bet_info(int index) const;
  void set_bet_info(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_bet_info(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      bet_info() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_bet_info();

  // int64 player_bet = 2;
  void clear_player_bet();
  ::PROTOBUF_NAMESPACE_ID::int64 player_bet() const;
  void set_player_bet(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_player_bet() const;
  void _internal_set_player_bet(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 total_win = 3;
  void clear_total_win();
  ::PROTOBUF_NAMESPACE_ID::int64 total_win() const;
  void set_total_win(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_win() const;
  void _internal_set_total_win(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 win_count = 1;
  void clear_win_count();
  ::PROTOBUF_NAMESPACE_ID::int32 win_count() const;
  void set_win_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_win_count() const;
  void _internal_set_win_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DZNZ.PlayerInfoProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > bet_info_;
  mutable std::atomic<int> _bet_info_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 player_bet_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_win_;
  ::PROTOBUF_NAMESPACE_ID::int32 win_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DZNZ_2eproto;
};
// -------------------------------------------------------------------

class PlayerGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DZNZ.PlayerGameData) */ {
 public:
  inline PlayerGameData() : PlayerGameData(nullptr) {}
  virtual ~PlayerGameData();

  PlayerGameData(const PlayerGameData& from);
  PlayerGameData(PlayerGameData&& from) noexcept
    : PlayerGameData() {
    *this = ::std::move(from);
  }

  inline PlayerGameData& operator=(const PlayerGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerGameData& operator=(PlayerGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerGameData& default_instance();

  static inline const PlayerGameData* internal_default_instance() {
    return reinterpret_cast<const PlayerGameData*>(
               &_PlayerGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlayerGameData& a, PlayerGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerGameData* New() const final {
    return CreateMaybeMessage<PlayerGameData>(nullptr);
  }

  PlayerGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerGameData& from);
  void MergeFrom(const PlayerGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DZNZ.PlayerGameData";
  }
  protected:
  explicit PlayerGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DZNZ_2eproto);
    return ::descriptor_table_DZNZ_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerGameDataFieldNumber = 1,
  };
  // repeated .DZNZ.PlayerInfoProto Player_Game_Data = 1;
  int player_game_data_size() const;
  private:
  int _internal_player_game_data_size() const;
  public:
  void clear_player_game_data();
  ::DZNZ::PlayerInfoProto* mutable_player_game_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DZNZ::PlayerInfoProto >*
      mutable_player_game_data();
  private:
  const ::DZNZ::PlayerInfoProto& _internal_player_game_data(int index) const;
  ::DZNZ::PlayerInfoProto* _internal_add_player_game_data();
  public:
  const ::DZNZ::PlayerInfoProto& player_game_data(int index) const;
  ::DZNZ::PlayerInfoProto* add_player_game_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DZNZ::PlayerInfoProto >&
      player_game_data() const;

  // @@protoc_insertion_point(class_scope:DZNZ.PlayerGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DZNZ::PlayerInfoProto > player_game_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DZNZ_2eproto;
};
// -------------------------------------------------------------------

class SC_SceneInfoProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DZNZ.SC_SceneInfoProto) */ {
 public:
  inline SC_SceneInfoProto() : SC_SceneInfoProto(nullptr) {}
  virtual ~SC_SceneInfoProto();

  SC_SceneInfoProto(const SC_SceneInfoProto& from);
  SC_SceneInfoProto(SC_SceneInfoProto&& from) noexcept
    : SC_SceneInfoProto() {
    *this = ::std::move(from);
  }

  inline SC_SceneInfoProto& operator=(const SC_SceneInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_SceneInfoProto& operator=(SC_SceneInfoProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_SceneInfoProto& default_instance();

  static inline const SC_SceneInfoProto* internal_default_instance() {
    return reinterpret_cast<const SC_SceneInfoProto*>(
               &_SC_SceneInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SC_SceneInfoProto& a, SC_SceneInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_SceneInfoProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_SceneInfoProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_SceneInfoProto* New() const final {
    return CreateMaybeMessage<SC_SceneInfoProto>(nullptr);
  }

  SC_SceneInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_SceneInfoProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_SceneInfoProto& from);
  void MergeFrom(const SC_SceneInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_SceneInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DZNZ.SC_SceneInfoProto";
  }
  protected:
  explicit SC_SceneInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DZNZ_2eproto);
    return ::descriptor_table_DZNZ_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWheelMsgFieldNumber = 3,
    kBetLimitFieldNumber = 4,
    kBetConfigFieldNumber = 5,
    kAreaMultipleFieldNumber = 6,
    kPlayerGameDataFieldNumber = 7,
    kGameStateFieldNumber = 1,
    kRemainTimeFieldNumber = 2,
  };
  // repeated .DZNZ.WheelInfoProto wheel_msg = 3;
  int wheel_msg_size() const;
  private:
  int _internal_wheel_msg_size() const;
  public:
  void clear_wheel_msg();
  ::DZNZ::WheelInfoProto* mutable_wheel_msg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DZNZ::WheelInfoProto >*
      mutable_wheel_msg();
  private:
  const ::DZNZ::WheelInfoProto& _internal_wheel_msg(int index) const;
  ::DZNZ::WheelInfoProto* _internal_add_wheel_msg();
  public:
  const ::DZNZ::WheelInfoProto& wheel_msg(int index) const;
  ::DZNZ::WheelInfoProto* add_wheel_msg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DZNZ::WheelInfoProto >&
      wheel_msg() const;

  // repeated int64 bet_limit = 4;
  int bet_limit_size() const;
  private:
  int _internal_bet_limit_size() const;
  public:
  void clear_bet_limit();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_bet_limit(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_bet_limit() const;
  void _internal_add_bet_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_bet_limit();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 bet_limit(int index) const;
  void set_bet_limit(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_bet_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      bet_limit() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_bet_limit();

  // repeated int32 bet_config = 5;
  int bet_config_size() const;
  private:
  int _internal_bet_config_size() const;
  public:
  void clear_bet_config();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bet_config(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_bet_config() const;
  void _internal_add_bet_config(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_bet_config();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 bet_config(int index) const;
  void set_bet_config(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_bet_config(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      bet_config() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_bet_config();

  // repeated int32 area_multiple = 6;
  int area_multiple_size() const;
  private:
  int _internal_area_multiple_size() const;
  public:
  void clear_area_multiple();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_area_multiple(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_area_multiple() const;
  void _internal_add_area_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_area_multiple();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 area_multiple(int index) const;
  void set_area_multiple(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_area_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      area_multiple() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_area_multiple();

  // repeated .DZNZ.PlayerInfoProto player_game_data = 7;
  int player_game_data_size() const;
  private:
  int _internal_player_game_data_size() const;
  public:
  void clear_player_game_data();
  ::DZNZ::PlayerInfoProto* mutable_player_game_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DZNZ::PlayerInfoProto >*
      mutable_player_game_data();
  private:
  const ::DZNZ::PlayerInfoProto& _internal_player_game_data(int index) const;
  ::DZNZ::PlayerInfoProto* _internal_add_player_game_data();
  public:
  const ::DZNZ::PlayerInfoProto& player_game_data(int index) const;
  ::DZNZ::PlayerInfoProto* add_player_game_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DZNZ::PlayerInfoProto >&
      player_game_data() const;

  // int32 game_state = 1;
  void clear_game_state();
  ::PROTOBUF_NAMESPACE_ID::int32 game_state() const;
  void set_game_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_state() const;
  void _internal_set_game_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 remain_time = 2;
  void clear_remain_time();
  ::PROTOBUF_NAMESPACE_ID::int32 remain_time() const;
  void set_remain_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_remain_time() const;
  void _internal_set_remain_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DZNZ.SC_SceneInfoProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DZNZ::WheelInfoProto > wheel_msg_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > bet_limit_;
  mutable std::atomic<int> _bet_limit_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > bet_config_;
  mutable std::atomic<int> _bet_config_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > area_multiple_;
  mutable std::atomic<int> _area_multiple_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DZNZ::PlayerInfoProto > player_game_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 remain_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DZNZ_2eproto;
};
// -------------------------------------------------------------------

class CMD_SC_BetProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DZNZ.CMD_SC_BetProto) */ {
 public:
  inline CMD_SC_BetProto() : CMD_SC_BetProto(nullptr) {}
  virtual ~CMD_SC_BetProto();

  CMD_SC_BetProto(const CMD_SC_BetProto& from);
  CMD_SC_BetProto(CMD_SC_BetProto&& from) noexcept
    : CMD_SC_BetProto() {
    *this = ::std::move(from);
  }

  inline CMD_SC_BetProto& operator=(const CMD_SC_BetProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMD_SC_BetProto& operator=(CMD_SC_BetProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMD_SC_BetProto& default_instance();

  static inline const CMD_SC_BetProto* internal_default_instance() {
    return reinterpret_cast<const CMD_SC_BetProto*>(
               &_CMD_SC_BetProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMD_SC_BetProto& a, CMD_SC_BetProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CMD_SC_BetProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMD_SC_BetProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMD_SC_BetProto* New() const final {
    return CreateMaybeMessage<CMD_SC_BetProto>(nullptr);
  }

  CMD_SC_BetProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMD_SC_BetProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMD_SC_BetProto& from);
  void MergeFrom(const CMD_SC_BetProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMD_SC_BetProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DZNZ.CMD_SC_BetProto";
  }
  protected:
  explicit CMD_SC_BetProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DZNZ_2eproto);
    return ::descriptor_table_DZNZ_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairidFieldNumber = 1,
    kAreaFieldNumber = 2,
    kBetNumFieldNumber = 3,
  };
  // int32 chairid = 1;
  void clear_chairid();
  ::PROTOBUF_NAMESPACE_ID::int32 chairid() const;
  void set_chairid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chairid() const;
  void _internal_set_chairid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 area = 2;
  void clear_area();
  ::PROTOBUF_NAMESPACE_ID::int32 area() const;
  void set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_area() const;
  void _internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bet_num = 3;
  void clear_bet_num();
  ::PROTOBUF_NAMESPACE_ID::int32 bet_num() const;
  void set_bet_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bet_num() const;
  void _internal_set_bet_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DZNZ.CMD_SC_BetProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chairid_;
  ::PROTOBUF_NAMESPACE_ID::int32 area_;
  ::PROTOBUF_NAMESPACE_ID::int32 bet_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DZNZ_2eproto;
};
// -------------------------------------------------------------------

class WheelInfoProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DZNZ.WheelInfoProto) */ {
 public:
  inline WheelInfoProto() : WheelInfoProto(nullptr) {}
  virtual ~WheelInfoProto();

  WheelInfoProto(const WheelInfoProto& from);
  WheelInfoProto(WheelInfoProto&& from) noexcept
    : WheelInfoProto() {
    *this = ::std::move(from);
  }

  inline WheelInfoProto& operator=(const WheelInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline WheelInfoProto& operator=(WheelInfoProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WheelInfoProto& default_instance();

  static inline const WheelInfoProto* internal_default_instance() {
    return reinterpret_cast<const WheelInfoProto*>(
               &_WheelInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WheelInfoProto& a, WheelInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(WheelInfoProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WheelInfoProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WheelInfoProto* New() const final {
    return CreateMaybeMessage<WheelInfoProto>(nullptr);
  }

  WheelInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WheelInfoProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WheelInfoProto& from);
  void MergeFrom(const WheelInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WheelInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DZNZ.WheelInfoProto";
  }
  protected:
  explicit WheelInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DZNZ_2eproto);
    return ::descriptor_table_DZNZ_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandFieldNumber = 2,
    kWinMsgFieldNumber = 1,
    kCardTypeFieldNumber = 3,
  };
  // repeated int32 hand = 2;
  int hand_size() const;
  private:
  int _internal_hand_size() const;
  public:
  void clear_hand();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hand(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_hand() const;
  void _internal_add_hand(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_hand();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 hand(int index) const;
  void set_hand(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_hand(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      hand() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_hand();

  // int32 win_msg = 1;
  void clear_win_msg();
  ::PROTOBUF_NAMESPACE_ID::int32 win_msg() const;
  void set_win_msg(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_win_msg() const;
  void _internal_set_win_msg(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 card_type = 3;
  void clear_card_type();
  ::PROTOBUF_NAMESPACE_ID::int32 card_type() const;
  void set_card_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_card_type() const;
  void _internal_set_card_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DZNZ.WheelInfoProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > hand_;
  mutable std::atomic<int> _hand_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 win_msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 card_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DZNZ_2eproto;
};
// -------------------------------------------------------------------

class CMD_SC_GameResultProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DZNZ.CMD_SC_GameResultProto) */ {
 public:
  inline CMD_SC_GameResultProto() : CMD_SC_GameResultProto(nullptr) {}
  virtual ~CMD_SC_GameResultProto();

  CMD_SC_GameResultProto(const CMD_SC_GameResultProto& from);
  CMD_SC_GameResultProto(CMD_SC_GameResultProto&& from) noexcept
    : CMD_SC_GameResultProto() {
    *this = ::std::move(from);
  }

  inline CMD_SC_GameResultProto& operator=(const CMD_SC_GameResultProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMD_SC_GameResultProto& operator=(CMD_SC_GameResultProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMD_SC_GameResultProto& default_instance();

  static inline const CMD_SC_GameResultProto* internal_default_instance() {
    return reinterpret_cast<const CMD_SC_GameResultProto*>(
               &_CMD_SC_GameResultProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMD_SC_GameResultProto& a, CMD_SC_GameResultProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CMD_SC_GameResultProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMD_SC_GameResultProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMD_SC_GameResultProto* New() const final {
    return CreateMaybeMessage<CMD_SC_GameResultProto>(nullptr);
  }

  CMD_SC_GameResultProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMD_SC_GameResultProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMD_SC_GameResultProto& from);
  void MergeFrom(const CMD_SC_GameResultProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMD_SC_GameResultProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DZNZ.CMD_SC_GameResultProto";
  }
  protected:
  explicit CMD_SC_GameResultProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DZNZ_2eproto);
    return ::descriptor_table_DZNZ_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardTypeFieldNumber = 1,
    kCardFieldNumber = 2,
    kWinCardFieldNumber = 3,
    kWheelInfoHandFieldNumber = 6,
    kWinMsgFieldNumber = 8,
    kUserGoldFieldNumber = 9,
    kWheelInfoWinMsgFieldNumber = 5,
    kWheelInfoCardTypeFieldNumber = 7,
  };
  // repeated int32 card_type = 1;
  int card_type_size() const;
  private:
  int _internal_card_type_size() const;
  public:
  void clear_card_type();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_card_type(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_card_type() const;
  void _internal_add_card_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_card_type();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 card_type(int index) const;
  void set_card_type(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_card_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      card_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_card_type();

  // repeated int32 card = 2;
  int card_size() const;
  private:
  int _internal_card_size() const;
  public:
  void clear_card();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_card(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_card() const;
  void _internal_add_card(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_card();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 card(int index) const;
  void set_card(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_card(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      card() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_card();

  // repeated int32 win_card = 3;
  int win_card_size() const;
  private:
  int _internal_win_card_size() const;
  public:
  void clear_win_card();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_win_card(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_win_card() const;
  void _internal_add_win_card(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_win_card();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 win_card(int index) const;
  void set_win_card(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_win_card(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      win_card() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_win_card();

  // repeated int32 wheel_info_hand = 6;
  int wheel_info_hand_size() const;
  private:
  int _internal_wheel_info_hand_size() const;
  public:
  void clear_wheel_info_hand();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wheel_info_hand(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_wheel_info_hand() const;
  void _internal_add_wheel_info_hand(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_wheel_info_hand();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 wheel_info_hand(int index) const;
  void set_wheel_info_hand(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_wheel_info_hand(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      wheel_info_hand() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_wheel_info_hand();

  // repeated int64 win_msg = 8;
  int win_msg_size() const;
  private:
  int _internal_win_msg_size() const;
  public:
  void clear_win_msg();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_win_msg(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_win_msg() const;
  void _internal_add_win_msg(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_win_msg();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 win_msg(int index) const;
  void set_win_msg(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_win_msg(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      win_msg() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_win_msg();

  // repeated int64 user_gold = 9;
  int user_gold_size() const;
  private:
  int _internal_user_gold_size() const;
  public:
  void clear_user_gold();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_gold(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_user_gold() const;
  void _internal_add_user_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_user_gold();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 user_gold(int index) const;
  void set_user_gold(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_user_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      user_gold() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_user_gold();

  // int32 wheel_info_win_msg = 5;
  void clear_wheel_info_win_msg();
  ::PROTOBUF_NAMESPACE_ID::int32 wheel_info_win_msg() const;
  void set_wheel_info_win_msg(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wheel_info_win_msg() const;
  void _internal_set_wheel_info_win_msg(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 wheel_info_card_type = 7;
  void clear_wheel_info_card_type();
  ::PROTOBUF_NAMESPACE_ID::int32 wheel_info_card_type() const;
  void set_wheel_info_card_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wheel_info_card_type() const;
  void _internal_set_wheel_info_card_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DZNZ.CMD_SC_GameResultProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > card_type_;
  mutable std::atomic<int> _card_type_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > card_;
  mutable std::atomic<int> _card_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > win_card_;
  mutable std::atomic<int> _win_card_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > wheel_info_hand_;
  mutable std::atomic<int> _wheel_info_hand_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > win_msg_;
  mutable std::atomic<int> _win_msg_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > user_gold_;
  mutable std::atomic<int> _user_gold_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 wheel_info_win_msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 wheel_info_card_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DZNZ_2eproto;
};
// -------------------------------------------------------------------

class CMD_SC_BetAgainProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DZNZ.CMD_SC_BetAgainProto) */ {
 public:
  inline CMD_SC_BetAgainProto() : CMD_SC_BetAgainProto(nullptr) {}
  virtual ~CMD_SC_BetAgainProto();

  CMD_SC_BetAgainProto(const CMD_SC_BetAgainProto& from);
  CMD_SC_BetAgainProto(CMD_SC_BetAgainProto&& from) noexcept
    : CMD_SC_BetAgainProto() {
    *this = ::std::move(from);
  }

  inline CMD_SC_BetAgainProto& operator=(const CMD_SC_BetAgainProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMD_SC_BetAgainProto& operator=(CMD_SC_BetAgainProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMD_SC_BetAgainProto& default_instance();

  static inline const CMD_SC_BetAgainProto* internal_default_instance() {
    return reinterpret_cast<const CMD_SC_BetAgainProto*>(
               &_CMD_SC_BetAgainProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMD_SC_BetAgainProto& a, CMD_SC_BetAgainProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CMD_SC_BetAgainProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMD_SC_BetAgainProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMD_SC_BetAgainProto* New() const final {
    return CreateMaybeMessage<CMD_SC_BetAgainProto>(nullptr);
  }

  CMD_SC_BetAgainProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMD_SC_BetAgainProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMD_SC_BetAgainProto& from);
  void MergeFrom(const CMD_SC_BetAgainProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMD_SC_BetAgainProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DZNZ.CMD_SC_BetAgainProto";
  }
  protected:
  explicit CMD_SC_BetAgainProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DZNZ_2eproto);
    return ::descriptor_table_DZNZ_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairidFieldNumber = 1,
    kAreaFieldNumber = 2,
    kBetNumFieldNumber = 3,
    kBetCountFieldNumber = 4,
  };
  // int32 chairid = 1;
  void clear_chairid();
  ::PROTOBUF_NAMESPACE_ID::int32 chairid() const;
  void set_chairid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chairid() const;
  void _internal_set_chairid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 area = 2;
  void clear_area();
  ::PROTOBUF_NAMESPACE_ID::int32 area() const;
  void set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_area() const;
  void _internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bet_num = 3;
  void clear_bet_num();
  ::PROTOBUF_NAMESPACE_ID::int32 bet_num() const;
  void set_bet_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bet_num() const;
  void _internal_set_bet_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bet_count = 4;
  void clear_bet_count();
  ::PROTOBUF_NAMESPACE_ID::int32 bet_count() const;
  void set_bet_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bet_count() const;
  void _internal_set_bet_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DZNZ.CMD_SC_BetAgainProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chairid_;
  ::PROTOBUF_NAMESPACE_ID::int32 area_;
  ::PROTOBUF_NAMESPACE_ID::int32 bet_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 bet_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DZNZ_2eproto;
};
// -------------------------------------------------------------------

class CMD_SC_NotifyStatusProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DZNZ.CMD_SC_NotifyStatusProto) */ {
 public:
  inline CMD_SC_NotifyStatusProto() : CMD_SC_NotifyStatusProto(nullptr) {}
  virtual ~CMD_SC_NotifyStatusProto();

  CMD_SC_NotifyStatusProto(const CMD_SC_NotifyStatusProto& from);
  CMD_SC_NotifyStatusProto(CMD_SC_NotifyStatusProto&& from) noexcept
    : CMD_SC_NotifyStatusProto() {
    *this = ::std::move(from);
  }

  inline CMD_SC_NotifyStatusProto& operator=(const CMD_SC_NotifyStatusProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMD_SC_NotifyStatusProto& operator=(CMD_SC_NotifyStatusProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMD_SC_NotifyStatusProto& default_instance();

  static inline const CMD_SC_NotifyStatusProto* internal_default_instance() {
    return reinterpret_cast<const CMD_SC_NotifyStatusProto*>(
               &_CMD_SC_NotifyStatusProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMD_SC_NotifyStatusProto& a, CMD_SC_NotifyStatusProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CMD_SC_NotifyStatusProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMD_SC_NotifyStatusProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMD_SC_NotifyStatusProto* New() const final {
    return CreateMaybeMessage<CMD_SC_NotifyStatusProto>(nullptr);
  }

  CMD_SC_NotifyStatusProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMD_SC_NotifyStatusProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMD_SC_NotifyStatusProto& from);
  void MergeFrom(const CMD_SC_NotifyStatusProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMD_SC_NotifyStatusProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DZNZ.CMD_SC_NotifyStatusProto";
  }
  protected:
  explicit CMD_SC_NotifyStatusProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DZNZ_2eproto);
    return ::descriptor_table_DZNZ_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameStateFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // int32 game_state = 1;
  void clear_game_state();
  ::PROTOBUF_NAMESPACE_ID::int32 game_state() const;
  void set_game_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_state() const;
  void _internal_set_game_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time = 2;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DZNZ.CMD_SC_NotifyStatusProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DZNZ_2eproto;
};
// -------------------------------------------------------------------

class CMD_CS_Bet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DZNZ.CMD_CS_Bet) */ {
 public:
  inline CMD_CS_Bet() : CMD_CS_Bet(nullptr) {}
  virtual ~CMD_CS_Bet();

  CMD_CS_Bet(const CMD_CS_Bet& from);
  CMD_CS_Bet(CMD_CS_Bet&& from) noexcept
    : CMD_CS_Bet() {
    *this = ::std::move(from);
  }

  inline CMD_CS_Bet& operator=(const CMD_CS_Bet& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMD_CS_Bet& operator=(CMD_CS_Bet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMD_CS_Bet& default_instance();

  static inline const CMD_CS_Bet* internal_default_instance() {
    return reinterpret_cast<const CMD_CS_Bet*>(
               &_CMD_CS_Bet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMD_CS_Bet& a, CMD_CS_Bet& b) {
    a.Swap(&b);
  }
  inline void Swap(CMD_CS_Bet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMD_CS_Bet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMD_CS_Bet* New() const final {
    return CreateMaybeMessage<CMD_CS_Bet>(nullptr);
  }

  CMD_CS_Bet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMD_CS_Bet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMD_CS_Bet& from);
  void MergeFrom(const CMD_CS_Bet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMD_CS_Bet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DZNZ.CMD_CS_Bet";
  }
  protected:
  explicit CMD_CS_Bet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DZNZ_2eproto);
    return ::descriptor_table_DZNZ_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAreaFieldNumber = 1,
    kBetNumFieldNumber = 2,
  };
  // int32 area = 1;
  void clear_area();
  ::PROTOBUF_NAMESPACE_ID::int32 area() const;
  void set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_area() const;
  void _internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bet_num = 2;
  void clear_bet_num();
  ::PROTOBUF_NAMESPACE_ID::int32 bet_num() const;
  void set_bet_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bet_num() const;
  void _internal_set_bet_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DZNZ.CMD_CS_Bet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 area_;
  ::PROTOBUF_NAMESPACE_ID::int32 bet_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DZNZ_2eproto;
};
// -------------------------------------------------------------------

class CMD_CS_BetAgain PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DZNZ.CMD_CS_BetAgain) */ {
 public:
  inline CMD_CS_BetAgain() : CMD_CS_BetAgain(nullptr) {}
  virtual ~CMD_CS_BetAgain();

  CMD_CS_BetAgain(const CMD_CS_BetAgain& from);
  CMD_CS_BetAgain(CMD_CS_BetAgain&& from) noexcept
    : CMD_CS_BetAgain() {
    *this = ::std::move(from);
  }

  inline CMD_CS_BetAgain& operator=(const CMD_CS_BetAgain& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMD_CS_BetAgain& operator=(CMD_CS_BetAgain&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMD_CS_BetAgain& default_instance();

  static inline const CMD_CS_BetAgain* internal_default_instance() {
    return reinterpret_cast<const CMD_CS_BetAgain*>(
               &_CMD_CS_BetAgain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMD_CS_BetAgain& a, CMD_CS_BetAgain& b) {
    a.Swap(&b);
  }
  inline void Swap(CMD_CS_BetAgain* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMD_CS_BetAgain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMD_CS_BetAgain* New() const final {
    return CreateMaybeMessage<CMD_CS_BetAgain>(nullptr);
  }

  CMD_CS_BetAgain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMD_CS_BetAgain>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMD_CS_BetAgain& from);
  void MergeFrom(const CMD_CS_BetAgain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMD_CS_BetAgain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DZNZ.CMD_CS_BetAgain";
  }
  protected:
  explicit CMD_CS_BetAgain(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DZNZ_2eproto);
    return ::descriptor_table_DZNZ_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAreaFieldNumber = 1,
    kBetNumFieldNumber = 2,
    kBetCountFieldNumber = 3,
  };
  // int32 area = 1;
  void clear_area();
  ::PROTOBUF_NAMESPACE_ID::int32 area() const;
  void set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_area() const;
  void _internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bet_num = 2;
  void clear_bet_num();
  ::PROTOBUF_NAMESPACE_ID::int32 bet_num() const;
  void set_bet_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bet_num() const;
  void _internal_set_bet_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bet_count = 3;
  void clear_bet_count();
  ::PROTOBUF_NAMESPACE_ID::int32 bet_count() const;
  void set_bet_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bet_count() const;
  void _internal_set_bet_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DZNZ.CMD_CS_BetAgain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 area_;
  ::PROTOBUF_NAMESPACE_ID::int32 bet_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 bet_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DZNZ_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RecodeProto

// repeated int32 game_recode = 1;
inline int RecodeProto::_internal_game_recode_size() const {
  return game_recode_.size();
}
inline int RecodeProto::game_recode_size() const {
  return _internal_game_recode_size();
}
inline void RecodeProto::clear_game_recode() {
  game_recode_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecodeProto::_internal_game_recode(int index) const {
  return game_recode_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecodeProto::game_recode(int index) const {
  // @@protoc_insertion_point(field_get:DZNZ.RecodeProto.game_recode)
  return _internal_game_recode(index);
}
inline void RecodeProto::set_game_recode(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  game_recode_.Set(index, value);
  // @@protoc_insertion_point(field_set:DZNZ.RecodeProto.game_recode)
}
inline void RecodeProto::_internal_add_game_recode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  game_recode_.Add(value);
}
inline void RecodeProto::add_game_recode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_game_recode(value);
  // @@protoc_insertion_point(field_add:DZNZ.RecodeProto.game_recode)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RecodeProto::_internal_game_recode() const {
  return game_recode_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RecodeProto::game_recode() const {
  // @@protoc_insertion_point(field_list:DZNZ.RecodeProto.game_recode)
  return _internal_game_recode();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RecodeProto::_internal_mutable_game_recode() {
  return &game_recode_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RecodeProto::mutable_game_recode() {
  // @@protoc_insertion_point(field_mutable_list:DZNZ.RecodeProto.game_recode)
  return _internal_mutable_game_recode();
}

// -------------------------------------------------------------------

// PlayerInfoProto

// int32 win_count = 1;
inline void PlayerInfoProto::clear_win_count() {
  win_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfoProto::_internal_win_count() const {
  return win_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfoProto::win_count() const {
  // @@protoc_insertion_point(field_get:DZNZ.PlayerInfoProto.win_count)
  return _internal_win_count();
}
inline void PlayerInfoProto::_internal_set_win_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  win_count_ = value;
}
inline void PlayerInfoProto::set_win_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_win_count(value);
  // @@protoc_insertion_point(field_set:DZNZ.PlayerInfoProto.win_count)
}

// int64 player_bet = 2;
inline void PlayerInfoProto::clear_player_bet() {
  player_bet_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerInfoProto::_internal_player_bet() const {
  return player_bet_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerInfoProto::player_bet() const {
  // @@protoc_insertion_point(field_get:DZNZ.PlayerInfoProto.player_bet)
  return _internal_player_bet();
}
inline void PlayerInfoProto::_internal_set_player_bet(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  player_bet_ = value;
}
inline void PlayerInfoProto::set_player_bet(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_player_bet(value);
  // @@protoc_insertion_point(field_set:DZNZ.PlayerInfoProto.player_bet)
}

// int64 total_win = 3;
inline void PlayerInfoProto::clear_total_win() {
  total_win_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerInfoProto::_internal_total_win() const {
  return total_win_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerInfoProto::total_win() const {
  // @@protoc_insertion_point(field_get:DZNZ.PlayerInfoProto.total_win)
  return _internal_total_win();
}
inline void PlayerInfoProto::_internal_set_total_win(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_win_ = value;
}
inline void PlayerInfoProto::set_total_win(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_win(value);
  // @@protoc_insertion_point(field_set:DZNZ.PlayerInfoProto.total_win)
}

// repeated int32 bet_info = 4;
inline int PlayerInfoProto::_internal_bet_info_size() const {
  return bet_info_.size();
}
inline int PlayerInfoProto::bet_info_size() const {
  return _internal_bet_info_size();
}
inline void PlayerInfoProto::clear_bet_info() {
  bet_info_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfoProto::_internal_bet_info(int index) const {
  return bet_info_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfoProto::bet_info(int index) const {
  // @@protoc_insertion_point(field_get:DZNZ.PlayerInfoProto.bet_info)
  return _internal_bet_info(index);
}
inline void PlayerInfoProto::set_bet_info(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  bet_info_.Set(index, value);
  // @@protoc_insertion_point(field_set:DZNZ.PlayerInfoProto.bet_info)
}
inline void PlayerInfoProto::_internal_add_bet_info(::PROTOBUF_NAMESPACE_ID::int32 value) {
  bet_info_.Add(value);
}
inline void PlayerInfoProto::add_bet_info(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_bet_info(value);
  // @@protoc_insertion_point(field_add:DZNZ.PlayerInfoProto.bet_info)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PlayerInfoProto::_internal_bet_info() const {
  return bet_info_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PlayerInfoProto::bet_info() const {
  // @@protoc_insertion_point(field_list:DZNZ.PlayerInfoProto.bet_info)
  return _internal_bet_info();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PlayerInfoProto::_internal_mutable_bet_info() {
  return &bet_info_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PlayerInfoProto::mutable_bet_info() {
  // @@protoc_insertion_point(field_mutable_list:DZNZ.PlayerInfoProto.bet_info)
  return _internal_mutable_bet_info();
}

// -------------------------------------------------------------------

// PlayerGameData

// repeated .DZNZ.PlayerInfoProto Player_Game_Data = 1;
inline int PlayerGameData::_internal_player_game_data_size() const {
  return player_game_data_.size();
}
inline int PlayerGameData::player_game_data_size() const {
  return _internal_player_game_data_size();
}
inline void PlayerGameData::clear_player_game_data() {
  player_game_data_.Clear();
}
inline ::DZNZ::PlayerInfoProto* PlayerGameData::mutable_player_game_data(int index) {
  // @@protoc_insertion_point(field_mutable:DZNZ.PlayerGameData.Player_Game_Data)
  return player_game_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DZNZ::PlayerInfoProto >*
PlayerGameData::mutable_player_game_data() {
  // @@protoc_insertion_point(field_mutable_list:DZNZ.PlayerGameData.Player_Game_Data)
  return &player_game_data_;
}
inline const ::DZNZ::PlayerInfoProto& PlayerGameData::_internal_player_game_data(int index) const {
  return player_game_data_.Get(index);
}
inline const ::DZNZ::PlayerInfoProto& PlayerGameData::player_game_data(int index) const {
  // @@protoc_insertion_point(field_get:DZNZ.PlayerGameData.Player_Game_Data)
  return _internal_player_game_data(index);
}
inline ::DZNZ::PlayerInfoProto* PlayerGameData::_internal_add_player_game_data() {
  return player_game_data_.Add();
}
inline ::DZNZ::PlayerInfoProto* PlayerGameData::add_player_game_data() {
  // @@protoc_insertion_point(field_add:DZNZ.PlayerGameData.Player_Game_Data)
  return _internal_add_player_game_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DZNZ::PlayerInfoProto >&
PlayerGameData::player_game_data() const {
  // @@protoc_insertion_point(field_list:DZNZ.PlayerGameData.Player_Game_Data)
  return player_game_data_;
}

// -------------------------------------------------------------------

// SC_SceneInfoProto

// int32 game_state = 1;
inline void SC_SceneInfoProto::clear_game_state() {
  game_state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfoProto::_internal_game_state() const {
  return game_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfoProto::game_state() const {
  // @@protoc_insertion_point(field_get:DZNZ.SC_SceneInfoProto.game_state)
  return _internal_game_state();
}
inline void SC_SceneInfoProto::_internal_set_game_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_state_ = value;
}
inline void SC_SceneInfoProto::set_game_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_state(value);
  // @@protoc_insertion_point(field_set:DZNZ.SC_SceneInfoProto.game_state)
}

// int32 remain_time = 2;
inline void SC_SceneInfoProto::clear_remain_time() {
  remain_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfoProto::_internal_remain_time() const {
  return remain_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfoProto::remain_time() const {
  // @@protoc_insertion_point(field_get:DZNZ.SC_SceneInfoProto.remain_time)
  return _internal_remain_time();
}
inline void SC_SceneInfoProto::_internal_set_remain_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  remain_time_ = value;
}
inline void SC_SceneInfoProto::set_remain_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_remain_time(value);
  // @@protoc_insertion_point(field_set:DZNZ.SC_SceneInfoProto.remain_time)
}

// repeated .DZNZ.WheelInfoProto wheel_msg = 3;
inline int SC_SceneInfoProto::_internal_wheel_msg_size() const {
  return wheel_msg_.size();
}
inline int SC_SceneInfoProto::wheel_msg_size() const {
  return _internal_wheel_msg_size();
}
inline void SC_SceneInfoProto::clear_wheel_msg() {
  wheel_msg_.Clear();
}
inline ::DZNZ::WheelInfoProto* SC_SceneInfoProto::mutable_wheel_msg(int index) {
  // @@protoc_insertion_point(field_mutable:DZNZ.SC_SceneInfoProto.wheel_msg)
  return wheel_msg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DZNZ::WheelInfoProto >*
SC_SceneInfoProto::mutable_wheel_msg() {
  // @@protoc_insertion_point(field_mutable_list:DZNZ.SC_SceneInfoProto.wheel_msg)
  return &wheel_msg_;
}
inline const ::DZNZ::WheelInfoProto& SC_SceneInfoProto::_internal_wheel_msg(int index) const {
  return wheel_msg_.Get(index);
}
inline const ::DZNZ::WheelInfoProto& SC_SceneInfoProto::wheel_msg(int index) const {
  // @@protoc_insertion_point(field_get:DZNZ.SC_SceneInfoProto.wheel_msg)
  return _internal_wheel_msg(index);
}
inline ::DZNZ::WheelInfoProto* SC_SceneInfoProto::_internal_add_wheel_msg() {
  return wheel_msg_.Add();
}
inline ::DZNZ::WheelInfoProto* SC_SceneInfoProto::add_wheel_msg() {
  // @@protoc_insertion_point(field_add:DZNZ.SC_SceneInfoProto.wheel_msg)
  return _internal_add_wheel_msg();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DZNZ::WheelInfoProto >&
SC_SceneInfoProto::wheel_msg() const {
  // @@protoc_insertion_point(field_list:DZNZ.SC_SceneInfoProto.wheel_msg)
  return wheel_msg_;
}

// repeated int64 bet_limit = 4;
inline int SC_SceneInfoProto::_internal_bet_limit_size() const {
  return bet_limit_.size();
}
inline int SC_SceneInfoProto::bet_limit_size() const {
  return _internal_bet_limit_size();
}
inline void SC_SceneInfoProto::clear_bet_limit() {
  bet_limit_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SC_SceneInfoProto::_internal_bet_limit(int index) const {
  return bet_limit_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SC_SceneInfoProto::bet_limit(int index) const {
  // @@protoc_insertion_point(field_get:DZNZ.SC_SceneInfoProto.bet_limit)
  return _internal_bet_limit(index);
}
inline void SC_SceneInfoProto::set_bet_limit(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  bet_limit_.Set(index, value);
  // @@protoc_insertion_point(field_set:DZNZ.SC_SceneInfoProto.bet_limit)
}
inline void SC_SceneInfoProto::_internal_add_bet_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  bet_limit_.Add(value);
}
inline void SC_SceneInfoProto::add_bet_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_bet_limit(value);
  // @@protoc_insertion_point(field_add:DZNZ.SC_SceneInfoProto.bet_limit)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SC_SceneInfoProto::_internal_bet_limit() const {
  return bet_limit_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SC_SceneInfoProto::bet_limit() const {
  // @@protoc_insertion_point(field_list:DZNZ.SC_SceneInfoProto.bet_limit)
  return _internal_bet_limit();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SC_SceneInfoProto::_internal_mutable_bet_limit() {
  return &bet_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SC_SceneInfoProto::mutable_bet_limit() {
  // @@protoc_insertion_point(field_mutable_list:DZNZ.SC_SceneInfoProto.bet_limit)
  return _internal_mutable_bet_limit();
}

// repeated int32 bet_config = 5;
inline int SC_SceneInfoProto::_internal_bet_config_size() const {
  return bet_config_.size();
}
inline int SC_SceneInfoProto::bet_config_size() const {
  return _internal_bet_config_size();
}
inline void SC_SceneInfoProto::clear_bet_config() {
  bet_config_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfoProto::_internal_bet_config(int index) const {
  return bet_config_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfoProto::bet_config(int index) const {
  // @@protoc_insertion_point(field_get:DZNZ.SC_SceneInfoProto.bet_config)
  return _internal_bet_config(index);
}
inline void SC_SceneInfoProto::set_bet_config(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  bet_config_.Set(index, value);
  // @@protoc_insertion_point(field_set:DZNZ.SC_SceneInfoProto.bet_config)
}
inline void SC_SceneInfoProto::_internal_add_bet_config(::PROTOBUF_NAMESPACE_ID::int32 value) {
  bet_config_.Add(value);
}
inline void SC_SceneInfoProto::add_bet_config(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_bet_config(value);
  // @@protoc_insertion_point(field_add:DZNZ.SC_SceneInfoProto.bet_config)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_SceneInfoProto::_internal_bet_config() const {
  return bet_config_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_SceneInfoProto::bet_config() const {
  // @@protoc_insertion_point(field_list:DZNZ.SC_SceneInfoProto.bet_config)
  return _internal_bet_config();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_SceneInfoProto::_internal_mutable_bet_config() {
  return &bet_config_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_SceneInfoProto::mutable_bet_config() {
  // @@protoc_insertion_point(field_mutable_list:DZNZ.SC_SceneInfoProto.bet_config)
  return _internal_mutable_bet_config();
}

// repeated int32 area_multiple = 6;
inline int SC_SceneInfoProto::_internal_area_multiple_size() const {
  return area_multiple_.size();
}
inline int SC_SceneInfoProto::area_multiple_size() const {
  return _internal_area_multiple_size();
}
inline void SC_SceneInfoProto::clear_area_multiple() {
  area_multiple_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfoProto::_internal_area_multiple(int index) const {
  return area_multiple_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfoProto::area_multiple(int index) const {
  // @@protoc_insertion_point(field_get:DZNZ.SC_SceneInfoProto.area_multiple)
  return _internal_area_multiple(index);
}
inline void SC_SceneInfoProto::set_area_multiple(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  area_multiple_.Set(index, value);
  // @@protoc_insertion_point(field_set:DZNZ.SC_SceneInfoProto.area_multiple)
}
inline void SC_SceneInfoProto::_internal_add_area_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  area_multiple_.Add(value);
}
inline void SC_SceneInfoProto::add_area_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_area_multiple(value);
  // @@protoc_insertion_point(field_add:DZNZ.SC_SceneInfoProto.area_multiple)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_SceneInfoProto::_internal_area_multiple() const {
  return area_multiple_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_SceneInfoProto::area_multiple() const {
  // @@protoc_insertion_point(field_list:DZNZ.SC_SceneInfoProto.area_multiple)
  return _internal_area_multiple();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_SceneInfoProto::_internal_mutable_area_multiple() {
  return &area_multiple_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_SceneInfoProto::mutable_area_multiple() {
  // @@protoc_insertion_point(field_mutable_list:DZNZ.SC_SceneInfoProto.area_multiple)
  return _internal_mutable_area_multiple();
}

// repeated .DZNZ.PlayerInfoProto player_game_data = 7;
inline int SC_SceneInfoProto::_internal_player_game_data_size() const {
  return player_game_data_.size();
}
inline int SC_SceneInfoProto::player_game_data_size() const {
  return _internal_player_game_data_size();
}
inline void SC_SceneInfoProto::clear_player_game_data() {
  player_game_data_.Clear();
}
inline ::DZNZ::PlayerInfoProto* SC_SceneInfoProto::mutable_player_game_data(int index) {
  // @@protoc_insertion_point(field_mutable:DZNZ.SC_SceneInfoProto.player_game_data)
  return player_game_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DZNZ::PlayerInfoProto >*
SC_SceneInfoProto::mutable_player_game_data() {
  // @@protoc_insertion_point(field_mutable_list:DZNZ.SC_SceneInfoProto.player_game_data)
  return &player_game_data_;
}
inline const ::DZNZ::PlayerInfoProto& SC_SceneInfoProto::_internal_player_game_data(int index) const {
  return player_game_data_.Get(index);
}
inline const ::DZNZ::PlayerInfoProto& SC_SceneInfoProto::player_game_data(int index) const {
  // @@protoc_insertion_point(field_get:DZNZ.SC_SceneInfoProto.player_game_data)
  return _internal_player_game_data(index);
}
inline ::DZNZ::PlayerInfoProto* SC_SceneInfoProto::_internal_add_player_game_data() {
  return player_game_data_.Add();
}
inline ::DZNZ::PlayerInfoProto* SC_SceneInfoProto::add_player_game_data() {
  // @@protoc_insertion_point(field_add:DZNZ.SC_SceneInfoProto.player_game_data)
  return _internal_add_player_game_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DZNZ::PlayerInfoProto >&
SC_SceneInfoProto::player_game_data() const {
  // @@protoc_insertion_point(field_list:DZNZ.SC_SceneInfoProto.player_game_data)
  return player_game_data_;
}

// -------------------------------------------------------------------

// CMD_SC_BetProto

// int32 chairid = 1;
inline void CMD_SC_BetProto::clear_chairid() {
  chairid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_BetProto::_internal_chairid() const {
  return chairid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_BetProto::chairid() const {
  // @@protoc_insertion_point(field_get:DZNZ.CMD_SC_BetProto.chairid)
  return _internal_chairid();
}
inline void CMD_SC_BetProto::_internal_set_chairid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chairid_ = value;
}
inline void CMD_SC_BetProto::set_chairid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chairid(value);
  // @@protoc_insertion_point(field_set:DZNZ.CMD_SC_BetProto.chairid)
}

// int32 area = 2;
inline void CMD_SC_BetProto::clear_area() {
  area_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_BetProto::_internal_area() const {
  return area_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_BetProto::area() const {
  // @@protoc_insertion_point(field_get:DZNZ.CMD_SC_BetProto.area)
  return _internal_area();
}
inline void CMD_SC_BetProto::_internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  area_ = value;
}
inline void CMD_SC_BetProto::set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:DZNZ.CMD_SC_BetProto.area)
}

// int32 bet_num = 3;
inline void CMD_SC_BetProto::clear_bet_num() {
  bet_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_BetProto::_internal_bet_num() const {
  return bet_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_BetProto::bet_num() const {
  // @@protoc_insertion_point(field_get:DZNZ.CMD_SC_BetProto.bet_num)
  return _internal_bet_num();
}
inline void CMD_SC_BetProto::_internal_set_bet_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bet_num_ = value;
}
inline void CMD_SC_BetProto::set_bet_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bet_num(value);
  // @@protoc_insertion_point(field_set:DZNZ.CMD_SC_BetProto.bet_num)
}

// -------------------------------------------------------------------

// WheelInfoProto

// int32 win_msg = 1;
inline void WheelInfoProto::clear_win_msg() {
  win_msg_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WheelInfoProto::_internal_win_msg() const {
  return win_msg_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WheelInfoProto::win_msg() const {
  // @@protoc_insertion_point(field_get:DZNZ.WheelInfoProto.win_msg)
  return _internal_win_msg();
}
inline void WheelInfoProto::_internal_set_win_msg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  win_msg_ = value;
}
inline void WheelInfoProto::set_win_msg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_win_msg(value);
  // @@protoc_insertion_point(field_set:DZNZ.WheelInfoProto.win_msg)
}

// repeated int32 hand = 2;
inline int WheelInfoProto::_internal_hand_size() const {
  return hand_.size();
}
inline int WheelInfoProto::hand_size() const {
  return _internal_hand_size();
}
inline void WheelInfoProto::clear_hand() {
  hand_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WheelInfoProto::_internal_hand(int index) const {
  return hand_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WheelInfoProto::hand(int index) const {
  // @@protoc_insertion_point(field_get:DZNZ.WheelInfoProto.hand)
  return _internal_hand(index);
}
inline void WheelInfoProto::set_hand(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  hand_.Set(index, value);
  // @@protoc_insertion_point(field_set:DZNZ.WheelInfoProto.hand)
}
inline void WheelInfoProto::_internal_add_hand(::PROTOBUF_NAMESPACE_ID::int32 value) {
  hand_.Add(value);
}
inline void WheelInfoProto::add_hand(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_hand(value);
  // @@protoc_insertion_point(field_add:DZNZ.WheelInfoProto.hand)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
WheelInfoProto::_internal_hand() const {
  return hand_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
WheelInfoProto::hand() const {
  // @@protoc_insertion_point(field_list:DZNZ.WheelInfoProto.hand)
  return _internal_hand();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
WheelInfoProto::_internal_mutable_hand() {
  return &hand_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
WheelInfoProto::mutable_hand() {
  // @@protoc_insertion_point(field_mutable_list:DZNZ.WheelInfoProto.hand)
  return _internal_mutable_hand();
}

// int32 card_type = 3;
inline void WheelInfoProto::clear_card_type() {
  card_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WheelInfoProto::_internal_card_type() const {
  return card_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WheelInfoProto::card_type() const {
  // @@protoc_insertion_point(field_get:DZNZ.WheelInfoProto.card_type)
  return _internal_card_type();
}
inline void WheelInfoProto::_internal_set_card_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  card_type_ = value;
}
inline void WheelInfoProto::set_card_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_card_type(value);
  // @@protoc_insertion_point(field_set:DZNZ.WheelInfoProto.card_type)
}

// -------------------------------------------------------------------

// CMD_SC_GameResultProto

// repeated int32 card_type = 1;
inline int CMD_SC_GameResultProto::_internal_card_type_size() const {
  return card_type_.size();
}
inline int CMD_SC_GameResultProto::card_type_size() const {
  return _internal_card_type_size();
}
inline void CMD_SC_GameResultProto::clear_card_type() {
  card_type_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameResultProto::_internal_card_type(int index) const {
  return card_type_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameResultProto::card_type(int index) const {
  // @@protoc_insertion_point(field_get:DZNZ.CMD_SC_GameResultProto.card_type)
  return _internal_card_type(index);
}
inline void CMD_SC_GameResultProto::set_card_type(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  card_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:DZNZ.CMD_SC_GameResultProto.card_type)
}
inline void CMD_SC_GameResultProto::_internal_add_card_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  card_type_.Add(value);
}
inline void CMD_SC_GameResultProto::add_card_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_card_type(value);
  // @@protoc_insertion_point(field_add:DZNZ.CMD_SC_GameResultProto.card_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMD_SC_GameResultProto::_internal_card_type() const {
  return card_type_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMD_SC_GameResultProto::card_type() const {
  // @@protoc_insertion_point(field_list:DZNZ.CMD_SC_GameResultProto.card_type)
  return _internal_card_type();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMD_SC_GameResultProto::_internal_mutable_card_type() {
  return &card_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMD_SC_GameResultProto::mutable_card_type() {
  // @@protoc_insertion_point(field_mutable_list:DZNZ.CMD_SC_GameResultProto.card_type)
  return _internal_mutable_card_type();
}

// repeated int32 card = 2;
inline int CMD_SC_GameResultProto::_internal_card_size() const {
  return card_.size();
}
inline int CMD_SC_GameResultProto::card_size() const {
  return _internal_card_size();
}
inline void CMD_SC_GameResultProto::clear_card() {
  card_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameResultProto::_internal_card(int index) const {
  return card_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameResultProto::card(int index) const {
  // @@protoc_insertion_point(field_get:DZNZ.CMD_SC_GameResultProto.card)
  return _internal_card(index);
}
inline void CMD_SC_GameResultProto::set_card(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  card_.Set(index, value);
  // @@protoc_insertion_point(field_set:DZNZ.CMD_SC_GameResultProto.card)
}
inline void CMD_SC_GameResultProto::_internal_add_card(::PROTOBUF_NAMESPACE_ID::int32 value) {
  card_.Add(value);
}
inline void CMD_SC_GameResultProto::add_card(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_card(value);
  // @@protoc_insertion_point(field_add:DZNZ.CMD_SC_GameResultProto.card)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMD_SC_GameResultProto::_internal_card() const {
  return card_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMD_SC_GameResultProto::card() const {
  // @@protoc_insertion_point(field_list:DZNZ.CMD_SC_GameResultProto.card)
  return _internal_card();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMD_SC_GameResultProto::_internal_mutable_card() {
  return &card_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMD_SC_GameResultProto::mutable_card() {
  // @@protoc_insertion_point(field_mutable_list:DZNZ.CMD_SC_GameResultProto.card)
  return _internal_mutable_card();
}

// repeated int32 win_card = 3;
inline int CMD_SC_GameResultProto::_internal_win_card_size() const {
  return win_card_.size();
}
inline int CMD_SC_GameResultProto::win_card_size() const {
  return _internal_win_card_size();
}
inline void CMD_SC_GameResultProto::clear_win_card() {
  win_card_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameResultProto::_internal_win_card(int index) const {
  return win_card_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameResultProto::win_card(int index) const {
  // @@protoc_insertion_point(field_get:DZNZ.CMD_SC_GameResultProto.win_card)
  return _internal_win_card(index);
}
inline void CMD_SC_GameResultProto::set_win_card(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  win_card_.Set(index, value);
  // @@protoc_insertion_point(field_set:DZNZ.CMD_SC_GameResultProto.win_card)
}
inline void CMD_SC_GameResultProto::_internal_add_win_card(::PROTOBUF_NAMESPACE_ID::int32 value) {
  win_card_.Add(value);
}
inline void CMD_SC_GameResultProto::add_win_card(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_win_card(value);
  // @@protoc_insertion_point(field_add:DZNZ.CMD_SC_GameResultProto.win_card)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMD_SC_GameResultProto::_internal_win_card() const {
  return win_card_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMD_SC_GameResultProto::win_card() const {
  // @@protoc_insertion_point(field_list:DZNZ.CMD_SC_GameResultProto.win_card)
  return _internal_win_card();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMD_SC_GameResultProto::_internal_mutable_win_card() {
  return &win_card_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMD_SC_GameResultProto::mutable_win_card() {
  // @@protoc_insertion_point(field_mutable_list:DZNZ.CMD_SC_GameResultProto.win_card)
  return _internal_mutable_win_card();
}

// int32 wheel_info_win_msg = 5;
inline void CMD_SC_GameResultProto::clear_wheel_info_win_msg() {
  wheel_info_win_msg_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameResultProto::_internal_wheel_info_win_msg() const {
  return wheel_info_win_msg_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameResultProto::wheel_info_win_msg() const {
  // @@protoc_insertion_point(field_get:DZNZ.CMD_SC_GameResultProto.wheel_info_win_msg)
  return _internal_wheel_info_win_msg();
}
inline void CMD_SC_GameResultProto::_internal_set_wheel_info_win_msg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wheel_info_win_msg_ = value;
}
inline void CMD_SC_GameResultProto::set_wheel_info_win_msg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wheel_info_win_msg(value);
  // @@protoc_insertion_point(field_set:DZNZ.CMD_SC_GameResultProto.wheel_info_win_msg)
}

// repeated int32 wheel_info_hand = 6;
inline int CMD_SC_GameResultProto::_internal_wheel_info_hand_size() const {
  return wheel_info_hand_.size();
}
inline int CMD_SC_GameResultProto::wheel_info_hand_size() const {
  return _internal_wheel_info_hand_size();
}
inline void CMD_SC_GameResultProto::clear_wheel_info_hand() {
  wheel_info_hand_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameResultProto::_internal_wheel_info_hand(int index) const {
  return wheel_info_hand_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameResultProto::wheel_info_hand(int index) const {
  // @@protoc_insertion_point(field_get:DZNZ.CMD_SC_GameResultProto.wheel_info_hand)
  return _internal_wheel_info_hand(index);
}
inline void CMD_SC_GameResultProto::set_wheel_info_hand(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  wheel_info_hand_.Set(index, value);
  // @@protoc_insertion_point(field_set:DZNZ.CMD_SC_GameResultProto.wheel_info_hand)
}
inline void CMD_SC_GameResultProto::_internal_add_wheel_info_hand(::PROTOBUF_NAMESPACE_ID::int32 value) {
  wheel_info_hand_.Add(value);
}
inline void CMD_SC_GameResultProto::add_wheel_info_hand(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_wheel_info_hand(value);
  // @@protoc_insertion_point(field_add:DZNZ.CMD_SC_GameResultProto.wheel_info_hand)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMD_SC_GameResultProto::_internal_wheel_info_hand() const {
  return wheel_info_hand_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMD_SC_GameResultProto::wheel_info_hand() const {
  // @@protoc_insertion_point(field_list:DZNZ.CMD_SC_GameResultProto.wheel_info_hand)
  return _internal_wheel_info_hand();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMD_SC_GameResultProto::_internal_mutable_wheel_info_hand() {
  return &wheel_info_hand_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMD_SC_GameResultProto::mutable_wheel_info_hand() {
  // @@protoc_insertion_point(field_mutable_list:DZNZ.CMD_SC_GameResultProto.wheel_info_hand)
  return _internal_mutable_wheel_info_hand();
}

// int32 wheel_info_card_type = 7;
inline void CMD_SC_GameResultProto::clear_wheel_info_card_type() {
  wheel_info_card_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameResultProto::_internal_wheel_info_card_type() const {
  return wheel_info_card_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameResultProto::wheel_info_card_type() const {
  // @@protoc_insertion_point(field_get:DZNZ.CMD_SC_GameResultProto.wheel_info_card_type)
  return _internal_wheel_info_card_type();
}
inline void CMD_SC_GameResultProto::_internal_set_wheel_info_card_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wheel_info_card_type_ = value;
}
inline void CMD_SC_GameResultProto::set_wheel_info_card_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wheel_info_card_type(value);
  // @@protoc_insertion_point(field_set:DZNZ.CMD_SC_GameResultProto.wheel_info_card_type)
}

// repeated int64 win_msg = 8;
inline int CMD_SC_GameResultProto::_internal_win_msg_size() const {
  return win_msg_.size();
}
inline int CMD_SC_GameResultProto::win_msg_size() const {
  return _internal_win_msg_size();
}
inline void CMD_SC_GameResultProto::clear_win_msg() {
  win_msg_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CMD_SC_GameResultProto::_internal_win_msg(int index) const {
  return win_msg_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CMD_SC_GameResultProto::win_msg(int index) const {
  // @@protoc_insertion_point(field_get:DZNZ.CMD_SC_GameResultProto.win_msg)
  return _internal_win_msg(index);
}
inline void CMD_SC_GameResultProto::set_win_msg(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  win_msg_.Set(index, value);
  // @@protoc_insertion_point(field_set:DZNZ.CMD_SC_GameResultProto.win_msg)
}
inline void CMD_SC_GameResultProto::_internal_add_win_msg(::PROTOBUF_NAMESPACE_ID::int64 value) {
  win_msg_.Add(value);
}
inline void CMD_SC_GameResultProto::add_win_msg(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_win_msg(value);
  // @@protoc_insertion_point(field_add:DZNZ.CMD_SC_GameResultProto.win_msg)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
CMD_SC_GameResultProto::_internal_win_msg() const {
  return win_msg_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
CMD_SC_GameResultProto::win_msg() const {
  // @@protoc_insertion_point(field_list:DZNZ.CMD_SC_GameResultProto.win_msg)
  return _internal_win_msg();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
CMD_SC_GameResultProto::_internal_mutable_win_msg() {
  return &win_msg_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
CMD_SC_GameResultProto::mutable_win_msg() {
  // @@protoc_insertion_point(field_mutable_list:DZNZ.CMD_SC_GameResultProto.win_msg)
  return _internal_mutable_win_msg();
}

// repeated int64 user_gold = 9;
inline int CMD_SC_GameResultProto::_internal_user_gold_size() const {
  return user_gold_.size();
}
inline int CMD_SC_GameResultProto::user_gold_size() const {
  return _internal_user_gold_size();
}
inline void CMD_SC_GameResultProto::clear_user_gold() {
  user_gold_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CMD_SC_GameResultProto::_internal_user_gold(int index) const {
  return user_gold_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CMD_SC_GameResultProto::user_gold(int index) const {
  // @@protoc_insertion_point(field_get:DZNZ.CMD_SC_GameResultProto.user_gold)
  return _internal_user_gold(index);
}
inline void CMD_SC_GameResultProto::set_user_gold(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  user_gold_.Set(index, value);
  // @@protoc_insertion_point(field_set:DZNZ.CMD_SC_GameResultProto.user_gold)
}
inline void CMD_SC_GameResultProto::_internal_add_user_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  user_gold_.Add(value);
}
inline void CMD_SC_GameResultProto::add_user_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_user_gold(value);
  // @@protoc_insertion_point(field_add:DZNZ.CMD_SC_GameResultProto.user_gold)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
CMD_SC_GameResultProto::_internal_user_gold() const {
  return user_gold_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
CMD_SC_GameResultProto::user_gold() const {
  // @@protoc_insertion_point(field_list:DZNZ.CMD_SC_GameResultProto.user_gold)
  return _internal_user_gold();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
CMD_SC_GameResultProto::_internal_mutable_user_gold() {
  return &user_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
CMD_SC_GameResultProto::mutable_user_gold() {
  // @@protoc_insertion_point(field_mutable_list:DZNZ.CMD_SC_GameResultProto.user_gold)
  return _internal_mutable_user_gold();
}

// -------------------------------------------------------------------

// CMD_SC_BetAgainProto

// int32 chairid = 1;
inline void CMD_SC_BetAgainProto::clear_chairid() {
  chairid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_BetAgainProto::_internal_chairid() const {
  return chairid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_BetAgainProto::chairid() const {
  // @@protoc_insertion_point(field_get:DZNZ.CMD_SC_BetAgainProto.chairid)
  return _internal_chairid();
}
inline void CMD_SC_BetAgainProto::_internal_set_chairid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chairid_ = value;
}
inline void CMD_SC_BetAgainProto::set_chairid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chairid(value);
  // @@protoc_insertion_point(field_set:DZNZ.CMD_SC_BetAgainProto.chairid)
}

// int32 area = 2;
inline void CMD_SC_BetAgainProto::clear_area() {
  area_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_BetAgainProto::_internal_area() const {
  return area_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_BetAgainProto::area() const {
  // @@protoc_insertion_point(field_get:DZNZ.CMD_SC_BetAgainProto.area)
  return _internal_area();
}
inline void CMD_SC_BetAgainProto::_internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  area_ = value;
}
inline void CMD_SC_BetAgainProto::set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:DZNZ.CMD_SC_BetAgainProto.area)
}

// int32 bet_num = 3;
inline void CMD_SC_BetAgainProto::clear_bet_num() {
  bet_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_BetAgainProto::_internal_bet_num() const {
  return bet_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_BetAgainProto::bet_num() const {
  // @@protoc_insertion_point(field_get:DZNZ.CMD_SC_BetAgainProto.bet_num)
  return _internal_bet_num();
}
inline void CMD_SC_BetAgainProto::_internal_set_bet_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bet_num_ = value;
}
inline void CMD_SC_BetAgainProto::set_bet_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bet_num(value);
  // @@protoc_insertion_point(field_set:DZNZ.CMD_SC_BetAgainProto.bet_num)
}

// int32 bet_count = 4;
inline void CMD_SC_BetAgainProto::clear_bet_count() {
  bet_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_BetAgainProto::_internal_bet_count() const {
  return bet_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_BetAgainProto::bet_count() const {
  // @@protoc_insertion_point(field_get:DZNZ.CMD_SC_BetAgainProto.bet_count)
  return _internal_bet_count();
}
inline void CMD_SC_BetAgainProto::_internal_set_bet_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bet_count_ = value;
}
inline void CMD_SC_BetAgainProto::set_bet_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bet_count(value);
  // @@protoc_insertion_point(field_set:DZNZ.CMD_SC_BetAgainProto.bet_count)
}

// -------------------------------------------------------------------

// CMD_SC_NotifyStatusProto

// int32 game_state = 1;
inline void CMD_SC_NotifyStatusProto::clear_game_state() {
  game_state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_NotifyStatusProto::_internal_game_state() const {
  return game_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_NotifyStatusProto::game_state() const {
  // @@protoc_insertion_point(field_get:DZNZ.CMD_SC_NotifyStatusProto.game_state)
  return _internal_game_state();
}
inline void CMD_SC_NotifyStatusProto::_internal_set_game_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_state_ = value;
}
inline void CMD_SC_NotifyStatusProto::set_game_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_state(value);
  // @@protoc_insertion_point(field_set:DZNZ.CMD_SC_NotifyStatusProto.game_state)
}

// int32 time = 2;
inline void CMD_SC_NotifyStatusProto::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_NotifyStatusProto::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_NotifyStatusProto::time() const {
  // @@protoc_insertion_point(field_get:DZNZ.CMD_SC_NotifyStatusProto.time)
  return _internal_time();
}
inline void CMD_SC_NotifyStatusProto::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void CMD_SC_NotifyStatusProto::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:DZNZ.CMD_SC_NotifyStatusProto.time)
}

// -------------------------------------------------------------------

// CMD_CS_Bet

// int32 area = 1;
inline void CMD_CS_Bet::clear_area() {
  area_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_CS_Bet::_internal_area() const {
  return area_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_CS_Bet::area() const {
  // @@protoc_insertion_point(field_get:DZNZ.CMD_CS_Bet.area)
  return _internal_area();
}
inline void CMD_CS_Bet::_internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  area_ = value;
}
inline void CMD_CS_Bet::set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:DZNZ.CMD_CS_Bet.area)
}

// int32 bet_num = 2;
inline void CMD_CS_Bet::clear_bet_num() {
  bet_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_CS_Bet::_internal_bet_num() const {
  return bet_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_CS_Bet::bet_num() const {
  // @@protoc_insertion_point(field_get:DZNZ.CMD_CS_Bet.bet_num)
  return _internal_bet_num();
}
inline void CMD_CS_Bet::_internal_set_bet_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bet_num_ = value;
}
inline void CMD_CS_Bet::set_bet_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bet_num(value);
  // @@protoc_insertion_point(field_set:DZNZ.CMD_CS_Bet.bet_num)
}

// -------------------------------------------------------------------

// CMD_CS_BetAgain

// int32 area = 1;
inline void CMD_CS_BetAgain::clear_area() {
  area_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_CS_BetAgain::_internal_area() const {
  return area_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_CS_BetAgain::area() const {
  // @@protoc_insertion_point(field_get:DZNZ.CMD_CS_BetAgain.area)
  return _internal_area();
}
inline void CMD_CS_BetAgain::_internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  area_ = value;
}
inline void CMD_CS_BetAgain::set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:DZNZ.CMD_CS_BetAgain.area)
}

// int32 bet_num = 2;
inline void CMD_CS_BetAgain::clear_bet_num() {
  bet_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_CS_BetAgain::_internal_bet_num() const {
  return bet_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_CS_BetAgain::bet_num() const {
  // @@protoc_insertion_point(field_get:DZNZ.CMD_CS_BetAgain.bet_num)
  return _internal_bet_num();
}
inline void CMD_CS_BetAgain::_internal_set_bet_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bet_num_ = value;
}
inline void CMD_CS_BetAgain::set_bet_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bet_num(value);
  // @@protoc_insertion_point(field_set:DZNZ.CMD_CS_BetAgain.bet_num)
}

// int32 bet_count = 3;
inline void CMD_CS_BetAgain::clear_bet_count() {
  bet_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_CS_BetAgain::_internal_bet_count() const {
  return bet_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_CS_BetAgain::bet_count() const {
  // @@protoc_insertion_point(field_get:DZNZ.CMD_CS_BetAgain.bet_count)
  return _internal_bet_count();
}
inline void CMD_CS_BetAgain::_internal_set_bet_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bet_count_ = value;
}
inline void CMD_CS_BetAgain::set_bet_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bet_count(value);
  // @@protoc_insertion_point(field_set:DZNZ.CMD_CS_BetAgain.bet_count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DZNZ

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::DZNZ::EMsgIDDZNZ> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DZNZ::EMsgIDDZNZ>() {
  return ::DZNZ::EMsgIDDZNZ_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DZNZ_2eproto
