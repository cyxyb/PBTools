// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Game.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Game_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Game_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Game_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Game_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[24]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Game_2eproto;
class MsgDayData;
class MsgDayDataDefaultTypeInternal;
extern MsgDayDataDefaultTypeInternal _MsgDayData_default_instance_;
class MsgGamePlayerInfo;
class MsgGamePlayerInfoDefaultTypeInternal;
extern MsgGamePlayerInfoDefaultTypeInternal _MsgGamePlayerInfo_default_instance_;
class MsgGamePlayerLogin;
class MsgGamePlayerLoginDefaultTypeInternal;
extern MsgGamePlayerLoginDefaultTypeInternal _MsgGamePlayerLogin_default_instance_;
class MsgGamePlayerLoginResp;
class MsgGamePlayerLoginRespDefaultTypeInternal;
extern MsgGamePlayerLoginRespDefaultTypeInternal _MsgGamePlayerLoginResp_default_instance_;
class MsgJackpotInfo;
class MsgJackpotInfoDefaultTypeInternal;
extern MsgJackpotInfoDefaultTypeInternal _MsgJackpotInfo_default_instance_;
class MsgPvpActivateTableResp;
class MsgPvpActivateTableRespDefaultTypeInternal;
extern MsgPvpActivateTableRespDefaultTypeInternal _MsgPvpActivateTableResp_default_instance_;
class MsgPvpCreateTable;
class MsgPvpCreateTableDefaultTypeInternal;
extern MsgPvpCreateTableDefaultTypeInternal _MsgPvpCreateTable_default_instance_;
class MsgPvpCreateTableResp;
class MsgPvpCreateTableRespDefaultTypeInternal;
extern MsgPvpCreateTableRespDefaultTypeInternal _MsgPvpCreateTableResp_default_instance_;
class MsgPvpDestroyTableResp;
class MsgPvpDestroyTableRespDefaultTypeInternal;
extern MsgPvpDestroyTableRespDefaultTypeInternal _MsgPvpDestroyTableResp_default_instance_;
class MsgPvpJoinTable;
class MsgPvpJoinTableDefaultTypeInternal;
extern MsgPvpJoinTableDefaultTypeInternal _MsgPvpJoinTable_default_instance_;
class MsgPvpJoinTableResp;
class MsgPvpJoinTableRespDefaultTypeInternal;
extern MsgPvpJoinTableRespDefaultTypeInternal _MsgPvpJoinTableResp_default_instance_;
class MsgPvpKickUserResp;
class MsgPvpKickUserRespDefaultTypeInternal;
extern MsgPvpKickUserRespDefaultTypeInternal _MsgPvpKickUserResp_default_instance_;
class MsgPvpRoomCfgItem;
class MsgPvpRoomCfgItemDefaultTypeInternal;
extern MsgPvpRoomCfgItemDefaultTypeInternal _MsgPvpRoomCfgItem_default_instance_;
class MsgPvpRoomConfig;
class MsgPvpRoomConfigDefaultTypeInternal;
extern MsgPvpRoomConfigDefaultTypeInternal _MsgPvpRoomConfig_default_instance_;
class MsgPvpStandUpTableResp;
class MsgPvpStandUpTableRespDefaultTypeInternal;
extern MsgPvpStandUpTableRespDefaultTypeInternal _MsgPvpStandUpTableResp_default_instance_;
class MsgPvpTableChangeOwnerResp;
class MsgPvpTableChangeOwnerRespDefaultTypeInternal;
extern MsgPvpTableChangeOwnerRespDefaultTypeInternal _MsgPvpTableChangeOwnerResp_default_instance_;
class MsgPvpTableInfo;
class MsgPvpTableInfoDefaultTypeInternal;
extern MsgPvpTableInfoDefaultTypeInternal _MsgPvpTableInfo_default_instance_;
class MsgPvpTableList;
class MsgPvpTableListDefaultTypeInternal;
extern MsgPvpTableListDefaultTypeInternal _MsgPvpTableList_default_instance_;
class MsgPvpTableRoundChangeResp;
class MsgPvpTableRoundChangeRespDefaultTypeInternal;
extern MsgPvpTableRoundChangeRespDefaultTypeInternal _MsgPvpTableRoundChangeResp_default_instance_;
class MsgQueryRecord;
class MsgQueryRecordDefaultTypeInternal;
extern MsgQueryRecordDefaultTypeInternal _MsgQueryRecord_default_instance_;
class MsgRoundData;
class MsgRoundDataDefaultTypeInternal;
extern MsgRoundDataDefaultTypeInternal _MsgRoundData_default_instance_;
class MsgSyncPlayersScore;
class MsgSyncPlayersScoreDefaultTypeInternal;
extern MsgSyncPlayersScoreDefaultTypeInternal _MsgSyncPlayersScore_default_instance_;
class MsgTotalDayData;
class MsgTotalDayDataDefaultTypeInternal;
extern MsgTotalDayDataDefaultTypeInternal _MsgTotalDayData_default_instance_;
class MsgTotalRoundData;
class MsgTotalRoundDataDefaultTypeInternal;
extern MsgTotalRoundDataDefaultTypeInternal _MsgTotalRoundData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::MsgDayData* Arena::CreateMaybeMessage<::MsgDayData>(Arena*);
template<> ::MsgGamePlayerInfo* Arena::CreateMaybeMessage<::MsgGamePlayerInfo>(Arena*);
template<> ::MsgGamePlayerLogin* Arena::CreateMaybeMessage<::MsgGamePlayerLogin>(Arena*);
template<> ::MsgGamePlayerLoginResp* Arena::CreateMaybeMessage<::MsgGamePlayerLoginResp>(Arena*);
template<> ::MsgJackpotInfo* Arena::CreateMaybeMessage<::MsgJackpotInfo>(Arena*);
template<> ::MsgPvpActivateTableResp* Arena::CreateMaybeMessage<::MsgPvpActivateTableResp>(Arena*);
template<> ::MsgPvpCreateTable* Arena::CreateMaybeMessage<::MsgPvpCreateTable>(Arena*);
template<> ::MsgPvpCreateTableResp* Arena::CreateMaybeMessage<::MsgPvpCreateTableResp>(Arena*);
template<> ::MsgPvpDestroyTableResp* Arena::CreateMaybeMessage<::MsgPvpDestroyTableResp>(Arena*);
template<> ::MsgPvpJoinTable* Arena::CreateMaybeMessage<::MsgPvpJoinTable>(Arena*);
template<> ::MsgPvpJoinTableResp* Arena::CreateMaybeMessage<::MsgPvpJoinTableResp>(Arena*);
template<> ::MsgPvpKickUserResp* Arena::CreateMaybeMessage<::MsgPvpKickUserResp>(Arena*);
template<> ::MsgPvpRoomCfgItem* Arena::CreateMaybeMessage<::MsgPvpRoomCfgItem>(Arena*);
template<> ::MsgPvpRoomConfig* Arena::CreateMaybeMessage<::MsgPvpRoomConfig>(Arena*);
template<> ::MsgPvpStandUpTableResp* Arena::CreateMaybeMessage<::MsgPvpStandUpTableResp>(Arena*);
template<> ::MsgPvpTableChangeOwnerResp* Arena::CreateMaybeMessage<::MsgPvpTableChangeOwnerResp>(Arena*);
template<> ::MsgPvpTableInfo* Arena::CreateMaybeMessage<::MsgPvpTableInfo>(Arena*);
template<> ::MsgPvpTableList* Arena::CreateMaybeMessage<::MsgPvpTableList>(Arena*);
template<> ::MsgPvpTableRoundChangeResp* Arena::CreateMaybeMessage<::MsgPvpTableRoundChangeResp>(Arena*);
template<> ::MsgQueryRecord* Arena::CreateMaybeMessage<::MsgQueryRecord>(Arena*);
template<> ::MsgRoundData* Arena::CreateMaybeMessage<::MsgRoundData>(Arena*);
template<> ::MsgSyncPlayersScore* Arena::CreateMaybeMessage<::MsgSyncPlayersScore>(Arena*);
template<> ::MsgTotalDayData* Arena::CreateMaybeMessage<::MsgTotalDayData>(Arena*);
template<> ::MsgTotalRoundData* Arena::CreateMaybeMessage<::MsgTotalRoundData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class MsgGamePlayerLogin PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgGamePlayerLogin) */ {
 public:
  inline MsgGamePlayerLogin() : MsgGamePlayerLogin(nullptr) {}
  virtual ~MsgGamePlayerLogin();

  MsgGamePlayerLogin(const MsgGamePlayerLogin& from);
  MsgGamePlayerLogin(MsgGamePlayerLogin&& from) noexcept
    : MsgGamePlayerLogin() {
    *this = ::std::move(from);
  }

  inline MsgGamePlayerLogin& operator=(const MsgGamePlayerLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgGamePlayerLogin& operator=(MsgGamePlayerLogin&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgGamePlayerLogin& default_instance();

  static inline const MsgGamePlayerLogin* internal_default_instance() {
    return reinterpret_cast<const MsgGamePlayerLogin*>(
               &_MsgGamePlayerLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgGamePlayerLogin& a, MsgGamePlayerLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgGamePlayerLogin* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgGamePlayerLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgGamePlayerLogin* New() const final {
    return CreateMaybeMessage<MsgGamePlayerLogin>(nullptr);
  }

  MsgGamePlayerLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgGamePlayerLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgGamePlayerLogin& from);
  void MergeFrom(const MsgGamePlayerLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgGamePlayerLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgGamePlayerLogin";
  }
  protected:
  explicit MsgGamePlayerLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 2,
    kIpInfoFieldNumber = 3,
    kLongitudeFieldNumber = 4,
    kLatitudeFieldNumber = 5,
    kUserIdFieldNumber = 1,
  };
  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string ip_info = 3;
  void clear_ip_info();
  const std::string& ip_info() const;
  void set_ip_info(const std::string& value);
  void set_ip_info(std::string&& value);
  void set_ip_info(const char* value);
  void set_ip_info(const char* value, size_t size);
  std::string* mutable_ip_info();
  std::string* release_ip_info();
  void set_allocated_ip_info(std::string* ip_info);
  private:
  const std::string& _internal_ip_info() const;
  void _internal_set_ip_info(const std::string& value);
  std::string* _internal_mutable_ip_info();
  public:

  // string longitude = 4;
  void clear_longitude();
  const std::string& longitude() const;
  void set_longitude(const std::string& value);
  void set_longitude(std::string&& value);
  void set_longitude(const char* value);
  void set_longitude(const char* value, size_t size);
  std::string* mutable_longitude();
  std::string* release_longitude();
  void set_allocated_longitude(std::string* longitude);
  private:
  const std::string& _internal_longitude() const;
  void _internal_set_longitude(const std::string& value);
  std::string* _internal_mutable_longitude();
  public:

  // string latitude = 5;
  void clear_latitude();
  const std::string& latitude() const;
  void set_latitude(const std::string& value);
  void set_latitude(std::string&& value);
  void set_latitude(const char* value);
  void set_latitude(const char* value, size_t size);
  std::string* mutable_latitude();
  std::string* release_latitude();
  void set_allocated_latitude(std::string* latitude);
  private:
  const std::string& _internal_latitude() const;
  void _internal_set_latitude(const std::string& value);
  std::string* _internal_mutable_latitude();
  public:

  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgGamePlayerLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr longitude_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr latitude_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// -------------------------------------------------------------------

class MsgGamePlayerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgGamePlayerInfo) */ {
 public:
  inline MsgGamePlayerInfo() : MsgGamePlayerInfo(nullptr) {}
  virtual ~MsgGamePlayerInfo();

  MsgGamePlayerInfo(const MsgGamePlayerInfo& from);
  MsgGamePlayerInfo(MsgGamePlayerInfo&& from) noexcept
    : MsgGamePlayerInfo() {
    *this = ::std::move(from);
  }

  inline MsgGamePlayerInfo& operator=(const MsgGamePlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgGamePlayerInfo& operator=(MsgGamePlayerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgGamePlayerInfo& default_instance();

  static inline const MsgGamePlayerInfo* internal_default_instance() {
    return reinterpret_cast<const MsgGamePlayerInfo*>(
               &_MsgGamePlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgGamePlayerInfo& a, MsgGamePlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgGamePlayerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgGamePlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgGamePlayerInfo* New() const final {
    return CreateMaybeMessage<MsgGamePlayerInfo>(nullptr);
  }

  MsgGamePlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgGamePlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgGamePlayerInfo& from);
  void MergeFrom(const MsgGamePlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgGamePlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgGamePlayerInfo";
  }
  protected:
  explicit MsgGamePlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 3,
    kAvatarFieldNumber = 4,
    kIpInfoFieldNumber = 10,
    kLongitudeFieldNumber = 11,
    kLatitudeFieldNumber = 12,
    kUserIdFieldNumber = 1,
    kBeautifulIdFieldNumber = 2,
    kCoinFieldNumber = 5,
    kTableIdFieldNumber = 6,
    kChairIdFieldNumber = 7,
    kVipLevelFieldNumber = 8,
    kAvatarFrameFieldNumber = 9,
  };
  // string nickname = 3;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string avatar = 4;
  void clear_avatar();
  const std::string& avatar() const;
  void set_avatar(const std::string& value);
  void set_avatar(std::string&& value);
  void set_avatar(const char* value);
  void set_avatar(const char* value, size_t size);
  std::string* mutable_avatar();
  std::string* release_avatar();
  void set_allocated_avatar(std::string* avatar);
  private:
  const std::string& _internal_avatar() const;
  void _internal_set_avatar(const std::string& value);
  std::string* _internal_mutable_avatar();
  public:

  // string ip_info = 10;
  void clear_ip_info();
  const std::string& ip_info() const;
  void set_ip_info(const std::string& value);
  void set_ip_info(std::string&& value);
  void set_ip_info(const char* value);
  void set_ip_info(const char* value, size_t size);
  std::string* mutable_ip_info();
  std::string* release_ip_info();
  void set_allocated_ip_info(std::string* ip_info);
  private:
  const std::string& _internal_ip_info() const;
  void _internal_set_ip_info(const std::string& value);
  std::string* _internal_mutable_ip_info();
  public:

  // string longitude = 11;
  void clear_longitude();
  const std::string& longitude() const;
  void set_longitude(const std::string& value);
  void set_longitude(std::string&& value);
  void set_longitude(const char* value);
  void set_longitude(const char* value, size_t size);
  std::string* mutable_longitude();
  std::string* release_longitude();
  void set_allocated_longitude(std::string* longitude);
  private:
  const std::string& _internal_longitude() const;
  void _internal_set_longitude(const std::string& value);
  std::string* _internal_mutable_longitude();
  public:

  // string latitude = 12;
  void clear_latitude();
  const std::string& latitude() const;
  void set_latitude(const std::string& value);
  void set_latitude(std::string&& value);
  void set_latitude(const char* value);
  void set_latitude(const char* value, size_t size);
  std::string* mutable_latitude();
  std::string* release_latitude();
  void set_allocated_latitude(std::string* latitude);
  private:
  const std::string& _internal_latitude() const;
  void _internal_set_latitude(const std::string& value);
  std::string* _internal_mutable_latitude();
  public:

  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 beautiful_id = 2;
  void clear_beautiful_id();
  ::PROTOBUF_NAMESPACE_ID::int32 beautiful_id() const;
  void set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_beautiful_id() const;
  void _internal_set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 coin = 5;
  void clear_coin();
  ::PROTOBUF_NAMESPACE_ID::uint64 coin() const;
  void set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coin() const;
  void _internal_set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 table_id = 6;
  void clear_table_id();
  ::PROTOBUF_NAMESPACE_ID::int32 table_id() const;
  void set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_table_id() const;
  void _internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 chair_id = 7;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vip_level = 8;
  void clear_vip_level();
  ::PROTOBUF_NAMESPACE_ID::int32 vip_level() const;
  void set_vip_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vip_level() const;
  void _internal_set_vip_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 avatar_frame = 9;
  void clear_avatar_frame();
  ::PROTOBUF_NAMESPACE_ID::int32 avatar_frame() const;
  void set_avatar_frame(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avatar_frame() const;
  void _internal_set_avatar_frame(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgGamePlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr longitude_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr latitude_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 beautiful_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 coin_;
  ::PROTOBUF_NAMESPACE_ID::int32 table_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 vip_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 avatar_frame_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// -------------------------------------------------------------------

class MsgGamePlayerLoginResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgGamePlayerLoginResp) */ {
 public:
  inline MsgGamePlayerLoginResp() : MsgGamePlayerLoginResp(nullptr) {}
  virtual ~MsgGamePlayerLoginResp();

  MsgGamePlayerLoginResp(const MsgGamePlayerLoginResp& from);
  MsgGamePlayerLoginResp(MsgGamePlayerLoginResp&& from) noexcept
    : MsgGamePlayerLoginResp() {
    *this = ::std::move(from);
  }

  inline MsgGamePlayerLoginResp& operator=(const MsgGamePlayerLoginResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgGamePlayerLoginResp& operator=(MsgGamePlayerLoginResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgGamePlayerLoginResp& default_instance();

  static inline const MsgGamePlayerLoginResp* internal_default_instance() {
    return reinterpret_cast<const MsgGamePlayerLoginResp*>(
               &_MsgGamePlayerLoginResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MsgGamePlayerLoginResp& a, MsgGamePlayerLoginResp& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgGamePlayerLoginResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgGamePlayerLoginResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgGamePlayerLoginResp* New() const final {
    return CreateMaybeMessage<MsgGamePlayerLoginResp>(nullptr);
  }

  MsgGamePlayerLoginResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgGamePlayerLoginResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgGamePlayerLoginResp& from);
  void MergeFrom(const MsgGamePlayerLoginResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgGamePlayerLoginResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgGamePlayerLoginResp";
  }
  protected:
  explicit MsgGamePlayerLoginResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 4,
    kAvatarFieldNumber = 5,
    kResCodeFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kCoinFieldNumber = 6,
    kBeautifulIdFieldNumber = 3,
  };
  // string nickname = 4;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string avatar = 5;
  void clear_avatar();
  const std::string& avatar() const;
  void set_avatar(const std::string& value);
  void set_avatar(std::string&& value);
  void set_avatar(const char* value);
  void set_avatar(const char* value, size_t size);
  std::string* mutable_avatar();
  std::string* release_avatar();
  void set_allocated_avatar(std::string* avatar);
  private:
  const std::string& _internal_avatar() const;
  void _internal_set_avatar(const std::string& value);
  std::string* _internal_mutable_avatar();
  public:

  // int32 res_code = 1;
  void clear_res_code();
  ::PROTOBUF_NAMESPACE_ID::int32 res_code() const;
  void set_res_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_res_code() const;
  void _internal_set_res_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 coin = 6;
  void clear_coin();
  ::PROTOBUF_NAMESPACE_ID::uint64 coin() const;
  void set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coin() const;
  void _internal_set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 beautiful_id = 3;
  void clear_beautiful_id();
  ::PROTOBUF_NAMESPACE_ID::int32 beautiful_id() const;
  void set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_beautiful_id() const;
  void _internal_set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgGamePlayerLoginResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
  ::PROTOBUF_NAMESPACE_ID::int32 res_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 coin_;
  ::PROTOBUF_NAMESPACE_ID::int32 beautiful_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// -------------------------------------------------------------------

class MsgSyncPlayersScore PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgSyncPlayersScore) */ {
 public:
  inline MsgSyncPlayersScore() : MsgSyncPlayersScore(nullptr) {}
  virtual ~MsgSyncPlayersScore();

  MsgSyncPlayersScore(const MsgSyncPlayersScore& from);
  MsgSyncPlayersScore(MsgSyncPlayersScore&& from) noexcept
    : MsgSyncPlayersScore() {
    *this = ::std::move(from);
  }

  inline MsgSyncPlayersScore& operator=(const MsgSyncPlayersScore& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSyncPlayersScore& operator=(MsgSyncPlayersScore&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgSyncPlayersScore& default_instance();

  static inline const MsgSyncPlayersScore* internal_default_instance() {
    return reinterpret_cast<const MsgSyncPlayersScore*>(
               &_MsgSyncPlayersScore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MsgSyncPlayersScore& a, MsgSyncPlayersScore& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSyncPlayersScore* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSyncPlayersScore* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgSyncPlayersScore* New() const final {
    return CreateMaybeMessage<MsgSyncPlayersScore>(nullptr);
  }

  MsgSyncPlayersScore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgSyncPlayersScore>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgSyncPlayersScore& from);
  void MergeFrom(const MsgSyncPlayersScore& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgSyncPlayersScore* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgSyncPlayersScore";
  }
  protected:
  explicit MsgSyncPlayersScore(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoinFieldNumber = 2,
    kChairIdFieldNumber = 1,
  };
  // uint64 coin = 2;
  void clear_coin();
  ::PROTOBUF_NAMESPACE_ID::uint64 coin() const;
  void set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coin() const;
  void _internal_set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 chair_id = 1;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgSyncPlayersScore)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 coin_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// -------------------------------------------------------------------

class MsgRoundData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgRoundData) */ {
 public:
  inline MsgRoundData() : MsgRoundData(nullptr) {}
  virtual ~MsgRoundData();

  MsgRoundData(const MsgRoundData& from);
  MsgRoundData(MsgRoundData&& from) noexcept
    : MsgRoundData() {
    *this = ::std::move(from);
  }

  inline MsgRoundData& operator=(const MsgRoundData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgRoundData& operator=(MsgRoundData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgRoundData& default_instance();

  static inline const MsgRoundData* internal_default_instance() {
    return reinterpret_cast<const MsgRoundData*>(
               &_MsgRoundData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MsgRoundData& a, MsgRoundData& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgRoundData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgRoundData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgRoundData* New() const final {
    return CreateMaybeMessage<MsgRoundData>(nullptr);
  }

  MsgRoundData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgRoundData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgRoundData& from);
  void MergeFrom(const MsgRoundData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgRoundData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgRoundData";
  }
  protected:
  explicit MsgRoundData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kWinUserIdFieldNumber = 2,
    kGoldFieldNumber = 4,
    kLoseUserIdFieldNumber = 3,
  };
  // int32 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 win_user_id = 2;
  void clear_win_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 win_user_id() const;
  void set_win_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_win_user_id() const;
  void _internal_set_win_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 gold = 4;
  void clear_gold();
  ::PROTOBUF_NAMESPACE_ID::int64 gold() const;
  void set_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gold() const;
  void _internal_set_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 lose_user_id = 3;
  void clear_lose_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 lose_user_id() const;
  void set_lose_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lose_user_id() const;
  void _internal_set_lose_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgRoundData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 win_user_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 gold_;
  ::PROTOBUF_NAMESPACE_ID::int32 lose_user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// -------------------------------------------------------------------

class MsgTotalRoundData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgTotalRoundData) */ {
 public:
  inline MsgTotalRoundData() : MsgTotalRoundData(nullptr) {}
  virtual ~MsgTotalRoundData();

  MsgTotalRoundData(const MsgTotalRoundData& from);
  MsgTotalRoundData(MsgTotalRoundData&& from) noexcept
    : MsgTotalRoundData() {
    *this = ::std::move(from);
  }

  inline MsgTotalRoundData& operator=(const MsgTotalRoundData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgTotalRoundData& operator=(MsgTotalRoundData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgTotalRoundData& default_instance();

  static inline const MsgTotalRoundData* internal_default_instance() {
    return reinterpret_cast<const MsgTotalRoundData*>(
               &_MsgTotalRoundData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MsgTotalRoundData& a, MsgTotalRoundData& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgTotalRoundData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgTotalRoundData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgTotalRoundData* New() const final {
    return CreateMaybeMessage<MsgTotalRoundData>(nullptr);
  }

  MsgTotalRoundData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgTotalRoundData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgTotalRoundData& from);
  void MergeFrom(const MsgTotalRoundData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgTotalRoundData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgTotalRoundData";
  }
  protected:
  explicit MsgTotalRoundData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoundDataFieldNumber = 2,
    kTotalNumFieldNumber = 1,
  };
  // repeated .MsgRoundData round_data = 2;
  int round_data_size() const;
  private:
  int _internal_round_data_size() const;
  public:
  void clear_round_data();
  ::MsgRoundData* mutable_round_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MsgRoundData >*
      mutable_round_data();
  private:
  const ::MsgRoundData& _internal_round_data(int index) const;
  ::MsgRoundData* _internal_add_round_data();
  public:
  const ::MsgRoundData& round_data(int index) const;
  ::MsgRoundData* add_round_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MsgRoundData >&
      round_data() const;

  // int32 total_num = 1;
  void clear_total_num();
  ::PROTOBUF_NAMESPACE_ID::int32 total_num() const;
  void set_total_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_num() const;
  void _internal_set_total_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgTotalRoundData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MsgRoundData > round_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// -------------------------------------------------------------------

class MsgDayData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgDayData) */ {
 public:
  inline MsgDayData() : MsgDayData(nullptr) {}
  virtual ~MsgDayData();

  MsgDayData(const MsgDayData& from);
  MsgDayData(MsgDayData&& from) noexcept
    : MsgDayData() {
    *this = ::std::move(from);
  }

  inline MsgDayData& operator=(const MsgDayData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgDayData& operator=(MsgDayData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgDayData& default_instance();

  static inline const MsgDayData* internal_default_instance() {
    return reinterpret_cast<const MsgDayData*>(
               &_MsgDayData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MsgDayData& a, MsgDayData& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgDayData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgDayData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgDayData* New() const final {
    return CreateMaybeMessage<MsgDayData>(nullptr);
  }

  MsgDayData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgDayData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgDayData& from);
  void MergeFrom(const MsgDayData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgDayData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgDayData";
  }
  protected:
  explicit MsgDayData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kTotalPlayCountFieldNumber = 2,
    kLoseCountFieldNumber = 3,
    kLoseGoldFieldNumber = 4,
    kWinGoldFieldNumber = 6,
    kTotalGoldFieldNumber = 7,
    kSurplusGoldFieldNumber = 8,
    kWinCountFieldNumber = 5,
  };
  // string time = 1;
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // int32 total_play_count = 2;
  void clear_total_play_count();
  ::PROTOBUF_NAMESPACE_ID::int32 total_play_count() const;
  void set_total_play_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_play_count() const;
  void _internal_set_total_play_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lose_count = 3;
  void clear_lose_count();
  ::PROTOBUF_NAMESPACE_ID::int32 lose_count() const;
  void set_lose_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lose_count() const;
  void _internal_set_lose_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 lose_gold = 4;
  void clear_lose_gold();
  ::PROTOBUF_NAMESPACE_ID::int64 lose_gold() const;
  void set_lose_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lose_gold() const;
  void _internal_set_lose_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 win_gold = 6;
  void clear_win_gold();
  ::PROTOBUF_NAMESPACE_ID::int64 win_gold() const;
  void set_win_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_win_gold() const;
  void _internal_set_win_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 total_gold = 7;
  void clear_total_gold();
  ::PROTOBUF_NAMESPACE_ID::int64 total_gold() const;
  void set_total_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_gold() const;
  void _internal_set_total_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 surplus_gold = 8;
  void clear_surplus_gold();
  ::PROTOBUF_NAMESPACE_ID::int64 surplus_gold() const;
  void set_surplus_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_surplus_gold() const;
  void _internal_set_surplus_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 win_count = 5;
  void clear_win_count();
  ::PROTOBUF_NAMESPACE_ID::int32 win_count() const;
  void set_win_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_win_count() const;
  void _internal_set_win_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgDayData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_play_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 lose_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 lose_gold_;
  ::PROTOBUF_NAMESPACE_ID::int64 win_gold_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_gold_;
  ::PROTOBUF_NAMESPACE_ID::int64 surplus_gold_;
  ::PROTOBUF_NAMESPACE_ID::int32 win_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// -------------------------------------------------------------------

class MsgTotalDayData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgTotalDayData) */ {
 public:
  inline MsgTotalDayData() : MsgTotalDayData(nullptr) {}
  virtual ~MsgTotalDayData();

  MsgTotalDayData(const MsgTotalDayData& from);
  MsgTotalDayData(MsgTotalDayData&& from) noexcept
    : MsgTotalDayData() {
    *this = ::std::move(from);
  }

  inline MsgTotalDayData& operator=(const MsgTotalDayData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgTotalDayData& operator=(MsgTotalDayData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgTotalDayData& default_instance();

  static inline const MsgTotalDayData* internal_default_instance() {
    return reinterpret_cast<const MsgTotalDayData*>(
               &_MsgTotalDayData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MsgTotalDayData& a, MsgTotalDayData& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgTotalDayData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgTotalDayData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgTotalDayData* New() const final {
    return CreateMaybeMessage<MsgTotalDayData>(nullptr);
  }

  MsgTotalDayData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgTotalDayData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgTotalDayData& from);
  void MergeFrom(const MsgTotalDayData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgTotalDayData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgTotalDayData";
  }
  protected:
  explicit MsgTotalDayData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDailyDataFieldNumber = 2,
    kTotalNumFieldNumber = 1,
  };
  // repeated .MsgDayData daily_data = 2;
  int daily_data_size() const;
  private:
  int _internal_daily_data_size() const;
  public:
  void clear_daily_data();
  ::MsgDayData* mutable_daily_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MsgDayData >*
      mutable_daily_data();
  private:
  const ::MsgDayData& _internal_daily_data(int index) const;
  ::MsgDayData* _internal_add_daily_data();
  public:
  const ::MsgDayData& daily_data(int index) const;
  ::MsgDayData* add_daily_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MsgDayData >&
      daily_data() const;

  // int32 total_num = 1;
  void clear_total_num();
  ::PROTOBUF_NAMESPACE_ID::int32 total_num() const;
  void set_total_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_num() const;
  void _internal_set_total_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgTotalDayData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MsgDayData > daily_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// -------------------------------------------------------------------

class MsgQueryRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgQueryRecord) */ {
 public:
  inline MsgQueryRecord() : MsgQueryRecord(nullptr) {}
  virtual ~MsgQueryRecord();

  MsgQueryRecord(const MsgQueryRecord& from);
  MsgQueryRecord(MsgQueryRecord&& from) noexcept
    : MsgQueryRecord() {
    *this = ::std::move(from);
  }

  inline MsgQueryRecord& operator=(const MsgQueryRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgQueryRecord& operator=(MsgQueryRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgQueryRecord& default_instance();

  static inline const MsgQueryRecord* internal_default_instance() {
    return reinterpret_cast<const MsgQueryRecord*>(
               &_MsgQueryRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MsgQueryRecord& a, MsgQueryRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgQueryRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgQueryRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgQueryRecord* New() const final {
    return CreateMaybeMessage<MsgQueryRecord>(nullptr);
  }

  MsgQueryRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgQueryRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgQueryRecord& from);
  void MergeFrom(const MsgQueryRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgQueryRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgQueryRecord";
  }
  protected:
  explicit MsgQueryRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageFieldNumber = 1,
    kNumFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // int32 page = 1;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::int32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgQueryRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// -------------------------------------------------------------------

class MsgJackpotInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgJackpotInfo) */ {
 public:
  inline MsgJackpotInfo() : MsgJackpotInfo(nullptr) {}
  virtual ~MsgJackpotInfo();

  MsgJackpotInfo(const MsgJackpotInfo& from);
  MsgJackpotInfo(MsgJackpotInfo&& from) noexcept
    : MsgJackpotInfo() {
    *this = ::std::move(from);
  }

  inline MsgJackpotInfo& operator=(const MsgJackpotInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgJackpotInfo& operator=(MsgJackpotInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgJackpotInfo& default_instance();

  static inline const MsgJackpotInfo* internal_default_instance() {
    return reinterpret_cast<const MsgJackpotInfo*>(
               &_MsgJackpotInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MsgJackpotInfo& a, MsgJackpotInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgJackpotInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgJackpotInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgJackpotInfo* New() const final {
    return CreateMaybeMessage<MsgJackpotInfo>(nullptr);
  }

  MsgJackpotInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgJackpotInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgJackpotInfo& from);
  void MergeFrom(const MsgJackpotInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgJackpotInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgJackpotInfo";
  }
  protected:
  explicit MsgJackpotInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJackpotFieldNumber = 1,
    kFakeJackpotFieldNumber = 2,
  };
  // int64 jackpot = 1;
  void clear_jackpot();
  ::PROTOBUF_NAMESPACE_ID::int64 jackpot() const;
  void set_jackpot(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_jackpot() const;
  void _internal_set_jackpot(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 fake_jackpot = 2;
  void clear_fake_jackpot();
  ::PROTOBUF_NAMESPACE_ID::int64 fake_jackpot() const;
  void set_fake_jackpot(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fake_jackpot() const;
  void _internal_set_fake_jackpot(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgJackpotInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 jackpot_;
  ::PROTOBUF_NAMESPACE_ID::int64 fake_jackpot_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// -------------------------------------------------------------------

class MsgPvpTableInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgPvpTableInfo) */ {
 public:
  inline MsgPvpTableInfo() : MsgPvpTableInfo(nullptr) {}
  virtual ~MsgPvpTableInfo();

  MsgPvpTableInfo(const MsgPvpTableInfo& from);
  MsgPvpTableInfo(MsgPvpTableInfo&& from) noexcept
    : MsgPvpTableInfo() {
    *this = ::std::move(from);
  }

  inline MsgPvpTableInfo& operator=(const MsgPvpTableInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgPvpTableInfo& operator=(MsgPvpTableInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgPvpTableInfo& default_instance();

  static inline const MsgPvpTableInfo* internal_default_instance() {
    return reinterpret_cast<const MsgPvpTableInfo*>(
               &_MsgPvpTableInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MsgPvpTableInfo& a, MsgPvpTableInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgPvpTableInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgPvpTableInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgPvpTableInfo* New() const final {
    return CreateMaybeMessage<MsgPvpTableInfo>(nullptr);
  }

  MsgPvpTableInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgPvpTableInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgPvpTableInfo& from);
  void MergeFrom(const MsgPvpTableInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgPvpTableInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgPvpTableInfo";
  }
  protected:
  explicit MsgPvpTableInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableNameFieldNumber = 2,
    kPasswordFieldNumber = 8,
    kTableIdFieldNumber = 1,
    kChairNumFieldNumber = 3,
    kEnterNumFieldNumber = 4,
    kPlayNumFieldNumber = 5,
    kIsActivateFieldNumber = 6,
    kIsPrivateFieldNumber = 7,
    kOwnerIdFieldNumber = 9,
    kValue1FieldNumber = 11,
    kValue2FieldNumber = 12,
    kValue3FieldNumber = 13,
    kValue4FieldNumber = 14,
    kValue5FieldNumber = 15,
    kValue6FieldNumber = 16,
    kValue7FieldNumber = 17,
    kValue8FieldNumber = 18,
    kTableNoFieldNumber = 10,
  };
  // string table_name = 2;
  void clear_table_name();
  const std::string& table_name() const;
  void set_table_name(const std::string& value);
  void set_table_name(std::string&& value);
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  std::string* mutable_table_name();
  std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // string password = 8;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 table_id = 1;
  void clear_table_id();
  ::PROTOBUF_NAMESPACE_ID::int32 table_id() const;
  void set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_table_id() const;
  void _internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 chair_num = 3;
  void clear_chair_num();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_num() const;
  void set_chair_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_num() const;
  void _internal_set_chair_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 enter_num = 4;
  void clear_enter_num();
  ::PROTOBUF_NAMESPACE_ID::int32 enter_num() const;
  void set_enter_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enter_num() const;
  void _internal_set_enter_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 play_num = 5;
  void clear_play_num();
  ::PROTOBUF_NAMESPACE_ID::int32 play_num() const;
  void set_play_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_play_num() const;
  void _internal_set_play_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_activate = 6;
  void clear_is_activate();
  bool is_activate() const;
  void set_is_activate(bool value);
  private:
  bool _internal_is_activate() const;
  void _internal_set_is_activate(bool value);
  public:

  // bool is_private = 7;
  void clear_is_private();
  bool is_private() const;
  void set_is_private(bool value);
  private:
  bool _internal_is_private() const;
  void _internal_set_is_private(bool value);
  public:

  // int32 owner_id = 9;
  void clear_owner_id();
  ::PROTOBUF_NAMESPACE_ID::int32 owner_id() const;
  void set_owner_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_owner_id() const;
  void _internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 value1 = 11;
  void clear_value1();
  ::PROTOBUF_NAMESPACE_ID::int64 value1() const;
  void set_value1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value1() const;
  void _internal_set_value1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 value2 = 12;
  void clear_value2();
  ::PROTOBUF_NAMESPACE_ID::int64 value2() const;
  void set_value2(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value2() const;
  void _internal_set_value2(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 value3 = 13;
  void clear_value3();
  ::PROTOBUF_NAMESPACE_ID::int64 value3() const;
  void set_value3(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value3() const;
  void _internal_set_value3(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 value4 = 14;
  void clear_value4();
  ::PROTOBUF_NAMESPACE_ID::int64 value4() const;
  void set_value4(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value4() const;
  void _internal_set_value4(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 value5 = 15;
  void clear_value5();
  ::PROTOBUF_NAMESPACE_ID::int64 value5() const;
  void set_value5(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value5() const;
  void _internal_set_value5(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 value6 = 16;
  void clear_value6();
  ::PROTOBUF_NAMESPACE_ID::int64 value6() const;
  void set_value6(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value6() const;
  void _internal_set_value6(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 value7 = 17;
  void clear_value7();
  ::PROTOBUF_NAMESPACE_ID::int64 value7() const;
  void set_value7(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value7() const;
  void _internal_set_value7(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 value8 = 18;
  void clear_value8();
  ::PROTOBUF_NAMESPACE_ID::int64 value8() const;
  void set_value8(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value8() const;
  void _internal_set_value8(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 table_no = 10;
  void clear_table_no();
  ::PROTOBUF_NAMESPACE_ID::int32 table_no() const;
  void set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_table_no() const;
  void _internal_set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgPvpTableInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 table_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 enter_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 play_num_;
  bool is_activate_;
  bool is_private_;
  ::PROTOBUF_NAMESPACE_ID::int32 owner_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 value1_;
  ::PROTOBUF_NAMESPACE_ID::int64 value2_;
  ::PROTOBUF_NAMESPACE_ID::int64 value3_;
  ::PROTOBUF_NAMESPACE_ID::int64 value4_;
  ::PROTOBUF_NAMESPACE_ID::int64 value5_;
  ::PROTOBUF_NAMESPACE_ID::int64 value6_;
  ::PROTOBUF_NAMESPACE_ID::int64 value7_;
  ::PROTOBUF_NAMESPACE_ID::int64 value8_;
  ::PROTOBUF_NAMESPACE_ID::int32 table_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// -------------------------------------------------------------------

class MsgPvpRoomCfgItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgPvpRoomCfgItem) */ {
 public:
  inline MsgPvpRoomCfgItem() : MsgPvpRoomCfgItem(nullptr) {}
  virtual ~MsgPvpRoomCfgItem();

  MsgPvpRoomCfgItem(const MsgPvpRoomCfgItem& from);
  MsgPvpRoomCfgItem(MsgPvpRoomCfgItem&& from) noexcept
    : MsgPvpRoomCfgItem() {
    *this = ::std::move(from);
  }

  inline MsgPvpRoomCfgItem& operator=(const MsgPvpRoomCfgItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgPvpRoomCfgItem& operator=(MsgPvpRoomCfgItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgPvpRoomCfgItem& default_instance();

  static inline const MsgPvpRoomCfgItem* internal_default_instance() {
    return reinterpret_cast<const MsgPvpRoomCfgItem*>(
               &_MsgPvpRoomCfgItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MsgPvpRoomCfgItem& a, MsgPvpRoomCfgItem& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgPvpRoomCfgItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgPvpRoomCfgItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgPvpRoomCfgItem* New() const final {
    return CreateMaybeMessage<MsgPvpRoomCfgItem>(nullptr);
  }

  MsgPvpRoomCfgItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgPvpRoomCfgItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgPvpRoomCfgItem& from);
  void MergeFrom(const MsgPvpRoomCfgItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgPvpRoomCfgItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgPvpRoomCfgItem";
  }
  protected:
  explicit MsgPvpRoomCfgItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueListFieldNumber = 4,
    kLagKeyFieldNumber = 1,
    kClinetOpenFieldNumber = 2,
    kCanSelectFieldNumber = 3,
  };
  // repeated int32 value_list = 4;
  int value_list_size() const;
  private:
  int _internal_value_list_size() const;
  public:
  void clear_value_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_value_list() const;
  void _internal_add_value_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_value_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 value_list(int index) const;
  void set_value_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_value_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      value_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_value_list();

  // int32 lag_key = 1;
  void clear_lag_key();
  ::PROTOBUF_NAMESPACE_ID::int32 lag_key() const;
  void set_lag_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lag_key() const;
  void _internal_set_lag_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 clinet_open = 2;
  void clear_clinet_open();
  ::PROTOBUF_NAMESPACE_ID::int32 clinet_open() const;
  void set_clinet_open(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clinet_open() const;
  void _internal_set_clinet_open(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 can_select = 3;
  void clear_can_select();
  ::PROTOBUF_NAMESPACE_ID::int32 can_select() const;
  void set_can_select(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_select() const;
  void _internal_set_can_select(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgPvpRoomCfgItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > value_list_;
  mutable std::atomic<int> _value_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 lag_key_;
  ::PROTOBUF_NAMESPACE_ID::int32 clinet_open_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_select_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// -------------------------------------------------------------------

class MsgPvpRoomConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgPvpRoomConfig) */ {
 public:
  inline MsgPvpRoomConfig() : MsgPvpRoomConfig(nullptr) {}
  virtual ~MsgPvpRoomConfig();

  MsgPvpRoomConfig(const MsgPvpRoomConfig& from);
  MsgPvpRoomConfig(MsgPvpRoomConfig&& from) noexcept
    : MsgPvpRoomConfig() {
    *this = ::std::move(from);
  }

  inline MsgPvpRoomConfig& operator=(const MsgPvpRoomConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgPvpRoomConfig& operator=(MsgPvpRoomConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgPvpRoomConfig& default_instance();

  static inline const MsgPvpRoomConfig* internal_default_instance() {
    return reinterpret_cast<const MsgPvpRoomConfig*>(
               &_MsgPvpRoomConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MsgPvpRoomConfig& a, MsgPvpRoomConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgPvpRoomConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgPvpRoomConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgPvpRoomConfig* New() const final {
    return CreateMaybeMessage<MsgPvpRoomConfig>(nullptr);
  }

  MsgPvpRoomConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgPvpRoomConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgPvpRoomConfig& from);
  void MergeFrom(const MsgPvpRoomConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgPvpRoomConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgPvpRoomConfig";
  }
  protected:
  explicit MsgPvpRoomConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParaLsitFieldNumber = 11,
    kCreateVipLimitFieldNumber = 1,
    kChairLimitMinFieldNumber = 2,
    kChairLimitMaxFieldNumber = 3,
    kMaxRoundFieldNumber = 4,
  };
  // repeated .MsgPvpRoomCfgItem para_lsit = 11;
  int para_lsit_size() const;
  private:
  int _internal_para_lsit_size() const;
  public:
  void clear_para_lsit();
  ::MsgPvpRoomCfgItem* mutable_para_lsit(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MsgPvpRoomCfgItem >*
      mutable_para_lsit();
  private:
  const ::MsgPvpRoomCfgItem& _internal_para_lsit(int index) const;
  ::MsgPvpRoomCfgItem* _internal_add_para_lsit();
  public:
  const ::MsgPvpRoomCfgItem& para_lsit(int index) const;
  ::MsgPvpRoomCfgItem* add_para_lsit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MsgPvpRoomCfgItem >&
      para_lsit() const;

  // int32 create_vip_limit = 1;
  void clear_create_vip_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 create_vip_limit() const;
  void set_create_vip_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_create_vip_limit() const;
  void _internal_set_create_vip_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 chair_limit_min = 2;
  void clear_chair_limit_min();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_limit_min() const;
  void set_chair_limit_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_limit_min() const;
  void _internal_set_chair_limit_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 chair_limit_max = 3;
  void clear_chair_limit_max();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_limit_max() const;
  void set_chair_limit_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_limit_max() const;
  void _internal_set_chair_limit_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_round = 4;
  void clear_max_round();
  ::PROTOBUF_NAMESPACE_ID::int32 max_round() const;
  void set_max_round(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_round() const;
  void _internal_set_max_round(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgPvpRoomConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MsgPvpRoomCfgItem > para_lsit_;
  ::PROTOBUF_NAMESPACE_ID::int32 create_vip_limit_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_limit_min_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_limit_max_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_round_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// -------------------------------------------------------------------

class MsgPvpTableList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgPvpTableList) */ {
 public:
  inline MsgPvpTableList() : MsgPvpTableList(nullptr) {}
  virtual ~MsgPvpTableList();

  MsgPvpTableList(const MsgPvpTableList& from);
  MsgPvpTableList(MsgPvpTableList&& from) noexcept
    : MsgPvpTableList() {
    *this = ::std::move(from);
  }

  inline MsgPvpTableList& operator=(const MsgPvpTableList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgPvpTableList& operator=(MsgPvpTableList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgPvpTableList& default_instance();

  static inline const MsgPvpTableList* internal_default_instance() {
    return reinterpret_cast<const MsgPvpTableList*>(
               &_MsgPvpTableList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MsgPvpTableList& a, MsgPvpTableList& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgPvpTableList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgPvpTableList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgPvpTableList* New() const final {
    return CreateMaybeMessage<MsgPvpTableList>(nullptr);
  }

  MsgPvpTableList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgPvpTableList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgPvpTableList& from);
  void MergeFrom(const MsgPvpTableList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgPvpTableList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgPvpTableList";
  }
  protected:
  explicit MsgPvpTableList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableListFieldNumber = 1,
  };
  // repeated .MsgPvpTableInfo table_list = 1;
  int table_list_size() const;
  private:
  int _internal_table_list_size() const;
  public:
  void clear_table_list();
  ::MsgPvpTableInfo* mutable_table_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MsgPvpTableInfo >*
      mutable_table_list();
  private:
  const ::MsgPvpTableInfo& _internal_table_list(int index) const;
  ::MsgPvpTableInfo* _internal_add_table_list();
  public:
  const ::MsgPvpTableInfo& table_list(int index) const;
  ::MsgPvpTableInfo* add_table_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MsgPvpTableInfo >&
      table_list() const;

  // @@protoc_insertion_point(class_scope:MsgPvpTableList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MsgPvpTableInfo > table_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// -------------------------------------------------------------------

class MsgPvpCreateTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgPvpCreateTable) */ {
 public:
  inline MsgPvpCreateTable() : MsgPvpCreateTable(nullptr) {}
  virtual ~MsgPvpCreateTable();

  MsgPvpCreateTable(const MsgPvpCreateTable& from);
  MsgPvpCreateTable(MsgPvpCreateTable&& from) noexcept
    : MsgPvpCreateTable() {
    *this = ::std::move(from);
  }

  inline MsgPvpCreateTable& operator=(const MsgPvpCreateTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgPvpCreateTable& operator=(MsgPvpCreateTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgPvpCreateTable& default_instance();

  static inline const MsgPvpCreateTable* internal_default_instance() {
    return reinterpret_cast<const MsgPvpCreateTable*>(
               &_MsgPvpCreateTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MsgPvpCreateTable& a, MsgPvpCreateTable& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgPvpCreateTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgPvpCreateTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgPvpCreateTable* New() const final {
    return CreateMaybeMessage<MsgPvpCreateTable>(nullptr);
  }

  MsgPvpCreateTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgPvpCreateTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgPvpCreateTable& from);
  void MergeFrom(const MsgPvpCreateTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgPvpCreateTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgPvpCreateTable";
  }
  protected:
  explicit MsgPvpCreateTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParaLsitFieldNumber = 7,
    kTableNameFieldNumber = 2,
    kPasswordFieldNumber = 6,
    kIsPrivateFieldNumber = 1,
    kChairNumFieldNumber = 3,
  };
  // repeated int32 para_lsit = 7;
  int para_lsit_size() const;
  private:
  int _internal_para_lsit_size() const;
  public:
  void clear_para_lsit();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_para_lsit(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_para_lsit() const;
  void _internal_add_para_lsit(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_para_lsit();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 para_lsit(int index) const;
  void set_para_lsit(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_para_lsit(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      para_lsit() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_para_lsit();

  // string table_name = 2;
  void clear_table_name();
  const std::string& table_name() const;
  void set_table_name(const std::string& value);
  void set_table_name(std::string&& value);
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  std::string* mutable_table_name();
  std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // string password = 6;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // bool is_private = 1;
  void clear_is_private();
  bool is_private() const;
  void set_is_private(bool value);
  private:
  bool _internal_is_private() const;
  void _internal_set_is_private(bool value);
  public:

  // int32 chair_num = 3;
  void clear_chair_num();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_num() const;
  void set_chair_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_num() const;
  void _internal_set_chair_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgPvpCreateTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > para_lsit_;
  mutable std::atomic<int> _para_lsit_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  bool is_private_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// -------------------------------------------------------------------

class MsgPvpCreateTableResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgPvpCreateTableResp) */ {
 public:
  inline MsgPvpCreateTableResp() : MsgPvpCreateTableResp(nullptr) {}
  virtual ~MsgPvpCreateTableResp();

  MsgPvpCreateTableResp(const MsgPvpCreateTableResp& from);
  MsgPvpCreateTableResp(MsgPvpCreateTableResp&& from) noexcept
    : MsgPvpCreateTableResp() {
    *this = ::std::move(from);
  }

  inline MsgPvpCreateTableResp& operator=(const MsgPvpCreateTableResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgPvpCreateTableResp& operator=(MsgPvpCreateTableResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgPvpCreateTableResp& default_instance();

  static inline const MsgPvpCreateTableResp* internal_default_instance() {
    return reinterpret_cast<const MsgPvpCreateTableResp*>(
               &_MsgPvpCreateTableResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MsgPvpCreateTableResp& a, MsgPvpCreateTableResp& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgPvpCreateTableResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgPvpCreateTableResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgPvpCreateTableResp* New() const final {
    return CreateMaybeMessage<MsgPvpCreateTableResp>(nullptr);
  }

  MsgPvpCreateTableResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgPvpCreateTableResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgPvpCreateTableResp& from);
  void MergeFrom(const MsgPvpCreateTableResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgPvpCreateTableResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgPvpCreateTableResp";
  }
  protected:
  explicit MsgPvpCreateTableResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableInfoFieldNumber = 3,
    kRetCodeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .MsgPvpTableInfo table_info = 3;
  bool has_table_info() const;
  private:
  bool _internal_has_table_info() const;
  public:
  void clear_table_info();
  const ::MsgPvpTableInfo& table_info() const;
  ::MsgPvpTableInfo* release_table_info();
  ::MsgPvpTableInfo* mutable_table_info();
  void set_allocated_table_info(::MsgPvpTableInfo* table_info);
  private:
  const ::MsgPvpTableInfo& _internal_table_info() const;
  ::MsgPvpTableInfo* _internal_mutable_table_info();
  public:
  void unsafe_arena_set_allocated_table_info(
      ::MsgPvpTableInfo* table_info);
  ::MsgPvpTableInfo* unsafe_arena_release_table_info();

  // int32 ret_code = 1;
  void clear_ret_code();
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code() const;
  void set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret_code() const;
  void _internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgPvpCreateTableResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::MsgPvpTableInfo* table_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// -------------------------------------------------------------------

class MsgPvpJoinTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgPvpJoinTable) */ {
 public:
  inline MsgPvpJoinTable() : MsgPvpJoinTable(nullptr) {}
  virtual ~MsgPvpJoinTable();

  MsgPvpJoinTable(const MsgPvpJoinTable& from);
  MsgPvpJoinTable(MsgPvpJoinTable&& from) noexcept
    : MsgPvpJoinTable() {
    *this = ::std::move(from);
  }

  inline MsgPvpJoinTable& operator=(const MsgPvpJoinTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgPvpJoinTable& operator=(MsgPvpJoinTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgPvpJoinTable& default_instance();

  static inline const MsgPvpJoinTable* internal_default_instance() {
    return reinterpret_cast<const MsgPvpJoinTable*>(
               &_MsgPvpJoinTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(MsgPvpJoinTable& a, MsgPvpJoinTable& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgPvpJoinTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgPvpJoinTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgPvpJoinTable* New() const final {
    return CreateMaybeMessage<MsgPvpJoinTable>(nullptr);
  }

  MsgPvpJoinTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgPvpJoinTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgPvpJoinTable& from);
  void MergeFrom(const MsgPvpJoinTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgPvpJoinTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgPvpJoinTable";
  }
  protected:
  explicit MsgPvpJoinTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 3,
    kTableIdFieldNumber = 1,
    kTableNoFieldNumber = 2,
  };
  // string password = 3;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 table_id = 1;
  void clear_table_id();
  ::PROTOBUF_NAMESPACE_ID::int32 table_id() const;
  void set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_table_id() const;
  void _internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 table_no = 2;
  void clear_table_no();
  ::PROTOBUF_NAMESPACE_ID::int32 table_no() const;
  void set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_table_no() const;
  void _internal_set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgPvpJoinTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 table_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 table_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// -------------------------------------------------------------------

class MsgPvpJoinTableResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgPvpJoinTableResp) */ {
 public:
  inline MsgPvpJoinTableResp() : MsgPvpJoinTableResp(nullptr) {}
  virtual ~MsgPvpJoinTableResp();

  MsgPvpJoinTableResp(const MsgPvpJoinTableResp& from);
  MsgPvpJoinTableResp(MsgPvpJoinTableResp&& from) noexcept
    : MsgPvpJoinTableResp() {
    *this = ::std::move(from);
  }

  inline MsgPvpJoinTableResp& operator=(const MsgPvpJoinTableResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgPvpJoinTableResp& operator=(MsgPvpJoinTableResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgPvpJoinTableResp& default_instance();

  static inline const MsgPvpJoinTableResp* internal_default_instance() {
    return reinterpret_cast<const MsgPvpJoinTableResp*>(
               &_MsgPvpJoinTableResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(MsgPvpJoinTableResp& a, MsgPvpJoinTableResp& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgPvpJoinTableResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgPvpJoinTableResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgPvpJoinTableResp* New() const final {
    return CreateMaybeMessage<MsgPvpJoinTableResp>(nullptr);
  }

  MsgPvpJoinTableResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgPvpJoinTableResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgPvpJoinTableResp& from);
  void MergeFrom(const MsgPvpJoinTableResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgPvpJoinTableResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgPvpJoinTableResp";
  }
  protected:
  explicit MsgPvpJoinTableResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetCodeFieldNumber = 1,
    kTableIdFieldNumber = 2,
    kTableNoFieldNumber = 3,
    kUserIdFieldNumber = 4,
    kPlayerNumFieldNumber = 5,
  };
  // int32 ret_code = 1;
  void clear_ret_code();
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code() const;
  void set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret_code() const;
  void _internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 table_id = 2;
  void clear_table_id();
  ::PROTOBUF_NAMESPACE_ID::int32 table_id() const;
  void set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_table_id() const;
  void _internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 table_no = 3;
  void clear_table_no();
  ::PROTOBUF_NAMESPACE_ID::int32 table_no() const;
  void set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_table_no() const;
  void _internal_set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 user_id = 4;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 player_num = 5;
  void clear_player_num();
  ::PROTOBUF_NAMESPACE_ID::int32 player_num() const;
  void set_player_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_num() const;
  void _internal_set_player_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgPvpJoinTableResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 table_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 table_no_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// -------------------------------------------------------------------

class MsgPvpStandUpTableResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgPvpStandUpTableResp) */ {
 public:
  inline MsgPvpStandUpTableResp() : MsgPvpStandUpTableResp(nullptr) {}
  virtual ~MsgPvpStandUpTableResp();

  MsgPvpStandUpTableResp(const MsgPvpStandUpTableResp& from);
  MsgPvpStandUpTableResp(MsgPvpStandUpTableResp&& from) noexcept
    : MsgPvpStandUpTableResp() {
    *this = ::std::move(from);
  }

  inline MsgPvpStandUpTableResp& operator=(const MsgPvpStandUpTableResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgPvpStandUpTableResp& operator=(MsgPvpStandUpTableResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgPvpStandUpTableResp& default_instance();

  static inline const MsgPvpStandUpTableResp* internal_default_instance() {
    return reinterpret_cast<const MsgPvpStandUpTableResp*>(
               &_MsgPvpStandUpTableResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MsgPvpStandUpTableResp& a, MsgPvpStandUpTableResp& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgPvpStandUpTableResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgPvpStandUpTableResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgPvpStandUpTableResp* New() const final {
    return CreateMaybeMessage<MsgPvpStandUpTableResp>(nullptr);
  }

  MsgPvpStandUpTableResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgPvpStandUpTableResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgPvpStandUpTableResp& from);
  void MergeFrom(const MsgPvpStandUpTableResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgPvpStandUpTableResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgPvpStandUpTableResp";
  }
  protected:
  explicit MsgPvpStandUpTableResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetCodeFieldNumber = 1,
    kTableIdFieldNumber = 2,
    kTableNoFieldNumber = 3,
    kUserIdFieldNumber = 4,
    kPlayerNumFieldNumber = 5,
  };
  // int32 ret_code = 1;
  void clear_ret_code();
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code() const;
  void set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret_code() const;
  void _internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 table_id = 2;
  void clear_table_id();
  ::PROTOBUF_NAMESPACE_ID::int32 table_id() const;
  void set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_table_id() const;
  void _internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 table_no = 3;
  void clear_table_no();
  ::PROTOBUF_NAMESPACE_ID::int32 table_no() const;
  void set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_table_no() const;
  void _internal_set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 user_id = 4;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 player_num = 5;
  void clear_player_num();
  ::PROTOBUF_NAMESPACE_ID::int32 player_num() const;
  void set_player_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_num() const;
  void _internal_set_player_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgPvpStandUpTableResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 table_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 table_no_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// -------------------------------------------------------------------

class MsgPvpDestroyTableResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgPvpDestroyTableResp) */ {
 public:
  inline MsgPvpDestroyTableResp() : MsgPvpDestroyTableResp(nullptr) {}
  virtual ~MsgPvpDestroyTableResp();

  MsgPvpDestroyTableResp(const MsgPvpDestroyTableResp& from);
  MsgPvpDestroyTableResp(MsgPvpDestroyTableResp&& from) noexcept
    : MsgPvpDestroyTableResp() {
    *this = ::std::move(from);
  }

  inline MsgPvpDestroyTableResp& operator=(const MsgPvpDestroyTableResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgPvpDestroyTableResp& operator=(MsgPvpDestroyTableResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgPvpDestroyTableResp& default_instance();

  static inline const MsgPvpDestroyTableResp* internal_default_instance() {
    return reinterpret_cast<const MsgPvpDestroyTableResp*>(
               &_MsgPvpDestroyTableResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MsgPvpDestroyTableResp& a, MsgPvpDestroyTableResp& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgPvpDestroyTableResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgPvpDestroyTableResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgPvpDestroyTableResp* New() const final {
    return CreateMaybeMessage<MsgPvpDestroyTableResp>(nullptr);
  }

  MsgPvpDestroyTableResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgPvpDestroyTableResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgPvpDestroyTableResp& from);
  void MergeFrom(const MsgPvpDestroyTableResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgPvpDestroyTableResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgPvpDestroyTableResp";
  }
  protected:
  explicit MsgPvpDestroyTableResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetCodeFieldNumber = 1,
    kTableIdFieldNumber = 2,
    kTableNoFieldNumber = 3,
  };
  // int32 ret_code = 1;
  void clear_ret_code();
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code() const;
  void set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret_code() const;
  void _internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 table_id = 2;
  void clear_table_id();
  ::PROTOBUF_NAMESPACE_ID::int32 table_id() const;
  void set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_table_id() const;
  void _internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 table_no = 3;
  void clear_table_no();
  ::PROTOBUF_NAMESPACE_ID::int32 table_no() const;
  void set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_table_no() const;
  void _internal_set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgPvpDestroyTableResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 table_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 table_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// -------------------------------------------------------------------

class MsgPvpKickUserResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgPvpKickUserResp) */ {
 public:
  inline MsgPvpKickUserResp() : MsgPvpKickUserResp(nullptr) {}
  virtual ~MsgPvpKickUserResp();

  MsgPvpKickUserResp(const MsgPvpKickUserResp& from);
  MsgPvpKickUserResp(MsgPvpKickUserResp&& from) noexcept
    : MsgPvpKickUserResp() {
    *this = ::std::move(from);
  }

  inline MsgPvpKickUserResp& operator=(const MsgPvpKickUserResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgPvpKickUserResp& operator=(MsgPvpKickUserResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgPvpKickUserResp& default_instance();

  static inline const MsgPvpKickUserResp* internal_default_instance() {
    return reinterpret_cast<const MsgPvpKickUserResp*>(
               &_MsgPvpKickUserResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(MsgPvpKickUserResp& a, MsgPvpKickUserResp& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgPvpKickUserResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgPvpKickUserResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgPvpKickUserResp* New() const final {
    return CreateMaybeMessage<MsgPvpKickUserResp>(nullptr);
  }

  MsgPvpKickUserResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgPvpKickUserResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgPvpKickUserResp& from);
  void MergeFrom(const MsgPvpKickUserResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgPvpKickUserResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgPvpKickUserResp";
  }
  protected:
  explicit MsgPvpKickUserResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerNickFieldNumber = 3,
    kKickNickFieldNumber = 5,
    kRetCodeFieldNumber = 1,
    kOwnerIdFieldNumber = 2,
    kKickIdFieldNumber = 4,
  };
  // string owner_nick = 3;
  void clear_owner_nick();
  const std::string& owner_nick() const;
  void set_owner_nick(const std::string& value);
  void set_owner_nick(std::string&& value);
  void set_owner_nick(const char* value);
  void set_owner_nick(const char* value, size_t size);
  std::string* mutable_owner_nick();
  std::string* release_owner_nick();
  void set_allocated_owner_nick(std::string* owner_nick);
  private:
  const std::string& _internal_owner_nick() const;
  void _internal_set_owner_nick(const std::string& value);
  std::string* _internal_mutable_owner_nick();
  public:

  // string kick_nick = 5;
  void clear_kick_nick();
  const std::string& kick_nick() const;
  void set_kick_nick(const std::string& value);
  void set_kick_nick(std::string&& value);
  void set_kick_nick(const char* value);
  void set_kick_nick(const char* value, size_t size);
  std::string* mutable_kick_nick();
  std::string* release_kick_nick();
  void set_allocated_kick_nick(std::string* kick_nick);
  private:
  const std::string& _internal_kick_nick() const;
  void _internal_set_kick_nick(const std::string& value);
  std::string* _internal_mutable_kick_nick();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code() const;
  void set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret_code() const;
  void _internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 owner_id = 2;
  void clear_owner_id();
  ::PROTOBUF_NAMESPACE_ID::int32 owner_id() const;
  void set_owner_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_owner_id() const;
  void _internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 kick_id = 4;
  void clear_kick_id();
  ::PROTOBUF_NAMESPACE_ID::int32 kick_id() const;
  void set_kick_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_kick_id() const;
  void _internal_set_kick_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgPvpKickUserResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_nick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kick_nick_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 owner_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 kick_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// -------------------------------------------------------------------

class MsgPvpTableChangeOwnerResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgPvpTableChangeOwnerResp) */ {
 public:
  inline MsgPvpTableChangeOwnerResp() : MsgPvpTableChangeOwnerResp(nullptr) {}
  virtual ~MsgPvpTableChangeOwnerResp();

  MsgPvpTableChangeOwnerResp(const MsgPvpTableChangeOwnerResp& from);
  MsgPvpTableChangeOwnerResp(MsgPvpTableChangeOwnerResp&& from) noexcept
    : MsgPvpTableChangeOwnerResp() {
    *this = ::std::move(from);
  }

  inline MsgPvpTableChangeOwnerResp& operator=(const MsgPvpTableChangeOwnerResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgPvpTableChangeOwnerResp& operator=(MsgPvpTableChangeOwnerResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgPvpTableChangeOwnerResp& default_instance();

  static inline const MsgPvpTableChangeOwnerResp* internal_default_instance() {
    return reinterpret_cast<const MsgPvpTableChangeOwnerResp*>(
               &_MsgPvpTableChangeOwnerResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(MsgPvpTableChangeOwnerResp& a, MsgPvpTableChangeOwnerResp& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgPvpTableChangeOwnerResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgPvpTableChangeOwnerResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgPvpTableChangeOwnerResp* New() const final {
    return CreateMaybeMessage<MsgPvpTableChangeOwnerResp>(nullptr);
  }

  MsgPvpTableChangeOwnerResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgPvpTableChangeOwnerResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgPvpTableChangeOwnerResp& from);
  void MergeFrom(const MsgPvpTableChangeOwnerResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgPvpTableChangeOwnerResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgPvpTableChangeOwnerResp";
  }
  protected:
  explicit MsgPvpTableChangeOwnerResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableIdFieldNumber = 1,
    kOwnerIdFieldNumber = 2,
    kIsActivateFieldNumber = 3,
  };
  // int32 table_id = 1;
  void clear_table_id();
  ::PROTOBUF_NAMESPACE_ID::int32 table_id() const;
  void set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_table_id() const;
  void _internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 owner_id = 2;
  void clear_owner_id();
  ::PROTOBUF_NAMESPACE_ID::int32 owner_id() const;
  void set_owner_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_owner_id() const;
  void _internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_activate = 3;
  void clear_is_activate();
  bool is_activate() const;
  void set_is_activate(bool value);
  private:
  bool _internal_is_activate() const;
  void _internal_set_is_activate(bool value);
  public:

  // @@protoc_insertion_point(class_scope:MsgPvpTableChangeOwnerResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 table_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 owner_id_;
  bool is_activate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// -------------------------------------------------------------------

class MsgPvpActivateTableResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgPvpActivateTableResp) */ {
 public:
  inline MsgPvpActivateTableResp() : MsgPvpActivateTableResp(nullptr) {}
  virtual ~MsgPvpActivateTableResp();

  MsgPvpActivateTableResp(const MsgPvpActivateTableResp& from);
  MsgPvpActivateTableResp(MsgPvpActivateTableResp&& from) noexcept
    : MsgPvpActivateTableResp() {
    *this = ::std::move(from);
  }

  inline MsgPvpActivateTableResp& operator=(const MsgPvpActivateTableResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgPvpActivateTableResp& operator=(MsgPvpActivateTableResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgPvpActivateTableResp& default_instance();

  static inline const MsgPvpActivateTableResp* internal_default_instance() {
    return reinterpret_cast<const MsgPvpActivateTableResp*>(
               &_MsgPvpActivateTableResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(MsgPvpActivateTableResp& a, MsgPvpActivateTableResp& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgPvpActivateTableResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgPvpActivateTableResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgPvpActivateTableResp* New() const final {
    return CreateMaybeMessage<MsgPvpActivateTableResp>(nullptr);
  }

  MsgPvpActivateTableResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgPvpActivateTableResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgPvpActivateTableResp& from);
  void MergeFrom(const MsgPvpActivateTableResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgPvpActivateTableResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgPvpActivateTableResp";
  }
  protected:
  explicit MsgPvpActivateTableResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetCodeFieldNumber = 1,
    kTableIdFieldNumber = 2,
    kOwnerIdFieldNumber = 3,
    kIsActivateFieldNumber = 4,
  };
  // int32 ret_code = 1;
  void clear_ret_code();
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code() const;
  void set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret_code() const;
  void _internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 table_id = 2;
  void clear_table_id();
  ::PROTOBUF_NAMESPACE_ID::int32 table_id() const;
  void set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_table_id() const;
  void _internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 owner_id = 3;
  void clear_owner_id();
  ::PROTOBUF_NAMESPACE_ID::int32 owner_id() const;
  void set_owner_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_owner_id() const;
  void _internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_activate = 4;
  void clear_is_activate();
  bool is_activate() const;
  void set_is_activate(bool value);
  private:
  bool _internal_is_activate() const;
  void _internal_set_is_activate(bool value);
  public:

  // @@protoc_insertion_point(class_scope:MsgPvpActivateTableResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 table_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 owner_id_;
  bool is_activate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// -------------------------------------------------------------------

class MsgPvpTableRoundChangeResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgPvpTableRoundChangeResp) */ {
 public:
  inline MsgPvpTableRoundChangeResp() : MsgPvpTableRoundChangeResp(nullptr) {}
  virtual ~MsgPvpTableRoundChangeResp();

  MsgPvpTableRoundChangeResp(const MsgPvpTableRoundChangeResp& from);
  MsgPvpTableRoundChangeResp(MsgPvpTableRoundChangeResp&& from) noexcept
    : MsgPvpTableRoundChangeResp() {
    *this = ::std::move(from);
  }

  inline MsgPvpTableRoundChangeResp& operator=(const MsgPvpTableRoundChangeResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgPvpTableRoundChangeResp& operator=(MsgPvpTableRoundChangeResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgPvpTableRoundChangeResp& default_instance();

  static inline const MsgPvpTableRoundChangeResp* internal_default_instance() {
    return reinterpret_cast<const MsgPvpTableRoundChangeResp*>(
               &_MsgPvpTableRoundChangeResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(MsgPvpTableRoundChangeResp& a, MsgPvpTableRoundChangeResp& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgPvpTableRoundChangeResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgPvpTableRoundChangeResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgPvpTableRoundChangeResp* New() const final {
    return CreateMaybeMessage<MsgPvpTableRoundChangeResp>(nullptr);
  }

  MsgPvpTableRoundChangeResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgPvpTableRoundChangeResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgPvpTableRoundChangeResp& from);
  void MergeFrom(const MsgPvpTableRoundChangeResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgPvpTableRoundChangeResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgPvpTableRoundChangeResp";
  }
  protected:
  explicit MsgPvpTableRoundChangeResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableIdFieldNumber = 1,
    kTableNoFieldNumber = 2,
    kRoundFieldNumber = 3,
  };
  // int32 table_id = 1;
  void clear_table_id();
  ::PROTOBUF_NAMESPACE_ID::int32 table_id() const;
  void set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_table_id() const;
  void _internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 table_no = 2;
  void clear_table_no();
  ::PROTOBUF_NAMESPACE_ID::int32 table_no() const;
  void set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_table_no() const;
  void _internal_set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 round = 3;
  void clear_round();
  ::PROTOBUF_NAMESPACE_ID::int32 round() const;
  void set_round(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_round() const;
  void _internal_set_round(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgPvpTableRoundChangeResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 table_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 table_no_;
  ::PROTOBUF_NAMESPACE_ID::int32 round_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgGamePlayerLogin

// int32 user_id = 1;
inline void MsgGamePlayerLogin::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGamePlayerLogin::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGamePlayerLogin::user_id() const {
  // @@protoc_insertion_point(field_get:MsgGamePlayerLogin.user_id)
  return _internal_user_id();
}
inline void MsgGamePlayerLogin::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void MsgGamePlayerLogin::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:MsgGamePlayerLogin.user_id)
}

// string password = 2;
inline void MsgGamePlayerLogin::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& MsgGamePlayerLogin::password() const {
  // @@protoc_insertion_point(field_get:MsgGamePlayerLogin.password)
  return _internal_password();
}
inline void MsgGamePlayerLogin::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:MsgGamePlayerLogin.password)
}
inline std::string* MsgGamePlayerLogin::mutable_password() {
  // @@protoc_insertion_point(field_mutable:MsgGamePlayerLogin.password)
  return _internal_mutable_password();
}
inline const std::string& MsgGamePlayerLogin::_internal_password() const {
  return password_.Get();
}
inline void MsgGamePlayerLogin::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgGamePlayerLogin::set_password(std::string&& value) {
  
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgGamePlayerLogin.password)
}
inline void MsgGamePlayerLogin::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgGamePlayerLogin.password)
}
inline void MsgGamePlayerLogin::set_password(const char* value,
    size_t size) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgGamePlayerLogin.password)
}
inline std::string* MsgGamePlayerLogin::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgGamePlayerLogin::release_password() {
  // @@protoc_insertion_point(field_release:MsgGamePlayerLogin.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgGamePlayerLogin::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgGamePlayerLogin.password)
}

// string ip_info = 3;
inline void MsgGamePlayerLogin::clear_ip_info() {
  ip_info_.ClearToEmpty();
}
inline const std::string& MsgGamePlayerLogin::ip_info() const {
  // @@protoc_insertion_point(field_get:MsgGamePlayerLogin.ip_info)
  return _internal_ip_info();
}
inline void MsgGamePlayerLogin::set_ip_info(const std::string& value) {
  _internal_set_ip_info(value);
  // @@protoc_insertion_point(field_set:MsgGamePlayerLogin.ip_info)
}
inline std::string* MsgGamePlayerLogin::mutable_ip_info() {
  // @@protoc_insertion_point(field_mutable:MsgGamePlayerLogin.ip_info)
  return _internal_mutable_ip_info();
}
inline const std::string& MsgGamePlayerLogin::_internal_ip_info() const {
  return ip_info_.Get();
}
inline void MsgGamePlayerLogin::_internal_set_ip_info(const std::string& value) {
  
  ip_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgGamePlayerLogin::set_ip_info(std::string&& value) {
  
  ip_info_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgGamePlayerLogin.ip_info)
}
inline void MsgGamePlayerLogin::set_ip_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgGamePlayerLogin.ip_info)
}
inline void MsgGamePlayerLogin::set_ip_info(const char* value,
    size_t size) {
  
  ip_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgGamePlayerLogin.ip_info)
}
inline std::string* MsgGamePlayerLogin::_internal_mutable_ip_info() {
  
  return ip_info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgGamePlayerLogin::release_ip_info() {
  // @@protoc_insertion_point(field_release:MsgGamePlayerLogin.ip_info)
  return ip_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgGamePlayerLogin::set_allocated_ip_info(std::string* ip_info) {
  if (ip_info != nullptr) {
    
  } else {
    
  }
  ip_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgGamePlayerLogin.ip_info)
}

// string longitude = 4;
inline void MsgGamePlayerLogin::clear_longitude() {
  longitude_.ClearToEmpty();
}
inline const std::string& MsgGamePlayerLogin::longitude() const {
  // @@protoc_insertion_point(field_get:MsgGamePlayerLogin.longitude)
  return _internal_longitude();
}
inline void MsgGamePlayerLogin::set_longitude(const std::string& value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:MsgGamePlayerLogin.longitude)
}
inline std::string* MsgGamePlayerLogin::mutable_longitude() {
  // @@protoc_insertion_point(field_mutable:MsgGamePlayerLogin.longitude)
  return _internal_mutable_longitude();
}
inline const std::string& MsgGamePlayerLogin::_internal_longitude() const {
  return longitude_.Get();
}
inline void MsgGamePlayerLogin::_internal_set_longitude(const std::string& value) {
  
  longitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgGamePlayerLogin::set_longitude(std::string&& value) {
  
  longitude_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgGamePlayerLogin.longitude)
}
inline void MsgGamePlayerLogin::set_longitude(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  longitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgGamePlayerLogin.longitude)
}
inline void MsgGamePlayerLogin::set_longitude(const char* value,
    size_t size) {
  
  longitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgGamePlayerLogin.longitude)
}
inline std::string* MsgGamePlayerLogin::_internal_mutable_longitude() {
  
  return longitude_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgGamePlayerLogin::release_longitude() {
  // @@protoc_insertion_point(field_release:MsgGamePlayerLogin.longitude)
  return longitude_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgGamePlayerLogin::set_allocated_longitude(std::string* longitude) {
  if (longitude != nullptr) {
    
  } else {
    
  }
  longitude_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), longitude,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgGamePlayerLogin.longitude)
}

// string latitude = 5;
inline void MsgGamePlayerLogin::clear_latitude() {
  latitude_.ClearToEmpty();
}
inline const std::string& MsgGamePlayerLogin::latitude() const {
  // @@protoc_insertion_point(field_get:MsgGamePlayerLogin.latitude)
  return _internal_latitude();
}
inline void MsgGamePlayerLogin::set_latitude(const std::string& value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:MsgGamePlayerLogin.latitude)
}
inline std::string* MsgGamePlayerLogin::mutable_latitude() {
  // @@protoc_insertion_point(field_mutable:MsgGamePlayerLogin.latitude)
  return _internal_mutable_latitude();
}
inline const std::string& MsgGamePlayerLogin::_internal_latitude() const {
  return latitude_.Get();
}
inline void MsgGamePlayerLogin::_internal_set_latitude(const std::string& value) {
  
  latitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgGamePlayerLogin::set_latitude(std::string&& value) {
  
  latitude_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgGamePlayerLogin.latitude)
}
inline void MsgGamePlayerLogin::set_latitude(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  latitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgGamePlayerLogin.latitude)
}
inline void MsgGamePlayerLogin::set_latitude(const char* value,
    size_t size) {
  
  latitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgGamePlayerLogin.latitude)
}
inline std::string* MsgGamePlayerLogin::_internal_mutable_latitude() {
  
  return latitude_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgGamePlayerLogin::release_latitude() {
  // @@protoc_insertion_point(field_release:MsgGamePlayerLogin.latitude)
  return latitude_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgGamePlayerLogin::set_allocated_latitude(std::string* latitude) {
  if (latitude != nullptr) {
    
  } else {
    
  }
  latitude_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), latitude,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgGamePlayerLogin.latitude)
}

// -------------------------------------------------------------------

// MsgGamePlayerInfo

// int32 user_id = 1;
inline void MsgGamePlayerInfo::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGamePlayerInfo::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGamePlayerInfo::user_id() const {
  // @@protoc_insertion_point(field_get:MsgGamePlayerInfo.user_id)
  return _internal_user_id();
}
inline void MsgGamePlayerInfo::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void MsgGamePlayerInfo::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:MsgGamePlayerInfo.user_id)
}

// int32 beautiful_id = 2;
inline void MsgGamePlayerInfo::clear_beautiful_id() {
  beautiful_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGamePlayerInfo::_internal_beautiful_id() const {
  return beautiful_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGamePlayerInfo::beautiful_id() const {
  // @@protoc_insertion_point(field_get:MsgGamePlayerInfo.beautiful_id)
  return _internal_beautiful_id();
}
inline void MsgGamePlayerInfo::_internal_set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  beautiful_id_ = value;
}
inline void MsgGamePlayerInfo::set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_beautiful_id(value);
  // @@protoc_insertion_point(field_set:MsgGamePlayerInfo.beautiful_id)
}

// string nickname = 3;
inline void MsgGamePlayerInfo::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& MsgGamePlayerInfo::nickname() const {
  // @@protoc_insertion_point(field_get:MsgGamePlayerInfo.nickname)
  return _internal_nickname();
}
inline void MsgGamePlayerInfo::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:MsgGamePlayerInfo.nickname)
}
inline std::string* MsgGamePlayerInfo::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:MsgGamePlayerInfo.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& MsgGamePlayerInfo::_internal_nickname() const {
  return nickname_.Get();
}
inline void MsgGamePlayerInfo::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgGamePlayerInfo::set_nickname(std::string&& value) {
  
  nickname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgGamePlayerInfo.nickname)
}
inline void MsgGamePlayerInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgGamePlayerInfo.nickname)
}
inline void MsgGamePlayerInfo::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgGamePlayerInfo.nickname)
}
inline std::string* MsgGamePlayerInfo::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgGamePlayerInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:MsgGamePlayerInfo.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgGamePlayerInfo::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgGamePlayerInfo.nickname)
}

// string avatar = 4;
inline void MsgGamePlayerInfo::clear_avatar() {
  avatar_.ClearToEmpty();
}
inline const std::string& MsgGamePlayerInfo::avatar() const {
  // @@protoc_insertion_point(field_get:MsgGamePlayerInfo.avatar)
  return _internal_avatar();
}
inline void MsgGamePlayerInfo::set_avatar(const std::string& value) {
  _internal_set_avatar(value);
  // @@protoc_insertion_point(field_set:MsgGamePlayerInfo.avatar)
}
inline std::string* MsgGamePlayerInfo::mutable_avatar() {
  // @@protoc_insertion_point(field_mutable:MsgGamePlayerInfo.avatar)
  return _internal_mutable_avatar();
}
inline const std::string& MsgGamePlayerInfo::_internal_avatar() const {
  return avatar_.Get();
}
inline void MsgGamePlayerInfo::_internal_set_avatar(const std::string& value) {
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgGamePlayerInfo::set_avatar(std::string&& value) {
  
  avatar_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgGamePlayerInfo.avatar)
}
inline void MsgGamePlayerInfo::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgGamePlayerInfo.avatar)
}
inline void MsgGamePlayerInfo::set_avatar(const char* value,
    size_t size) {
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgGamePlayerInfo.avatar)
}
inline std::string* MsgGamePlayerInfo::_internal_mutable_avatar() {
  
  return avatar_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgGamePlayerInfo::release_avatar() {
  // @@protoc_insertion_point(field_release:MsgGamePlayerInfo.avatar)
  return avatar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgGamePlayerInfo::set_allocated_avatar(std::string* avatar) {
  if (avatar != nullptr) {
    
  } else {
    
  }
  avatar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgGamePlayerInfo.avatar)
}

// uint64 coin = 5;
inline void MsgGamePlayerInfo::clear_coin() {
  coin_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MsgGamePlayerInfo::_internal_coin() const {
  return coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MsgGamePlayerInfo::coin() const {
  // @@protoc_insertion_point(field_get:MsgGamePlayerInfo.coin)
  return _internal_coin();
}
inline void MsgGamePlayerInfo::_internal_set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  coin_ = value;
}
inline void MsgGamePlayerInfo::set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coin(value);
  // @@protoc_insertion_point(field_set:MsgGamePlayerInfo.coin)
}

// int32 table_id = 6;
inline void MsgGamePlayerInfo::clear_table_id() {
  table_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGamePlayerInfo::_internal_table_id() const {
  return table_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGamePlayerInfo::table_id() const {
  // @@protoc_insertion_point(field_get:MsgGamePlayerInfo.table_id)
  return _internal_table_id();
}
inline void MsgGamePlayerInfo::_internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  table_id_ = value;
}
inline void MsgGamePlayerInfo::set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:MsgGamePlayerInfo.table_id)
}

// int32 chair_id = 7;
inline void MsgGamePlayerInfo::clear_chair_id() {
  chair_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGamePlayerInfo::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGamePlayerInfo::chair_id() const {
  // @@protoc_insertion_point(field_get:MsgGamePlayerInfo.chair_id)
  return _internal_chair_id();
}
inline void MsgGamePlayerInfo::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_id_ = value;
}
inline void MsgGamePlayerInfo::set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:MsgGamePlayerInfo.chair_id)
}

// int32 vip_level = 8;
inline void MsgGamePlayerInfo::clear_vip_level() {
  vip_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGamePlayerInfo::_internal_vip_level() const {
  return vip_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGamePlayerInfo::vip_level() const {
  // @@protoc_insertion_point(field_get:MsgGamePlayerInfo.vip_level)
  return _internal_vip_level();
}
inline void MsgGamePlayerInfo::_internal_set_vip_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vip_level_ = value;
}
inline void MsgGamePlayerInfo::set_vip_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vip_level(value);
  // @@protoc_insertion_point(field_set:MsgGamePlayerInfo.vip_level)
}

// int32 avatar_frame = 9;
inline void MsgGamePlayerInfo::clear_avatar_frame() {
  avatar_frame_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGamePlayerInfo::_internal_avatar_frame() const {
  return avatar_frame_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGamePlayerInfo::avatar_frame() const {
  // @@protoc_insertion_point(field_get:MsgGamePlayerInfo.avatar_frame)
  return _internal_avatar_frame();
}
inline void MsgGamePlayerInfo::_internal_set_avatar_frame(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avatar_frame_ = value;
}
inline void MsgGamePlayerInfo::set_avatar_frame(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avatar_frame(value);
  // @@protoc_insertion_point(field_set:MsgGamePlayerInfo.avatar_frame)
}

// string ip_info = 10;
inline void MsgGamePlayerInfo::clear_ip_info() {
  ip_info_.ClearToEmpty();
}
inline const std::string& MsgGamePlayerInfo::ip_info() const {
  // @@protoc_insertion_point(field_get:MsgGamePlayerInfo.ip_info)
  return _internal_ip_info();
}
inline void MsgGamePlayerInfo::set_ip_info(const std::string& value) {
  _internal_set_ip_info(value);
  // @@protoc_insertion_point(field_set:MsgGamePlayerInfo.ip_info)
}
inline std::string* MsgGamePlayerInfo::mutable_ip_info() {
  // @@protoc_insertion_point(field_mutable:MsgGamePlayerInfo.ip_info)
  return _internal_mutable_ip_info();
}
inline const std::string& MsgGamePlayerInfo::_internal_ip_info() const {
  return ip_info_.Get();
}
inline void MsgGamePlayerInfo::_internal_set_ip_info(const std::string& value) {
  
  ip_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgGamePlayerInfo::set_ip_info(std::string&& value) {
  
  ip_info_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgGamePlayerInfo.ip_info)
}
inline void MsgGamePlayerInfo::set_ip_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgGamePlayerInfo.ip_info)
}
inline void MsgGamePlayerInfo::set_ip_info(const char* value,
    size_t size) {
  
  ip_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgGamePlayerInfo.ip_info)
}
inline std::string* MsgGamePlayerInfo::_internal_mutable_ip_info() {
  
  return ip_info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgGamePlayerInfo::release_ip_info() {
  // @@protoc_insertion_point(field_release:MsgGamePlayerInfo.ip_info)
  return ip_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgGamePlayerInfo::set_allocated_ip_info(std::string* ip_info) {
  if (ip_info != nullptr) {
    
  } else {
    
  }
  ip_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgGamePlayerInfo.ip_info)
}

// string longitude = 11;
inline void MsgGamePlayerInfo::clear_longitude() {
  longitude_.ClearToEmpty();
}
inline const std::string& MsgGamePlayerInfo::longitude() const {
  // @@protoc_insertion_point(field_get:MsgGamePlayerInfo.longitude)
  return _internal_longitude();
}
inline void MsgGamePlayerInfo::set_longitude(const std::string& value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:MsgGamePlayerInfo.longitude)
}
inline std::string* MsgGamePlayerInfo::mutable_longitude() {
  // @@protoc_insertion_point(field_mutable:MsgGamePlayerInfo.longitude)
  return _internal_mutable_longitude();
}
inline const std::string& MsgGamePlayerInfo::_internal_longitude() const {
  return longitude_.Get();
}
inline void MsgGamePlayerInfo::_internal_set_longitude(const std::string& value) {
  
  longitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgGamePlayerInfo::set_longitude(std::string&& value) {
  
  longitude_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgGamePlayerInfo.longitude)
}
inline void MsgGamePlayerInfo::set_longitude(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  longitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgGamePlayerInfo.longitude)
}
inline void MsgGamePlayerInfo::set_longitude(const char* value,
    size_t size) {
  
  longitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgGamePlayerInfo.longitude)
}
inline std::string* MsgGamePlayerInfo::_internal_mutable_longitude() {
  
  return longitude_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgGamePlayerInfo::release_longitude() {
  // @@protoc_insertion_point(field_release:MsgGamePlayerInfo.longitude)
  return longitude_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgGamePlayerInfo::set_allocated_longitude(std::string* longitude) {
  if (longitude != nullptr) {
    
  } else {
    
  }
  longitude_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), longitude,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgGamePlayerInfo.longitude)
}

// string latitude = 12;
inline void MsgGamePlayerInfo::clear_latitude() {
  latitude_.ClearToEmpty();
}
inline const std::string& MsgGamePlayerInfo::latitude() const {
  // @@protoc_insertion_point(field_get:MsgGamePlayerInfo.latitude)
  return _internal_latitude();
}
inline void MsgGamePlayerInfo::set_latitude(const std::string& value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:MsgGamePlayerInfo.latitude)
}
inline std::string* MsgGamePlayerInfo::mutable_latitude() {
  // @@protoc_insertion_point(field_mutable:MsgGamePlayerInfo.latitude)
  return _internal_mutable_latitude();
}
inline const std::string& MsgGamePlayerInfo::_internal_latitude() const {
  return latitude_.Get();
}
inline void MsgGamePlayerInfo::_internal_set_latitude(const std::string& value) {
  
  latitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgGamePlayerInfo::set_latitude(std::string&& value) {
  
  latitude_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgGamePlayerInfo.latitude)
}
inline void MsgGamePlayerInfo::set_latitude(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  latitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgGamePlayerInfo.latitude)
}
inline void MsgGamePlayerInfo::set_latitude(const char* value,
    size_t size) {
  
  latitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgGamePlayerInfo.latitude)
}
inline std::string* MsgGamePlayerInfo::_internal_mutable_latitude() {
  
  return latitude_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgGamePlayerInfo::release_latitude() {
  // @@protoc_insertion_point(field_release:MsgGamePlayerInfo.latitude)
  return latitude_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgGamePlayerInfo::set_allocated_latitude(std::string* latitude) {
  if (latitude != nullptr) {
    
  } else {
    
  }
  latitude_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), latitude,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgGamePlayerInfo.latitude)
}

// -------------------------------------------------------------------

// MsgGamePlayerLoginResp

// int32 res_code = 1;
inline void MsgGamePlayerLoginResp::clear_res_code() {
  res_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGamePlayerLoginResp::_internal_res_code() const {
  return res_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGamePlayerLoginResp::res_code() const {
  // @@protoc_insertion_point(field_get:MsgGamePlayerLoginResp.res_code)
  return _internal_res_code();
}
inline void MsgGamePlayerLoginResp::_internal_set_res_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  res_code_ = value;
}
inline void MsgGamePlayerLoginResp::set_res_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_res_code(value);
  // @@protoc_insertion_point(field_set:MsgGamePlayerLoginResp.res_code)
}

// int32 user_id = 2;
inline void MsgGamePlayerLoginResp::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGamePlayerLoginResp::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGamePlayerLoginResp::user_id() const {
  // @@protoc_insertion_point(field_get:MsgGamePlayerLoginResp.user_id)
  return _internal_user_id();
}
inline void MsgGamePlayerLoginResp::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void MsgGamePlayerLoginResp::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:MsgGamePlayerLoginResp.user_id)
}

// int32 beautiful_id = 3;
inline void MsgGamePlayerLoginResp::clear_beautiful_id() {
  beautiful_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGamePlayerLoginResp::_internal_beautiful_id() const {
  return beautiful_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGamePlayerLoginResp::beautiful_id() const {
  // @@protoc_insertion_point(field_get:MsgGamePlayerLoginResp.beautiful_id)
  return _internal_beautiful_id();
}
inline void MsgGamePlayerLoginResp::_internal_set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  beautiful_id_ = value;
}
inline void MsgGamePlayerLoginResp::set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_beautiful_id(value);
  // @@protoc_insertion_point(field_set:MsgGamePlayerLoginResp.beautiful_id)
}

// string nickname = 4;
inline void MsgGamePlayerLoginResp::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& MsgGamePlayerLoginResp::nickname() const {
  // @@protoc_insertion_point(field_get:MsgGamePlayerLoginResp.nickname)
  return _internal_nickname();
}
inline void MsgGamePlayerLoginResp::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:MsgGamePlayerLoginResp.nickname)
}
inline std::string* MsgGamePlayerLoginResp::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:MsgGamePlayerLoginResp.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& MsgGamePlayerLoginResp::_internal_nickname() const {
  return nickname_.Get();
}
inline void MsgGamePlayerLoginResp::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgGamePlayerLoginResp::set_nickname(std::string&& value) {
  
  nickname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgGamePlayerLoginResp.nickname)
}
inline void MsgGamePlayerLoginResp::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgGamePlayerLoginResp.nickname)
}
inline void MsgGamePlayerLoginResp::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgGamePlayerLoginResp.nickname)
}
inline std::string* MsgGamePlayerLoginResp::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgGamePlayerLoginResp::release_nickname() {
  // @@protoc_insertion_point(field_release:MsgGamePlayerLoginResp.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgGamePlayerLoginResp::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgGamePlayerLoginResp.nickname)
}

// string avatar = 5;
inline void MsgGamePlayerLoginResp::clear_avatar() {
  avatar_.ClearToEmpty();
}
inline const std::string& MsgGamePlayerLoginResp::avatar() const {
  // @@protoc_insertion_point(field_get:MsgGamePlayerLoginResp.avatar)
  return _internal_avatar();
}
inline void MsgGamePlayerLoginResp::set_avatar(const std::string& value) {
  _internal_set_avatar(value);
  // @@protoc_insertion_point(field_set:MsgGamePlayerLoginResp.avatar)
}
inline std::string* MsgGamePlayerLoginResp::mutable_avatar() {
  // @@protoc_insertion_point(field_mutable:MsgGamePlayerLoginResp.avatar)
  return _internal_mutable_avatar();
}
inline const std::string& MsgGamePlayerLoginResp::_internal_avatar() const {
  return avatar_.Get();
}
inline void MsgGamePlayerLoginResp::_internal_set_avatar(const std::string& value) {
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgGamePlayerLoginResp::set_avatar(std::string&& value) {
  
  avatar_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgGamePlayerLoginResp.avatar)
}
inline void MsgGamePlayerLoginResp::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgGamePlayerLoginResp.avatar)
}
inline void MsgGamePlayerLoginResp::set_avatar(const char* value,
    size_t size) {
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgGamePlayerLoginResp.avatar)
}
inline std::string* MsgGamePlayerLoginResp::_internal_mutable_avatar() {
  
  return avatar_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgGamePlayerLoginResp::release_avatar() {
  // @@protoc_insertion_point(field_release:MsgGamePlayerLoginResp.avatar)
  return avatar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgGamePlayerLoginResp::set_allocated_avatar(std::string* avatar) {
  if (avatar != nullptr) {
    
  } else {
    
  }
  avatar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgGamePlayerLoginResp.avatar)
}

// uint64 coin = 6;
inline void MsgGamePlayerLoginResp::clear_coin() {
  coin_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MsgGamePlayerLoginResp::_internal_coin() const {
  return coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MsgGamePlayerLoginResp::coin() const {
  // @@protoc_insertion_point(field_get:MsgGamePlayerLoginResp.coin)
  return _internal_coin();
}
inline void MsgGamePlayerLoginResp::_internal_set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  coin_ = value;
}
inline void MsgGamePlayerLoginResp::set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coin(value);
  // @@protoc_insertion_point(field_set:MsgGamePlayerLoginResp.coin)
}

// -------------------------------------------------------------------

// MsgSyncPlayersScore

// int32 chair_id = 1;
inline void MsgSyncPlayersScore::clear_chair_id() {
  chair_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSyncPlayersScore::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSyncPlayersScore::chair_id() const {
  // @@protoc_insertion_point(field_get:MsgSyncPlayersScore.chair_id)
  return _internal_chair_id();
}
inline void MsgSyncPlayersScore::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_id_ = value;
}
inline void MsgSyncPlayersScore::set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:MsgSyncPlayersScore.chair_id)
}

// uint64 coin = 2;
inline void MsgSyncPlayersScore::clear_coin() {
  coin_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MsgSyncPlayersScore::_internal_coin() const {
  return coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MsgSyncPlayersScore::coin() const {
  // @@protoc_insertion_point(field_get:MsgSyncPlayersScore.coin)
  return _internal_coin();
}
inline void MsgSyncPlayersScore::_internal_set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  coin_ = value;
}
inline void MsgSyncPlayersScore::set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coin(value);
  // @@protoc_insertion_point(field_set:MsgSyncPlayersScore.coin)
}

// -------------------------------------------------------------------

// MsgRoundData

// int32 time = 1;
inline void MsgRoundData::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRoundData::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRoundData::time() const {
  // @@protoc_insertion_point(field_get:MsgRoundData.time)
  return _internal_time();
}
inline void MsgRoundData::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void MsgRoundData::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:MsgRoundData.time)
}

// int32 win_user_id = 2;
inline void MsgRoundData::clear_win_user_id() {
  win_user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRoundData::_internal_win_user_id() const {
  return win_user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRoundData::win_user_id() const {
  // @@protoc_insertion_point(field_get:MsgRoundData.win_user_id)
  return _internal_win_user_id();
}
inline void MsgRoundData::_internal_set_win_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  win_user_id_ = value;
}
inline void MsgRoundData::set_win_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_win_user_id(value);
  // @@protoc_insertion_point(field_set:MsgRoundData.win_user_id)
}

// int32 lose_user_id = 3;
inline void MsgRoundData::clear_lose_user_id() {
  lose_user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRoundData::_internal_lose_user_id() const {
  return lose_user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRoundData::lose_user_id() const {
  // @@protoc_insertion_point(field_get:MsgRoundData.lose_user_id)
  return _internal_lose_user_id();
}
inline void MsgRoundData::_internal_set_lose_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lose_user_id_ = value;
}
inline void MsgRoundData::set_lose_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lose_user_id(value);
  // @@protoc_insertion_point(field_set:MsgRoundData.lose_user_id)
}

// int64 gold = 4;
inline void MsgRoundData::clear_gold() {
  gold_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgRoundData::_internal_gold() const {
  return gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgRoundData::gold() const {
  // @@protoc_insertion_point(field_get:MsgRoundData.gold)
  return _internal_gold();
}
inline void MsgRoundData::_internal_set_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gold_ = value;
}
inline void MsgRoundData::set_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:MsgRoundData.gold)
}

// -------------------------------------------------------------------

// MsgTotalRoundData

// int32 total_num = 1;
inline void MsgTotalRoundData::clear_total_num() {
  total_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgTotalRoundData::_internal_total_num() const {
  return total_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgTotalRoundData::total_num() const {
  // @@protoc_insertion_point(field_get:MsgTotalRoundData.total_num)
  return _internal_total_num();
}
inline void MsgTotalRoundData::_internal_set_total_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_num_ = value;
}
inline void MsgTotalRoundData::set_total_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_num(value);
  // @@protoc_insertion_point(field_set:MsgTotalRoundData.total_num)
}

// repeated .MsgRoundData round_data = 2;
inline int MsgTotalRoundData::_internal_round_data_size() const {
  return round_data_.size();
}
inline int MsgTotalRoundData::round_data_size() const {
  return _internal_round_data_size();
}
inline void MsgTotalRoundData::clear_round_data() {
  round_data_.Clear();
}
inline ::MsgRoundData* MsgTotalRoundData::mutable_round_data(int index) {
  // @@protoc_insertion_point(field_mutable:MsgTotalRoundData.round_data)
  return round_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MsgRoundData >*
MsgTotalRoundData::mutable_round_data() {
  // @@protoc_insertion_point(field_mutable_list:MsgTotalRoundData.round_data)
  return &round_data_;
}
inline const ::MsgRoundData& MsgTotalRoundData::_internal_round_data(int index) const {
  return round_data_.Get(index);
}
inline const ::MsgRoundData& MsgTotalRoundData::round_data(int index) const {
  // @@protoc_insertion_point(field_get:MsgTotalRoundData.round_data)
  return _internal_round_data(index);
}
inline ::MsgRoundData* MsgTotalRoundData::_internal_add_round_data() {
  return round_data_.Add();
}
inline ::MsgRoundData* MsgTotalRoundData::add_round_data() {
  // @@protoc_insertion_point(field_add:MsgTotalRoundData.round_data)
  return _internal_add_round_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MsgRoundData >&
MsgTotalRoundData::round_data() const {
  // @@protoc_insertion_point(field_list:MsgTotalRoundData.round_data)
  return round_data_;
}

// -------------------------------------------------------------------

// MsgDayData

// string time = 1;
inline void MsgDayData::clear_time() {
  time_.ClearToEmpty();
}
inline const std::string& MsgDayData::time() const {
  // @@protoc_insertion_point(field_get:MsgDayData.time)
  return _internal_time();
}
inline void MsgDayData::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:MsgDayData.time)
}
inline std::string* MsgDayData::mutable_time() {
  // @@protoc_insertion_point(field_mutable:MsgDayData.time)
  return _internal_mutable_time();
}
inline const std::string& MsgDayData::_internal_time() const {
  return time_.Get();
}
inline void MsgDayData::_internal_set_time(const std::string& value) {
  
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgDayData::set_time(std::string&& value) {
  
  time_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgDayData.time)
}
inline void MsgDayData::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgDayData.time)
}
inline void MsgDayData::set_time(const char* value,
    size_t size) {
  
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgDayData.time)
}
inline std::string* MsgDayData::_internal_mutable_time() {
  
  return time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgDayData::release_time() {
  // @@protoc_insertion_point(field_release:MsgDayData.time)
  return time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgDayData::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgDayData.time)
}

// int32 total_play_count = 2;
inline void MsgDayData::clear_total_play_count() {
  total_play_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDayData::_internal_total_play_count() const {
  return total_play_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDayData::total_play_count() const {
  // @@protoc_insertion_point(field_get:MsgDayData.total_play_count)
  return _internal_total_play_count();
}
inline void MsgDayData::_internal_set_total_play_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_play_count_ = value;
}
inline void MsgDayData::set_total_play_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_play_count(value);
  // @@protoc_insertion_point(field_set:MsgDayData.total_play_count)
}

// int32 lose_count = 3;
inline void MsgDayData::clear_lose_count() {
  lose_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDayData::_internal_lose_count() const {
  return lose_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDayData::lose_count() const {
  // @@protoc_insertion_point(field_get:MsgDayData.lose_count)
  return _internal_lose_count();
}
inline void MsgDayData::_internal_set_lose_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lose_count_ = value;
}
inline void MsgDayData::set_lose_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lose_count(value);
  // @@protoc_insertion_point(field_set:MsgDayData.lose_count)
}

// int64 lose_gold = 4;
inline void MsgDayData::clear_lose_gold() {
  lose_gold_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgDayData::_internal_lose_gold() const {
  return lose_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgDayData::lose_gold() const {
  // @@protoc_insertion_point(field_get:MsgDayData.lose_gold)
  return _internal_lose_gold();
}
inline void MsgDayData::_internal_set_lose_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lose_gold_ = value;
}
inline void MsgDayData::set_lose_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lose_gold(value);
  // @@protoc_insertion_point(field_set:MsgDayData.lose_gold)
}

// int32 win_count = 5;
inline void MsgDayData::clear_win_count() {
  win_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDayData::_internal_win_count() const {
  return win_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDayData::win_count() const {
  // @@protoc_insertion_point(field_get:MsgDayData.win_count)
  return _internal_win_count();
}
inline void MsgDayData::_internal_set_win_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  win_count_ = value;
}
inline void MsgDayData::set_win_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_win_count(value);
  // @@protoc_insertion_point(field_set:MsgDayData.win_count)
}

// int64 win_gold = 6;
inline void MsgDayData::clear_win_gold() {
  win_gold_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgDayData::_internal_win_gold() const {
  return win_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgDayData::win_gold() const {
  // @@protoc_insertion_point(field_get:MsgDayData.win_gold)
  return _internal_win_gold();
}
inline void MsgDayData::_internal_set_win_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  win_gold_ = value;
}
inline void MsgDayData::set_win_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_win_gold(value);
  // @@protoc_insertion_point(field_set:MsgDayData.win_gold)
}

// int64 total_gold = 7;
inline void MsgDayData::clear_total_gold() {
  total_gold_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgDayData::_internal_total_gold() const {
  return total_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgDayData::total_gold() const {
  // @@protoc_insertion_point(field_get:MsgDayData.total_gold)
  return _internal_total_gold();
}
inline void MsgDayData::_internal_set_total_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_gold_ = value;
}
inline void MsgDayData::set_total_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_gold(value);
  // @@protoc_insertion_point(field_set:MsgDayData.total_gold)
}

// int64 surplus_gold = 8;
inline void MsgDayData::clear_surplus_gold() {
  surplus_gold_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgDayData::_internal_surplus_gold() const {
  return surplus_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgDayData::surplus_gold() const {
  // @@protoc_insertion_point(field_get:MsgDayData.surplus_gold)
  return _internal_surplus_gold();
}
inline void MsgDayData::_internal_set_surplus_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  surplus_gold_ = value;
}
inline void MsgDayData::set_surplus_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_surplus_gold(value);
  // @@protoc_insertion_point(field_set:MsgDayData.surplus_gold)
}

// -------------------------------------------------------------------

// MsgTotalDayData

// int32 total_num = 1;
inline void MsgTotalDayData::clear_total_num() {
  total_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgTotalDayData::_internal_total_num() const {
  return total_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgTotalDayData::total_num() const {
  // @@protoc_insertion_point(field_get:MsgTotalDayData.total_num)
  return _internal_total_num();
}
inline void MsgTotalDayData::_internal_set_total_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_num_ = value;
}
inline void MsgTotalDayData::set_total_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_num(value);
  // @@protoc_insertion_point(field_set:MsgTotalDayData.total_num)
}

// repeated .MsgDayData daily_data = 2;
inline int MsgTotalDayData::_internal_daily_data_size() const {
  return daily_data_.size();
}
inline int MsgTotalDayData::daily_data_size() const {
  return _internal_daily_data_size();
}
inline void MsgTotalDayData::clear_daily_data() {
  daily_data_.Clear();
}
inline ::MsgDayData* MsgTotalDayData::mutable_daily_data(int index) {
  // @@protoc_insertion_point(field_mutable:MsgTotalDayData.daily_data)
  return daily_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MsgDayData >*
MsgTotalDayData::mutable_daily_data() {
  // @@protoc_insertion_point(field_mutable_list:MsgTotalDayData.daily_data)
  return &daily_data_;
}
inline const ::MsgDayData& MsgTotalDayData::_internal_daily_data(int index) const {
  return daily_data_.Get(index);
}
inline const ::MsgDayData& MsgTotalDayData::daily_data(int index) const {
  // @@protoc_insertion_point(field_get:MsgTotalDayData.daily_data)
  return _internal_daily_data(index);
}
inline ::MsgDayData* MsgTotalDayData::_internal_add_daily_data() {
  return daily_data_.Add();
}
inline ::MsgDayData* MsgTotalDayData::add_daily_data() {
  // @@protoc_insertion_point(field_add:MsgTotalDayData.daily_data)
  return _internal_add_daily_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MsgDayData >&
MsgTotalDayData::daily_data() const {
  // @@protoc_insertion_point(field_list:MsgTotalDayData.daily_data)
  return daily_data_;
}

// -------------------------------------------------------------------

// MsgQueryRecord

// int32 page = 1;
inline void MsgQueryRecord::clear_page() {
  page_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgQueryRecord::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgQueryRecord::page() const {
  // @@protoc_insertion_point(field_get:MsgQueryRecord.page)
  return _internal_page();
}
inline void MsgQueryRecord::_internal_set_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_ = value;
}
inline void MsgQueryRecord::set_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:MsgQueryRecord.page)
}

// int32 num = 2;
inline void MsgQueryRecord::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgQueryRecord::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgQueryRecord::num() const {
  // @@protoc_insertion_point(field_get:MsgQueryRecord.num)
  return _internal_num();
}
inline void MsgQueryRecord::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void MsgQueryRecord::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:MsgQueryRecord.num)
}

// int32 type = 3;
inline void MsgQueryRecord::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgQueryRecord::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgQueryRecord::type() const {
  // @@protoc_insertion_point(field_get:MsgQueryRecord.type)
  return _internal_type();
}
inline void MsgQueryRecord::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void MsgQueryRecord::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:MsgQueryRecord.type)
}

// -------------------------------------------------------------------

// MsgJackpotInfo

// int64 jackpot = 1;
inline void MsgJackpotInfo::clear_jackpot() {
  jackpot_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgJackpotInfo::_internal_jackpot() const {
  return jackpot_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgJackpotInfo::jackpot() const {
  // @@protoc_insertion_point(field_get:MsgJackpotInfo.jackpot)
  return _internal_jackpot();
}
inline void MsgJackpotInfo::_internal_set_jackpot(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  jackpot_ = value;
}
inline void MsgJackpotInfo::set_jackpot(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_jackpot(value);
  // @@protoc_insertion_point(field_set:MsgJackpotInfo.jackpot)
}

// int64 fake_jackpot = 2;
inline void MsgJackpotInfo::clear_fake_jackpot() {
  fake_jackpot_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgJackpotInfo::_internal_fake_jackpot() const {
  return fake_jackpot_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgJackpotInfo::fake_jackpot() const {
  // @@protoc_insertion_point(field_get:MsgJackpotInfo.fake_jackpot)
  return _internal_fake_jackpot();
}
inline void MsgJackpotInfo::_internal_set_fake_jackpot(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fake_jackpot_ = value;
}
inline void MsgJackpotInfo::set_fake_jackpot(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fake_jackpot(value);
  // @@protoc_insertion_point(field_set:MsgJackpotInfo.fake_jackpot)
}

// -------------------------------------------------------------------

// MsgPvpTableInfo

// int32 table_id = 1;
inline void MsgPvpTableInfo::clear_table_id() {
  table_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpTableInfo::_internal_table_id() const {
  return table_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpTableInfo::table_id() const {
  // @@protoc_insertion_point(field_get:MsgPvpTableInfo.table_id)
  return _internal_table_id();
}
inline void MsgPvpTableInfo::_internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  table_id_ = value;
}
inline void MsgPvpTableInfo::set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:MsgPvpTableInfo.table_id)
}

// string table_name = 2;
inline void MsgPvpTableInfo::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& MsgPvpTableInfo::table_name() const {
  // @@protoc_insertion_point(field_get:MsgPvpTableInfo.table_name)
  return _internal_table_name();
}
inline void MsgPvpTableInfo::set_table_name(const std::string& value) {
  _internal_set_table_name(value);
  // @@protoc_insertion_point(field_set:MsgPvpTableInfo.table_name)
}
inline std::string* MsgPvpTableInfo::mutable_table_name() {
  // @@protoc_insertion_point(field_mutable:MsgPvpTableInfo.table_name)
  return _internal_mutable_table_name();
}
inline const std::string& MsgPvpTableInfo::_internal_table_name() const {
  return table_name_.Get();
}
inline void MsgPvpTableInfo::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgPvpTableInfo::set_table_name(std::string&& value) {
  
  table_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgPvpTableInfo.table_name)
}
inline void MsgPvpTableInfo::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgPvpTableInfo.table_name)
}
inline void MsgPvpTableInfo::set_table_name(const char* value,
    size_t size) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgPvpTableInfo.table_name)
}
inline std::string* MsgPvpTableInfo::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgPvpTableInfo::release_table_name() {
  // @@protoc_insertion_point(field_release:MsgPvpTableInfo.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgPvpTableInfo::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgPvpTableInfo.table_name)
}

// int32 chair_num = 3;
inline void MsgPvpTableInfo::clear_chair_num() {
  chair_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpTableInfo::_internal_chair_num() const {
  return chair_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpTableInfo::chair_num() const {
  // @@protoc_insertion_point(field_get:MsgPvpTableInfo.chair_num)
  return _internal_chair_num();
}
inline void MsgPvpTableInfo::_internal_set_chair_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_num_ = value;
}
inline void MsgPvpTableInfo::set_chair_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_num(value);
  // @@protoc_insertion_point(field_set:MsgPvpTableInfo.chair_num)
}

// int32 enter_num = 4;
inline void MsgPvpTableInfo::clear_enter_num() {
  enter_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpTableInfo::_internal_enter_num() const {
  return enter_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpTableInfo::enter_num() const {
  // @@protoc_insertion_point(field_get:MsgPvpTableInfo.enter_num)
  return _internal_enter_num();
}
inline void MsgPvpTableInfo::_internal_set_enter_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  enter_num_ = value;
}
inline void MsgPvpTableInfo::set_enter_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_enter_num(value);
  // @@protoc_insertion_point(field_set:MsgPvpTableInfo.enter_num)
}

// int32 play_num = 5;
inline void MsgPvpTableInfo::clear_play_num() {
  play_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpTableInfo::_internal_play_num() const {
  return play_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpTableInfo::play_num() const {
  // @@protoc_insertion_point(field_get:MsgPvpTableInfo.play_num)
  return _internal_play_num();
}
inline void MsgPvpTableInfo::_internal_set_play_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  play_num_ = value;
}
inline void MsgPvpTableInfo::set_play_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_play_num(value);
  // @@protoc_insertion_point(field_set:MsgPvpTableInfo.play_num)
}

// bool is_activate = 6;
inline void MsgPvpTableInfo::clear_is_activate() {
  is_activate_ = false;
}
inline bool MsgPvpTableInfo::_internal_is_activate() const {
  return is_activate_;
}
inline bool MsgPvpTableInfo::is_activate() const {
  // @@protoc_insertion_point(field_get:MsgPvpTableInfo.is_activate)
  return _internal_is_activate();
}
inline void MsgPvpTableInfo::_internal_set_is_activate(bool value) {
  
  is_activate_ = value;
}
inline void MsgPvpTableInfo::set_is_activate(bool value) {
  _internal_set_is_activate(value);
  // @@protoc_insertion_point(field_set:MsgPvpTableInfo.is_activate)
}

// bool is_private = 7;
inline void MsgPvpTableInfo::clear_is_private() {
  is_private_ = false;
}
inline bool MsgPvpTableInfo::_internal_is_private() const {
  return is_private_;
}
inline bool MsgPvpTableInfo::is_private() const {
  // @@protoc_insertion_point(field_get:MsgPvpTableInfo.is_private)
  return _internal_is_private();
}
inline void MsgPvpTableInfo::_internal_set_is_private(bool value) {
  
  is_private_ = value;
}
inline void MsgPvpTableInfo::set_is_private(bool value) {
  _internal_set_is_private(value);
  // @@protoc_insertion_point(field_set:MsgPvpTableInfo.is_private)
}

// string password = 8;
inline void MsgPvpTableInfo::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& MsgPvpTableInfo::password() const {
  // @@protoc_insertion_point(field_get:MsgPvpTableInfo.password)
  return _internal_password();
}
inline void MsgPvpTableInfo::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:MsgPvpTableInfo.password)
}
inline std::string* MsgPvpTableInfo::mutable_password() {
  // @@protoc_insertion_point(field_mutable:MsgPvpTableInfo.password)
  return _internal_mutable_password();
}
inline const std::string& MsgPvpTableInfo::_internal_password() const {
  return password_.Get();
}
inline void MsgPvpTableInfo::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgPvpTableInfo::set_password(std::string&& value) {
  
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgPvpTableInfo.password)
}
inline void MsgPvpTableInfo::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgPvpTableInfo.password)
}
inline void MsgPvpTableInfo::set_password(const char* value,
    size_t size) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgPvpTableInfo.password)
}
inline std::string* MsgPvpTableInfo::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgPvpTableInfo::release_password() {
  // @@protoc_insertion_point(field_release:MsgPvpTableInfo.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgPvpTableInfo::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgPvpTableInfo.password)
}

// int32 owner_id = 9;
inline void MsgPvpTableInfo::clear_owner_id() {
  owner_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpTableInfo::_internal_owner_id() const {
  return owner_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpTableInfo::owner_id() const {
  // @@protoc_insertion_point(field_get:MsgPvpTableInfo.owner_id)
  return _internal_owner_id();
}
inline void MsgPvpTableInfo::_internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  owner_id_ = value;
}
inline void MsgPvpTableInfo::set_owner_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:MsgPvpTableInfo.owner_id)
}

// int32 table_no = 10;
inline void MsgPvpTableInfo::clear_table_no() {
  table_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpTableInfo::_internal_table_no() const {
  return table_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpTableInfo::table_no() const {
  // @@protoc_insertion_point(field_get:MsgPvpTableInfo.table_no)
  return _internal_table_no();
}
inline void MsgPvpTableInfo::_internal_set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  table_no_ = value;
}
inline void MsgPvpTableInfo::set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_table_no(value);
  // @@protoc_insertion_point(field_set:MsgPvpTableInfo.table_no)
}

// int64 value1 = 11;
inline void MsgPvpTableInfo::clear_value1() {
  value1_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgPvpTableInfo::_internal_value1() const {
  return value1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgPvpTableInfo::value1() const {
  // @@protoc_insertion_point(field_get:MsgPvpTableInfo.value1)
  return _internal_value1();
}
inline void MsgPvpTableInfo::_internal_set_value1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value1_ = value;
}
inline void MsgPvpTableInfo::set_value1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value1(value);
  // @@protoc_insertion_point(field_set:MsgPvpTableInfo.value1)
}

// int64 value2 = 12;
inline void MsgPvpTableInfo::clear_value2() {
  value2_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgPvpTableInfo::_internal_value2() const {
  return value2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgPvpTableInfo::value2() const {
  // @@protoc_insertion_point(field_get:MsgPvpTableInfo.value2)
  return _internal_value2();
}
inline void MsgPvpTableInfo::_internal_set_value2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value2_ = value;
}
inline void MsgPvpTableInfo::set_value2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value2(value);
  // @@protoc_insertion_point(field_set:MsgPvpTableInfo.value2)
}

// int64 value3 = 13;
inline void MsgPvpTableInfo::clear_value3() {
  value3_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgPvpTableInfo::_internal_value3() const {
  return value3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgPvpTableInfo::value3() const {
  // @@protoc_insertion_point(field_get:MsgPvpTableInfo.value3)
  return _internal_value3();
}
inline void MsgPvpTableInfo::_internal_set_value3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value3_ = value;
}
inline void MsgPvpTableInfo::set_value3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value3(value);
  // @@protoc_insertion_point(field_set:MsgPvpTableInfo.value3)
}

// int64 value4 = 14;
inline void MsgPvpTableInfo::clear_value4() {
  value4_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgPvpTableInfo::_internal_value4() const {
  return value4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgPvpTableInfo::value4() const {
  // @@protoc_insertion_point(field_get:MsgPvpTableInfo.value4)
  return _internal_value4();
}
inline void MsgPvpTableInfo::_internal_set_value4(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value4_ = value;
}
inline void MsgPvpTableInfo::set_value4(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value4(value);
  // @@protoc_insertion_point(field_set:MsgPvpTableInfo.value4)
}

// int64 value5 = 15;
inline void MsgPvpTableInfo::clear_value5() {
  value5_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgPvpTableInfo::_internal_value5() const {
  return value5_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgPvpTableInfo::value5() const {
  // @@protoc_insertion_point(field_get:MsgPvpTableInfo.value5)
  return _internal_value5();
}
inline void MsgPvpTableInfo::_internal_set_value5(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value5_ = value;
}
inline void MsgPvpTableInfo::set_value5(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value5(value);
  // @@protoc_insertion_point(field_set:MsgPvpTableInfo.value5)
}

// int64 value6 = 16;
inline void MsgPvpTableInfo::clear_value6() {
  value6_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgPvpTableInfo::_internal_value6() const {
  return value6_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgPvpTableInfo::value6() const {
  // @@protoc_insertion_point(field_get:MsgPvpTableInfo.value6)
  return _internal_value6();
}
inline void MsgPvpTableInfo::_internal_set_value6(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value6_ = value;
}
inline void MsgPvpTableInfo::set_value6(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value6(value);
  // @@protoc_insertion_point(field_set:MsgPvpTableInfo.value6)
}

// int64 value7 = 17;
inline void MsgPvpTableInfo::clear_value7() {
  value7_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgPvpTableInfo::_internal_value7() const {
  return value7_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgPvpTableInfo::value7() const {
  // @@protoc_insertion_point(field_get:MsgPvpTableInfo.value7)
  return _internal_value7();
}
inline void MsgPvpTableInfo::_internal_set_value7(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value7_ = value;
}
inline void MsgPvpTableInfo::set_value7(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value7(value);
  // @@protoc_insertion_point(field_set:MsgPvpTableInfo.value7)
}

// int64 value8 = 18;
inline void MsgPvpTableInfo::clear_value8() {
  value8_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgPvpTableInfo::_internal_value8() const {
  return value8_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgPvpTableInfo::value8() const {
  // @@protoc_insertion_point(field_get:MsgPvpTableInfo.value8)
  return _internal_value8();
}
inline void MsgPvpTableInfo::_internal_set_value8(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value8_ = value;
}
inline void MsgPvpTableInfo::set_value8(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value8(value);
  // @@protoc_insertion_point(field_set:MsgPvpTableInfo.value8)
}

// -------------------------------------------------------------------

// MsgPvpRoomCfgItem

// int32 lag_key = 1;
inline void MsgPvpRoomCfgItem::clear_lag_key() {
  lag_key_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpRoomCfgItem::_internal_lag_key() const {
  return lag_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpRoomCfgItem::lag_key() const {
  // @@protoc_insertion_point(field_get:MsgPvpRoomCfgItem.lag_key)
  return _internal_lag_key();
}
inline void MsgPvpRoomCfgItem::_internal_set_lag_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lag_key_ = value;
}
inline void MsgPvpRoomCfgItem::set_lag_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lag_key(value);
  // @@protoc_insertion_point(field_set:MsgPvpRoomCfgItem.lag_key)
}

// int32 clinet_open = 2;
inline void MsgPvpRoomCfgItem::clear_clinet_open() {
  clinet_open_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpRoomCfgItem::_internal_clinet_open() const {
  return clinet_open_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpRoomCfgItem::clinet_open() const {
  // @@protoc_insertion_point(field_get:MsgPvpRoomCfgItem.clinet_open)
  return _internal_clinet_open();
}
inline void MsgPvpRoomCfgItem::_internal_set_clinet_open(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  clinet_open_ = value;
}
inline void MsgPvpRoomCfgItem::set_clinet_open(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clinet_open(value);
  // @@protoc_insertion_point(field_set:MsgPvpRoomCfgItem.clinet_open)
}

// int32 can_select = 3;
inline void MsgPvpRoomCfgItem::clear_can_select() {
  can_select_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpRoomCfgItem::_internal_can_select() const {
  return can_select_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpRoomCfgItem::can_select() const {
  // @@protoc_insertion_point(field_get:MsgPvpRoomCfgItem.can_select)
  return _internal_can_select();
}
inline void MsgPvpRoomCfgItem::_internal_set_can_select(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  can_select_ = value;
}
inline void MsgPvpRoomCfgItem::set_can_select(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_select(value);
  // @@protoc_insertion_point(field_set:MsgPvpRoomCfgItem.can_select)
}

// repeated int32 value_list = 4;
inline int MsgPvpRoomCfgItem::_internal_value_list_size() const {
  return value_list_.size();
}
inline int MsgPvpRoomCfgItem::value_list_size() const {
  return _internal_value_list_size();
}
inline void MsgPvpRoomCfgItem::clear_value_list() {
  value_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpRoomCfgItem::_internal_value_list(int index) const {
  return value_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpRoomCfgItem::value_list(int index) const {
  // @@protoc_insertion_point(field_get:MsgPvpRoomCfgItem.value_list)
  return _internal_value_list(index);
}
inline void MsgPvpRoomCfgItem::set_value_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  value_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:MsgPvpRoomCfgItem.value_list)
}
inline void MsgPvpRoomCfgItem::_internal_add_value_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  value_list_.Add(value);
}
inline void MsgPvpRoomCfgItem::add_value_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_value_list(value);
  // @@protoc_insertion_point(field_add:MsgPvpRoomCfgItem.value_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MsgPvpRoomCfgItem::_internal_value_list() const {
  return value_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MsgPvpRoomCfgItem::value_list() const {
  // @@protoc_insertion_point(field_list:MsgPvpRoomCfgItem.value_list)
  return _internal_value_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MsgPvpRoomCfgItem::_internal_mutable_value_list() {
  return &value_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MsgPvpRoomCfgItem::mutable_value_list() {
  // @@protoc_insertion_point(field_mutable_list:MsgPvpRoomCfgItem.value_list)
  return _internal_mutable_value_list();
}

// -------------------------------------------------------------------

// MsgPvpRoomConfig

// int32 create_vip_limit = 1;
inline void MsgPvpRoomConfig::clear_create_vip_limit() {
  create_vip_limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpRoomConfig::_internal_create_vip_limit() const {
  return create_vip_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpRoomConfig::create_vip_limit() const {
  // @@protoc_insertion_point(field_get:MsgPvpRoomConfig.create_vip_limit)
  return _internal_create_vip_limit();
}
inline void MsgPvpRoomConfig::_internal_set_create_vip_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  create_vip_limit_ = value;
}
inline void MsgPvpRoomConfig::set_create_vip_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_create_vip_limit(value);
  // @@protoc_insertion_point(field_set:MsgPvpRoomConfig.create_vip_limit)
}

// int32 chair_limit_min = 2;
inline void MsgPvpRoomConfig::clear_chair_limit_min() {
  chair_limit_min_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpRoomConfig::_internal_chair_limit_min() const {
  return chair_limit_min_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpRoomConfig::chair_limit_min() const {
  // @@protoc_insertion_point(field_get:MsgPvpRoomConfig.chair_limit_min)
  return _internal_chair_limit_min();
}
inline void MsgPvpRoomConfig::_internal_set_chair_limit_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_limit_min_ = value;
}
inline void MsgPvpRoomConfig::set_chair_limit_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_limit_min(value);
  // @@protoc_insertion_point(field_set:MsgPvpRoomConfig.chair_limit_min)
}

// int32 chair_limit_max = 3;
inline void MsgPvpRoomConfig::clear_chair_limit_max() {
  chair_limit_max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpRoomConfig::_internal_chair_limit_max() const {
  return chair_limit_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpRoomConfig::chair_limit_max() const {
  // @@protoc_insertion_point(field_get:MsgPvpRoomConfig.chair_limit_max)
  return _internal_chair_limit_max();
}
inline void MsgPvpRoomConfig::_internal_set_chair_limit_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_limit_max_ = value;
}
inline void MsgPvpRoomConfig::set_chair_limit_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_limit_max(value);
  // @@protoc_insertion_point(field_set:MsgPvpRoomConfig.chair_limit_max)
}

// int32 max_round = 4;
inline void MsgPvpRoomConfig::clear_max_round() {
  max_round_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpRoomConfig::_internal_max_round() const {
  return max_round_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpRoomConfig::max_round() const {
  // @@protoc_insertion_point(field_get:MsgPvpRoomConfig.max_round)
  return _internal_max_round();
}
inline void MsgPvpRoomConfig::_internal_set_max_round(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_round_ = value;
}
inline void MsgPvpRoomConfig::set_max_round(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_round(value);
  // @@protoc_insertion_point(field_set:MsgPvpRoomConfig.max_round)
}

// repeated .MsgPvpRoomCfgItem para_lsit = 11;
inline int MsgPvpRoomConfig::_internal_para_lsit_size() const {
  return para_lsit_.size();
}
inline int MsgPvpRoomConfig::para_lsit_size() const {
  return _internal_para_lsit_size();
}
inline void MsgPvpRoomConfig::clear_para_lsit() {
  para_lsit_.Clear();
}
inline ::MsgPvpRoomCfgItem* MsgPvpRoomConfig::mutable_para_lsit(int index) {
  // @@protoc_insertion_point(field_mutable:MsgPvpRoomConfig.para_lsit)
  return para_lsit_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MsgPvpRoomCfgItem >*
MsgPvpRoomConfig::mutable_para_lsit() {
  // @@protoc_insertion_point(field_mutable_list:MsgPvpRoomConfig.para_lsit)
  return &para_lsit_;
}
inline const ::MsgPvpRoomCfgItem& MsgPvpRoomConfig::_internal_para_lsit(int index) const {
  return para_lsit_.Get(index);
}
inline const ::MsgPvpRoomCfgItem& MsgPvpRoomConfig::para_lsit(int index) const {
  // @@protoc_insertion_point(field_get:MsgPvpRoomConfig.para_lsit)
  return _internal_para_lsit(index);
}
inline ::MsgPvpRoomCfgItem* MsgPvpRoomConfig::_internal_add_para_lsit() {
  return para_lsit_.Add();
}
inline ::MsgPvpRoomCfgItem* MsgPvpRoomConfig::add_para_lsit() {
  // @@protoc_insertion_point(field_add:MsgPvpRoomConfig.para_lsit)
  return _internal_add_para_lsit();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MsgPvpRoomCfgItem >&
MsgPvpRoomConfig::para_lsit() const {
  // @@protoc_insertion_point(field_list:MsgPvpRoomConfig.para_lsit)
  return para_lsit_;
}

// -------------------------------------------------------------------

// MsgPvpTableList

// repeated .MsgPvpTableInfo table_list = 1;
inline int MsgPvpTableList::_internal_table_list_size() const {
  return table_list_.size();
}
inline int MsgPvpTableList::table_list_size() const {
  return _internal_table_list_size();
}
inline void MsgPvpTableList::clear_table_list() {
  table_list_.Clear();
}
inline ::MsgPvpTableInfo* MsgPvpTableList::mutable_table_list(int index) {
  // @@protoc_insertion_point(field_mutable:MsgPvpTableList.table_list)
  return table_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MsgPvpTableInfo >*
MsgPvpTableList::mutable_table_list() {
  // @@protoc_insertion_point(field_mutable_list:MsgPvpTableList.table_list)
  return &table_list_;
}
inline const ::MsgPvpTableInfo& MsgPvpTableList::_internal_table_list(int index) const {
  return table_list_.Get(index);
}
inline const ::MsgPvpTableInfo& MsgPvpTableList::table_list(int index) const {
  // @@protoc_insertion_point(field_get:MsgPvpTableList.table_list)
  return _internal_table_list(index);
}
inline ::MsgPvpTableInfo* MsgPvpTableList::_internal_add_table_list() {
  return table_list_.Add();
}
inline ::MsgPvpTableInfo* MsgPvpTableList::add_table_list() {
  // @@protoc_insertion_point(field_add:MsgPvpTableList.table_list)
  return _internal_add_table_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MsgPvpTableInfo >&
MsgPvpTableList::table_list() const {
  // @@protoc_insertion_point(field_list:MsgPvpTableList.table_list)
  return table_list_;
}

// -------------------------------------------------------------------

// MsgPvpCreateTable

// bool is_private = 1;
inline void MsgPvpCreateTable::clear_is_private() {
  is_private_ = false;
}
inline bool MsgPvpCreateTable::_internal_is_private() const {
  return is_private_;
}
inline bool MsgPvpCreateTable::is_private() const {
  // @@protoc_insertion_point(field_get:MsgPvpCreateTable.is_private)
  return _internal_is_private();
}
inline void MsgPvpCreateTable::_internal_set_is_private(bool value) {
  
  is_private_ = value;
}
inline void MsgPvpCreateTable::set_is_private(bool value) {
  _internal_set_is_private(value);
  // @@protoc_insertion_point(field_set:MsgPvpCreateTable.is_private)
}

// string table_name = 2;
inline void MsgPvpCreateTable::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& MsgPvpCreateTable::table_name() const {
  // @@protoc_insertion_point(field_get:MsgPvpCreateTable.table_name)
  return _internal_table_name();
}
inline void MsgPvpCreateTable::set_table_name(const std::string& value) {
  _internal_set_table_name(value);
  // @@protoc_insertion_point(field_set:MsgPvpCreateTable.table_name)
}
inline std::string* MsgPvpCreateTable::mutable_table_name() {
  // @@protoc_insertion_point(field_mutable:MsgPvpCreateTable.table_name)
  return _internal_mutable_table_name();
}
inline const std::string& MsgPvpCreateTable::_internal_table_name() const {
  return table_name_.Get();
}
inline void MsgPvpCreateTable::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgPvpCreateTable::set_table_name(std::string&& value) {
  
  table_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgPvpCreateTable.table_name)
}
inline void MsgPvpCreateTable::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgPvpCreateTable.table_name)
}
inline void MsgPvpCreateTable::set_table_name(const char* value,
    size_t size) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgPvpCreateTable.table_name)
}
inline std::string* MsgPvpCreateTable::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgPvpCreateTable::release_table_name() {
  // @@protoc_insertion_point(field_release:MsgPvpCreateTable.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgPvpCreateTable::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgPvpCreateTable.table_name)
}

// int32 chair_num = 3;
inline void MsgPvpCreateTable::clear_chair_num() {
  chair_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpCreateTable::_internal_chair_num() const {
  return chair_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpCreateTable::chair_num() const {
  // @@protoc_insertion_point(field_get:MsgPvpCreateTable.chair_num)
  return _internal_chair_num();
}
inline void MsgPvpCreateTable::_internal_set_chair_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_num_ = value;
}
inline void MsgPvpCreateTable::set_chair_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_num(value);
  // @@protoc_insertion_point(field_set:MsgPvpCreateTable.chair_num)
}

// string password = 6;
inline void MsgPvpCreateTable::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& MsgPvpCreateTable::password() const {
  // @@protoc_insertion_point(field_get:MsgPvpCreateTable.password)
  return _internal_password();
}
inline void MsgPvpCreateTable::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:MsgPvpCreateTable.password)
}
inline std::string* MsgPvpCreateTable::mutable_password() {
  // @@protoc_insertion_point(field_mutable:MsgPvpCreateTable.password)
  return _internal_mutable_password();
}
inline const std::string& MsgPvpCreateTable::_internal_password() const {
  return password_.Get();
}
inline void MsgPvpCreateTable::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgPvpCreateTable::set_password(std::string&& value) {
  
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgPvpCreateTable.password)
}
inline void MsgPvpCreateTable::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgPvpCreateTable.password)
}
inline void MsgPvpCreateTable::set_password(const char* value,
    size_t size) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgPvpCreateTable.password)
}
inline std::string* MsgPvpCreateTable::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgPvpCreateTable::release_password() {
  // @@protoc_insertion_point(field_release:MsgPvpCreateTable.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgPvpCreateTable::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgPvpCreateTable.password)
}

// repeated int32 para_lsit = 7;
inline int MsgPvpCreateTable::_internal_para_lsit_size() const {
  return para_lsit_.size();
}
inline int MsgPvpCreateTable::para_lsit_size() const {
  return _internal_para_lsit_size();
}
inline void MsgPvpCreateTable::clear_para_lsit() {
  para_lsit_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpCreateTable::_internal_para_lsit(int index) const {
  return para_lsit_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpCreateTable::para_lsit(int index) const {
  // @@protoc_insertion_point(field_get:MsgPvpCreateTable.para_lsit)
  return _internal_para_lsit(index);
}
inline void MsgPvpCreateTable::set_para_lsit(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  para_lsit_.Set(index, value);
  // @@protoc_insertion_point(field_set:MsgPvpCreateTable.para_lsit)
}
inline void MsgPvpCreateTable::_internal_add_para_lsit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  para_lsit_.Add(value);
}
inline void MsgPvpCreateTable::add_para_lsit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_para_lsit(value);
  // @@protoc_insertion_point(field_add:MsgPvpCreateTable.para_lsit)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MsgPvpCreateTable::_internal_para_lsit() const {
  return para_lsit_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MsgPvpCreateTable::para_lsit() const {
  // @@protoc_insertion_point(field_list:MsgPvpCreateTable.para_lsit)
  return _internal_para_lsit();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MsgPvpCreateTable::_internal_mutable_para_lsit() {
  return &para_lsit_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MsgPvpCreateTable::mutable_para_lsit() {
  // @@protoc_insertion_point(field_mutable_list:MsgPvpCreateTable.para_lsit)
  return _internal_mutable_para_lsit();
}

// -------------------------------------------------------------------

// MsgPvpCreateTableResp

// int32 ret_code = 1;
inline void MsgPvpCreateTableResp::clear_ret_code() {
  ret_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpCreateTableResp::_internal_ret_code() const {
  return ret_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpCreateTableResp::ret_code() const {
  // @@protoc_insertion_point(field_get:MsgPvpCreateTableResp.ret_code)
  return _internal_ret_code();
}
inline void MsgPvpCreateTableResp::_internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_code_ = value;
}
inline void MsgPvpCreateTableResp::set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:MsgPvpCreateTableResp.ret_code)
}

// int32 value = 2;
inline void MsgPvpCreateTableResp::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpCreateTableResp::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpCreateTableResp::value() const {
  // @@protoc_insertion_point(field_get:MsgPvpCreateTableResp.value)
  return _internal_value();
}
inline void MsgPvpCreateTableResp::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void MsgPvpCreateTableResp::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:MsgPvpCreateTableResp.value)
}

// .MsgPvpTableInfo table_info = 3;
inline bool MsgPvpCreateTableResp::_internal_has_table_info() const {
  return this != internal_default_instance() && table_info_ != nullptr;
}
inline bool MsgPvpCreateTableResp::has_table_info() const {
  return _internal_has_table_info();
}
inline void MsgPvpCreateTableResp::clear_table_info() {
  if (GetArena() == nullptr && table_info_ != nullptr) {
    delete table_info_;
  }
  table_info_ = nullptr;
}
inline const ::MsgPvpTableInfo& MsgPvpCreateTableResp::_internal_table_info() const {
  const ::MsgPvpTableInfo* p = table_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::MsgPvpTableInfo&>(
      ::_MsgPvpTableInfo_default_instance_);
}
inline const ::MsgPvpTableInfo& MsgPvpCreateTableResp::table_info() const {
  // @@protoc_insertion_point(field_get:MsgPvpCreateTableResp.table_info)
  return _internal_table_info();
}
inline void MsgPvpCreateTableResp::unsafe_arena_set_allocated_table_info(
    ::MsgPvpTableInfo* table_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_info_);
  }
  table_info_ = table_info;
  if (table_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MsgPvpCreateTableResp.table_info)
}
inline ::MsgPvpTableInfo* MsgPvpCreateTableResp::release_table_info() {
  
  ::MsgPvpTableInfo* temp = table_info_;
  table_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MsgPvpTableInfo* MsgPvpCreateTableResp::unsafe_arena_release_table_info() {
  // @@protoc_insertion_point(field_release:MsgPvpCreateTableResp.table_info)
  
  ::MsgPvpTableInfo* temp = table_info_;
  table_info_ = nullptr;
  return temp;
}
inline ::MsgPvpTableInfo* MsgPvpCreateTableResp::_internal_mutable_table_info() {
  
  if (table_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::MsgPvpTableInfo>(GetArena());
    table_info_ = p;
  }
  return table_info_;
}
inline ::MsgPvpTableInfo* MsgPvpCreateTableResp::mutable_table_info() {
  // @@protoc_insertion_point(field_mutable:MsgPvpCreateTableResp.table_info)
  return _internal_mutable_table_info();
}
inline void MsgPvpCreateTableResp::set_allocated_table_info(::MsgPvpTableInfo* table_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete table_info_;
  }
  if (table_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table_info);
    if (message_arena != submessage_arena) {
      table_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_info, submessage_arena);
    }
    
  } else {
    
  }
  table_info_ = table_info;
  // @@protoc_insertion_point(field_set_allocated:MsgPvpCreateTableResp.table_info)
}

// -------------------------------------------------------------------

// MsgPvpJoinTable

// int32 table_id = 1;
inline void MsgPvpJoinTable::clear_table_id() {
  table_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpJoinTable::_internal_table_id() const {
  return table_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpJoinTable::table_id() const {
  // @@protoc_insertion_point(field_get:MsgPvpJoinTable.table_id)
  return _internal_table_id();
}
inline void MsgPvpJoinTable::_internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  table_id_ = value;
}
inline void MsgPvpJoinTable::set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:MsgPvpJoinTable.table_id)
}

// int32 table_no = 2;
inline void MsgPvpJoinTable::clear_table_no() {
  table_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpJoinTable::_internal_table_no() const {
  return table_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpJoinTable::table_no() const {
  // @@protoc_insertion_point(field_get:MsgPvpJoinTable.table_no)
  return _internal_table_no();
}
inline void MsgPvpJoinTable::_internal_set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  table_no_ = value;
}
inline void MsgPvpJoinTable::set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_table_no(value);
  // @@protoc_insertion_point(field_set:MsgPvpJoinTable.table_no)
}

// string password = 3;
inline void MsgPvpJoinTable::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& MsgPvpJoinTable::password() const {
  // @@protoc_insertion_point(field_get:MsgPvpJoinTable.password)
  return _internal_password();
}
inline void MsgPvpJoinTable::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:MsgPvpJoinTable.password)
}
inline std::string* MsgPvpJoinTable::mutable_password() {
  // @@protoc_insertion_point(field_mutable:MsgPvpJoinTable.password)
  return _internal_mutable_password();
}
inline const std::string& MsgPvpJoinTable::_internal_password() const {
  return password_.Get();
}
inline void MsgPvpJoinTable::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgPvpJoinTable::set_password(std::string&& value) {
  
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgPvpJoinTable.password)
}
inline void MsgPvpJoinTable::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgPvpJoinTable.password)
}
inline void MsgPvpJoinTable::set_password(const char* value,
    size_t size) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgPvpJoinTable.password)
}
inline std::string* MsgPvpJoinTable::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgPvpJoinTable::release_password() {
  // @@protoc_insertion_point(field_release:MsgPvpJoinTable.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgPvpJoinTable::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgPvpJoinTable.password)
}

// -------------------------------------------------------------------

// MsgPvpJoinTableResp

// int32 ret_code = 1;
inline void MsgPvpJoinTableResp::clear_ret_code() {
  ret_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpJoinTableResp::_internal_ret_code() const {
  return ret_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpJoinTableResp::ret_code() const {
  // @@protoc_insertion_point(field_get:MsgPvpJoinTableResp.ret_code)
  return _internal_ret_code();
}
inline void MsgPvpJoinTableResp::_internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_code_ = value;
}
inline void MsgPvpJoinTableResp::set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:MsgPvpJoinTableResp.ret_code)
}

// int32 table_id = 2;
inline void MsgPvpJoinTableResp::clear_table_id() {
  table_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpJoinTableResp::_internal_table_id() const {
  return table_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpJoinTableResp::table_id() const {
  // @@protoc_insertion_point(field_get:MsgPvpJoinTableResp.table_id)
  return _internal_table_id();
}
inline void MsgPvpJoinTableResp::_internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  table_id_ = value;
}
inline void MsgPvpJoinTableResp::set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:MsgPvpJoinTableResp.table_id)
}

// int32 table_no = 3;
inline void MsgPvpJoinTableResp::clear_table_no() {
  table_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpJoinTableResp::_internal_table_no() const {
  return table_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpJoinTableResp::table_no() const {
  // @@protoc_insertion_point(field_get:MsgPvpJoinTableResp.table_no)
  return _internal_table_no();
}
inline void MsgPvpJoinTableResp::_internal_set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  table_no_ = value;
}
inline void MsgPvpJoinTableResp::set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_table_no(value);
  // @@protoc_insertion_point(field_set:MsgPvpJoinTableResp.table_no)
}

// int32 user_id = 4;
inline void MsgPvpJoinTableResp::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpJoinTableResp::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpJoinTableResp::user_id() const {
  // @@protoc_insertion_point(field_get:MsgPvpJoinTableResp.user_id)
  return _internal_user_id();
}
inline void MsgPvpJoinTableResp::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void MsgPvpJoinTableResp::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:MsgPvpJoinTableResp.user_id)
}

// int32 player_num = 5;
inline void MsgPvpJoinTableResp::clear_player_num() {
  player_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpJoinTableResp::_internal_player_num() const {
  return player_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpJoinTableResp::player_num() const {
  // @@protoc_insertion_point(field_get:MsgPvpJoinTableResp.player_num)
  return _internal_player_num();
}
inline void MsgPvpJoinTableResp::_internal_set_player_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_num_ = value;
}
inline void MsgPvpJoinTableResp::set_player_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_num(value);
  // @@protoc_insertion_point(field_set:MsgPvpJoinTableResp.player_num)
}

// -------------------------------------------------------------------

// MsgPvpStandUpTableResp

// int32 ret_code = 1;
inline void MsgPvpStandUpTableResp::clear_ret_code() {
  ret_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpStandUpTableResp::_internal_ret_code() const {
  return ret_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpStandUpTableResp::ret_code() const {
  // @@protoc_insertion_point(field_get:MsgPvpStandUpTableResp.ret_code)
  return _internal_ret_code();
}
inline void MsgPvpStandUpTableResp::_internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_code_ = value;
}
inline void MsgPvpStandUpTableResp::set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:MsgPvpStandUpTableResp.ret_code)
}

// int32 table_id = 2;
inline void MsgPvpStandUpTableResp::clear_table_id() {
  table_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpStandUpTableResp::_internal_table_id() const {
  return table_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpStandUpTableResp::table_id() const {
  // @@protoc_insertion_point(field_get:MsgPvpStandUpTableResp.table_id)
  return _internal_table_id();
}
inline void MsgPvpStandUpTableResp::_internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  table_id_ = value;
}
inline void MsgPvpStandUpTableResp::set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:MsgPvpStandUpTableResp.table_id)
}

// int32 table_no = 3;
inline void MsgPvpStandUpTableResp::clear_table_no() {
  table_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpStandUpTableResp::_internal_table_no() const {
  return table_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpStandUpTableResp::table_no() const {
  // @@protoc_insertion_point(field_get:MsgPvpStandUpTableResp.table_no)
  return _internal_table_no();
}
inline void MsgPvpStandUpTableResp::_internal_set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  table_no_ = value;
}
inline void MsgPvpStandUpTableResp::set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_table_no(value);
  // @@protoc_insertion_point(field_set:MsgPvpStandUpTableResp.table_no)
}

// int32 user_id = 4;
inline void MsgPvpStandUpTableResp::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpStandUpTableResp::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpStandUpTableResp::user_id() const {
  // @@protoc_insertion_point(field_get:MsgPvpStandUpTableResp.user_id)
  return _internal_user_id();
}
inline void MsgPvpStandUpTableResp::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void MsgPvpStandUpTableResp::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:MsgPvpStandUpTableResp.user_id)
}

// int32 player_num = 5;
inline void MsgPvpStandUpTableResp::clear_player_num() {
  player_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpStandUpTableResp::_internal_player_num() const {
  return player_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpStandUpTableResp::player_num() const {
  // @@protoc_insertion_point(field_get:MsgPvpStandUpTableResp.player_num)
  return _internal_player_num();
}
inline void MsgPvpStandUpTableResp::_internal_set_player_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_num_ = value;
}
inline void MsgPvpStandUpTableResp::set_player_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_num(value);
  // @@protoc_insertion_point(field_set:MsgPvpStandUpTableResp.player_num)
}

// -------------------------------------------------------------------

// MsgPvpDestroyTableResp

// int32 ret_code = 1;
inline void MsgPvpDestroyTableResp::clear_ret_code() {
  ret_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpDestroyTableResp::_internal_ret_code() const {
  return ret_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpDestroyTableResp::ret_code() const {
  // @@protoc_insertion_point(field_get:MsgPvpDestroyTableResp.ret_code)
  return _internal_ret_code();
}
inline void MsgPvpDestroyTableResp::_internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_code_ = value;
}
inline void MsgPvpDestroyTableResp::set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:MsgPvpDestroyTableResp.ret_code)
}

// int32 table_id = 2;
inline void MsgPvpDestroyTableResp::clear_table_id() {
  table_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpDestroyTableResp::_internal_table_id() const {
  return table_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpDestroyTableResp::table_id() const {
  // @@protoc_insertion_point(field_get:MsgPvpDestroyTableResp.table_id)
  return _internal_table_id();
}
inline void MsgPvpDestroyTableResp::_internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  table_id_ = value;
}
inline void MsgPvpDestroyTableResp::set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:MsgPvpDestroyTableResp.table_id)
}

// int32 table_no = 3;
inline void MsgPvpDestroyTableResp::clear_table_no() {
  table_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpDestroyTableResp::_internal_table_no() const {
  return table_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpDestroyTableResp::table_no() const {
  // @@protoc_insertion_point(field_get:MsgPvpDestroyTableResp.table_no)
  return _internal_table_no();
}
inline void MsgPvpDestroyTableResp::_internal_set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  table_no_ = value;
}
inline void MsgPvpDestroyTableResp::set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_table_no(value);
  // @@protoc_insertion_point(field_set:MsgPvpDestroyTableResp.table_no)
}

// -------------------------------------------------------------------

// MsgPvpKickUserResp

// int32 ret_code = 1;
inline void MsgPvpKickUserResp::clear_ret_code() {
  ret_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpKickUserResp::_internal_ret_code() const {
  return ret_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpKickUserResp::ret_code() const {
  // @@protoc_insertion_point(field_get:MsgPvpKickUserResp.ret_code)
  return _internal_ret_code();
}
inline void MsgPvpKickUserResp::_internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_code_ = value;
}
inline void MsgPvpKickUserResp::set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:MsgPvpKickUserResp.ret_code)
}

// int32 owner_id = 2;
inline void MsgPvpKickUserResp::clear_owner_id() {
  owner_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpKickUserResp::_internal_owner_id() const {
  return owner_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpKickUserResp::owner_id() const {
  // @@protoc_insertion_point(field_get:MsgPvpKickUserResp.owner_id)
  return _internal_owner_id();
}
inline void MsgPvpKickUserResp::_internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  owner_id_ = value;
}
inline void MsgPvpKickUserResp::set_owner_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:MsgPvpKickUserResp.owner_id)
}

// string owner_nick = 3;
inline void MsgPvpKickUserResp::clear_owner_nick() {
  owner_nick_.ClearToEmpty();
}
inline const std::string& MsgPvpKickUserResp::owner_nick() const {
  // @@protoc_insertion_point(field_get:MsgPvpKickUserResp.owner_nick)
  return _internal_owner_nick();
}
inline void MsgPvpKickUserResp::set_owner_nick(const std::string& value) {
  _internal_set_owner_nick(value);
  // @@protoc_insertion_point(field_set:MsgPvpKickUserResp.owner_nick)
}
inline std::string* MsgPvpKickUserResp::mutable_owner_nick() {
  // @@protoc_insertion_point(field_mutable:MsgPvpKickUserResp.owner_nick)
  return _internal_mutable_owner_nick();
}
inline const std::string& MsgPvpKickUserResp::_internal_owner_nick() const {
  return owner_nick_.Get();
}
inline void MsgPvpKickUserResp::_internal_set_owner_nick(const std::string& value) {
  
  owner_nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgPvpKickUserResp::set_owner_nick(std::string&& value) {
  
  owner_nick_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgPvpKickUserResp.owner_nick)
}
inline void MsgPvpKickUserResp::set_owner_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgPvpKickUserResp.owner_nick)
}
inline void MsgPvpKickUserResp::set_owner_nick(const char* value,
    size_t size) {
  
  owner_nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgPvpKickUserResp.owner_nick)
}
inline std::string* MsgPvpKickUserResp::_internal_mutable_owner_nick() {
  
  return owner_nick_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgPvpKickUserResp::release_owner_nick() {
  // @@protoc_insertion_point(field_release:MsgPvpKickUserResp.owner_nick)
  return owner_nick_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgPvpKickUserResp::set_allocated_owner_nick(std::string* owner_nick) {
  if (owner_nick != nullptr) {
    
  } else {
    
  }
  owner_nick_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_nick,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgPvpKickUserResp.owner_nick)
}

// int32 kick_id = 4;
inline void MsgPvpKickUserResp::clear_kick_id() {
  kick_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpKickUserResp::_internal_kick_id() const {
  return kick_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpKickUserResp::kick_id() const {
  // @@protoc_insertion_point(field_get:MsgPvpKickUserResp.kick_id)
  return _internal_kick_id();
}
inline void MsgPvpKickUserResp::_internal_set_kick_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  kick_id_ = value;
}
inline void MsgPvpKickUserResp::set_kick_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_kick_id(value);
  // @@protoc_insertion_point(field_set:MsgPvpKickUserResp.kick_id)
}

// string kick_nick = 5;
inline void MsgPvpKickUserResp::clear_kick_nick() {
  kick_nick_.ClearToEmpty();
}
inline const std::string& MsgPvpKickUserResp::kick_nick() const {
  // @@protoc_insertion_point(field_get:MsgPvpKickUserResp.kick_nick)
  return _internal_kick_nick();
}
inline void MsgPvpKickUserResp::set_kick_nick(const std::string& value) {
  _internal_set_kick_nick(value);
  // @@protoc_insertion_point(field_set:MsgPvpKickUserResp.kick_nick)
}
inline std::string* MsgPvpKickUserResp::mutable_kick_nick() {
  // @@protoc_insertion_point(field_mutable:MsgPvpKickUserResp.kick_nick)
  return _internal_mutable_kick_nick();
}
inline const std::string& MsgPvpKickUserResp::_internal_kick_nick() const {
  return kick_nick_.Get();
}
inline void MsgPvpKickUserResp::_internal_set_kick_nick(const std::string& value) {
  
  kick_nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgPvpKickUserResp::set_kick_nick(std::string&& value) {
  
  kick_nick_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgPvpKickUserResp.kick_nick)
}
inline void MsgPvpKickUserResp::set_kick_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kick_nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgPvpKickUserResp.kick_nick)
}
inline void MsgPvpKickUserResp::set_kick_nick(const char* value,
    size_t size) {
  
  kick_nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgPvpKickUserResp.kick_nick)
}
inline std::string* MsgPvpKickUserResp::_internal_mutable_kick_nick() {
  
  return kick_nick_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgPvpKickUserResp::release_kick_nick() {
  // @@protoc_insertion_point(field_release:MsgPvpKickUserResp.kick_nick)
  return kick_nick_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgPvpKickUserResp::set_allocated_kick_nick(std::string* kick_nick) {
  if (kick_nick != nullptr) {
    
  } else {
    
  }
  kick_nick_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kick_nick,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgPvpKickUserResp.kick_nick)
}

// -------------------------------------------------------------------

// MsgPvpTableChangeOwnerResp

// int32 table_id = 1;
inline void MsgPvpTableChangeOwnerResp::clear_table_id() {
  table_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpTableChangeOwnerResp::_internal_table_id() const {
  return table_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpTableChangeOwnerResp::table_id() const {
  // @@protoc_insertion_point(field_get:MsgPvpTableChangeOwnerResp.table_id)
  return _internal_table_id();
}
inline void MsgPvpTableChangeOwnerResp::_internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  table_id_ = value;
}
inline void MsgPvpTableChangeOwnerResp::set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:MsgPvpTableChangeOwnerResp.table_id)
}

// int32 owner_id = 2;
inline void MsgPvpTableChangeOwnerResp::clear_owner_id() {
  owner_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpTableChangeOwnerResp::_internal_owner_id() const {
  return owner_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpTableChangeOwnerResp::owner_id() const {
  // @@protoc_insertion_point(field_get:MsgPvpTableChangeOwnerResp.owner_id)
  return _internal_owner_id();
}
inline void MsgPvpTableChangeOwnerResp::_internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  owner_id_ = value;
}
inline void MsgPvpTableChangeOwnerResp::set_owner_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:MsgPvpTableChangeOwnerResp.owner_id)
}

// bool is_activate = 3;
inline void MsgPvpTableChangeOwnerResp::clear_is_activate() {
  is_activate_ = false;
}
inline bool MsgPvpTableChangeOwnerResp::_internal_is_activate() const {
  return is_activate_;
}
inline bool MsgPvpTableChangeOwnerResp::is_activate() const {
  // @@protoc_insertion_point(field_get:MsgPvpTableChangeOwnerResp.is_activate)
  return _internal_is_activate();
}
inline void MsgPvpTableChangeOwnerResp::_internal_set_is_activate(bool value) {
  
  is_activate_ = value;
}
inline void MsgPvpTableChangeOwnerResp::set_is_activate(bool value) {
  _internal_set_is_activate(value);
  // @@protoc_insertion_point(field_set:MsgPvpTableChangeOwnerResp.is_activate)
}

// -------------------------------------------------------------------

// MsgPvpActivateTableResp

// int32 ret_code = 1;
inline void MsgPvpActivateTableResp::clear_ret_code() {
  ret_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpActivateTableResp::_internal_ret_code() const {
  return ret_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpActivateTableResp::ret_code() const {
  // @@protoc_insertion_point(field_get:MsgPvpActivateTableResp.ret_code)
  return _internal_ret_code();
}
inline void MsgPvpActivateTableResp::_internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_code_ = value;
}
inline void MsgPvpActivateTableResp::set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:MsgPvpActivateTableResp.ret_code)
}

// int32 table_id = 2;
inline void MsgPvpActivateTableResp::clear_table_id() {
  table_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpActivateTableResp::_internal_table_id() const {
  return table_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpActivateTableResp::table_id() const {
  // @@protoc_insertion_point(field_get:MsgPvpActivateTableResp.table_id)
  return _internal_table_id();
}
inline void MsgPvpActivateTableResp::_internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  table_id_ = value;
}
inline void MsgPvpActivateTableResp::set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:MsgPvpActivateTableResp.table_id)
}

// int32 owner_id = 3;
inline void MsgPvpActivateTableResp::clear_owner_id() {
  owner_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpActivateTableResp::_internal_owner_id() const {
  return owner_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpActivateTableResp::owner_id() const {
  // @@protoc_insertion_point(field_get:MsgPvpActivateTableResp.owner_id)
  return _internal_owner_id();
}
inline void MsgPvpActivateTableResp::_internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  owner_id_ = value;
}
inline void MsgPvpActivateTableResp::set_owner_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:MsgPvpActivateTableResp.owner_id)
}

// bool is_activate = 4;
inline void MsgPvpActivateTableResp::clear_is_activate() {
  is_activate_ = false;
}
inline bool MsgPvpActivateTableResp::_internal_is_activate() const {
  return is_activate_;
}
inline bool MsgPvpActivateTableResp::is_activate() const {
  // @@protoc_insertion_point(field_get:MsgPvpActivateTableResp.is_activate)
  return _internal_is_activate();
}
inline void MsgPvpActivateTableResp::_internal_set_is_activate(bool value) {
  
  is_activate_ = value;
}
inline void MsgPvpActivateTableResp::set_is_activate(bool value) {
  _internal_set_is_activate(value);
  // @@protoc_insertion_point(field_set:MsgPvpActivateTableResp.is_activate)
}

// -------------------------------------------------------------------

// MsgPvpTableRoundChangeResp

// int32 table_id = 1;
inline void MsgPvpTableRoundChangeResp::clear_table_id() {
  table_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpTableRoundChangeResp::_internal_table_id() const {
  return table_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpTableRoundChangeResp::table_id() const {
  // @@protoc_insertion_point(field_get:MsgPvpTableRoundChangeResp.table_id)
  return _internal_table_id();
}
inline void MsgPvpTableRoundChangeResp::_internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  table_id_ = value;
}
inline void MsgPvpTableRoundChangeResp::set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:MsgPvpTableRoundChangeResp.table_id)
}

// int32 table_no = 2;
inline void MsgPvpTableRoundChangeResp::clear_table_no() {
  table_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpTableRoundChangeResp::_internal_table_no() const {
  return table_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpTableRoundChangeResp::table_no() const {
  // @@protoc_insertion_point(field_get:MsgPvpTableRoundChangeResp.table_no)
  return _internal_table_no();
}
inline void MsgPvpTableRoundChangeResp::_internal_set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  table_no_ = value;
}
inline void MsgPvpTableRoundChangeResp::set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_table_no(value);
  // @@protoc_insertion_point(field_set:MsgPvpTableRoundChangeResp.table_no)
}

// int32 round = 3;
inline void MsgPvpTableRoundChangeResp::clear_round() {
  round_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpTableRoundChangeResp::_internal_round() const {
  return round_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPvpTableRoundChangeResp::round() const {
  // @@protoc_insertion_point(field_get:MsgPvpTableRoundChangeResp.round)
  return _internal_round();
}
inline void MsgPvpTableRoundChangeResp::_internal_set_round(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  round_ = value;
}
inline void MsgPvpTableRoundChangeResp::set_round(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:MsgPvpTableRoundChangeResp.round)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Game_2eproto
