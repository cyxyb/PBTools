// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Chat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Chat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Chat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Chat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Chat_2eproto;
namespace Chat {
class MsgChatLogin;
class MsgChatLoginDefaultTypeInternal;
extern MsgChatLoginDefaultTypeInternal _MsgChatLogin_default_instance_;
class MsgChatLoginResp;
class MsgChatLoginRespDefaultTypeInternal;
extern MsgChatLoginRespDefaultTypeInternal _MsgChatLoginResp_default_instance_;
class MsgChatServerInfo;
class MsgChatServerInfoDefaultTypeInternal;
extern MsgChatServerInfoDefaultTypeInternal _MsgChatServerInfo_default_instance_;
class MsgChatServerList;
class MsgChatServerListDefaultTypeInternal;
extern MsgChatServerListDefaultTypeInternal _MsgChatServerList_default_instance_;
}  // namespace Chat
PROTOBUF_NAMESPACE_OPEN
template<> ::Chat::MsgChatLogin* Arena::CreateMaybeMessage<::Chat::MsgChatLogin>(Arena*);
template<> ::Chat::MsgChatLoginResp* Arena::CreateMaybeMessage<::Chat::MsgChatLoginResp>(Arena*);
template<> ::Chat::MsgChatServerInfo* Arena::CreateMaybeMessage<::Chat::MsgChatServerInfo>(Arena*);
template<> ::Chat::MsgChatServerList* Arena::CreateMaybeMessage<::Chat::MsgChatServerList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Chat {

// ===================================================================

class MsgChatLogin PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat.MsgChatLogin) */ {
 public:
  inline MsgChatLogin() : MsgChatLogin(nullptr) {}
  virtual ~MsgChatLogin();

  MsgChatLogin(const MsgChatLogin& from);
  MsgChatLogin(MsgChatLogin&& from) noexcept
    : MsgChatLogin() {
    *this = ::std::move(from);
  }

  inline MsgChatLogin& operator=(const MsgChatLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgChatLogin& operator=(MsgChatLogin&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgChatLogin& default_instance();

  static inline const MsgChatLogin* internal_default_instance() {
    return reinterpret_cast<const MsgChatLogin*>(
               &_MsgChatLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgChatLogin& a, MsgChatLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgChatLogin* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgChatLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgChatLogin* New() const final {
    return CreateMaybeMessage<MsgChatLogin>(nullptr);
  }

  MsgChatLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgChatLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgChatLogin& from);
  void MergeFrom(const MsgChatLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgChatLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat.MsgChatLogin";
  }
  protected:
  explicit MsgChatLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chat_2eproto);
    return ::descriptor_table_Chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Chat.MsgChatLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class MsgChatLoginResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat.MsgChatLoginResp) */ {
 public:
  inline MsgChatLoginResp() : MsgChatLoginResp(nullptr) {}
  virtual ~MsgChatLoginResp();

  MsgChatLoginResp(const MsgChatLoginResp& from);
  MsgChatLoginResp(MsgChatLoginResp&& from) noexcept
    : MsgChatLoginResp() {
    *this = ::std::move(from);
  }

  inline MsgChatLoginResp& operator=(const MsgChatLoginResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgChatLoginResp& operator=(MsgChatLoginResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgChatLoginResp& default_instance();

  static inline const MsgChatLoginResp* internal_default_instance() {
    return reinterpret_cast<const MsgChatLoginResp*>(
               &_MsgChatLoginResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgChatLoginResp& a, MsgChatLoginResp& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgChatLoginResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgChatLoginResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgChatLoginResp* New() const final {
    return CreateMaybeMessage<MsgChatLoginResp>(nullptr);
  }

  MsgChatLoginResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgChatLoginResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgChatLoginResp& from);
  void MergeFrom(const MsgChatLoginResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgChatLoginResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat.MsgChatLoginResp";
  }
  protected:
  explicit MsgChatLoginResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chat_2eproto);
    return ::descriptor_table_Chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 4,
    kAvatarFieldNumber = 5,
    kResCodeFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kBeautifulIdFieldNumber = 3,
    kVipLevelFieldNumber = 6,
    kAvatarFrameFieldNumber = 7,
  };
  // string nickname = 4;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string avatar = 5;
  void clear_avatar();
  const std::string& avatar() const;
  void set_avatar(const std::string& value);
  void set_avatar(std::string&& value);
  void set_avatar(const char* value);
  void set_avatar(const char* value, size_t size);
  std::string* mutable_avatar();
  std::string* release_avatar();
  void set_allocated_avatar(std::string* avatar);
  private:
  const std::string& _internal_avatar() const;
  void _internal_set_avatar(const std::string& value);
  std::string* _internal_mutable_avatar();
  public:

  // int32 res_code = 1;
  void clear_res_code();
  ::PROTOBUF_NAMESPACE_ID::int32 res_code() const;
  void set_res_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_res_code() const;
  void _internal_set_res_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 beautiful_id = 3;
  void clear_beautiful_id();
  ::PROTOBUF_NAMESPACE_ID::int32 beautiful_id() const;
  void set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_beautiful_id() const;
  void _internal_set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vip_level = 6;
  void clear_vip_level();
  ::PROTOBUF_NAMESPACE_ID::int32 vip_level() const;
  void set_vip_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vip_level() const;
  void _internal_set_vip_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 avatar_frame = 7;
  void clear_avatar_frame();
  ::PROTOBUF_NAMESPACE_ID::int32 avatar_frame() const;
  void set_avatar_frame(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avatar_frame() const;
  void _internal_set_avatar_frame(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Chat.MsgChatLoginResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
  ::PROTOBUF_NAMESPACE_ID::int32 res_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 beautiful_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 vip_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 avatar_frame_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class MsgChatServerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat.MsgChatServerInfo) */ {
 public:
  inline MsgChatServerInfo() : MsgChatServerInfo(nullptr) {}
  virtual ~MsgChatServerInfo();

  MsgChatServerInfo(const MsgChatServerInfo& from);
  MsgChatServerInfo(MsgChatServerInfo&& from) noexcept
    : MsgChatServerInfo() {
    *this = ::std::move(from);
  }

  inline MsgChatServerInfo& operator=(const MsgChatServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgChatServerInfo& operator=(MsgChatServerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgChatServerInfo& default_instance();

  static inline const MsgChatServerInfo* internal_default_instance() {
    return reinterpret_cast<const MsgChatServerInfo*>(
               &_MsgChatServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MsgChatServerInfo& a, MsgChatServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgChatServerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgChatServerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgChatServerInfo* New() const final {
    return CreateMaybeMessage<MsgChatServerInfo>(nullptr);
  }

  MsgChatServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgChatServerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgChatServerInfo& from);
  void MergeFrom(const MsgChatServerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgChatServerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat.MsgChatServerInfo";
  }
  protected:
  explicit MsgChatServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chat_2eproto);
    return ::descriptor_table_Chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
    kServerIdFieldNumber = 3,
    kOnlineNumFieldNumber = 4,
    kMaxPlayerFieldNumber = 5,
  };
  // int32 ip = 1;
  void clear_ip();
  ::PROTOBUF_NAMESPACE_ID::int32 ip() const;
  void set_ip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ip() const;
  void _internal_set_ip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 server_id = 3;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 online_num = 4;
  void clear_online_num();
  ::PROTOBUF_NAMESPACE_ID::int32 online_num() const;
  void set_online_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_online_num() const;
  void _internal_set_online_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_player = 5;
  void clear_max_player();
  ::PROTOBUF_NAMESPACE_ID::int32 max_player() const;
  void set_max_player(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_player() const;
  void _internal_set_max_player(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Chat.MsgChatServerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 online_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class MsgChatServerList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat.MsgChatServerList) */ {
 public:
  inline MsgChatServerList() : MsgChatServerList(nullptr) {}
  virtual ~MsgChatServerList();

  MsgChatServerList(const MsgChatServerList& from);
  MsgChatServerList(MsgChatServerList&& from) noexcept
    : MsgChatServerList() {
    *this = ::std::move(from);
  }

  inline MsgChatServerList& operator=(const MsgChatServerList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgChatServerList& operator=(MsgChatServerList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgChatServerList& default_instance();

  static inline const MsgChatServerList* internal_default_instance() {
    return reinterpret_cast<const MsgChatServerList*>(
               &_MsgChatServerList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MsgChatServerList& a, MsgChatServerList& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgChatServerList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgChatServerList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgChatServerList* New() const final {
    return CreateMaybeMessage<MsgChatServerList>(nullptr);
  }

  MsgChatServerList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgChatServerList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgChatServerList& from);
  void MergeFrom(const MsgChatServerList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgChatServerList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat.MsgChatServerList";
  }
  protected:
  explicit MsgChatServerList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chat_2eproto);
    return ::descriptor_table_Chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatServerListFieldNumber = 1,
  };
  // repeated .Chat.MsgChatServerInfo chat_server_list = 1;
  int chat_server_list_size() const;
  private:
  int _internal_chat_server_list_size() const;
  public:
  void clear_chat_server_list();
  ::Chat::MsgChatServerInfo* mutable_chat_server_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::MsgChatServerInfo >*
      mutable_chat_server_list();
  private:
  const ::Chat::MsgChatServerInfo& _internal_chat_server_list(int index) const;
  ::Chat::MsgChatServerInfo* _internal_add_chat_server_list();
  public:
  const ::Chat::MsgChatServerInfo& chat_server_list(int index) const;
  ::Chat::MsgChatServerInfo* add_chat_server_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::MsgChatServerInfo >&
      chat_server_list() const;

  // @@protoc_insertion_point(class_scope:Chat.MsgChatServerList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::MsgChatServerInfo > chat_server_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgChatLogin

// int32 user_id = 1;
inline void MsgChatLogin::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatLogin::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatLogin::user_id() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatLogin.user_id)
  return _internal_user_id();
}
inline void MsgChatLogin::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void MsgChatLogin::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatLogin.user_id)
}

// string password = 2;
inline void MsgChatLogin::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& MsgChatLogin::password() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatLogin.password)
  return _internal_password();
}
inline void MsgChatLogin::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatLogin.password)
}
inline std::string* MsgChatLogin::mutable_password() {
  // @@protoc_insertion_point(field_mutable:Chat.MsgChatLogin.password)
  return _internal_mutable_password();
}
inline const std::string& MsgChatLogin::_internal_password() const {
  return password_.Get();
}
inline void MsgChatLogin::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgChatLogin::set_password(std::string&& value) {
  
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Chat.MsgChatLogin.password)
}
inline void MsgChatLogin::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Chat.MsgChatLogin.password)
}
inline void MsgChatLogin::set_password(const char* value,
    size_t size) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Chat.MsgChatLogin.password)
}
inline std::string* MsgChatLogin::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgChatLogin::release_password() {
  // @@protoc_insertion_point(field_release:Chat.MsgChatLogin.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgChatLogin::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Chat.MsgChatLogin.password)
}

// -------------------------------------------------------------------

// MsgChatLoginResp

// int32 res_code = 1;
inline void MsgChatLoginResp::clear_res_code() {
  res_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatLoginResp::_internal_res_code() const {
  return res_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatLoginResp::res_code() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatLoginResp.res_code)
  return _internal_res_code();
}
inline void MsgChatLoginResp::_internal_set_res_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  res_code_ = value;
}
inline void MsgChatLoginResp::set_res_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_res_code(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatLoginResp.res_code)
}

// int32 user_id = 2;
inline void MsgChatLoginResp::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatLoginResp::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatLoginResp::user_id() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatLoginResp.user_id)
  return _internal_user_id();
}
inline void MsgChatLoginResp::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void MsgChatLoginResp::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatLoginResp.user_id)
}

// int32 beautiful_id = 3;
inline void MsgChatLoginResp::clear_beautiful_id() {
  beautiful_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatLoginResp::_internal_beautiful_id() const {
  return beautiful_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatLoginResp::beautiful_id() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatLoginResp.beautiful_id)
  return _internal_beautiful_id();
}
inline void MsgChatLoginResp::_internal_set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  beautiful_id_ = value;
}
inline void MsgChatLoginResp::set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_beautiful_id(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatLoginResp.beautiful_id)
}

// string nickname = 4;
inline void MsgChatLoginResp::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& MsgChatLoginResp::nickname() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatLoginResp.nickname)
  return _internal_nickname();
}
inline void MsgChatLoginResp::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatLoginResp.nickname)
}
inline std::string* MsgChatLoginResp::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:Chat.MsgChatLoginResp.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& MsgChatLoginResp::_internal_nickname() const {
  return nickname_.Get();
}
inline void MsgChatLoginResp::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgChatLoginResp::set_nickname(std::string&& value) {
  
  nickname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Chat.MsgChatLoginResp.nickname)
}
inline void MsgChatLoginResp::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Chat.MsgChatLoginResp.nickname)
}
inline void MsgChatLoginResp::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Chat.MsgChatLoginResp.nickname)
}
inline std::string* MsgChatLoginResp::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgChatLoginResp::release_nickname() {
  // @@protoc_insertion_point(field_release:Chat.MsgChatLoginResp.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgChatLoginResp::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Chat.MsgChatLoginResp.nickname)
}

// string avatar = 5;
inline void MsgChatLoginResp::clear_avatar() {
  avatar_.ClearToEmpty();
}
inline const std::string& MsgChatLoginResp::avatar() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatLoginResp.avatar)
  return _internal_avatar();
}
inline void MsgChatLoginResp::set_avatar(const std::string& value) {
  _internal_set_avatar(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatLoginResp.avatar)
}
inline std::string* MsgChatLoginResp::mutable_avatar() {
  // @@protoc_insertion_point(field_mutable:Chat.MsgChatLoginResp.avatar)
  return _internal_mutable_avatar();
}
inline const std::string& MsgChatLoginResp::_internal_avatar() const {
  return avatar_.Get();
}
inline void MsgChatLoginResp::_internal_set_avatar(const std::string& value) {
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgChatLoginResp::set_avatar(std::string&& value) {
  
  avatar_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Chat.MsgChatLoginResp.avatar)
}
inline void MsgChatLoginResp::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Chat.MsgChatLoginResp.avatar)
}
inline void MsgChatLoginResp::set_avatar(const char* value,
    size_t size) {
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Chat.MsgChatLoginResp.avatar)
}
inline std::string* MsgChatLoginResp::_internal_mutable_avatar() {
  
  return avatar_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgChatLoginResp::release_avatar() {
  // @@protoc_insertion_point(field_release:Chat.MsgChatLoginResp.avatar)
  return avatar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgChatLoginResp::set_allocated_avatar(std::string* avatar) {
  if (avatar != nullptr) {
    
  } else {
    
  }
  avatar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Chat.MsgChatLoginResp.avatar)
}

// int32 vip_level = 6;
inline void MsgChatLoginResp::clear_vip_level() {
  vip_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatLoginResp::_internal_vip_level() const {
  return vip_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatLoginResp::vip_level() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatLoginResp.vip_level)
  return _internal_vip_level();
}
inline void MsgChatLoginResp::_internal_set_vip_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vip_level_ = value;
}
inline void MsgChatLoginResp::set_vip_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vip_level(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatLoginResp.vip_level)
}

// int32 avatar_frame = 7;
inline void MsgChatLoginResp::clear_avatar_frame() {
  avatar_frame_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatLoginResp::_internal_avatar_frame() const {
  return avatar_frame_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatLoginResp::avatar_frame() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatLoginResp.avatar_frame)
  return _internal_avatar_frame();
}
inline void MsgChatLoginResp::_internal_set_avatar_frame(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avatar_frame_ = value;
}
inline void MsgChatLoginResp::set_avatar_frame(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avatar_frame(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatLoginResp.avatar_frame)
}

// -------------------------------------------------------------------

// MsgChatServerInfo

// int32 ip = 1;
inline void MsgChatServerInfo::clear_ip() {
  ip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatServerInfo::_internal_ip() const {
  return ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatServerInfo::ip() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatServerInfo.ip)
  return _internal_ip();
}
inline void MsgChatServerInfo::_internal_set_ip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ip_ = value;
}
inline void MsgChatServerInfo::set_ip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatServerInfo.ip)
}

// int32 port = 2;
inline void MsgChatServerInfo::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatServerInfo::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatServerInfo::port() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatServerInfo.port)
  return _internal_port();
}
inline void MsgChatServerInfo::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void MsgChatServerInfo::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatServerInfo.port)
}

// int32 server_id = 3;
inline void MsgChatServerInfo::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatServerInfo::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatServerInfo::server_id() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatServerInfo.server_id)
  return _internal_server_id();
}
inline void MsgChatServerInfo::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
}
inline void MsgChatServerInfo::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatServerInfo.server_id)
}

// int32 online_num = 4;
inline void MsgChatServerInfo::clear_online_num() {
  online_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatServerInfo::_internal_online_num() const {
  return online_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatServerInfo::online_num() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatServerInfo.online_num)
  return _internal_online_num();
}
inline void MsgChatServerInfo::_internal_set_online_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  online_num_ = value;
}
inline void MsgChatServerInfo::set_online_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_online_num(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatServerInfo.online_num)
}

// int32 max_player = 5;
inline void MsgChatServerInfo::clear_max_player() {
  max_player_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatServerInfo::_internal_max_player() const {
  return max_player_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatServerInfo::max_player() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatServerInfo.max_player)
  return _internal_max_player();
}
inline void MsgChatServerInfo::_internal_set_max_player(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_player_ = value;
}
inline void MsgChatServerInfo::set_max_player(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_player(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatServerInfo.max_player)
}

// -------------------------------------------------------------------

// MsgChatServerList

// repeated .Chat.MsgChatServerInfo chat_server_list = 1;
inline int MsgChatServerList::_internal_chat_server_list_size() const {
  return chat_server_list_.size();
}
inline int MsgChatServerList::chat_server_list_size() const {
  return _internal_chat_server_list_size();
}
inline void MsgChatServerList::clear_chat_server_list() {
  chat_server_list_.Clear();
}
inline ::Chat::MsgChatServerInfo* MsgChatServerList::mutable_chat_server_list(int index) {
  // @@protoc_insertion_point(field_mutable:Chat.MsgChatServerList.chat_server_list)
  return chat_server_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::MsgChatServerInfo >*
MsgChatServerList::mutable_chat_server_list() {
  // @@protoc_insertion_point(field_mutable_list:Chat.MsgChatServerList.chat_server_list)
  return &chat_server_list_;
}
inline const ::Chat::MsgChatServerInfo& MsgChatServerList::_internal_chat_server_list(int index) const {
  return chat_server_list_.Get(index);
}
inline const ::Chat::MsgChatServerInfo& MsgChatServerList::chat_server_list(int index) const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatServerList.chat_server_list)
  return _internal_chat_server_list(index);
}
inline ::Chat::MsgChatServerInfo* MsgChatServerList::_internal_add_chat_server_list() {
  return chat_server_list_.Add();
}
inline ::Chat::MsgChatServerInfo* MsgChatServerList::add_chat_server_list() {
  // @@protoc_insertion_point(field_add:Chat.MsgChatServerList.chat_server_list)
  return _internal_add_chat_server_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::MsgChatServerInfo >&
MsgChatServerList::chat_server_list() const {
  // @@protoc_insertion_point(field_list:Chat.MsgChatServerList.chat_server_list)
  return chat_server_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Chat

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Chat_2eproto
