// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Chat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Chat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Chat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Chat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Chat_2eproto;
namespace Chat {
class MsgChatHistory;
class MsgChatHistoryDefaultTypeInternal;
extern MsgChatHistoryDefaultTypeInternal _MsgChatHistory_default_instance_;
class MsgChatHistoryResp;
class MsgChatHistoryRespDefaultTypeInternal;
extern MsgChatHistoryRespDefaultTypeInternal _MsgChatHistoryResp_default_instance_;
class MsgChatInfo;
class MsgChatInfoDefaultTypeInternal;
extern MsgChatInfoDefaultTypeInternal _MsgChatInfo_default_instance_;
class MsgChatLogin;
class MsgChatLoginDefaultTypeInternal;
extern MsgChatLoginDefaultTypeInternal _MsgChatLogin_default_instance_;
class MsgChatLoginResp;
class MsgChatLoginRespDefaultTypeInternal;
extern MsgChatLoginRespDefaultTypeInternal _MsgChatLoginResp_default_instance_;
class MsgChatUserInfo;
class MsgChatUserInfoDefaultTypeInternal;
extern MsgChatUserInfoDefaultTypeInternal _MsgChatUserInfo_default_instance_;
class MsgSyncUserInfo;
class MsgSyncUserInfoDefaultTypeInternal;
extern MsgSyncUserInfoDefaultTypeInternal _MsgSyncUserInfo_default_instance_;
}  // namespace Chat
PROTOBUF_NAMESPACE_OPEN
template<> ::Chat::MsgChatHistory* Arena::CreateMaybeMessage<::Chat::MsgChatHistory>(Arena*);
template<> ::Chat::MsgChatHistoryResp* Arena::CreateMaybeMessage<::Chat::MsgChatHistoryResp>(Arena*);
template<> ::Chat::MsgChatInfo* Arena::CreateMaybeMessage<::Chat::MsgChatInfo>(Arena*);
template<> ::Chat::MsgChatLogin* Arena::CreateMaybeMessage<::Chat::MsgChatLogin>(Arena*);
template<> ::Chat::MsgChatLoginResp* Arena::CreateMaybeMessage<::Chat::MsgChatLoginResp>(Arena*);
template<> ::Chat::MsgChatUserInfo* Arena::CreateMaybeMessage<::Chat::MsgChatUserInfo>(Arena*);
template<> ::Chat::MsgSyncUserInfo* Arena::CreateMaybeMessage<::Chat::MsgSyncUserInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Chat {

// ===================================================================

class MsgChatLogin PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat.MsgChatLogin) */ {
 public:
  inline MsgChatLogin() : MsgChatLogin(nullptr) {}
  virtual ~MsgChatLogin();

  MsgChatLogin(const MsgChatLogin& from);
  MsgChatLogin(MsgChatLogin&& from) noexcept
    : MsgChatLogin() {
    *this = ::std::move(from);
  }

  inline MsgChatLogin& operator=(const MsgChatLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgChatLogin& operator=(MsgChatLogin&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgChatLogin& default_instance();

  static inline const MsgChatLogin* internal_default_instance() {
    return reinterpret_cast<const MsgChatLogin*>(
               &_MsgChatLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgChatLogin& a, MsgChatLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgChatLogin* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgChatLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgChatLogin* New() const final {
    return CreateMaybeMessage<MsgChatLogin>(nullptr);
  }

  MsgChatLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgChatLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgChatLogin& from);
  void MergeFrom(const MsgChatLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgChatLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat.MsgChatLogin";
  }
  protected:
  explicit MsgChatLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chat_2eproto);
    return ::descriptor_table_Chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Chat.MsgChatLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class MsgChatUserInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat.MsgChatUserInfo) */ {
 public:
  inline MsgChatUserInfo() : MsgChatUserInfo(nullptr) {}
  virtual ~MsgChatUserInfo();

  MsgChatUserInfo(const MsgChatUserInfo& from);
  MsgChatUserInfo(MsgChatUserInfo&& from) noexcept
    : MsgChatUserInfo() {
    *this = ::std::move(from);
  }

  inline MsgChatUserInfo& operator=(const MsgChatUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgChatUserInfo& operator=(MsgChatUserInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgChatUserInfo& default_instance();

  static inline const MsgChatUserInfo* internal_default_instance() {
    return reinterpret_cast<const MsgChatUserInfo*>(
               &_MsgChatUserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgChatUserInfo& a, MsgChatUserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgChatUserInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgChatUserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgChatUserInfo* New() const final {
    return CreateMaybeMessage<MsgChatUserInfo>(nullptr);
  }

  MsgChatUserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgChatUserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgChatUserInfo& from);
  void MergeFrom(const MsgChatUserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgChatUserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat.MsgChatUserInfo";
  }
  protected:
  explicit MsgChatUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chat_2eproto);
    return ::descriptor_table_Chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 3,
    kAvatarFieldNumber = 4,
    kUserIdFieldNumber = 1,
    kBeautifulIdFieldNumber = 2,
    kVipLevelFieldNumber = 5,
    kAvatarFrameFieldNumber = 6,
  };
  // string nickname = 3;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string avatar = 4;
  void clear_avatar();
  const std::string& avatar() const;
  void set_avatar(const std::string& value);
  void set_avatar(std::string&& value);
  void set_avatar(const char* value);
  void set_avatar(const char* value, size_t size);
  std::string* mutable_avatar();
  std::string* release_avatar();
  void set_allocated_avatar(std::string* avatar);
  private:
  const std::string& _internal_avatar() const;
  void _internal_set_avatar(const std::string& value);
  std::string* _internal_mutable_avatar();
  public:

  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 beautiful_id = 2;
  void clear_beautiful_id();
  ::PROTOBUF_NAMESPACE_ID::int32 beautiful_id() const;
  void set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_beautiful_id() const;
  void _internal_set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vip_level = 5;
  void clear_vip_level();
  ::PROTOBUF_NAMESPACE_ID::int32 vip_level() const;
  void set_vip_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vip_level() const;
  void _internal_set_vip_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 avatar_frame = 6;
  void clear_avatar_frame();
  ::PROTOBUF_NAMESPACE_ID::int32 avatar_frame() const;
  void set_avatar_frame(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avatar_frame() const;
  void _internal_set_avatar_frame(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Chat.MsgChatUserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 beautiful_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 vip_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 avatar_frame_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class MsgChatLoginResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat.MsgChatLoginResp) */ {
 public:
  inline MsgChatLoginResp() : MsgChatLoginResp(nullptr) {}
  virtual ~MsgChatLoginResp();

  MsgChatLoginResp(const MsgChatLoginResp& from);
  MsgChatLoginResp(MsgChatLoginResp&& from) noexcept
    : MsgChatLoginResp() {
    *this = ::std::move(from);
  }

  inline MsgChatLoginResp& operator=(const MsgChatLoginResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgChatLoginResp& operator=(MsgChatLoginResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgChatLoginResp& default_instance();

  static inline const MsgChatLoginResp* internal_default_instance() {
    return reinterpret_cast<const MsgChatLoginResp*>(
               &_MsgChatLoginResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MsgChatLoginResp& a, MsgChatLoginResp& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgChatLoginResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgChatLoginResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgChatLoginResp* New() const final {
    return CreateMaybeMessage<MsgChatLoginResp>(nullptr);
  }

  MsgChatLoginResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgChatLoginResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgChatLoginResp& from);
  void MergeFrom(const MsgChatLoginResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgChatLoginResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat.MsgChatLoginResp";
  }
  protected:
  explicit MsgChatLoginResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chat_2eproto);
    return ::descriptor_table_Chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 4,
    kAvatarFieldNumber = 5,
    kResCodeFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kBeautifulIdFieldNumber = 3,
    kVipLevelFieldNumber = 6,
    kAvatarFrameFieldNumber = 7,
    kClientTypeFieldNumber = 8,
    kLimitChatFieldNumber = 9,
  };
  // string nickname = 4;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string avatar = 5;
  void clear_avatar();
  const std::string& avatar() const;
  void set_avatar(const std::string& value);
  void set_avatar(std::string&& value);
  void set_avatar(const char* value);
  void set_avatar(const char* value, size_t size);
  std::string* mutable_avatar();
  std::string* release_avatar();
  void set_allocated_avatar(std::string* avatar);
  private:
  const std::string& _internal_avatar() const;
  void _internal_set_avatar(const std::string& value);
  std::string* _internal_mutable_avatar();
  public:

  // int32 res_code = 1;
  void clear_res_code();
  ::PROTOBUF_NAMESPACE_ID::int32 res_code() const;
  void set_res_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_res_code() const;
  void _internal_set_res_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 beautiful_id = 3;
  void clear_beautiful_id();
  ::PROTOBUF_NAMESPACE_ID::int32 beautiful_id() const;
  void set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_beautiful_id() const;
  void _internal_set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vip_level = 6;
  void clear_vip_level();
  ::PROTOBUF_NAMESPACE_ID::int32 vip_level() const;
  void set_vip_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vip_level() const;
  void _internal_set_vip_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 avatar_frame = 7;
  void clear_avatar_frame();
  ::PROTOBUF_NAMESPACE_ID::int32 avatar_frame() const;
  void set_avatar_frame(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avatar_frame() const;
  void _internal_set_avatar_frame(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 client_type = 8;
  void clear_client_type();
  ::PROTOBUF_NAMESPACE_ID::int32 client_type() const;
  void set_client_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_type() const;
  void _internal_set_client_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 limit_chat = 9;
  void clear_limit_chat();
  ::PROTOBUF_NAMESPACE_ID::int32 limit_chat() const;
  void set_limit_chat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limit_chat() const;
  void _internal_set_limit_chat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Chat.MsgChatLoginResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
  ::PROTOBUF_NAMESPACE_ID::int32 res_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 beautiful_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 vip_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 avatar_frame_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_chat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class MsgSyncUserInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat.MsgSyncUserInfo) */ {
 public:
  inline MsgSyncUserInfo() : MsgSyncUserInfo(nullptr) {}
  virtual ~MsgSyncUserInfo();

  MsgSyncUserInfo(const MsgSyncUserInfo& from);
  MsgSyncUserInfo(MsgSyncUserInfo&& from) noexcept
    : MsgSyncUserInfo() {
    *this = ::std::move(from);
  }

  inline MsgSyncUserInfo& operator=(const MsgSyncUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSyncUserInfo& operator=(MsgSyncUserInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgSyncUserInfo& default_instance();

  static inline const MsgSyncUserInfo* internal_default_instance() {
    return reinterpret_cast<const MsgSyncUserInfo*>(
               &_MsgSyncUserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MsgSyncUserInfo& a, MsgSyncUserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSyncUserInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSyncUserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgSyncUserInfo* New() const final {
    return CreateMaybeMessage<MsgSyncUserInfo>(nullptr);
  }

  MsgSyncUserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgSyncUserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgSyncUserInfo& from);
  void MergeFrom(const MsgSyncUserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgSyncUserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat.MsgSyncUserInfo";
  }
  protected:
  explicit MsgSyncUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chat_2eproto);
    return ::descriptor_table_Chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
  };
  // repeated .Chat.MsgChatUserInfo user_info = 1;
  int user_info_size() const;
  private:
  int _internal_user_info_size() const;
  public:
  void clear_user_info();
  ::Chat::MsgChatUserInfo* mutable_user_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::MsgChatUserInfo >*
      mutable_user_info();
  private:
  const ::Chat::MsgChatUserInfo& _internal_user_info(int index) const;
  ::Chat::MsgChatUserInfo* _internal_add_user_info();
  public:
  const ::Chat::MsgChatUserInfo& user_info(int index) const;
  ::Chat::MsgChatUserInfo* add_user_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::MsgChatUserInfo >&
      user_info() const;

  // @@protoc_insertion_point(class_scope:Chat.MsgSyncUserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::MsgChatUserInfo > user_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class MsgChatHistory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat.MsgChatHistory) */ {
 public:
  inline MsgChatHistory() : MsgChatHistory(nullptr) {}
  virtual ~MsgChatHistory();

  MsgChatHistory(const MsgChatHistory& from);
  MsgChatHistory(MsgChatHistory&& from) noexcept
    : MsgChatHistory() {
    *this = ::std::move(from);
  }

  inline MsgChatHistory& operator=(const MsgChatHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgChatHistory& operator=(MsgChatHistory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgChatHistory& default_instance();

  static inline const MsgChatHistory* internal_default_instance() {
    return reinterpret_cast<const MsgChatHistory*>(
               &_MsgChatHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MsgChatHistory& a, MsgChatHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgChatHistory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgChatHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgChatHistory* New() const final {
    return CreateMaybeMessage<MsgChatHistory>(nullptr);
  }

  MsgChatHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgChatHistory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgChatHistory& from);
  void MergeFrom(const MsgChatHistory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgChatHistory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat.MsgChatHistory";
  }
  protected:
  explicit MsgChatHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chat_2eproto);
    return ::descriptor_table_Chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatTypeFieldNumber = 1,
    kStartIndexFieldNumber = 2,
  };
  // int32 chat_type = 1;
  void clear_chat_type();
  ::PROTOBUF_NAMESPACE_ID::int32 chat_type() const;
  void set_chat_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chat_type() const;
  void _internal_set_chat_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 start_index = 2;
  void clear_start_index();
  ::PROTOBUF_NAMESPACE_ID::int32 start_index() const;
  void set_start_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_index() const;
  void _internal_set_start_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Chat.MsgChatHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chat_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class MsgChatInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat.MsgChatInfo) */ {
 public:
  inline MsgChatInfo() : MsgChatInfo(nullptr) {}
  virtual ~MsgChatInfo();

  MsgChatInfo(const MsgChatInfo& from);
  MsgChatInfo(MsgChatInfo&& from) noexcept
    : MsgChatInfo() {
    *this = ::std::move(from);
  }

  inline MsgChatInfo& operator=(const MsgChatInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgChatInfo& operator=(MsgChatInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgChatInfo& default_instance();

  static inline const MsgChatInfo* internal_default_instance() {
    return reinterpret_cast<const MsgChatInfo*>(
               &_MsgChatInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MsgChatInfo& a, MsgChatInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgChatInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgChatInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgChatInfo* New() const final {
    return CreateMaybeMessage<MsgChatInfo>(nullptr);
  }

  MsgChatInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgChatInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgChatInfo& from);
  void MergeFrom(const MsgChatInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgChatInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat.MsgChatInfo";
  }
  protected:
  explicit MsgChatInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chat_2eproto);
    return ::descriptor_table_Chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 3,
    kAvatarFieldNumber = 4,
    kMsgFieldNumber = 7,
    kUserIdFieldNumber = 1,
    kBeautifulIdFieldNumber = 2,
    kVipLevelFieldNumber = 5,
    kAvatarFrameFieldNumber = 6,
    kIndexFieldNumber = 8,
  };
  // string nickname = 3;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string avatar = 4;
  void clear_avatar();
  const std::string& avatar() const;
  void set_avatar(const std::string& value);
  void set_avatar(std::string&& value);
  void set_avatar(const char* value);
  void set_avatar(const char* value, size_t size);
  std::string* mutable_avatar();
  std::string* release_avatar();
  void set_allocated_avatar(std::string* avatar);
  private:
  const std::string& _internal_avatar() const;
  void _internal_set_avatar(const std::string& value);
  std::string* _internal_mutable_avatar();
  public:

  // string msg = 7;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 beautiful_id = 2;
  void clear_beautiful_id();
  ::PROTOBUF_NAMESPACE_ID::int32 beautiful_id() const;
  void set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_beautiful_id() const;
  void _internal_set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vip_level = 5;
  void clear_vip_level();
  ::PROTOBUF_NAMESPACE_ID::int32 vip_level() const;
  void set_vip_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vip_level() const;
  void _internal_set_vip_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 avatar_frame = 6;
  void clear_avatar_frame();
  ::PROTOBUF_NAMESPACE_ID::int32 avatar_frame() const;
  void set_avatar_frame(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avatar_frame() const;
  void _internal_set_avatar_frame(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 index = 8;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Chat.MsgChatInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 beautiful_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 vip_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 avatar_frame_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class MsgChatHistoryResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat.MsgChatHistoryResp) */ {
 public:
  inline MsgChatHistoryResp() : MsgChatHistoryResp(nullptr) {}
  virtual ~MsgChatHistoryResp();

  MsgChatHistoryResp(const MsgChatHistoryResp& from);
  MsgChatHistoryResp(MsgChatHistoryResp&& from) noexcept
    : MsgChatHistoryResp() {
    *this = ::std::move(from);
  }

  inline MsgChatHistoryResp& operator=(const MsgChatHistoryResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgChatHistoryResp& operator=(MsgChatHistoryResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgChatHistoryResp& default_instance();

  static inline const MsgChatHistoryResp* internal_default_instance() {
    return reinterpret_cast<const MsgChatHistoryResp*>(
               &_MsgChatHistoryResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MsgChatHistoryResp& a, MsgChatHistoryResp& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgChatHistoryResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgChatHistoryResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgChatHistoryResp* New() const final {
    return CreateMaybeMessage<MsgChatHistoryResp>(nullptr);
  }

  MsgChatHistoryResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgChatHistoryResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgChatHistoryResp& from);
  void MergeFrom(const MsgChatHistoryResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgChatHistoryResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat.MsgChatHistoryResp";
  }
  protected:
  explicit MsgChatHistoryResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chat_2eproto);
    return ::descriptor_table_Chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 2,
    kChatTypeFieldNumber = 1,
  };
  // repeated .Chat.MsgChatInfo info = 2;
  int info_size() const;
  private:
  int _internal_info_size() const;
  public:
  void clear_info();
  ::Chat::MsgChatInfo* mutable_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::MsgChatInfo >*
      mutable_info();
  private:
  const ::Chat::MsgChatInfo& _internal_info(int index) const;
  ::Chat::MsgChatInfo* _internal_add_info();
  public:
  const ::Chat::MsgChatInfo& info(int index) const;
  ::Chat::MsgChatInfo* add_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::MsgChatInfo >&
      info() const;

  // int32 chat_type = 1;
  void clear_chat_type();
  ::PROTOBUF_NAMESPACE_ID::int32 chat_type() const;
  void set_chat_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chat_type() const;
  void _internal_set_chat_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Chat.MsgChatHistoryResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::MsgChatInfo > info_;
  ::PROTOBUF_NAMESPACE_ID::int32 chat_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgChatLogin

// int32 user_id = 1;
inline void MsgChatLogin::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatLogin::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatLogin::user_id() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatLogin.user_id)
  return _internal_user_id();
}
inline void MsgChatLogin::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void MsgChatLogin::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatLogin.user_id)
}

// string password = 2;
inline void MsgChatLogin::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& MsgChatLogin::password() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatLogin.password)
  return _internal_password();
}
inline void MsgChatLogin::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatLogin.password)
}
inline std::string* MsgChatLogin::mutable_password() {
  // @@protoc_insertion_point(field_mutable:Chat.MsgChatLogin.password)
  return _internal_mutable_password();
}
inline const std::string& MsgChatLogin::_internal_password() const {
  return password_.Get();
}
inline void MsgChatLogin::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgChatLogin::set_password(std::string&& value) {
  
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Chat.MsgChatLogin.password)
}
inline void MsgChatLogin::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Chat.MsgChatLogin.password)
}
inline void MsgChatLogin::set_password(const char* value,
    size_t size) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Chat.MsgChatLogin.password)
}
inline std::string* MsgChatLogin::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgChatLogin::release_password() {
  // @@protoc_insertion_point(field_release:Chat.MsgChatLogin.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgChatLogin::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Chat.MsgChatLogin.password)
}

// -------------------------------------------------------------------

// MsgChatUserInfo

// int32 user_id = 1;
inline void MsgChatUserInfo::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatUserInfo::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatUserInfo::user_id() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatUserInfo.user_id)
  return _internal_user_id();
}
inline void MsgChatUserInfo::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void MsgChatUserInfo::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatUserInfo.user_id)
}

// int32 beautiful_id = 2;
inline void MsgChatUserInfo::clear_beautiful_id() {
  beautiful_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatUserInfo::_internal_beautiful_id() const {
  return beautiful_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatUserInfo::beautiful_id() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatUserInfo.beautiful_id)
  return _internal_beautiful_id();
}
inline void MsgChatUserInfo::_internal_set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  beautiful_id_ = value;
}
inline void MsgChatUserInfo::set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_beautiful_id(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatUserInfo.beautiful_id)
}

// string nickname = 3;
inline void MsgChatUserInfo::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& MsgChatUserInfo::nickname() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatUserInfo.nickname)
  return _internal_nickname();
}
inline void MsgChatUserInfo::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatUserInfo.nickname)
}
inline std::string* MsgChatUserInfo::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:Chat.MsgChatUserInfo.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& MsgChatUserInfo::_internal_nickname() const {
  return nickname_.Get();
}
inline void MsgChatUserInfo::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgChatUserInfo::set_nickname(std::string&& value) {
  
  nickname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Chat.MsgChatUserInfo.nickname)
}
inline void MsgChatUserInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Chat.MsgChatUserInfo.nickname)
}
inline void MsgChatUserInfo::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Chat.MsgChatUserInfo.nickname)
}
inline std::string* MsgChatUserInfo::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgChatUserInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:Chat.MsgChatUserInfo.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgChatUserInfo::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Chat.MsgChatUserInfo.nickname)
}

// string avatar = 4;
inline void MsgChatUserInfo::clear_avatar() {
  avatar_.ClearToEmpty();
}
inline const std::string& MsgChatUserInfo::avatar() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatUserInfo.avatar)
  return _internal_avatar();
}
inline void MsgChatUserInfo::set_avatar(const std::string& value) {
  _internal_set_avatar(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatUserInfo.avatar)
}
inline std::string* MsgChatUserInfo::mutable_avatar() {
  // @@protoc_insertion_point(field_mutable:Chat.MsgChatUserInfo.avatar)
  return _internal_mutable_avatar();
}
inline const std::string& MsgChatUserInfo::_internal_avatar() const {
  return avatar_.Get();
}
inline void MsgChatUserInfo::_internal_set_avatar(const std::string& value) {
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgChatUserInfo::set_avatar(std::string&& value) {
  
  avatar_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Chat.MsgChatUserInfo.avatar)
}
inline void MsgChatUserInfo::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Chat.MsgChatUserInfo.avatar)
}
inline void MsgChatUserInfo::set_avatar(const char* value,
    size_t size) {
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Chat.MsgChatUserInfo.avatar)
}
inline std::string* MsgChatUserInfo::_internal_mutable_avatar() {
  
  return avatar_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgChatUserInfo::release_avatar() {
  // @@protoc_insertion_point(field_release:Chat.MsgChatUserInfo.avatar)
  return avatar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgChatUserInfo::set_allocated_avatar(std::string* avatar) {
  if (avatar != nullptr) {
    
  } else {
    
  }
  avatar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Chat.MsgChatUserInfo.avatar)
}

// int32 vip_level = 5;
inline void MsgChatUserInfo::clear_vip_level() {
  vip_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatUserInfo::_internal_vip_level() const {
  return vip_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatUserInfo::vip_level() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatUserInfo.vip_level)
  return _internal_vip_level();
}
inline void MsgChatUserInfo::_internal_set_vip_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vip_level_ = value;
}
inline void MsgChatUserInfo::set_vip_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vip_level(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatUserInfo.vip_level)
}

// int32 avatar_frame = 6;
inline void MsgChatUserInfo::clear_avatar_frame() {
  avatar_frame_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatUserInfo::_internal_avatar_frame() const {
  return avatar_frame_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatUserInfo::avatar_frame() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatUserInfo.avatar_frame)
  return _internal_avatar_frame();
}
inline void MsgChatUserInfo::_internal_set_avatar_frame(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avatar_frame_ = value;
}
inline void MsgChatUserInfo::set_avatar_frame(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avatar_frame(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatUserInfo.avatar_frame)
}

// -------------------------------------------------------------------

// MsgChatLoginResp

// int32 res_code = 1;
inline void MsgChatLoginResp::clear_res_code() {
  res_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatLoginResp::_internal_res_code() const {
  return res_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatLoginResp::res_code() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatLoginResp.res_code)
  return _internal_res_code();
}
inline void MsgChatLoginResp::_internal_set_res_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  res_code_ = value;
}
inline void MsgChatLoginResp::set_res_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_res_code(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatLoginResp.res_code)
}

// int32 user_id = 2;
inline void MsgChatLoginResp::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatLoginResp::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatLoginResp::user_id() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatLoginResp.user_id)
  return _internal_user_id();
}
inline void MsgChatLoginResp::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void MsgChatLoginResp::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatLoginResp.user_id)
}

// int32 beautiful_id = 3;
inline void MsgChatLoginResp::clear_beautiful_id() {
  beautiful_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatLoginResp::_internal_beautiful_id() const {
  return beautiful_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatLoginResp::beautiful_id() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatLoginResp.beautiful_id)
  return _internal_beautiful_id();
}
inline void MsgChatLoginResp::_internal_set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  beautiful_id_ = value;
}
inline void MsgChatLoginResp::set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_beautiful_id(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatLoginResp.beautiful_id)
}

// string nickname = 4;
inline void MsgChatLoginResp::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& MsgChatLoginResp::nickname() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatLoginResp.nickname)
  return _internal_nickname();
}
inline void MsgChatLoginResp::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatLoginResp.nickname)
}
inline std::string* MsgChatLoginResp::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:Chat.MsgChatLoginResp.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& MsgChatLoginResp::_internal_nickname() const {
  return nickname_.Get();
}
inline void MsgChatLoginResp::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgChatLoginResp::set_nickname(std::string&& value) {
  
  nickname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Chat.MsgChatLoginResp.nickname)
}
inline void MsgChatLoginResp::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Chat.MsgChatLoginResp.nickname)
}
inline void MsgChatLoginResp::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Chat.MsgChatLoginResp.nickname)
}
inline std::string* MsgChatLoginResp::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgChatLoginResp::release_nickname() {
  // @@protoc_insertion_point(field_release:Chat.MsgChatLoginResp.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgChatLoginResp::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Chat.MsgChatLoginResp.nickname)
}

// string avatar = 5;
inline void MsgChatLoginResp::clear_avatar() {
  avatar_.ClearToEmpty();
}
inline const std::string& MsgChatLoginResp::avatar() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatLoginResp.avatar)
  return _internal_avatar();
}
inline void MsgChatLoginResp::set_avatar(const std::string& value) {
  _internal_set_avatar(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatLoginResp.avatar)
}
inline std::string* MsgChatLoginResp::mutable_avatar() {
  // @@protoc_insertion_point(field_mutable:Chat.MsgChatLoginResp.avatar)
  return _internal_mutable_avatar();
}
inline const std::string& MsgChatLoginResp::_internal_avatar() const {
  return avatar_.Get();
}
inline void MsgChatLoginResp::_internal_set_avatar(const std::string& value) {
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgChatLoginResp::set_avatar(std::string&& value) {
  
  avatar_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Chat.MsgChatLoginResp.avatar)
}
inline void MsgChatLoginResp::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Chat.MsgChatLoginResp.avatar)
}
inline void MsgChatLoginResp::set_avatar(const char* value,
    size_t size) {
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Chat.MsgChatLoginResp.avatar)
}
inline std::string* MsgChatLoginResp::_internal_mutable_avatar() {
  
  return avatar_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgChatLoginResp::release_avatar() {
  // @@protoc_insertion_point(field_release:Chat.MsgChatLoginResp.avatar)
  return avatar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgChatLoginResp::set_allocated_avatar(std::string* avatar) {
  if (avatar != nullptr) {
    
  } else {
    
  }
  avatar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Chat.MsgChatLoginResp.avatar)
}

// int32 vip_level = 6;
inline void MsgChatLoginResp::clear_vip_level() {
  vip_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatLoginResp::_internal_vip_level() const {
  return vip_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatLoginResp::vip_level() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatLoginResp.vip_level)
  return _internal_vip_level();
}
inline void MsgChatLoginResp::_internal_set_vip_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vip_level_ = value;
}
inline void MsgChatLoginResp::set_vip_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vip_level(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatLoginResp.vip_level)
}

// int32 avatar_frame = 7;
inline void MsgChatLoginResp::clear_avatar_frame() {
  avatar_frame_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatLoginResp::_internal_avatar_frame() const {
  return avatar_frame_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatLoginResp::avatar_frame() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatLoginResp.avatar_frame)
  return _internal_avatar_frame();
}
inline void MsgChatLoginResp::_internal_set_avatar_frame(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avatar_frame_ = value;
}
inline void MsgChatLoginResp::set_avatar_frame(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avatar_frame(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatLoginResp.avatar_frame)
}

// int32 client_type = 8;
inline void MsgChatLoginResp::clear_client_type() {
  client_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatLoginResp::_internal_client_type() const {
  return client_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatLoginResp::client_type() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatLoginResp.client_type)
  return _internal_client_type();
}
inline void MsgChatLoginResp::_internal_set_client_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_type_ = value;
}
inline void MsgChatLoginResp::set_client_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_type(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatLoginResp.client_type)
}

// int32 limit_chat = 9;
inline void MsgChatLoginResp::clear_limit_chat() {
  limit_chat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatLoginResp::_internal_limit_chat() const {
  return limit_chat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatLoginResp::limit_chat() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatLoginResp.limit_chat)
  return _internal_limit_chat();
}
inline void MsgChatLoginResp::_internal_set_limit_chat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_chat_ = value;
}
inline void MsgChatLoginResp::set_limit_chat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limit_chat(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatLoginResp.limit_chat)
}

// -------------------------------------------------------------------

// MsgSyncUserInfo

// repeated .Chat.MsgChatUserInfo user_info = 1;
inline int MsgSyncUserInfo::_internal_user_info_size() const {
  return user_info_.size();
}
inline int MsgSyncUserInfo::user_info_size() const {
  return _internal_user_info_size();
}
inline void MsgSyncUserInfo::clear_user_info() {
  user_info_.Clear();
}
inline ::Chat::MsgChatUserInfo* MsgSyncUserInfo::mutable_user_info(int index) {
  // @@protoc_insertion_point(field_mutable:Chat.MsgSyncUserInfo.user_info)
  return user_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::MsgChatUserInfo >*
MsgSyncUserInfo::mutable_user_info() {
  // @@protoc_insertion_point(field_mutable_list:Chat.MsgSyncUserInfo.user_info)
  return &user_info_;
}
inline const ::Chat::MsgChatUserInfo& MsgSyncUserInfo::_internal_user_info(int index) const {
  return user_info_.Get(index);
}
inline const ::Chat::MsgChatUserInfo& MsgSyncUserInfo::user_info(int index) const {
  // @@protoc_insertion_point(field_get:Chat.MsgSyncUserInfo.user_info)
  return _internal_user_info(index);
}
inline ::Chat::MsgChatUserInfo* MsgSyncUserInfo::_internal_add_user_info() {
  return user_info_.Add();
}
inline ::Chat::MsgChatUserInfo* MsgSyncUserInfo::add_user_info() {
  // @@protoc_insertion_point(field_add:Chat.MsgSyncUserInfo.user_info)
  return _internal_add_user_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::MsgChatUserInfo >&
MsgSyncUserInfo::user_info() const {
  // @@protoc_insertion_point(field_list:Chat.MsgSyncUserInfo.user_info)
  return user_info_;
}

// -------------------------------------------------------------------

// MsgChatHistory

// int32 chat_type = 1;
inline void MsgChatHistory::clear_chat_type() {
  chat_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatHistory::_internal_chat_type() const {
  return chat_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatHistory::chat_type() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatHistory.chat_type)
  return _internal_chat_type();
}
inline void MsgChatHistory::_internal_set_chat_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chat_type_ = value;
}
inline void MsgChatHistory::set_chat_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chat_type(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatHistory.chat_type)
}

// int32 start_index = 2;
inline void MsgChatHistory::clear_start_index() {
  start_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatHistory::_internal_start_index() const {
  return start_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatHistory::start_index() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatHistory.start_index)
  return _internal_start_index();
}
inline void MsgChatHistory::_internal_set_start_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_index_ = value;
}
inline void MsgChatHistory::set_start_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_index(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatHistory.start_index)
}

// -------------------------------------------------------------------

// MsgChatInfo

// int32 user_id = 1;
inline void MsgChatInfo::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatInfo::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatInfo::user_id() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatInfo.user_id)
  return _internal_user_id();
}
inline void MsgChatInfo::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void MsgChatInfo::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatInfo.user_id)
}

// int32 beautiful_id = 2;
inline void MsgChatInfo::clear_beautiful_id() {
  beautiful_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatInfo::_internal_beautiful_id() const {
  return beautiful_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatInfo::beautiful_id() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatInfo.beautiful_id)
  return _internal_beautiful_id();
}
inline void MsgChatInfo::_internal_set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  beautiful_id_ = value;
}
inline void MsgChatInfo::set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_beautiful_id(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatInfo.beautiful_id)
}

// string nickname = 3;
inline void MsgChatInfo::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& MsgChatInfo::nickname() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatInfo.nickname)
  return _internal_nickname();
}
inline void MsgChatInfo::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatInfo.nickname)
}
inline std::string* MsgChatInfo::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:Chat.MsgChatInfo.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& MsgChatInfo::_internal_nickname() const {
  return nickname_.Get();
}
inline void MsgChatInfo::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgChatInfo::set_nickname(std::string&& value) {
  
  nickname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Chat.MsgChatInfo.nickname)
}
inline void MsgChatInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Chat.MsgChatInfo.nickname)
}
inline void MsgChatInfo::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Chat.MsgChatInfo.nickname)
}
inline std::string* MsgChatInfo::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgChatInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:Chat.MsgChatInfo.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgChatInfo::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Chat.MsgChatInfo.nickname)
}

// string avatar = 4;
inline void MsgChatInfo::clear_avatar() {
  avatar_.ClearToEmpty();
}
inline const std::string& MsgChatInfo::avatar() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatInfo.avatar)
  return _internal_avatar();
}
inline void MsgChatInfo::set_avatar(const std::string& value) {
  _internal_set_avatar(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatInfo.avatar)
}
inline std::string* MsgChatInfo::mutable_avatar() {
  // @@protoc_insertion_point(field_mutable:Chat.MsgChatInfo.avatar)
  return _internal_mutable_avatar();
}
inline const std::string& MsgChatInfo::_internal_avatar() const {
  return avatar_.Get();
}
inline void MsgChatInfo::_internal_set_avatar(const std::string& value) {
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgChatInfo::set_avatar(std::string&& value) {
  
  avatar_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Chat.MsgChatInfo.avatar)
}
inline void MsgChatInfo::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Chat.MsgChatInfo.avatar)
}
inline void MsgChatInfo::set_avatar(const char* value,
    size_t size) {
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Chat.MsgChatInfo.avatar)
}
inline std::string* MsgChatInfo::_internal_mutable_avatar() {
  
  return avatar_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgChatInfo::release_avatar() {
  // @@protoc_insertion_point(field_release:Chat.MsgChatInfo.avatar)
  return avatar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgChatInfo::set_allocated_avatar(std::string* avatar) {
  if (avatar != nullptr) {
    
  } else {
    
  }
  avatar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Chat.MsgChatInfo.avatar)
}

// int32 vip_level = 5;
inline void MsgChatInfo::clear_vip_level() {
  vip_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatInfo::_internal_vip_level() const {
  return vip_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatInfo::vip_level() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatInfo.vip_level)
  return _internal_vip_level();
}
inline void MsgChatInfo::_internal_set_vip_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vip_level_ = value;
}
inline void MsgChatInfo::set_vip_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vip_level(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatInfo.vip_level)
}

// int32 avatar_frame = 6;
inline void MsgChatInfo::clear_avatar_frame() {
  avatar_frame_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatInfo::_internal_avatar_frame() const {
  return avatar_frame_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatInfo::avatar_frame() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatInfo.avatar_frame)
  return _internal_avatar_frame();
}
inline void MsgChatInfo::_internal_set_avatar_frame(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avatar_frame_ = value;
}
inline void MsgChatInfo::set_avatar_frame(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avatar_frame(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatInfo.avatar_frame)
}

// string msg = 7;
inline void MsgChatInfo::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& MsgChatInfo::msg() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatInfo.msg)
  return _internal_msg();
}
inline void MsgChatInfo::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatInfo.msg)
}
inline std::string* MsgChatInfo::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:Chat.MsgChatInfo.msg)
  return _internal_mutable_msg();
}
inline const std::string& MsgChatInfo::_internal_msg() const {
  return msg_.Get();
}
inline void MsgChatInfo::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgChatInfo::set_msg(std::string&& value) {
  
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Chat.MsgChatInfo.msg)
}
inline void MsgChatInfo::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Chat.MsgChatInfo.msg)
}
inline void MsgChatInfo::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Chat.MsgChatInfo.msg)
}
inline std::string* MsgChatInfo::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgChatInfo::release_msg() {
  // @@protoc_insertion_point(field_release:Chat.MsgChatInfo.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgChatInfo::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Chat.MsgChatInfo.msg)
}

// int32 index = 8;
inline void MsgChatInfo::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatInfo::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatInfo::index() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatInfo.index)
  return _internal_index();
}
inline void MsgChatInfo::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void MsgChatInfo::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatInfo.index)
}

// -------------------------------------------------------------------

// MsgChatHistoryResp

// int32 chat_type = 1;
inline void MsgChatHistoryResp::clear_chat_type() {
  chat_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatHistoryResp::_internal_chat_type() const {
  return chat_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChatHistoryResp::chat_type() const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatHistoryResp.chat_type)
  return _internal_chat_type();
}
inline void MsgChatHistoryResp::_internal_set_chat_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chat_type_ = value;
}
inline void MsgChatHistoryResp::set_chat_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chat_type(value);
  // @@protoc_insertion_point(field_set:Chat.MsgChatHistoryResp.chat_type)
}

// repeated .Chat.MsgChatInfo info = 2;
inline int MsgChatHistoryResp::_internal_info_size() const {
  return info_.size();
}
inline int MsgChatHistoryResp::info_size() const {
  return _internal_info_size();
}
inline void MsgChatHistoryResp::clear_info() {
  info_.Clear();
}
inline ::Chat::MsgChatInfo* MsgChatHistoryResp::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:Chat.MsgChatHistoryResp.info)
  return info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::MsgChatInfo >*
MsgChatHistoryResp::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:Chat.MsgChatHistoryResp.info)
  return &info_;
}
inline const ::Chat::MsgChatInfo& MsgChatHistoryResp::_internal_info(int index) const {
  return info_.Get(index);
}
inline const ::Chat::MsgChatInfo& MsgChatHistoryResp::info(int index) const {
  // @@protoc_insertion_point(field_get:Chat.MsgChatHistoryResp.info)
  return _internal_info(index);
}
inline ::Chat::MsgChatInfo* MsgChatHistoryResp::_internal_add_info() {
  return info_.Add();
}
inline ::Chat::MsgChatInfo* MsgChatHistoryResp::add_info() {
  // @@protoc_insertion_point(field_add:Chat.MsgChatHistoryResp.info)
  return _internal_add_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::MsgChatInfo >&
MsgChatHistoryResp::info() const {
  // @@protoc_insertion_point(field_list:Chat.MsgChatHistoryResp.info)
  return info_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Chat

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Chat_2eproto
