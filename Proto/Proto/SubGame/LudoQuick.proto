syntax = "proto3";

package LudoQuick;

//消息号
enum EMsgIDLudoQuick
{
	MsgID_FirstPublish 		= 0;		//场景（流程需要前端不管）
	SUB_SC_FirstPublish 	= 1;		//随机首发(MsgCommonN32)0红1绿2黄3蓝
	SUB_SC_NoticeOp			= 2;		//通知操作(MsgNoticeOpResp)
	SUB_CS_DiceInfo			= 3;		//投掷骰子(MsgCommonBool)       	ps：正常投掷和触发事件ID 7 和奖励重新摇骰子（优先级低于道具 有道具就触发道具不触发它）
	SUB_SC_ThrowDice		= 4;		//投掷结果(MsgThrowDiceResp)
	SUB_CS_OperateChess		= 5;		//操作棋子(MsgOperateChess)			ps：触发事件 9 直接处理解除开关动画就行 不用再发消息了 触发事件 10 发送解锁棋子的消息
	SUB_SC_ChessInfo		= 6;		//棋子结果(MsgChessInfoResp)
	SUB_CS_TriggerEvent		= 7;		//触发特殊事件(MsgTriggerEvent)  	ps：事件ID 1-6 发送这个消息
	SUB_SC_GameResult		= 9;		//游戏结果(MsgResultResp)
	SUB_CS_Optional			= 10;		//自选骰子(MsgCommonN32)			ps：事件ID 8 发送这个消息
	SUB_CS_GiveUp			= 11;		//投降(无)
	SUB_SC_GiveUpResult		= 12;		//投降回复(MsgCommonN32) 1已收到处理可以执行离开动作
	SUB_SC_ERR				= 13;		//错误消息(MsgCommonN32)
}
//棋子信息
message RouteInfo
{
	int32 chess_id 		= 1;			//棋子信息0123
	int32 gold_bag		= 2;			//钱袋信息
	int32 pos			= 3;			//棋子位置
}
//用户信息
message UserInfo
{
	int32 chair_id 					= 1;		//椅子号
	repeated RouteInfo route_info 	= 2;		//棋子信息
	bool finish_line_switch 		= 3;		//终点线开关
	bool end						= 4;		//是否到达终点1是
}
//棋格信息
message ChessGrid
{
	int32 pos_id 		= 1;	//格子id 1-76 红
	int32 safe_house 	= 2; 	//安全屋1是0不是
	int32 gold_bag 		= 3; 	//是否有钱袋
	int32 prop 			= 4; 	//道具格子
	int32 switch 		= 5; 	//开关
	int32 inflection 	= 6; 	//拐点
	int32 next_pos1 	= 7; 	//常规拐点
	int32 next_pos2 	= 8; 	//终点拐点
	int32 start_point 	= 9; 	//起点
	int32 end_point 	= 10;	//终点
}

//场景消息
message	MsgSceneInfoResp
{
	int32 game_state 					= 1;//游戏状态 0：选场 1：操作骰子 2：操作棋子 3：结算
	int32 current_user 					= 2;//当前操作玩家
	int32 time_remaining 				= 3;//剩余时间
	repeated UserInfo user_info	 		= 4;//用户信息
}
//通知操作
message MsgNoticeOpResp
{
	int32 chair_id = 1;			//椅子号
	int32 times = 2;			//剩余时间
}	
//投掷结果	
message MsgThrowDiceResp	
{	
	int32 chair_id 	= 1; 		//椅子号 对应颜色
	int32 dice_roll = 2;		//骰子点数	
}	
//操作棋子	
message MsgOperateChess	
{	
	int32 chair_id 	= 1; 		//椅子号 对应颜色
	int32 chess_id 	= 2;		//棋子ID 0123
	bool  is_unlock	= 3;		//解锁 1是
}	
//触发特殊事件	
message MsgTriggerEvent	
{	
	int32 chair_id = 1;			//椅子号
	int32 chess_id = 2;			//棋子ID 0123
	int32 event_id = 3;			//事件ID
}
//棋子结果
message MsgChessInfoResp
{
	int32 chair_id 		= 1; 	//椅子号 对应颜色
	int32 chess_id	 	= 2;	//棋子ID 0123
	bool  is_unlock		= 3;	//解锁 1是
	int32 bag_count	 	= 4;	//钱袋个数
	int32 retry	 		= 5;	//是否奖励重新摇骰子
	int32 map_id	 	= 6;	//正常应该到达的格子ID
	int32 end_map_id	= 7;	//最终到达的格子ID
	int32 route_num	 	= 8;	//非解锁:走了多少格 解锁:对应的格子ID
	int32 event_id 		= 9;	//事件类型 0：未触发 1：前进一格 2：前进三格 3：前进五格 4：前进七格 5：移动到最近棋子 6：移动到最近得安全屋 7 ：获得骰子 8：获得指定骰子 9：解除开关 10：解锁棋子
	int32 swith_id 		= 10;	//何种棋子结果 0骰子的棋子操作 其它同事件类型 是不同事件的棋子操作
	int32 code			= 11;	//对语言id
}
//结算信息
message GameResult
{
	int32 chair_id 		= 1; 	//椅子号 对应颜色
	UserInfo user_info 	= 2;	//用户信息
	int64 user_gold		= 3;	//用户金币
	int64 win 			= 4;	//本次获得
	int64 bet			= 5;	//消耗金币
	int64 bag			= 6;	//背包金币
	int64 bag_back		= 7;	//背包返还
}
//游戏结算
message MsgResultResp
{
	repeated GameResult result = 1;
}
