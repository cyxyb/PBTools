syntax = "proto3";

package Rummy;

//桌子状态
enum ERMGameState
{	
	GS_TP_READY		= 0;	//准备
	GS_TP_DEAL		= 1;	//发牌
	GS_TP_PLAYING	= 2;	//游戏
	GS_TP_SHOW		= 3;	//秀牌
	GS_TP_RESULT	= 4;	//结算
};

//玩家状态
enum PlayerState
{
	PS_READY		= 0;	//准备
	PS_PLAY			= 1;	//游戏
	PS_GIVE			= 2;	//弃牌
	PS_FAIL			= 3;	//失败
	PS_SORT_CARD	= 4;	//理牌
	PS_SHOW_HU		= 5;	//胡牌
};

//操作码
enum ERMGameAction
{
	InvaldAct		= 0;	//无效
	DropCard		= 1;	//弃牌
	NaCard			= 2;	//拿牌
	ChuCard			= 4;	//出牌
	SortsCard		= 8;	//理牌
	ShowCard		= 16;	//秀牌
	TrusteeShip		= 32;	//托管
};

enum ERMColCardType
{
	//扑克类型
	COL_SINGLE		= 0;	//单牌类型
	COL_BAO_ZI		= 1;	//豹子类型
	COL_SHUN_ZHI	= 2;	//百搭顺金
	COL_QING_SHUN	= 3;	//顺金类型
	COL_MAX			= 4;	//最大牌型
};

enum ERMMsgIDSubGame
{
	MsgIDSubGame_Null					= 0;
	MsgIDSubGame_GameStartResp			= 1;	//游戏开始(RMMsgGameStartResp)
	MsgIDSubGame_NotifyActionResp		= 2;	//通知玩家操作(RMMsgNotifyActionResp)
	MsgIDSubGame_Action					= 3;	//玩家操作(RMMsgAction)
	MsgIDSubGame_ActionResp				= 4;	//玩家操作返回(RMMsgActionResp)
	MsgIDSubGame_GameResultResp			= 5;	//结算(RMMsgGameResult)
	MsgIDSubGame_NotifyStateResp		= 6;	//桌子状态(RMMsgTableState)

	MsgIDSubGame_TimeOutResp			= 11;	//通知超时(MsgCommonBool)
	MsgIDSubGame_TimeOutReady			= 12;	//重新准备(MsgCommonBool)
	MsgIDSubGame_TimeOutReadyResp		= 13;	//准备返回(MsgCommonBool)
	MsgIDSubGame_TimeOutKickResp		= 14;	//超时踢了游戏(MsgCommonBool)
	MsgIDSubGame_NotifyTrusteeshipResp	= 15;	//托管变化通知(RMMsgNotifyTrusteeship)

	/////////////////////////机器人消息///////////////////////
	MsgIDSubGame_NotifySystemCheatResp	= 20;	//通知系统作弊率
	MsgIDSubGame_NotifyNextCardResp		= 21;	//通知玩家人下一张牌
	MsgIDSubGame_NotifyIsMaxResp		= 22;	//通知是否最大
	MsgIDSubGame_NotifyLastActResp		= 25;	//通知玩家行为

	
	//////////////////////////测试消息
	MsgIDSubGame_NotifyOperPlayerInfo	= 40;	//玩家操作后的手牌变化(RMMsgPlayerInfo)

}

message RMColumnInfo
{
	int32				start_value		= 1;	//开始值
	int32				col_type		= 2;	//分组类型
	repeated	int32	cards			= 3;	//操作玩家椅子号
}

message RMMsgTableState
{
	int32				state			= 1;	//桌子状态
	int32				out_ime			= 2;	//剩余时间
}


message RMMsgHandCards
{
	repeated int32		cards			= 1;	//手牌
}

message RMMsgPlayerInfo
{
	int32					chair_id		= 1;	//玩家椅子号
	int32					play_status		= 2;	//玩家状态
	int64					gold			= 3;	//自己的金币别人的是空	结算的时候不能用这个值不是最新的，在开始发牌的时候会告诉玩家最新的金币
	int64					win_gold		= 4;	//输赢分	每局结算的
	repeated int32			cards			= 5;	//手牌
	int32					cur_act			= 6;	//当前玩家的操作码
	repeated RMColumnInfo 	hand_group_info	= 7;	//手牌分组
}

//场景消息
message RMMsgSceneInfo
{
	int64			  			max_multiple	= 1;	//最大倍数
	int64			  			cell_score		= 2;	//底分
	int32						table_state		= 3;	//桌子状态
	int32						tax				= 4;	//抽水

	int32						banker_chair_id	= 5;	//庄家椅子号
	int32						cur_chair_id	= 6;	//当前操作椅子号
	int32						cur_chair_act	= 7;	//当前玩家的操作码
	int32						out_time		= 8;	//当前状态剩余超时时间
	int32						total_time		= 9;	//当前状态总时间

	int32						joker_card		= 10;	//百搭牌
	int32						left_card_num	= 11;	//牌堆牌数量
	repeated int32				out_cards		= 12;	//失效牌

	repeated RMMsgPlayerInfo 	player_infos 	= 13;	//玩家状态
}

//游戏开始
message RMMsgGameStartResp
{
	int32				cur_chair_id	= 1;	//操作玩家椅子号
	int32				banker_chair_id	= 2;	//庄家椅子号
	int64				max_score		= 3;	//最大下注
	int64				cell_score		= 4;	//底分
	int64				max_multiple	= 5;	//最大倍数

	int64				new_gold		= 9;	//自己的金币

	int32				joker_card		= 10;	//百搭牌
	int32				left_card_num	= 11;	//牌堆牌数量
	repeated int32		out_cards		= 12;	//失效牌

	repeated int32		play_index		= 13;	//在玩下标
	repeated int32		cards			= 15;	//手牌

}

//通知操作
message RMMsgNotifyActionResp
{
	int32				cur_chair_id	= 1;	//操作玩家椅子号
	int32				current_act		= 3;	//当前操作码
	int32				oper_time		= 4;	//操作时间
}

//玩家操作
message RMMsgAction
{
	int32 					chair_id		= 1;
	int32					act_type		= 2;	//操作标示
	int32					dest_card		= 3;	//目标牌
	bool					get_out_card 	= 4;	//是否拿最后一张了的牌 (act_type= TrusteeShip ,此变量，为是否托管)
	repeated RMColumnInfo 	hand_group_info	= 5;	//手牌分组	(拿牌的时候可以不传 出牌时必传)
}

//玩家操作
message RMMsgActionResp
{
	int32 					chair_id		= 1;
	int32					act_type		= 2;	//操作标示
	int32					dest_card		= 3;	//目标牌
	bool					get_out_card	= 4;	//是否拿最后一张了的牌
	uint32					drop_multiple	= 6;	//弃牌倍数
	bool 					auto_action		= 7;	//是否自动
	int32					left_card_num	= 9;	//剩余牌堆数量
	//repeated RMColumnInfo 	hand_group_info	= 10;	//手牌分组
}

message RMMsgActionChoice
{
	int32				determined_level	= 1;	//等级
	bool				is_determine		= 2;	//确定
	repeated RMMsgAction choices			= 3;	//历史
	RMMsgAction			determined_action	= 4;	//确定操作
}

//游戏结果                                  
message RMMsgGameResult                           
{                                           
	int32						game_tax		= 1;	//税收
	repeated RMMsgPlayerInfo	player_info		= 2;	//手牌
	int32						end_state		= 3;	//结束状态  1 比牌结束 2 全场秀牌
}     

//托管                               
message RMMsgNotifyTrusteeship                           
{                                           
	int32						seat_index		= 1;	//
	bool						is_trusteeship	= 2;	//
}                                           


//////////////////////////////////////////////////////////////机器人消息///////////////////////////////////////
message RMMsgNotifyPlayerAct
{
	int32				chair_id		= 1;	//玩家椅子号
	int32				act				= 2;	//被比玩家椅子号
}