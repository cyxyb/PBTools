syntax = "proto3";

package ChinaChess;

enum EMsgIDSubGame
{
	CMD_Chess_SUB_C_REGRET_REQ = 0; 		//悔棋(MsgCommonEmpty)
	CMD_Chess_SUB_C_REGRET_ANSWER = 1; 		//悔棋应答(MsgCommonBool)
	CMD_Chess_SUB_C_GIVEUP_REQ = 2;			//认输请求(MsgCommonEmpty)
	CMD_Chess_SUB_C_PEACE_REQ = 3;  		//和棋请求(MsgCommonEmpty)
	CMD_Chess_SUB_C_PEACE_ANSWER = 4;  		//和棋应答(MsgCommonBool)
	CMD_Chess_SUB_C_MOVE_CHESS = 5;			//移动棋子(MoveReq)
	CMD_Chess_SUB_C_KICK_PLAYER = 6;		//房主踢人(MsgCommonN32)
	CMD_Chess_SUB_C_SET_RULE = 7;			//玩家设置规则(MsgCommonN64)
	CMD_Chess_SUB_C_MAKE_RULE = 8;			//玩家确定下注(MsgCommonN64)
	CMD_Chess_SUB_C_NOTIFY_READY = 9;		//玩家选择准备(MsgCommonEmpty)
	CMD_Chess_SUB_C_NOTIFY_START = 10;		//玩家选择开始(MsgCommonEmpty)
	CMD_Chess_SUB_C_CONTINUE = 11;			//玩家选择继续(MsgCommonEmpty)
	CMD_Chess_SUB_S_GAME_START = 12;		//游戏开始(MsgCommonEmpty)
	CMD_Chess_SUB_S_MOVE_CHESS = 13;		//移动棋子(MoveRsp)
	CMD_Chess_SUB_S_REGRET_REQ = 14;		//悔棋请求(MsgCommonN32)
	CMD_Chess_SUB_S_REGRET_FAILE = 15;		//悔棋失败(MsgCommonN32)
	CMD_Chess_SUB_S_REGRET_RESULT = 16;		//悔棋结果(RegretRsp)
	CMD_Chess_SUB_S_PEACE_REQ = 17;			//和棋请求(OpRsp)
	CMD_Chess_SUB_S_PEACE_ANSWER = 18;		//和棋失败(MsgCommonEmpty)
	CMD_Chess_SUB_S_GAME_END = 19;			//游戏结束(GameResult)
	CMD_Chess_SUB_S_CHESS_MANUAL = 20;		//棋谱信息(Chess_Manual)
	CMD_Chess_SUB_S_REQ_SET_RULE = 21;		//请求设置
	CMD_Chess_SUB_S_REQ_AGREE_RULE = 22;	//请求同意
	CMD_Chess_SUB_S_KICK_PLAYER = 23;		//房主踢人(MsgCommonEmpty)
	CMD_Chess_SUB_S_NOTIFY_TIMER = 24;		//等待时间通知(Notify_Timer)
	CMD_Chess_SUB_S_NOTIFY_ROOM_OWNER = 25;	//通知谁是房主(MsgCommonN32)
	CMD_Chess_SUB_S_NOTIFY_SET_RULE = 26;	//通知玩家设置规则(OpRsp)
	CMD_Chess_SUB_S_SET_RULE = 27;			//玩家设置规则
	CMD_Chess_SUB_S_MAKE_RULE = 28;			//玩家确定下注(MakeRuleRsp)
	CMD_Chess_SUB_S_NOTIFY_READY = 29;		//通知玩家选择准备(OpRsp)
	CMD_Chess_SUB_S_NOTIFY_START = 30;		//通知玩家选择开始(OpRsp)
	CMD_Chess_SUB_S_CONTINUE = 31;			//玩家选择继续(MsgCommonN32)
    CMD_ChatOrFaceReq       = 32;
    CMD_ChatOrFaceRsp       = 33;
    CMD_RoomSetReq       = 34;				//房间设置(RoomSetReq)
    CMD_RoomSetRsp       = 35;				//房间设置返回(MsgCommonN32)
	CMD_TimeOverKick	 = 36;				//超时被踢
}

message CommonRsp
{
	int32 code = 1;
	string content = 2;
	int32 applyUserID = 3;
	int32 handleTime = 4;
}

message LoginReq
{
	int32 UserDBID = 1;
	string Token = 2;
}

message LoginRsp
{
	int32 UserDBID = 1;
	int32 tableID = 2;
	int32 chairID = 3;
	int32 code = 4;
	string content = 5;
}

message LogoutReq
{
	int32 UserDBID = 1;
}

message LogoutRsp
{
	int32 code = 1;
	string content = 2;
}

message ExitRsp
{
	int32 code = 1;
	string content = 2;
	int32 userID = 3;
}

message SitDownRsp
{
	int32 code = 1;
	int32 user_dbid = 2;
	int32 chair = 3;
}

message CustomLoginReq
{
	int32 UserDBID = 1;
	int32 sn = 2;
	int32 rule = 3;
	string Token = 4;
}

message CustomLoginRsp
{
	int32 UserDBID = 1;
	int32 tableID = 2;
	int32 chairID = 3;
	int32 code = 4;
	string content = 5;
	int32 sn = 6;
	string password = 7;
	int32 RoomId = 8;
}

message PlayerResult
{
	int32 pid = 1;
	int32 chairId = 2;
	int64 score = 3;
	repeated int32 winState = 4;
	int64 money = 5;
}

message ResultPush
{
	repeated PlayerResult players = 1;
	int32 winnerID = 2;
}

message ConfigPush
{
	bool isOpenTakeIn = 1;
	int32 taiFee = 2;
	bool SettlePay = 3;
	int32 SettlePayFactor = 4;
	int32 RoundTime = 5;
	int32 StepTime = 6;
	int32 StepTime2 = 7;
	int32 DingTime = 8;
	int64 BaseScore = 9;
}

message Scene_GameRuleInfo
{
	int32 lBetMin = 1;
	int64 lBetMax = 2;
	repeated int32 szChip = 3;
	int32 dwBet = 4;
	int32 wRuleLimitTime = 5;
	int32 wRuleStepTime = 6;
}

message ChessMap
{
	int32 wCurrentUser = 1;
	repeated int32 wChessStepCount = 2;
	Scene_GameRuleInfo GameRuleInfo = 3;
	repeated int32 cbPeaceCount = 4;
	repeated int32 cbRegretCount = 5;
	repeated Scene_Chess ChessItemArray = 6;
}

message Scene_ChessItem
{
	int32 cbXPos = 1; //255被吃
	int32 cbYPos = 2;
	int32 cbChess = 3;
	int32 cbColor = 4;
}

message Scene_Chess
{
	repeated Scene_ChessItem items = 1;
}

message SceneRsp
{
	int32 status = 1;		// 0:普通 1：残局
	ChessMap free = 2;   	// 普通模式
	ChessMap play = 3;   	// 残局
	int32 campSide = 4;		//红1，黑2
}
//房间设置，放到场景消息请求前
message RoomSetReq
{
	int32 mode = 1;
	int32 campSide = 2;//红1，黑2
}

message EmojiReq
{
	int32 sender = 1;
	int32 sendee = 2;
	int32 ieID = 3;
}

message EmojiRsp
{
	int32 sender = 1;
	int32 sendee = 2;
	int32 ieID = 3;
	int32 ret = 4;
}

message ExtendCoin
{
	int32 id = 1;
	int64 amount = 2;
}

message UserInfoPush
{
	int32 table_id = 1;
	int32 index = 2;
	int32 user_dbid = 3;
	GameScore Score = 4;
	int32 chair_id = 5;
	int32 face_id = 6;
	int32 status = 7;
	int32 vip_left_days = 8;
	int32 user_name_len = 9;
	string user_name = 10;
	string partner = 11;
	string ip = 12;
	string location = 13;
}

message GameScore
{
	int64 score = 1;
	int64 money = 2;
	int32 tax = 3;
	repeated int32 result = 4;
	int32 ticket = 5;
	repeated ExtendCoin extendCoin = 6;
}

message ReadyAgainReq
{
	int32 user_dbid = 1;
}

message ReadyAgainRsp
{
	int32 status = 1;
	string errMsg = 2;
}

message EmojiInfo
{
	int32 id = 1;
	int32 price = 2;
}

message EmojiConfigPush
{
	repeated EmojiInfo emojiList = 1;
}

message ChatOrFaceReq
{
	int32 user_dbid = 1;
	int32 opType = 2;
	int32 faceID = 3;
}

message ChatOrFaceRsp
{
	int32 user_dbid = 1;
	int32 opType = 2;
	int32 faceID = 3;
}

message OpRsp
{
	int32	opIndex = 1;		//操作玩家
	int32	waitTime = 2;		//操作时间
}

//悔棋结果
message RegretRsp
{
	int32	wRegretUser = 1;		//悔棋操作玩家
	int32	wCurrentUser = 2;		//当前玩家
	int32	cbRegretCount = 3;		//悔棋次数
}

message AgreeReq
{
	int32 userID = 1;	
	int32 kind = 2;
	bool agree = 3;	
}

message AgreeRsp
{
	int32 code = 1;
	string content = 2;
	int32 applyUserID = 3;	
	int32 handleUserID = 4;	
	int32 kind = 5;
	bool agree = 6;
	int32 leftTime = 7;
	int32 start_x0 = 8;
	int32 start_y0 = 9;
	int32 end_x0 = 10;
	int32 end_y0 = 11;
	int32 start_x = 12;
	int32 start_y = 13;
	int32 end_x = 14;
	int32 end_y = 15;
	int32 kill = 16;
	repeated TimerPush timer = 17;
}

message CounterPush
{
	bool canAdmit = 1;
	bool canRegret = 2;
	int32 regretLeftCount = 3;	
	bool canDraw = 4;	
	int32 drawLeftCount = 5;
}

message MoveReq
{
	int32	cbXSourcePos = 1;
	int32	cbYSourcePos = 2;
	int32	cbXTargetPos = 3;
	int32	cbYTargetPos = 4;
}

message MoveRsp
{
	int32	cbXSourcePos = 1;
	int32	cbYSourcePos = 2;
	int32	cbXTargetPos = 3;
	int32	cbYTargetPos = 4;
	int32 	wCurrentUser = 5;
	int32	result		 = 6;
}

message TimerPush
{
	int32 chair = 1;
	int32 roundLeftTime = 2;
	int32 stepLeftTime = 3;	
	int32 stepTime = 4;	
}

message GameResult
{
	int32	wWinUser = 1;		//赢家，和局为65535
	repeated int64 lUserScore = 2;		//玩家金币
	int64	bet = 3;
}

message	Chess_Manual
{
	repeated Chess_Manual_Item items = 1;	
}

message Chess_Manual_Item
{	
	int32 cbXSourceChessPos = 1;
	int32 cbYSourceChessPos = 2;
	int32 cbXTargetChessPos = 3;
	int32 cbYTargetChessPos = 4;
	int32 cbUniteChess = 5;
	int32 cbSourceColor = 6;
}

message NotifyRsp
{
	int32 waitTime = 1;			//等待时间
	int32 roomType = 2;			//阶段,2:等待玩家加入,4:设置金额中,6:准备中,8:准备开始,9:时间到,10:结算中,11:求和中,12:悔棋中
	int32 index = 3;			//椅子号
}

message MakeRuleRsp
{
	int32 errorID = 1;			//确认状态码，0成功，1设置金额小于最小下注，2设置金额大于最大下注，3红方金币不足，4黑方金币不足
	int64 score = 2;			//下注金币
}