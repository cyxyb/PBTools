// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/SubGame/YGBH.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace YGBH {

  /// <summary>Holder for reflection information generated from Proto/SubGame/YGBH.proto</summary>
  public static partial class YGBHReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/SubGame/YGBH.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static YGBHReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhQcm90by9TdWJHYW1lL1lHQkgucHJvdG8SBFlHQkgipAEKDFNDX1NjZW5l",
            "SW5mbxISCgpmcmVlX2NvdW50GAEgASgFEhMKC2N1cnJlbnRfYmV0GAIgASgF",
            "EhMKC2dhaW5fcGVpX2x2GAMgASgFEhEKCWJldF9jb3VudBgEIAEoBRILCgNi",
            "ZXQYBSADKAUSFQoNZnJlZV9pY29uX2xpZRgGIAMoBRIRCglmcmVlX3R5cGUY",
            "ByABKAUSDAoEZ29sZBgIIAMoBSIYCgdIaXRJY29uEg0KBXZhbHVlGAEgAygF",
            "IvACChBDTURfM0RfU0NfUmVzdWx0EgwKBGljb24YASADKAUSHwoIaGl0X2lj",
            "b24YAiADKAsyDS5ZR0JILkhpdEljb24SDwoHd2luX29kZBgDIAEoBRIQCghj",
            "dXJfZ29sZBgEIAEoAxIQCgh3aW5fZ29sZBgFIAEoBRIWCg50b3RhbF93aW5f",
            "Z29sZBgGIAEoBRIVCg1pc19zbWFsbF9nYW1lGAcgASgFEhIKCmZyZWVfY291",
            "bnQYCCABKAUSEgoKcHJpY2VfZ29sZBgJIAEoBRIQCghtdWx0aXBsZRgKIAEo",
            "BRIeChZwcmljZV9wb29sX3BlcmNlbnRfbWF4GAsgASgFEhEKCXNtYWxsX251",
            "bRgMIAEoBRIYChB0b3RhbF9mcmVlX3RpbWVzGA0gASgFEhwKFHByaXplX3Bv",
            "b2xfd2lsZF9nb2xkGA4gASgFEhEKCWZyZWVfdHlwZRgPIAEoBRIRCglpY29u",
            "X2xpbmUYECADKAUiMAoTQ01EXzNEX0NTX1N0YXJ0R2FtZRIMCgRsaW5lGAEg",
            "ASgFEgsKA2JldBgCIAEoBSIgChBDTURfU0NfU21hbGxHYW1lEgwKBGdvbGQY",
            "ASADKAUiMgoTQ01EX1NDX1NtYWxsR2FtZUVuZBINCgVpbmRleBgBIAEoBRIM",
            "CgRnb2xkGAIgASgFKrIBCgZFTXNnSUQSEwoPU1VCX1NDX0JFVF9GQUlMEAAS",
            "FAoQU1VCX1NDX1NNQUxMR0FNRRABEhcKE1NVQl9TQ19TTUFMTEdBTUVFTkQQ",
            "AhIVChFTVUJfU0NfU1RBUlRfR0FNRRADEhUKEVNVQl9DU19HQU1FX1NUQVJU",
            "EAQSHgoaU1VCX0NTX0NIT1NFX0ZSRUVHQU1FX1RZUEUQBRIWChJTVUJfQ1Nf",
            "TElUVExFX0dBTUUQBmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::YGBH.EMsgID), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::YGBH.SC_SceneInfo), global::YGBH.SC_SceneInfo.Parser, new[]{ "FreeCount", "CurrentBet", "GainPeiLv", "BetCount", "Bet", "FreeIconLie", "FreeType", "Gold" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YGBH.HitIcon), global::YGBH.HitIcon.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YGBH.CMD_3D_SC_Result), global::YGBH.CMD_3D_SC_Result.Parser, new[]{ "Icon", "HitIcon", "WinOdd", "CurGold", "WinGold", "TotalWinGold", "IsSmallGame", "FreeCount", "PriceGold", "Multiple", "PricePoolPercentMax", "SmallNum", "TotalFreeTimes", "PrizePoolWildGold", "FreeType", "IconLine" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YGBH.CMD_3D_CS_StartGame), global::YGBH.CMD_3D_CS_StartGame.Parser, new[]{ "Line", "Bet" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YGBH.CMD_SC_SmallGame), global::YGBH.CMD_SC_SmallGame.Parser, new[]{ "Gold" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YGBH.CMD_SC_SmallGameEnd), global::YGBH.CMD_SC_SmallGameEnd.Parser, new[]{ "Index", "Gold" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EMsgID {
    /// <summary>
    ///下注失败（CommonN32）
    /// </summary>
    [pbr::OriginalName("SUB_SC_BET_FAIL")] SubScBetFail = 0,
    /// <summary>
    ///小游戏数据（CMD_SC_SmallGame）
    /// </summary>
    [pbr::OriginalName("SUB_SC_SMALLGAME")] SubScSmallgame = 1,
    /// <summary>
    ///小游戏结束返回（CMD_SC_SmallGameEnd）
    /// </summary>
    [pbr::OriginalName("SUB_SC_SMALLGAMEEND")] SubScSmallgameend = 2,
    /// <summary>
    ///游戏结果返回（CMD_3D_SC_Result）
    /// </summary>
    [pbr::OriginalName("SUB_SC_START_GAME")] SubScStartGame = 3,
    /// <summary>
    ///开始游戏 （CMD_3D_CS_StartGame）
    /// </summary>
    [pbr::OriginalName("SUB_CS_GAME_START")] SubCsGameStart = 4,
    /// <summary>
    ///选择免费类型（CommonN32）
    /// </summary>
    [pbr::OriginalName("SUB_CS_CHOSE_FREEGAME_TYPE")] SubCsChoseFreegameType = 5,
    /// <summary>
    ///开始小游戏(CommonN32)
    /// </summary>
    [pbr::OriginalName("SUB_CS_LITTLE_GAME")] SubCsLittleGame = 6,
  }

  #endregion

  #region Messages
  /// <summary>
  ///场景消息		
  /// </summary>
  public sealed partial class SC_SceneInfo : pb::IMessage<SC_SceneInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SC_SceneInfo> _parser = new pb::MessageParser<SC_SceneInfo>(() => new SC_SceneInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_SceneInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YGBH.YGBHReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo(SC_SceneInfo other) : this() {
      freeCount_ = other.freeCount_;
      currentBet_ = other.currentBet_;
      gainPeiLv_ = other.gainPeiLv_;
      betCount_ = other.betCount_;
      bet_ = other.bet_.Clone();
      freeIconLie_ = other.freeIconLie_.Clone();
      freeType_ = other.freeType_;
      gold_ = other.gold_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo Clone() {
      return new SC_SceneInfo(this);
    }

    /// <summary>Field number for the "free_count" field.</summary>
    public const int FreeCountFieldNumber = 1;
    private int freeCount_;
    /// <summary>
    ///免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeCount {
      get { return freeCount_; }
      set {
        freeCount_ = value;
      }
    }

    /// <summary>Field number for the "current_bet" field.</summary>
    public const int CurrentBetFieldNumber = 2;
    private int currentBet_;
    /// <summary>
    ///当前下注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentBet {
      get { return currentBet_; }
      set {
        currentBet_ = value;
      }
    }

    /// <summary>Field number for the "gain_pei_lv" field.</summary>
    public const int GainPeiLvFieldNumber = 3;
    private int gainPeiLv_;
    /// <summary>
    ///已获赔率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GainPeiLv {
      get { return gainPeiLv_; }
      set {
        gainPeiLv_ = value;
      }
    }

    /// <summary>Field number for the "bet_count" field.</summary>
    public const int BetCountFieldNumber = 4;
    private int betCount_;
    /// <summary>
    ///下注列表个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BetCount {
      get { return betCount_; }
      set {
        betCount_ = value;
      }
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_bet_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> bet_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///下注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Bet {
      get { return bet_; }
    }

    /// <summary>Field number for the "free_icon_lie" field.</summary>
    public const int FreeIconLieFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_freeIconLie_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> freeIconLie_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///整列 是紫霞为1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FreeIconLie {
      get { return freeIconLie_; }
    }

    /// <summary>Field number for the "free_type" field.</summary>
    public const int FreeTypeFieldNumber = 7;
    private int freeType_;
    /// <summary>
    ///免费类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeType {
      get { return freeType_; }
      set {
        freeType_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_gold_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> gold_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 0: 至尊宝3 1:至尊宝4 2:至尊宝5 3:孙悟空3 4:孙悟空4 5:孙悟空5 6:至尊宝3 7:孙悟空3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Gold {
      get { return gold_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_SceneInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_SceneInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FreeCount != other.FreeCount) return false;
      if (CurrentBet != other.CurrentBet) return false;
      if (GainPeiLv != other.GainPeiLv) return false;
      if (BetCount != other.BetCount) return false;
      if(!bet_.Equals(other.bet_)) return false;
      if(!freeIconLie_.Equals(other.freeIconLie_)) return false;
      if (FreeType != other.FreeType) return false;
      if(!gold_.Equals(other.gold_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FreeCount != 0) hash ^= FreeCount.GetHashCode();
      if (CurrentBet != 0) hash ^= CurrentBet.GetHashCode();
      if (GainPeiLv != 0) hash ^= GainPeiLv.GetHashCode();
      if (BetCount != 0) hash ^= BetCount.GetHashCode();
      hash ^= bet_.GetHashCode();
      hash ^= freeIconLie_.GetHashCode();
      if (FreeType != 0) hash ^= FreeType.GetHashCode();
      hash ^= gold_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FreeCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FreeCount);
      }
      if (CurrentBet != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrentBet);
      }
      if (GainPeiLv != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GainPeiLv);
      }
      if (BetCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BetCount);
      }
      bet_.WriteTo(output, _repeated_bet_codec);
      freeIconLie_.WriteTo(output, _repeated_freeIconLie_codec);
      if (FreeType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FreeType);
      }
      gold_.WriteTo(output, _repeated_gold_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FreeCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FreeCount);
      }
      if (CurrentBet != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrentBet);
      }
      if (GainPeiLv != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GainPeiLv);
      }
      if (BetCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BetCount);
      }
      bet_.WriteTo(ref output, _repeated_bet_codec);
      freeIconLie_.WriteTo(ref output, _repeated_freeIconLie_codec);
      if (FreeType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FreeType);
      }
      gold_.WriteTo(ref output, _repeated_gold_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FreeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeCount);
      }
      if (CurrentBet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentBet);
      }
      if (GainPeiLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GainPeiLv);
      }
      if (BetCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BetCount);
      }
      size += bet_.CalculateSize(_repeated_bet_codec);
      size += freeIconLie_.CalculateSize(_repeated_freeIconLie_codec);
      if (FreeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeType);
      }
      size += gold_.CalculateSize(_repeated_gold_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_SceneInfo other) {
      if (other == null) {
        return;
      }
      if (other.FreeCount != 0) {
        FreeCount = other.FreeCount;
      }
      if (other.CurrentBet != 0) {
        CurrentBet = other.CurrentBet;
      }
      if (other.GainPeiLv != 0) {
        GainPeiLv = other.GainPeiLv;
      }
      if (other.BetCount != 0) {
        BetCount = other.BetCount;
      }
      bet_.Add(other.bet_);
      freeIconLie_.Add(other.freeIconLie_);
      if (other.FreeType != 0) {
        FreeType = other.FreeType;
      }
      gold_.Add(other.gold_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FreeCount = input.ReadInt32();
            break;
          }
          case 16: {
            CurrentBet = input.ReadInt32();
            break;
          }
          case 24: {
            GainPeiLv = input.ReadInt32();
            break;
          }
          case 32: {
            BetCount = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            bet_.AddEntriesFrom(input, _repeated_bet_codec);
            break;
          }
          case 50:
          case 48: {
            freeIconLie_.AddEntriesFrom(input, _repeated_freeIconLie_codec);
            break;
          }
          case 56: {
            FreeType = input.ReadInt32();
            break;
          }
          case 66:
          case 64: {
            gold_.AddEntriesFrom(input, _repeated_gold_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            FreeCount = input.ReadInt32();
            break;
          }
          case 16: {
            CurrentBet = input.ReadInt32();
            break;
          }
          case 24: {
            GainPeiLv = input.ReadInt32();
            break;
          }
          case 32: {
            BetCount = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            bet_.AddEntriesFrom(ref input, _repeated_bet_codec);
            break;
          }
          case 50:
          case 48: {
            freeIconLie_.AddEntriesFrom(ref input, _repeated_freeIconLie_codec);
            break;
          }
          case 56: {
            FreeType = input.ReadInt32();
            break;
          }
          case 66:
          case 64: {
            gold_.AddEntriesFrom(ref input, _repeated_gold_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class HitIcon : pb::IMessage<HitIcon>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HitIcon> _parser = new pb::MessageParser<HitIcon>(() => new HitIcon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HitIcon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YGBH.YGBHReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitIcon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitIcon(HitIcon other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitIcon Clone() {
      return new HitIcon(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_value_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> value_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HitIcon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HitIcon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      value_.WriteTo(output, _repeated_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      value_.WriteTo(ref output, _repeated_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HitIcon other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            value_.AddEntriesFrom(ref input, _repeated_value_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 游戏结果返回
  /// </summary>
  public sealed partial class CMD_3D_SC_Result : pb::IMessage<CMD_3D_SC_Result>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_3D_SC_Result> _parser = new pb::MessageParser<CMD_3D_SC_Result>(() => new CMD_3D_SC_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_3D_SC_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YGBH.YGBHReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result(CMD_3D_SC_Result other) : this() {
      icon_ = other.icon_.Clone();
      hitIcon_ = other.hitIcon_.Clone();
      winOdd_ = other.winOdd_;
      curGold_ = other.curGold_;
      winGold_ = other.winGold_;
      totalWinGold_ = other.totalWinGold_;
      isSmallGame_ = other.isSmallGame_;
      freeCount_ = other.freeCount_;
      priceGold_ = other.priceGold_;
      multiple_ = other.multiple_;
      pricePoolPercentMax_ = other.pricePoolPercentMax_;
      smallNum_ = other.smallNum_;
      totalFreeTimes_ = other.totalFreeTimes_;
      prizePoolWildGold_ = other.prizePoolWildGold_;
      freeType_ = other.freeType_;
      iconLine_ = other.iconLine_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result Clone() {
      return new CMD_3D_SC_Result(this);
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_icon_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> icon_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Icon {
      get { return icon_; }
    }

    /// <summary>Field number for the "hit_icon" field.</summary>
    public const int HitIconFieldNumber = 2;
    private static readonly pb::FieldCodec<global::YGBH.HitIcon> _repeated_hitIcon_codec
        = pb::FieldCodec.ForMessage(18, global::YGBH.HitIcon.Parser);
    private readonly pbc::RepeatedField<global::YGBH.HitIcon> hitIcon_ = new pbc::RepeatedField<global::YGBH.HitIcon>();
    /// <summary>
    ///击中的图标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::YGBH.HitIcon> HitIcon {
      get { return hitIcon_; }
    }

    /// <summary>Field number for the "win_odd" field.</summary>
    public const int WinOddFieldNumber = 3;
    private int winOdd_;
    /// <summary>
    ///赢得倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinOdd {
      get { return winOdd_; }
      set {
        winOdd_ = value;
      }
    }

    /// <summary>Field number for the "cur_gold" field.</summary>
    public const int CurGoldFieldNumber = 4;
    private long curGold_;
    /// <summary>
    ///玩家金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurGold {
      get { return curGold_; }
      set {
        curGold_ = value;
      }
    }

    /// <summary>Field number for the "win_gold" field.</summary>
    public const int WinGoldFieldNumber = 5;
    private int winGold_;
    /// <summary>
    ///赢得金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinGold {
      get { return winGold_; }
      set {
        winGold_ = value;
      }
    }

    /// <summary>Field number for the "total_win_gold" field.</summary>
    public const int TotalWinGoldFieldNumber = 6;
    private int totalWinGold_;
    /// <summary>
    ///总赢得金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalWinGold {
      get { return totalWinGold_; }
      set {
        totalWinGold_ = value;
      }
    }

    /// <summary>Field number for the "is_small_game" field.</summary>
    public const int IsSmallGameFieldNumber = 7;
    private int isSmallGame_;
    /// <summary>
    ///是否有小游戏
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsSmallGame {
      get { return isSmallGame_; }
      set {
        isSmallGame_ = value;
      }
    }

    /// <summary>Field number for the "free_count" field.</summary>
    public const int FreeCountFieldNumber = 8;
    private int freeCount_;
    /// <summary>
    ///免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeCount {
      get { return freeCount_; }
      set {
        freeCount_ = value;
      }
    }

    /// <summary>Field number for the "price_gold" field.</summary>
    public const int PriceGoldFieldNumber = 9;
    private int priceGold_;
    /// <summary>
    ///奖金池金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PriceGold {
      get { return priceGold_; }
      set {
        priceGold_ = value;
      }
    }

    /// <summary>Field number for the "multiple" field.</summary>
    public const int MultipleFieldNumber = 10;
    private int multiple_;
    /// <summary>
    ///追加单线倍率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Multiple {
      get { return multiple_; }
      set {
        multiple_ = value;
      }
    }

    /// <summary>Field number for the "price_pool_percent_max" field.</summary>
    public const int PricePoolPercentMaxFieldNumber = 11;
    private int pricePoolPercentMax_;
    /// <summary>
    ///最大奖励倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PricePoolPercentMax {
      get { return pricePoolPercentMax_; }
      set {
        pricePoolPercentMax_ = value;
      }
    }

    /// <summary>Field number for the "small_num" field.</summary>
    public const int SmallNumFieldNumber = 12;
    private int smallNum_;
    /// <summary>
    ///小游戏次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SmallNum {
      get { return smallNum_; }
      set {
        smallNum_ = value;
      }
    }

    /// <summary>Field number for the "total_free_times" field.</summary>
    public const int TotalFreeTimesFieldNumber = 13;
    private int totalFreeTimes_;
    /// <summary>
    ///免费游戏剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalFreeTimes {
      get { return totalFreeTimes_; }
      set {
        totalFreeTimes_ = value;
      }
    }

    /// <summary>Field number for the "prize_pool_wild_gold" field.</summary>
    public const int PrizePoolWildGoldFieldNumber = 14;
    private int prizePoolWildGold_;
    /// <summary>
    ///不知道
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PrizePoolWildGold {
      get { return prizePoolWildGold_; }
      set {
        prizePoolWildGold_ = value;
      }
    }

    /// <summary>Field number for the "free_type" field.</summary>
    public const int FreeTypeFieldNumber = 15;
    private int freeType_;
    /// <summary>
    ///免费类型/13/14
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeType {
      get { return freeType_; }
      set {
        freeType_ = value;
      }
    }

    /// <summary>Field number for the "icon_line" field.</summary>
    public const int IconLineFieldNumber = 16;
    private static readonly pb::FieldCodec<int> _repeated_iconLine_codec
        = pb::FieldCodec.ForInt32(130);
    private readonly pbc::RepeatedField<int> iconLine_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///整列百搭 1为百搭 0不是
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IconLine {
      get { return iconLine_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_3D_SC_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_3D_SC_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!icon_.Equals(other.icon_)) return false;
      if(!hitIcon_.Equals(other.hitIcon_)) return false;
      if (WinOdd != other.WinOdd) return false;
      if (CurGold != other.CurGold) return false;
      if (WinGold != other.WinGold) return false;
      if (TotalWinGold != other.TotalWinGold) return false;
      if (IsSmallGame != other.IsSmallGame) return false;
      if (FreeCount != other.FreeCount) return false;
      if (PriceGold != other.PriceGold) return false;
      if (Multiple != other.Multiple) return false;
      if (PricePoolPercentMax != other.PricePoolPercentMax) return false;
      if (SmallNum != other.SmallNum) return false;
      if (TotalFreeTimes != other.TotalFreeTimes) return false;
      if (PrizePoolWildGold != other.PrizePoolWildGold) return false;
      if (FreeType != other.FreeType) return false;
      if(!iconLine_.Equals(other.iconLine_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= icon_.GetHashCode();
      hash ^= hitIcon_.GetHashCode();
      if (WinOdd != 0) hash ^= WinOdd.GetHashCode();
      if (CurGold != 0L) hash ^= CurGold.GetHashCode();
      if (WinGold != 0) hash ^= WinGold.GetHashCode();
      if (TotalWinGold != 0) hash ^= TotalWinGold.GetHashCode();
      if (IsSmallGame != 0) hash ^= IsSmallGame.GetHashCode();
      if (FreeCount != 0) hash ^= FreeCount.GetHashCode();
      if (PriceGold != 0) hash ^= PriceGold.GetHashCode();
      if (Multiple != 0) hash ^= Multiple.GetHashCode();
      if (PricePoolPercentMax != 0) hash ^= PricePoolPercentMax.GetHashCode();
      if (SmallNum != 0) hash ^= SmallNum.GetHashCode();
      if (TotalFreeTimes != 0) hash ^= TotalFreeTimes.GetHashCode();
      if (PrizePoolWildGold != 0) hash ^= PrizePoolWildGold.GetHashCode();
      if (FreeType != 0) hash ^= FreeType.GetHashCode();
      hash ^= iconLine_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      icon_.WriteTo(output, _repeated_icon_codec);
      hitIcon_.WriteTo(output, _repeated_hitIcon_codec);
      if (WinOdd != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(WinOdd);
      }
      if (CurGold != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CurGold);
      }
      if (WinGold != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WinGold);
      }
      if (TotalWinGold != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TotalWinGold);
      }
      if (IsSmallGame != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(IsSmallGame);
      }
      if (FreeCount != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FreeCount);
      }
      if (PriceGold != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(PriceGold);
      }
      if (Multiple != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Multiple);
      }
      if (PricePoolPercentMax != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(PricePoolPercentMax);
      }
      if (SmallNum != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(SmallNum);
      }
      if (TotalFreeTimes != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(TotalFreeTimes);
      }
      if (PrizePoolWildGold != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(PrizePoolWildGold);
      }
      if (FreeType != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(FreeType);
      }
      iconLine_.WriteTo(output, _repeated_iconLine_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      icon_.WriteTo(ref output, _repeated_icon_codec);
      hitIcon_.WriteTo(ref output, _repeated_hitIcon_codec);
      if (WinOdd != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(WinOdd);
      }
      if (CurGold != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CurGold);
      }
      if (WinGold != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WinGold);
      }
      if (TotalWinGold != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TotalWinGold);
      }
      if (IsSmallGame != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(IsSmallGame);
      }
      if (FreeCount != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FreeCount);
      }
      if (PriceGold != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(PriceGold);
      }
      if (Multiple != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Multiple);
      }
      if (PricePoolPercentMax != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(PricePoolPercentMax);
      }
      if (SmallNum != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(SmallNum);
      }
      if (TotalFreeTimes != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(TotalFreeTimes);
      }
      if (PrizePoolWildGold != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(PrizePoolWildGold);
      }
      if (FreeType != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(FreeType);
      }
      iconLine_.WriteTo(ref output, _repeated_iconLine_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += icon_.CalculateSize(_repeated_icon_codec);
      size += hitIcon_.CalculateSize(_repeated_hitIcon_codec);
      if (WinOdd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinOdd);
      }
      if (CurGold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurGold);
      }
      if (WinGold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinGold);
      }
      if (TotalWinGold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalWinGold);
      }
      if (IsSmallGame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsSmallGame);
      }
      if (FreeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeCount);
      }
      if (PriceGold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PriceGold);
      }
      if (Multiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
      }
      if (PricePoolPercentMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PricePoolPercentMax);
      }
      if (SmallNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SmallNum);
      }
      if (TotalFreeTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalFreeTimes);
      }
      if (PrizePoolWildGold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PrizePoolWildGold);
      }
      if (FreeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeType);
      }
      size += iconLine_.CalculateSize(_repeated_iconLine_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_3D_SC_Result other) {
      if (other == null) {
        return;
      }
      icon_.Add(other.icon_);
      hitIcon_.Add(other.hitIcon_);
      if (other.WinOdd != 0) {
        WinOdd = other.WinOdd;
      }
      if (other.CurGold != 0L) {
        CurGold = other.CurGold;
      }
      if (other.WinGold != 0) {
        WinGold = other.WinGold;
      }
      if (other.TotalWinGold != 0) {
        TotalWinGold = other.TotalWinGold;
      }
      if (other.IsSmallGame != 0) {
        IsSmallGame = other.IsSmallGame;
      }
      if (other.FreeCount != 0) {
        FreeCount = other.FreeCount;
      }
      if (other.PriceGold != 0) {
        PriceGold = other.PriceGold;
      }
      if (other.Multiple != 0) {
        Multiple = other.Multiple;
      }
      if (other.PricePoolPercentMax != 0) {
        PricePoolPercentMax = other.PricePoolPercentMax;
      }
      if (other.SmallNum != 0) {
        SmallNum = other.SmallNum;
      }
      if (other.TotalFreeTimes != 0) {
        TotalFreeTimes = other.TotalFreeTimes;
      }
      if (other.PrizePoolWildGold != 0) {
        PrizePoolWildGold = other.PrizePoolWildGold;
      }
      if (other.FreeType != 0) {
        FreeType = other.FreeType;
      }
      iconLine_.Add(other.iconLine_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            icon_.AddEntriesFrom(input, _repeated_icon_codec);
            break;
          }
          case 18: {
            hitIcon_.AddEntriesFrom(input, _repeated_hitIcon_codec);
            break;
          }
          case 24: {
            WinOdd = input.ReadInt32();
            break;
          }
          case 32: {
            CurGold = input.ReadInt64();
            break;
          }
          case 40: {
            WinGold = input.ReadInt32();
            break;
          }
          case 48: {
            TotalWinGold = input.ReadInt32();
            break;
          }
          case 56: {
            IsSmallGame = input.ReadInt32();
            break;
          }
          case 64: {
            FreeCount = input.ReadInt32();
            break;
          }
          case 72: {
            PriceGold = input.ReadInt32();
            break;
          }
          case 80: {
            Multiple = input.ReadInt32();
            break;
          }
          case 88: {
            PricePoolPercentMax = input.ReadInt32();
            break;
          }
          case 96: {
            SmallNum = input.ReadInt32();
            break;
          }
          case 104: {
            TotalFreeTimes = input.ReadInt32();
            break;
          }
          case 112: {
            PrizePoolWildGold = input.ReadInt32();
            break;
          }
          case 120: {
            FreeType = input.ReadInt32();
            break;
          }
          case 130:
          case 128: {
            iconLine_.AddEntriesFrom(input, _repeated_iconLine_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            icon_.AddEntriesFrom(ref input, _repeated_icon_codec);
            break;
          }
          case 18: {
            hitIcon_.AddEntriesFrom(ref input, _repeated_hitIcon_codec);
            break;
          }
          case 24: {
            WinOdd = input.ReadInt32();
            break;
          }
          case 32: {
            CurGold = input.ReadInt64();
            break;
          }
          case 40: {
            WinGold = input.ReadInt32();
            break;
          }
          case 48: {
            TotalWinGold = input.ReadInt32();
            break;
          }
          case 56: {
            IsSmallGame = input.ReadInt32();
            break;
          }
          case 64: {
            FreeCount = input.ReadInt32();
            break;
          }
          case 72: {
            PriceGold = input.ReadInt32();
            break;
          }
          case 80: {
            Multiple = input.ReadInt32();
            break;
          }
          case 88: {
            PricePoolPercentMax = input.ReadInt32();
            break;
          }
          case 96: {
            SmallNum = input.ReadInt32();
            break;
          }
          case 104: {
            TotalFreeTimes = input.ReadInt32();
            break;
          }
          case 112: {
            PrizePoolWildGold = input.ReadInt32();
            break;
          }
          case 120: {
            FreeType = input.ReadInt32();
            break;
          }
          case 130:
          case 128: {
            iconLine_.AddEntriesFrom(ref input, _repeated_iconLine_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMD_3D_CS_StartGame : pb::IMessage<CMD_3D_CS_StartGame>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_3D_CS_StartGame> _parser = new pb::MessageParser<CMD_3D_CS_StartGame>(() => new CMD_3D_CS_StartGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_3D_CS_StartGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YGBH.YGBHReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_CS_StartGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_CS_StartGame(CMD_3D_CS_StartGame other) : this() {
      line_ = other.line_;
      bet_ = other.bet_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_CS_StartGame Clone() {
      return new CMD_3D_CS_StartGame(this);
    }

    /// <summary>Field number for the "line" field.</summary>
    public const int LineFieldNumber = 1;
    private int line_;
    /// <summary>
    ///线数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Line {
      get { return line_; }
      set {
        line_ = value;
      }
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 2;
    private int bet_;
    /// <summary>
    ///押注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_3D_CS_StartGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_3D_CS_StartGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Line != other.Line) return false;
      if (Bet != other.Bet) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Line != 0) hash ^= Line.GetHashCode();
      if (Bet != 0) hash ^= Bet.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Line != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Line);
      }
      if (Bet != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Bet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Line != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Line);
      }
      if (Bet != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Bet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Line != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Line);
      }
      if (Bet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bet);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_3D_CS_StartGame other) {
      if (other == null) {
        return;
      }
      if (other.Line != 0) {
        Line = other.Line;
      }
      if (other.Bet != 0) {
        Bet = other.Bet;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Line = input.ReadInt32();
            break;
          }
          case 16: {
            Bet = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Line = input.ReadInt32();
            break;
          }
          case 16: {
            Bet = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMD_SC_SmallGame : pb::IMessage<CMD_SC_SmallGame>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_SC_SmallGame> _parser = new pb::MessageParser<CMD_SC_SmallGame>(() => new CMD_SC_SmallGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_SC_SmallGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YGBH.YGBHReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_SC_SmallGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_SC_SmallGame(CMD_SC_SmallGame other) : this() {
      gold_ = other.gold_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_SC_SmallGame Clone() {
      return new CMD_SC_SmallGame(this);
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_gold_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> gold_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 0: 至尊宝3 1:至尊宝4 2:至尊宝5 3:孙悟空3 4:孙悟空4 5:孙悟空5
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Gold {
      get { return gold_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_SC_SmallGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_SC_SmallGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!gold_.Equals(other.gold_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= gold_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      gold_.WriteTo(output, _repeated_gold_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      gold_.WriteTo(ref output, _repeated_gold_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += gold_.CalculateSize(_repeated_gold_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_SC_SmallGame other) {
      if (other == null) {
        return;
      }
      gold_.Add(other.gold_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            gold_.AddEntriesFrom(input, _repeated_gold_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            gold_.AddEntriesFrom(ref input, _repeated_gold_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMD_SC_SmallGameEnd : pb::IMessage<CMD_SC_SmallGameEnd>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_SC_SmallGameEnd> _parser = new pb::MessageParser<CMD_SC_SmallGameEnd>(() => new CMD_SC_SmallGameEnd());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_SC_SmallGameEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YGBH.YGBHReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_SC_SmallGameEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_SC_SmallGameEnd(CMD_SC_SmallGameEnd other) : this() {
      index_ = other.index_;
      gold_ = other.gold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_SC_SmallGameEnd Clone() {
      return new CMD_SC_SmallGameEnd(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    /// <summary>
    ///下标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 2;
    private int gold_;
    /// <summary>
    ///金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_SC_SmallGameEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_SC_SmallGameEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Gold != other.Gold) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Gold != 0) hash ^= Gold.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Gold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Gold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Gold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Gold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_SC_SmallGameEnd other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            Gold = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            Gold = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
