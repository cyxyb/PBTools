// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/SubGame/XML.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace XML {

  /// <summary>Holder for reflection information generated from Proto/SubGame/XML.proto</summary>
  public static partial class XMLReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/SubGame/XML.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XMLReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdQcm90by9TdWJHYW1lL1hNTC5wcm90bxIDWE1MIuUBCgtTQ19DaGVja091",
            "dBIOCgZyZXN1bHQYASADKAUSHwoXcmV3YXJkX2xpbmVfZnJ1aXRfY291bnQY",
            "AiADKAUSEgoKd2luX3BlaV9sdhgDIAEoBRIQCghjdXJfZ29sZBgEIAEoAxIQ",
            "Cgh3aW5fZ29sZBgFIAEoBRIWCg50b3RhbF93aW5fZ29sZBgGIAEoBRISCgpm",
            "cmVlX3RpbWVzGAcgASgFEhAKCG11bHRpcGxlGAggASgFEhUKDWphY2twb3Rf",
            "dmFsdWUYCSABKAUSGAoQc21hbGxfZ2FtZV90aW1lcxgKIAEoBSIvCghDU19T",
            "dGFydBIQCghsaW5lX251bRgBIAEoBRIRCglsaW5lX2dvbGQYAiABKAUiSgoL",
            "U0NfU3luY0dvbGQSDAoEZ29sZBgBIAEoAxIVCg1sYXN0X3dpbl9nb2xkGAIg",
            "ASgFEhYKDnRvdGFsX3dpbl9nb2xkGAMgASgFIpoBCgxTQ19TY2VuZUluZm8S",
            "GgoSbGVmdF9mcmVlX2dhbWVfY250GAEgASgFEhAKCG11bHRpcGxlGAIgASgF",
            "EhIKCmJldG9uX2dvbGQYBCADKAUSGwoTZnJlZV9nYW1lX2NvdF90b3RhbBgF",
            "IAEoBRIWCg5mcmVlX2dhbWVfZ29sZBgGIAEoBRITCgtzbWFsbF9jb3VudBgH",
            "IAEoBSLfAQoSU0Nfc3RTbWFsbEdhbWVJbmZvEh4KFnNtYWxsX2dhbWVfdGF0",
            "b2xfY29udXQYASABKAUSGAoQc21hbGxfZ2FtZV9jb251dBgCIAEoBRIXCg9n",
            "YW1lX3RhdG9sX2dvbGQYAyABKAUSEQoJaWNvbl90eXBlGAQgASgFEhcKD2lj",
            "b25fdHlwZV9jb251dBgFIAEoBRISCgppY29uX3R5cGU0GAYgAygFEhEKCWdh",
            "bWVfZ29sZBgHIAEoBRIQCghnYW1lX2VuZBgIIAEoCBIRCglsaW5lX2dvbGQY",
            "CSABKAUqyQEKCUVNc2dJRFhNTBIVChFMQUJBX01TR19DU19TVEFSVBAAEhoK",
            "FkxBQkFfTVNHX0NTX1NNQUxMX0dBTUUQARIVChFMQUJBX01TR19TQ19TVEFS",
            "VBACEhgKFExBQkFfTVNHX1NDX0NIRUNLT1VUEAMSGQoVTEFCQV9NU0dfU0Nf",
            "U1lOQ19HT0xEEAQSGgoWTEFCQV9NU0dfU0NfU01BTExfR0FNRRAFEiEKHUxB",
            "QkFfTVNHX1NDX1VQREFURV9QUklaRV9QT09MEAZiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::XML.EMsgIDXML), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::XML.SC_CheckOut), global::XML.SC_CheckOut.Parser, new[]{ "Result", "RewardLineFruitCount", "WinPeiLv", "CurGold", "WinGold", "TotalWinGold", "FreeTimes", "Multiple", "JackpotValue", "SmallGameTimes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XML.CS_Start), global::XML.CS_Start.Parser, new[]{ "LineNum", "LineGold" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XML.SC_SyncGold), global::XML.SC_SyncGold.Parser, new[]{ "Gold", "LastWinGold", "TotalWinGold" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XML.SC_SceneInfo), global::XML.SC_SceneInfo.Parser, new[]{ "LeftFreeGameCnt", "Multiple", "BetonGold", "FreeGameCotTotal", "FreeGameGold", "SmallCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XML.SC_stSmallGameInfo), global::XML.SC_stSmallGameInfo.Parser, new[]{ "SmallGameTatolConut", "SmallGameConut", "GameTatolGold", "IconType", "IconTypeConut", "IconType4", "GameGold", "GameEnd", "LineGold" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EMsgIDXML {
    /// <summary>
    ///游戏开始(CS_Start)
    /// </summary>
    [pbr::OriginalName("LABA_MSG_CS_START")] LabaMsgCsStart = 0,
    /// <summary>
    ///小游戏(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("LABA_MSG_CS_SMALL_GAME")] LabaMsgCsSmallGame = 1,
    /// <summary>
    ///游戏开始(MsgCommonN32)//1为未压线,2为未压钱,3为钱不够,4-CD,5-单线押注不对
    /// </summary>
    [pbr::OriginalName("LABA_MSG_SC_START")] LabaMsgScStart = 2,
    /// <summary>
    ///游戏结果(SC_CheckOut)
    /// </summary>
    [pbr::OriginalName("LABA_MSG_SC_CHECKOUT")] LabaMsgScCheckout = 3,
    /// <summary>
    ///玩家金币，上把赢得金币，总赢金币(SC_SyncGold)
    /// </summary>
    [pbr::OriginalName("LABA_MSG_SC_SYNC_GOLD")] LabaMsgScSyncGold = 4,
    /// <summary>
    ///小游戏(SC_stSmallGameInfo)
    /// </summary>
    [pbr::OriginalName("LABA_MSG_SC_SMALL_GAME")] LabaMsgScSmallGame = 5,
    /// <summary>
    ///更新奖池(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("LABA_MSG_SC_UPDATE_PRIZE_POOL")] LabaMsgScUpdatePrizePool = 6,
  }

  #endregion

  #region Messages
  public sealed partial class SC_CheckOut : pb::IMessage<SC_CheckOut>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SC_CheckOut> _parser = new pb::MessageParser<SC_CheckOut>(() => new SC_CheckOut());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_CheckOut> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XML.XMLReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_CheckOut() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_CheckOut(SC_CheckOut other) : this() {
      result_ = other.result_.Clone();
      rewardLineFruitCount_ = other.rewardLineFruitCount_.Clone();
      winPeiLv_ = other.winPeiLv_;
      curGold_ = other.curGold_;
      winGold_ = other.winGold_;
      totalWinGold_ = other.totalWinGold_;
      freeTimes_ = other.freeTimes_;
      multiple_ = other.multiple_;
      jackpotValue_ = other.jackpotValue_;
      smallGameTimes_ = other.smallGameTimes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_CheckOut Clone() {
      return new SC_CheckOut(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_result_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> result_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///游戏结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Result {
      get { return result_; }
    }

    /// <summary>Field number for the "reward_line_fruit_count" field.</summary>
    public const int RewardLineFruitCountFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_rewardLineFruitCount_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> rewardLineFruitCount_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///水果线数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RewardLineFruitCount {
      get { return rewardLineFruitCount_; }
    }

    /// <summary>Field number for the "win_pei_lv" field.</summary>
    public const int WinPeiLvFieldNumber = 3;
    private int winPeiLv_;
    /// <summary>
    ///赢得赔率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinPeiLv {
      get { return winPeiLv_; }
      set {
        winPeiLv_ = value;
      }
    }

    /// <summary>Field number for the "cur_gold" field.</summary>
    public const int CurGoldFieldNumber = 4;
    private long curGold_;
    /// <summary>
    ///当前金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurGold {
      get { return curGold_; }
      set {
        curGold_ = value;
      }
    }

    /// <summary>Field number for the "win_gold" field.</summary>
    public const int WinGoldFieldNumber = 5;
    private int winGold_;
    /// <summary>
    ///本次赢得金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinGold {
      get { return winGold_; }
      set {
        winGold_ = value;
      }
    }

    /// <summary>Field number for the "total_win_gold" field.</summary>
    public const int TotalWinGoldFieldNumber = 6;
    private int totalWinGold_;
    /// <summary>
    ///总赢的金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalWinGold {
      get { return totalWinGold_; }
      set {
        totalWinGold_ = value;
      }
    }

    /// <summary>Field number for the "free_times" field.</summary>
    public const int FreeTimesFieldNumber = 7;
    private int freeTimes_;
    /// <summary>
    ///免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeTimes {
      get { return freeTimes_; }
      set {
        freeTimes_ = value;
      }
    }

    /// <summary>Field number for the "multiple" field.</summary>
    public const int MultipleFieldNumber = 8;
    private int multiple_;
    /// <summary>
    ///单线倍率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Multiple {
      get { return multiple_; }
      set {
        multiple_ = value;
      }
    }

    /// <summary>Field number for the "jackpot_value" field.</summary>
    public const int JackpotValueFieldNumber = 9;
    private int jackpotValue_;
    /// <summary>
    ///奖金池奖
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JackpotValue {
      get { return jackpotValue_; }
      set {
        jackpotValue_ = value;
      }
    }

    /// <summary>Field number for the "small_game_times" field.</summary>
    public const int SmallGameTimesFieldNumber = 10;
    private int smallGameTimes_;
    /// <summary>
    ///小游戏次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SmallGameTimes {
      get { return smallGameTimes_; }
      set {
        smallGameTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_CheckOut);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_CheckOut other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!result_.Equals(other.result_)) return false;
      if(!rewardLineFruitCount_.Equals(other.rewardLineFruitCount_)) return false;
      if (WinPeiLv != other.WinPeiLv) return false;
      if (CurGold != other.CurGold) return false;
      if (WinGold != other.WinGold) return false;
      if (TotalWinGold != other.TotalWinGold) return false;
      if (FreeTimes != other.FreeTimes) return false;
      if (Multiple != other.Multiple) return false;
      if (JackpotValue != other.JackpotValue) return false;
      if (SmallGameTimes != other.SmallGameTimes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= result_.GetHashCode();
      hash ^= rewardLineFruitCount_.GetHashCode();
      if (WinPeiLv != 0) hash ^= WinPeiLv.GetHashCode();
      if (CurGold != 0L) hash ^= CurGold.GetHashCode();
      if (WinGold != 0) hash ^= WinGold.GetHashCode();
      if (TotalWinGold != 0) hash ^= TotalWinGold.GetHashCode();
      if (FreeTimes != 0) hash ^= FreeTimes.GetHashCode();
      if (Multiple != 0) hash ^= Multiple.GetHashCode();
      if (JackpotValue != 0) hash ^= JackpotValue.GetHashCode();
      if (SmallGameTimes != 0) hash ^= SmallGameTimes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      result_.WriteTo(output, _repeated_result_codec);
      rewardLineFruitCount_.WriteTo(output, _repeated_rewardLineFruitCount_codec);
      if (WinPeiLv != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(WinPeiLv);
      }
      if (CurGold != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CurGold);
      }
      if (WinGold != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WinGold);
      }
      if (TotalWinGold != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TotalWinGold);
      }
      if (FreeTimes != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FreeTimes);
      }
      if (Multiple != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Multiple);
      }
      if (JackpotValue != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(JackpotValue);
      }
      if (SmallGameTimes != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(SmallGameTimes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      result_.WriteTo(ref output, _repeated_result_codec);
      rewardLineFruitCount_.WriteTo(ref output, _repeated_rewardLineFruitCount_codec);
      if (WinPeiLv != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(WinPeiLv);
      }
      if (CurGold != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CurGold);
      }
      if (WinGold != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WinGold);
      }
      if (TotalWinGold != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TotalWinGold);
      }
      if (FreeTimes != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FreeTimes);
      }
      if (Multiple != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Multiple);
      }
      if (JackpotValue != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(JackpotValue);
      }
      if (SmallGameTimes != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(SmallGameTimes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += result_.CalculateSize(_repeated_result_codec);
      size += rewardLineFruitCount_.CalculateSize(_repeated_rewardLineFruitCount_codec);
      if (WinPeiLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinPeiLv);
      }
      if (CurGold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurGold);
      }
      if (WinGold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinGold);
      }
      if (TotalWinGold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalWinGold);
      }
      if (FreeTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeTimes);
      }
      if (Multiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
      }
      if (JackpotValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JackpotValue);
      }
      if (SmallGameTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SmallGameTimes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_CheckOut other) {
      if (other == null) {
        return;
      }
      result_.Add(other.result_);
      rewardLineFruitCount_.Add(other.rewardLineFruitCount_);
      if (other.WinPeiLv != 0) {
        WinPeiLv = other.WinPeiLv;
      }
      if (other.CurGold != 0L) {
        CurGold = other.CurGold;
      }
      if (other.WinGold != 0) {
        WinGold = other.WinGold;
      }
      if (other.TotalWinGold != 0) {
        TotalWinGold = other.TotalWinGold;
      }
      if (other.FreeTimes != 0) {
        FreeTimes = other.FreeTimes;
      }
      if (other.Multiple != 0) {
        Multiple = other.Multiple;
      }
      if (other.JackpotValue != 0) {
        JackpotValue = other.JackpotValue;
      }
      if (other.SmallGameTimes != 0) {
        SmallGameTimes = other.SmallGameTimes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            result_.AddEntriesFrom(input, _repeated_result_codec);
            break;
          }
          case 18:
          case 16: {
            rewardLineFruitCount_.AddEntriesFrom(input, _repeated_rewardLineFruitCount_codec);
            break;
          }
          case 24: {
            WinPeiLv = input.ReadInt32();
            break;
          }
          case 32: {
            CurGold = input.ReadInt64();
            break;
          }
          case 40: {
            WinGold = input.ReadInt32();
            break;
          }
          case 48: {
            TotalWinGold = input.ReadInt32();
            break;
          }
          case 56: {
            FreeTimes = input.ReadInt32();
            break;
          }
          case 64: {
            Multiple = input.ReadInt32();
            break;
          }
          case 72: {
            JackpotValue = input.ReadInt32();
            break;
          }
          case 80: {
            SmallGameTimes = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            result_.AddEntriesFrom(ref input, _repeated_result_codec);
            break;
          }
          case 18:
          case 16: {
            rewardLineFruitCount_.AddEntriesFrom(ref input, _repeated_rewardLineFruitCount_codec);
            break;
          }
          case 24: {
            WinPeiLv = input.ReadInt32();
            break;
          }
          case 32: {
            CurGold = input.ReadInt64();
            break;
          }
          case 40: {
            WinGold = input.ReadInt32();
            break;
          }
          case 48: {
            TotalWinGold = input.ReadInt32();
            break;
          }
          case 56: {
            FreeTimes = input.ReadInt32();
            break;
          }
          case 64: {
            Multiple = input.ReadInt32();
            break;
          }
          case 72: {
            JackpotValue = input.ReadInt32();
            break;
          }
          case 80: {
            SmallGameTimes = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///开始
  /// </summary>
  public sealed partial class CS_Start : pb::IMessage<CS_Start>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CS_Start> _parser = new pb::MessageParser<CS_Start>(() => new CS_Start());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_Start> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XML.XMLReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Start() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Start(CS_Start other) : this() {
      lineNum_ = other.lineNum_;
      lineGold_ = other.lineGold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Start Clone() {
      return new CS_Start(this);
    }

    /// <summary>Field number for the "line_num" field.</summary>
    public const int LineNumFieldNumber = 1;
    private int lineNum_;
    /// <summary>
    ///未使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LineNum {
      get { return lineNum_; }
      set {
        lineNum_ = value;
      }
    }

    /// <summary>Field number for the "line_gold" field.</summary>
    public const int LineGoldFieldNumber = 2;
    private int lineGold_;
    /// <summary>
    ///下注金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LineGold {
      get { return lineGold_; }
      set {
        lineGold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_Start);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_Start other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LineNum != other.LineNum) return false;
      if (LineGold != other.LineGold) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LineNum != 0) hash ^= LineNum.GetHashCode();
      if (LineGold != 0) hash ^= LineGold.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LineNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LineNum);
      }
      if (LineGold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LineGold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LineNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LineNum);
      }
      if (LineGold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LineGold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LineNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineNum);
      }
      if (LineGold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineGold);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_Start other) {
      if (other == null) {
        return;
      }
      if (other.LineNum != 0) {
        LineNum = other.LineNum;
      }
      if (other.LineGold != 0) {
        LineGold = other.LineGold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LineNum = input.ReadInt32();
            break;
          }
          case 16: {
            LineGold = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LineNum = input.ReadInt32();
            break;
          }
          case 16: {
            LineGold = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///同步金币
  /// </summary>
  public sealed partial class SC_SyncGold : pb::IMessage<SC_SyncGold>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SC_SyncGold> _parser = new pb::MessageParser<SC_SyncGold>(() => new SC_SyncGold());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_SyncGold> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XML.XMLReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SyncGold() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SyncGold(SC_SyncGold other) : this() {
      gold_ = other.gold_;
      lastWinGold_ = other.lastWinGold_;
      totalWinGold_ = other.totalWinGold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SyncGold Clone() {
      return new SC_SyncGold(this);
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 1;
    private long gold_;
    /// <summary>
    ///玩家当前金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "last_win_gold" field.</summary>
    public const int LastWinGoldFieldNumber = 2;
    private int lastWinGold_;
    /// <summary>
    ///未使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastWinGold {
      get { return lastWinGold_; }
      set {
        lastWinGold_ = value;
      }
    }

    /// <summary>Field number for the "total_win_gold" field.</summary>
    public const int TotalWinGoldFieldNumber = 3;
    private int totalWinGold_;
    /// <summary>
    ///总输赢
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalWinGold {
      get { return totalWinGold_; }
      set {
        totalWinGold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_SyncGold);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_SyncGold other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Gold != other.Gold) return false;
      if (LastWinGold != other.LastWinGold) return false;
      if (TotalWinGold != other.TotalWinGold) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Gold != 0L) hash ^= Gold.GetHashCode();
      if (LastWinGold != 0) hash ^= LastWinGold.GetHashCode();
      if (TotalWinGold != 0) hash ^= TotalWinGold.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Gold != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Gold);
      }
      if (LastWinGold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LastWinGold);
      }
      if (TotalWinGold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalWinGold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Gold != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Gold);
      }
      if (LastWinGold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LastWinGold);
      }
      if (TotalWinGold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalWinGold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Gold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
      }
      if (LastWinGold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastWinGold);
      }
      if (TotalWinGold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalWinGold);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_SyncGold other) {
      if (other == null) {
        return;
      }
      if (other.Gold != 0L) {
        Gold = other.Gold;
      }
      if (other.LastWinGold != 0) {
        LastWinGold = other.LastWinGold;
      }
      if (other.TotalWinGold != 0) {
        TotalWinGold = other.TotalWinGold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Gold = input.ReadInt64();
            break;
          }
          case 16: {
            LastWinGold = input.ReadInt32();
            break;
          }
          case 24: {
            TotalWinGold = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Gold = input.ReadInt64();
            break;
          }
          case 16: {
            LastWinGold = input.ReadInt32();
            break;
          }
          case 24: {
            TotalWinGold = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SC_SceneInfo : pb::IMessage<SC_SceneInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SC_SceneInfo> _parser = new pb::MessageParser<SC_SceneInfo>(() => new SC_SceneInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_SceneInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XML.XMLReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo(SC_SceneInfo other) : this() {
      leftFreeGameCnt_ = other.leftFreeGameCnt_;
      multiple_ = other.multiple_;
      betonGold_ = other.betonGold_.Clone();
      freeGameCotTotal_ = other.freeGameCotTotal_;
      freeGameGold_ = other.freeGameGold_;
      smallCount_ = other.smallCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo Clone() {
      return new SC_SceneInfo(this);
    }

    /// <summary>Field number for the "left_free_game_cnt" field.</summary>
    public const int LeftFreeGameCntFieldNumber = 1;
    private int leftFreeGameCnt_;
    /// <summary>
    ///剩余免费游戏次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftFreeGameCnt {
      get { return leftFreeGameCnt_; }
      set {
        leftFreeGameCnt_ = value;
      }
    }

    /// <summary>Field number for the "multiple" field.</summary>
    public const int MultipleFieldNumber = 2;
    private int multiple_;
    /// <summary>
    ///单线倍率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Multiple {
      get { return multiple_; }
      set {
        multiple_ = value;
      }
    }

    /// <summary>Field number for the "beton_gold" field.</summary>
    public const int BetonGoldFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_betonGold_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> betonGold_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///下注配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BetonGold {
      get { return betonGold_; }
    }

    /// <summary>Field number for the "free_game_cot_total" field.</summary>
    public const int FreeGameCotTotalFieldNumber = 5;
    private int freeGameCotTotal_;
    /// <summary>
    ///免费游戏总次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeGameCotTotal {
      get { return freeGameCotTotal_; }
      set {
        freeGameCotTotal_ = value;
      }
    }

    /// <summary>Field number for the "free_game_gold" field.</summary>
    public const int FreeGameGoldFieldNumber = 6;
    private int freeGameGold_;
    /// <summary>
    ///免费游戏获得金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeGameGold {
      get { return freeGameGold_; }
      set {
        freeGameGold_ = value;
      }
    }

    /// <summary>Field number for the "small_count" field.</summary>
    public const int SmallCountFieldNumber = 7;
    private int smallCount_;
    /// <summary>
    ///当前小游戏次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SmallCount {
      get { return smallCount_; }
      set {
        smallCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_SceneInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_SceneInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LeftFreeGameCnt != other.LeftFreeGameCnt) return false;
      if (Multiple != other.Multiple) return false;
      if(!betonGold_.Equals(other.betonGold_)) return false;
      if (FreeGameCotTotal != other.FreeGameCotTotal) return false;
      if (FreeGameGold != other.FreeGameGold) return false;
      if (SmallCount != other.SmallCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LeftFreeGameCnt != 0) hash ^= LeftFreeGameCnt.GetHashCode();
      if (Multiple != 0) hash ^= Multiple.GetHashCode();
      hash ^= betonGold_.GetHashCode();
      if (FreeGameCotTotal != 0) hash ^= FreeGameCotTotal.GetHashCode();
      if (FreeGameGold != 0) hash ^= FreeGameGold.GetHashCode();
      if (SmallCount != 0) hash ^= SmallCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LeftFreeGameCnt != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LeftFreeGameCnt);
      }
      if (Multiple != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Multiple);
      }
      betonGold_.WriteTo(output, _repeated_betonGold_codec);
      if (FreeGameCotTotal != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FreeGameCotTotal);
      }
      if (FreeGameGold != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FreeGameGold);
      }
      if (SmallCount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SmallCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LeftFreeGameCnt != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LeftFreeGameCnt);
      }
      if (Multiple != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Multiple);
      }
      betonGold_.WriteTo(ref output, _repeated_betonGold_codec);
      if (FreeGameCotTotal != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FreeGameCotTotal);
      }
      if (FreeGameGold != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FreeGameGold);
      }
      if (SmallCount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SmallCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LeftFreeGameCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftFreeGameCnt);
      }
      if (Multiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
      }
      size += betonGold_.CalculateSize(_repeated_betonGold_codec);
      if (FreeGameCotTotal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeGameCotTotal);
      }
      if (FreeGameGold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeGameGold);
      }
      if (SmallCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SmallCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_SceneInfo other) {
      if (other == null) {
        return;
      }
      if (other.LeftFreeGameCnt != 0) {
        LeftFreeGameCnt = other.LeftFreeGameCnt;
      }
      if (other.Multiple != 0) {
        Multiple = other.Multiple;
      }
      betonGold_.Add(other.betonGold_);
      if (other.FreeGameCotTotal != 0) {
        FreeGameCotTotal = other.FreeGameCotTotal;
      }
      if (other.FreeGameGold != 0) {
        FreeGameGold = other.FreeGameGold;
      }
      if (other.SmallCount != 0) {
        SmallCount = other.SmallCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LeftFreeGameCnt = input.ReadInt32();
            break;
          }
          case 16: {
            Multiple = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            betonGold_.AddEntriesFrom(input, _repeated_betonGold_codec);
            break;
          }
          case 40: {
            FreeGameCotTotal = input.ReadInt32();
            break;
          }
          case 48: {
            FreeGameGold = input.ReadInt32();
            break;
          }
          case 56: {
            SmallCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LeftFreeGameCnt = input.ReadInt32();
            break;
          }
          case 16: {
            Multiple = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            betonGold_.AddEntriesFrom(ref input, _repeated_betonGold_codec);
            break;
          }
          case 40: {
            FreeGameCotTotal = input.ReadInt32();
            break;
          }
          case 48: {
            FreeGameGold = input.ReadInt32();
            break;
          }
          case 56: {
            SmallCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SC_stSmallGameInfo : pb::IMessage<SC_stSmallGameInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SC_stSmallGameInfo> _parser = new pb::MessageParser<SC_stSmallGameInfo>(() => new SC_stSmallGameInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_stSmallGameInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XML.XMLReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_stSmallGameInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_stSmallGameInfo(SC_stSmallGameInfo other) : this() {
      smallGameTatolConut_ = other.smallGameTatolConut_;
      smallGameConut_ = other.smallGameConut_;
      gameTatolGold_ = other.gameTatolGold_;
      iconType_ = other.iconType_;
      iconTypeConut_ = other.iconTypeConut_;
      iconType4_ = other.iconType4_.Clone();
      gameGold_ = other.gameGold_;
      gameEnd_ = other.gameEnd_;
      lineGold_ = other.lineGold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_stSmallGameInfo Clone() {
      return new SC_stSmallGameInfo(this);
    }

    /// <summary>Field number for the "small_game_tatol_conut" field.</summary>
    public const int SmallGameTatolConutFieldNumber = 1;
    private int smallGameTatolConut_;
    /// <summary>
    ///小游戏次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SmallGameTatolConut {
      get { return smallGameTatolConut_; }
      set {
        smallGameTatolConut_ = value;
      }
    }

    /// <summary>Field number for the "small_game_conut" field.</summary>
    public const int SmallGameConutFieldNumber = 2;
    private int smallGameConut_;
    /// <summary>
    ///小游戏剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SmallGameConut {
      get { return smallGameConut_; }
      set {
        smallGameConut_ = value;
      }
    }

    /// <summary>Field number for the "game_tatol_gold" field.</summary>
    public const int GameTatolGoldFieldNumber = 3;
    private int gameTatolGold_;
    /// <summary>
    ///小游戏总获得金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameTatolGold {
      get { return gameTatolGold_; }
      set {
        gameTatolGold_ = value;
      }
    }

    /// <summary>Field number for the "icon_type" field.</summary>
    public const int IconTypeFieldNumber = 4;
    private int iconType_;
    /// <summary>
    ///游戏图标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IconType {
      get { return iconType_; }
      set {
        iconType_ = value;
      }
    }

    /// <summary>Field number for the "icon_type_conut" field.</summary>
    public const int IconTypeConutFieldNumber = 5;
    private int iconTypeConut_;
    /// <summary>
    ///第几个水果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IconTypeConut {
      get { return iconTypeConut_; }
      set {
        iconTypeConut_ = value;
      }
    }

    /// <summary>Field number for the "icon_type4" field.</summary>
    public const int IconType4FieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_iconType4_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> iconType4_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///中间四个图标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IconType4 {
      get { return iconType4_; }
    }

    /// <summary>Field number for the "game_gold" field.</summary>
    public const int GameGoldFieldNumber = 7;
    private int gameGold_;
    /// <summary>
    ///游戏本次获得金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameGold {
      get { return gameGold_; }
      set {
        gameGold_ = value;
      }
    }

    /// <summary>Field number for the "game_end" field.</summary>
    public const int GameEndFieldNumber = 8;
    private bool gameEnd_;
    /// <summary>
    ///游戏是否结束 0结束
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GameEnd {
      get { return gameEnd_; }
      set {
        gameEnd_ = value;
      }
    }

    /// <summary>Field number for the "line_gold" field.</summary>
    public const int LineGoldFieldNumber = 9;
    private int lineGold_;
    /// <summary>
    ///单线金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LineGold {
      get { return lineGold_; }
      set {
        lineGold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_stSmallGameInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_stSmallGameInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SmallGameTatolConut != other.SmallGameTatolConut) return false;
      if (SmallGameConut != other.SmallGameConut) return false;
      if (GameTatolGold != other.GameTatolGold) return false;
      if (IconType != other.IconType) return false;
      if (IconTypeConut != other.IconTypeConut) return false;
      if(!iconType4_.Equals(other.iconType4_)) return false;
      if (GameGold != other.GameGold) return false;
      if (GameEnd != other.GameEnd) return false;
      if (LineGold != other.LineGold) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SmallGameTatolConut != 0) hash ^= SmallGameTatolConut.GetHashCode();
      if (SmallGameConut != 0) hash ^= SmallGameConut.GetHashCode();
      if (GameTatolGold != 0) hash ^= GameTatolGold.GetHashCode();
      if (IconType != 0) hash ^= IconType.GetHashCode();
      if (IconTypeConut != 0) hash ^= IconTypeConut.GetHashCode();
      hash ^= iconType4_.GetHashCode();
      if (GameGold != 0) hash ^= GameGold.GetHashCode();
      if (GameEnd != false) hash ^= GameEnd.GetHashCode();
      if (LineGold != 0) hash ^= LineGold.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SmallGameTatolConut != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SmallGameTatolConut);
      }
      if (SmallGameConut != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SmallGameConut);
      }
      if (GameTatolGold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GameTatolGold);
      }
      if (IconType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(IconType);
      }
      if (IconTypeConut != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(IconTypeConut);
      }
      iconType4_.WriteTo(output, _repeated_iconType4_codec);
      if (GameGold != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GameGold);
      }
      if (GameEnd != false) {
        output.WriteRawTag(64);
        output.WriteBool(GameEnd);
      }
      if (LineGold != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(LineGold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SmallGameTatolConut != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SmallGameTatolConut);
      }
      if (SmallGameConut != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SmallGameConut);
      }
      if (GameTatolGold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GameTatolGold);
      }
      if (IconType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(IconType);
      }
      if (IconTypeConut != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(IconTypeConut);
      }
      iconType4_.WriteTo(ref output, _repeated_iconType4_codec);
      if (GameGold != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GameGold);
      }
      if (GameEnd != false) {
        output.WriteRawTag(64);
        output.WriteBool(GameEnd);
      }
      if (LineGold != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(LineGold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SmallGameTatolConut != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SmallGameTatolConut);
      }
      if (SmallGameConut != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SmallGameConut);
      }
      if (GameTatolGold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameTatolGold);
      }
      if (IconType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IconType);
      }
      if (IconTypeConut != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IconTypeConut);
      }
      size += iconType4_.CalculateSize(_repeated_iconType4_codec);
      if (GameGold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameGold);
      }
      if (GameEnd != false) {
        size += 1 + 1;
      }
      if (LineGold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineGold);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_stSmallGameInfo other) {
      if (other == null) {
        return;
      }
      if (other.SmallGameTatolConut != 0) {
        SmallGameTatolConut = other.SmallGameTatolConut;
      }
      if (other.SmallGameConut != 0) {
        SmallGameConut = other.SmallGameConut;
      }
      if (other.GameTatolGold != 0) {
        GameTatolGold = other.GameTatolGold;
      }
      if (other.IconType != 0) {
        IconType = other.IconType;
      }
      if (other.IconTypeConut != 0) {
        IconTypeConut = other.IconTypeConut;
      }
      iconType4_.Add(other.iconType4_);
      if (other.GameGold != 0) {
        GameGold = other.GameGold;
      }
      if (other.GameEnd != false) {
        GameEnd = other.GameEnd;
      }
      if (other.LineGold != 0) {
        LineGold = other.LineGold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SmallGameTatolConut = input.ReadInt32();
            break;
          }
          case 16: {
            SmallGameConut = input.ReadInt32();
            break;
          }
          case 24: {
            GameTatolGold = input.ReadInt32();
            break;
          }
          case 32: {
            IconType = input.ReadInt32();
            break;
          }
          case 40: {
            IconTypeConut = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            iconType4_.AddEntriesFrom(input, _repeated_iconType4_codec);
            break;
          }
          case 56: {
            GameGold = input.ReadInt32();
            break;
          }
          case 64: {
            GameEnd = input.ReadBool();
            break;
          }
          case 72: {
            LineGold = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SmallGameTatolConut = input.ReadInt32();
            break;
          }
          case 16: {
            SmallGameConut = input.ReadInt32();
            break;
          }
          case 24: {
            GameTatolGold = input.ReadInt32();
            break;
          }
          case 32: {
            IconType = input.ReadInt32();
            break;
          }
          case 40: {
            IconTypeConut = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            iconType4_.AddEntriesFrom(ref input, _repeated_iconType4_codec);
            break;
          }
          case 56: {
            GameGold = input.ReadInt32();
            break;
          }
          case 64: {
            GameEnd = input.ReadBool();
            break;
          }
          case 72: {
            LineGold = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
