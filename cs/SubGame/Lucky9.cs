// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/SubGame/Lucky9.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Lucky9 {

  /// <summary>Holder for reflection information generated from Proto/SubGame/Lucky9.proto</summary>
  public static partial class Lucky9Reflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/SubGame/Lucky9.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Lucky9Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpQcm90by9TdWJHYW1lL0x1Y2t5OS5wcm90bxIGTHVja3k5IjEKD0xDTXNn",
            "VGFibGVTdGF0ZRINCgVzdGF0ZRgBIAEoBRIPCgdvdXRfaW1lGAIgASgFIj8K",
            "DkxDTXNnSGFuZENhcmRzEgwKBHR5cGUYASABKAUSEAoIY2FyZF9zdW0YAiAB",
            "KAUSDQoFY2FyZHMYAyADKAUizAEKD0xDTXNnUGxheWVySW5mbxIQCghjaGFp",
            "cl9pZBgBIAEoBRITCgtwbGF5X3N0YXR1cxgCIAEoBRISCgpwbGF5ZXJfYmV0",
            "GAMgASgDEhEKCWNhcmRfdHlwZRgEIAEoBRIQCghnZXRfY2FyZBgFIAEoBRIM",
            "CgRnb2xkGAYgASgDEhAKCHdpbl9nb2xkGAcgASgDEhEKCXdpbl9jb251dBgI",
            "IAEoAxImCgZoYW5kbHMYCSABKAsyFi5MdWNreTkuTENNc2dIYW5kQ2FyZHMi",
            "/AEKDkxDTXNnU2NlbmVJbmZvEhIKCmNlbGxfc2NvcmUYASABKAMSEgoKcm9v",
            "bV9zY29yZRgCIAEoAxITCgt0YWJsZV9zdGF0ZRgDIAEoBRITCgt0YWJsZV9y",
            "b251ZBgEIAEoBRIYChB0b3RhbF9lbnRlcl9nb2xkGAUgASgDEhAKCG9uZV9j",
            "YXJkGAYgASgFEhcKD2Jhbmtlcl9jaGFpcl9pZBgKIAEoBRIQCghvdXRfdGlt",
            "ZRgLIAEoBRISCgp0b3RhbF90aW1lGAwgASgFEi0KDHBsYXllcl9pbmZvcxgP",
            "IAMoCzIXLkx1Y2t5OS5MQ01zZ1BsYXllckluZm8ihQEKEkxDTXNnR2FtZVN0",
            "YXJ0UmVzcBIYChB0b3RhbF9lbnRlcl9nb2xkGAIgASgFEhYKDmN1cl9lbnRl",
            "cl9nb2xkGAMgASgFEhcKD2Jhbmtlcl9jaGFpcl9pZBgEIAEoBRIQCghvbmVf",
            "Y2FyZBgFIAEoBRISCgpwbGF5X2luZGV4GAggAygFIj8KFUxDTXNnTm90aWZ5",
            "QWN0aW9uUmVzcBITCgtjdXJyZW50X2FjdBgDIAEoBRIRCglvcGVyX3RpbWUY",
            "BCABKAUiQAoLTENNc2dBY3Rpb24SCwoDYWN0GAEgASgFEhEKCWJldF9zY29y",
            "ZRgCIAEoAxIRCgliZXRfaW5kZXgYAyABKAMiVgoPTENNc2dBY3Rpb25SZXNw",
            "EgsKA2FjdBgBIAEoBRIQCghjaGFpcl9pZBgCIAEoBRIRCgliZXRfc2NvcmUY",
            "AyABKAMSEQoJYmV0X2luZGV4GAQgASgDIlEKEUxDTXNnU2VuZENhcmRJbmZv",
            "EhAKCGNoYWlyX2lkGAEgASgFEioKCmhhbmRfY2FyZHMYAiABKAsyFi5MdWNr",
            "eTkuTENNc2dIYW5kQ2FyZHMiPQoRTENNc2dTZW5kQ2FyZFJlc3ASKAoFaW5m",
            "b3MYASADKAsyGS5MdWNreTkuTENNc2dTZW5kQ2FyZEluZm8iRwoSTENNc2dF",
            "bmRQbGF5ZXJJbmZvEhAKCGNoYWlyX2lkGAEgASgFEhIKCmdhbWVfc2NvcmUY",
            "AiABKAMSCwoDdGF4GAMgASgDImgKD0xDTXNnR2FtZVJlc3VsdBITCgtiaXNl",
            "Y3RfZ29sZBgBIAEoAxITCgtiaXNlY3RfbGlzdBgCIAMoBRIrCgdwbGF5ZXJz",
            "GAMgAygLMhouTHVja3k5LkxDTXNnRW5kUGxheWVySW5mbyI1ChRMQ01zZ05v",
            "dGlmeVBsYXllckFjdBIQCghjaGFpcl9pZBgBIAEoBRILCgNhY3QYAiABKAUq",
            "nQEKD0VMQ01zZ0dhbWVTdGF0ZRIQCgxHU19MQzlfUkVBRFkQABIQCgxHU19M",
            "QzlfU1RBUlQQARIOCgpHU19MQzlfQkVUEAISFAoQR1NfTEM5X1NFTkRfQ0FS",
            "RBADEhMKD0dTX0xDOV9HRVRfQ0FSRBAEEhgKFEdTX0xDOV9UV09fU0VORF9D",
            "QVJEEAUSEQoNR1NfTEM5X1JFU1VMVBAGKj4KEUVMQ01zZ1BsYXllclN0YXRl",
            "EgwKCFBTX1JFQURZEAASCwoHUFNfUExBWRABEg4KClBTX1RJTUVPVVQQAiop",
            "Cg5FTENNc2dDYXJkVHlwZRINCglMQ19TSU5HTEUQABIICgRMQ185EAEqRwoQ",
            "RUxDTXNnR2FtZUFjdGlvbhINCglJbnZhbGRBY3QQABIKCgZBZGRCZXQQARIL",
            "CgdHZXRDYXJkEAISCwoHTm90Q2FyZBAEKtMDCg9FTENNc2dJRFN1YkdhbWUS",
            "FQoRTXNnSURTdWJHYW1lX051bGwQABIeChpNc2dJRFN1YkdhbWVfR2FtZVN0",
            "YXJ0UmVzcBABEiEKHU1zZ0lEU3ViR2FtZV9Ob3RpZnlBY3Rpb25SZXNwEAIS",
            "FwoTTXNnSURTdWJHYW1lX0FjdGlvbhADEhsKF01zZ0lEU3ViR2FtZV9BY3Rp",
            "b25SZXNwEAQSHQoZTXNnSURTdWJHYW1lX1NlbmRDYXJkUmVzcBAFEh8KG01z",
            "Z0lEU3ViR2FtZV9HYW1lUmVzdWx0UmVzcBAJEiAKHE1zZ0lEU3ViR2FtZV9O",
            "b3RpZnlTdGF0ZVJlc3AQChIcChhNc2dJRFN1YkdhbWVfVGltZU91dFJlc3AQ",
            "CxIdChlNc2dJRFN1YkdhbWVfVGltZU91dFJlYWR5EAwSIQodTXNnSURTdWJH",
            "YW1lX1RpbWVPdXRSZWFkeVJlc3AQDRIgChxNc2dJRFN1YkdhbWVfVGltZU91",
            "dEtpY2tSZXNwEA4SJQohTXNnSURTdWJHYW1lX05vdGlmeUJhbmtlckdvbGRS",
            "ZXNwEBQSJQohTXNnSURTdWJHYW1lX05vdGlmeUJhbmtlckNhcmRSZXNwEBVi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Lucky9.ELCMsgGameState), typeof(global::Lucky9.ELCMsgPlayerState), typeof(global::Lucky9.ELCMsgCardType), typeof(global::Lucky9.ELCMsgGameAction), typeof(global::Lucky9.ELCMsgIDSubGame), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Lucky9.LCMsgTableState), global::Lucky9.LCMsgTableState.Parser, new[]{ "State", "OutIme" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lucky9.LCMsgHandCards), global::Lucky9.LCMsgHandCards.Parser, new[]{ "Type", "CardSum", "Cards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lucky9.LCMsgPlayerInfo), global::Lucky9.LCMsgPlayerInfo.Parser, new[]{ "ChairId", "PlayStatus", "PlayerBet", "CardType", "GetCard", "Gold", "WinGold", "WinConut", "Handls" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lucky9.LCMsgSceneInfo), global::Lucky9.LCMsgSceneInfo.Parser, new[]{ "CellScore", "RoomScore", "TableState", "TableRonud", "TotalEnterGold", "OneCard", "BankerChairId", "OutTime", "TotalTime", "PlayerInfos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lucky9.LCMsgGameStartResp), global::Lucky9.LCMsgGameStartResp.Parser, new[]{ "TotalEnterGold", "CurEnterGold", "BankerChairId", "OneCard", "PlayIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lucky9.LCMsgNotifyActionResp), global::Lucky9.LCMsgNotifyActionResp.Parser, new[]{ "CurrentAct", "OperTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lucky9.LCMsgAction), global::Lucky9.LCMsgAction.Parser, new[]{ "Act", "BetScore", "BetIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lucky9.LCMsgActionResp), global::Lucky9.LCMsgActionResp.Parser, new[]{ "Act", "ChairId", "BetScore", "BetIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lucky9.LCMsgSendCardInfo), global::Lucky9.LCMsgSendCardInfo.Parser, new[]{ "ChairId", "HandCards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lucky9.LCMsgSendCardResp), global::Lucky9.LCMsgSendCardResp.Parser, new[]{ "Infos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lucky9.LCMsgEndPlayerInfo), global::Lucky9.LCMsgEndPlayerInfo.Parser, new[]{ "ChairId", "GameScore", "Tax" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lucky9.LCMsgGameResult), global::Lucky9.LCMsgGameResult.Parser, new[]{ "BisectGold", "BisectList", "Players" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lucky9.LCMsgNotifyPlayerAct), global::Lucky9.LCMsgNotifyPlayerAct.Parser, new[]{ "ChairId", "Act" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///桌子状态
  /// </summary>
  public enum ELCMsgGameState {
    /// <summary>
    ///准备
    /// </summary>
    [pbr::OriginalName("GS_LC9_READY")] GsLc9Ready = 0,
    /// <summary>
    ///开始游戏 
    /// </summary>
    [pbr::OriginalName("GS_LC9_START")] GsLc9Start = 1,
    /// <summary>
    ///下注
    /// </summary>
    [pbr::OriginalName("GS_LC9_BET")] GsLc9Bet = 2,
    /// <summary>
    ///发牌
    /// </summary>
    [pbr::OriginalName("GS_LC9_SEND_CARD")] GsLc9SendCard = 3,
    /// <summary>
    ///要牌
    /// </summary>
    [pbr::OriginalName("GS_LC9_GET_CARD")] GsLc9GetCard = 4,
    /// <summary>
    ///二次发牌
    /// </summary>
    [pbr::OriginalName("GS_LC9_TWO_SEND_CARD")] GsLc9TwoSendCard = 5,
    /// <summary>
    ///结算
    /// </summary>
    [pbr::OriginalName("GS_LC9_RESULT")] GsLc9Result = 6,
  }

  /// <summary>
  ///玩家状态
  /// </summary>
  public enum ELCMsgPlayerState {
    /// <summary>
    ///准备
    /// </summary>
    [pbr::OriginalName("PS_READY")] PsReady = 0,
    /// <summary>
    ///游戏
    /// </summary>
    [pbr::OriginalName("PS_PLAY")] PsPlay = 1,
    /// <summary>
    ///超时
    /// </summary>
    [pbr::OriginalName("PS_TIMEOUT")] PsTimeout = 2,
  }

  /// <summary>
  ///牌型
  /// </summary>
  public enum ELCMsgCardType {
    /// <summary>
    ///普通点数
    /// </summary>
    [pbr::OriginalName("LC_SINGLE")] LcSingle = 0,
    /// <summary>
    ///lucky9类型
    /// </summary>
    [pbr::OriginalName("LC_9")] Lc9 = 1,
  }

  /// <summary>
  ///操作码
  /// </summary>
  public enum ELCMsgGameAction {
    /// <summary>
    ///无效
    /// </summary>
    [pbr::OriginalName("InvaldAct")] InvaldAct = 0,
    /// <summary>
    ///下注
    /// </summary>
    [pbr::OriginalName("AddBet")] AddBet = 1,
    /// <summary>
    ///要牌
    /// </summary>
    [pbr::OriginalName("GetCard")] GetCard = 2,
    /// <summary>
    ///不再要牌
    /// </summary>
    [pbr::OriginalName("NotCard")] NotCard = 4,
  }

  public enum ELCMsgIDSubGame {
    [pbr::OriginalName("MsgIDSubGame_Null")] MsgIdsubGameNull = 0,
    /// <summary>
    ///游戏开始(LCMsgGameStartResp)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_GameStartResp")] MsgIdsubGameGameStartResp = 1,
    /// <summary>
    ///通知玩家操作(LCMsgNotifyActionResp)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifyActionResp")] MsgIdsubGameNotifyActionResp = 2,
    /// <summary>
    ///玩家操作(LCMsgAction)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_Action")] MsgIdsubGameAction = 3,
    /// <summary>
    ///玩家操作返回(LCMsgActionResp)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_ActionResp")] MsgIdsubGameActionResp = 4,
    /// <summary>
    ///发牌(LCMsgSendCardResp)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_SendCardResp")] MsgIdsubGameSendCardResp = 5,
    /// <summary>
    ///结算(LCMsgGameResult)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_GameResultResp")] MsgIdsubGameGameResultResp = 9,
    /// <summary>
    ///桌子状态(LCMsgTableState)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifyStateResp")] MsgIdsubGameNotifyStateResp = 10,
    /// <summary>
    ///通知超时(MsgCommonBool)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_TimeOutResp")] MsgIdsubGameTimeOutResp = 11,
    /// <summary>
    ///重新准备(MsgCommonBool)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_TimeOutReady")] MsgIdsubGameTimeOutReady = 12,
    /// <summary>
    ///准备返回(MsgCommonBool)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_TimeOutReadyResp")] MsgIdsubGameTimeOutReadyResp = 13,
    /// <summary>
    ///超时踢了游戏(MsgCommonBool)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_TimeOutKickResp")] MsgIdsubGameTimeOutKickResp = 14,
    /// <summary>
    //////////////////////////机器人消息///////////////////////
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifyBankerGoldResp")] MsgIdsubGameNotifyBankerGoldResp = 20,
    /// <summary>
    ///通知庄家牌信息
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifyBankerCardResp")] MsgIdsubGameNotifyBankerCardResp = 21,
  }

  #endregion

  #region Messages
  public sealed partial class LCMsgTableState : pb::IMessage<LCMsgTableState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LCMsgTableState> _parser = new pb::MessageParser<LCMsgTableState>(() => new LCMsgTableState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LCMsgTableState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lucky9.Lucky9Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgTableState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgTableState(LCMsgTableState other) : this() {
      state_ = other.state_;
      outIme_ = other.outIme_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgTableState Clone() {
      return new LCMsgTableState(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private int state_;
    /// <summary>
    ///桌子状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "out_ime" field.</summary>
    public const int OutImeFieldNumber = 2;
    private int outIme_;
    /// <summary>
    ///剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OutIme {
      get { return outIme_; }
      set {
        outIme_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LCMsgTableState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LCMsgTableState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (OutIme != other.OutIme) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      if (OutIme != 0) hash ^= OutIme.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(State);
      }
      if (OutIme != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OutIme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(State);
      }
      if (OutIme != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OutIme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (OutIme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutIme);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LCMsgTableState other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.OutIme != 0) {
        OutIme = other.OutIme;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            State = input.ReadInt32();
            break;
          }
          case 16: {
            OutIme = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            State = input.ReadInt32();
            break;
          }
          case 16: {
            OutIme = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LCMsgHandCards : pb::IMessage<LCMsgHandCards>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LCMsgHandCards> _parser = new pb::MessageParser<LCMsgHandCards>(() => new LCMsgHandCards());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LCMsgHandCards> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lucky9.Lucky9Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgHandCards() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgHandCards(LCMsgHandCards other) : this() {
      type_ = other.type_;
      cardSum_ = other.cardSum_;
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgHandCards Clone() {
      return new LCMsgHandCards(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///牌型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "card_sum" field.</summary>
    public const int CardSumFieldNumber = 2;
    private int cardSum_;
    /// <summary>
    ///点数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardSum {
      get { return cardSum_; }
      set {
        cardSum_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_cards_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LCMsgHandCards);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LCMsgHandCards other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (CardSum != other.CardSum) return false;
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (CardSum != 0) hash ^= CardSum.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (CardSum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CardSum);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (CardSum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CardSum);
      }
      cards_.WriteTo(ref output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (CardSum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardSum);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LCMsgHandCards other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.CardSum != 0) {
        CardSum = other.CardSum;
      }
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            CardSum = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            CardSum = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            cards_.AddEntriesFrom(ref input, _repeated_cards_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LCMsgPlayerInfo : pb::IMessage<LCMsgPlayerInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LCMsgPlayerInfo> _parser = new pb::MessageParser<LCMsgPlayerInfo>(() => new LCMsgPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LCMsgPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lucky9.Lucky9Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgPlayerInfo(LCMsgPlayerInfo other) : this() {
      chairId_ = other.chairId_;
      playStatus_ = other.playStatus_;
      playerBet_ = other.playerBet_;
      cardType_ = other.cardType_;
      getCard_ = other.getCard_;
      gold_ = other.gold_;
      winGold_ = other.winGold_;
      winConut_ = other.winConut_;
      handls_ = other.handls_ != null ? other.handls_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgPlayerInfo Clone() {
      return new LCMsgPlayerInfo(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    /// <summary>
    ///玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "play_status" field.</summary>
    public const int PlayStatusFieldNumber = 2;
    private int playStatus_;
    /// <summary>
    ///玩家状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayStatus {
      get { return playStatus_; }
      set {
        playStatus_ = value;
      }
    }

    /// <summary>Field number for the "player_bet" field.</summary>
    public const int PlayerBetFieldNumber = 3;
    private long playerBet_;
    /// <summary>
    ///玩家投注总和
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerBet {
      get { return playerBet_; }
      set {
        playerBet_ = value;
      }
    }

    /// <summary>Field number for the "card_type" field.</summary>
    public const int CardTypeFieldNumber = 4;
    private int cardType_;
    /// <summary>
    ///牌型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardType {
      get { return cardType_; }
      set {
        cardType_ = value;
      }
    }

    /// <summary>Field number for the "get_card" field.</summary>
    public const int GetCardFieldNumber = 5;
    private int getCard_;
    /// <summary>
    ///是否操作要牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GetCard {
      get { return getCard_; }
      set {
        getCard_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 6;
    private long gold_;
    /// <summary>
    ///自己的金币，别人的是空
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "win_gold" field.</summary>
    public const int WinGoldFieldNumber = 7;
    private long winGold_;
    /// <summary>
    ///输赢分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WinGold {
      get { return winGold_; }
      set {
        winGold_ = value;
      }
    }

    /// <summary>Field number for the "win_conut" field.</summary>
    public const int WinConutFieldNumber = 8;
    private long winConut_;
    /// <summary>
    ///赢的局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WinConut {
      get { return winConut_; }
      set {
        winConut_ = value;
      }
    }

    /// <summary>Field number for the "handls" field.</summary>
    public const int HandlsFieldNumber = 9;
    private global::Lucky9.LCMsgHandCards handls_;
    /// <summary>
    ///手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lucky9.LCMsgHandCards Handls {
      get { return handls_; }
      set {
        handls_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LCMsgPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LCMsgPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if (PlayStatus != other.PlayStatus) return false;
      if (PlayerBet != other.PlayerBet) return false;
      if (CardType != other.CardType) return false;
      if (GetCard != other.GetCard) return false;
      if (Gold != other.Gold) return false;
      if (WinGold != other.WinGold) return false;
      if (WinConut != other.WinConut) return false;
      if (!object.Equals(Handls, other.Handls)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (PlayStatus != 0) hash ^= PlayStatus.GetHashCode();
      if (PlayerBet != 0L) hash ^= PlayerBet.GetHashCode();
      if (CardType != 0) hash ^= CardType.GetHashCode();
      if (GetCard != 0) hash ^= GetCard.GetHashCode();
      if (Gold != 0L) hash ^= Gold.GetHashCode();
      if (WinGold != 0L) hash ^= WinGold.GetHashCode();
      if (WinConut != 0L) hash ^= WinConut.GetHashCode();
      if (handls_ != null) hash ^= Handls.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (PlayStatus != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayStatus);
      }
      if (PlayerBet != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(PlayerBet);
      }
      if (CardType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CardType);
      }
      if (GetCard != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GetCard);
      }
      if (Gold != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Gold);
      }
      if (WinGold != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(WinGold);
      }
      if (WinConut != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(WinConut);
      }
      if (handls_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Handls);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (PlayStatus != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayStatus);
      }
      if (PlayerBet != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(PlayerBet);
      }
      if (CardType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CardType);
      }
      if (GetCard != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GetCard);
      }
      if (Gold != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Gold);
      }
      if (WinGold != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(WinGold);
      }
      if (WinConut != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(WinConut);
      }
      if (handls_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Handls);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (PlayStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayStatus);
      }
      if (PlayerBet != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerBet);
      }
      if (CardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardType);
      }
      if (GetCard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GetCard);
      }
      if (Gold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
      }
      if (WinGold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WinGold);
      }
      if (WinConut != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WinConut);
      }
      if (handls_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Handls);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LCMsgPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.PlayStatus != 0) {
        PlayStatus = other.PlayStatus;
      }
      if (other.PlayerBet != 0L) {
        PlayerBet = other.PlayerBet;
      }
      if (other.CardType != 0) {
        CardType = other.CardType;
      }
      if (other.GetCard != 0) {
        GetCard = other.GetCard;
      }
      if (other.Gold != 0L) {
        Gold = other.Gold;
      }
      if (other.WinGold != 0L) {
        WinGold = other.WinGold;
      }
      if (other.WinConut != 0L) {
        WinConut = other.WinConut;
      }
      if (other.handls_ != null) {
        if (handls_ == null) {
          Handls = new global::Lucky9.LCMsgHandCards();
        }
        Handls.MergeFrom(other.Handls);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            PlayStatus = input.ReadInt32();
            break;
          }
          case 24: {
            PlayerBet = input.ReadInt64();
            break;
          }
          case 32: {
            CardType = input.ReadInt32();
            break;
          }
          case 40: {
            GetCard = input.ReadInt32();
            break;
          }
          case 48: {
            Gold = input.ReadInt64();
            break;
          }
          case 56: {
            WinGold = input.ReadInt64();
            break;
          }
          case 64: {
            WinConut = input.ReadInt64();
            break;
          }
          case 74: {
            if (handls_ == null) {
              Handls = new global::Lucky9.LCMsgHandCards();
            }
            input.ReadMessage(Handls);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            PlayStatus = input.ReadInt32();
            break;
          }
          case 24: {
            PlayerBet = input.ReadInt64();
            break;
          }
          case 32: {
            CardType = input.ReadInt32();
            break;
          }
          case 40: {
            GetCard = input.ReadInt32();
            break;
          }
          case 48: {
            Gold = input.ReadInt64();
            break;
          }
          case 56: {
            WinGold = input.ReadInt64();
            break;
          }
          case 64: {
            WinConut = input.ReadInt64();
            break;
          }
          case 74: {
            if (handls_ == null) {
              Handls = new global::Lucky9.LCMsgHandCards();
            }
            input.ReadMessage(Handls);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///场景消息
  /// </summary>
  public sealed partial class LCMsgSceneInfo : pb::IMessage<LCMsgSceneInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LCMsgSceneInfo> _parser = new pb::MessageParser<LCMsgSceneInfo>(() => new LCMsgSceneInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LCMsgSceneInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lucky9.Lucky9Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgSceneInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgSceneInfo(LCMsgSceneInfo other) : this() {
      cellScore_ = other.cellScore_;
      roomScore_ = other.roomScore_;
      tableState_ = other.tableState_;
      tableRonud_ = other.tableRonud_;
      totalEnterGold_ = other.totalEnterGold_;
      oneCard_ = other.oneCard_;
      bankerChairId_ = other.bankerChairId_;
      outTime_ = other.outTime_;
      totalTime_ = other.totalTime_;
      playerInfos_ = other.playerInfos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgSceneInfo Clone() {
      return new LCMsgSceneInfo(this);
    }

    /// <summary>Field number for the "cell_score" field.</summary>
    public const int CellScoreFieldNumber = 1;
    private long cellScore_;
    /// <summary>
    ///底分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CellScore {
      get { return cellScore_; }
      set {
        cellScore_ = value;
      }
    }

    /// <summary>Field number for the "room_score" field.</summary>
    public const int RoomScoreFieldNumber = 2;
    private long roomScore_;
    /// <summary>
    ///房费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomScore {
      get { return roomScore_; }
      set {
        roomScore_ = value;
      }
    }

    /// <summary>Field number for the "table_state" field.</summary>
    public const int TableStateFieldNumber = 3;
    private int tableState_;
    /// <summary>
    ///桌子状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TableState {
      get { return tableState_; }
      set {
        tableState_ = value;
      }
    }

    /// <summary>Field number for the "table_ronud" field.</summary>
    public const int TableRonudFieldNumber = 4;
    private int tableRonud_;
    /// <summary>
    ///桌子轮数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TableRonud {
      get { return tableRonud_; }
      set {
        tableRonud_ = value;
      }
    }

    /// <summary>Field number for the "total_enter_gold" field.</summary>
    public const int TotalEnterGoldFieldNumber = 5;
    private long totalEnterGold_;
    /// <summary>
    ///当前5轮内房费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalEnterGold {
      get { return totalEnterGold_; }
      set {
        totalEnterGold_ = value;
      }
    }

    /// <summary>Field number for the "one_card" field.</summary>
    public const int OneCardFieldNumber = 6;
    private int oneCard_;
    /// <summary>
    ///第一张牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OneCard {
      get { return oneCard_; }
      set {
        oneCard_ = value;
      }
    }

    /// <summary>Field number for the "banker_chair_id" field.</summary>
    public const int BankerChairIdFieldNumber = 10;
    private int bankerChairId_;
    /// <summary>
    ///庄家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BankerChairId {
      get { return bankerChairId_; }
      set {
        bankerChairId_ = value;
      }
    }

    /// <summary>Field number for the "out_time" field.</summary>
    public const int OutTimeFieldNumber = 11;
    private int outTime_;
    /// <summary>
    ///当前状态剩余超时时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OutTime {
      get { return outTime_; }
      set {
        outTime_ = value;
      }
    }

    /// <summary>Field number for the "total_time" field.</summary>
    public const int TotalTimeFieldNumber = 12;
    private int totalTime_;
    /// <summary>
    ///当前状态总时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalTime {
      get { return totalTime_; }
      set {
        totalTime_ = value;
      }
    }

    /// <summary>Field number for the "player_infos" field.</summary>
    public const int PlayerInfosFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Lucky9.LCMsgPlayerInfo> _repeated_playerInfos_codec
        = pb::FieldCodec.ForMessage(122, global::Lucky9.LCMsgPlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Lucky9.LCMsgPlayerInfo> playerInfos_ = new pbc::RepeatedField<global::Lucky9.LCMsgPlayerInfo>();
    /// <summary>
    ///玩家状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lucky9.LCMsgPlayerInfo> PlayerInfos {
      get { return playerInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LCMsgSceneInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LCMsgSceneInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CellScore != other.CellScore) return false;
      if (RoomScore != other.RoomScore) return false;
      if (TableState != other.TableState) return false;
      if (TableRonud != other.TableRonud) return false;
      if (TotalEnterGold != other.TotalEnterGold) return false;
      if (OneCard != other.OneCard) return false;
      if (BankerChairId != other.BankerChairId) return false;
      if (OutTime != other.OutTime) return false;
      if (TotalTime != other.TotalTime) return false;
      if(!playerInfos_.Equals(other.playerInfos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CellScore != 0L) hash ^= CellScore.GetHashCode();
      if (RoomScore != 0L) hash ^= RoomScore.GetHashCode();
      if (TableState != 0) hash ^= TableState.GetHashCode();
      if (TableRonud != 0) hash ^= TableRonud.GetHashCode();
      if (TotalEnterGold != 0L) hash ^= TotalEnterGold.GetHashCode();
      if (OneCard != 0) hash ^= OneCard.GetHashCode();
      if (BankerChairId != 0) hash ^= BankerChairId.GetHashCode();
      if (OutTime != 0) hash ^= OutTime.GetHashCode();
      if (TotalTime != 0) hash ^= TotalTime.GetHashCode();
      hash ^= playerInfos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CellScore != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CellScore);
      }
      if (RoomScore != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RoomScore);
      }
      if (TableState != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TableState);
      }
      if (TableRonud != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TableRonud);
      }
      if (TotalEnterGold != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TotalEnterGold);
      }
      if (OneCard != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(OneCard);
      }
      if (BankerChairId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(BankerChairId);
      }
      if (OutTime != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(OutTime);
      }
      if (TotalTime != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(TotalTime);
      }
      playerInfos_.WriteTo(output, _repeated_playerInfos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CellScore != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CellScore);
      }
      if (RoomScore != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RoomScore);
      }
      if (TableState != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TableState);
      }
      if (TableRonud != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TableRonud);
      }
      if (TotalEnterGold != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TotalEnterGold);
      }
      if (OneCard != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(OneCard);
      }
      if (BankerChairId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(BankerChairId);
      }
      if (OutTime != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(OutTime);
      }
      if (TotalTime != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(TotalTime);
      }
      playerInfos_.WriteTo(ref output, _repeated_playerInfos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CellScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CellScore);
      }
      if (RoomScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomScore);
      }
      if (TableState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableState);
      }
      if (TableRonud != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableRonud);
      }
      if (TotalEnterGold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalEnterGold);
      }
      if (OneCard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OneCard);
      }
      if (BankerChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BankerChairId);
      }
      if (OutTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutTime);
      }
      if (TotalTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalTime);
      }
      size += playerInfos_.CalculateSize(_repeated_playerInfos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LCMsgSceneInfo other) {
      if (other == null) {
        return;
      }
      if (other.CellScore != 0L) {
        CellScore = other.CellScore;
      }
      if (other.RoomScore != 0L) {
        RoomScore = other.RoomScore;
      }
      if (other.TableState != 0) {
        TableState = other.TableState;
      }
      if (other.TableRonud != 0) {
        TableRonud = other.TableRonud;
      }
      if (other.TotalEnterGold != 0L) {
        TotalEnterGold = other.TotalEnterGold;
      }
      if (other.OneCard != 0) {
        OneCard = other.OneCard;
      }
      if (other.BankerChairId != 0) {
        BankerChairId = other.BankerChairId;
      }
      if (other.OutTime != 0) {
        OutTime = other.OutTime;
      }
      if (other.TotalTime != 0) {
        TotalTime = other.TotalTime;
      }
      playerInfos_.Add(other.playerInfos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CellScore = input.ReadInt64();
            break;
          }
          case 16: {
            RoomScore = input.ReadInt64();
            break;
          }
          case 24: {
            TableState = input.ReadInt32();
            break;
          }
          case 32: {
            TableRonud = input.ReadInt32();
            break;
          }
          case 40: {
            TotalEnterGold = input.ReadInt64();
            break;
          }
          case 48: {
            OneCard = input.ReadInt32();
            break;
          }
          case 80: {
            BankerChairId = input.ReadInt32();
            break;
          }
          case 88: {
            OutTime = input.ReadInt32();
            break;
          }
          case 96: {
            TotalTime = input.ReadInt32();
            break;
          }
          case 122: {
            playerInfos_.AddEntriesFrom(input, _repeated_playerInfos_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CellScore = input.ReadInt64();
            break;
          }
          case 16: {
            RoomScore = input.ReadInt64();
            break;
          }
          case 24: {
            TableState = input.ReadInt32();
            break;
          }
          case 32: {
            TableRonud = input.ReadInt32();
            break;
          }
          case 40: {
            TotalEnterGold = input.ReadInt64();
            break;
          }
          case 48: {
            OneCard = input.ReadInt32();
            break;
          }
          case 80: {
            BankerChairId = input.ReadInt32();
            break;
          }
          case 88: {
            OutTime = input.ReadInt32();
            break;
          }
          case 96: {
            TotalTime = input.ReadInt32();
            break;
          }
          case 122: {
            playerInfos_.AddEntriesFrom(ref input, _repeated_playerInfos_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///游戏开始
  /// </summary>
  public sealed partial class LCMsgGameStartResp : pb::IMessage<LCMsgGameStartResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LCMsgGameStartResp> _parser = new pb::MessageParser<LCMsgGameStartResp>(() => new LCMsgGameStartResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LCMsgGameStartResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lucky9.Lucky9Reflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgGameStartResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgGameStartResp(LCMsgGameStartResp other) : this() {
      totalEnterGold_ = other.totalEnterGold_;
      curEnterGold_ = other.curEnterGold_;
      bankerChairId_ = other.bankerChairId_;
      oneCard_ = other.oneCard_;
      playIndex_ = other.playIndex_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgGameStartResp Clone() {
      return new LCMsgGameStartResp(this);
    }

    /// <summary>Field number for the "total_enter_gold" field.</summary>
    public const int TotalEnterGoldFieldNumber = 2;
    private int totalEnterGold_;
    /// <summary>
    ///总的入场费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalEnterGold {
      get { return totalEnterGold_; }
      set {
        totalEnterGold_ = value;
      }
    }

    /// <summary>Field number for the "cur_enter_gold" field.</summary>
    public const int CurEnterGoldFieldNumber = 3;
    private int curEnterGold_;
    /// <summary>
    ///当前局入场费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurEnterGold {
      get { return curEnterGold_; }
      set {
        curEnterGold_ = value;
      }
    }

    /// <summary>Field number for the "banker_chair_id" field.</summary>
    public const int BankerChairIdFieldNumber = 4;
    private int bankerChairId_;
    /// <summary>
    ///庄家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BankerChairId {
      get { return bankerChairId_; }
      set {
        bankerChairId_ = value;
      }
    }

    /// <summary>Field number for the "one_card" field.</summary>
    public const int OneCardFieldNumber = 5;
    private int oneCard_;
    /// <summary>
    ///第一张牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OneCard {
      get { return oneCard_; }
      set {
        oneCard_ = value;
      }
    }

    /// <summary>Field number for the "play_index" field.</summary>
    public const int PlayIndexFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_playIndex_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> playIndex_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///在玩下标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PlayIndex {
      get { return playIndex_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LCMsgGameStartResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LCMsgGameStartResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalEnterGold != other.TotalEnterGold) return false;
      if (CurEnterGold != other.CurEnterGold) return false;
      if (BankerChairId != other.BankerChairId) return false;
      if (OneCard != other.OneCard) return false;
      if(!playIndex_.Equals(other.playIndex_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalEnterGold != 0) hash ^= TotalEnterGold.GetHashCode();
      if (CurEnterGold != 0) hash ^= CurEnterGold.GetHashCode();
      if (BankerChairId != 0) hash ^= BankerChairId.GetHashCode();
      if (OneCard != 0) hash ^= OneCard.GetHashCode();
      hash ^= playIndex_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TotalEnterGold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalEnterGold);
      }
      if (CurEnterGold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurEnterGold);
      }
      if (BankerChairId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BankerChairId);
      }
      if (OneCard != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(OneCard);
      }
      playIndex_.WriteTo(output, _repeated_playIndex_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TotalEnterGold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalEnterGold);
      }
      if (CurEnterGold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurEnterGold);
      }
      if (BankerChairId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BankerChairId);
      }
      if (OneCard != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(OneCard);
      }
      playIndex_.WriteTo(ref output, _repeated_playIndex_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalEnterGold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalEnterGold);
      }
      if (CurEnterGold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurEnterGold);
      }
      if (BankerChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BankerChairId);
      }
      if (OneCard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OneCard);
      }
      size += playIndex_.CalculateSize(_repeated_playIndex_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LCMsgGameStartResp other) {
      if (other == null) {
        return;
      }
      if (other.TotalEnterGold != 0) {
        TotalEnterGold = other.TotalEnterGold;
      }
      if (other.CurEnterGold != 0) {
        CurEnterGold = other.CurEnterGold;
      }
      if (other.BankerChairId != 0) {
        BankerChairId = other.BankerChairId;
      }
      if (other.OneCard != 0) {
        OneCard = other.OneCard;
      }
      playIndex_.Add(other.playIndex_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            TotalEnterGold = input.ReadInt32();
            break;
          }
          case 24: {
            CurEnterGold = input.ReadInt32();
            break;
          }
          case 32: {
            BankerChairId = input.ReadInt32();
            break;
          }
          case 40: {
            OneCard = input.ReadInt32();
            break;
          }
          case 66:
          case 64: {
            playIndex_.AddEntriesFrom(input, _repeated_playIndex_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 16: {
            TotalEnterGold = input.ReadInt32();
            break;
          }
          case 24: {
            CurEnterGold = input.ReadInt32();
            break;
          }
          case 32: {
            BankerChairId = input.ReadInt32();
            break;
          }
          case 40: {
            OneCard = input.ReadInt32();
            break;
          }
          case 66:
          case 64: {
            playIndex_.AddEntriesFrom(ref input, _repeated_playIndex_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///通知玩家操作
  /// </summary>
  public sealed partial class LCMsgNotifyActionResp : pb::IMessage<LCMsgNotifyActionResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LCMsgNotifyActionResp> _parser = new pb::MessageParser<LCMsgNotifyActionResp>(() => new LCMsgNotifyActionResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LCMsgNotifyActionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lucky9.Lucky9Reflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgNotifyActionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgNotifyActionResp(LCMsgNotifyActionResp other) : this() {
      currentAct_ = other.currentAct_;
      operTime_ = other.operTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgNotifyActionResp Clone() {
      return new LCMsgNotifyActionResp(this);
    }

    /// <summary>Field number for the "current_act" field.</summary>
    public const int CurrentActFieldNumber = 3;
    private int currentAct_;
    /// <summary>
    ///当前操作码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentAct {
      get { return currentAct_; }
      set {
        currentAct_ = value;
      }
    }

    /// <summary>Field number for the "oper_time" field.</summary>
    public const int OperTimeFieldNumber = 4;
    private int operTime_;
    /// <summary>
    ///操作时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OperTime {
      get { return operTime_; }
      set {
        operTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LCMsgNotifyActionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LCMsgNotifyActionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentAct != other.CurrentAct) return false;
      if (OperTime != other.OperTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentAct != 0) hash ^= CurrentAct.GetHashCode();
      if (OperTime != 0) hash ^= OperTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CurrentAct != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurrentAct);
      }
      if (OperTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OperTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CurrentAct != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurrentAct);
      }
      if (OperTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OperTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentAct != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentAct);
      }
      if (OperTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OperTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LCMsgNotifyActionResp other) {
      if (other == null) {
        return;
      }
      if (other.CurrentAct != 0) {
        CurrentAct = other.CurrentAct;
      }
      if (other.OperTime != 0) {
        OperTime = other.OperTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 24: {
            CurrentAct = input.ReadInt32();
            break;
          }
          case 32: {
            OperTime = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 24: {
            CurrentAct = input.ReadInt32();
            break;
          }
          case 32: {
            OperTime = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家操作
  /// </summary>
  public sealed partial class LCMsgAction : pb::IMessage<LCMsgAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LCMsgAction> _parser = new pb::MessageParser<LCMsgAction>(() => new LCMsgAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LCMsgAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lucky9.Lucky9Reflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgAction(LCMsgAction other) : this() {
      act_ = other.act_;
      betScore_ = other.betScore_;
      betIndex_ = other.betIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgAction Clone() {
      return new LCMsgAction(this);
    }

    /// <summary>Field number for the "act" field.</summary>
    public const int ActFieldNumber = 1;
    private int act_;
    /// <summary>
    ///操作标示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Act {
      get { return act_; }
      set {
        act_ = value;
      }
    }

    /// <summary>Field number for the "bet_score" field.</summary>
    public const int BetScoreFieldNumber = 2;
    private long betScore_;
    /// <summary>
    ///下注金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BetScore {
      get { return betScore_; }
      set {
        betScore_ = value;
      }
    }

    /// <summary>Field number for the "bet_index" field.</summary>
    public const int BetIndexFieldNumber = 3;
    private long betIndex_;
    /// <summary>
    ///下注档位， 前端自己用，服务器只做转发
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BetIndex {
      get { return betIndex_; }
      set {
        betIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LCMsgAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LCMsgAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Act != other.Act) return false;
      if (BetScore != other.BetScore) return false;
      if (BetIndex != other.BetIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Act != 0) hash ^= Act.GetHashCode();
      if (BetScore != 0L) hash ^= BetScore.GetHashCode();
      if (BetIndex != 0L) hash ^= BetIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Act != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Act);
      }
      if (BetScore != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(BetScore);
      }
      if (BetIndex != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BetIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Act != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Act);
      }
      if (BetScore != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(BetScore);
      }
      if (BetIndex != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BetIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Act != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Act);
      }
      if (BetScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BetScore);
      }
      if (BetIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BetIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LCMsgAction other) {
      if (other == null) {
        return;
      }
      if (other.Act != 0) {
        Act = other.Act;
      }
      if (other.BetScore != 0L) {
        BetScore = other.BetScore;
      }
      if (other.BetIndex != 0L) {
        BetIndex = other.BetIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Act = input.ReadInt32();
            break;
          }
          case 16: {
            BetScore = input.ReadInt64();
            break;
          }
          case 24: {
            BetIndex = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Act = input.ReadInt32();
            break;
          }
          case 16: {
            BetScore = input.ReadInt64();
            break;
          }
          case 24: {
            BetIndex = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家操作返回
  /// </summary>
  public sealed partial class LCMsgActionResp : pb::IMessage<LCMsgActionResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LCMsgActionResp> _parser = new pb::MessageParser<LCMsgActionResp>(() => new LCMsgActionResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LCMsgActionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lucky9.Lucky9Reflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgActionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgActionResp(LCMsgActionResp other) : this() {
      act_ = other.act_;
      chairId_ = other.chairId_;
      betScore_ = other.betScore_;
      betIndex_ = other.betIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgActionResp Clone() {
      return new LCMsgActionResp(this);
    }

    /// <summary>Field number for the "act" field.</summary>
    public const int ActFieldNumber = 1;
    private int act_;
    /// <summary>
    ///操作标示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Act {
      get { return act_; }
      set {
        act_ = value;
      }
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 2;
    private int chairId_;
    /// <summary>
    ///椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "bet_score" field.</summary>
    public const int BetScoreFieldNumber = 3;
    private long betScore_;
    /// <summary>
    ///下注金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BetScore {
      get { return betScore_; }
      set {
        betScore_ = value;
      }
    }

    /// <summary>Field number for the "bet_index" field.</summary>
    public const int BetIndexFieldNumber = 4;
    private long betIndex_;
    /// <summary>
    ///下注档位， 前端自己用，服务器只做转发
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BetIndex {
      get { return betIndex_; }
      set {
        betIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LCMsgActionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LCMsgActionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Act != other.Act) return false;
      if (ChairId != other.ChairId) return false;
      if (BetScore != other.BetScore) return false;
      if (BetIndex != other.BetIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Act != 0) hash ^= Act.GetHashCode();
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (BetScore != 0L) hash ^= BetScore.GetHashCode();
      if (BetIndex != 0L) hash ^= BetIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Act != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Act);
      }
      if (ChairId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChairId);
      }
      if (BetScore != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BetScore);
      }
      if (BetIndex != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(BetIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Act != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Act);
      }
      if (ChairId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChairId);
      }
      if (BetScore != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BetScore);
      }
      if (BetIndex != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(BetIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Act != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Act);
      }
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (BetScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BetScore);
      }
      if (BetIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BetIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LCMsgActionResp other) {
      if (other == null) {
        return;
      }
      if (other.Act != 0) {
        Act = other.Act;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.BetScore != 0L) {
        BetScore = other.BetScore;
      }
      if (other.BetIndex != 0L) {
        BetIndex = other.BetIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Act = input.ReadInt32();
            break;
          }
          case 16: {
            ChairId = input.ReadInt32();
            break;
          }
          case 24: {
            BetScore = input.ReadInt64();
            break;
          }
          case 32: {
            BetIndex = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Act = input.ReadInt32();
            break;
          }
          case 16: {
            ChairId = input.ReadInt32();
            break;
          }
          case 24: {
            BetScore = input.ReadInt64();
            break;
          }
          case 32: {
            BetIndex = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LCMsgSendCardInfo : pb::IMessage<LCMsgSendCardInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LCMsgSendCardInfo> _parser = new pb::MessageParser<LCMsgSendCardInfo>(() => new LCMsgSendCardInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LCMsgSendCardInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lucky9.Lucky9Reflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgSendCardInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgSendCardInfo(LCMsgSendCardInfo other) : this() {
      chairId_ = other.chairId_;
      handCards_ = other.handCards_ != null ? other.handCards_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgSendCardInfo Clone() {
      return new LCMsgSendCardInfo(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    /// <summary>
    ///玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "hand_cards" field.</summary>
    public const int HandCardsFieldNumber = 2;
    private global::Lucky9.LCMsgHandCards handCards_;
    /// <summary>
    ///手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lucky9.LCMsgHandCards HandCards {
      get { return handCards_; }
      set {
        handCards_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LCMsgSendCardInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LCMsgSendCardInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if (!object.Equals(HandCards, other.HandCards)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (handCards_ != null) hash ^= HandCards.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (handCards_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(HandCards);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (handCards_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(HandCards);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (handCards_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HandCards);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LCMsgSendCardInfo other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.handCards_ != null) {
        if (handCards_ == null) {
          HandCards = new global::Lucky9.LCMsgHandCards();
        }
        HandCards.MergeFrom(other.HandCards);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 18: {
            if (handCards_ == null) {
              HandCards = new global::Lucky9.LCMsgHandCards();
            }
            input.ReadMessage(HandCards);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 18: {
            if (handCards_ == null) {
              HandCards = new global::Lucky9.LCMsgHandCards();
            }
            input.ReadMessage(HandCards);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///发玩家牌
  /// </summary>
  public sealed partial class LCMsgSendCardResp : pb::IMessage<LCMsgSendCardResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LCMsgSendCardResp> _parser = new pb::MessageParser<LCMsgSendCardResp>(() => new LCMsgSendCardResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LCMsgSendCardResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lucky9.Lucky9Reflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgSendCardResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgSendCardResp(LCMsgSendCardResp other) : this() {
      infos_ = other.infos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgSendCardResp Clone() {
      return new LCMsgSendCardResp(this);
    }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lucky9.LCMsgSendCardInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(10, global::Lucky9.LCMsgSendCardInfo.Parser);
    private readonly pbc::RepeatedField<global::Lucky9.LCMsgSendCardInfo> infos_ = new pbc::RepeatedField<global::Lucky9.LCMsgSendCardInfo>();
    /// <summary>
    ///所有人的牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lucky9.LCMsgSendCardInfo> Infos {
      get { return infos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LCMsgSendCardResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LCMsgSendCardResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!infos_.Equals(other.infos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= infos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      infos_.WriteTo(output, _repeated_infos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      infos_.WriteTo(ref output, _repeated_infos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += infos_.CalculateSize(_repeated_infos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LCMsgSendCardResp other) {
      if (other == null) {
        return;
      }
      infos_.Add(other.infos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            infos_.AddEntriesFrom(ref input, _repeated_infos_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LCMsgEndPlayerInfo : pb::IMessage<LCMsgEndPlayerInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LCMsgEndPlayerInfo> _parser = new pb::MessageParser<LCMsgEndPlayerInfo>(() => new LCMsgEndPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LCMsgEndPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lucky9.Lucky9Reflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgEndPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgEndPlayerInfo(LCMsgEndPlayerInfo other) : this() {
      chairId_ = other.chairId_;
      gameScore_ = other.gameScore_;
      tax_ = other.tax_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgEndPlayerInfo Clone() {
      return new LCMsgEndPlayerInfo(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    /// <summary>
    ///玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "game_score" field.</summary>
    public const int GameScoreFieldNumber = 2;
    private long gameScore_;
    /// <summary>
    ///输赢分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GameScore {
      get { return gameScore_; }
      set {
        gameScore_ = value;
      }
    }

    /// <summary>Field number for the "tax" field.</summary>
    public const int TaxFieldNumber = 3;
    private long tax_;
    /// <summary>
    ///税
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tax {
      get { return tax_; }
      set {
        tax_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LCMsgEndPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LCMsgEndPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if (GameScore != other.GameScore) return false;
      if (Tax != other.Tax) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (GameScore != 0L) hash ^= GameScore.GetHashCode();
      if (Tax != 0L) hash ^= Tax.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (GameScore != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(GameScore);
      }
      if (Tax != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Tax);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (GameScore != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(GameScore);
      }
      if (Tax != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Tax);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (GameScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GameScore);
      }
      if (Tax != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tax);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LCMsgEndPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.GameScore != 0L) {
        GameScore = other.GameScore;
      }
      if (other.Tax != 0L) {
        Tax = other.Tax;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            GameScore = input.ReadInt64();
            break;
          }
          case 24: {
            Tax = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            GameScore = input.ReadInt64();
            break;
          }
          case 24: {
            Tax = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///游戏结果                                  
  /// </summary>
  public sealed partial class LCMsgGameResult : pb::IMessage<LCMsgGameResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LCMsgGameResult> _parser = new pb::MessageParser<LCMsgGameResult>(() => new LCMsgGameResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LCMsgGameResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lucky9.Lucky9Reflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgGameResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgGameResult(LCMsgGameResult other) : this() {
      bisectGold_ = other.bisectGold_;
      bisectList_ = other.bisectList_.Clone();
      players_ = other.players_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgGameResult Clone() {
      return new LCMsgGameResult(this);
    }

    /// <summary>Field number for the "bisect_gold" field.</summary>
    public const int BisectGoldFieldNumber = 1;
    private long bisectGold_;
    /// <summary>
    ///房费金币 大于0有平分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BisectGold {
      get { return bisectGold_; }
      set {
        bisectGold_ = value;
      }
    }

    /// <summary>Field number for the "bisect_list" field.</summary>
    public const int BisectListFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_bisectList_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> bisectList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///平分椅子列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BisectList {
      get { return bisectList_; }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Lucky9.LCMsgEndPlayerInfo> _repeated_players_codec
        = pb::FieldCodec.ForMessage(26, global::Lucky9.LCMsgEndPlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Lucky9.LCMsgEndPlayerInfo> players_ = new pbc::RepeatedField<global::Lucky9.LCMsgEndPlayerInfo>();
    /// <summary>
    ///玩家结算信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lucky9.LCMsgEndPlayerInfo> Players {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LCMsgGameResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LCMsgGameResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BisectGold != other.BisectGold) return false;
      if(!bisectList_.Equals(other.bisectList_)) return false;
      if(!players_.Equals(other.players_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BisectGold != 0L) hash ^= BisectGold.GetHashCode();
      hash ^= bisectList_.GetHashCode();
      hash ^= players_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BisectGold != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(BisectGold);
      }
      bisectList_.WriteTo(output, _repeated_bisectList_codec);
      players_.WriteTo(output, _repeated_players_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BisectGold != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(BisectGold);
      }
      bisectList_.WriteTo(ref output, _repeated_bisectList_codec);
      players_.WriteTo(ref output, _repeated_players_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BisectGold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BisectGold);
      }
      size += bisectList_.CalculateSize(_repeated_bisectList_codec);
      size += players_.CalculateSize(_repeated_players_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LCMsgGameResult other) {
      if (other == null) {
        return;
      }
      if (other.BisectGold != 0L) {
        BisectGold = other.BisectGold;
      }
      bisectList_.Add(other.bisectList_);
      players_.Add(other.players_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BisectGold = input.ReadInt64();
            break;
          }
          case 18:
          case 16: {
            bisectList_.AddEntriesFrom(input, _repeated_bisectList_codec);
            break;
          }
          case 26: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BisectGold = input.ReadInt64();
            break;
          }
          case 18:
          case 16: {
            bisectList_.AddEntriesFrom(ref input, _repeated_bisectList_codec);
            break;
          }
          case 26: {
            players_.AddEntriesFrom(ref input, _repeated_players_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///////////////////////////////////////////////////////////////机器人消息///////////////////////////////////////
  /// </summary>
  public sealed partial class LCMsgNotifyPlayerAct : pb::IMessage<LCMsgNotifyPlayerAct>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LCMsgNotifyPlayerAct> _parser = new pb::MessageParser<LCMsgNotifyPlayerAct>(() => new LCMsgNotifyPlayerAct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LCMsgNotifyPlayerAct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lucky9.Lucky9Reflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgNotifyPlayerAct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgNotifyPlayerAct(LCMsgNotifyPlayerAct other) : this() {
      chairId_ = other.chairId_;
      act_ = other.act_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LCMsgNotifyPlayerAct Clone() {
      return new LCMsgNotifyPlayerAct(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    /// <summary>
    ///玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "act" field.</summary>
    public const int ActFieldNumber = 2;
    private int act_;
    /// <summary>
    ///被比玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Act {
      get { return act_; }
      set {
        act_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LCMsgNotifyPlayerAct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LCMsgNotifyPlayerAct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if (Act != other.Act) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (Act != 0) hash ^= Act.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (Act != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Act);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (Act != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Act);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (Act != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Act);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LCMsgNotifyPlayerAct other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.Act != 0) {
        Act = other.Act;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            Act = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            Act = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
