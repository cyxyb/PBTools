// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/SubGame/TeenPatti_AK47.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TeenPattiAK47 {

  /// <summary>Holder for reflection information generated from Proto/SubGame/TeenPatti_AK47.proto</summary>
  public static partial class TeenPattiAK47Reflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/SubGame/TeenPatti_AK47.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TeenPattiAK47Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJQcm90by9TdWJHYW1lL1RlZW5QYXR0aV9BSzQ3LnByb3RvEg5UZWVuUGF0",
            "dGlfQUs0NyIxCg9BS01zZ1RhYmxlU3RhdGUSDQoFc3RhdGUYASABKAUSDwoH",
            "b3V0X2ltZRgCIAEoBSJICg5BS01zZ0hhbmRDYXJkcxIRCgljYXJkX3R5cGUY",
            "ASABKAUSDQoFY2FyZHMYAiADKAUSFAoMY2hhbmdlX2NhcmRzGAMgAygFIsUB",
            "Cg9BS01zZ1BsYXllckluZm8SEAoIY2hhaXJfaWQYASABKAUSEAoIbWluZ196",
            "aHUYAiABKAgSEwoLcGxheV9zdGF0dXMYAyABKAUSEgoKcGxheWVyX2JldBgE",
            "IAEoAxIQCghsYXN0X2JldBgFIAEoAxIMCgRnb2xkGAYgASgDEhAKCHdpbl9n",
            "b2xkGAcgASgDEjMKC2hhbmRsX2NhcmRzGAggASgLMh4uVGVlblBhdHRpX0FL",
            "NDcuQUtNc2dIYW5kQ2FyZHMi7AIKDkFLTXNnU2NlbmVJbmZvEhEKCW1heF9z",
            "Y29yZRgBIAEoAxIXCg90YWJsZV9tYXhfc2NvcmUYAiABKAMSEgoKY2VsbF9z",
            "Y29yZRgDIAEoAxIRCgljdXJfdGltZXMYBCABKAUSEwoLdGFibGVfc3RhdGUY",
            "BSABKAUSFwoPdG90YWxfYmV0X3Njb3JlGAYgASgDEgsKA3RheBgHIAEoBRIX",
            "Cg9iYW5rZXJfY2hhaXJfaWQYCCABKAUSFAoMY3VyX2NoYWlyX2lkGAkgASgF",
            "EhUKDWN1cl9jaGFpcl9hY3QYCiABKAUSEAoIb3V0X3RpbWUYCyABKAUSEgoK",
            "dG90YWxfdGltZRgMIAEoBRIUCgxjb21wYXJlX3VzZXIYDSABKAUSEwoLY29t",
            "cGFyZV93aW4YDiABKAUSNQoMcGxheWVyX2luZm9zGA8gAygLMh8uVGVlblBh",
            "dHRpX0FLNDcuQUtNc2dQbGF5ZXJJbmZvIr0BChJBS01zZ0dhbWVTdGFydFJl",
            "c3ASFAoMY3VyX2NoYWlyX2lkGAEgASgFEhEKCWN1cl90aW1lcxgCIAEoBRIX",
            "Cg9iYW5rZXJfY2hhaXJfaWQYAyABKAUSEQoJbWF4X3Njb3JlGAQgASgDEhEK",
            "CW1heF9ibGluZBgFIAEoAxISCgpjZWxsX3Njb3JlGAYgASgDEhcKD3RhYmxl",
            "X21heF9zY29yZRgHIAEoAxISCgpwbGF5X2luZGV4GAggAygFImgKFUFLTXNn",
            "Tm90aWZ5QWN0aW9uUmVzcBIUCgxjdXJfY2hhaXJfaWQYASABKAUSEQoJY3Vy",
            "X3RpbWVzGAIgASgFEhMKC2N1cnJlbnRfYWN0GAMgASgFEhEKCW9wZXJfdGlt",
            "ZRgEIAEoBSJSCgtBS01zZ0FjdGlvbhILCgNhY3QYASABKAUSEQoJYmV0X3Nj",
            "b3JlGAIgASgDEhQKDGNvbXBhcmVfdXNlchgDIAEoAxINCgVpc19vaxgEIAEo",
            "CCIjCg9BS01zZ0dpdmVVcFJlc3ASEAoIY2hhaXJfaWQYASABKAUigQEKEUFL",
            "TXNnTG9va0NhcmRSZXNwEhAKCGNoYWlyX2lkGAEgASgFEhQKDGN1cl9jaGFp",
            "cl9pZBgCIAEoBRIPCgduZXdfYWN0GAMgASgFEjMKC2hhbmRsX2NhcmRzGAQg",
            "ASgLMh4uVGVlblBhdHRpX0FLNDcuQUtNc2dIYW5kQ2FyZHMiTAoPQUtNc2dB",
            "ZGRCZXRSZXNwEhQKDGFkZF9jaGFpcl9pZBgBIAEoBRIRCglhZGRfc2NvcmUY",
            "AiABKAMSEAoIYmV0X3R5cGUYAyABKAMiPAoUQUtNc2dDb21wYXJlQ2FyZFJl",
            "c3ASEAoIY2hhaXJfaWQYASABKAUSEgoKY29tcGFyZV9pZBgCIAEoBSKBAgoX",
            "QUtNc2dDb21wYXJlQ2FyZFJldFJlc3ASGAoQY3VycmVudF9jaGFpcl9pZBgB",
            "IAEoBRITCgtjdXJyZW50X2FjdBgCIAEoBRIPCgdsb3N0X2lkGAMgASgFEhIK",
            "CmNvbXBhcmVfaWQYBCABKAUSEgoKcGFzc2l2ZV9pZBgFIAEoBRI1Cg1jb21w",
            "YXJlX2NhcmRzGAYgASgLMh4uVGVlblBhdHRpX0FLNDcuQUtNc2dIYW5kQ2Fy",
            "ZHMSNQoNcGFzc2l2ZV9jYXJkcxgHIAEoCzIeLlRlZW5QYXR0aV9BSzQ3LkFL",
            "TXNnSGFuZENhcmRzEhAKCGlzX2FncmVlGAggASgIIoABCg9BS01zZ0dhbWVS",
            "ZXN1bHQSEAoIZ2FtZV90YXgYASABKAUSEgoKZ2FtZV9zY29yZRgCIAMoAxI0",
            "CgxwbGF5ZXJfaGFuZHMYAyADKAsyHi5UZWVuUGF0dGlfQUs0Ny5BS01zZ0hh",
            "bmRDYXJkcxIRCgllbmRfc3RhdGUYBCABKAUiNQoUQUtNc2dOb3RpZnlQbGF5",
            "ZXJBY3QSEAoIY2hhaXJfaWQYASABKAUSCwoDYWN0GAIgASgFKmcKDEVBS0dh",
            "bWVTdGF0ZRIPCgtHU19UUF9SRUFEWRAAEg4KCkdTX1RQX0RFQUwQARIRCg1H",
            "U19UUF9QTEFZSU5HEAISEQoNR1NfVFBfQ09NUEFSRRADEhAKDEdTX1RQX1JF",
            "U1VMVBAEKlUKDkVBS1BsYXllclN0YXRlEgwKCFBTX1JFQURZEAASCwoHUFNf",
            "UExBWRABEgsKB1BTX0dJVkUQAhILCgdQU19GQUlMEAMSDgoKUFNfVElNRU9V",
            "VBAEKocBCgtFQUtDYXJkVHlwZRINCglDVF9TSU5HTEUQABINCglDVF9ET1VC",
            "TEUQARIOCgpDVF9KSU5fSFVBEAISDgoKQ1RfU0hVTl9aSRADEg8KC0NUX1NI",
            "VU5fSklOEAQSDQoJQ1RfQkFPX1pJEAUSDgoKQ1RfU1BFQ0lBTBAGEgoKBkNU",
            "X01BWBAHKoQBCg1FQUtHYW1lQWN0aW9uEg0KCUludmFsZEFjdBAAEgoKBkdp",
            "dmVVcBABEgwKCExvb2tDYXJkEAISCwoHQ2FsbEJldBAEEgoKBkFkZEJldBAI",
            "Eg8KC0NvbXBhcmVDYXJkEBASEAoMQ29tcGFyZVJlcGx5ECASDgoKQWxsQ29t",
            "cGFyZRBAKr8FCg9FQUtNc2dJRFN1YkdhbWUSFQoRTXNnSURTdWJHYW1lX051",
            "bGwQABIeChpNc2dJRFN1YkdhbWVfR2FtZVN0YXJ0UmVzcBABEiEKHU1zZ0lE",
            "U3ViR2FtZV9Ob3RpZnlBY3Rpb25SZXNwEAISFwoTTXNnSURTdWJHYW1lX0Fj",
            "dGlvbhADEhsKF01zZ0lEU3ViR2FtZV9HaXZlVXBSZXNwEAQSGQoVTXNnSURT",
            "dWJHYW1lX0xvb2tDYXJkEAUSGwoXTXNnSURTdWJHYW1lX0FkZEJldFJlc3AQ",
            "BhIgChxNc2dJRFN1YkdhbWVfQ29tcGFyZUNhcmRSZXNwEAcSHwobTXNnSURT",
            "dWJHYW1lX0NvbXBhcmVSZXRSZXNwEAgSHwobTXNnSURTdWJHYW1lX0dhbWVS",
            "ZXN1bHRSZXNwEAkSIAocTXNnSURTdWJHYW1lX05vdGlmeVN0YXRlUmVzcBAK",
            "EhwKGE1zZ0lEU3ViR2FtZV9UaW1lT3V0UmVzcBALEh0KGU1zZ0lEU3ViR2Ft",
            "ZV9UaW1lT3V0UmVhZHkQDBIhCh1Nc2dJRFN1YkdhbWVfVGltZU91dFJlYWR5",
            "UmVzcBANEiAKHE1zZ0lEU3ViR2FtZV9UaW1lT3V0S2lja1Jlc3AQDhImCiJN",
            "c2dJRFN1YkdhbWVfTm90aWZ5U3lzdGVtQ2hlYXRSZXNwEBQSIwofTXNnSURT",
            "dWJHYW1lX05vdGlmeUNhcmRUeXBlUmVzcBAVEiAKHE1zZ0lEU3ViR2FtZV9O",
            "b3RpZnlJc01heFJlc3AQFhInCiNNc2dJRFN1YkdhbWVfTm90aWZ5UmVtYWlu",
            "RG91YmxlUmVzcBAXEiAKHE1zZ0lEU3ViR2FtZV9Ob3RpZnlSb3VuZFJlc3AQ",
            "GBIiCh5Nc2dJRFN1YkdhbWVfTm90aWZ5TGFzdEFjdFJlc3AQGWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::TeenPattiAK47.EAKGameState), typeof(global::TeenPattiAK47.EAKPlayerState), typeof(global::TeenPattiAK47.EAKCardType), typeof(global::TeenPattiAK47.EAKGameAction), typeof(global::TeenPattiAK47.EAKMsgIDSubGame), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TeenPattiAK47.AKMsgTableState), global::TeenPattiAK47.AKMsgTableState.Parser, new[]{ "State", "OutIme" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TeenPattiAK47.AKMsgHandCards), global::TeenPattiAK47.AKMsgHandCards.Parser, new[]{ "CardType", "Cards", "ChangeCards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TeenPattiAK47.AKMsgPlayerInfo), global::TeenPattiAK47.AKMsgPlayerInfo.Parser, new[]{ "ChairId", "MingZhu", "PlayStatus", "PlayerBet", "LastBet", "Gold", "WinGold", "HandlCards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TeenPattiAK47.AKMsgSceneInfo), global::TeenPattiAK47.AKMsgSceneInfo.Parser, new[]{ "MaxScore", "TableMaxScore", "CellScore", "CurTimes", "TableState", "TotalBetScore", "Tax", "BankerChairId", "CurChairId", "CurChairAct", "OutTime", "TotalTime", "CompareUser", "CompareWin", "PlayerInfos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TeenPattiAK47.AKMsgGameStartResp), global::TeenPattiAK47.AKMsgGameStartResp.Parser, new[]{ "CurChairId", "CurTimes", "BankerChairId", "MaxScore", "MaxBlind", "CellScore", "TableMaxScore", "PlayIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TeenPattiAK47.AKMsgNotifyActionResp), global::TeenPattiAK47.AKMsgNotifyActionResp.Parser, new[]{ "CurChairId", "CurTimes", "CurrentAct", "OperTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TeenPattiAK47.AKMsgAction), global::TeenPattiAK47.AKMsgAction.Parser, new[]{ "Act", "BetScore", "CompareUser", "IsOk" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TeenPattiAK47.AKMsgGiveUpResp), global::TeenPattiAK47.AKMsgGiveUpResp.Parser, new[]{ "ChairId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TeenPattiAK47.AKMsgLookCardResp), global::TeenPattiAK47.AKMsgLookCardResp.Parser, new[]{ "ChairId", "CurChairId", "NewAct", "HandlCards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TeenPattiAK47.AKMsgAddBetResp), global::TeenPattiAK47.AKMsgAddBetResp.Parser, new[]{ "AddChairId", "AddScore", "BetType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TeenPattiAK47.AKMsgCompareCardResp), global::TeenPattiAK47.AKMsgCompareCardResp.Parser, new[]{ "ChairId", "CompareId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TeenPattiAK47.AKMsgCompareCardRetResp), global::TeenPattiAK47.AKMsgCompareCardRetResp.Parser, new[]{ "CurrentChairId", "CurrentAct", "LostId", "CompareId", "PassiveId", "CompareCards", "PassiveCards", "IsAgree" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TeenPattiAK47.AKMsgGameResult), global::TeenPattiAK47.AKMsgGameResult.Parser, new[]{ "GameTax", "GameScore", "PlayerHands", "EndState" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TeenPattiAK47.AKMsgNotifyPlayerAct), global::TeenPattiAK47.AKMsgNotifyPlayerAct.Parser, new[]{ "ChairId", "Act" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///桌子状态
  /// </summary>
  public enum EAKGameState {
    /// <summary>
    ///准备
    /// </summary>
    [pbr::OriginalName("GS_TP_READY")] GsTpReady = 0,
    /// <summary>
    ///发牌
    /// </summary>
    [pbr::OriginalName("GS_TP_DEAL")] GsTpDeal = 1,
    /// <summary>
    ///游戏
    /// </summary>
    [pbr::OriginalName("GS_TP_PLAYING")] GsTpPlaying = 2,
    /// <summary>
    ///比牌阶段
    /// </summary>
    [pbr::OriginalName("GS_TP_COMPARE")] GsTpCompare = 3,
    /// <summary>
    ///结算
    /// </summary>
    [pbr::OriginalName("GS_TP_RESULT")] GsTpResult = 4,
  }

  /// <summary>
  ///玩家状态
  /// </summary>
  public enum EAKPlayerState {
    /// <summary>
    ///准备
    /// </summary>
    [pbr::OriginalName("PS_READY")] PsReady = 0,
    /// <summary>
    ///游戏
    /// </summary>
    [pbr::OriginalName("PS_PLAY")] PsPlay = 1,
    /// <summary>
    ///弃牌
    /// </summary>
    [pbr::OriginalName("PS_GIVE")] PsGive = 2,
    /// <summary>
    ///淘汰
    /// </summary>
    [pbr::OriginalName("PS_FAIL")] PsFail = 3,
    /// <summary>
    ///超时
    /// </summary>
    [pbr::OriginalName("PS_TIMEOUT")] PsTimeout = 4,
  }

  /// <summary>
  ///牌型
  /// </summary>
  public enum EAKCardType {
    /// <summary>
    ///扑克类型
    /// </summary>
    [pbr::OriginalName("CT_SINGLE")] CtSingle = 0,
    /// <summary>
    ///对子类型
    /// </summary>
    [pbr::OriginalName("CT_DOUBLE")] CtDouble = 1,
    /// <summary>
    ///金花类型
    /// </summary>
    [pbr::OriginalName("CT_JIN_HUA")] CtJinHua = 2,
    /// <summary>
    ///顺子类型
    /// </summary>
    [pbr::OriginalName("CT_SHUN_ZI")] CtShunZi = 3,
    /// <summary>
    ///顺金类型
    /// </summary>
    [pbr::OriginalName("CT_SHUN_JIN")] CtShunJin = 4,
    /// <summary>
    ///豹子类型
    /// </summary>
    [pbr::OriginalName("CT_BAO_ZI")] CtBaoZi = 5,
    /// <summary>
    ///特殊类型
    /// </summary>
    [pbr::OriginalName("CT_SPECIAL")] CtSpecial = 6,
    /// <summary>
    ///最大牌型
    /// </summary>
    [pbr::OriginalName("CT_MAX")] CtMax = 7,
  }

  /// <summary>
  ///操作码
  /// </summary>
  public enum EAKGameAction {
    /// <summary>
    ///无效
    /// </summary>
    [pbr::OriginalName("InvaldAct")] InvaldAct = 0,
    /// <summary>
    ///弃牌
    /// </summary>
    [pbr::OriginalName("GiveUp")] GiveUp = 1,
    /// <summary>
    ///看牌
    /// </summary>
    [pbr::OriginalName("LookCard")] LookCard = 2,
    /// <summary>
    ///跟注
    /// </summary>
    [pbr::OriginalName("CallBet")] CallBet = 4,
    /// <summary>
    ///加注
    /// </summary>
    [pbr::OriginalName("AddBet")] AddBet = 8,
    /// <summary>
    ///比牌
    /// </summary>
    [pbr::OriginalName("CompareCard")] CompareCard = 16,
    /// <summary>
    ///比牌应答
    /// </summary>
    [pbr::OriginalName("CompareReply")] CompareReply = 32,
    /// <summary>
    ///全场比牌
    /// </summary>
    [pbr::OriginalName("AllCompare")] AllCompare = 64,
  }

  public enum EAKMsgIDSubGame {
    [pbr::OriginalName("MsgIDSubGame_Null")] MsgIdsubGameNull = 0,
    /// <summary>
    ///游戏开始(AKMsgGameStartResp)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_GameStartResp")] MsgIdsubGameGameStartResp = 1,
    /// <summary>
    ///玩家操作(AKMsgNotifyActionResp)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifyActionResp")] MsgIdsubGameNotifyActionResp = 2,
    /// <summary>
    ///玩家操作(AKMsgAction)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_Action")] MsgIdsubGameAction = 3,
    /// <summary>
    ///玩家弃牌返回(AKMsgGiveUpResp)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_GiveUpResp")] MsgIdsubGameGiveUpResp = 4,
    /// <summary>
    ///玩家看牌(AKMsgLookCardResp)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_LookCard")] MsgIdsubGameLookCard = 5,
    /// <summary>
    ///玩家下注(AKMsgAddBetResp)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_AddBetResp")] MsgIdsubGameAddBetResp = 6,
    /// <summary>
    ///玩家请求比牌(AKMsgCompareCardResp)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_CompareCardResp")] MsgIdsubGameCompareCardResp = 7,
    /// <summary>
    ///玩家比牌结果(AKMsgCompareCardRetResp)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_CompareRetResp")] MsgIdsubGameCompareRetResp = 8,
    /// <summary>
    ///玩家下注记录(AKMsgGameResult)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_GameResultResp")] MsgIdsubGameGameResultResp = 9,
    /// <summary>
    ///桌子状态(AKMsgTableState)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifyStateResp")] MsgIdsubGameNotifyStateResp = 10,
    /// <summary>
    ///通知超时(MsgCommonBool)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_TimeOutResp")] MsgIdsubGameTimeOutResp = 11,
    /// <summary>
    ///重新准备(MsgCommonBool)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_TimeOutReady")] MsgIdsubGameTimeOutReady = 12,
    /// <summary>
    ///准备返回(MsgCommonBool)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_TimeOutReadyResp")] MsgIdsubGameTimeOutReadyResp = 13,
    /// <summary>
    ///超时踢了游戏(MsgCommonBool)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_TimeOutKickResp")] MsgIdsubGameTimeOutKickResp = 14,
    /// <summary>
    //////////////////////////机器人消息///////////////////////
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifySystemCheatResp")] MsgIdsubGameNotifySystemCheatResp = 20,
    /// <summary>
    ///通知牌型
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifyCardTypeResp")] MsgIdsubGameNotifyCardTypeResp = 21,
    /// <summary>
    ///通知是否最大
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifyIsMaxResp")] MsgIdsubGameNotifyIsMaxResp = 22,
    /// <summary>
    ///是否剩2人
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifyRemainDoubleResp")] MsgIdsubGameNotifyRemainDoubleResp = 23,
    /// <summary>
    ///通知回合数
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifyRoundResp")] MsgIdsubGameNotifyRoundResp = 24,
    /// <summary>
    ///通知玩家行为
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifyLastActResp")] MsgIdsubGameNotifyLastActResp = 25,
  }

  #endregion

  #region Messages
  public sealed partial class AKMsgTableState : pb::IMessage<AKMsgTableState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AKMsgTableState> _parser = new pb::MessageParser<AKMsgTableState>(() => new AKMsgTableState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AKMsgTableState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TeenPattiAK47.TeenPattiAK47Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgTableState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgTableState(AKMsgTableState other) : this() {
      state_ = other.state_;
      outIme_ = other.outIme_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgTableState Clone() {
      return new AKMsgTableState(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private int state_;
    /// <summary>
    ///桌子状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "out_ime" field.</summary>
    public const int OutImeFieldNumber = 2;
    private int outIme_;
    /// <summary>
    ///剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OutIme {
      get { return outIme_; }
      set {
        outIme_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AKMsgTableState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AKMsgTableState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (OutIme != other.OutIme) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      if (OutIme != 0) hash ^= OutIme.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(State);
      }
      if (OutIme != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OutIme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(State);
      }
      if (OutIme != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OutIme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (OutIme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutIme);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AKMsgTableState other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.OutIme != 0) {
        OutIme = other.OutIme;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            State = input.ReadInt32();
            break;
          }
          case 16: {
            OutIme = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            State = input.ReadInt32();
            break;
          }
          case 16: {
            OutIme = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AKMsgHandCards : pb::IMessage<AKMsgHandCards>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AKMsgHandCards> _parser = new pb::MessageParser<AKMsgHandCards>(() => new AKMsgHandCards());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AKMsgHandCards> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TeenPattiAK47.TeenPattiAK47Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgHandCards() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgHandCards(AKMsgHandCards other) : this() {
      cardType_ = other.cardType_;
      cards_ = other.cards_.Clone();
      changeCards_ = other.changeCards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgHandCards Clone() {
      return new AKMsgHandCards(this);
    }

    /// <summary>Field number for the "card_type" field.</summary>
    public const int CardTypeFieldNumber = 1;
    private int cardType_;
    /// <summary>
    ///牌型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardType {
      get { return cardType_; }
      set {
        cardType_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_cards_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "change_cards" field.</summary>
    public const int ChangeCardsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_changeCards_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> changeCards_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///变动后的手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ChangeCards {
      get { return changeCards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AKMsgHandCards);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AKMsgHandCards other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardType != other.CardType) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if(!changeCards_.Equals(other.changeCards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardType != 0) hash ^= CardType.GetHashCode();
      hash ^= cards_.GetHashCode();
      hash ^= changeCards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CardType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardType);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      changeCards_.WriteTo(output, _repeated_changeCards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CardType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardType);
      }
      cards_.WriteTo(ref output, _repeated_cards_codec);
      changeCards_.WriteTo(ref output, _repeated_changeCards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardType);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      size += changeCards_.CalculateSize(_repeated_changeCards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AKMsgHandCards other) {
      if (other == null) {
        return;
      }
      if (other.CardType != 0) {
        CardType = other.CardType;
      }
      cards_.Add(other.cards_);
      changeCards_.Add(other.changeCards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CardType = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 26:
          case 24: {
            changeCards_.AddEntriesFrom(input, _repeated_changeCards_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CardType = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            cards_.AddEntriesFrom(ref input, _repeated_cards_codec);
            break;
          }
          case 26:
          case 24: {
            changeCards_.AddEntriesFrom(ref input, _repeated_changeCards_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AKMsgPlayerInfo : pb::IMessage<AKMsgPlayerInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AKMsgPlayerInfo> _parser = new pb::MessageParser<AKMsgPlayerInfo>(() => new AKMsgPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AKMsgPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TeenPattiAK47.TeenPattiAK47Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgPlayerInfo(AKMsgPlayerInfo other) : this() {
      chairId_ = other.chairId_;
      mingZhu_ = other.mingZhu_;
      playStatus_ = other.playStatus_;
      playerBet_ = other.playerBet_;
      lastBet_ = other.lastBet_;
      gold_ = other.gold_;
      winGold_ = other.winGold_;
      handlCards_ = other.handlCards_ != null ? other.handlCards_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgPlayerInfo Clone() {
      return new AKMsgPlayerInfo(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    /// <summary>
    ///玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "ming_zhu" field.</summary>
    public const int MingZhuFieldNumber = 2;
    private bool mingZhu_;
    /// <summary>
    ///明注状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MingZhu {
      get { return mingZhu_; }
      set {
        mingZhu_ = value;
      }
    }

    /// <summary>Field number for the "play_status" field.</summary>
    public const int PlayStatusFieldNumber = 3;
    private int playStatus_;
    /// <summary>
    ///玩家状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayStatus {
      get { return playStatus_; }
      set {
        playStatus_ = value;
      }
    }

    /// <summary>Field number for the "player_bet" field.</summary>
    public const int PlayerBetFieldNumber = 4;
    private long playerBet_;
    /// <summary>
    ///玩家投注总和
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerBet {
      get { return playerBet_; }
      set {
        playerBet_ = value;
      }
    }

    /// <summary>Field number for the "last_bet" field.</summary>
    public const int LastBetFieldNumber = 5;
    private long lastBet_;
    /// <summary>
    ///上次下注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastBet {
      get { return lastBet_; }
      set {
        lastBet_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 6;
    private long gold_;
    /// <summary>
    ///自己的金币，别人的是空
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "win_gold" field.</summary>
    public const int WinGoldFieldNumber = 7;
    private long winGold_;
    /// <summary>
    ///输赢分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WinGold {
      get { return winGold_; }
      set {
        winGold_ = value;
      }
    }

    /// <summary>Field number for the "handl_cards" field.</summary>
    public const int HandlCardsFieldNumber = 8;
    private global::TeenPattiAK47.AKMsgHandCards handlCards_;
    /// <summary>
    ///手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TeenPattiAK47.AKMsgHandCards HandlCards {
      get { return handlCards_; }
      set {
        handlCards_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AKMsgPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AKMsgPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if (MingZhu != other.MingZhu) return false;
      if (PlayStatus != other.PlayStatus) return false;
      if (PlayerBet != other.PlayerBet) return false;
      if (LastBet != other.LastBet) return false;
      if (Gold != other.Gold) return false;
      if (WinGold != other.WinGold) return false;
      if (!object.Equals(HandlCards, other.HandlCards)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (MingZhu != false) hash ^= MingZhu.GetHashCode();
      if (PlayStatus != 0) hash ^= PlayStatus.GetHashCode();
      if (PlayerBet != 0L) hash ^= PlayerBet.GetHashCode();
      if (LastBet != 0L) hash ^= LastBet.GetHashCode();
      if (Gold != 0L) hash ^= Gold.GetHashCode();
      if (WinGold != 0L) hash ^= WinGold.GetHashCode();
      if (handlCards_ != null) hash ^= HandlCards.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (MingZhu != false) {
        output.WriteRawTag(16);
        output.WriteBool(MingZhu);
      }
      if (PlayStatus != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlayStatus);
      }
      if (PlayerBet != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(PlayerBet);
      }
      if (LastBet != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(LastBet);
      }
      if (Gold != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Gold);
      }
      if (WinGold != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(WinGold);
      }
      if (handlCards_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(HandlCards);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (MingZhu != false) {
        output.WriteRawTag(16);
        output.WriteBool(MingZhu);
      }
      if (PlayStatus != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlayStatus);
      }
      if (PlayerBet != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(PlayerBet);
      }
      if (LastBet != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(LastBet);
      }
      if (Gold != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Gold);
      }
      if (WinGold != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(WinGold);
      }
      if (handlCards_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(HandlCards);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (MingZhu != false) {
        size += 1 + 1;
      }
      if (PlayStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayStatus);
      }
      if (PlayerBet != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerBet);
      }
      if (LastBet != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastBet);
      }
      if (Gold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
      }
      if (WinGold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WinGold);
      }
      if (handlCards_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HandlCards);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AKMsgPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.MingZhu != false) {
        MingZhu = other.MingZhu;
      }
      if (other.PlayStatus != 0) {
        PlayStatus = other.PlayStatus;
      }
      if (other.PlayerBet != 0L) {
        PlayerBet = other.PlayerBet;
      }
      if (other.LastBet != 0L) {
        LastBet = other.LastBet;
      }
      if (other.Gold != 0L) {
        Gold = other.Gold;
      }
      if (other.WinGold != 0L) {
        WinGold = other.WinGold;
      }
      if (other.handlCards_ != null) {
        if (handlCards_ == null) {
          HandlCards = new global::TeenPattiAK47.AKMsgHandCards();
        }
        HandlCards.MergeFrom(other.HandlCards);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            MingZhu = input.ReadBool();
            break;
          }
          case 24: {
            PlayStatus = input.ReadInt32();
            break;
          }
          case 32: {
            PlayerBet = input.ReadInt64();
            break;
          }
          case 40: {
            LastBet = input.ReadInt64();
            break;
          }
          case 48: {
            Gold = input.ReadInt64();
            break;
          }
          case 56: {
            WinGold = input.ReadInt64();
            break;
          }
          case 66: {
            if (handlCards_ == null) {
              HandlCards = new global::TeenPattiAK47.AKMsgHandCards();
            }
            input.ReadMessage(HandlCards);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            MingZhu = input.ReadBool();
            break;
          }
          case 24: {
            PlayStatus = input.ReadInt32();
            break;
          }
          case 32: {
            PlayerBet = input.ReadInt64();
            break;
          }
          case 40: {
            LastBet = input.ReadInt64();
            break;
          }
          case 48: {
            Gold = input.ReadInt64();
            break;
          }
          case 56: {
            WinGold = input.ReadInt64();
            break;
          }
          case 66: {
            if (handlCards_ == null) {
              HandlCards = new global::TeenPattiAK47.AKMsgHandCards();
            }
            input.ReadMessage(HandlCards);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///场景消息
  /// </summary>
  public sealed partial class AKMsgSceneInfo : pb::IMessage<AKMsgSceneInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AKMsgSceneInfo> _parser = new pb::MessageParser<AKMsgSceneInfo>(() => new AKMsgSceneInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AKMsgSceneInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TeenPattiAK47.TeenPattiAK47Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgSceneInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgSceneInfo(AKMsgSceneInfo other) : this() {
      maxScore_ = other.maxScore_;
      tableMaxScore_ = other.tableMaxScore_;
      cellScore_ = other.cellScore_;
      curTimes_ = other.curTimes_;
      tableState_ = other.tableState_;
      totalBetScore_ = other.totalBetScore_;
      tax_ = other.tax_;
      bankerChairId_ = other.bankerChairId_;
      curChairId_ = other.curChairId_;
      curChairAct_ = other.curChairAct_;
      outTime_ = other.outTime_;
      totalTime_ = other.totalTime_;
      compareUser_ = other.compareUser_;
      compareWin_ = other.compareWin_;
      playerInfos_ = other.playerInfos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgSceneInfo Clone() {
      return new AKMsgSceneInfo(this);
    }

    /// <summary>Field number for the "max_score" field.</summary>
    public const int MaxScoreFieldNumber = 1;
    private long maxScore_;
    /// <summary>
    ///最大下注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxScore {
      get { return maxScore_; }
      set {
        maxScore_ = value;
      }
    }

    /// <summary>Field number for the "table_max_score" field.</summary>
    public const int TableMaxScoreFieldNumber = 2;
    private long tableMaxScore_;
    /// <summary>
    ///最大下注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TableMaxScore {
      get { return tableMaxScore_; }
      set {
        tableMaxScore_ = value;
      }
    }

    /// <summary>Field number for the "cell_score" field.</summary>
    public const int CellScoreFieldNumber = 3;
    private long cellScore_;
    /// <summary>
    ///底分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CellScore {
      get { return cellScore_; }
      set {
        cellScore_ = value;
      }
    }

    /// <summary>Field number for the "cur_times" field.</summary>
    public const int CurTimesFieldNumber = 4;
    private int curTimes_;
    /// <summary>
    ///当前倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurTimes {
      get { return curTimes_; }
      set {
        curTimes_ = value;
      }
    }

    /// <summary>Field number for the "table_state" field.</summary>
    public const int TableStateFieldNumber = 5;
    private int tableState_;
    /// <summary>
    ///桌子状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TableState {
      get { return tableState_; }
      set {
        tableState_ = value;
      }
    }

    /// <summary>Field number for the "total_bet_score" field.</summary>
    public const int TotalBetScoreFieldNumber = 6;
    private long totalBetScore_;
    /// <summary>
    ///桌内总下注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalBetScore {
      get { return totalBetScore_; }
      set {
        totalBetScore_ = value;
      }
    }

    /// <summary>Field number for the "tax" field.</summary>
    public const int TaxFieldNumber = 7;
    private int tax_;
    /// <summary>
    ///抽水
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tax {
      get { return tax_; }
      set {
        tax_ = value;
      }
    }

    /// <summary>Field number for the "banker_chair_id" field.</summary>
    public const int BankerChairIdFieldNumber = 8;
    private int bankerChairId_;
    /// <summary>
    ///庄家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BankerChairId {
      get { return bankerChairId_; }
      set {
        bankerChairId_ = value;
      }
    }

    /// <summary>Field number for the "cur_chair_id" field.</summary>
    public const int CurChairIdFieldNumber = 9;
    private int curChairId_;
    /// <summary>
    ///当前操作椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurChairId {
      get { return curChairId_; }
      set {
        curChairId_ = value;
      }
    }

    /// <summary>Field number for the "cur_chair_act" field.</summary>
    public const int CurChairActFieldNumber = 10;
    private int curChairAct_;
    /// <summary>
    ///当前玩家的操作码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurChairAct {
      get { return curChairAct_; }
      set {
        curChairAct_ = value;
      }
    }

    /// <summary>Field number for the "out_time" field.</summary>
    public const int OutTimeFieldNumber = 11;
    private int outTime_;
    /// <summary>
    ///当前状态剩余超时时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OutTime {
      get { return outTime_; }
      set {
        outTime_ = value;
      }
    }

    /// <summary>Field number for the "total_time" field.</summary>
    public const int TotalTimeFieldNumber = 12;
    private int totalTime_;
    /// <summary>
    ///当前状态总时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalTime {
      get { return totalTime_; }
      set {
        totalTime_ = value;
      }
    }

    /// <summary>Field number for the "compare_user" field.</summary>
    public const int CompareUserFieldNumber = 13;
    private int compareUser_;
    /// <summary>
    ///比牌发起玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompareUser {
      get { return compareUser_; }
      set {
        compareUser_ = value;
      }
    }

    /// <summary>Field number for the "compare_win" field.</summary>
    public const int CompareWinFieldNumber = 14;
    private int compareWin_;
    /// <summary>
    ///比牌赢家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompareWin {
      get { return compareWin_; }
      set {
        compareWin_ = value;
      }
    }

    /// <summary>Field number for the "player_infos" field.</summary>
    public const int PlayerInfosFieldNumber = 15;
    private static readonly pb::FieldCodec<global::TeenPattiAK47.AKMsgPlayerInfo> _repeated_playerInfos_codec
        = pb::FieldCodec.ForMessage(122, global::TeenPattiAK47.AKMsgPlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::TeenPattiAK47.AKMsgPlayerInfo> playerInfos_ = new pbc::RepeatedField<global::TeenPattiAK47.AKMsgPlayerInfo>();
    /// <summary>
    ///玩家状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TeenPattiAK47.AKMsgPlayerInfo> PlayerInfos {
      get { return playerInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AKMsgSceneInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AKMsgSceneInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxScore != other.MaxScore) return false;
      if (TableMaxScore != other.TableMaxScore) return false;
      if (CellScore != other.CellScore) return false;
      if (CurTimes != other.CurTimes) return false;
      if (TableState != other.TableState) return false;
      if (TotalBetScore != other.TotalBetScore) return false;
      if (Tax != other.Tax) return false;
      if (BankerChairId != other.BankerChairId) return false;
      if (CurChairId != other.CurChairId) return false;
      if (CurChairAct != other.CurChairAct) return false;
      if (OutTime != other.OutTime) return false;
      if (TotalTime != other.TotalTime) return false;
      if (CompareUser != other.CompareUser) return false;
      if (CompareWin != other.CompareWin) return false;
      if(!playerInfos_.Equals(other.playerInfos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxScore != 0L) hash ^= MaxScore.GetHashCode();
      if (TableMaxScore != 0L) hash ^= TableMaxScore.GetHashCode();
      if (CellScore != 0L) hash ^= CellScore.GetHashCode();
      if (CurTimes != 0) hash ^= CurTimes.GetHashCode();
      if (TableState != 0) hash ^= TableState.GetHashCode();
      if (TotalBetScore != 0L) hash ^= TotalBetScore.GetHashCode();
      if (Tax != 0) hash ^= Tax.GetHashCode();
      if (BankerChairId != 0) hash ^= BankerChairId.GetHashCode();
      if (CurChairId != 0) hash ^= CurChairId.GetHashCode();
      if (CurChairAct != 0) hash ^= CurChairAct.GetHashCode();
      if (OutTime != 0) hash ^= OutTime.GetHashCode();
      if (TotalTime != 0) hash ^= TotalTime.GetHashCode();
      if (CompareUser != 0) hash ^= CompareUser.GetHashCode();
      if (CompareWin != 0) hash ^= CompareWin.GetHashCode();
      hash ^= playerInfos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MaxScore != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MaxScore);
      }
      if (TableMaxScore != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TableMaxScore);
      }
      if (CellScore != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CellScore);
      }
      if (CurTimes != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CurTimes);
      }
      if (TableState != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TableState);
      }
      if (TotalBetScore != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TotalBetScore);
      }
      if (Tax != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Tax);
      }
      if (BankerChairId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(BankerChairId);
      }
      if (CurChairId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CurChairId);
      }
      if (CurChairAct != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(CurChairAct);
      }
      if (OutTime != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(OutTime);
      }
      if (TotalTime != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(TotalTime);
      }
      if (CompareUser != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(CompareUser);
      }
      if (CompareWin != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(CompareWin);
      }
      playerInfos_.WriteTo(output, _repeated_playerInfos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MaxScore != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MaxScore);
      }
      if (TableMaxScore != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TableMaxScore);
      }
      if (CellScore != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CellScore);
      }
      if (CurTimes != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CurTimes);
      }
      if (TableState != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TableState);
      }
      if (TotalBetScore != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TotalBetScore);
      }
      if (Tax != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Tax);
      }
      if (BankerChairId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(BankerChairId);
      }
      if (CurChairId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CurChairId);
      }
      if (CurChairAct != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(CurChairAct);
      }
      if (OutTime != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(OutTime);
      }
      if (TotalTime != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(TotalTime);
      }
      if (CompareUser != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(CompareUser);
      }
      if (CompareWin != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(CompareWin);
      }
      playerInfos_.WriteTo(ref output, _repeated_playerInfos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxScore);
      }
      if (TableMaxScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TableMaxScore);
      }
      if (CellScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CellScore);
      }
      if (CurTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurTimes);
      }
      if (TableState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableState);
      }
      if (TotalBetScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalBetScore);
      }
      if (Tax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tax);
      }
      if (BankerChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BankerChairId);
      }
      if (CurChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurChairId);
      }
      if (CurChairAct != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurChairAct);
      }
      if (OutTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutTime);
      }
      if (TotalTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalTime);
      }
      if (CompareUser != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompareUser);
      }
      if (CompareWin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompareWin);
      }
      size += playerInfos_.CalculateSize(_repeated_playerInfos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AKMsgSceneInfo other) {
      if (other == null) {
        return;
      }
      if (other.MaxScore != 0L) {
        MaxScore = other.MaxScore;
      }
      if (other.TableMaxScore != 0L) {
        TableMaxScore = other.TableMaxScore;
      }
      if (other.CellScore != 0L) {
        CellScore = other.CellScore;
      }
      if (other.CurTimes != 0) {
        CurTimes = other.CurTimes;
      }
      if (other.TableState != 0) {
        TableState = other.TableState;
      }
      if (other.TotalBetScore != 0L) {
        TotalBetScore = other.TotalBetScore;
      }
      if (other.Tax != 0) {
        Tax = other.Tax;
      }
      if (other.BankerChairId != 0) {
        BankerChairId = other.BankerChairId;
      }
      if (other.CurChairId != 0) {
        CurChairId = other.CurChairId;
      }
      if (other.CurChairAct != 0) {
        CurChairAct = other.CurChairAct;
      }
      if (other.OutTime != 0) {
        OutTime = other.OutTime;
      }
      if (other.TotalTime != 0) {
        TotalTime = other.TotalTime;
      }
      if (other.CompareUser != 0) {
        CompareUser = other.CompareUser;
      }
      if (other.CompareWin != 0) {
        CompareWin = other.CompareWin;
      }
      playerInfos_.Add(other.playerInfos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MaxScore = input.ReadInt64();
            break;
          }
          case 16: {
            TableMaxScore = input.ReadInt64();
            break;
          }
          case 24: {
            CellScore = input.ReadInt64();
            break;
          }
          case 32: {
            CurTimes = input.ReadInt32();
            break;
          }
          case 40: {
            TableState = input.ReadInt32();
            break;
          }
          case 48: {
            TotalBetScore = input.ReadInt64();
            break;
          }
          case 56: {
            Tax = input.ReadInt32();
            break;
          }
          case 64: {
            BankerChairId = input.ReadInt32();
            break;
          }
          case 72: {
            CurChairId = input.ReadInt32();
            break;
          }
          case 80: {
            CurChairAct = input.ReadInt32();
            break;
          }
          case 88: {
            OutTime = input.ReadInt32();
            break;
          }
          case 96: {
            TotalTime = input.ReadInt32();
            break;
          }
          case 104: {
            CompareUser = input.ReadInt32();
            break;
          }
          case 112: {
            CompareWin = input.ReadInt32();
            break;
          }
          case 122: {
            playerInfos_.AddEntriesFrom(input, _repeated_playerInfos_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MaxScore = input.ReadInt64();
            break;
          }
          case 16: {
            TableMaxScore = input.ReadInt64();
            break;
          }
          case 24: {
            CellScore = input.ReadInt64();
            break;
          }
          case 32: {
            CurTimes = input.ReadInt32();
            break;
          }
          case 40: {
            TableState = input.ReadInt32();
            break;
          }
          case 48: {
            TotalBetScore = input.ReadInt64();
            break;
          }
          case 56: {
            Tax = input.ReadInt32();
            break;
          }
          case 64: {
            BankerChairId = input.ReadInt32();
            break;
          }
          case 72: {
            CurChairId = input.ReadInt32();
            break;
          }
          case 80: {
            CurChairAct = input.ReadInt32();
            break;
          }
          case 88: {
            OutTime = input.ReadInt32();
            break;
          }
          case 96: {
            TotalTime = input.ReadInt32();
            break;
          }
          case 104: {
            CompareUser = input.ReadInt32();
            break;
          }
          case 112: {
            CompareWin = input.ReadInt32();
            break;
          }
          case 122: {
            playerInfos_.AddEntriesFrom(ref input, _repeated_playerInfos_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///游戏开始
  /// </summary>
  public sealed partial class AKMsgGameStartResp : pb::IMessage<AKMsgGameStartResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AKMsgGameStartResp> _parser = new pb::MessageParser<AKMsgGameStartResp>(() => new AKMsgGameStartResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AKMsgGameStartResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TeenPattiAK47.TeenPattiAK47Reflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgGameStartResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgGameStartResp(AKMsgGameStartResp other) : this() {
      curChairId_ = other.curChairId_;
      curTimes_ = other.curTimes_;
      bankerChairId_ = other.bankerChairId_;
      maxScore_ = other.maxScore_;
      maxBlind_ = other.maxBlind_;
      cellScore_ = other.cellScore_;
      tableMaxScore_ = other.tableMaxScore_;
      playIndex_ = other.playIndex_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgGameStartResp Clone() {
      return new AKMsgGameStartResp(this);
    }

    /// <summary>Field number for the "cur_chair_id" field.</summary>
    public const int CurChairIdFieldNumber = 1;
    private int curChairId_;
    /// <summary>
    ///操作玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurChairId {
      get { return curChairId_; }
      set {
        curChairId_ = value;
      }
    }

    /// <summary>Field number for the "cur_times" field.</summary>
    public const int CurTimesFieldNumber = 2;
    private int curTimes_;
    /// <summary>
    ///当前倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurTimes {
      get { return curTimes_; }
      set {
        curTimes_ = value;
      }
    }

    /// <summary>Field number for the "banker_chair_id" field.</summary>
    public const int BankerChairIdFieldNumber = 3;
    private int bankerChairId_;
    /// <summary>
    ///庄家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BankerChairId {
      get { return bankerChairId_; }
      set {
        bankerChairId_ = value;
      }
    }

    /// <summary>Field number for the "max_score" field.</summary>
    public const int MaxScoreFieldNumber = 4;
    private long maxScore_;
    /// <summary>
    ///最大下注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxScore {
      get { return maxScore_; }
      set {
        maxScore_ = value;
      }
    }

    /// <summary>Field number for the "max_blind" field.</summary>
    public const int MaxBlindFieldNumber = 5;
    private long maxBlind_;
    /// <summary>
    ///盲投次数限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxBlind {
      get { return maxBlind_; }
      set {
        maxBlind_ = value;
      }
    }

    /// <summary>Field number for the "cell_score" field.</summary>
    public const int CellScoreFieldNumber = 6;
    private long cellScore_;
    /// <summary>
    ///底分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CellScore {
      get { return cellScore_; }
      set {
        cellScore_ = value;
      }
    }

    /// <summary>Field number for the "table_max_score" field.</summary>
    public const int TableMaxScoreFieldNumber = 7;
    private long tableMaxScore_;
    /// <summary>
    ///桌内最大下注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TableMaxScore {
      get { return tableMaxScore_; }
      set {
        tableMaxScore_ = value;
      }
    }

    /// <summary>Field number for the "play_index" field.</summary>
    public const int PlayIndexFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_playIndex_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> playIndex_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///在玩下标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PlayIndex {
      get { return playIndex_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AKMsgGameStartResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AKMsgGameStartResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurChairId != other.CurChairId) return false;
      if (CurTimes != other.CurTimes) return false;
      if (BankerChairId != other.BankerChairId) return false;
      if (MaxScore != other.MaxScore) return false;
      if (MaxBlind != other.MaxBlind) return false;
      if (CellScore != other.CellScore) return false;
      if (TableMaxScore != other.TableMaxScore) return false;
      if(!playIndex_.Equals(other.playIndex_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurChairId != 0) hash ^= CurChairId.GetHashCode();
      if (CurTimes != 0) hash ^= CurTimes.GetHashCode();
      if (BankerChairId != 0) hash ^= BankerChairId.GetHashCode();
      if (MaxScore != 0L) hash ^= MaxScore.GetHashCode();
      if (MaxBlind != 0L) hash ^= MaxBlind.GetHashCode();
      if (CellScore != 0L) hash ^= CellScore.GetHashCode();
      if (TableMaxScore != 0L) hash ^= TableMaxScore.GetHashCode();
      hash ^= playIndex_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CurChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurChairId);
      }
      if (CurTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurTimes);
      }
      if (BankerChairId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BankerChairId);
      }
      if (MaxScore != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(MaxScore);
      }
      if (MaxBlind != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(MaxBlind);
      }
      if (CellScore != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(CellScore);
      }
      if (TableMaxScore != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(TableMaxScore);
      }
      playIndex_.WriteTo(output, _repeated_playIndex_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CurChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurChairId);
      }
      if (CurTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurTimes);
      }
      if (BankerChairId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BankerChairId);
      }
      if (MaxScore != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(MaxScore);
      }
      if (MaxBlind != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(MaxBlind);
      }
      if (CellScore != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(CellScore);
      }
      if (TableMaxScore != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(TableMaxScore);
      }
      playIndex_.WriteTo(ref output, _repeated_playIndex_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurChairId);
      }
      if (CurTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurTimes);
      }
      if (BankerChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BankerChairId);
      }
      if (MaxScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxScore);
      }
      if (MaxBlind != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxBlind);
      }
      if (CellScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CellScore);
      }
      if (TableMaxScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TableMaxScore);
      }
      size += playIndex_.CalculateSize(_repeated_playIndex_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AKMsgGameStartResp other) {
      if (other == null) {
        return;
      }
      if (other.CurChairId != 0) {
        CurChairId = other.CurChairId;
      }
      if (other.CurTimes != 0) {
        CurTimes = other.CurTimes;
      }
      if (other.BankerChairId != 0) {
        BankerChairId = other.BankerChairId;
      }
      if (other.MaxScore != 0L) {
        MaxScore = other.MaxScore;
      }
      if (other.MaxBlind != 0L) {
        MaxBlind = other.MaxBlind;
      }
      if (other.CellScore != 0L) {
        CellScore = other.CellScore;
      }
      if (other.TableMaxScore != 0L) {
        TableMaxScore = other.TableMaxScore;
      }
      playIndex_.Add(other.playIndex_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurChairId = input.ReadInt32();
            break;
          }
          case 16: {
            CurTimes = input.ReadInt32();
            break;
          }
          case 24: {
            BankerChairId = input.ReadInt32();
            break;
          }
          case 32: {
            MaxScore = input.ReadInt64();
            break;
          }
          case 40: {
            MaxBlind = input.ReadInt64();
            break;
          }
          case 48: {
            CellScore = input.ReadInt64();
            break;
          }
          case 56: {
            TableMaxScore = input.ReadInt64();
            break;
          }
          case 66:
          case 64: {
            playIndex_.AddEntriesFrom(input, _repeated_playIndex_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CurChairId = input.ReadInt32();
            break;
          }
          case 16: {
            CurTimes = input.ReadInt32();
            break;
          }
          case 24: {
            BankerChairId = input.ReadInt32();
            break;
          }
          case 32: {
            MaxScore = input.ReadInt64();
            break;
          }
          case 40: {
            MaxBlind = input.ReadInt64();
            break;
          }
          case 48: {
            CellScore = input.ReadInt64();
            break;
          }
          case 56: {
            TableMaxScore = input.ReadInt64();
            break;
          }
          case 66:
          case 64: {
            playIndex_.AddEntriesFrom(ref input, _repeated_playIndex_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///游戏开始
  /// </summary>
  public sealed partial class AKMsgNotifyActionResp : pb::IMessage<AKMsgNotifyActionResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AKMsgNotifyActionResp> _parser = new pb::MessageParser<AKMsgNotifyActionResp>(() => new AKMsgNotifyActionResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AKMsgNotifyActionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TeenPattiAK47.TeenPattiAK47Reflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgNotifyActionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgNotifyActionResp(AKMsgNotifyActionResp other) : this() {
      curChairId_ = other.curChairId_;
      curTimes_ = other.curTimes_;
      currentAct_ = other.currentAct_;
      operTime_ = other.operTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgNotifyActionResp Clone() {
      return new AKMsgNotifyActionResp(this);
    }

    /// <summary>Field number for the "cur_chair_id" field.</summary>
    public const int CurChairIdFieldNumber = 1;
    private int curChairId_;
    /// <summary>
    ///操作玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurChairId {
      get { return curChairId_; }
      set {
        curChairId_ = value;
      }
    }

    /// <summary>Field number for the "cur_times" field.</summary>
    public const int CurTimesFieldNumber = 2;
    private int curTimes_;
    /// <summary>
    ///当前倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurTimes {
      get { return curTimes_; }
      set {
        curTimes_ = value;
      }
    }

    /// <summary>Field number for the "current_act" field.</summary>
    public const int CurrentActFieldNumber = 3;
    private int currentAct_;
    /// <summary>
    ///当前操作码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentAct {
      get { return currentAct_; }
      set {
        currentAct_ = value;
      }
    }

    /// <summary>Field number for the "oper_time" field.</summary>
    public const int OperTimeFieldNumber = 4;
    private int operTime_;
    /// <summary>
    ///操作时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OperTime {
      get { return operTime_; }
      set {
        operTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AKMsgNotifyActionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AKMsgNotifyActionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurChairId != other.CurChairId) return false;
      if (CurTimes != other.CurTimes) return false;
      if (CurrentAct != other.CurrentAct) return false;
      if (OperTime != other.OperTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurChairId != 0) hash ^= CurChairId.GetHashCode();
      if (CurTimes != 0) hash ^= CurTimes.GetHashCode();
      if (CurrentAct != 0) hash ^= CurrentAct.GetHashCode();
      if (OperTime != 0) hash ^= OperTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CurChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurChairId);
      }
      if (CurTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurTimes);
      }
      if (CurrentAct != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurrentAct);
      }
      if (OperTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OperTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CurChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurChairId);
      }
      if (CurTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurTimes);
      }
      if (CurrentAct != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurrentAct);
      }
      if (OperTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OperTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurChairId);
      }
      if (CurTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurTimes);
      }
      if (CurrentAct != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentAct);
      }
      if (OperTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OperTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AKMsgNotifyActionResp other) {
      if (other == null) {
        return;
      }
      if (other.CurChairId != 0) {
        CurChairId = other.CurChairId;
      }
      if (other.CurTimes != 0) {
        CurTimes = other.CurTimes;
      }
      if (other.CurrentAct != 0) {
        CurrentAct = other.CurrentAct;
      }
      if (other.OperTime != 0) {
        OperTime = other.OperTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurChairId = input.ReadInt32();
            break;
          }
          case 16: {
            CurTimes = input.ReadInt32();
            break;
          }
          case 24: {
            CurrentAct = input.ReadInt32();
            break;
          }
          case 32: {
            OperTime = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CurChairId = input.ReadInt32();
            break;
          }
          case 16: {
            CurTimes = input.ReadInt32();
            break;
          }
          case 24: {
            CurrentAct = input.ReadInt32();
            break;
          }
          case 32: {
            OperTime = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家操作
  /// </summary>
  public sealed partial class AKMsgAction : pb::IMessage<AKMsgAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AKMsgAction> _parser = new pb::MessageParser<AKMsgAction>(() => new AKMsgAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AKMsgAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TeenPattiAK47.TeenPattiAK47Reflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgAction(AKMsgAction other) : this() {
      act_ = other.act_;
      betScore_ = other.betScore_;
      compareUser_ = other.compareUser_;
      isOk_ = other.isOk_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgAction Clone() {
      return new AKMsgAction(this);
    }

    /// <summary>Field number for the "act" field.</summary>
    public const int ActFieldNumber = 1;
    private int act_;
    /// <summary>
    ///操作标示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Act {
      get { return act_; }
      set {
        act_ = value;
      }
    }

    /// <summary>Field number for the "bet_score" field.</summary>
    public const int BetScoreFieldNumber = 2;
    private long betScore_;
    /// <summary>
    ///下注金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BetScore {
      get { return betScore_; }
      set {
        betScore_ = value;
      }
    }

    /// <summary>Field number for the "compare_user" field.</summary>
    public const int CompareUserFieldNumber = 3;
    private long compareUser_;
    /// <summary>
    ///比牌椅子id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CompareUser {
      get { return compareUser_; }
      set {
        compareUser_ = value;
      }
    }

    /// <summary>Field number for the "is_ok" field.</summary>
    public const int IsOkFieldNumber = 4;
    private bool isOk_;
    /// <summary>
    ///是否同意比牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOk {
      get { return isOk_; }
      set {
        isOk_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AKMsgAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AKMsgAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Act != other.Act) return false;
      if (BetScore != other.BetScore) return false;
      if (CompareUser != other.CompareUser) return false;
      if (IsOk != other.IsOk) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Act != 0) hash ^= Act.GetHashCode();
      if (BetScore != 0L) hash ^= BetScore.GetHashCode();
      if (CompareUser != 0L) hash ^= CompareUser.GetHashCode();
      if (IsOk != false) hash ^= IsOk.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Act != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Act);
      }
      if (BetScore != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(BetScore);
      }
      if (CompareUser != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CompareUser);
      }
      if (IsOk != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsOk);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Act != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Act);
      }
      if (BetScore != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(BetScore);
      }
      if (CompareUser != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CompareUser);
      }
      if (IsOk != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsOk);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Act != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Act);
      }
      if (BetScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BetScore);
      }
      if (CompareUser != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CompareUser);
      }
      if (IsOk != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AKMsgAction other) {
      if (other == null) {
        return;
      }
      if (other.Act != 0) {
        Act = other.Act;
      }
      if (other.BetScore != 0L) {
        BetScore = other.BetScore;
      }
      if (other.CompareUser != 0L) {
        CompareUser = other.CompareUser;
      }
      if (other.IsOk != false) {
        IsOk = other.IsOk;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Act = input.ReadInt32();
            break;
          }
          case 16: {
            BetScore = input.ReadInt64();
            break;
          }
          case 24: {
            CompareUser = input.ReadInt64();
            break;
          }
          case 32: {
            IsOk = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Act = input.ReadInt32();
            break;
          }
          case 16: {
            BetScore = input.ReadInt64();
            break;
          }
          case 24: {
            CompareUser = input.ReadInt64();
            break;
          }
          case 32: {
            IsOk = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家弃牌返回
  /// </summary>
  public sealed partial class AKMsgGiveUpResp : pb::IMessage<AKMsgGiveUpResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AKMsgGiveUpResp> _parser = new pb::MessageParser<AKMsgGiveUpResp>(() => new AKMsgGiveUpResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AKMsgGiveUpResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TeenPattiAK47.TeenPattiAK47Reflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgGiveUpResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgGiveUpResp(AKMsgGiveUpResp other) : this() {
      chairId_ = other.chairId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgGiveUpResp Clone() {
      return new AKMsgGiveUpResp(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    /// <summary>
    ///玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AKMsgGiveUpResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AKMsgGiveUpResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AKMsgGiveUpResp other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家看牌
  /// </summary>
  public sealed partial class AKMsgLookCardResp : pb::IMessage<AKMsgLookCardResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AKMsgLookCardResp> _parser = new pb::MessageParser<AKMsgLookCardResp>(() => new AKMsgLookCardResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AKMsgLookCardResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TeenPattiAK47.TeenPattiAK47Reflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgLookCardResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgLookCardResp(AKMsgLookCardResp other) : this() {
      chairId_ = other.chairId_;
      curChairId_ = other.curChairId_;
      newAct_ = other.newAct_;
      handlCards_ = other.handlCards_ != null ? other.handlCards_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgLookCardResp Clone() {
      return new AKMsgLookCardResp(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    /// <summary>
    ///玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "cur_chair_id" field.</summary>
    public const int CurChairIdFieldNumber = 2;
    private int curChairId_;
    /// <summary>
    ///玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurChairId {
      get { return curChairId_; }
      set {
        curChairId_ = value;
      }
    }

    /// <summary>Field number for the "new_act" field.</summary>
    public const int NewActFieldNumber = 3;
    private int newAct_;
    /// <summary>
    ///最新操作码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewAct {
      get { return newAct_; }
      set {
        newAct_ = value;
      }
    }

    /// <summary>Field number for the "handl_cards" field.</summary>
    public const int HandlCardsFieldNumber = 4;
    private global::TeenPattiAK47.AKMsgHandCards handlCards_;
    /// <summary>
    ///手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TeenPattiAK47.AKMsgHandCards HandlCards {
      get { return handlCards_; }
      set {
        handlCards_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AKMsgLookCardResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AKMsgLookCardResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if (CurChairId != other.CurChairId) return false;
      if (NewAct != other.NewAct) return false;
      if (!object.Equals(HandlCards, other.HandlCards)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (CurChairId != 0) hash ^= CurChairId.GetHashCode();
      if (NewAct != 0) hash ^= NewAct.GetHashCode();
      if (handlCards_ != null) hash ^= HandlCards.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (CurChairId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurChairId);
      }
      if (NewAct != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NewAct);
      }
      if (handlCards_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(HandlCards);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (CurChairId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurChairId);
      }
      if (NewAct != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NewAct);
      }
      if (handlCards_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(HandlCards);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (CurChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurChairId);
      }
      if (NewAct != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewAct);
      }
      if (handlCards_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HandlCards);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AKMsgLookCardResp other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.CurChairId != 0) {
        CurChairId = other.CurChairId;
      }
      if (other.NewAct != 0) {
        NewAct = other.NewAct;
      }
      if (other.handlCards_ != null) {
        if (handlCards_ == null) {
          HandlCards = new global::TeenPattiAK47.AKMsgHandCards();
        }
        HandlCards.MergeFrom(other.HandlCards);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            CurChairId = input.ReadInt32();
            break;
          }
          case 24: {
            NewAct = input.ReadInt32();
            break;
          }
          case 34: {
            if (handlCards_ == null) {
              HandlCards = new global::TeenPattiAK47.AKMsgHandCards();
            }
            input.ReadMessage(HandlCards);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            CurChairId = input.ReadInt32();
            break;
          }
          case 24: {
            NewAct = input.ReadInt32();
            break;
          }
          case 34: {
            if (handlCards_ == null) {
              HandlCards = new global::TeenPattiAK47.AKMsgHandCards();
            }
            input.ReadMessage(HandlCards);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AKMsgAddBetResp : pb::IMessage<AKMsgAddBetResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AKMsgAddBetResp> _parser = new pb::MessageParser<AKMsgAddBetResp>(() => new AKMsgAddBetResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AKMsgAddBetResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TeenPattiAK47.TeenPattiAK47Reflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgAddBetResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgAddBetResp(AKMsgAddBetResp other) : this() {
      addChairId_ = other.addChairId_;
      addScore_ = other.addScore_;
      betType_ = other.betType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgAddBetResp Clone() {
      return new AKMsgAddBetResp(this);
    }

    /// <summary>Field number for the "add_chair_id" field.</summary>
    public const int AddChairIdFieldNumber = 1;
    private int addChairId_;
    /// <summary>
    ///下注玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddChairId {
      get { return addChairId_; }
      set {
        addChairId_ = value;
      }
    }

    /// <summary>Field number for the "add_score" field.</summary>
    public const int AddScoreFieldNumber = 2;
    private long addScore_;
    /// <summary>
    ///下注金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AddScore {
      get { return addScore_; }
      set {
        addScore_ = value;
      }
    }

    /// <summary>Field number for the "bet_type" field.</summary>
    public const int BetTypeFieldNumber = 3;
    private long betType_;
    /// <summary>
    ///下注行为类型  EAKGameAction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BetType {
      get { return betType_; }
      set {
        betType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AKMsgAddBetResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AKMsgAddBetResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AddChairId != other.AddChairId) return false;
      if (AddScore != other.AddScore) return false;
      if (BetType != other.BetType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AddChairId != 0) hash ^= AddChairId.GetHashCode();
      if (AddScore != 0L) hash ^= AddScore.GetHashCode();
      if (BetType != 0L) hash ^= BetType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AddChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AddChairId);
      }
      if (AddScore != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AddScore);
      }
      if (BetType != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BetType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AddChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AddChairId);
      }
      if (AddScore != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AddScore);
      }
      if (BetType != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BetType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AddChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddChairId);
      }
      if (AddScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AddScore);
      }
      if (BetType != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BetType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AKMsgAddBetResp other) {
      if (other == null) {
        return;
      }
      if (other.AddChairId != 0) {
        AddChairId = other.AddChairId;
      }
      if (other.AddScore != 0L) {
        AddScore = other.AddScore;
      }
      if (other.BetType != 0L) {
        BetType = other.BetType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AddChairId = input.ReadInt32();
            break;
          }
          case 16: {
            AddScore = input.ReadInt64();
            break;
          }
          case 24: {
            BetType = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AddChairId = input.ReadInt32();
            break;
          }
          case 16: {
            AddScore = input.ReadInt64();
            break;
          }
          case 24: {
            BetType = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家请求比牌
  /// </summary>
  public sealed partial class AKMsgCompareCardResp : pb::IMessage<AKMsgCompareCardResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AKMsgCompareCardResp> _parser = new pb::MessageParser<AKMsgCompareCardResp>(() => new AKMsgCompareCardResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AKMsgCompareCardResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TeenPattiAK47.TeenPattiAK47Reflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgCompareCardResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgCompareCardResp(AKMsgCompareCardResp other) : this() {
      chairId_ = other.chairId_;
      compareId_ = other.compareId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgCompareCardResp Clone() {
      return new AKMsgCompareCardResp(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    /// <summary>
    ///玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "compare_id" field.</summary>
    public const int CompareIdFieldNumber = 2;
    private int compareId_;
    /// <summary>
    ///被比玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompareId {
      get { return compareId_; }
      set {
        compareId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AKMsgCompareCardResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AKMsgCompareCardResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if (CompareId != other.CompareId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (CompareId != 0) hash ^= CompareId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (CompareId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CompareId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (CompareId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CompareId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (CompareId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompareId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AKMsgCompareCardResp other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.CompareId != 0) {
        CompareId = other.CompareId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            CompareId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            CompareId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家比牌结果
  /// </summary>
  public sealed partial class AKMsgCompareCardRetResp : pb::IMessage<AKMsgCompareCardRetResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AKMsgCompareCardRetResp> _parser = new pb::MessageParser<AKMsgCompareCardRetResp>(() => new AKMsgCompareCardRetResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AKMsgCompareCardRetResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TeenPattiAK47.TeenPattiAK47Reflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgCompareCardRetResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgCompareCardRetResp(AKMsgCompareCardRetResp other) : this() {
      currentChairId_ = other.currentChairId_;
      currentAct_ = other.currentAct_;
      lostId_ = other.lostId_;
      compareId_ = other.compareId_;
      passiveId_ = other.passiveId_;
      compareCards_ = other.compareCards_ != null ? other.compareCards_.Clone() : null;
      passiveCards_ = other.passiveCards_ != null ? other.passiveCards_.Clone() : null;
      isAgree_ = other.isAgree_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgCompareCardRetResp Clone() {
      return new AKMsgCompareCardRetResp(this);
    }

    /// <summary>Field number for the "current_chair_id" field.</summary>
    public const int CurrentChairIdFieldNumber = 1;
    private int currentChairId_;
    /// <summary>
    ///下个操作玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentChairId {
      get { return currentChairId_; }
      set {
        currentChairId_ = value;
      }
    }

    /// <summary>Field number for the "current_act" field.</summary>
    public const int CurrentActFieldNumber = 2;
    private int currentAct_;
    /// <summary>
    ///当前操作码=
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentAct {
      get { return currentAct_; }
      set {
        currentAct_ = value;
      }
    }

    /// <summary>Field number for the "lost_id" field.</summary>
    public const int LostIdFieldNumber = 3;
    private int lostId_;
    /// <summary>
    ///输家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LostId {
      get { return lostId_; }
      set {
        lostId_ = value;
      }
    }

    /// <summary>Field number for the "compare_id" field.</summary>
    public const int CompareIdFieldNumber = 4;
    private int compareId_;
    /// <summary>
    ///比牌椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompareId {
      get { return compareId_; }
      set {
        compareId_ = value;
      }
    }

    /// <summary>Field number for the "passive_id" field.</summary>
    public const int PassiveIdFieldNumber = 5;
    private int passiveId_;
    /// <summary>
    ///被比椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PassiveId {
      get { return passiveId_; }
      set {
        passiveId_ = value;
      }
    }

    /// <summary>Field number for the "compare_cards" field.</summary>
    public const int CompareCardsFieldNumber = 6;
    private global::TeenPattiAK47.AKMsgHandCards compareCards_;
    /// <summary>
    ///比牌玩家手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TeenPattiAK47.AKMsgHandCards CompareCards {
      get { return compareCards_; }
      set {
        compareCards_ = value;
      }
    }

    /// <summary>Field number for the "passive_cards" field.</summary>
    public const int PassiveCardsFieldNumber = 7;
    private global::TeenPattiAK47.AKMsgHandCards passiveCards_;
    /// <summary>
    ///被比玩家手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TeenPattiAK47.AKMsgHandCards PassiveCards {
      get { return passiveCards_; }
      set {
        passiveCards_ = value;
      }
    }

    /// <summary>Field number for the "is_agree" field.</summary>
    public const int IsAgreeFieldNumber = 8;
    private bool isAgree_;
    /// <summary>
    ///同意否
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAgree {
      get { return isAgree_; }
      set {
        isAgree_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AKMsgCompareCardRetResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AKMsgCompareCardRetResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentChairId != other.CurrentChairId) return false;
      if (CurrentAct != other.CurrentAct) return false;
      if (LostId != other.LostId) return false;
      if (CompareId != other.CompareId) return false;
      if (PassiveId != other.PassiveId) return false;
      if (!object.Equals(CompareCards, other.CompareCards)) return false;
      if (!object.Equals(PassiveCards, other.PassiveCards)) return false;
      if (IsAgree != other.IsAgree) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentChairId != 0) hash ^= CurrentChairId.GetHashCode();
      if (CurrentAct != 0) hash ^= CurrentAct.GetHashCode();
      if (LostId != 0) hash ^= LostId.GetHashCode();
      if (CompareId != 0) hash ^= CompareId.GetHashCode();
      if (PassiveId != 0) hash ^= PassiveId.GetHashCode();
      if (compareCards_ != null) hash ^= CompareCards.GetHashCode();
      if (passiveCards_ != null) hash ^= PassiveCards.GetHashCode();
      if (IsAgree != false) hash ^= IsAgree.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CurrentChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrentChairId);
      }
      if (CurrentAct != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrentAct);
      }
      if (LostId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LostId);
      }
      if (CompareId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CompareId);
      }
      if (PassiveId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PassiveId);
      }
      if (compareCards_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CompareCards);
      }
      if (passiveCards_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PassiveCards);
      }
      if (IsAgree != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsAgree);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CurrentChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrentChairId);
      }
      if (CurrentAct != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrentAct);
      }
      if (LostId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LostId);
      }
      if (CompareId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CompareId);
      }
      if (PassiveId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PassiveId);
      }
      if (compareCards_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CompareCards);
      }
      if (passiveCards_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PassiveCards);
      }
      if (IsAgree != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsAgree);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentChairId);
      }
      if (CurrentAct != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentAct);
      }
      if (LostId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LostId);
      }
      if (CompareId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompareId);
      }
      if (PassiveId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PassiveId);
      }
      if (compareCards_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CompareCards);
      }
      if (passiveCards_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PassiveCards);
      }
      if (IsAgree != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AKMsgCompareCardRetResp other) {
      if (other == null) {
        return;
      }
      if (other.CurrentChairId != 0) {
        CurrentChairId = other.CurrentChairId;
      }
      if (other.CurrentAct != 0) {
        CurrentAct = other.CurrentAct;
      }
      if (other.LostId != 0) {
        LostId = other.LostId;
      }
      if (other.CompareId != 0) {
        CompareId = other.CompareId;
      }
      if (other.PassiveId != 0) {
        PassiveId = other.PassiveId;
      }
      if (other.compareCards_ != null) {
        if (compareCards_ == null) {
          CompareCards = new global::TeenPattiAK47.AKMsgHandCards();
        }
        CompareCards.MergeFrom(other.CompareCards);
      }
      if (other.passiveCards_ != null) {
        if (passiveCards_ == null) {
          PassiveCards = new global::TeenPattiAK47.AKMsgHandCards();
        }
        PassiveCards.MergeFrom(other.PassiveCards);
      }
      if (other.IsAgree != false) {
        IsAgree = other.IsAgree;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurrentChairId = input.ReadInt32();
            break;
          }
          case 16: {
            CurrentAct = input.ReadInt32();
            break;
          }
          case 24: {
            LostId = input.ReadInt32();
            break;
          }
          case 32: {
            CompareId = input.ReadInt32();
            break;
          }
          case 40: {
            PassiveId = input.ReadInt32();
            break;
          }
          case 50: {
            if (compareCards_ == null) {
              CompareCards = new global::TeenPattiAK47.AKMsgHandCards();
            }
            input.ReadMessage(CompareCards);
            break;
          }
          case 58: {
            if (passiveCards_ == null) {
              PassiveCards = new global::TeenPattiAK47.AKMsgHandCards();
            }
            input.ReadMessage(PassiveCards);
            break;
          }
          case 64: {
            IsAgree = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CurrentChairId = input.ReadInt32();
            break;
          }
          case 16: {
            CurrentAct = input.ReadInt32();
            break;
          }
          case 24: {
            LostId = input.ReadInt32();
            break;
          }
          case 32: {
            CompareId = input.ReadInt32();
            break;
          }
          case 40: {
            PassiveId = input.ReadInt32();
            break;
          }
          case 50: {
            if (compareCards_ == null) {
              CompareCards = new global::TeenPattiAK47.AKMsgHandCards();
            }
            input.ReadMessage(CompareCards);
            break;
          }
          case 58: {
            if (passiveCards_ == null) {
              PassiveCards = new global::TeenPattiAK47.AKMsgHandCards();
            }
            input.ReadMessage(PassiveCards);
            break;
          }
          case 64: {
            IsAgree = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///游戏结果                                  
  /// </summary>
  public sealed partial class AKMsgGameResult : pb::IMessage<AKMsgGameResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AKMsgGameResult> _parser = new pb::MessageParser<AKMsgGameResult>(() => new AKMsgGameResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AKMsgGameResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TeenPattiAK47.TeenPattiAK47Reflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgGameResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgGameResult(AKMsgGameResult other) : this() {
      gameTax_ = other.gameTax_;
      gameScore_ = other.gameScore_.Clone();
      playerHands_ = other.playerHands_.Clone();
      endState_ = other.endState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgGameResult Clone() {
      return new AKMsgGameResult(this);
    }

    /// <summary>Field number for the "game_tax" field.</summary>
    public const int GameTaxFieldNumber = 1;
    private int gameTax_;
    /// <summary>
    ///税收
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameTax {
      get { return gameTax_; }
      set {
        gameTax_ = value;
      }
    }

    /// <summary>Field number for the "game_score" field.</summary>
    public const int GameScoreFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_gameScore_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> gameScore_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///输赢分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> GameScore {
      get { return gameScore_; }
    }

    /// <summary>Field number for the "player_hands" field.</summary>
    public const int PlayerHandsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::TeenPattiAK47.AKMsgHandCards> _repeated_playerHands_codec
        = pb::FieldCodec.ForMessage(26, global::TeenPattiAK47.AKMsgHandCards.Parser);
    private readonly pbc::RepeatedField<global::TeenPattiAK47.AKMsgHandCards> playerHands_ = new pbc::RepeatedField<global::TeenPattiAK47.AKMsgHandCards>();
    /// <summary>
    ///手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TeenPattiAK47.AKMsgHandCards> PlayerHands {
      get { return playerHands_; }
    }

    /// <summary>Field number for the "end_state" field.</summary>
    public const int EndStateFieldNumber = 4;
    private int endState_;
    /// <summary>
    ///结束状态  1 比牌结束 2 全场秀牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndState {
      get { return endState_; }
      set {
        endState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AKMsgGameResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AKMsgGameResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameTax != other.GameTax) return false;
      if(!gameScore_.Equals(other.gameScore_)) return false;
      if(!playerHands_.Equals(other.playerHands_)) return false;
      if (EndState != other.EndState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameTax != 0) hash ^= GameTax.GetHashCode();
      hash ^= gameScore_.GetHashCode();
      hash ^= playerHands_.GetHashCode();
      if (EndState != 0) hash ^= EndState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GameTax != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameTax);
      }
      gameScore_.WriteTo(output, _repeated_gameScore_codec);
      playerHands_.WriteTo(output, _repeated_playerHands_codec);
      if (EndState != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GameTax != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameTax);
      }
      gameScore_.WriteTo(ref output, _repeated_gameScore_codec);
      playerHands_.WriteTo(ref output, _repeated_playerHands_codec);
      if (EndState != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameTax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameTax);
      }
      size += gameScore_.CalculateSize(_repeated_gameScore_codec);
      size += playerHands_.CalculateSize(_repeated_playerHands_codec);
      if (EndState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AKMsgGameResult other) {
      if (other == null) {
        return;
      }
      if (other.GameTax != 0) {
        GameTax = other.GameTax;
      }
      gameScore_.Add(other.gameScore_);
      playerHands_.Add(other.playerHands_);
      if (other.EndState != 0) {
        EndState = other.EndState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GameTax = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            gameScore_.AddEntriesFrom(input, _repeated_gameScore_codec);
            break;
          }
          case 26: {
            playerHands_.AddEntriesFrom(input, _repeated_playerHands_codec);
            break;
          }
          case 32: {
            EndState = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GameTax = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            gameScore_.AddEntriesFrom(ref input, _repeated_gameScore_codec);
            break;
          }
          case 26: {
            playerHands_.AddEntriesFrom(ref input, _repeated_playerHands_codec);
            break;
          }
          case 32: {
            EndState = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///////////////////////////////////////////////////////////////机器人消息///////////////////////////////////////
  /// </summary>
  public sealed partial class AKMsgNotifyPlayerAct : pb::IMessage<AKMsgNotifyPlayerAct>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AKMsgNotifyPlayerAct> _parser = new pb::MessageParser<AKMsgNotifyPlayerAct>(() => new AKMsgNotifyPlayerAct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AKMsgNotifyPlayerAct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TeenPattiAK47.TeenPattiAK47Reflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgNotifyPlayerAct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgNotifyPlayerAct(AKMsgNotifyPlayerAct other) : this() {
      chairId_ = other.chairId_;
      act_ = other.act_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AKMsgNotifyPlayerAct Clone() {
      return new AKMsgNotifyPlayerAct(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    /// <summary>
    ///玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "act" field.</summary>
    public const int ActFieldNumber = 2;
    private int act_;
    /// <summary>
    ///被比玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Act {
      get { return act_; }
      set {
        act_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AKMsgNotifyPlayerAct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AKMsgNotifyPlayerAct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if (Act != other.Act) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (Act != 0) hash ^= Act.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (Act != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Act);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (Act != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Act);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (Act != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Act);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AKMsgNotifyPlayerAct other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.Act != 0) {
        Act = other.Act;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            Act = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            Act = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
