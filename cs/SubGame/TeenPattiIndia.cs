// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/SubGame/TeenPatti_India.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TeenPattiIndia {

  /// <summary>Holder for reflection information generated from Proto/SubGame/TeenPatti_India.proto</summary>
  public static partial class TeenPattiIndiaReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/SubGame/TeenPatti_India.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TeenPattiIndiaReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNQcm90by9TdWJHYW1lL1RlZW5QYXR0aV9JbmRpYS5wcm90bxIPVGVlblBh",
            "dHRpX0luZGlhIjEKD1RQTXNnVGFibGVTdGF0ZRINCgVzdGF0ZRgBIAEoBRIP",
            "CgdvdXRfaW1lGAIgASgFIh8KDlRQTXNnSGFuZENhcmRzEg0KBWNhcmRzGAEg",
            "AygFItQBCg9UUE1zZ1BsYXllckluZm8SEAoIY2hhaXJfaWQYASABKAUSEAoI",
            "bWluZ196aHUYAiABKAgSEwoLcGxheV9zdGF0dXMYAyABKAUSEgoKcGxheWVy",
            "X2JldBgEIAEoAxIQCghsYXN0X2JldBgFIAEoAxIRCgljYXJkX3R5cGUYBiAB",
            "KAUSDAoEZ29sZBgHIAEoAxIQCgh3aW5fZ29sZBgIIAEoAxIvCgZoYW5kbHMY",
            "CSABKAsyHy5UZWVuUGF0dGlfSW5kaWEuVFBNc2dIYW5kQ2FyZHMi7QIKDlRQ",
            "TXNnU2NlbmVJbmZvEhEKCW1heF9zY29yZRgBIAEoAxIXCg90YWJsZV9tYXhf",
            "c2NvcmUYAiABKAMSEgoKY2VsbF9zY29yZRgDIAEoAxIRCgljdXJfdGltZXMY",
            "BCABKAUSEwoLdGFibGVfc3RhdGUYBSABKAUSFwoPdG90YWxfYmV0X3Njb3Jl",
            "GAYgASgDEgsKA3RheBgHIAEoBRIXCg9iYW5rZXJfY2hhaXJfaWQYCCABKAUS",
            "FAoMY3VyX2NoYWlyX2lkGAkgASgFEhUKDWN1cl9jaGFpcl9hY3QYCiABKAUS",
            "EAoIb3V0X3RpbWUYCyABKAUSEgoKdG90YWxfdGltZRgMIAEoBRIUCgxjb21w",
            "YXJlX3VzZXIYDSABKAUSEwoLY29tcGFyZV93aW4YDiABKAUSNgoMcGxheWVy",
            "X2luZm9zGA8gAygLMiAuVGVlblBhdHRpX0luZGlhLlRQTXNnUGxheWVySW5m",
            "byLXAQoSVFBNc2dHYW1lU3RhcnRSZXNwEhQKDGN1cl9jaGFpcl9pZBgBIAEo",
            "BRIRCgljdXJfdGltZXMYAiABKAUSFwoPYmFua2VyX2NoYWlyX2lkGAMgASgF",
            "EhEKCW1heF9zY29yZRgEIAEoAxIRCgltYXhfYmxpbmQYBSABKAMSEgoKY2Vs",
            "bF9zY29yZRgGIAEoAxIXCg90YWJsZV9tYXhfc2NvcmUYByABKAMSEgoKcGxh",
            "eV9pbmRleBgIIAMoBRIYChBwbGF5ZXJfbmV3X3Njb3JlGAkgAygDImgKFVRQ",
            "TXNnTm90aWZ5QWN0aW9uUmVzcBIUCgxjdXJfY2hhaXJfaWQYASABKAUSEQoJ",
            "Y3VyX3RpbWVzGAIgASgFEhMKC2N1cnJlbnRfYWN0GAMgASgFEhEKCW9wZXJf",
            "dGltZRgEIAEoBSJSCgtUUE1zZ0FjdGlvbhILCgNhY3QYASABKAUSEQoJYmV0",
            "X3Njb3JlGAIgASgDEhQKDGNvbXBhcmVfdXNlchgDIAEoAxINCgVpc19vaxgE",
            "IAEoCCIjCg9UUE1zZ0dpdmVVcFJlc3ASEAoIY2hhaXJfaWQYASABKAUibgoR",
            "VFBNc2dMb29rQ2FyZFJlc3ASEAoIY2hhaXJfaWQYASABKAUSEQoJY2FyZF90",
            "eXBlGAIgASgFEhQKDGN1cl9jaGFpcl9pZBgDIAEoBRIPCgduZXdfYWN0GAQg",
            "ASgFEg0KBWNhcmRzGAUgAygFIkwKD1RQTXNnQWRkQmV0UmVzcBIUCgxhZGRf",
            "Y2hhaXJfaWQYASABKAUSEQoJYWRkX3Njb3JlGAIgASgDEhAKCGJldF90eXBl",
            "GAMgASgDIjwKFFRQTXNnQ29tcGFyZUNhcmRSZXNwEhAKCGNoYWlyX2lkGAEg",
            "ASgFEhIKCmNvbXBhcmVfaWQYAiABKAUi7QEKF1RQTXNnQ29tcGFyZUNhcmRS",
            "ZXRSZXNwEhgKEGN1cnJlbnRfY2hhaXJfaWQYASABKAUSEwoLY3VycmVudF9h",
            "Y3QYAiABKAUSDwoHbG9zdF9pZBgDIAEoBRISCgpjb21wYXJlX2lkGAQgASgF",
            "EhIKCnBhc3NpdmVfaWQYBSABKAUSFAoMY29tcGFyZV90eXBlGAYgASgFEhQK",
            "DHBhc3NpdmVfdHlwZRgHIAEoBRIVCg1jb21wYXJlX2NhcmRzGAggAygFEhUK",
            "DXBhc3NpdmVfY2FyZHMYCSADKAUSEAoIaXNfYWdyZWUYCiABKAgilAEKD1RQ",
            "TXNnR2FtZVJlc3VsdBIQCghnYW1lX3RheBgBIAEoBRISCgpnYW1lX3Njb3Jl",
            "GAIgAygDEhEKCWNhcmRfdHlwZRgDIAMoBRI1CgxwbGF5ZXJfaGFuZHMYBCAD",
            "KAsyHy5UZWVuUGF0dGlfSW5kaWEuVFBNc2dIYW5kQ2FyZHMSEQoJZW5kX3N0",
            "YXRlGAUgASgFIjUKFFRQTVNnTm90aWZ5UGxheWVyQWN0EhAKCGNoYWlyX2lk",
            "GAEgASgFEgsKA2FjdBgCIAEoBSpnCgxFVFBHYW1lU3RhdGUSDwoLR1NfVFBf",
            "UkVBRFkQABIOCgpHU19UUF9ERUFMEAESEQoNR1NfVFBfUExBWUlORxACEhEK",
            "DUdTX1RQX0NPTVBBUkUQAxIQCgxHU19UUF9SRVNVTFQQBCpVCg5FVFBQbGF5",
            "ZXJTdGF0ZRIMCghQU19SRUFEWRAAEgsKB1BTX1BMQVkQARILCgdQU19HSVZF",
            "EAISCwoHUFNfRkFJTBADEg4KClBTX1RJTUVPVVQQBCqHAQoLRVRQQ2FyZFR5",
            "cGUSDQoJQ1RfU0lOR0xFEAASDQoJQ1RfRE9VQkxFEAESDgoKQ1RfSklOX0hV",
            "QRACEg4KCkNUX1NIVU5fWkkQAxIPCgtDVF9TSFVOX0pJThAEEg0KCUNUX0JB",
            "T19aSRAFEg4KCkNUX1NQRUNJQUwQBhIKCgZDVF9NQVgQByqEAQoNRVRQR2Ft",
            "ZUFjdGlvbhINCglJbnZhbGRBY3QQABIKCgZHaXZlVXAQARIMCghMb29rQ2Fy",
            "ZBACEgsKB0NhbGxCZXQQBBIKCgZBZGRCZXQQCBIPCgtDb21wYXJlQ2FyZBAQ",
            "EhAKDENvbXBhcmVSZXBseRAgEg4KCkFsbENvbXBhcmUQQCq/BQoPRVRQTXNn",
            "SURTdWJHYW1lEhUKEU1zZ0lEU3ViR2FtZV9OdWxsEAASHgoaTXNnSURTdWJH",
            "YW1lX0dhbWVTdGFydFJlc3AQARIhCh1Nc2dJRFN1YkdhbWVfTm90aWZ5QWN0",
            "aW9uUmVzcBACEhcKE01zZ0lEU3ViR2FtZV9BY3Rpb24QAxIbChdNc2dJRFN1",
            "YkdhbWVfR2l2ZVVwUmVzcBAEEhkKFU1zZ0lEU3ViR2FtZV9Mb29rQ2FyZBAF",
            "EhsKF01zZ0lEU3ViR2FtZV9BZGRCZXRSZXNwEAYSIAocTXNnSURTdWJHYW1l",
            "X0NvbXBhcmVDYXJkUmVzcBAHEh8KG01zZ0lEU3ViR2FtZV9Db21wYXJlUmV0",
            "UmVzcBAIEh8KG01zZ0lEU3ViR2FtZV9HYW1lUmVzdWx0UmVzcBAJEiAKHE1z",
            "Z0lEU3ViR2FtZV9Ob3RpZnlTdGF0ZVJlc3AQChIcChhNc2dJRFN1YkdhbWVf",
            "VGltZU91dFJlc3AQCxIdChlNc2dJRFN1YkdhbWVfVGltZU91dFJlYWR5EAwS",
            "IQodTXNnSURTdWJHYW1lX1RpbWVPdXRSZWFkeVJlc3AQDRIgChxNc2dJRFN1",
            "YkdhbWVfVGltZU91dEtpY2tSZXNwEA4SJgoiTXNnSURTdWJHYW1lX05vdGlm",
            "eVN5c3RlbUNoZWF0UmVzcBAUEiMKH01zZ0lEU3ViR2FtZV9Ob3RpZnlDYXJk",
            "VHlwZVJlc3AQFRIgChxNc2dJRFN1YkdhbWVfTm90aWZ5SXNNYXhSZXNwEBYS",
            "JwojTXNnSURTdWJHYW1lX05vdGlmeVJlbWFpbkRvdWJsZVJlc3AQFxIgChxN",
            "c2dJRFN1YkdhbWVfTm90aWZ5Um91bmRSZXNwEBgSIgoeTXNnSURTdWJHYW1l",
            "X05vdGlmeUxhc3RBY3RSZXNwEBliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::TeenPattiIndia.ETPGameState), typeof(global::TeenPattiIndia.ETPPlayerState), typeof(global::TeenPattiIndia.ETPCardType), typeof(global::TeenPattiIndia.ETPGameAction), typeof(global::TeenPattiIndia.ETPMsgIDSubGame), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TeenPattiIndia.TPMsgTableState), global::TeenPattiIndia.TPMsgTableState.Parser, new[]{ "State", "OutIme" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TeenPattiIndia.TPMsgHandCards), global::TeenPattiIndia.TPMsgHandCards.Parser, new[]{ "Cards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TeenPattiIndia.TPMsgPlayerInfo), global::TeenPattiIndia.TPMsgPlayerInfo.Parser, new[]{ "ChairId", "MingZhu", "PlayStatus", "PlayerBet", "LastBet", "CardType", "Gold", "WinGold", "Handls" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TeenPattiIndia.TPMsgSceneInfo), global::TeenPattiIndia.TPMsgSceneInfo.Parser, new[]{ "MaxScore", "TableMaxScore", "CellScore", "CurTimes", "TableState", "TotalBetScore", "Tax", "BankerChairId", "CurChairId", "CurChairAct", "OutTime", "TotalTime", "CompareUser", "CompareWin", "PlayerInfos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TeenPattiIndia.TPMsgGameStartResp), global::TeenPattiIndia.TPMsgGameStartResp.Parser, new[]{ "CurChairId", "CurTimes", "BankerChairId", "MaxScore", "MaxBlind", "CellScore", "TableMaxScore", "PlayIndex", "PlayerNewScore" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TeenPattiIndia.TPMsgNotifyActionResp), global::TeenPattiIndia.TPMsgNotifyActionResp.Parser, new[]{ "CurChairId", "CurTimes", "CurrentAct", "OperTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TeenPattiIndia.TPMsgAction), global::TeenPattiIndia.TPMsgAction.Parser, new[]{ "Act", "BetScore", "CompareUser", "IsOk" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TeenPattiIndia.TPMsgGiveUpResp), global::TeenPattiIndia.TPMsgGiveUpResp.Parser, new[]{ "ChairId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TeenPattiIndia.TPMsgLookCardResp), global::TeenPattiIndia.TPMsgLookCardResp.Parser, new[]{ "ChairId", "CardType", "CurChairId", "NewAct", "Cards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TeenPattiIndia.TPMsgAddBetResp), global::TeenPattiIndia.TPMsgAddBetResp.Parser, new[]{ "AddChairId", "AddScore", "BetType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TeenPattiIndia.TPMsgCompareCardResp), global::TeenPattiIndia.TPMsgCompareCardResp.Parser, new[]{ "ChairId", "CompareId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TeenPattiIndia.TPMsgCompareCardRetResp), global::TeenPattiIndia.TPMsgCompareCardRetResp.Parser, new[]{ "CurrentChairId", "CurrentAct", "LostId", "CompareId", "PassiveId", "CompareType", "PassiveType", "CompareCards", "PassiveCards", "IsAgree" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TeenPattiIndia.TPMsgGameResult), global::TeenPattiIndia.TPMsgGameResult.Parser, new[]{ "GameTax", "GameScore", "CardType", "PlayerHands", "EndState" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TeenPattiIndia.TPMSgNotifyPlayerAct), global::TeenPattiIndia.TPMSgNotifyPlayerAct.Parser, new[]{ "ChairId", "Act" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///æ¡å­ç¶æ
  /// </summary>
  public enum ETPGameState {
    /// <summary>
    ///åå¤
    /// </summary>
    [pbr::OriginalName("GS_TP_READY")] GsTpReady = 0,
    /// <summary>
    ///åç
    /// </summary>
    [pbr::OriginalName("GS_TP_DEAL")] GsTpDeal = 1,
    /// <summary>
    ///æ¸¸æ
    /// </summary>
    [pbr::OriginalName("GS_TP_PLAYING")] GsTpPlaying = 2,
    /// <summary>
    ///æ¯çé¶æ®µ
    /// </summary>
    [pbr::OriginalName("GS_TP_COMPARE")] GsTpCompare = 3,
    /// <summary>
    ///ç»ç®
    /// </summary>
    [pbr::OriginalName("GS_TP_RESULT")] GsTpResult = 4,
  }

  /// <summary>
  ///ç©å®¶ç¶æ
  /// </summary>
  public enum ETPPlayerState {
    /// <summary>
    ///åå¤
    /// </summary>
    [pbr::OriginalName("PS_READY")] PsReady = 0,
    /// <summary>
    ///æ¸¸æ
    /// </summary>
    [pbr::OriginalName("PS_PLAY")] PsPlay = 1,
    /// <summary>
    ///å¼ç
    /// </summary>
    [pbr::OriginalName("PS_GIVE")] PsGive = 2,
    /// <summary>
    ///æ·æ±°
    /// </summary>
    [pbr::OriginalName("PS_FAIL")] PsFail = 3,
    /// <summary>
    ///è¶æ¶
    /// </summary>
    [pbr::OriginalName("PS_TIMEOUT")] PsTimeout = 4,
  }

  /// <summary>
  ///çå
  /// </summary>
  public enum ETPCardType {
    /// <summary>
    ///æåç±»å
    /// </summary>
    [pbr::OriginalName("CT_SINGLE")] CtSingle = 0,
    /// <summary>
    ///å¯¹å­ç±»å
    /// </summary>
    [pbr::OriginalName("CT_DOUBLE")] CtDouble = 1,
    /// <summary>
    ///éè±ç±»å
    /// </summary>
    [pbr::OriginalName("CT_JIN_HUA")] CtJinHua = 2,
    /// <summary>
    ///é¡ºå­ç±»å
    /// </summary>
    [pbr::OriginalName("CT_SHUN_ZI")] CtShunZi = 3,
    /// <summary>
    ///é¡ºéç±»å
    /// </summary>
    [pbr::OriginalName("CT_SHUN_JIN")] CtShunJin = 4,
    /// <summary>
    ///è±¹å­ç±»å
    /// </summary>
    [pbr::OriginalName("CT_BAO_ZI")] CtBaoZi = 5,
    /// <summary>
    ///ç¹æ®ç±»å
    /// </summary>
    [pbr::OriginalName("CT_SPECIAL")] CtSpecial = 6,
    /// <summary>
    ///æå¤§çå
    /// </summary>
    [pbr::OriginalName("CT_MAX")] CtMax = 7,
  }

  /// <summary>
  ///æä½ç 
  /// </summary>
  public enum ETPGameAction {
    /// <summary>
    ///æ æ
    /// </summary>
    [pbr::OriginalName("InvaldAct")] InvaldAct = 0,
    /// <summary>
    ///å¼ç
    /// </summary>
    [pbr::OriginalName("GiveUp")] GiveUp = 1,
    /// <summary>
    ///çç
    /// </summary>
    [pbr::OriginalName("LookCard")] LookCard = 2,
    /// <summary>
    ///è·æ³¨
    /// </summary>
    [pbr::OriginalName("CallBet")] CallBet = 4,
    /// <summary>
    ///å æ³¨
    /// </summary>
    [pbr::OriginalName("AddBet")] AddBet = 8,
    /// <summary>
    ///æ¯ç
    /// </summary>
    [pbr::OriginalName("CompareCard")] CompareCard = 16,
    /// <summary>
    ///æ¯çåºç­
    /// </summary>
    [pbr::OriginalName("CompareReply")] CompareReply = 32,
    /// <summary>
    ///å¨åºæ¯ç
    /// </summary>
    [pbr::OriginalName("AllCompare")] AllCompare = 64,
  }

  public enum ETPMsgIDSubGame {
    [pbr::OriginalName("MsgIDSubGame_Null")] MsgIdsubGameNull = 0,
    /// <summary>
    ///æ¸¸æå¼å§(TPMsgGameStartResp)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_GameStartResp")] MsgIdsubGameGameStartResp = 1,
    /// <summary>
    ///ç©å®¶æä½(TPMsgNotifyActionResp)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifyActionResp")] MsgIdsubGameNotifyActionResp = 2,
    /// <summary>
    ///ç©å®¶æä½(TPMsgAction)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_Action")] MsgIdsubGameAction = 3,
    /// <summary>
    ///ç©å®¶å¼çè¿å(TPMsgGiveUpResp)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_GiveUpResp")] MsgIdsubGameGiveUpResp = 4,
    /// <summary>
    ///ç©å®¶çç(TPMsgLookCardResp)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_LookCard")] MsgIdsubGameLookCard = 5,
    /// <summary>
    ///ç©å®¶ä¸æ³¨(TPMsgAddBetResp)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_AddBetResp")] MsgIdsubGameAddBetResp = 6,
    /// <summary>
    ///ç©å®¶è¯·æ±æ¯ç(TPMsgCompareCardResp)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_CompareCardResp")] MsgIdsubGameCompareCardResp = 7,
    /// <summary>
    ///ç©å®¶æ¯çç»æ(TPMsgCompareCardRetResp)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_CompareRetResp")] MsgIdsubGameCompareRetResp = 8,
    /// <summary>
    ///ç©å®¶ä¸æ³¨è®°å½(TPMsgGameResult)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_GameResultResp")] MsgIdsubGameGameResultResp = 9,
    /// <summary>
    ///æ¡å­ç¶æ(TPMsgTableState)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifyStateResp")] MsgIdsubGameNotifyStateResp = 10,
    /// <summary>
    ///éç¥è¶æ¶(MsgCommonBool)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_TimeOutResp")] MsgIdsubGameTimeOutResp = 11,
    /// <summary>
    ///éæ°åå¤(MsgCommonBool)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_TimeOutReady")] MsgIdsubGameTimeOutReady = 12,
    /// <summary>
    ///åå¤è¿å(MsgCommonBool)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_TimeOutReadyResp")] MsgIdsubGameTimeOutReadyResp = 13,
    /// <summary>
    ///è¶æ¶è¸¢äºæ¸¸æ(MsgCommonBool)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_TimeOutKickResp")] MsgIdsubGameTimeOutKickResp = 14,
    /// <summary>
    //////////////////////////æºå¨äººæ¶æ¯///////////////////////
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifySystemCheatResp")] MsgIdsubGameNotifySystemCheatResp = 20,
    /// <summary>
    ///éç¥çå
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifyCardTypeResp")] MsgIdsubGameNotifyCardTypeResp = 21,
    /// <summary>
    ///éç¥æ¯å¦æå¤§
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifyIsMaxResp")] MsgIdsubGameNotifyIsMaxResp = 22,
    /// <summary>
    ///æ¯å¦å©2äºº
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifyRemainDoubleResp")] MsgIdsubGameNotifyRemainDoubleResp = 23,
    /// <summary>
    ///éç¥ååæ°
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifyRoundResp")] MsgIdsubGameNotifyRoundResp = 24,
    /// <summary>
    ///éç¥ç©å®¶è¡ä¸º
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifyLastActResp")] MsgIdsubGameNotifyLastActResp = 25,
  }

  #endregion

  #region Messages
  public sealed partial class TPMsgTableState : pb::IMessage<TPMsgTableState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TPMsgTableState> _parser = new pb::MessageParser<TPMsgTableState>(() => new TPMsgTableState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TPMsgTableState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TeenPattiIndia.TeenPattiIndiaReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgTableState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgTableState(TPMsgTableState other) : this() {
      state_ = other.state_;
      outIme_ = other.outIme_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgTableState Clone() {
      return new TPMsgTableState(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private int state_;
    /// <summary>
    ///æ¡å­ç¶æ
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "out_ime" field.</summary>
    public const int OutImeFieldNumber = 2;
    private int outIme_;
    /// <summary>
    ///å©ä½æ¶é´
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OutIme {
      get { return outIme_; }
      set {
        outIme_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TPMsgTableState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TPMsgTableState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (OutIme != other.OutIme) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      if (OutIme != 0) hash ^= OutIme.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(State);
      }
      if (OutIme != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OutIme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(State);
      }
      if (OutIme != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OutIme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (OutIme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutIme);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TPMsgTableState other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.OutIme != 0) {
        OutIme = other.OutIme;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            State = input.ReadInt32();
            break;
          }
          case 16: {
            OutIme = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            State = input.ReadInt32();
            break;
          }
          case 16: {
            OutIme = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TPMsgHandCards : pb::IMessage<TPMsgHandCards>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TPMsgHandCards> _parser = new pb::MessageParser<TPMsgHandCards>(() => new TPMsgHandCards());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TPMsgHandCards> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TeenPattiIndia.TeenPattiIndiaReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgHandCards() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgHandCards(TPMsgHandCards other) : this() {
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgHandCards Clone() {
      return new TPMsgHandCards(this);
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_cards_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///æç
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TPMsgHandCards);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TPMsgHandCards other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      cards_.WriteTo(ref output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TPMsgHandCards other) {
      if (other == null) {
        return;
      }
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            cards_.AddEntriesFrom(ref input, _repeated_cards_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TPMsgPlayerInfo : pb::IMessage<TPMsgPlayerInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TPMsgPlayerInfo> _parser = new pb::MessageParser<TPMsgPlayerInfo>(() => new TPMsgPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TPMsgPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TeenPattiIndia.TeenPattiIndiaReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgPlayerInfo(TPMsgPlayerInfo other) : this() {
      chairId_ = other.chairId_;
      mingZhu_ = other.mingZhu_;
      playStatus_ = other.playStatus_;
      playerBet_ = other.playerBet_;
      lastBet_ = other.lastBet_;
      cardType_ = other.cardType_;
      gold_ = other.gold_;
      winGold_ = other.winGold_;
      handls_ = other.handls_ != null ? other.handls_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgPlayerInfo Clone() {
      return new TPMsgPlayerInfo(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    /// <summary>
    ///ç©å®¶æ¤å­å·
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "ming_zhu" field.</summary>
    public const int MingZhuFieldNumber = 2;
    private bool mingZhu_;
    /// <summary>
    ///ææ³¨ç¶æ
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MingZhu {
      get { return mingZhu_; }
      set {
        mingZhu_ = value;
      }
    }

    /// <summary>Field number for the "play_status" field.</summary>
    public const int PlayStatusFieldNumber = 3;
    private int playStatus_;
    /// <summary>
    ///ç©å®¶ç¶æ
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayStatus {
      get { return playStatus_; }
      set {
        playStatus_ = value;
      }
    }

    /// <summary>Field number for the "player_bet" field.</summary>
    public const int PlayerBetFieldNumber = 4;
    private long playerBet_;
    /// <summary>
    ///ç©å®¶ææ³¨æ»å
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerBet {
      get { return playerBet_; }
      set {
        playerBet_ = value;
      }
    }

    /// <summary>Field number for the "last_bet" field.</summary>
    public const int LastBetFieldNumber = 5;
    private long lastBet_;
    /// <summary>
    ///ä¸æ¬¡ä¸æ³¨
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastBet {
      get { return lastBet_; }
      set {
        lastBet_ = value;
      }
    }

    /// <summary>Field number for the "card_type" field.</summary>
    public const int CardTypeFieldNumber = 6;
    private int cardType_;
    /// <summary>
    ///çå
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardType {
      get { return cardType_; }
      set {
        cardType_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 7;
    private long gold_;
    /// <summary>
    ///èªå·±çéå¸ï¼å«äººçæ¯ç©º
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "win_gold" field.</summary>
    public const int WinGoldFieldNumber = 8;
    private long winGold_;
    /// <summary>
    ///è¾èµ¢å
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WinGold {
      get { return winGold_; }
      set {
        winGold_ = value;
      }
    }

    /// <summary>Field number for the "handls" field.</summary>
    public const int HandlsFieldNumber = 9;
    private global::TeenPattiIndia.TPMsgHandCards handls_;
    /// <summary>
    ///æç
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TeenPattiIndia.TPMsgHandCards Handls {
      get { return handls_; }
      set {
        handls_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TPMsgPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TPMsgPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if (MingZhu != other.MingZhu) return false;
      if (PlayStatus != other.PlayStatus) return false;
      if (PlayerBet != other.PlayerBet) return false;
      if (LastBet != other.LastBet) return false;
      if (CardType != other.CardType) return false;
      if (Gold != other.Gold) return false;
      if (WinGold != other.WinGold) return false;
      if (!object.Equals(Handls, other.Handls)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (MingZhu != false) hash ^= MingZhu.GetHashCode();
      if (PlayStatus != 0) hash ^= PlayStatus.GetHashCode();
      if (PlayerBet != 0L) hash ^= PlayerBet.GetHashCode();
      if (LastBet != 0L) hash ^= LastBet.GetHashCode();
      if (CardType != 0) hash ^= CardType.GetHashCode();
      if (Gold != 0L) hash ^= Gold.GetHashCode();
      if (WinGold != 0L) hash ^= WinGold.GetHashCode();
      if (handls_ != null) hash ^= Handls.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (MingZhu != false) {
        output.WriteRawTag(16);
        output.WriteBool(MingZhu);
      }
      if (PlayStatus != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlayStatus);
      }
      if (PlayerBet != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(PlayerBet);
      }
      if (LastBet != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(LastBet);
      }
      if (CardType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CardType);
      }
      if (Gold != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Gold);
      }
      if (WinGold != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(WinGold);
      }
      if (handls_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Handls);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (MingZhu != false) {
        output.WriteRawTag(16);
        output.WriteBool(MingZhu);
      }
      if (PlayStatus != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlayStatus);
      }
      if (PlayerBet != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(PlayerBet);
      }
      if (LastBet != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(LastBet);
      }
      if (CardType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CardType);
      }
      if (Gold != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Gold);
      }
      if (WinGold != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(WinGold);
      }
      if (handls_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Handls);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (MingZhu != false) {
        size += 1 + 1;
      }
      if (PlayStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayStatus);
      }
      if (PlayerBet != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerBet);
      }
      if (LastBet != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastBet);
      }
      if (CardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardType);
      }
      if (Gold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
      }
      if (WinGold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WinGold);
      }
      if (handls_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Handls);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TPMsgPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.MingZhu != false) {
        MingZhu = other.MingZhu;
      }
      if (other.PlayStatus != 0) {
        PlayStatus = other.PlayStatus;
      }
      if (other.PlayerBet != 0L) {
        PlayerBet = other.PlayerBet;
      }
      if (other.LastBet != 0L) {
        LastBet = other.LastBet;
      }
      if (other.CardType != 0) {
        CardType = other.CardType;
      }
      if (other.Gold != 0L) {
        Gold = other.Gold;
      }
      if (other.WinGold != 0L) {
        WinGold = other.WinGold;
      }
      if (other.handls_ != null) {
        if (handls_ == null) {
          Handls = new global::TeenPattiIndia.TPMsgHandCards();
        }
        Handls.MergeFrom(other.Handls);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            MingZhu = input.ReadBool();
            break;
          }
          case 24: {
            PlayStatus = input.ReadInt32();
            break;
          }
          case 32: {
            PlayerBet = input.ReadInt64();
            break;
          }
          case 40: {
            LastBet = input.ReadInt64();
            break;
          }
          case 48: {
            CardType = input.ReadInt32();
            break;
          }
          case 56: {
            Gold = input.ReadInt64();
            break;
          }
          case 64: {
            WinGold = input.ReadInt64();
            break;
          }
          case 74: {
            if (handls_ == null) {
              Handls = new global::TeenPattiIndia.TPMsgHandCards();
            }
            input.ReadMessage(Handls);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            MingZhu = input.ReadBool();
            break;
          }
          case 24: {
            PlayStatus = input.ReadInt32();
            break;
          }
          case 32: {
            PlayerBet = input.ReadInt64();
            break;
          }
          case 40: {
            LastBet = input.ReadInt64();
            break;
          }
          case 48: {
            CardType = input.ReadInt32();
            break;
          }
          case 56: {
            Gold = input.ReadInt64();
            break;
          }
          case 64: {
            WinGold = input.ReadInt64();
            break;
          }
          case 74: {
            if (handls_ == null) {
              Handls = new global::TeenPattiIndia.TPMsgHandCards();
            }
            input.ReadMessage(Handls);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///åºæ¯æ¶æ¯
  /// </summary>
  public sealed partial class TPMsgSceneInfo : pb::IMessage<TPMsgSceneInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TPMsgSceneInfo> _parser = new pb::MessageParser<TPMsgSceneInfo>(() => new TPMsgSceneInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TPMsgSceneInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TeenPattiIndia.TeenPattiIndiaReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgSceneInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgSceneInfo(TPMsgSceneInfo other) : this() {
      maxScore_ = other.maxScore_;
      tableMaxScore_ = other.tableMaxScore_;
      cellScore_ = other.cellScore_;
      curTimes_ = other.curTimes_;
      tableState_ = other.tableState_;
      totalBetScore_ = other.totalBetScore_;
      tax_ = other.tax_;
      bankerChairId_ = other.bankerChairId_;
      curChairId_ = other.curChairId_;
      curChairAct_ = other.curChairAct_;
      outTime_ = other.outTime_;
      totalTime_ = other.totalTime_;
      compareUser_ = other.compareUser_;
      compareWin_ = other.compareWin_;
      playerInfos_ = other.playerInfos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgSceneInfo Clone() {
      return new TPMsgSceneInfo(this);
    }

    /// <summary>Field number for the "max_score" field.</summary>
    public const int MaxScoreFieldNumber = 1;
    private long maxScore_;
    /// <summary>
    ///æå¤§ä¸æ³¨
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxScore {
      get { return maxScore_; }
      set {
        maxScore_ = value;
      }
    }

    /// <summary>Field number for the "table_max_score" field.</summary>
    public const int TableMaxScoreFieldNumber = 2;
    private long tableMaxScore_;
    /// <summary>
    ///æå¤§ä¸æ³¨
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TableMaxScore {
      get { return tableMaxScore_; }
      set {
        tableMaxScore_ = value;
      }
    }

    /// <summary>Field number for the "cell_score" field.</summary>
    public const int CellScoreFieldNumber = 3;
    private long cellScore_;
    /// <summary>
    ///åºå
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CellScore {
      get { return cellScore_; }
      set {
        cellScore_ = value;
      }
    }

    /// <summary>Field number for the "cur_times" field.</summary>
    public const int CurTimesFieldNumber = 4;
    private int curTimes_;
    /// <summary>
    ///å½ååæ°
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurTimes {
      get { return curTimes_; }
      set {
        curTimes_ = value;
      }
    }

    /// <summary>Field number for the "table_state" field.</summary>
    public const int TableStateFieldNumber = 5;
    private int tableState_;
    /// <summary>
    ///æ¡å­ç¶æ
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TableState {
      get { return tableState_; }
      set {
        tableState_ = value;
      }
    }

    /// <summary>Field number for the "total_bet_score" field.</summary>
    public const int TotalBetScoreFieldNumber = 6;
    private long totalBetScore_;
    /// <summary>
    ///æ¡åæ»ä¸æ³¨
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalBetScore {
      get { return totalBetScore_; }
      set {
        totalBetScore_ = value;
      }
    }

    /// <summary>Field number for the "tax" field.</summary>
    public const int TaxFieldNumber = 7;
    private int tax_;
    /// <summary>
    ///æ½æ°´
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tax {
      get { return tax_; }
      set {
        tax_ = value;
      }
    }

    /// <summary>Field number for the "banker_chair_id" field.</summary>
    public const int BankerChairIdFieldNumber = 8;
    private int bankerChairId_;
    /// <summary>
    ///åºå®¶æ¤å­å·
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BankerChairId {
      get { return bankerChairId_; }
      set {
        bankerChairId_ = value;
      }
    }

    /// <summary>Field number for the "cur_chair_id" field.</summary>
    public const int CurChairIdFieldNumber = 9;
    private int curChairId_;
    /// <summary>
    ///å½åæä½æ¤å­å·
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurChairId {
      get { return curChairId_; }
      set {
        curChairId_ = value;
      }
    }

    /// <summary>Field number for the "cur_chair_act" field.</summary>
    public const int CurChairActFieldNumber = 10;
    private int curChairAct_;
    /// <summary>
    ///å½åç©å®¶çæä½ç 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurChairAct {
      get { return curChairAct_; }
      set {
        curChairAct_ = value;
      }
    }

    /// <summary>Field number for the "out_time" field.</summary>
    public const int OutTimeFieldNumber = 11;
    private int outTime_;
    /// <summary>
    ///å½åç¶æå©ä½è¶æ¶æ¶é´
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OutTime {
      get { return outTime_; }
      set {
        outTime_ = value;
      }
    }

    /// <summary>Field number for the "total_time" field.</summary>
    public const int TotalTimeFieldNumber = 12;
    private int totalTime_;
    /// <summary>
    ///å½åç¶ææ»æ¶é´
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalTime {
      get { return totalTime_; }
      set {
        totalTime_ = value;
      }
    }

    /// <summary>Field number for the "compare_user" field.</summary>
    public const int CompareUserFieldNumber = 13;
    private int compareUser_;
    /// <summary>
    ///æ¯çåèµ·ç©å®¶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompareUser {
      get { return compareUser_; }
      set {
        compareUser_ = value;
      }
    }

    /// <summary>Field number for the "compare_win" field.</summary>
    public const int CompareWinFieldNumber = 14;
    private int compareWin_;
    /// <summary>
    ///æ¯çèµ¢å®¶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompareWin {
      get { return compareWin_; }
      set {
        compareWin_ = value;
      }
    }

    /// <summary>Field number for the "player_infos" field.</summary>
    public const int PlayerInfosFieldNumber = 15;
    private static readonly pb::FieldCodec<global::TeenPattiIndia.TPMsgPlayerInfo> _repeated_playerInfos_codec
        = pb::FieldCodec.ForMessage(122, global::TeenPattiIndia.TPMsgPlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::TeenPattiIndia.TPMsgPlayerInfo> playerInfos_ = new pbc::RepeatedField<global::TeenPattiIndia.TPMsgPlayerInfo>();
    /// <summary>
    ///ç©å®¶ç¶æ
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TeenPattiIndia.TPMsgPlayerInfo> PlayerInfos {
      get { return playerInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TPMsgSceneInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TPMsgSceneInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxScore != other.MaxScore) return false;
      if (TableMaxScore != other.TableMaxScore) return false;
      if (CellScore != other.CellScore) return false;
      if (CurTimes != other.CurTimes) return false;
      if (TableState != other.TableState) return false;
      if (TotalBetScore != other.TotalBetScore) return false;
      if (Tax != other.Tax) return false;
      if (BankerChairId != other.BankerChairId) return false;
      if (CurChairId != other.CurChairId) return false;
      if (CurChairAct != other.CurChairAct) return false;
      if (OutTime != other.OutTime) return false;
      if (TotalTime != other.TotalTime) return false;
      if (CompareUser != other.CompareUser) return false;
      if (CompareWin != other.CompareWin) return false;
      if(!playerInfos_.Equals(other.playerInfos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxScore != 0L) hash ^= MaxScore.GetHashCode();
      if (TableMaxScore != 0L) hash ^= TableMaxScore.GetHashCode();
      if (CellScore != 0L) hash ^= CellScore.GetHashCode();
      if (CurTimes != 0) hash ^= CurTimes.GetHashCode();
      if (TableState != 0) hash ^= TableState.GetHashCode();
      if (TotalBetScore != 0L) hash ^= TotalBetScore.GetHashCode();
      if (Tax != 0) hash ^= Tax.GetHashCode();
      if (BankerChairId != 0) hash ^= BankerChairId.GetHashCode();
      if (CurChairId != 0) hash ^= CurChairId.GetHashCode();
      if (CurChairAct != 0) hash ^= CurChairAct.GetHashCode();
      if (OutTime != 0) hash ^= OutTime.GetHashCode();
      if (TotalTime != 0) hash ^= TotalTime.GetHashCode();
      if (CompareUser != 0) hash ^= CompareUser.GetHashCode();
      if (CompareWin != 0) hash ^= CompareWin.GetHashCode();
      hash ^= playerInfos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MaxScore != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MaxScore);
      }
      if (TableMaxScore != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TableMaxScore);
      }
      if (CellScore != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CellScore);
      }
      if (CurTimes != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CurTimes);
      }
      if (TableState != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TableState);
      }
      if (TotalBetScore != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TotalBetScore);
      }
      if (Tax != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Tax);
      }
      if (BankerChairId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(BankerChairId);
      }
      if (CurChairId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CurChairId);
      }
      if (CurChairAct != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(CurChairAct);
      }
      if (OutTime != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(OutTime);
      }
      if (TotalTime != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(TotalTime);
      }
      if (CompareUser != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(CompareUser);
      }
      if (CompareWin != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(CompareWin);
      }
      playerInfos_.WriteTo(output, _repeated_playerInfos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MaxScore != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MaxScore);
      }
      if (TableMaxScore != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TableMaxScore);
      }
      if (CellScore != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CellScore);
      }
      if (CurTimes != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CurTimes);
      }
      if (TableState != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TableState);
      }
      if (TotalBetScore != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TotalBetScore);
      }
      if (Tax != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Tax);
      }
      if (BankerChairId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(BankerChairId);
      }
      if (CurChairId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CurChairId);
      }
      if (CurChairAct != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(CurChairAct);
      }
      if (OutTime != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(OutTime);
      }
      if (TotalTime != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(TotalTime);
      }
      if (CompareUser != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(CompareUser);
      }
      if (CompareWin != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(CompareWin);
      }
      playerInfos_.WriteTo(ref output, _repeated_playerInfos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxScore);
      }
      if (TableMaxScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TableMaxScore);
      }
      if (CellScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CellScore);
      }
      if (CurTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurTimes);
      }
      if (TableState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableState);
      }
      if (TotalBetScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalBetScore);
      }
      if (Tax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tax);
      }
      if (BankerChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BankerChairId);
      }
      if (CurChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurChairId);
      }
      if (CurChairAct != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurChairAct);
      }
      if (OutTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutTime);
      }
      if (TotalTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalTime);
      }
      if (CompareUser != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompareUser);
      }
      if (CompareWin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompareWin);
      }
      size += playerInfos_.CalculateSize(_repeated_playerInfos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TPMsgSceneInfo other) {
      if (other == null) {
        return;
      }
      if (other.MaxScore != 0L) {
        MaxScore = other.MaxScore;
      }
      if (other.TableMaxScore != 0L) {
        TableMaxScore = other.TableMaxScore;
      }
      if (other.CellScore != 0L) {
        CellScore = other.CellScore;
      }
      if (other.CurTimes != 0) {
        CurTimes = other.CurTimes;
      }
      if (other.TableState != 0) {
        TableState = other.TableState;
      }
      if (other.TotalBetScore != 0L) {
        TotalBetScore = other.TotalBetScore;
      }
      if (other.Tax != 0) {
        Tax = other.Tax;
      }
      if (other.BankerChairId != 0) {
        BankerChairId = other.BankerChairId;
      }
      if (other.CurChairId != 0) {
        CurChairId = other.CurChairId;
      }
      if (other.CurChairAct != 0) {
        CurChairAct = other.CurChairAct;
      }
      if (other.OutTime != 0) {
        OutTime = other.OutTime;
      }
      if (other.TotalTime != 0) {
        TotalTime = other.TotalTime;
      }
      if (other.CompareUser != 0) {
        CompareUser = other.CompareUser;
      }
      if (other.CompareWin != 0) {
        CompareWin = other.CompareWin;
      }
      playerInfos_.Add(other.playerInfos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MaxScore = input.ReadInt64();
            break;
          }
          case 16: {
            TableMaxScore = input.ReadInt64();
            break;
          }
          case 24: {
            CellScore = input.ReadInt64();
            break;
          }
          case 32: {
            CurTimes = input.ReadInt32();
            break;
          }
          case 40: {
            TableState = input.ReadInt32();
            break;
          }
          case 48: {
            TotalBetScore = input.ReadInt64();
            break;
          }
          case 56: {
            Tax = input.ReadInt32();
            break;
          }
          case 64: {
            BankerChairId = input.ReadInt32();
            break;
          }
          case 72: {
            CurChairId = input.ReadInt32();
            break;
          }
          case 80: {
            CurChairAct = input.ReadInt32();
            break;
          }
          case 88: {
            OutTime = input.ReadInt32();
            break;
          }
          case 96: {
            TotalTime = input.ReadInt32();
            break;
          }
          case 104: {
            CompareUser = input.ReadInt32();
            break;
          }
          case 112: {
            CompareWin = input.ReadInt32();
            break;
          }
          case 122: {
            playerInfos_.AddEntriesFrom(input, _repeated_playerInfos_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MaxScore = input.ReadInt64();
            break;
          }
          case 16: {
            TableMaxScore = input.ReadInt64();
            break;
          }
          case 24: {
            CellScore = input.ReadInt64();
            break;
          }
          case 32: {
            CurTimes = input.ReadInt32();
            break;
          }
          case 40: {
            TableState = input.ReadInt32();
            break;
          }
          case 48: {
            TotalBetScore = input.ReadInt64();
            break;
          }
          case 56: {
            Tax = input.ReadInt32();
            break;
          }
          case 64: {
            BankerChairId = input.ReadInt32();
            break;
          }
          case 72: {
            CurChairId = input.ReadInt32();
            break;
          }
          case 80: {
            CurChairAct = input.ReadInt32();
            break;
          }
          case 88: {
            OutTime = input.ReadInt32();
            break;
          }
          case 96: {
            TotalTime = input.ReadInt32();
            break;
          }
          case 104: {
            CompareUser = input.ReadInt32();
            break;
          }
          case 112: {
            CompareWin = input.ReadInt32();
            break;
          }
          case 122: {
            playerInfos_.AddEntriesFrom(ref input, _repeated_playerInfos_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///æ¸¸æå¼å§
  /// </summary>
  public sealed partial class TPMsgGameStartResp : pb::IMessage<TPMsgGameStartResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TPMsgGameStartResp> _parser = new pb::MessageParser<TPMsgGameStartResp>(() => new TPMsgGameStartResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TPMsgGameStartResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TeenPattiIndia.TeenPattiIndiaReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgGameStartResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgGameStartResp(TPMsgGameStartResp other) : this() {
      curChairId_ = other.curChairId_;
      curTimes_ = other.curTimes_;
      bankerChairId_ = other.bankerChairId_;
      maxScore_ = other.maxScore_;
      maxBlind_ = other.maxBlind_;
      cellScore_ = other.cellScore_;
      tableMaxScore_ = other.tableMaxScore_;
      playIndex_ = other.playIndex_.Clone();
      playerNewScore_ = other.playerNewScore_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgGameStartResp Clone() {
      return new TPMsgGameStartResp(this);
    }

    /// <summary>Field number for the "cur_chair_id" field.</summary>
    public const int CurChairIdFieldNumber = 1;
    private int curChairId_;
    /// <summary>
    ///æä½ç©å®¶æ¤å­å·
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurChairId {
      get { return curChairId_; }
      set {
        curChairId_ = value;
      }
    }

    /// <summary>Field number for the "cur_times" field.</summary>
    public const int CurTimesFieldNumber = 2;
    private int curTimes_;
    /// <summary>
    ///å½ååæ°
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurTimes {
      get { return curTimes_; }
      set {
        curTimes_ = value;
      }
    }

    /// <summary>Field number for the "banker_chair_id" field.</summary>
    public const int BankerChairIdFieldNumber = 3;
    private int bankerChairId_;
    /// <summary>
    ///åºå®¶æ¤å­å·
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BankerChairId {
      get { return bankerChairId_; }
      set {
        bankerChairId_ = value;
      }
    }

    /// <summary>Field number for the "max_score" field.</summary>
    public const int MaxScoreFieldNumber = 4;
    private long maxScore_;
    /// <summary>
    ///æå¤§ä¸æ³¨
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxScore {
      get { return maxScore_; }
      set {
        maxScore_ = value;
      }
    }

    /// <summary>Field number for the "max_blind" field.</summary>
    public const int MaxBlindFieldNumber = 5;
    private long maxBlind_;
    /// <summary>
    ///ç²ææ¬¡æ°éå¶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxBlind {
      get { return maxBlind_; }
      set {
        maxBlind_ = value;
      }
    }

    /// <summary>Field number for the "cell_score" field.</summary>
    public const int CellScoreFieldNumber = 6;
    private long cellScore_;
    /// <summary>
    ///åºå
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CellScore {
      get { return cellScore_; }
      set {
        cellScore_ = value;
      }
    }

    /// <summary>Field number for the "table_max_score" field.</summary>
    public const int TableMaxScoreFieldNumber = 7;
    private long tableMaxScore_;
    /// <summary>
    ///æ¡åæå¤§ä¸æ³¨
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TableMaxScore {
      get { return tableMaxScore_; }
      set {
        tableMaxScore_ = value;
      }
    }

    /// <summary>Field number for the "play_index" field.</summary>
    public const int PlayIndexFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_playIndex_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> playIndex_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///å¨ç©ä¸æ 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PlayIndex {
      get { return playIndex_; }
    }

    /// <summary>Field number for the "player_new_score" field.</summary>
    public const int PlayerNewScoreFieldNumber = 9;
    private static readonly pb::FieldCodec<long> _repeated_playerNewScore_codec
        = pb::FieldCodec.ForInt64(74);
    private readonly pbc::RepeatedField<long> playerNewScore_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///ç©å®¶ææ°éå¸
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> PlayerNewScore {
      get { return playerNewScore_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TPMsgGameStartResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TPMsgGameStartResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurChairId != other.CurChairId) return false;
      if (CurTimes != other.CurTimes) return false;
      if (BankerChairId != other.BankerChairId) return false;
      if (MaxScore != other.MaxScore) return false;
      if (MaxBlind != other.MaxBlind) return false;
      if (CellScore != other.CellScore) return false;
      if (TableMaxScore != other.TableMaxScore) return false;
      if(!playIndex_.Equals(other.playIndex_)) return false;
      if(!playerNewScore_.Equals(other.playerNewScore_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurChairId != 0) hash ^= CurChairId.GetHashCode();
      if (CurTimes != 0) hash ^= CurTimes.GetHashCode();
      if (BankerChairId != 0) hash ^= BankerChairId.GetHashCode();
      if (MaxScore != 0L) hash ^= MaxScore.GetHashCode();
      if (MaxBlind != 0L) hash ^= MaxBlind.GetHashCode();
      if (CellScore != 0L) hash ^= CellScore.GetHashCode();
      if (TableMaxScore != 0L) hash ^= TableMaxScore.GetHashCode();
      hash ^= playIndex_.GetHashCode();
      hash ^= playerNewScore_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CurChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurChairId);
      }
      if (CurTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurTimes);
      }
      if (BankerChairId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BankerChairId);
      }
      if (MaxScore != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(MaxScore);
      }
      if (MaxBlind != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(MaxBlind);
      }
      if (CellScore != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(CellScore);
      }
      if (TableMaxScore != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(TableMaxScore);
      }
      playIndex_.WriteTo(output, _repeated_playIndex_codec);
      playerNewScore_.WriteTo(output, _repeated_playerNewScore_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CurChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurChairId);
      }
      if (CurTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurTimes);
      }
      if (BankerChairId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BankerChairId);
      }
      if (MaxScore != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(MaxScore);
      }
      if (MaxBlind != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(MaxBlind);
      }
      if (CellScore != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(CellScore);
      }
      if (TableMaxScore != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(TableMaxScore);
      }
      playIndex_.WriteTo(ref output, _repeated_playIndex_codec);
      playerNewScore_.WriteTo(ref output, _repeated_playerNewScore_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurChairId);
      }
      if (CurTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurTimes);
      }
      if (BankerChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BankerChairId);
      }
      if (MaxScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxScore);
      }
      if (MaxBlind != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxBlind);
      }
      if (CellScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CellScore);
      }
      if (TableMaxScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TableMaxScore);
      }
      size += playIndex_.CalculateSize(_repeated_playIndex_codec);
      size += playerNewScore_.CalculateSize(_repeated_playerNewScore_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TPMsgGameStartResp other) {
      if (other == null) {
        return;
      }
      if (other.CurChairId != 0) {
        CurChairId = other.CurChairId;
      }
      if (other.CurTimes != 0) {
        CurTimes = other.CurTimes;
      }
      if (other.BankerChairId != 0) {
        BankerChairId = other.BankerChairId;
      }
      if (other.MaxScore != 0L) {
        MaxScore = other.MaxScore;
      }
      if (other.MaxBlind != 0L) {
        MaxBlind = other.MaxBlind;
      }
      if (other.CellScore != 0L) {
        CellScore = other.CellScore;
      }
      if (other.TableMaxScore != 0L) {
        TableMaxScore = other.TableMaxScore;
      }
      playIndex_.Add(other.playIndex_);
      playerNewScore_.Add(other.playerNewScore_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurChairId = input.ReadInt32();
            break;
          }
          case 16: {
            CurTimes = input.ReadInt32();
            break;
          }
          case 24: {
            BankerChairId = input.ReadInt32();
            break;
          }
          case 32: {
            MaxScore = input.ReadInt64();
            break;
          }
          case 40: {
            MaxBlind = input.ReadInt64();
            break;
          }
          case 48: {
            CellScore = input.ReadInt64();
            break;
          }
          case 56: {
            TableMaxScore = input.ReadInt64();
            break;
          }
          case 66:
          case 64: {
            playIndex_.AddEntriesFrom(input, _repeated_playIndex_codec);
            break;
          }
          case 74:
          case 72: {
            playerNewScore_.AddEntriesFrom(input, _repeated_playerNewScore_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CurChairId = input.ReadInt32();
            break;
          }
          case 16: {
            CurTimes = input.ReadInt32();
            break;
          }
          case 24: {
            BankerChairId = input.ReadInt32();
            break;
          }
          case 32: {
            MaxScore = input.ReadInt64();
            break;
          }
          case 40: {
            MaxBlind = input.ReadInt64();
            break;
          }
          case 48: {
            CellScore = input.ReadInt64();
            break;
          }
          case 56: {
            TableMaxScore = input.ReadInt64();
            break;
          }
          case 66:
          case 64: {
            playIndex_.AddEntriesFrom(ref input, _repeated_playIndex_codec);
            break;
          }
          case 74:
          case 72: {
            playerNewScore_.AddEntriesFrom(ref input, _repeated_playerNewScore_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///æ¸¸æå¼å§
  /// </summary>
  public sealed partial class TPMsgNotifyActionResp : pb::IMessage<TPMsgNotifyActionResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TPMsgNotifyActionResp> _parser = new pb::MessageParser<TPMsgNotifyActionResp>(() => new TPMsgNotifyActionResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TPMsgNotifyActionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TeenPattiIndia.TeenPattiIndiaReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgNotifyActionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgNotifyActionResp(TPMsgNotifyActionResp other) : this() {
      curChairId_ = other.curChairId_;
      curTimes_ = other.curTimes_;
      currentAct_ = other.currentAct_;
      operTime_ = other.operTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgNotifyActionResp Clone() {
      return new TPMsgNotifyActionResp(this);
    }

    /// <summary>Field number for the "cur_chair_id" field.</summary>
    public const int CurChairIdFieldNumber = 1;
    private int curChairId_;
    /// <summary>
    ///æä½ç©å®¶æ¤å­å·
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurChairId {
      get { return curChairId_; }
      set {
        curChairId_ = value;
      }
    }

    /// <summary>Field number for the "cur_times" field.</summary>
    public const int CurTimesFieldNumber = 2;
    private int curTimes_;
    /// <summary>
    ///å½ååæ°
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurTimes {
      get { return curTimes_; }
      set {
        curTimes_ = value;
      }
    }

    /// <summary>Field number for the "current_act" field.</summary>
    public const int CurrentActFieldNumber = 3;
    private int currentAct_;
    /// <summary>
    ///å½åæä½ç 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentAct {
      get { return currentAct_; }
      set {
        currentAct_ = value;
      }
    }

    /// <summary>Field number for the "oper_time" field.</summary>
    public const int OperTimeFieldNumber = 4;
    private int operTime_;
    /// <summary>
    ///æä½æ¶é´
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OperTime {
      get { return operTime_; }
      set {
        operTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TPMsgNotifyActionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TPMsgNotifyActionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurChairId != other.CurChairId) return false;
      if (CurTimes != other.CurTimes) return false;
      if (CurrentAct != other.CurrentAct) return false;
      if (OperTime != other.OperTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurChairId != 0) hash ^= CurChairId.GetHashCode();
      if (CurTimes != 0) hash ^= CurTimes.GetHashCode();
      if (CurrentAct != 0) hash ^= CurrentAct.GetHashCode();
      if (OperTime != 0) hash ^= OperTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CurChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurChairId);
      }
      if (CurTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurTimes);
      }
      if (CurrentAct != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurrentAct);
      }
      if (OperTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OperTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CurChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurChairId);
      }
      if (CurTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurTimes);
      }
      if (CurrentAct != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurrentAct);
      }
      if (OperTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OperTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurChairId);
      }
      if (CurTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurTimes);
      }
      if (CurrentAct != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentAct);
      }
      if (OperTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OperTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TPMsgNotifyActionResp other) {
      if (other == null) {
        return;
      }
      if (other.CurChairId != 0) {
        CurChairId = other.CurChairId;
      }
      if (other.CurTimes != 0) {
        CurTimes = other.CurTimes;
      }
      if (other.CurrentAct != 0) {
        CurrentAct = other.CurrentAct;
      }
      if (other.OperTime != 0) {
        OperTime = other.OperTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurChairId = input.ReadInt32();
            break;
          }
          case 16: {
            CurTimes = input.ReadInt32();
            break;
          }
          case 24: {
            CurrentAct = input.ReadInt32();
            break;
          }
          case 32: {
            OperTime = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CurChairId = input.ReadInt32();
            break;
          }
          case 16: {
            CurTimes = input.ReadInt32();
            break;
          }
          case 24: {
            CurrentAct = input.ReadInt32();
            break;
          }
          case 32: {
            OperTime = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///ç©å®¶æä½
  /// </summary>
  public sealed partial class TPMsgAction : pb::IMessage<TPMsgAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TPMsgAction> _parser = new pb::MessageParser<TPMsgAction>(() => new TPMsgAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TPMsgAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TeenPattiIndia.TeenPattiIndiaReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgAction(TPMsgAction other) : this() {
      act_ = other.act_;
      betScore_ = other.betScore_;
      compareUser_ = other.compareUser_;
      isOk_ = other.isOk_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgAction Clone() {
      return new TPMsgAction(this);
    }

    /// <summary>Field number for the "act" field.</summary>
    public const int ActFieldNumber = 1;
    private int act_;
    /// <summary>
    ///æä½æ ç¤º
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Act {
      get { return act_; }
      set {
        act_ = value;
      }
    }

    /// <summary>Field number for the "bet_score" field.</summary>
    public const int BetScoreFieldNumber = 2;
    private long betScore_;
    /// <summary>
    ///ä¸æ³¨éé¢
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BetScore {
      get { return betScore_; }
      set {
        betScore_ = value;
      }
    }

    /// <summary>Field number for the "compare_user" field.</summary>
    public const int CompareUserFieldNumber = 3;
    private long compareUser_;
    /// <summary>
    ///æ¯çæ¤å­id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CompareUser {
      get { return compareUser_; }
      set {
        compareUser_ = value;
      }
    }

    /// <summary>Field number for the "is_ok" field.</summary>
    public const int IsOkFieldNumber = 4;
    private bool isOk_;
    /// <summary>
    ///æ¯å¦åææ¯ç
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOk {
      get { return isOk_; }
      set {
        isOk_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TPMsgAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TPMsgAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Act != other.Act) return false;
      if (BetScore != other.BetScore) return false;
      if (CompareUser != other.CompareUser) return false;
      if (IsOk != other.IsOk) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Act != 0) hash ^= Act.GetHashCode();
      if (BetScore != 0L) hash ^= BetScore.GetHashCode();
      if (CompareUser != 0L) hash ^= CompareUser.GetHashCode();
      if (IsOk != false) hash ^= IsOk.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Act != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Act);
      }
      if (BetScore != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(BetScore);
      }
      if (CompareUser != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CompareUser);
      }
      if (IsOk != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsOk);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Act != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Act);
      }
      if (BetScore != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(BetScore);
      }
      if (CompareUser != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CompareUser);
      }
      if (IsOk != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsOk);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Act != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Act);
      }
      if (BetScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BetScore);
      }
      if (CompareUser != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CompareUser);
      }
      if (IsOk != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TPMsgAction other) {
      if (other == null) {
        return;
      }
      if (other.Act != 0) {
        Act = other.Act;
      }
      if (other.BetScore != 0L) {
        BetScore = other.BetScore;
      }
      if (other.CompareUser != 0L) {
        CompareUser = other.CompareUser;
      }
      if (other.IsOk != false) {
        IsOk = other.IsOk;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Act = input.ReadInt32();
            break;
          }
          case 16: {
            BetScore = input.ReadInt64();
            break;
          }
          case 24: {
            CompareUser = input.ReadInt64();
            break;
          }
          case 32: {
            IsOk = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Act = input.ReadInt32();
            break;
          }
          case 16: {
            BetScore = input.ReadInt64();
            break;
          }
          case 24: {
            CompareUser = input.ReadInt64();
            break;
          }
          case 32: {
            IsOk = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///ç©å®¶å¼çè¿å
  /// </summary>
  public sealed partial class TPMsgGiveUpResp : pb::IMessage<TPMsgGiveUpResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TPMsgGiveUpResp> _parser = new pb::MessageParser<TPMsgGiveUpResp>(() => new TPMsgGiveUpResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TPMsgGiveUpResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TeenPattiIndia.TeenPattiIndiaReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgGiveUpResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgGiveUpResp(TPMsgGiveUpResp other) : this() {
      chairId_ = other.chairId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgGiveUpResp Clone() {
      return new TPMsgGiveUpResp(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    /// <summary>
    ///ç©å®¶æ¤å­å·
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TPMsgGiveUpResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TPMsgGiveUpResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TPMsgGiveUpResp other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///ç©å®¶çç
  /// </summary>
  public sealed partial class TPMsgLookCardResp : pb::IMessage<TPMsgLookCardResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TPMsgLookCardResp> _parser = new pb::MessageParser<TPMsgLookCardResp>(() => new TPMsgLookCardResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TPMsgLookCardResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TeenPattiIndia.TeenPattiIndiaReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgLookCardResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgLookCardResp(TPMsgLookCardResp other) : this() {
      chairId_ = other.chairId_;
      cardType_ = other.cardType_;
      curChairId_ = other.curChairId_;
      newAct_ = other.newAct_;
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgLookCardResp Clone() {
      return new TPMsgLookCardResp(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    /// <summary>
    ///ç©å®¶æ¤å­å·
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "card_type" field.</summary>
    public const int CardTypeFieldNumber = 2;
    private int cardType_;
    /// <summary>
    ///çå
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardType {
      get { return cardType_; }
      set {
        cardType_ = value;
      }
    }

    /// <summary>Field number for the "cur_chair_id" field.</summary>
    public const int CurChairIdFieldNumber = 3;
    private int curChairId_;
    /// <summary>
    ///ç©å®¶æ¤å­å·
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurChairId {
      get { return curChairId_; }
      set {
        curChairId_ = value;
      }
    }

    /// <summary>Field number for the "new_act" field.</summary>
    public const int NewActFieldNumber = 4;
    private int newAct_;
    /// <summary>
    ///ææ°æä½ç 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewAct {
      get { return newAct_; }
      set {
        newAct_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_cards_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///æç
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TPMsgLookCardResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TPMsgLookCardResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if (CardType != other.CardType) return false;
      if (CurChairId != other.CurChairId) return false;
      if (NewAct != other.NewAct) return false;
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (CardType != 0) hash ^= CardType.GetHashCode();
      if (CurChairId != 0) hash ^= CurChairId.GetHashCode();
      if (NewAct != 0) hash ^= NewAct.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (CardType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CardType);
      }
      if (CurChairId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurChairId);
      }
      if (NewAct != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NewAct);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (CardType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CardType);
      }
      if (CurChairId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurChairId);
      }
      if (NewAct != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NewAct);
      }
      cards_.WriteTo(ref output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (CardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardType);
      }
      if (CurChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurChairId);
      }
      if (NewAct != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewAct);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TPMsgLookCardResp other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.CardType != 0) {
        CardType = other.CardType;
      }
      if (other.CurChairId != 0) {
        CurChairId = other.CurChairId;
      }
      if (other.NewAct != 0) {
        NewAct = other.NewAct;
      }
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            CardType = input.ReadInt32();
            break;
          }
          case 24: {
            CurChairId = input.ReadInt32();
            break;
          }
          case 32: {
            NewAct = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            CardType = input.ReadInt32();
            break;
          }
          case 24: {
            CurChairId = input.ReadInt32();
            break;
          }
          case 32: {
            NewAct = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            cards_.AddEntriesFrom(ref input, _repeated_cards_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TPMsgAddBetResp : pb::IMessage<TPMsgAddBetResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TPMsgAddBetResp> _parser = new pb::MessageParser<TPMsgAddBetResp>(() => new TPMsgAddBetResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TPMsgAddBetResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TeenPattiIndia.TeenPattiIndiaReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgAddBetResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgAddBetResp(TPMsgAddBetResp other) : this() {
      addChairId_ = other.addChairId_;
      addScore_ = other.addScore_;
      betType_ = other.betType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgAddBetResp Clone() {
      return new TPMsgAddBetResp(this);
    }

    /// <summary>Field number for the "add_chair_id" field.</summary>
    public const int AddChairIdFieldNumber = 1;
    private int addChairId_;
    /// <summary>
    ///ä¸æ³¨ç©å®¶æ¤å­å·
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddChairId {
      get { return addChairId_; }
      set {
        addChairId_ = value;
      }
    }

    /// <summary>Field number for the "add_score" field.</summary>
    public const int AddScoreFieldNumber = 2;
    private long addScore_;
    /// <summary>
    ///ä¸æ³¨éé¢
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AddScore {
      get { return addScore_; }
      set {
        addScore_ = value;
      }
    }

    /// <summary>Field number for the "bet_type" field.</summary>
    public const int BetTypeFieldNumber = 3;
    private long betType_;
    /// <summary>
    ///ä¸æ³¨è¡ä¸ºç±»å  ETPGameAction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BetType {
      get { return betType_; }
      set {
        betType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TPMsgAddBetResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TPMsgAddBetResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AddChairId != other.AddChairId) return false;
      if (AddScore != other.AddScore) return false;
      if (BetType != other.BetType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AddChairId != 0) hash ^= AddChairId.GetHashCode();
      if (AddScore != 0L) hash ^= AddScore.GetHashCode();
      if (BetType != 0L) hash ^= BetType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AddChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AddChairId);
      }
      if (AddScore != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AddScore);
      }
      if (BetType != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BetType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AddChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AddChairId);
      }
      if (AddScore != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AddScore);
      }
      if (BetType != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BetType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AddChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddChairId);
      }
      if (AddScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AddScore);
      }
      if (BetType != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BetType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TPMsgAddBetResp other) {
      if (other == null) {
        return;
      }
      if (other.AddChairId != 0) {
        AddChairId = other.AddChairId;
      }
      if (other.AddScore != 0L) {
        AddScore = other.AddScore;
      }
      if (other.BetType != 0L) {
        BetType = other.BetType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AddChairId = input.ReadInt32();
            break;
          }
          case 16: {
            AddScore = input.ReadInt64();
            break;
          }
          case 24: {
            BetType = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AddChairId = input.ReadInt32();
            break;
          }
          case 16: {
            AddScore = input.ReadInt64();
            break;
          }
          case 24: {
            BetType = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///ç©å®¶è¯·æ±æ¯ç
  /// </summary>
  public sealed partial class TPMsgCompareCardResp : pb::IMessage<TPMsgCompareCardResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TPMsgCompareCardResp> _parser = new pb::MessageParser<TPMsgCompareCardResp>(() => new TPMsgCompareCardResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TPMsgCompareCardResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TeenPattiIndia.TeenPattiIndiaReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgCompareCardResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgCompareCardResp(TPMsgCompareCardResp other) : this() {
      chairId_ = other.chairId_;
      compareId_ = other.compareId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgCompareCardResp Clone() {
      return new TPMsgCompareCardResp(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    /// <summary>
    ///ç©å®¶æ¤å­å·
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "compare_id" field.</summary>
    public const int CompareIdFieldNumber = 2;
    private int compareId_;
    /// <summary>
    ///è¢«æ¯ç©å®¶æ¤å­å·
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompareId {
      get { return compareId_; }
      set {
        compareId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TPMsgCompareCardResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TPMsgCompareCardResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if (CompareId != other.CompareId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (CompareId != 0) hash ^= CompareId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (CompareId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CompareId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (CompareId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CompareId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (CompareId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompareId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TPMsgCompareCardResp other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.CompareId != 0) {
        CompareId = other.CompareId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            CompareId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            CompareId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///ç©å®¶æ¯çç»æ
  /// </summary>
  public sealed partial class TPMsgCompareCardRetResp : pb::IMessage<TPMsgCompareCardRetResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TPMsgCompareCardRetResp> _parser = new pb::MessageParser<TPMsgCompareCardRetResp>(() => new TPMsgCompareCardRetResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TPMsgCompareCardRetResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TeenPattiIndia.TeenPattiIndiaReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgCompareCardRetResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgCompareCardRetResp(TPMsgCompareCardRetResp other) : this() {
      currentChairId_ = other.currentChairId_;
      currentAct_ = other.currentAct_;
      lostId_ = other.lostId_;
      compareId_ = other.compareId_;
      passiveId_ = other.passiveId_;
      compareType_ = other.compareType_;
      passiveType_ = other.passiveType_;
      compareCards_ = other.compareCards_.Clone();
      passiveCards_ = other.passiveCards_.Clone();
      isAgree_ = other.isAgree_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgCompareCardRetResp Clone() {
      return new TPMsgCompareCardRetResp(this);
    }

    /// <summary>Field number for the "current_chair_id" field.</summary>
    public const int CurrentChairIdFieldNumber = 1;
    private int currentChairId_;
    /// <summary>
    ///ä¸ä¸ªæä½ç©å®¶æ¤å­å·
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentChairId {
      get { return currentChairId_; }
      set {
        currentChairId_ = value;
      }
    }

    /// <summary>Field number for the "current_act" field.</summary>
    public const int CurrentActFieldNumber = 2;
    private int currentAct_;
    /// <summary>
    ///å½åæä½ç =
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentAct {
      get { return currentAct_; }
      set {
        currentAct_ = value;
      }
    }

    /// <summary>Field number for the "lost_id" field.</summary>
    public const int LostIdFieldNumber = 3;
    private int lostId_;
    /// <summary>
    ///è¾å®¶æ¤å­å·
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LostId {
      get { return lostId_; }
      set {
        lostId_ = value;
      }
    }

    /// <summary>Field number for the "compare_id" field.</summary>
    public const int CompareIdFieldNumber = 4;
    private int compareId_;
    /// <summary>
    ///æ¯çæ¤å­å·
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompareId {
      get { return compareId_; }
      set {
        compareId_ = value;
      }
    }

    /// <summary>Field number for the "passive_id" field.</summary>
    public const int PassiveIdFieldNumber = 5;
    private int passiveId_;
    /// <summary>
    ///è¢«æ¯æ¤å­å·
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PassiveId {
      get { return passiveId_; }
      set {
        passiveId_ = value;
      }
    }

    /// <summary>Field number for the "compare_type" field.</summary>
    public const int CompareTypeFieldNumber = 6;
    private int compareType_;
    /// <summary>
    ///æ¯çç©å®¶çå
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompareType {
      get { return compareType_; }
      set {
        compareType_ = value;
      }
    }

    /// <summary>Field number for the "passive_type" field.</summary>
    public const int PassiveTypeFieldNumber = 7;
    private int passiveType_;
    /// <summary>
    ///è¢«æ¯ç©å®¶çå
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PassiveType {
      get { return passiveType_; }
      set {
        passiveType_ = value;
      }
    }

    /// <summary>Field number for the "compare_cards" field.</summary>
    public const int CompareCardsFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_compareCards_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> compareCards_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///æ¯çç©å®¶æç
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CompareCards {
      get { return compareCards_; }
    }

    /// <summary>Field number for the "passive_cards" field.</summary>
    public const int PassiveCardsFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_passiveCards_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> passiveCards_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///è¢«æ¯ç©å®¶æç
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PassiveCards {
      get { return passiveCards_; }
    }

    /// <summary>Field number for the "is_agree" field.</summary>
    public const int IsAgreeFieldNumber = 10;
    private bool isAgree_;
    /// <summary>
    ///åæå¦
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAgree {
      get { return isAgree_; }
      set {
        isAgree_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TPMsgCompareCardRetResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TPMsgCompareCardRetResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentChairId != other.CurrentChairId) return false;
      if (CurrentAct != other.CurrentAct) return false;
      if (LostId != other.LostId) return false;
      if (CompareId != other.CompareId) return false;
      if (PassiveId != other.PassiveId) return false;
      if (CompareType != other.CompareType) return false;
      if (PassiveType != other.PassiveType) return false;
      if(!compareCards_.Equals(other.compareCards_)) return false;
      if(!passiveCards_.Equals(other.passiveCards_)) return false;
      if (IsAgree != other.IsAgree) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentChairId != 0) hash ^= CurrentChairId.GetHashCode();
      if (CurrentAct != 0) hash ^= CurrentAct.GetHashCode();
      if (LostId != 0) hash ^= LostId.GetHashCode();
      if (CompareId != 0) hash ^= CompareId.GetHashCode();
      if (PassiveId != 0) hash ^= PassiveId.GetHashCode();
      if (CompareType != 0) hash ^= CompareType.GetHashCode();
      if (PassiveType != 0) hash ^= PassiveType.GetHashCode();
      hash ^= compareCards_.GetHashCode();
      hash ^= passiveCards_.GetHashCode();
      if (IsAgree != false) hash ^= IsAgree.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CurrentChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrentChairId);
      }
      if (CurrentAct != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrentAct);
      }
      if (LostId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LostId);
      }
      if (CompareId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CompareId);
      }
      if (PassiveId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PassiveId);
      }
      if (CompareType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CompareType);
      }
      if (PassiveType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PassiveType);
      }
      compareCards_.WriteTo(output, _repeated_compareCards_codec);
      passiveCards_.WriteTo(output, _repeated_passiveCards_codec);
      if (IsAgree != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsAgree);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CurrentChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrentChairId);
      }
      if (CurrentAct != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrentAct);
      }
      if (LostId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LostId);
      }
      if (CompareId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CompareId);
      }
      if (PassiveId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PassiveId);
      }
      if (CompareType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CompareType);
      }
      if (PassiveType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PassiveType);
      }
      compareCards_.WriteTo(ref output, _repeated_compareCards_codec);
      passiveCards_.WriteTo(ref output, _repeated_passiveCards_codec);
      if (IsAgree != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsAgree);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentChairId);
      }
      if (CurrentAct != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentAct);
      }
      if (LostId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LostId);
      }
      if (CompareId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompareId);
      }
      if (PassiveId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PassiveId);
      }
      if (CompareType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompareType);
      }
      if (PassiveType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PassiveType);
      }
      size += compareCards_.CalculateSize(_repeated_compareCards_codec);
      size += passiveCards_.CalculateSize(_repeated_passiveCards_codec);
      if (IsAgree != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TPMsgCompareCardRetResp other) {
      if (other == null) {
        return;
      }
      if (other.CurrentChairId != 0) {
        CurrentChairId = other.CurrentChairId;
      }
      if (other.CurrentAct != 0) {
        CurrentAct = other.CurrentAct;
      }
      if (other.LostId != 0) {
        LostId = other.LostId;
      }
      if (other.CompareId != 0) {
        CompareId = other.CompareId;
      }
      if (other.PassiveId != 0) {
        PassiveId = other.PassiveId;
      }
      if (other.CompareType != 0) {
        CompareType = other.CompareType;
      }
      if (other.PassiveType != 0) {
        PassiveType = other.PassiveType;
      }
      compareCards_.Add(other.compareCards_);
      passiveCards_.Add(other.passiveCards_);
      if (other.IsAgree != false) {
        IsAgree = other.IsAgree;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurrentChairId = input.ReadInt32();
            break;
          }
          case 16: {
            CurrentAct = input.ReadInt32();
            break;
          }
          case 24: {
            LostId = input.ReadInt32();
            break;
          }
          case 32: {
            CompareId = input.ReadInt32();
            break;
          }
          case 40: {
            PassiveId = input.ReadInt32();
            break;
          }
          case 48: {
            CompareType = input.ReadInt32();
            break;
          }
          case 56: {
            PassiveType = input.ReadInt32();
            break;
          }
          case 66:
          case 64: {
            compareCards_.AddEntriesFrom(input, _repeated_compareCards_codec);
            break;
          }
          case 74:
          case 72: {
            passiveCards_.AddEntriesFrom(input, _repeated_passiveCards_codec);
            break;
          }
          case 80: {
            IsAgree = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CurrentChairId = input.ReadInt32();
            break;
          }
          case 16: {
            CurrentAct = input.ReadInt32();
            break;
          }
          case 24: {
            LostId = input.ReadInt32();
            break;
          }
          case 32: {
            CompareId = input.ReadInt32();
            break;
          }
          case 40: {
            PassiveId = input.ReadInt32();
            break;
          }
          case 48: {
            CompareType = input.ReadInt32();
            break;
          }
          case 56: {
            PassiveType = input.ReadInt32();
            break;
          }
          case 66:
          case 64: {
            compareCards_.AddEntriesFrom(ref input, _repeated_compareCards_codec);
            break;
          }
          case 74:
          case 72: {
            passiveCards_.AddEntriesFrom(ref input, _repeated_passiveCards_codec);
            break;
          }
          case 80: {
            IsAgree = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///æ¸¸æç»æ                                  
  /// </summary>
  public sealed partial class TPMsgGameResult : pb::IMessage<TPMsgGameResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TPMsgGameResult> _parser = new pb::MessageParser<TPMsgGameResult>(() => new TPMsgGameResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TPMsgGameResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TeenPattiIndia.TeenPattiIndiaReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgGameResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgGameResult(TPMsgGameResult other) : this() {
      gameTax_ = other.gameTax_;
      gameScore_ = other.gameScore_.Clone();
      cardType_ = other.cardType_.Clone();
      playerHands_ = other.playerHands_.Clone();
      endState_ = other.endState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMsgGameResult Clone() {
      return new TPMsgGameResult(this);
    }

    /// <summary>Field number for the "game_tax" field.</summary>
    public const int GameTaxFieldNumber = 1;
    private int gameTax_;
    /// <summary>
    ///ç¨æ¶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameTax {
      get { return gameTax_; }
      set {
        gameTax_ = value;
      }
    }

    /// <summary>Field number for the "game_score" field.</summary>
    public const int GameScoreFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_gameScore_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> gameScore_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///è¾èµ¢å
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> GameScore {
      get { return gameScore_; }
    }

    /// <summary>Field number for the "card_type" field.</summary>
    public const int CardTypeFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_cardType_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> cardType_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///çå
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CardType {
      get { return cardType_; }
    }

    /// <summary>Field number for the "player_hands" field.</summary>
    public const int PlayerHandsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::TeenPattiIndia.TPMsgHandCards> _repeated_playerHands_codec
        = pb::FieldCodec.ForMessage(34, global::TeenPattiIndia.TPMsgHandCards.Parser);
    private readonly pbc::RepeatedField<global::TeenPattiIndia.TPMsgHandCards> playerHands_ = new pbc::RepeatedField<global::TeenPattiIndia.TPMsgHandCards>();
    /// <summary>
    ///æç
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TeenPattiIndia.TPMsgHandCards> PlayerHands {
      get { return playerHands_; }
    }

    /// <summary>Field number for the "end_state" field.</summary>
    public const int EndStateFieldNumber = 5;
    private int endState_;
    /// <summary>
    ///ç»æç¶æ  1 æ¯çç»æ 2 å¨åºç§ç
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndState {
      get { return endState_; }
      set {
        endState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TPMsgGameResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TPMsgGameResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameTax != other.GameTax) return false;
      if(!gameScore_.Equals(other.gameScore_)) return false;
      if(!cardType_.Equals(other.cardType_)) return false;
      if(!playerHands_.Equals(other.playerHands_)) return false;
      if (EndState != other.EndState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameTax != 0) hash ^= GameTax.GetHashCode();
      hash ^= gameScore_.GetHashCode();
      hash ^= cardType_.GetHashCode();
      hash ^= playerHands_.GetHashCode();
      if (EndState != 0) hash ^= EndState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GameTax != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameTax);
      }
      gameScore_.WriteTo(output, _repeated_gameScore_codec);
      cardType_.WriteTo(output, _repeated_cardType_codec);
      playerHands_.WriteTo(output, _repeated_playerHands_codec);
      if (EndState != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EndState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GameTax != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameTax);
      }
      gameScore_.WriteTo(ref output, _repeated_gameScore_codec);
      cardType_.WriteTo(ref output, _repeated_cardType_codec);
      playerHands_.WriteTo(ref output, _repeated_playerHands_codec);
      if (EndState != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EndState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameTax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameTax);
      }
      size += gameScore_.CalculateSize(_repeated_gameScore_codec);
      size += cardType_.CalculateSize(_repeated_cardType_codec);
      size += playerHands_.CalculateSize(_repeated_playerHands_codec);
      if (EndState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TPMsgGameResult other) {
      if (other == null) {
        return;
      }
      if (other.GameTax != 0) {
        GameTax = other.GameTax;
      }
      gameScore_.Add(other.gameScore_);
      cardType_.Add(other.cardType_);
      playerHands_.Add(other.playerHands_);
      if (other.EndState != 0) {
        EndState = other.EndState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GameTax = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            gameScore_.AddEntriesFrom(input, _repeated_gameScore_codec);
            break;
          }
          case 26:
          case 24: {
            cardType_.AddEntriesFrom(input, _repeated_cardType_codec);
            break;
          }
          case 34: {
            playerHands_.AddEntriesFrom(input, _repeated_playerHands_codec);
            break;
          }
          case 40: {
            EndState = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GameTax = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            gameScore_.AddEntriesFrom(ref input, _repeated_gameScore_codec);
            break;
          }
          case 26:
          case 24: {
            cardType_.AddEntriesFrom(ref input, _repeated_cardType_codec);
            break;
          }
          case 34: {
            playerHands_.AddEntriesFrom(ref input, _repeated_playerHands_codec);
            break;
          }
          case 40: {
            EndState = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///////////////////////////////////////////////////////////////æºå¨äººæ¶æ¯///////////////////////////////////////
  /// </summary>
  public sealed partial class TPMSgNotifyPlayerAct : pb::IMessage<TPMSgNotifyPlayerAct>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TPMSgNotifyPlayerAct> _parser = new pb::MessageParser<TPMSgNotifyPlayerAct>(() => new TPMSgNotifyPlayerAct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TPMSgNotifyPlayerAct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TeenPattiIndia.TeenPattiIndiaReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMSgNotifyPlayerAct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMSgNotifyPlayerAct(TPMSgNotifyPlayerAct other) : this() {
      chairId_ = other.chairId_;
      act_ = other.act_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPMSgNotifyPlayerAct Clone() {
      return new TPMSgNotifyPlayerAct(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    /// <summary>
    ///ç©å®¶æ¤å­å·
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "act" field.</summary>
    public const int ActFieldNumber = 2;
    private int act_;
    /// <summary>
    ///è¢«æ¯ç©å®¶æ¤å­å·
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Act {
      get { return act_; }
      set {
        act_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TPMSgNotifyPlayerAct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TPMSgNotifyPlayerAct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if (Act != other.Act) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (Act != 0) hash ^= Act.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (Act != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Act);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (Act != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Act);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (Act != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Act);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TPMSgNotifyPlayerAct other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.Act != 0) {
        Act = other.Act;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            Act = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            Act = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
