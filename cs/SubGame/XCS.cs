// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/SubGame/XCS.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace XCS {

  /// <summary>Holder for reflection information generated from Proto/SubGame/XCS.proto</summary>
  public static partial class XCSReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/SubGame/XCS.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XCSReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdQcm90by9TdWJHYW1lL1hDUy5wcm90bxIDWENTIrgBCgxTQ19TY2VuZUlu",
            "Zm8SEAoIY3VyX2NoaXAYASABKAUSEgoKZnJlZV9jb3VudBgCIAEoBRIRCglj",
            "aGlwX2xpc3QYAyADKAUSEQoJbGluZV9yYXRlGAQgAygFEhEKCWdvZF9zY29y",
            "ZRgFIAEoAxISCgpsaW1pdF9jaGlwGAYgASgFEhMKC2lsaW1pdF9jaGlwGAcg",
            "ASgFEg8KB3JlX3R1cm4YCCABKAUSDwoHamFja3BvdBgKIAEoAyIdCghMaW5l",
            "VHlwZRIRCglsaW5lX3R5cGUYASADKAUigQIKEENNRF8zRF9TQ19SZXN1bHQS",
            "DAoEaWNvbhgBIAMoBRIgCglsaW5lX3R5cGUYAiADKAsyDS5YQ1MuTGluZVR5",
            "cGUSFgoOY2FpX3NoZW5fY291bnQYAyABKAUSEgoKZnJlZV9jb3VudBgEIAEo",
            "BRIRCglnYW1lX3R5cGUYBSABKAUSEQoJd2luX3Njb3JlGAYgASgDEgwKBHRl",
            "bXAYByABKAUSEgoKbGltaXRfY2hpcBgIIAEoBRITCgtsaW1pdF9jaGlwMhgK",
            "IAEoBRISCgpzdXBlcl9yYXRlGAsgASgFEg8KB3JlX3R1cm4YDCABKAUSDwoH",
            "amFja3BvdBgNIAEoAypoCglFTXNnSURYQ1MSFQoRU1VCX0NTX0dBTUVfU1RB",
            "UlQQABISCg5TVUJfQ1NfSkFDS1BPVBABEhcKE1NVQl9TQ19TRU5EX0FDQ1BP",
            "T0wQAhIXChNTVUJfU0NfUkVTVUxUU19JTkZPEANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::XCS.EMsgIDXCS), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::XCS.SC_SceneInfo), global::XCS.SC_SceneInfo.Parser, new[]{ "CurChip", "FreeCount", "ChipList", "LineRate", "GodScore", "LimitChip", "IlimitChip", "ReTurn", "Jackpot" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XCS.LineType), global::XCS.LineType.Parser, new[]{ "LineType_" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XCS.CMD_3D_SC_Result), global::XCS.CMD_3D_SC_Result.Parser, new[]{ "Icon", "LineType", "CaiShenCount", "FreeCount", "GameType", "WinScore", "Temp", "LimitChip", "LimitChip2", "SuperRate", "ReTurn", "Jackpot" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EMsgIDXCS {
    /// <summary>
    ///开始游戏(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("SUB_CS_GAME_START")] SubCsGameStart = 0,
    /// <summary>
    ///请求彩金分数
    /// </summary>
    [pbr::OriginalName("SUB_CS_JACKPOT")] SubCsJackpot = 1,
    /// <summary>
    ///奖池返回(MsgCommonN64)
    /// </summary>
    [pbr::OriginalName("SUB_SC_SEND_ACCPOOL")] SubScSendAccpool = 2,
    /// <summary>
    ///玛丽结果返回
    /// </summary>
    [pbr::OriginalName("SUB_SC_RESULTS_INFO")] SubScResultsInfo = 3,
  }

  #endregion

  #region Messages
  public sealed partial class SC_SceneInfo : pb::IMessage<SC_SceneInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SC_SceneInfo> _parser = new pb::MessageParser<SC_SceneInfo>(() => new SC_SceneInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_SceneInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XCS.XCSReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo(SC_SceneInfo other) : this() {
      curChip_ = other.curChip_;
      freeCount_ = other.freeCount_;
      chipList_ = other.chipList_.Clone();
      lineRate_ = other.lineRate_.Clone();
      godScore_ = other.godScore_;
      limitChip_ = other.limitChip_;
      ilimitChip_ = other.ilimitChip_;
      reTurn_ = other.reTurn_;
      jackpot_ = other.jackpot_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo Clone() {
      return new SC_SceneInfo(this);
    }

    /// <summary>Field number for the "cur_chip" field.</summary>
    public const int CurChipFieldNumber = 1;
    private int curChip_;
    /// <summary>
    /// 下注列表的一个
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurChip {
      get { return curChip_; }
      set {
        curChip_ = value;
      }
    }

    /// <summary>Field number for the "free_count" field.</summary>
    public const int FreeCountFieldNumber = 2;
    private int freeCount_;
    /// <summary>
    /// 剩余免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeCount {
      get { return freeCount_; }
      set {
        freeCount_ = value;
      }
    }

    /// <summary>Field number for the "chip_list" field.</summary>
    public const int ChipListFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_chipList_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> chipList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 下注列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ChipList {
      get { return chipList_; }
    }

    /// <summary>Field number for the "line_rate" field.</summary>
    public const int LineRateFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_lineRate_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> lineRate_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 财神倍数 免费赔付
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LineRate {
      get { return lineRate_; }
    }

    /// <summary>Field number for the "god_score" field.</summary>
    public const int GodScoreFieldNumber = 5;
    private long godScore_;
    /// <summary>
    /// 财神阶段总分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GodScore {
      get { return godScore_; }
      set {
        godScore_ = value;
      }
    }

    /// <summary>Field number for the "limit_chip" field.</summary>
    public const int LimitChipFieldNumber = 6;
    private int limitChip_;
    /// <summary>
    /// 不知道干嘛 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LimitChip {
      get { return limitChip_; }
      set {
        limitChip_ = value;
      }
    }

    /// <summary>Field number for the "ilimit_chip" field.</summary>
    public const int IlimitChipFieldNumber = 7;
    private int ilimitChip_;
    /// <summary>
    /// 不知道干嘛
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IlimitChip {
      get { return ilimitChip_; }
      set {
        ilimitChip_ = value;
      }
    }

    /// <summary>Field number for the "re_turn" field.</summary>
    public const int ReTurnFieldNumber = 8;
    private int reTurn_;
    /// <summary>
    /// 重转(0重转 1不)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReTurn {
      get { return reTurn_; }
      set {
        reTurn_ = value;
      }
    }

    /// <summary>Field number for the "jackpot" field.</summary>
    public const int JackpotFieldNumber = 10;
    private long jackpot_;
    /// <summary>
    /// 奖池当前分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Jackpot {
      get { return jackpot_; }
      set {
        jackpot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_SceneInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_SceneInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurChip != other.CurChip) return false;
      if (FreeCount != other.FreeCount) return false;
      if(!chipList_.Equals(other.chipList_)) return false;
      if(!lineRate_.Equals(other.lineRate_)) return false;
      if (GodScore != other.GodScore) return false;
      if (LimitChip != other.LimitChip) return false;
      if (IlimitChip != other.IlimitChip) return false;
      if (ReTurn != other.ReTurn) return false;
      if (Jackpot != other.Jackpot) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurChip != 0) hash ^= CurChip.GetHashCode();
      if (FreeCount != 0) hash ^= FreeCount.GetHashCode();
      hash ^= chipList_.GetHashCode();
      hash ^= lineRate_.GetHashCode();
      if (GodScore != 0L) hash ^= GodScore.GetHashCode();
      if (LimitChip != 0) hash ^= LimitChip.GetHashCode();
      if (IlimitChip != 0) hash ^= IlimitChip.GetHashCode();
      if (ReTurn != 0) hash ^= ReTurn.GetHashCode();
      if (Jackpot != 0L) hash ^= Jackpot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CurChip != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurChip);
      }
      if (FreeCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FreeCount);
      }
      chipList_.WriteTo(output, _repeated_chipList_codec);
      lineRate_.WriteTo(output, _repeated_lineRate_codec);
      if (GodScore != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(GodScore);
      }
      if (LimitChip != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LimitChip);
      }
      if (IlimitChip != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(IlimitChip);
      }
      if (ReTurn != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ReTurn);
      }
      if (Jackpot != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(Jackpot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CurChip != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurChip);
      }
      if (FreeCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FreeCount);
      }
      chipList_.WriteTo(ref output, _repeated_chipList_codec);
      lineRate_.WriteTo(ref output, _repeated_lineRate_codec);
      if (GodScore != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(GodScore);
      }
      if (LimitChip != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LimitChip);
      }
      if (IlimitChip != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(IlimitChip);
      }
      if (ReTurn != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ReTurn);
      }
      if (Jackpot != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(Jackpot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurChip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurChip);
      }
      if (FreeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeCount);
      }
      size += chipList_.CalculateSize(_repeated_chipList_codec);
      size += lineRate_.CalculateSize(_repeated_lineRate_codec);
      if (GodScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GodScore);
      }
      if (LimitChip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LimitChip);
      }
      if (IlimitChip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IlimitChip);
      }
      if (ReTurn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReTurn);
      }
      if (Jackpot != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Jackpot);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_SceneInfo other) {
      if (other == null) {
        return;
      }
      if (other.CurChip != 0) {
        CurChip = other.CurChip;
      }
      if (other.FreeCount != 0) {
        FreeCount = other.FreeCount;
      }
      chipList_.Add(other.chipList_);
      lineRate_.Add(other.lineRate_);
      if (other.GodScore != 0L) {
        GodScore = other.GodScore;
      }
      if (other.LimitChip != 0) {
        LimitChip = other.LimitChip;
      }
      if (other.IlimitChip != 0) {
        IlimitChip = other.IlimitChip;
      }
      if (other.ReTurn != 0) {
        ReTurn = other.ReTurn;
      }
      if (other.Jackpot != 0L) {
        Jackpot = other.Jackpot;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurChip = input.ReadInt32();
            break;
          }
          case 16: {
            FreeCount = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            chipList_.AddEntriesFrom(input, _repeated_chipList_codec);
            break;
          }
          case 34:
          case 32: {
            lineRate_.AddEntriesFrom(input, _repeated_lineRate_codec);
            break;
          }
          case 40: {
            GodScore = input.ReadInt64();
            break;
          }
          case 48: {
            LimitChip = input.ReadInt32();
            break;
          }
          case 56: {
            IlimitChip = input.ReadInt32();
            break;
          }
          case 64: {
            ReTurn = input.ReadInt32();
            break;
          }
          case 80: {
            Jackpot = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CurChip = input.ReadInt32();
            break;
          }
          case 16: {
            FreeCount = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            chipList_.AddEntriesFrom(ref input, _repeated_chipList_codec);
            break;
          }
          case 34:
          case 32: {
            lineRate_.AddEntriesFrom(ref input, _repeated_lineRate_codec);
            break;
          }
          case 40: {
            GodScore = input.ReadInt64();
            break;
          }
          case 48: {
            LimitChip = input.ReadInt32();
            break;
          }
          case 56: {
            IlimitChip = input.ReadInt32();
            break;
          }
          case 64: {
            ReTurn = input.ReadInt32();
            break;
          }
          case 80: {
            Jackpot = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LineType : pb::IMessage<LineType>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LineType> _parser = new pb::MessageParser<LineType>(() => new LineType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LineType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XCS.XCSReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LineType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LineType(LineType other) : this() {
      lineType_ = other.lineType_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LineType Clone() {
      return new LineType(this);
    }

    /// <summary>Field number for the "line_type" field.</summary>
    public const int LineType_FieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_lineType_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> lineType_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LineType_ {
      get { return lineType_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LineType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LineType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!lineType_.Equals(other.lineType_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= lineType_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      lineType_.WriteTo(output, _repeated_lineType_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      lineType_.WriteTo(ref output, _repeated_lineType_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += lineType_.CalculateSize(_repeated_lineType_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LineType other) {
      if (other == null) {
        return;
      }
      lineType_.Add(other.lineType_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            lineType_.AddEntriesFrom(input, _repeated_lineType_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            lineType_.AddEntriesFrom(ref input, _repeated_lineType_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 游戏结果返回                        
  /// </summary>
  public sealed partial class CMD_3D_SC_Result : pb::IMessage<CMD_3D_SC_Result>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_3D_SC_Result> _parser = new pb::MessageParser<CMD_3D_SC_Result>(() => new CMD_3D_SC_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_3D_SC_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XCS.XCSReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result(CMD_3D_SC_Result other) : this() {
      icon_ = other.icon_.Clone();
      lineType_ = other.lineType_.Clone();
      caiShenCount_ = other.caiShenCount_;
      freeCount_ = other.freeCount_;
      gameType_ = other.gameType_;
      winScore_ = other.winScore_;
      temp_ = other.temp_;
      limitChip_ = other.limitChip_;
      limitChip2_ = other.limitChip2_;
      superRate_ = other.superRate_;
      reTurn_ = other.reTurn_;
      jackpot_ = other.jackpot_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result Clone() {
      return new CMD_3D_SC_Result(this);
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_icon_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> icon_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 桌面结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Icon {
      get { return icon_; }
    }

    /// <summary>Field number for the "line_type" field.</summary>
    public const int LineTypeFieldNumber = 2;
    private static readonly pb::FieldCodec<global::XCS.LineType> _repeated_lineType_codec
        = pb::FieldCodec.ForMessage(18, global::XCS.LineType.Parser);
    private readonly pbc::RepeatedField<global::XCS.LineType> lineType_ = new pbc::RepeatedField<global::XCS.LineType>();
    /// <summary>
    /// 线类型(不知道干嘛)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XCS.LineType> LineType {
      get { return lineType_; }
    }

    /// <summary>Field number for the "cai_shen_count" field.</summary>
    public const int CaiShenCountFieldNumber = 3;
    private int caiShenCount_;
    /// <summary>
    /// 财神个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CaiShenCount {
      get { return caiShenCount_; }
      set {
        caiShenCount_ = value;
      }
    }

    /// <summary>Field number for the "free_count" field.</summary>
    public const int FreeCountFieldNumber = 4;
    private int freeCount_;
    /// <summary>
    /// 免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeCount {
      get { return freeCount_; }
      set {
        freeCount_ = value;
      }
    }

    /// <summary>Field number for the "game_type" field.</summary>
    public const int GameTypeFieldNumber = 5;
    private int gameType_;
    /// <summary>
    /// 0:普通 1:财源滚滚 2:金玉满堂
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameType {
      get { return gameType_; }
      set {
        gameType_ = value;
      }
    }

    /// <summary>Field number for the "win_score" field.</summary>
    public const int WinScoreFieldNumber = 6;
    private long winScore_;
    /// <summary>
    /// 总得分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WinScore {
      get { return winScore_; }
      set {
        winScore_ = value;
      }
    }

    /// <summary>Field number for the "temp" field.</summary>
    public const int TempFieldNumber = 7;
    private int temp_;
    /// <summary>
    /// 不知道干嘛
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Temp {
      get { return temp_; }
      set {
        temp_ = value;
      }
    }

    /// <summary>Field number for the "limit_chip" field.</summary>
    public const int LimitChipFieldNumber = 8;
    private int limitChip_;
    /// <summary>
    /// 不知道干嘛 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LimitChip {
      get { return limitChip_; }
      set {
        limitChip_ = value;
      }
    }

    /// <summary>Field number for the "limit_chip2" field.</summary>
    public const int LimitChip2FieldNumber = 10;
    private int limitChip2_;
    /// <summary>
    /// 不知道干嘛
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LimitChip2 {
      get { return limitChip2_; }
      set {
        limitChip2_ = value;
      }
    }

    /// <summary>Field number for the "super_rate" field.</summary>
    public const int SuperRateFieldNumber = 11;
    private int superRate_;
    /// <summary>
    /// 是否超级倍率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SuperRate {
      get { return superRate_; }
      set {
        superRate_ = value;
      }
    }

    /// <summary>Field number for the "re_turn" field.</summary>
    public const int ReTurnFieldNumber = 12;
    private int reTurn_;
    /// <summary>
    /// 是否重转
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReTurn {
      get { return reTurn_; }
      set {
        reTurn_ = value;
      }
    }

    /// <summary>Field number for the "jackpot" field.</summary>
    public const int JackpotFieldNumber = 13;
    private long jackpot_;
    /// <summary>
    /// 奖池分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Jackpot {
      get { return jackpot_; }
      set {
        jackpot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_3D_SC_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_3D_SC_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!icon_.Equals(other.icon_)) return false;
      if(!lineType_.Equals(other.lineType_)) return false;
      if (CaiShenCount != other.CaiShenCount) return false;
      if (FreeCount != other.FreeCount) return false;
      if (GameType != other.GameType) return false;
      if (WinScore != other.WinScore) return false;
      if (Temp != other.Temp) return false;
      if (LimitChip != other.LimitChip) return false;
      if (LimitChip2 != other.LimitChip2) return false;
      if (SuperRate != other.SuperRate) return false;
      if (ReTurn != other.ReTurn) return false;
      if (Jackpot != other.Jackpot) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= icon_.GetHashCode();
      hash ^= lineType_.GetHashCode();
      if (CaiShenCount != 0) hash ^= CaiShenCount.GetHashCode();
      if (FreeCount != 0) hash ^= FreeCount.GetHashCode();
      if (GameType != 0) hash ^= GameType.GetHashCode();
      if (WinScore != 0L) hash ^= WinScore.GetHashCode();
      if (Temp != 0) hash ^= Temp.GetHashCode();
      if (LimitChip != 0) hash ^= LimitChip.GetHashCode();
      if (LimitChip2 != 0) hash ^= LimitChip2.GetHashCode();
      if (SuperRate != 0) hash ^= SuperRate.GetHashCode();
      if (ReTurn != 0) hash ^= ReTurn.GetHashCode();
      if (Jackpot != 0L) hash ^= Jackpot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      icon_.WriteTo(output, _repeated_icon_codec);
      lineType_.WriteTo(output, _repeated_lineType_codec);
      if (CaiShenCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CaiShenCount);
      }
      if (FreeCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FreeCount);
      }
      if (GameType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GameType);
      }
      if (WinScore != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(WinScore);
      }
      if (Temp != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Temp);
      }
      if (LimitChip != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(LimitChip);
      }
      if (LimitChip2 != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(LimitChip2);
      }
      if (SuperRate != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SuperRate);
      }
      if (ReTurn != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ReTurn);
      }
      if (Jackpot != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(Jackpot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      icon_.WriteTo(ref output, _repeated_icon_codec);
      lineType_.WriteTo(ref output, _repeated_lineType_codec);
      if (CaiShenCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CaiShenCount);
      }
      if (FreeCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FreeCount);
      }
      if (GameType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GameType);
      }
      if (WinScore != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(WinScore);
      }
      if (Temp != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Temp);
      }
      if (LimitChip != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(LimitChip);
      }
      if (LimitChip2 != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(LimitChip2);
      }
      if (SuperRate != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SuperRate);
      }
      if (ReTurn != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ReTurn);
      }
      if (Jackpot != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(Jackpot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += icon_.CalculateSize(_repeated_icon_codec);
      size += lineType_.CalculateSize(_repeated_lineType_codec);
      if (CaiShenCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CaiShenCount);
      }
      if (FreeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeCount);
      }
      if (GameType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameType);
      }
      if (WinScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WinScore);
      }
      if (Temp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Temp);
      }
      if (LimitChip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LimitChip);
      }
      if (LimitChip2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LimitChip2);
      }
      if (SuperRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuperRate);
      }
      if (ReTurn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReTurn);
      }
      if (Jackpot != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Jackpot);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_3D_SC_Result other) {
      if (other == null) {
        return;
      }
      icon_.Add(other.icon_);
      lineType_.Add(other.lineType_);
      if (other.CaiShenCount != 0) {
        CaiShenCount = other.CaiShenCount;
      }
      if (other.FreeCount != 0) {
        FreeCount = other.FreeCount;
      }
      if (other.GameType != 0) {
        GameType = other.GameType;
      }
      if (other.WinScore != 0L) {
        WinScore = other.WinScore;
      }
      if (other.Temp != 0) {
        Temp = other.Temp;
      }
      if (other.LimitChip != 0) {
        LimitChip = other.LimitChip;
      }
      if (other.LimitChip2 != 0) {
        LimitChip2 = other.LimitChip2;
      }
      if (other.SuperRate != 0) {
        SuperRate = other.SuperRate;
      }
      if (other.ReTurn != 0) {
        ReTurn = other.ReTurn;
      }
      if (other.Jackpot != 0L) {
        Jackpot = other.Jackpot;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            icon_.AddEntriesFrom(input, _repeated_icon_codec);
            break;
          }
          case 18: {
            lineType_.AddEntriesFrom(input, _repeated_lineType_codec);
            break;
          }
          case 24: {
            CaiShenCount = input.ReadInt32();
            break;
          }
          case 32: {
            FreeCount = input.ReadInt32();
            break;
          }
          case 40: {
            GameType = input.ReadInt32();
            break;
          }
          case 48: {
            WinScore = input.ReadInt64();
            break;
          }
          case 56: {
            Temp = input.ReadInt32();
            break;
          }
          case 64: {
            LimitChip = input.ReadInt32();
            break;
          }
          case 80: {
            LimitChip2 = input.ReadInt32();
            break;
          }
          case 88: {
            SuperRate = input.ReadInt32();
            break;
          }
          case 96: {
            ReTurn = input.ReadInt32();
            break;
          }
          case 104: {
            Jackpot = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            icon_.AddEntriesFrom(ref input, _repeated_icon_codec);
            break;
          }
          case 18: {
            lineType_.AddEntriesFrom(ref input, _repeated_lineType_codec);
            break;
          }
          case 24: {
            CaiShenCount = input.ReadInt32();
            break;
          }
          case 32: {
            FreeCount = input.ReadInt32();
            break;
          }
          case 40: {
            GameType = input.ReadInt32();
            break;
          }
          case 48: {
            WinScore = input.ReadInt64();
            break;
          }
          case 56: {
            Temp = input.ReadInt32();
            break;
          }
          case 64: {
            LimitChip = input.ReadInt32();
            break;
          }
          case 80: {
            LimitChip2 = input.ReadInt32();
            break;
          }
          case 88: {
            SuperRate = input.ReadInt32();
            break;
          }
          case 96: {
            ReTurn = input.ReadInt32();
            break;
          }
          case 104: {
            Jackpot = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
